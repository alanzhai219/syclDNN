// This file was GENERATED by command:
//     pump.py register_tile.h.pump
// DO NOT EDIT BY HAND!!!

/*
 * Copyright Codeplay Software Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef PORTDNN_SRC_HELPERS_REGISTER_TILE_H_
#define PORTDNN_SRC_HELPERS_REGISTER_TILE_H_

namespace sycldnn {
namespace helpers {
/**
 * 3D tile of size X x Y x Z of data type T.
 */
template <typename T, int X, int Y, int Z>
struct RegisterTile3D {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) { return data_[x][y][z]; }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    return data_[x][y][z];
  }

 private:
  T data_[X][Y][Z];
};
/**
 * 2D tile of size X x Y of data type T.
 */
template <typename T, int X, int Y>
struct RegisterTile2D {
  SNN_ALWAYS_INLINE T& data(int x, int y) { return data_[x][y]; }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const { return data_[x][y]; }

 private:
  T data_[X][Y];
};
/**
 * 1D tile of size X of data type T.
 */
template <typename T, int X>
struct RegisterTile1D {
  SNN_ALWAYS_INLINE T& data(int x) { return data_[x]; }
  SNN_ALWAYS_INLINE T const& data(int x) const { return data_[x]; }

 private:
  T data_[X];
};

#ifdef SNN_REGISTER_TILE_SPECIALISATIONS
template <typename T>
struct RegisterTile1D<T, 1> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
};
template <typename T>
struct RegisterTile1D<T, 2> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
};
template <typename T>
struct RegisterTile1D<T, 3> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
};
template <typename T>
struct RegisterTile1D<T, 4> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
};
template <typename T>
struct RegisterTile1D<T, 5> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
};
template <typename T>
struct RegisterTile1D<T, 6> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
};
template <typename T>
struct RegisterTile1D<T, 7> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
};
template <typename T>
struct RegisterTile1D<T, 8> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
};
template <typename T>
struct RegisterTile1D<T, 9> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
};
template <typename T>
struct RegisterTile1D<T, 10> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
};
template <typename T>
struct RegisterTile1D<T, 11> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
};
template <typename T>
struct RegisterTile1D<T, 12> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
  T data_11_;
};
template <typename T>
struct RegisterTile1D<T, 13> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
  T data_11_;
  T data_12_;
};
template <typename T>
struct RegisterTile1D<T, 14> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
  T data_11_;
  T data_12_;
  T data_13_;
};
template <typename T>
struct RegisterTile1D<T, 15> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      case 14:
        return data_14_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      case 14:
        return data_14_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
  T data_11_;
  T data_12_;
  T data_13_;
  T data_14_;
};
template <typename T>
struct RegisterTile1D<T, 16> {
  SNN_ALWAYS_INLINE T& data(int x) {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      case 14:
        return data_14_;
      case 15:
        return data_15_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x) const {
    switch (x) {
      case 0:
        return data_0_;
      case 1:
        return data_1_;
      case 2:
        return data_2_;
      case 3:
        return data_3_;
      case 4:
        return data_4_;
      case 5:
        return data_5_;
      case 6:
        return data_6_;
      case 7:
        return data_7_;
      case 8:
        return data_8_;
      case 9:
        return data_9_;
      case 10:
        return data_10_;
      case 11:
        return data_11_;
      case 12:
        return data_12_;
      case 13:
        return data_13_;
      case 14:
        return data_14_;
      case 15:
        return data_15_;
      default:
        SNN_UNREACHABLE;
        return data_0_;
    }
  }

 private:
  T data_0_;
  T data_1_;
  T data_2_;
  T data_3_;
  T data_4_;
  T data_5_;
  T data_6_;
  T data_7_;
  T data_8_;
  T data_9_;
  T data_10_;
  T data_11_;
  T data_12_;
  T data_13_;
  T data_14_;
  T data_15_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 1, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 2, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 3, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 4, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 5, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 6, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 7, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 8, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 9, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 10, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 11, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 12, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
  RegisterTile1D<T, Y> data_11_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 13, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
  RegisterTile1D<T, Y> data_11_;
  RegisterTile1D<T, Y> data_12_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 14, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
  RegisterTile1D<T, Y> data_11_;
  RegisterTile1D<T, Y> data_12_;
  RegisterTile1D<T, Y> data_13_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 15, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      case 14:
        return data_14_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      case 14:
        return data_14_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
  RegisterTile1D<T, Y> data_11_;
  RegisterTile1D<T, Y> data_12_;
  RegisterTile1D<T, Y> data_13_;
  RegisterTile1D<T, Y> data_14_;
};
template <typename T, int Y>
struct RegisterTile2D<T, 16, Y> {
  SNN_ALWAYS_INLINE T& data(int x, int y) {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      case 14:
        return data_14_.data(y);
      case 15:
        return data_15_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y) const {
    switch (x) {
      case 0:
        return data_0_.data(y);
      case 1:
        return data_1_.data(y);
      case 2:
        return data_2_.data(y);
      case 3:
        return data_3_.data(y);
      case 4:
        return data_4_.data(y);
      case 5:
        return data_5_.data(y);
      case 6:
        return data_6_.data(y);
      case 7:
        return data_7_.data(y);
      case 8:
        return data_8_.data(y);
      case 9:
        return data_9_.data(y);
      case 10:
        return data_10_.data(y);
      case 11:
        return data_11_.data(y);
      case 12:
        return data_12_.data(y);
      case 13:
        return data_13_.data(y);
      case 14:
        return data_14_.data(y);
      case 15:
        return data_15_.data(y);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y);
    }
  }

 private:
  RegisterTile1D<T, Y> data_0_;
  RegisterTile1D<T, Y> data_1_;
  RegisterTile1D<T, Y> data_2_;
  RegisterTile1D<T, Y> data_3_;
  RegisterTile1D<T, Y> data_4_;
  RegisterTile1D<T, Y> data_5_;
  RegisterTile1D<T, Y> data_6_;
  RegisterTile1D<T, Y> data_7_;
  RegisterTile1D<T, Y> data_8_;
  RegisterTile1D<T, Y> data_9_;
  RegisterTile1D<T, Y> data_10_;
  RegisterTile1D<T, Y> data_11_;
  RegisterTile1D<T, Y> data_12_;
  RegisterTile1D<T, Y> data_13_;
  RegisterTile1D<T, Y> data_14_;
  RegisterTile1D<T, Y> data_15_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 1, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 2, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 3, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 4, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 5, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 6, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 7, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 8, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 9, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 10, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 11, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 12, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
  RegisterTile2D<T, Y, Z> data_11_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 13, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
  RegisterTile2D<T, Y, Z> data_11_;
  RegisterTile2D<T, Y, Z> data_12_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 14, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
  RegisterTile2D<T, Y, Z> data_11_;
  RegisterTile2D<T, Y, Z> data_12_;
  RegisterTile2D<T, Y, Z> data_13_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 15, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      case 14:
        return data_14_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      case 14:
        return data_14_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
  RegisterTile2D<T, Y, Z> data_11_;
  RegisterTile2D<T, Y, Z> data_12_;
  RegisterTile2D<T, Y, Z> data_13_;
  RegisterTile2D<T, Y, Z> data_14_;
};
template <typename T, int Y, int Z>
struct RegisterTile3D<T, 16, Y, Z> {
  SNN_ALWAYS_INLINE T& data(int x, int y, int z) {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      case 14:
        return data_14_.data(y, z);
      case 15:
        return data_15_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }
  SNN_ALWAYS_INLINE T const& data(int x, int y, int z) const {
    switch (x) {
      case 0:
        return data_0_.data(y, z);
      case 1:
        return data_1_.data(y, z);
      case 2:
        return data_2_.data(y, z);
      case 3:
        return data_3_.data(y, z);
      case 4:
        return data_4_.data(y, z);
      case 5:
        return data_5_.data(y, z);
      case 6:
        return data_6_.data(y, z);
      case 7:
        return data_7_.data(y, z);
      case 8:
        return data_8_.data(y, z);
      case 9:
        return data_9_.data(y, z);
      case 10:
        return data_10_.data(y, z);
      case 11:
        return data_11_.data(y, z);
      case 12:
        return data_12_.data(y, z);
      case 13:
        return data_13_.data(y, z);
      case 14:
        return data_14_.data(y, z);
      case 15:
        return data_15_.data(y, z);
      default:
        SNN_UNREACHABLE;
        return data_0_.data(y, z);
    }
  }

 private:
  RegisterTile2D<T, Y, Z> data_0_;
  RegisterTile2D<T, Y, Z> data_1_;
  RegisterTile2D<T, Y, Z> data_2_;
  RegisterTile2D<T, Y, Z> data_3_;
  RegisterTile2D<T, Y, Z> data_4_;
  RegisterTile2D<T, Y, Z> data_5_;
  RegisterTile2D<T, Y, Z> data_6_;
  RegisterTile2D<T, Y, Z> data_7_;
  RegisterTile2D<T, Y, Z> data_8_;
  RegisterTile2D<T, Y, Z> data_9_;
  RegisterTile2D<T, Y, Z> data_10_;
  RegisterTile2D<T, Y, Z> data_11_;
  RegisterTile2D<T, Y, Z> data_12_;
  RegisterTile2D<T, Y, Z> data_13_;
  RegisterTile2D<T, Y, Z> data_14_;
  RegisterTile2D<T, Y, Z> data_15_;
};
#endif  // SNN_REGISTER_TILE_SPECIALISATIONS

}  // namespace helpers
}  // namespace sycldnn
#endif  // PORTDNN_SRC_HELPERS_REGISTER_TILE_H_
