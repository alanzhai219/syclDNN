/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_binaryop_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>
#include <vector>

#include "portdnn/binaryop/operators.h"
#include "test/binaryop/fixture.h"
#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::AllBackendTypes;

using TypeBackendPairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;

using GTestTypePair = sycldnn::types::ToGTestTypes<TypeBackendPairs>::type;

template <typename Pair>
using BinarySub = BinaryOpFixture<Pair, sycldnn::binaryop::Sub>;

TYPED_TEST_SUITE(BinarySub, GTestTypePair);

TYPED_TEST(BinarySub, lhs_1_rhs_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {1};
  params.rhs_dims = {1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_1_rhs_12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0.,  -1., -2., -3., -4.,  -5.,
                                         -6., -7., -8., -9., -10., -11.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {1};
  params.rhs_dims = {12};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_12_rhs_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 1., 2., 3., 4.,  5.,
                                         6., 7., 8., 9., 10., 11.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {12};
  params.rhs_dims = {1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_1_3_rhs_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., 1., 2.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {1, 3};
  params.rhs_dims = {1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_2_3_4_5_rhs_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,   10.,  11.,
      12.,  13.,  14.,  15.,  16.,  17.,  18.,  19.,  20.,  21.,  22.,  23.,
      24.,  25.,  26.,  27.,  28.,  29.,  30.,  31.,  32.,  33.,  34.,  35.,
      36.,  37.,  38.,  39.,  40.,  41.,  42.,  43.,  44.,  45.,  46.,  47.,
      48.,  49.,  50.,  51.,  52.,  53.,  54.,  55.,  56.,  57.,  58.,  59.,
      60.,  61.,  62.,  63.,  64.,  65.,  66.,  67.,  68.,  69.,  70.,  71.,
      72.,  73.,  74.,  75.,  76.,  77.,  78.,  79.,  80.,  81.,  82.,  83.,
      84.,  85.,  86.,  87.,  88.,  89.,  90.,  91.,  92.,  93.,  94.,  95.,
      96.,  97.,  98.,  99.,  100., 101., 102., 103., 104., 105., 106., 107.,
      108., 109., 110., 111., 112., 113., 114., 115., 116., 117., 118., 119.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {2, 3, 4, 5};
  params.rhs_dims = {1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_2_3_4_5_rhs_5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,   0.,   0.,   0.,   0.,   5.,   5.,   5.,   5.,   5.,   10.,  10.,
      10.,  10.,  10.,  15.,  15.,  15.,  15.,  15.,  20.,  20.,  20.,  20.,
      20.,  25.,  25.,  25.,  25.,  25.,  30.,  30.,  30.,  30.,  30.,  35.,
      35.,  35.,  35.,  35.,  40.,  40.,  40.,  40.,  40.,  45.,  45.,  45.,
      45.,  45.,  50.,  50.,  50.,  50.,  50.,  55.,  55.,  55.,  55.,  55.,
      60.,  60.,  60.,  60.,  60.,  65.,  65.,  65.,  65.,  65.,  70.,  70.,
      70.,  70.,  70.,  75.,  75.,  75.,  75.,  75.,  80.,  80.,  80.,  80.,
      80.,  85.,  85.,  85.,  85.,  85.,  90.,  90.,  90.,  90.,  90.,  95.,
      95.,  95.,  95.,  95.,  100., 100., 100., 100., 100., 105., 105., 105.,
      105., 105., 110., 110., 110., 110., 110., 115., 115., 115., 115., 115.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {2, 3, 4, 5};
  params.rhs_dims = {5};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_4_5_rhs_2_3_4_5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,
      -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,  -20.,
      -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,
      -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,  -40.,
      -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,
      -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,  -60.,
      -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,
      -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,  -80.,
      -100., -100., -100., -100., -100., -100., -100., -100., -100., -100.,
      -100., -100., -100., -100., -100., -100., -100., -100., -100., -100.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {4, 5};
  params.rhs_dims = {2, 3, 4, 5};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_1_4_5_rhs_2_3_1_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12., 13.,
      14., 15., 16., 17., 18., 19., -1., 0.,  1.,  2.,  3.,  4.,  5.,  6.,
      7.,  8.,  9.,  10., 11., 12., 13., 14., 15., 16., 17., 18., -2., -1.,
      0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12., 13.,
      14., 15., 16., 17., -3., -2., -1., 0.,  1.,  2.,  3.,  4.,  5.,  6.,
      7.,  8.,  9.,  10., 11., 12., 13., 14., 15., 16., -4., -3., -2., -1.,
      0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12., 13.,
      14., 15., -5., -4., -3., -2., -1., 0.,  1.,  2.,  3.,  4.,  5.,  6.,
      7.,  8.,  9.,  10., 11., 12., 13., 14.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {1, 4, 5};
  params.rhs_dims = {2, 3, 1, 1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_3_4_5_rhs_2_1_1_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9.,  10., 11., 12., 13.,
      14., 15., 16., 17., 18., 19., 20., 21., 22., 23., 24., 25., 26., 27.,
      28., 29., 30., 31., 32., 33., 34., 35., 36., 37., 38., 39., 40., 41.,
      42., 43., 44., 45., 46., 47., 48., 49., 50., 51., 52., 53., 54., 55.,
      56., 57., 58., 59., -1., 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,
      9.,  10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22.,
      23., 24., 25., 26., 27., 28., 29., 30., 31., 32., 33., 34., 35., 36.,
      37., 38., 39., 40., 41., 42., 43., 44., 45., 46., 47., 48., 49., 50.,
      51., 52., 53., 54., 55., 56., 57., 58.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {3, 4, 5};
  params.rhs_dims = {2, 1, 1, 1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_10_1_64_rhs_10_3_64) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,   -64.,
      -64.,   -64.,   -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,  -128.,
      -128.,  -128.,  -128.,  -128.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,  -192.,
      -192.,  -192.,  -192.,  -192.,  -192.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,
      -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -256.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,
      -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -320.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,  -384.,
      -384.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,  -448.,
      -448.,  -448.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,  -512.,
      -512.,  -512.,  -512.,  -512.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,  -576.,
      -576.,  -576.,  -576.,  -576.,  -576.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,
      -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -640.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,
      -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -704.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,  -768.,
      -768.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,  -832.,
      -832.,  -832.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,  -896.,
      -896.,  -896.,  -896.,  -896.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,  -960.,
      -960.,  -960.,  -960.,  -960.,  -960.,  -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1024.,
      -1024., -1024., -1024., -1024., -1024., -1024., -1024., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088.,
      -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1088., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152., -1152.,
      -1152., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216., -1216.,
      -1216., -1216., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280., -1280.,
      -1280., -1280., -1280.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {10, 1, 64};
  params.rhs_dims = {10, 3, 64};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_10_3_64_rhs_10_1_64) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,
      64.,   64.,   64.,   64.,   64.,   64.,   64.,   64.,   128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,  128.,
      128.,  128.,  128.,  128.,  128.,  128.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,  192.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,
      256.,  256.,  256.,  256.,  256.,  256.,  256.,  256.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,  320.,
      320.,  320.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,  384.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,  448.,
      448.,  448.,  448.,  448.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,  512.,
      512.,  512.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,  576.,
      576.,  576.,  576.,  576.,  576.,  576.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,  640.,
      640.,  640.,  640.,  640.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,
      704.,  704.,  704.,  704.,  704.,  704.,  704.,  704.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,  768.,
      768.,  768.,  768.,  768.,  768.,  768.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,  832.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,
      896.,  896.,  896.,  896.,  896.,  896.,  896.,  896.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,  960.,
      960.,  960.,  1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024., 1024.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088., 1088.,
      1088., 1088., 1088., 1088., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152., 1152.,
      1152., 1152., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216., 1216.,
      1216., 1216., 1216., 1216., 1216., 1216., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.,
      1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280., 1280.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {10, 3, 64};
  params.rhs_dims = {10, 1, 64};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_3_1_8_rhs_2_1_7_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      0.,   1.,   2.,   3.,  4.,  5.,   6.,   7.,  -1.,  0.,   1.,   2.,   3.,
      4.,   5.,   6.,   -2., -1., 0.,   1.,   2.,  3.,   4.,   5.,   -3.,  -2.,
      -1.,  0.,   1.,   2.,  3.,  4.,   -4.,  -3., -2.,  -1.,  0.,   1.,   2.,
      3.,   -5.,  -4.,  -3., -2., -1.,  0.,   1.,  2.,   -6.,  -5.,  -4.,  -3.,
      -2.,  -1.,  0.,   1.,  8.,  9.,   10.,  11., 12.,  13.,  14.,  15.,  7.,
      8.,   9.,   10.,  11., 12., 13.,  14.,  6.,  7.,   8.,   9.,   10.,  11.,
      12.,  13.,  5.,   6.,  7.,  8.,   9.,   10., 11.,  12.,  4.,   5.,   6.,
      7.,   8.,   9.,   10., 11., 3.,   4.,   5.,  6.,   7.,   8.,   9.,   10.,
      2.,   3.,   4.,   5.,  6.,  7.,   8.,   9.,  16.,  17.,  18.,  19.,  20.,
      21.,  22.,  23.,  15., 16., 17.,  18.,  19., 20.,  21.,  22.,  14.,  15.,
      16.,  17.,  18.,  19., 20., 21.,  13.,  14., 15.,  16.,  17.,  18.,  19.,
      20.,  12.,  13.,  14., 15., 16.,  17.,  18., 19.,  11.,  12.,  13.,  14.,
      15.,  16.,  17.,  18., 10., 11.,  12.,  13., 14.,  15.,  16.,  17.,  -7.,
      -6.,  -5.,  -4.,  -3., -2., -1.,  0.,   -8., -7.,  -6.,  -5.,  -4.,  -3.,
      -2.,  -1.,  -9.,  -8., -7., -6.,  -5.,  -4., -3.,  -2.,  -10., -9.,  -8.,
      -7.,  -6.,  -5.,  -4., -3., -11., -10., -9., -8.,  -7.,  -6.,  -5.,  -4.,
      -12., -11., -10., -9., -8., -7.,  -6.,  -5., -13., -12., -11., -10., -9.,
      -8.,  -7.,  -6.,  1.,  2.,  3.,   4.,   5.,  6.,   7.,   8.,   0.,   1.,
      2.,   3.,   4.,   5.,  6.,  7.,   -1.,  0.,  1.,   2.,   3.,   4.,   5.,
      6.,   -2.,  -1.,  0.,  1.,  2.,   3.,   4.,  5.,   -3.,  -2.,  -1.,  0.,
      1.,   2.,   3.,   4.,  -4., -3.,  -2.,  -1., 0.,   1.,   2.,   3.,   -5.,
      -4.,  -3.,  -2.,  -1., 0.,  1.,   2.,   9.,  10.,  11.,  12.,  13.,  14.,
      15.,  16.,  8.,   9.,  10., 11.,  12.,  13., 14.,  15.,  7.,   8.,   9.,
      10.,  11.,  12.,  13., 14., 6.,   7.,   8.,  9.,   10.,  11.,  12.,  13.,
      5.,   6.,   7.,   8.,  9.,  10.,  11.,  12., 4.,   5.,   6.,   7.,   8.,
      9.,   10.,  11.,  3.,  4.,  5.,   6.,   7.,  8.,   9.,   10.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {3, 1, 8};
  params.rhs_dims = {2, 1, 7, 1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
TYPED_TEST(BinarySub, lhs_2_1_1_rhs_2_3_1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {0., -1., -2., -2., -3., -4.};
  sycldnn::binaryop::BinaryParams params;
  params.lhs_dims = {2, 1, 1};
  params.rhs_dims = {2, 3, 1};
  const DataType max_input_val = 2048.0;
  this->run(exp_out, params, max_input_val);
}
