/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_scatter_nd_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/scatter_nd/operators.h"
#include "portdnn/scatter_nd/params.h"

#include "test/scatter_nd/scatter_nd_event_dependencies_fixture.h"
#include "test/types/kernel_data_types.h"
#include "test/types/to_gtest_types.h"

#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using GTestDType = sycldnn::types::ToGTestTypes<DataTypeList>::type;

using namespace sycldnn;  // NOLINT(google-build-using-namespace)
template <typename DType>
using ScatterNdAssign = ScatterNDEventFixture<DType, int, scatter_nd::Assign>;
TYPED_TEST_CASE(ScatterNdAssign, GTestDType);
TYPED_TEST(ScatterNdAssign, 1x1x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2};
  const std::vector<int> indices = {0, 0, 0};
  const std::vector<DataType> updates = {6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2};
  const std::vector<int> indices = {0, 0, 0, 0};
  const std::vector<DataType> updates = {6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 6, 9, 3};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 6, 9, 3};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {1, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 6, 9, 3};
  const std::vector<int> indices = {0, 0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {3, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5};
  const std::vector<int> indices = {0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {1, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0, 0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {4, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 0, 0, 1, 0, 0, 0, 2,
                                    0, 0, 0, 4, 0, 0, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 3};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 3};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6};
  const std::vector<int> indices = {0, 0, 0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6};
  const std::vector<int> indices = {0, 0, 0, 0, 0, 0, 1, 0};
  const std::vector<DataType> updates = {3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {8, 3, 5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6, 9, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {8, 3, 5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6, 9, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 2, 1, 2, 6, 6, 9, 7, 2, 9};
  const std::vector<int> indices = {0, 0, 0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8, 3, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {5, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 2, 6, 6, 9, 7, 2, 9, 9, 7};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 0, 0, 1, 0, 0,
                                    1, 2, 0, 0, 0, 2, 0, 0, 1, 3};
  const std::vector<DataType> updates = {8, 3, 5, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6,
                                         9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6,
                                         9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 7, 2, 9, 9, 7, 6, 1,
                                       0, 2, 4, 0, 8, 4, 6, 2};
  const std::vector<int> indices = {0, 0, 0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8,
                                         3, 5, 5, 2, 1, 2, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {7, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 0, 0, 2, 0, 0, 1, 1, 0, 0, 1, 4, 0, 0,
                                    1, 0, 0, 0, 1, 3, 0, 0, 0, 3, 0, 0, 1, 2};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {4, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 0, 2, 0,
                                    0, 0, 4, 0, 0, 0, 7, 0};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
                                       0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
                                       7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9,
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
                                       0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
                                       7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9,
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
                                       0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {15, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
                                       5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5,
                                       5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8};
  const std::vector<int> indices = {
      0, 0, 4, 1, 0, 0, 7, 3, 0, 0, 1, 2, 0, 0, 6, 1, 0, 0, 1, 0,
      0, 0, 4, 3, 0, 0, 3, 4, 0, 0, 2, 1, 0, 0, 2, 3, 0, 0, 1, 3,
      0, 0, 4, 2, 0, 0, 4, 0, 0, 0, 6, 2, 0, 0, 5, 4, 0, 0, 5, 3};
  const std::vector<DataType> updates = {0, 8, 4, 6, 2, 3, 1, 7,
                                         7, 2, 7, 0, 3, 1, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3,
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {1, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3,
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  const std::vector<int> indices = {0, 0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8,
      6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6,
                                         9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                         0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x1x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {24, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2};
  const std::vector<int> indices = {
      0, 0, 2, 0, 0, 0, 1, 7, 0, 0, 1, 3, 0, 0, 6, 4, 0, 0, 1, 2, 0, 0, 5, 7,
      0, 0, 5, 1, 0, 0, 1, 1, 0, 0, 3, 7, 0, 0, 7, 0, 0, 0, 7, 1, 0, 0, 5, 6,
      0, 0, 6, 7, 0, 0, 4, 3, 0, 0, 7, 3, 0, 0, 6, 3, 0, 0, 5, 2, 0, 0, 1, 4,
      0, 0, 4, 1, 0, 0, 2, 3, 0, 0, 3, 5, 0, 0, 1, 5, 0, 0, 1, 0, 0, 0, 4, 6};
  const std::vector<DataType> updates = {4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
                                         8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 3};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6};
  const std::vector<int> indices = {0, 0, 0, 0, 1, 0};
  const std::vector<DataType> updates = {3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6};
  const std::vector<int> indices = {0, 0, 0, 0, 0, 1, 0, 0};
  const std::vector<DataType> updates = {3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {8, 3, 5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6, 9, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 2, 1, 2, 6, 6, 9, 7, 2, 9};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8, 3, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 2, 1, 2, 6, 6, 9, 7, 2, 9};
  const std::vector<int> indices = {0, 0, 0, 0, 1, 0};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8, 3, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {5, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 2, 6, 6, 9, 7, 2, 9, 9, 7};
  const std::vector<int> indices = {0, 1, 0, 0, 0, 0, 0, 1, 0, 1,
                                    0, 2, 0, 0, 0, 2, 0, 1, 0, 3};
  const std::vector<DataType> updates = {8, 3, 5, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6,
                                         9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 7, 2, 9, 9, 7, 6, 1,
                                       0, 2, 4, 0, 8, 4, 6, 2};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8,
                                         3, 5, 5, 2, 1, 2, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 7, 2, 9, 9, 7, 6, 1,
                                       0, 2, 4, 0, 8, 4, 6, 2};
  const std::vector<int> indices = {0, 0, 0, 0, 1, 0};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8,
                                         3, 5, 5, 2, 1, 2, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {7, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 0, 0, 2, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1,
                                    0, 0, 0, 1, 0, 3, 0, 0, 0, 3, 0, 1, 0, 2};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 7, 6, 6};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 9, 3, 8};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5};
  const std::vector<int> indices = {0, 0, 1, 0, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {3, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5};
  const std::vector<int> indices = {0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                       0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6, 9, 3,
                                         8, 3, 5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
                                       6, 2, 3, 1, 7, 7, 2, 7, 0, 3};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8, 3, 5,
                                         5, 2, 1, 2, 6, 6, 9, 7, 2, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2, 4, 0,
                                       8, 4, 6, 2, 3, 1, 7, 7, 2, 7};
  const std::vector<int> indices = {0, 0, 1, 0, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {8, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6,
                                       2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 1, 1, 4, 0, 0, 0,
                                    2, 0, 1, 0, 3, 0, 0, 0, 4, 0, 1,
                                    0, 1, 0, 1, 1, 2, 0, 0, 0, 3};
  const std::vector<DataType> updates = {2, 6, 6, 9, 7, 2, 9, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3,
                                       1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
                                       0, 1, 0, 0, 1, 5, 8, 8, 6, 6};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8,
                                         3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
                                         9, 9, 7, 6, 1, 0, 2, 4, 0, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                       4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0,
                                       0, 1, 5, 8, 8, 6, 6, 3, 9, 6};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7,
                                         6, 1, 0, 2, 4, 0, 8, 4, 6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7,
                                       0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
                                       4, 1, 0, 1, 0, 0, 1, 5, 8, 8};
  const std::vector<int> indices = {0, 0, 1, 0, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {12, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4,
                                       4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0,
                                       1, 5, 8, 8, 6, 6, 3, 9, 6, 7};
  const std::vector<int> indices = {
      0, 1, 0, 2, 0, 1, 1, 1, 0, 0, 1, 3, 0, 0, 0, 4, 0, 1, 0, 7, 0, 1, 1, 7,
      0, 1, 0, 3, 0, 1, 0, 0, 0, 0, 1, 2, 0, 1, 0, 1, 0, 0, 0, 7, 0, 1, 1, 3};
  const std::vector<DataType> updates = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6,
                                         9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 7, 2, 9, 9, 7, 6, 1,
                                       0, 2, 4, 0, 8, 4, 6, 2};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {3, 2, 7, 6, 6, 9, 3, 8,
                                         3, 5, 5, 2, 1, 2, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 0, 2, 0, 1, 1, 0, 1, 4, 0, 1,
                                    0, 0, 1, 3, 0, 0, 3, 0, 1, 2};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {7, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 0, 2, 0, 0, 1, 1, 0, 0, 1, 4, 0, 0, 1,
                                    0, 0, 0, 1, 3, 0, 0, 0, 3, 0, 0, 1, 2, 0};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4,
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1,
      0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9,
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6,
      0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1,
      2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5,
      1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {
      3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9,
      9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3,
      1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6,
      6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7,
      8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4,
      2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3,
      3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8};
  const std::vector<int> indices = {0, 0, 2, 0, 1, 1, 0, 1, 4, 0, 1,
                                    0, 0, 1, 3, 0, 0, 3, 0, 1, 2};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7,
                                         7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {29, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0,
      1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6,
      2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3,
      6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5};
  const std::vector<int> indices = {
      0, 0, 4, 3, 0, 1, 2, 1, 0, 1, 6, 4, 0, 0, 2, 0, 0, 0, 2, 1, 0, 1, 0, 2,
      0, 1, 2, 4, 0, 0, 1, 2, 0, 0, 4, 0, 0, 0, 3, 0, 0, 0, 2, 2, 0, 0, 4, 1,
      0, 1, 6, 1, 0, 1, 2, 0, 0, 0, 7, 0, 0, 1, 6, 0, 0, 0, 7, 4, 0, 1, 0, 1,
      0, 0, 2, 3, 0, 1, 0, 4, 0, 1, 5, 1, 0, 1, 1, 0, 0, 1, 7, 4, 0, 1, 3, 3,
      0, 0, 7, 1, 0, 1, 5, 0, 0, 0, 7, 3, 0, 1, 7, 0, 0, 0, 3, 2};
  const std::vector<DataType> updates = {1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
                                         7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
                                         3, 2, 6, 4, 5, 6, 8, 3, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2,
      6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3,
      1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8,
      7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9,
      6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9,
      4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3,
      9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3,
      2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2,
      6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1,
      0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1,
      2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5,
      3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8};
  const std::vector<int> indices = {0, 0, 0, 1};
  const std::vector<DataType> updates = {
      3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7,
      6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4,
      4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7,
      8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2,
      3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6,
      1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2,
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6,
      7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0};
  const std::vector<int> indices = {0, 0, 2, 0, 1, 1, 0, 1, 4, 0, 1,
                                    0, 0, 1, 3, 0, 0, 3, 0, 1, 2};
  const std::vector<DataType> updates = {
      2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
      6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
      4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x2x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {46, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5,
      1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8,
      8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5,
      4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7};
  const std::vector<int> indices = {
      0, 0, 2, 4, 0, 0, 6, 6, 0, 1, 7, 0, 0, 1, 0, 2, 0, 0, 2, 6, 0, 0, 5,
      3, 0, 1, 4, 0, 0, 0, 3, 2, 0, 1, 3, 6, 0, 1, 1, 0, 0, 0, 7, 4, 0, 0,
      7, 0, 0, 0, 4, 3, 0, 0, 1, 5, 0, 1, 0, 7, 0, 1, 7, 1, 0, 0, 6, 1, 0,
      1, 4, 3, 0, 0, 6, 0, 0, 0, 3, 6, 0, 1, 3, 5, 0, 0, 2, 3, 0, 1, 4, 2,
      0, 1, 4, 4, 0, 0, 1, 6, 0, 0, 1, 0, 0, 0, 7, 5, 0, 1, 2, 0, 0, 1, 1,
      5, 0, 1, 3, 7, 0, 0, 3, 0, 0, 0, 3, 5, 0, 0, 1, 2, 0, 1, 7, 2, 0, 1,
      3, 4, 0, 1, 2, 7, 0, 0, 2, 1, 0, 1, 0, 5, 0, 0, 2, 2, 0, 1, 3, 0, 0,
      0, 3, 1, 0, 0, 4, 6, 0, 1, 5, 1, 0, 0, 6, 5, 0, 1, 7, 7, 0, 1, 4, 7};
  const std::vector<DataType> updates = {
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8,
      2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5, 2, 1};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7, 0};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {4, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9};
  const std::vector<int> indices = {0, 1, 0, 0, 0, 2, 0, 0,
                                    0, 4, 0, 0, 0, 7, 0, 0};
  const std::vector<DataType> updates = {9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
                                       0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
                                       7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9,
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
                                       0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
                                       0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7};
  const std::vector<int> indices = {0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7, 0};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {15, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
                                       5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5,
                                       5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8};
  const std::vector<int> indices = {
      0, 4, 0, 1, 0, 7, 0, 3, 0, 1, 0, 2, 0, 6, 0, 1, 0, 1, 0, 0,
      0, 4, 0, 3, 0, 3, 0, 4, 0, 2, 0, 1, 0, 2, 0, 3, 0, 1, 0, 3,
      0, 4, 0, 2, 0, 4, 0, 0, 0, 6, 0, 2, 0, 5, 0, 4, 0, 5, 0, 3};
  const std::vector<DataType> updates = {0, 8, 4, 6, 2, 3, 1, 7,
                                         7, 2, 7, 0, 3, 1, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3,
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8,
      6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6,
                                         9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                         0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {4, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8,
      6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0};
  const std::vector<int> indices = {0, 1, 0, 0, 2, 0, 0, 4, 0, 0, 7, 0};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6,
                                         9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                         0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {24, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2};
  const std::vector<int> indices = {
      0, 2, 0, 0, 0, 1, 0, 7, 0, 1, 0, 3, 0, 6, 0, 4, 0, 1, 0, 2, 0, 5, 0, 7,
      0, 5, 0, 1, 0, 1, 0, 1, 0, 3, 0, 7, 0, 7, 0, 0, 0, 7, 0, 1, 0, 5, 0, 6,
      0, 6, 0, 7, 0, 4, 0, 3, 0, 7, 0, 3, 0, 6, 0, 3, 0, 5, 0, 2, 0, 1, 0, 4,
      0, 4, 0, 1, 0, 2, 0, 3, 0, 3, 0, 5, 0, 1, 0, 5, 0, 1, 0, 0, 0, 4, 0, 6};
  const std::vector<DataType> updates = {4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
                                         8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {6, 2, 7, 3, 2, 7, 6, 6,
                                         9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 6, 6, 9, 7, 2, 9, 9,
                                       7, 6, 1, 0, 2, 4, 0, 8};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 1, 0, 0, 4, 1, 0, 6, 0, 0, 4,
                                    0, 0, 5, 1, 0, 1, 1, 0, 5, 0};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {7, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2,
                                       4, 0, 8, 4, 6, 2, 3, 1};
  const std::vector<int> indices = {0, 1, 0, 0, 0, 4, 1, 0, 0, 6, 0, 0, 0, 4,
                                    0, 0, 0, 5, 1, 0, 0, 1, 1, 0, 0, 5, 0, 0};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4,
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1,
      0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9,
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
      7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9,
      4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {
      9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0,
      2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7,
      8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4,
      2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3,
      3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8};
  const std::vector<int> indices = {0, 1, 0, 0, 4, 1, 0, 6, 0, 0, 4,
                                    0, 0, 5, 1, 0, 1, 1, 0, 5, 0};
  const std::vector<DataType> updates = {2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7,
                                         7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {29, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0,
      1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6,
      2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3,
      6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5};
  const std::vector<int> indices = {
      0, 2, 0, 3, 0, 5, 0, 1, 0, 7, 0, 4, 0, 1, 0, 0, 0, 1, 0, 1, 0, 4, 0, 2,
      0, 5, 0, 4, 0, 0, 1, 2, 0, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 2, 0, 2, 0, 1,
      0, 7, 0, 1, 0, 5, 0, 0, 0, 3, 1, 0, 0, 7, 0, 0, 0, 3, 1, 4, 0, 4, 0, 1,
      0, 1, 0, 3, 0, 4, 0, 4, 0, 6, 1, 1, 0, 4, 1, 0, 0, 7, 1, 4, 0, 5, 1, 3,
      0, 3, 1, 1, 0, 6, 1, 0, 0, 3, 1, 3, 0, 7, 1, 0, 0, 1, 1, 2};
  const std::vector<DataType> updates = {1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
                                         7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
                                         3, 2, 6, 4, 5, 6, 8, 3, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2,
      6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3,
      1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8,
      7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9,
      6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9,
      4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3,
      9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8,
      4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5,
      1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {
      9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
      4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {7, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2,
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6,
      7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0};
  const std::vector<int> indices = {0, 1, 0, 0, 4, 1, 0, 6, 0, 0, 4,
                                    0, 0, 5, 1, 0, 1, 1, 0, 5, 0};
  const std::vector<DataType> updates = {
      2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
      6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
      4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {46, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5,
      1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8,
      8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5,
      4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7};
  const std::vector<int> indices = {
      0, 1, 0, 4, 0, 3, 0, 6, 0, 7, 1, 0, 0, 4, 0, 2, 0, 1, 0, 6, 0, 2, 1,
      3, 0, 6, 0, 0, 0, 1, 1, 2, 0, 5, 1, 6, 0, 4, 1, 0, 0, 3, 1, 4, 0, 3,
      1, 0, 0, 2, 0, 3, 0, 0, 1, 5, 0, 4, 0, 7, 0, 7, 1, 1, 0, 3, 0, 1, 0,
      6, 0, 3, 0, 3, 0, 0, 0, 1, 1, 6, 0, 5, 1, 5, 0, 1, 0, 3, 0, 6, 0, 2,
      0, 6, 0, 4, 0, 0, 1, 6, 0, 0, 1, 0, 0, 3, 1, 5, 0, 5, 0, 0, 0, 4, 1,
      5, 0, 5, 1, 7, 0, 1, 1, 0, 0, 1, 1, 5, 0, 0, 1, 2, 0, 7, 1, 2, 0, 5,
      1, 4, 0, 5, 0, 7, 0, 1, 0, 1, 0, 4, 0, 5, 0, 1, 0, 2, 0, 5, 1, 0, 0,
      1, 1, 1, 0, 2, 0, 6, 0, 6, 1, 1, 0, 3, 0, 5, 0, 7, 1, 7, 0, 6, 0, 7};
  const std::vector<DataType> updates = {
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8,
      2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3,
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2,
      9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8,
      6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6,
                                         9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                         0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {24, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2};
  const std::vector<int> indices = {
      0, 2, 0, 0, 1, 7, 0, 1, 3, 0, 6, 4, 0, 1, 2, 0, 5, 7, 0, 5, 1, 0, 1, 1,
      0, 3, 7, 0, 7, 0, 0, 7, 1, 0, 5, 6, 0, 6, 7, 0, 4, 3, 0, 7, 3, 0, 6, 3,
      0, 5, 2, 0, 1, 4, 0, 4, 1, 0, 2, 3, 0, 3, 5, 0, 1, 5, 0, 1, 0, 0, 4, 6};
  const std::vector<DataType> updates = {4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
                                         8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {24, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2};
  const std::vector<int> indices = {
      0, 2, 0, 0, 0, 1, 7, 0, 0, 1, 3, 0, 0, 6, 4, 0, 0, 1, 2, 0, 0, 5, 7, 0,
      0, 5, 1, 0, 0, 1, 1, 0, 0, 3, 7, 0, 0, 7, 0, 0, 0, 7, 1, 0, 0, 5, 6, 0,
      0, 6, 7, 0, 0, 4, 3, 0, 0, 7, 3, 0, 0, 6, 3, 0, 0, 5, 2, 0, 0, 1, 4, 0,
      0, 4, 1, 0, 0, 2, 3, 0, 0, 3, 5, 0, 0, 1, 5, 0, 0, 1, 0, 0, 0, 4, 6, 0};
  const std::vector<DataType> updates = {4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
                                         8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8,
      7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4,
      6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5,
      4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6,
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9,
      6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6,
      3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1,
      8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5,
      8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7,
      0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5,
      7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6,
      1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3,
      1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7,
      6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2,
      5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2,
      9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9,
      2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2,
      6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4,
      4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0,
      8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0,
      9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3,
      6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4,
      2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2,
      1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7,
      3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5,
      7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5,
      5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8,
      2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7,
      1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6,
      3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8,
      1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1,
      2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {
      9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0,
      8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5,
      4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1,
      2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7,
      3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {24, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4,
      2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2,
      1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7,
      3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5,
      7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5,
      5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8,
      2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7,
      1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6,
      3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8,
      1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1,
      2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8};
  const std::vector<int> indices = {
      0, 2, 0, 0, 1, 7, 0, 1, 3, 0, 6, 4, 0, 1, 2, 0, 5, 7, 0, 5, 1, 0, 1, 1,
      0, 3, 7, 0, 7, 0, 0, 7, 1, 0, 5, 6, 0, 6, 7, 0, 4, 3, 0, 7, 3, 0, 6, 3,
      0, 5, 2, 0, 1, 4, 0, 4, 1, 0, 2, 3, 0, 3, 5, 0, 1, 5, 0, 1, 0, 0, 4, 6};
  const std::vector<DataType> updates = {
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9,
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3,
      0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4,
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1,
      2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {113, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1,
      1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1,
      4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2,
      9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4,
      4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5,
      4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9,
      6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0,
      7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9,
      9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5,
      0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4,
      6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4,
      2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1,
      3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5};
  const std::vector<int> indices = {
      0, 1, 7, 3, 0, 7, 4, 1, 0, 6, 3, 2, 0, 2, 5, 1, 0, 1, 6, 0, 0, 6, 2, 2,
      0, 3, 0, 2, 0, 5, 3, 0, 0, 7, 5, 4, 0, 1, 5, 1, 0, 0, 3, 2, 0, 4, 0, 0,
      0, 2, 7, 4, 0, 3, 4, 0, 0, 1, 0, 3, 0, 5, 7, 2, 0, 2, 4, 1, 0, 0, 3, 4,
      0, 0, 4, 4, 0, 4, 3, 1, 0, 3, 7, 4, 0, 3, 3, 3, 0, 0, 4, 0, 0, 3, 3, 1,
      0, 3, 6, 2, 0, 2, 6, 3, 0, 0, 1, 4, 0, 2, 1, 4, 0, 1, 6, 2, 0, 4, 0, 4,
      0, 2, 1, 1, 0, 6, 3, 3, 0, 1, 1, 3, 0, 4, 6, 4, 0, 4, 5, 4, 0, 7, 7, 0,
      0, 5, 1, 4, 0, 2, 2, 0, 0, 7, 5, 0, 0, 0, 6, 3, 0, 2, 3, 1, 0, 7, 5, 2,
      0, 4, 0, 2, 0, 4, 4, 2, 0, 5, 4, 0, 0, 1, 1, 2, 0, 7, 6, 1, 0, 2, 0, 4,
      0, 6, 0, 0, 0, 7, 1, 3, 0, 1, 7, 4, 0, 4, 1, 2, 0, 6, 4, 1, 0, 5, 6, 0,
      0, 1, 2, 4, 0, 3, 4, 3, 0, 0, 1, 2, 0, 4, 1, 4, 0, 4, 4, 1, 0, 4, 2, 4,
      0, 0, 5, 3, 0, 3, 3, 0, 0, 5, 5, 4, 0, 3, 0, 4, 0, 3, 6, 1, 0, 1, 7, 1,
      0, 5, 2, 2, 0, 4, 3, 4, 0, 0, 1, 1, 0, 4, 5, 1, 0, 3, 2, 0, 0, 6, 5, 0,
      0, 7, 7, 2, 0, 5, 5, 0, 0, 0, 6, 0, 0, 2, 5, 2, 0, 1, 7, 2, 0, 3, 6, 0,
      0, 6, 2, 3, 0, 1, 5, 3, 0, 4, 1, 3, 0, 4, 3, 0, 0, 5, 1, 1, 0, 1, 0, 1,
      0, 0, 7, 4, 0, 6, 4, 4, 0, 3, 4, 4, 0, 1, 2, 1, 0, 2, 3, 2, 0, 3, 7, 1,
      0, 0, 0, 1, 0, 5, 3, 3, 0, 4, 7, 3, 0, 2, 7, 3, 0, 1, 3, 0, 0, 1, 3, 1,
      0, 0, 4, 1, 0, 3, 0, 1, 0, 4, 6, 2, 0, 0, 4, 2, 0, 5, 0, 1, 0, 2, 4, 4,
      0, 7, 5, 3, 0, 5, 2, 0, 0, 3, 2, 1, 0, 1, 4, 2, 0, 0, 6, 2, 0, 3, 1, 4,
      0, 2, 1, 0, 0, 1, 2, 0, 0, 4, 7, 4, 0, 3, 6, 4, 0, 4, 5, 3};
  const std::vector<DataType> updates = {
      8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4,
      0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3,
      0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6,
      0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {1, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5,
      1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0,
      0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3,
      9, 4, 6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3,
      9, 4, 2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4,
      3, 1, 3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6,
      3, 3, 6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5,
      7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7,
      4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6,
      7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2,
      8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1,
      9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7,
      3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0,
      2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8,
      6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1,
      1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1,
      0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2,
      2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4,
      6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7,
      4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8, 9, 2,
      7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8};
  const std::vector<int> indices = {0};
  const std::vector<DataType> updates = {
      6, 2, 7, 3, 2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7,
      6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2,
      5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2,
      9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9,
      2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2,
      6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4,
      4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0,
      8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0,
      9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3,
      6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2,
      7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1,
      0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6,
      5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4,
      0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6,
      4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9,
      8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4,
      2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6,
      9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {4, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0,
      3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1,
      4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8,
      9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1,
      1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1,
      4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2,
      9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4,
      4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5,
      4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9,
      6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0,
      7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9,
      9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5,
      0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4,
      6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4,
      2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1,
      3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3,
      6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7,
      0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1,
      9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3,
      8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0,
      3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5};
  const std::vector<int> indices = {0, 1, 0, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {
      9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
      4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
      0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0,
      5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2,
      8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7,
      3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6,
      6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4,
      4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4,
      0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5,
      4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {24, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9,
      7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3,
      8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4,
      1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9,
      0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1,
      1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4,
      2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9,
      0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4,
      4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4,
      8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6,
      8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7,
      6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9,
      9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0,
      7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6,
      4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2,
      9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3,
      6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6,
      8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0,
      3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9,
      7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8,
      6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9};
  const std::vector<int> indices = {
      0, 2, 0, 0, 1, 7, 0, 1, 3, 0, 6, 4, 0, 1, 2, 0, 5, 7, 0, 5, 1, 0, 1, 1,
      0, 3, 7, 0, 7, 0, 0, 7, 1, 0, 5, 6, 0, 6, 7, 0, 4, 3, 0, 7, 3, 0, 6, 3,
      0, 5, 2, 0, 1, 4, 0, 4, 1, 0, 2, 3, 0, 3, 5, 0, 1, 5, 0, 1, 0, 0, 4, 6};
  const std::vector<DataType> updates = {
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9,
      5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3,
      0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4,
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1,
      2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6,
      8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3,
      4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3,
      1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 1x8x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {180, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0,
      7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6,
      4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2,
      9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3,
      6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6,
      8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0,
      3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9,
      7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8,
      6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3,
      0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7,
      3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5,
      8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1,
      1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4,
      8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4,
      4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8,
      5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5,
      7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5,
      5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5,
      2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8, 9, 2, 7, 9, 3,
      5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9, 7, 3, 4, 1, 1, 9, 0, 4, 6, 4, 9, 4, 6, 5,
      7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7, 6};
  const std::vector<int> indices = {
      0, 5, 4, 6, 0, 1, 7, 2, 0, 4, 5, 6, 0, 2, 6, 2, 0, 7, 7, 1, 0, 3, 0, 0, 0,
      0, 3, 2, 0, 3, 3, 0, 0, 5, 3, 1, 0, 0, 6, 2, 0, 6, 0, 5, 0, 4, 7, 4, 0, 1,
      1, 1, 0, 4, 4, 4, 0, 1, 2, 1, 0, 0, 7, 3, 0, 1, 4, 2, 0, 0, 1, 1, 0, 4, 2,
      7, 0, 5, 1, 7, 0, 7, 0, 3, 0, 7, 2, 2, 0, 3, 2, 1, 0, 2, 4, 2, 0, 6, 0, 1,
      0, 2, 0, 1, 0, 7, 7, 4, 0, 0, 4, 3, 0, 1, 3, 3, 0, 2, 0, 3, 0, 2, 0, 7, 0,
      3, 5, 2, 0, 7, 2, 3, 0, 3, 5, 3, 0, 3, 2, 6, 0, 7, 5, 1, 0, 1, 6, 2, 0, 6,
      3, 6, 0, 0, 1, 2, 0, 2, 2, 2, 0, 0, 5, 7, 0, 4, 0, 6, 0, 5, 0, 1, 0, 7, 2,
      7, 0, 7, 3, 2, 0, 1, 0, 2, 0, 6, 6, 1, 0, 5, 2, 0, 0, 1, 6, 7, 0, 5, 0, 3,
      0, 2, 3, 7, 0, 1, 3, 7, 0, 3, 4, 5, 0, 0, 1, 5, 0, 5, 7, 2, 0, 6, 5, 6, 0,
      1, 1, 5, 0, 5, 6, 6, 0, 3, 7, 0, 0, 6, 7, 2, 0, 4, 3, 4, 0, 0, 0, 2, 0, 3,
      3, 6, 0, 6, 7, 0, 0, 3, 3, 3, 0, 0, 3, 5, 0, 0, 5, 1, 0, 2, 7, 7, 0, 5, 2,
      5, 0, 0, 5, 0, 0, 3, 5, 5, 0, 3, 5, 6, 0, 5, 7, 5, 0, 2, 6, 7, 0, 3, 3, 1,
      0, 4, 7, 1, 0, 3, 3, 5, 0, 5, 4, 2, 0, 1, 4, 1, 0, 4, 3, 1, 0, 2, 7, 2, 0,
      3, 2, 4, 0, 1, 4, 4, 0, 4, 2, 3, 0, 1, 0, 0, 0, 5, 4, 7, 0, 3, 7, 6, 0, 0,
      3, 3, 0, 6, 6, 6, 0, 7, 7, 3, 0, 1, 5, 2, 0, 1, 2, 6, 0, 6, 1, 1, 0, 0, 5,
      6, 0, 4, 1, 4, 0, 4, 4, 5, 0, 4, 1, 3, 0, 2, 5, 3, 0, 7, 5, 2, 0, 1, 6, 0,
      0, 3, 3, 2, 0, 4, 1, 5, 0, 1, 5, 4, 0, 4, 7, 0, 0, 6, 2, 7, 0, 7, 3, 5, 0,
      1, 1, 3, 0, 4, 6, 1, 0, 1, 7, 7, 0, 6, 3, 2, 0, 6, 4, 4, 0, 7, 7, 7, 0, 1,
      2, 4, 0, 6, 0, 6, 0, 3, 1, 2, 0, 5, 5, 7, 0, 6, 6, 0, 0, 2, 0, 0, 0, 5, 4,
      5, 0, 4, 1, 1, 0, 4, 3, 2, 0, 1, 2, 7, 0, 1, 5, 6, 0, 6, 7, 3, 0, 4, 1, 6,
      0, 2, 2, 7, 0, 2, 1, 1, 0, 3, 4, 6, 0, 6, 6, 3, 0, 3, 6, 2, 0, 5, 1, 4, 0,
      1, 0, 4, 0, 1, 1, 7, 0, 7, 1, 2, 0, 7, 0, 2, 0, 1, 6, 3, 0, 3, 1, 6, 0, 7,
      6, 1, 0, 2, 6, 4, 0, 3, 0, 3, 0, 3, 2, 5, 0, 2, 1, 3, 0, 5, 1, 2, 0, 0, 3,
      6, 0, 4, 0, 4, 0, 1, 4, 5, 0, 2, 0, 5, 0, 5, 3, 5, 0, 0, 5, 2, 0, 0, 3, 7,
      0, 3, 5, 7, 0, 5, 6, 5, 0, 6, 1, 5, 0, 2, 5, 4, 0, 6, 2, 5, 0, 0, 6, 7, 0,
      2, 1, 7, 0, 5, 3, 3, 0, 0, 6, 5, 0, 1, 7, 3, 0, 0, 6, 0, 0, 4, 4, 1, 0, 4,
      0, 1, 0, 4, 3, 7, 0, 0, 4, 2, 0, 7, 5, 4, 0, 5, 2, 7, 0, 2, 6, 0, 0, 6, 3,
      3, 0, 5, 6, 1, 0, 2, 2, 5, 0, 3, 4, 1, 0, 2, 0, 6, 0, 6, 4, 5, 0, 1, 7, 0,
      0, 2, 4, 7, 0, 2, 6, 1, 0, 4, 3, 6, 0, 1, 1, 2, 0, 4, 0, 7};
  const std::vector<DataType> updates = {
      7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7,
      1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2,
      9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9,
      4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9,
      1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4,
      2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3,
      7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8,
      4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 6, 9};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 6, 9};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 6, 9};
  const std::vector<int> indices = {2, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 6, 9};
  const std::vector<int> indices = {2, 0, 0, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 1, 2, 6, 6, 9, 7, 2,
                                       9, 9, 7, 6, 1, 0, 2};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 1, 2, 6, 6, 9, 7, 2,
                                       9, 9, 7, 6, 1, 0, 2};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 1, 2, 6, 6, 9, 7, 2,
                                       9, 9, 7, 6, 1, 0, 2};
  const std::vector<int> indices = {2, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 5}};
  const std::array<int, 2> ind_shape = {6, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {6, 9, 7, 2, 9, 9, 7, 6,
                                       1, 0, 2, 4, 0, 8, 4};
  const std::vector<int> indices = {2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3,
                                    1, 0, 0, 3, 1, 0, 0, 4, 2, 0, 0, 1};
  const std::vector<DataType> updates = {5, 5, 2, 1, 2, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 1, 8}};
  const std::array<int, 2> ind_shape = {10, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 0, 0, 3, 2, 0, 0, 4, 2, 0, 0, 5, 0, 0,
                                    0, 5, 1, 0, 0, 0, 1, 0, 0, 6, 1, 0, 0, 4,
                                    1, 0, 0, 7, 2, 0, 0, 3, 2, 0, 0, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5, 2};
  const std::vector<int> indices = {0, 0, 1, 1, 0, 1, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 1}};
  const std::array<int, 2> ind_shape = {3, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5, 2};
  const std::vector<int> indices = {0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6,
                                       2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
                                       7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7, 2, 9, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6,
                                       2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
                                       7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7, 2, 9, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2, 4, 0,
                                       8, 4, 6, 2, 3, 1, 7, 7, 2, 7,
                                       0, 3, 1, 7, 3, 4, 4, 4, 2, 5};
  const std::vector<int> indices = {0, 0, 1, 1, 0, 1, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 5}};
  const std::array<int, 2> ind_shape = {12, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                       4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
                                       0, 0, 1, 5, 8, 8, 6, 6, 3, 9};
  const std::vector<int> indices = {
      1, 0, 1, 1, 2, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 1, 1, 0, 1, 2,
      1, 0, 1, 3, 2, 0, 0, 3, 0, 0, 1, 4, 1, 0, 1, 0, 0, 0, 1, 1, 2, 0, 1, 0};
  const std::vector<DataType> updates = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2,
                                         1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2,
                                         1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4};
  const std::vector<int> indices = {0, 0, 1, 1, 0, 1, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 2, 8}};
  const std::array<int, 2> ind_shape = {18, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {
      0, 0, 1, 5, 2, 0, 0, 5, 2, 0, 0, 4, 1, 0, 1, 3, 2, 0, 1, 1, 1, 0, 0, 7,
      1, 0, 1, 5, 2, 0, 1, 5, 0, 0, 1, 2, 0, 0, 0, 7, 1, 0, 1, 1, 0, 0, 1, 7,
      2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 6, 2, 0, 1, 2, 1, 0, 1, 7};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 0, 3, 2, 0, 4, 2, 0, 5, 0,
                                    0, 5, 1, 0, 0, 1, 0, 6, 1, 0,
                                    4, 1, 0, 7, 2, 0, 3, 2, 0, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 1}};
  const std::array<int, 2> ind_shape = {10, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 0, 3, 0, 2, 0, 4, 0, 2, 0, 5, 0, 0, 0,
                                    5, 0, 1, 0, 0, 0, 1, 0, 6, 0, 1, 0, 4, 0,
                                    1, 0, 7, 0, 2, 0, 3, 0, 2, 0, 1, 0};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2,
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9,
      7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6,
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2,
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9,
      7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6,
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4,
      4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8,
      5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2,
      5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4};
  const std::vector<int> indices = {0, 0, 3, 2, 0, 4, 2, 0, 5, 0,
                                    0, 5, 1, 0, 0, 1, 0, 6, 1, 0,
                                    4, 1, 0, 7, 2, 0, 3, 2, 0, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
                                         6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                         4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
                                         5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 5}};
  const std::array<int, 2> ind_shape = {43, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3,
      2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6,
      3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4,
      1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0,
      8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4};
  const std::vector<int> indices = {
      1, 0, 4, 2, 1, 0, 7, 1, 2, 0, 1, 4, 2, 0, 6, 4, 1, 0, 2, 3, 2, 0, 7, 0, 1,
      0, 6, 3, 0, 0, 7, 1, 2, 0, 6, 2, 2, 0, 7, 4, 0, 0, 4, 3, 2, 0, 4, 1, 1, 0,
      1, 1, 0, 0, 2, 3, 0, 0, 6, 3, 2, 0, 7, 2, 1, 0, 2, 0, 0, 0, 4, 1, 0, 0, 1,
      4, 2, 0, 4, 0, 0, 0, 3, 4, 2, 0, 0, 3, 2, 0, 0, 4, 2, 0, 7, 3, 0, 0, 5, 2,
      2, 0, 2, 4, 2, 0, 3, 3, 1, 0, 4, 3, 0, 0, 3, 1, 2, 0, 3, 0, 0, 0, 5, 0, 1,
      0, 5, 0, 0, 0, 3, 2, 1, 0, 3, 1, 1, 0, 3, 3, 0, 0, 1, 2, 0, 0, 4, 4, 0, 0,
      5, 4, 2, 0, 7, 1, 2, 0, 2, 0, 1, 0, 5, 3, 2, 0, 2, 1, 1, 0, 2, 1};
  const std::vector<DataType> updates = {
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
      1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4,
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8,
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {2, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7};
  const std::vector<int> indices = {2, 0, 0, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
      1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4,
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8,
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0};
  const std::vector<int> indices = {0, 0, 3, 2, 0, 4, 2, 0, 5, 0,
                                    0, 5, 1, 0, 0, 1, 0, 6, 1, 0,
                                    4, 1, 0, 7, 2, 0, 3, 2, 0, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x1x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 1, 8, 8}};
  const std::array<int, 2> ind_shape = {68, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4};
  const std::vector<int> indices = {
      1, 0, 1, 7, 2, 0, 1, 1, 0, 0, 4, 3, 2, 0, 6, 7, 1, 0, 3, 0, 1, 0, 0, 1, 1,
      0, 5, 5, 0, 0, 1, 6, 0, 0, 0, 4, 2, 0, 3, 6, 0, 0, 5, 6, 1, 0, 7, 5, 2, 0,
      4, 6, 1, 0, 4, 1, 1, 0, 4, 3, 2, 0, 1, 6, 0, 0, 2, 7, 2, 0, 2, 7, 2, 0, 0,
      2, 1, 0, 6, 0, 2, 0, 2, 4, 1, 0, 4, 6, 2, 0, 7, 5, 0, 0, 3, 2, 1, 0, 3, 6,
      0, 0, 7, 1, 2, 0, 6, 3, 0, 0, 6, 4, 1, 0, 7, 4, 1, 0, 2, 3, 2, 0, 4, 2, 1,
      0, 4, 5, 2, 0, 5, 7, 0, 0, 1, 5, 2, 0, 0, 5, 0, 0, 5, 4, 0, 0, 4, 2, 1, 0,
      5, 4, 1, 0, 6, 5, 0, 0, 3, 4, 0, 0, 5, 0, 0, 0, 3, 1, 0, 0, 2, 0, 1, 0, 1,
      5, 1, 0, 0, 3, 0, 0, 2, 6, 0, 0, 3, 5, 1, 0, 2, 1, 2, 0, 1, 3, 1, 0, 2, 0,
      0, 0, 7, 6, 1, 0, 2, 7, 2, 0, 1, 2, 2, 0, 6, 0, 1, 0, 1, 1, 0, 0, 2, 3, 1,
      0, 6, 6, 2, 0, 7, 2, 2, 0, 0, 6, 0, 0, 1, 3, 0, 0, 4, 1, 2, 0, 1, 4, 0, 0,
      4, 0, 0, 0, 6, 3, 0, 0, 2, 2, 1, 0, 7, 1, 2, 0, 5, 3, 2, 0, 6, 6};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7,
      5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {9, 3, 8, 3, 5, 5};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5, 2};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5, 2};
  const std::vector<int> indices = {0, 1, 0, 1, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 1}};
  const std::array<int, 2> ind_shape = {3, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {3, 8, 3, 5, 5, 2};
  const std::vector<int> indices = {0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6,
                                       2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
                                       7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7, 2, 9, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2, 4, 0,
                                       8, 4, 6, 2, 3, 1, 7, 7, 2, 7,
                                       0, 3, 1, 7, 3, 4, 4, 4, 2, 5};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {2, 9, 9, 7, 6, 1, 0, 2, 4, 0,
                                       8, 4, 6, 2, 3, 1, 7, 7, 2, 7,
                                       0, 3, 1, 7, 3, 4, 4, 4, 2, 5};
  const std::vector<int> indices = {0, 1, 0, 1, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5,
                                         2, 1, 2, 6, 6, 9, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 5}};
  const std::array<int, 2> ind_shape = {12, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                       4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
                                       0, 0, 1, 5, 8, 8, 6, 6, 3, 9};
  const std::vector<int> indices = {
      1, 1, 0, 1, 2, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 1, 1, 1, 0, 2,
      1, 1, 0, 3, 2, 0, 0, 3, 0, 1, 0, 4, 1, 1, 0, 0, 0, 1, 0, 1, 2, 1, 0, 0};
  const std::vector<DataType> updates = {7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2,
                                         1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {3, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4};
  const std::vector<int> indices = {0, 1, 0, 1, 1, 0, 0, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 1, 8}};
  const std::array<int, 2> ind_shape = {18, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {
      0, 1, 0, 5, 2, 0, 0, 5, 2, 0, 0, 4, 1, 1, 0, 3, 2, 1, 0, 1, 1, 0, 0, 7,
      1, 1, 0, 5, 2, 1, 0, 5, 0, 1, 0, 2, 0, 0, 0, 7, 1, 1, 0, 1, 0, 1, 0, 7,
      2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 6, 2, 1, 0, 2, 1, 1, 0, 7};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {5, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1};
  const std::vector<int> indices = {1, 1, 1, 0, 0, 1, 2, 0,
                                    1, 0, 1, 1, 0, 1, 0};
  const std::vector<DataType> updates = {8, 3, 5, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 1}};
  const std::array<int, 2> ind_shape = {5, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1};
  const std::vector<int> indices = {1, 1, 1, 0, 0, 0, 1, 0, 2, 0,
                                    1, 0, 0, 1, 1, 0, 0, 1, 0, 0};
  const std::vector<DataType> updates = {8, 3, 5, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6,
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9,
      7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1,
      0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9,
      5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1,
                                         2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {5, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0,
      1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2,
      9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8};
  const std::vector<int> indices = {1, 1, 1, 0, 0, 1, 2, 0,
                                    1, 0, 1, 1, 0, 1, 0};
  const std::vector<DataType> updates = {8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9,
                                         9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 5}};
  const std::array<int, 2> ind_shape = {22, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3,
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6,
      0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2};
  const std::vector<int> indices = {
      0, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 2, 0, 0, 1, 3, 2, 0, 0, 0, 2, 0,
      1, 4, 2, 1, 0, 4, 1, 0, 1, 3, 0, 0, 1, 4, 2, 0, 0, 1, 2, 1, 1, 1,
      0, 1, 1, 3, 1, 1, 0, 0, 2, 1, 0, 0, 2, 1, 1, 0, 2, 0, 1, 0, 1, 1,
      0, 4, 1, 1, 0, 1, 0, 1, 0, 2, 0, 1, 0, 1, 2, 1, 0, 3, 0, 1, 0, 4};
  const std::vector<DataType> updates = {7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0,
                                         1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1,
      0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
      1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4,
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2,
      6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2,
      6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {
      6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {5, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5,
      2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0,
      0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2,
      1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7};
  const std::vector<int> indices = {1, 1, 1, 0, 0, 1, 2, 0,
                                    1, 0, 1, 1, 0, 1, 0};
  const std::vector<DataType> updates = {
      8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 2, 8}};
  const std::array<int, 2> ind_shape = {35, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8,
      4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3,
      2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6,
      3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4};
  const std::vector<int> indices = {
      1, 1, 1, 1, 1, 0, 1, 4, 0, 0, 1, 0, 1, 0, 1, 5, 1, 1, 0, 0, 2, 0, 1, 7,
      0, 1, 0, 1, 2, 1, 1, 0, 2, 1, 0, 2, 2, 1, 1, 3, 2, 0, 0, 1, 2, 1, 1, 4,
      0, 0, 1, 7, 2, 0, 1, 3, 1, 1, 0, 1, 0, 0, 0, 6, 0, 0, 1, 6, 0, 0, 1, 5,
      1, 1, 1, 3, 2, 0, 1, 5, 1, 1, 1, 6, 1, 0, 1, 3, 0, 1, 0, 7, 2, 1, 1, 6,
      1, 0, 0, 7, 0, 1, 1, 3, 2, 1, 0, 1, 0, 1, 1, 7, 1, 0, 1, 1, 0, 1, 0, 4,
      2, 1, 0, 3, 2, 0, 0, 4, 0, 0, 1, 3, 2, 1, 0, 5, 1, 1, 0, 4};
  const std::vector<DataType> updates = {7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4,
                                         5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
                                         8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2,
                                         1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6,
                                         6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {0, 1, 5, 2, 0, 5, 2, 0, 4, 1, 1, 3, 2, 1,
                                    1, 1, 0, 7, 1, 1, 5, 2, 1, 5, 0, 1, 2, 0,
                                    0, 7, 1, 1, 1, 0, 1, 7, 2, 0, 1, 0, 1, 0,
                                    0, 1, 1, 0, 0, 6, 2, 1, 2, 1, 1, 7};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 1}};
  const std::array<int, 2> ind_shape = {18, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {
      0, 1, 5, 0, 2, 0, 5, 0, 2, 0, 4, 0, 1, 1, 3, 0, 2, 1, 1, 0, 1, 0, 7, 0,
      1, 1, 5, 0, 2, 1, 5, 0, 0, 1, 2, 0, 0, 0, 7, 0, 1, 1, 1, 0, 0, 1, 7, 0,
      2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 6, 0, 2, 1, 2, 0, 1, 1, 7, 0};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9,
      6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3,
      2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4,
      7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2,
      9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1,
      1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1,
      2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8,
      3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3,
      6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1,
      0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2,
      5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5,
      5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3,
      0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4,
      4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8,
      5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4,
      2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0,
      3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0,
      3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3,
      6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6,
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7,
      6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9,
      5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {
      6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2,
      6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4,
      2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0,
      3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0,
      3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3,
      6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6,
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7,
      6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9,
      5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1};
  const std::vector<int> indices = {0, 1, 5, 2, 0, 5, 2, 0, 4, 1, 1, 3, 2, 1,
                                    1, 1, 0, 7, 1, 1, 5, 2, 1, 5, 0, 1, 2, 0,
                                    0, 7, 1, 1, 1, 0, 1, 7, 2, 0, 1, 0, 1, 0,
                                    0, 1, 1, 0, 0, 6, 2, 1, 2, 1, 1, 7};
  const std::vector<DataType> updates = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
      5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4,
      5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5,
      6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 5}};
  const std::array<int, 2> ind_shape = {85, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4,
      8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3,
      8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4,
      7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0,
      3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6,
      5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8,
      4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7,
      0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3,
      5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3,
      9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1};
  const std::vector<int> indices = {
      1, 0, 7, 0, 0, 0, 7, 1, 0, 0, 6, 2, 1, 0, 5, 1, 0, 1, 5, 3, 0, 0, 5, 2, 2,
      1, 1, 1, 0, 0, 3, 4, 0, 1, 3, 2, 1, 1, 5, 3, 0, 0, 2, 3, 1, 1, 1, 3, 0, 1,
      3, 0, 0, 0, 4, 2, 0, 1, 7, 2, 1, 1, 0, 4, 1, 0, 1, 3, 0, 1, 4, 2, 1, 0, 5,
      4, 2, 0, 5, 2, 2, 0, 1, 3, 2, 1, 1, 0, 1, 1, 5, 4, 0, 1, 0, 0, 1, 1, 3, 3,
      1, 1, 7, 3, 2, 0, 0, 1, 2, 1, 4, 2, 1, 0, 3, 1, 0, 0, 1, 0, 2, 1, 6, 1, 0,
      1, 2, 4, 0, 0, 7, 4, 1, 0, 0, 1, 2, 1, 1, 2, 1, 1, 3, 4, 2, 0, 2, 3, 1, 1,
      4, 1, 2, 1, 4, 0, 2, 0, 4, 4, 2, 1, 7, 0, 0, 1, 6, 3, 2, 0, 0, 0, 0, 1, 6,
      2, 2, 0, 0, 4, 2, 1, 6, 3, 1, 0, 2, 3, 0, 0, 6, 1, 1, 0, 4, 3, 2, 1, 2, 0,
      2, 1, 2, 4, 2, 1, 3, 2, 1, 1, 2, 4, 0, 0, 4, 3, 2, 0, 6, 2, 1, 0, 4, 0, 1,
      1, 0, 2, 0, 1, 4, 4, 2, 1, 7, 2, 0, 0, 3, 2, 0, 1, 7, 4, 2, 0, 0, 3, 2, 1,
      5, 0, 1, 0, 2, 4, 0, 1, 2, 0, 0, 0, 3, 0, 1, 1, 4, 0, 2, 1, 3, 0, 2, 0, 7,
      2, 2, 0, 2, 4, 1, 1, 0, 0, 1, 0, 3, 0, 1, 1, 0, 3, 0, 0, 7, 0, 1, 1, 1, 2,
      2, 1, 6, 4, 2, 1, 3, 4, 0, 1, 0, 3, 1, 0, 6, 4, 0, 1, 1, 3, 1, 1, 2, 1, 2,
      0, 3, 1, 0, 1, 0, 2, 2, 1, 6, 0, 0, 0, 5, 1};
  const std::vector<DataType> updates = {
      8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3,
      4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5,
      0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2,
      9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1,
      1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1,
      2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8,
      3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3,
      6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0,
      3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1,
      9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9,
      1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2,
      9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6,
      9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7,
      5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8,
      0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9,
      2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1,
      0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3,
      1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0,
      2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
      4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9,
      5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {3, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0,
      3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3,
      6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6,
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7,
      6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9,
      5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1,
      5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4,
      2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2,
      9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6,
      4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4,
      8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9,
      3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3,
      5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8,
      0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4,
      0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7};
  const std::vector<int> indices = {0, 1, 1, 1, 0, 0};
  const std::vector<DataType> updates = {
      6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
      0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2,
      6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2,
      6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4,
      2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4,
      0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6,
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1,
      9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1,
      2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1,
      1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6,
      4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9,
      9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5};
  const std::vector<int> indices = {0, 1, 5, 2, 0, 5, 2, 0, 4, 1, 1, 3, 2, 1,
                                    1, 1, 0, 7, 1, 1, 5, 2, 1, 5, 0, 1, 2, 0,
                                    0, 7, 1, 1, 1, 0, 1, 7, 2, 0, 1, 0, 1, 0,
                                    0, 1, 1, 0, 0, 6, 2, 1, 2, 1, 1, 7};
  const std::vector<DataType> updates = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2,
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x2x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 2, 8, 8}};
  const std::array<int, 2> ind_shape = {135, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9,
      4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1,
      8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9,
      8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9,
      4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5,
      0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0,
      1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2,
      9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0,
      1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3, 1,
      4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6,
      4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3,
      2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6,
      0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4,
      4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6,
      1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3,
      0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4};
  const std::vector<int> indices = {
      1, 0, 7, 5, 0, 0, 3, 4, 0, 0, 4, 1, 2, 0, 3, 2, 1, 1, 0, 4, 0, 1, 3, 1, 0,
      1, 3, 0, 0, 1, 7, 2, 0, 1, 1, 7, 1, 0, 5, 7, 2, 1, 7, 1, 1, 1, 4, 5, 1, 1,
      3, 2, 0, 0, 3, 0, 1, 1, 7, 6, 2, 0, 4, 4, 2, 1, 0, 6, 1, 0, 4, 1, 2, 1, 7,
      7, 2, 1, 3, 6, 0, 1, 0, 3, 0, 1, 4, 2, 2, 1, 2, 1, 1, 0, 3, 4, 2, 0, 5, 1,
      0, 1, 3, 6, 1, 0, 2, 5, 1, 1, 1, 3, 0, 0, 2, 6, 0, 0, 4, 7, 1, 1, 6, 4, 0,
      0, 1, 0, 1, 0, 1, 3, 2, 0, 7, 1, 0, 1, 5, 4, 2, 1, 7, 5, 1, 0, 6, 6, 0, 1,
      5, 0, 1, 0, 0, 5, 2, 0, 5, 3, 0, 1, 4, 3, 1, 1, 0, 5, 1, 0, 4, 3, 0, 1, 6,
      1, 2, 1, 5, 7, 2, 1, 5, 5, 2, 1, 5, 3, 0, 1, 6, 3, 1, 1, 5, 0, 2, 1, 6, 4,
      2, 0, 1, 2, 1, 0, 7, 0, 1, 0, 5, 5, 0, 0, 7, 4, 2, 0, 3, 0, 2, 1, 6, 3, 0,
      0, 6, 3, 2, 1, 5, 2, 0, 0, 6, 1, 2, 0, 7, 3, 0, 0, 4, 5, 0, 1, 3, 4, 0, 0,
      1, 3, 2, 0, 0, 6, 1, 1, 2, 0, 1, 0, 2, 6, 0, 0, 7, 7, 2, 1, 6, 0, 2, 1, 2,
      5, 2, 1, 3, 5, 2, 1, 1, 7, 2, 0, 3, 7, 0, 1, 1, 1, 1, 1, 1, 2, 1, 0, 3, 6,
      0, 1, 2, 1, 0, 0, 0, 7, 1, 1, 6, 7, 0, 1, 4, 1, 1, 1, 7, 0, 1, 0, 1, 5, 1,
      1, 2, 1, 0, 0, 7, 2, 1, 0, 7, 4, 1, 1, 4, 4, 2, 0, 5, 7, 1, 0, 7, 7, 2, 1,
      4, 4, 0, 0, 0, 1, 0, 0, 7, 0, 1, 1, 4, 7, 1, 0, 6, 2, 1, 1, 7, 2, 2, 1, 5,
      6, 0, 1, 4, 7, 1, 1, 7, 1, 0, 0, 5, 5, 0, 0, 5, 6, 2, 0, 2, 1, 1, 1, 2, 7,
      0, 0, 7, 6, 0, 1, 4, 4, 0, 1, 5, 6, 2, 1, 0, 0, 1, 1, 5, 1, 0, 0, 3, 2, 2,
      1, 3, 7, 1, 1, 7, 4, 0, 1, 2, 6, 1, 1, 4, 0, 1, 0, 2, 4, 2, 0, 1, 0, 1, 0,
      3, 2, 2, 0, 7, 7, 1, 0, 4, 6, 0, 1, 2, 0, 0, 0, 2, 7, 0, 0, 2, 4, 1, 1, 1,
      6, 1, 1, 2, 6, 2, 1, 4, 1, 0, 0, 4, 3, 0, 1, 7, 1, 1, 0, 6, 3, 1, 0, 1, 1,
      2, 1, 2, 7, 1, 1, 3, 6, 2, 0, 0, 2, 1, 1, 1, 1, 2, 0, 2, 0, 1, 1, 3, 1, 1,
      1, 0, 7, 1, 0, 7, 3, 0, 0, 6, 6, 1, 1, 3, 4};
  const std::vector<DataType> updates = {
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5,
      7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1,
      4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8,
      9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1,
      3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3,
      7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8,
                                       4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3,
                                         5, 5, 2, 1, 2, 6, 6, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 3, 0, 2, 4, 0, 2, 5, 0, 0,
                                    5, 0, 1, 0, 0, 1, 6, 0, 1, 4,
                                    0, 1, 7, 0, 2, 3, 0, 2, 1, 0};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 1}};
  const std::array<int, 2> ind_shape = {10, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0,
                                       3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1};
  const std::vector<int> indices = {0, 3, 0, 0, 2, 4, 0, 0, 2, 5, 0, 0, 0, 5,
                                    0, 0, 1, 0, 0, 0, 1, 6, 0, 0, 1, 4, 0, 0,
                                    1, 7, 0, 0, 2, 3, 0, 0, 2, 1, 0, 0};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2,
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9,
      7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6,
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4,
      4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8,
      5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2,
      5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
                                         6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                         4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
                                         5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2,
      8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4,
      4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8,
      5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2,
      5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4};
  const std::vector<int> indices = {0, 3, 0, 2, 4, 0, 2, 5, 0, 0,
                                    5, 0, 1, 0, 0, 1, 6, 0, 1, 4,
                                    0, 1, 7, 0, 2, 3, 0, 2, 1, 0};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4,
                                         6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3,
                                         4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
                                         5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 5}};
  const std::array<int, 2> ind_shape = {43, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3,
      2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6,
      3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4,
      1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0,
      8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4};
  const std::vector<int> indices = {
      1, 4, 0, 2, 1, 7, 0, 1, 2, 1, 0, 4, 2, 6, 0, 4, 1, 2, 0, 3, 2, 7, 0, 0, 1,
      6, 0, 3, 0, 7, 0, 1, 2, 6, 0, 2, 2, 7, 0, 4, 0, 4, 0, 3, 2, 4, 0, 1, 1, 1,
      0, 1, 0, 2, 0, 3, 0, 6, 0, 3, 2, 7, 0, 2, 1, 2, 0, 0, 0, 4, 0, 1, 0, 1, 0,
      4, 2, 4, 0, 0, 0, 3, 0, 4, 2, 0, 0, 3, 2, 0, 0, 4, 2, 7, 0, 3, 0, 5, 0, 2,
      2, 2, 0, 4, 2, 3, 0, 3, 1, 4, 0, 3, 0, 3, 0, 1, 2, 3, 0, 0, 0, 5, 0, 0, 1,
      5, 0, 0, 0, 3, 0, 2, 1, 3, 0, 1, 1, 3, 0, 3, 0, 1, 0, 2, 0, 4, 0, 4, 0, 5,
      0, 4, 2, 7, 0, 1, 2, 2, 0, 0, 1, 5, 0, 3, 2, 2, 0, 1, 1, 2, 0, 1};
  const std::vector<DataType> updates = {
      6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
      1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4,
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8,
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {10, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0};
  const std::vector<int> indices = {0, 3, 0, 2, 4, 0, 2, 5, 0, 0,
                                    5, 0, 1, 0, 0, 1, 6, 0, 1, 4,
                                    0, 1, 7, 0, 2, 3, 0, 2, 1, 0};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x1x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 1, 8}};
  const std::array<int, 2> ind_shape = {68, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4};
  const std::vector<int> indices = {
      1, 1, 0, 7, 2, 1, 0, 1, 0, 4, 0, 3, 2, 6, 0, 7, 1, 3, 0, 0, 1, 0, 0, 1, 1,
      5, 0, 5, 0, 1, 0, 6, 0, 0, 0, 4, 2, 3, 0, 6, 0, 5, 0, 6, 1, 7, 0, 5, 2, 4,
      0, 6, 1, 4, 0, 1, 1, 4, 0, 3, 2, 1, 0, 6, 0, 2, 0, 7, 2, 2, 0, 7, 2, 0, 0,
      2, 1, 6, 0, 0, 2, 2, 0, 4, 1, 4, 0, 6, 2, 7, 0, 5, 0, 3, 0, 2, 1, 3, 0, 6,
      0, 7, 0, 1, 2, 6, 0, 3, 0, 6, 0, 4, 1, 7, 0, 4, 1, 2, 0, 3, 2, 4, 0, 2, 1,
      4, 0, 5, 2, 5, 0, 7, 0, 1, 0, 5, 2, 0, 0, 5, 0, 5, 0, 4, 0, 4, 0, 2, 1, 5,
      0, 4, 1, 6, 0, 5, 0, 3, 0, 4, 0, 5, 0, 0, 0, 3, 0, 1, 0, 2, 0, 0, 1, 1, 0,
      5, 1, 0, 0, 3, 0, 2, 0, 6, 0, 3, 0, 5, 1, 2, 0, 1, 2, 1, 0, 3, 1, 2, 0, 0,
      0, 7, 0, 6, 1, 2, 0, 7, 2, 1, 0, 2, 2, 6, 0, 0, 1, 1, 0, 1, 0, 2, 0, 3, 1,
      6, 0, 6, 2, 7, 0, 2, 2, 0, 0, 6, 0, 1, 0, 3, 0, 4, 0, 1, 2, 1, 0, 4, 0, 4,
      0, 0, 0, 6, 0, 3, 0, 2, 0, 2, 1, 7, 0, 1, 2, 5, 0, 3, 2, 6, 0, 6};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7,
      5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2,
                                         1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
                                         1, 0, 2, 4, 0, 8, 4, 6, 2, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6,
      3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {7, 2, 9, 9, 7, 6, 1, 0, 2, 4,
                                         0, 8, 4, 6, 2, 3, 1, 7, 7, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {0, 6, 1, 2, 2, 1, 2, 2, 0, 1, 5, 1, 2, 4,
                                    1, 1, 3, 1, 1, 6, 1, 2, 6, 1, 0, 5, 0, 0,
                                    3, 1, 1, 4, 1, 0, 7, 1, 2, 0, 1, 0, 4, 0,
                                    0, 4, 1, 0, 3, 0, 2, 5, 0, 1, 7, 1};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 1}};
  const std::array<int, 2> ind_shape = {18, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4,
      3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2};
  const std::vector<int> indices = {
      0, 6, 1, 0, 2, 2, 1, 0, 2, 2, 0, 0, 1, 5, 1, 0, 2, 4, 1, 0, 1, 3, 1, 0,
      1, 6, 1, 0, 2, 6, 1, 0, 0, 5, 0, 0, 0, 3, 1, 0, 1, 4, 1, 0, 0, 7, 1, 0,
      2, 0, 1, 0, 0, 4, 0, 0, 0, 4, 1, 0, 0, 3, 0, 0, 2, 5, 0, 0, 1, 7, 1, 0};
  const std::vector<DataType> updates = {1, 7, 7, 2, 7, 0, 3, 1, 7,
                                         3, 4, 4, 4, 2, 5, 8, 4, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9,
      6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3,
      2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4,
      7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2,
      9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1,
      1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1,
      2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8,
      3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3,
      6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1,
      0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2,
      5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5,
      5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3,
      0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4,
      4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8,
      5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1,
      2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6,
      8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3,
      4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3,
      1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1,
      5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9,
      9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6,
      0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4,
      6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8,
      6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2,
      8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4,
      2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0,
      3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0,
      3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3,
      6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6,
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7,
      6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2,
      7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9,
      5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1};
  const std::vector<int> indices = {0, 6, 1, 2, 2, 1, 2, 2, 0, 1, 5, 1, 2, 4,
                                    1, 1, 3, 1, 1, 6, 1, 2, 6, 1, 0, 5, 0, 0,
                                    3, 1, 1, 4, 1, 0, 7, 1, 2, 0, 1, 0, 4, 0,
                                    0, 4, 1, 0, 3, 0, 2, 5, 0, 1, 7, 1};
  const std::vector<DataType> updates = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1,
      5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4,
      5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5,
      6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 5}};
  const std::array<int, 2> ind_shape = {85, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4,
      8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3,
      8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4,
      7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0,
      3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6,
      5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8,
      4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7,
      0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3,
      5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3,
      9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1};
  const std::vector<int> indices = {
      1, 3, 1, 0, 0, 3, 1, 1, 0, 3, 0, 2, 1, 2, 1, 1, 0, 6, 1, 3, 0, 2, 1, 2, 2,
      4, 1, 1, 0, 1, 1, 4, 0, 5, 1, 2, 1, 6, 1, 3, 0, 1, 0, 3, 1, 4, 1, 3, 0, 5,
      1, 0, 0, 2, 0, 2, 0, 7, 1, 2, 1, 4, 0, 4, 1, 0, 1, 3, 0, 6, 0, 2, 1, 2, 1,
      4, 2, 2, 1, 2, 2, 0, 1, 3, 2, 4, 1, 0, 1, 6, 1, 4, 0, 4, 0, 0, 1, 5, 1, 3,
      1, 7, 1, 3, 2, 0, 0, 1, 2, 6, 0, 2, 1, 1, 1, 1, 0, 0, 1, 0, 2, 7, 0, 1, 0,
      5, 0, 4, 0, 3, 1, 4, 1, 0, 0, 1, 2, 4, 1, 2, 1, 5, 1, 4, 2, 1, 0, 3, 1, 6,
      0, 1, 2, 6, 0, 0, 2, 2, 0, 4, 2, 7, 1, 0, 0, 7, 0, 3, 2, 0, 0, 0, 0, 7, 0,
      2, 2, 0, 0, 4, 2, 7, 0, 3, 1, 1, 0, 3, 0, 3, 0, 1, 1, 2, 0, 3, 2, 5, 0, 0,
      2, 5, 0, 4, 2, 5, 1, 2, 1, 5, 0, 4, 0, 2, 0, 3, 2, 3, 0, 2, 1, 2, 0, 0, 1,
      4, 0, 2, 0, 6, 0, 4, 2, 7, 1, 2, 0, 1, 1, 2, 0, 7, 1, 4, 2, 0, 0, 3, 2, 6,
      1, 0, 1, 1, 0, 4, 0, 5, 0, 0, 0, 1, 1, 0, 1, 6, 0, 0, 2, 5, 1, 0, 2, 3, 1,
      2, 2, 1, 0, 4, 1, 4, 0, 0, 1, 1, 1, 0, 1, 4, 0, 3, 0, 3, 1, 0, 1, 4, 1, 2,
      2, 7, 0, 4, 2, 5, 1, 4, 0, 4, 0, 3, 1, 3, 0, 4, 0, 4, 1, 3, 1, 5, 0, 1, 2,
      1, 1, 1, 0, 4, 0, 2, 2, 7, 0, 0, 0, 2, 1, 1};
  const std::vector<DataType> updates = {
      8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3,
      4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5,
      0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2,
      9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1,
      1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1,
      2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8,
      3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3,
      6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0,
      3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1,
      9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9,
      1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2,
      9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6,
      9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7,
      5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8,
      0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9,
      2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1,
      0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3,
      1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0,
      2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8,
      4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9,
      5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6,
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4,
      0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6,
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1,
      9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1,
      2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1,
      1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6,
      4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9,
      9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3,
      1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9,
      6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4,
      2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4,
      6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7,
      2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6,
      7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {18, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4,
      0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6,
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1,
      9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1,
      2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1,
      1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6,
      4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9,
      9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5};
  const std::vector<int> indices = {0, 6, 1, 2, 2, 1, 2, 2, 0, 1, 5, 1, 2, 4,
                                    1, 1, 3, 1, 1, 6, 1, 2, 6, 1, 0, 5, 0, 0,
                                    3, 1, 1, 4, 1, 0, 7, 1, 2, 0, 1, 0, 4, 0,
                                    0, 4, 1, 0, 3, 0, 2, 5, 0, 1, 7, 1};
  const std::vector<DataType> updates = {
      1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6,
      8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1,
      3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2,
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x2x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 2, 8}};
  const std::array<int, 2> ind_shape = {135, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9,
      4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1,
      8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9,
      8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9,
      4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5,
      0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0,
      1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2,
      9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0,
      1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3, 1,
      4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6,
      4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3,
      2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6,
      0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4,
      4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6,
      1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3,
      0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4};
  const std::vector<int> indices = {
      1, 3, 1, 5, 0, 1, 1, 4, 0, 2, 0, 1, 2, 1, 1, 2, 1, 4, 0, 4, 0, 5, 1, 1, 0,
      5, 1, 0, 0, 7, 1, 2, 0, 4, 1, 7, 1, 2, 1, 7, 2, 7, 1, 1, 1, 6, 0, 5, 1, 5,
      1, 2, 0, 1, 1, 0, 1, 7, 1, 6, 2, 2, 0, 4, 2, 4, 0, 6, 1, 2, 0, 1, 2, 7, 1,
      7, 2, 5, 1, 6, 0, 4, 0, 3, 0, 6, 0, 2, 2, 5, 0, 1, 1, 1, 1, 4, 2, 2, 1, 1,
      0, 5, 1, 6, 1, 1, 0, 5, 1, 4, 1, 3, 0, 1, 0, 6, 0, 2, 0, 7, 1, 7, 0, 4, 0,
      0, 1, 0, 1, 0, 1, 3, 2, 3, 1, 1, 0, 6, 1, 4, 2, 7, 1, 5, 1, 3, 0, 6, 0, 6,
      1, 0, 1, 0, 0, 5, 2, 2, 1, 3, 0, 6, 0, 3, 1, 4, 0, 5, 1, 2, 0, 3, 0, 7, 0,
      1, 2, 6, 1, 7, 2, 6, 1, 5, 2, 6, 1, 3, 0, 7, 0, 3, 1, 6, 1, 0, 2, 7, 0, 4,
      2, 0, 1, 2, 1, 3, 1, 0, 1, 2, 1, 5, 0, 3, 1, 4, 2, 1, 1, 0, 2, 7, 0, 3, 0,
      3, 0, 3, 2, 6, 1, 2, 0, 3, 0, 1, 2, 3, 1, 3, 0, 2, 0, 5, 0, 5, 1, 4, 0, 0,
      1, 3, 2, 0, 0, 6, 1, 5, 0, 0, 1, 1, 0, 6, 0, 3, 1, 7, 2, 7, 0, 0, 2, 5, 0,
      5, 2, 5, 1, 5, 2, 4, 1, 7, 2, 1, 1, 7, 0, 4, 1, 1, 1, 4, 1, 2, 1, 1, 1, 6,
      0, 5, 0, 1, 0, 0, 0, 7, 1, 7, 0, 7, 0, 6, 0, 1, 1, 7, 1, 0, 1, 0, 1, 5, 1,
      5, 0, 1, 0, 3, 1, 2, 1, 3, 1, 4, 1, 6, 0, 4, 2, 2, 1, 7, 1, 3, 1, 7, 2, 6,
      0, 4, 0, 0, 0, 1, 0, 3, 1, 0, 1, 6, 0, 7, 1, 3, 0, 2, 1, 7, 1, 2, 2, 6, 1,
      6, 0, 6, 0, 7, 1, 7, 1, 1, 0, 2, 1, 5, 0, 2, 1, 6, 2, 1, 0, 1, 1, 5, 0, 7,
      0, 3, 1, 6, 0, 6, 0, 4, 0, 6, 1, 6, 2, 4, 0, 0, 1, 6, 1, 1, 0, 1, 1, 2, 2,
      5, 1, 7, 1, 7, 1, 4, 0, 5, 0, 6, 1, 6, 0, 0, 1, 1, 0, 4, 2, 0, 1, 0, 1, 1,
      1, 2, 2, 3, 1, 7, 1, 2, 0, 6, 0, 5, 0, 0, 0, 1, 0, 7, 0, 1, 0, 4, 1, 4, 1,
      6, 1, 5, 0, 6, 2, 6, 0, 1, 0, 2, 0, 3, 0, 7, 1, 1, 1, 3, 0, 3, 1, 0, 1, 1,
      2, 5, 0, 7, 1, 5, 1, 6, 2, 0, 0, 2, 1, 4, 1, 1, 2, 1, 0, 0, 1, 5, 1, 1, 1,
      4, 0, 7, 1, 3, 1, 3, 0, 3, 0, 6, 1, 5, 1, 4};
  const std::vector<DataType> updates = {
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5,
      7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1,
      4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8,
      9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1,
      3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3,
      7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x1_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0,
      4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1,
      2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6,
      1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4,
      4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8,
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1,
      8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x1_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2,
      9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6,
      8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8,
      6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9,
      1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3,
      8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2,
      1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2,
      7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5,
      8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2,
      6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x1_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {68, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4};
  const std::vector<int> indices = {
      1, 1, 7, 2, 1, 1, 0, 4, 3, 2, 6, 7, 1, 3, 0, 1, 0, 1, 1, 5, 5, 0, 1,
      6, 0, 0, 4, 2, 3, 6, 0, 5, 6, 1, 7, 5, 2, 4, 6, 1, 4, 1, 1, 4, 3, 2,
      1, 6, 0, 2, 7, 2, 2, 7, 2, 0, 2, 1, 6, 0, 2, 2, 4, 1, 4, 6, 2, 7, 5,
      0, 3, 2, 1, 3, 6, 0, 7, 1, 2, 6, 3, 0, 6, 4, 1, 7, 4, 1, 2, 3, 2, 4,
      2, 1, 4, 5, 2, 5, 7, 0, 1, 5, 2, 0, 5, 0, 5, 4, 0, 4, 2, 1, 5, 4, 1,
      6, 5, 0, 3, 4, 0, 5, 0, 0, 3, 1, 0, 2, 0, 1, 1, 5, 1, 0, 3, 0, 2, 6,
      0, 3, 5, 1, 2, 1, 2, 1, 3, 1, 2, 0, 0, 7, 6, 1, 2, 7, 2, 1, 2, 2, 6,
      0, 1, 1, 1, 0, 2, 3, 1, 6, 6, 2, 7, 2, 2, 0, 6, 0, 1, 3, 0, 4, 1, 2,
      1, 4, 0, 4, 0, 0, 6, 3, 0, 2, 2, 1, 7, 1, 2, 5, 3, 2, 6, 6};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7,
      5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x1_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const std::array<int, 2> ind_shape = {68, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9,
      1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4,
      3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6,
      1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9,
      9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7,
      2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6,
      6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3,
      0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4};
  const std::vector<int> indices = {
      1, 1, 7, 0, 2, 1, 1, 0, 0, 4, 3, 0, 2, 6, 7, 0, 1, 3, 0, 0, 1, 0, 1, 0, 1,
      5, 5, 0, 0, 1, 6, 0, 0, 0, 4, 0, 2, 3, 6, 0, 0, 5, 6, 0, 1, 7, 5, 0, 2, 4,
      6, 0, 1, 4, 1, 0, 1, 4, 3, 0, 2, 1, 6, 0, 0, 2, 7, 0, 2, 2, 7, 0, 2, 0, 2,
      0, 1, 6, 0, 0, 2, 2, 4, 0, 1, 4, 6, 0, 2, 7, 5, 0, 0, 3, 2, 0, 1, 3, 6, 0,
      0, 7, 1, 0, 2, 6, 3, 0, 0, 6, 4, 0, 1, 7, 4, 0, 1, 2, 3, 0, 2, 4, 2, 0, 1,
      4, 5, 0, 2, 5, 7, 0, 0, 1, 5, 0, 2, 0, 5, 0, 0, 5, 4, 0, 0, 4, 2, 0, 1, 5,
      4, 0, 1, 6, 5, 0, 0, 3, 4, 0, 0, 5, 0, 0, 0, 3, 1, 0, 0, 2, 0, 0, 1, 1, 5,
      0, 1, 0, 3, 0, 0, 2, 6, 0, 0, 3, 5, 0, 1, 2, 1, 0, 2, 1, 3, 0, 1, 2, 0, 0,
      0, 7, 6, 0, 1, 2, 7, 0, 2, 1, 2, 0, 2, 6, 0, 0, 1, 1, 1, 0, 0, 2, 3, 0, 1,
      6, 6, 0, 2, 7, 2, 0, 2, 0, 6, 0, 0, 1, 3, 0, 0, 4, 1, 0, 2, 1, 4, 0, 0, 4,
      0, 0, 0, 6, 3, 0, 0, 2, 2, 0, 1, 7, 1, 0, 2, 5, 3, 0, 2, 6, 6, 0};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7,
      5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0,
      2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x5_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3,
      2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0,
      0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5,
      8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8,
      5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2,
      1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4,
      5, 7, 5, 3, 0, 4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0,
      9, 6, 4, 7, 6, 7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2,
      4, 0, 7, 3, 4, 2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7,
      9, 9, 5, 4, 4, 0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7,
      3, 6, 2, 4, 2, 7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5,
      9, 0, 9, 7, 9, 3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8,
      2, 2, 0, 7, 0, 4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0,
      7, 4, 2, 3, 4, 2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7,
      5, 3, 7, 2, 8, 6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8, 9, 2, 7, 9, 3, 5, 9, 6, 3,
      0, 0, 5, 0, 8, 1, 9, 7, 3, 4, 1, 1, 9, 0, 4, 6, 4, 9, 4, 6, 5, 7, 0, 8, 0,
      2, 7, 4, 6, 5, 3, 7, 6, 0, 7, 1, 2, 9, 3, 5, 2, 5, 1, 0, 5, 4, 7, 1, 6, 0,
      2, 1, 6, 2, 4, 3, 4, 9, 0, 4, 7, 5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7,
      5, 6, 2, 3, 4, 6, 3, 6, 3, 4, 7, 2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5,
      9, 4, 3, 6, 6, 5, 4, 0, 4, 5, 7, 4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7,
      8, 0, 0, 1, 6, 3, 4, 2, 9, 5, 9, 0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5,
      5, 5, 4, 2, 3, 3, 0, 6, 7, 0, 2, 6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1,
      6, 2, 8, 7, 8, 4, 8, 9, 8, 8, 8, 5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9,
      5, 8, 9, 8, 6, 2, 2, 3, 1, 9, 5, 2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7,
      4, 8, 9, 7, 3, 6, 4, 9, 1, 3, 6, 2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2,
      8, 0, 8, 4, 2, 1, 0, 4, 6, 4, 2, 1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3,
      8, 9, 2, 1, 2, 7, 2, 4, 3, 5, 8, 8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1,
      5, 8, 5, 9, 3, 3, 4, 6, 5, 6, 0, 3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8,
      4, 0, 4, 1, 9, 3, 7, 4, 0, 3, 9, 8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7,
      9, 2, 3, 5, 6, 0, 9, 5, 4, 6, 1, 4, 2, 0, 4, 1, 1, 1, 4, 7, 9, 8, 8, 5, 5,
      5, 9, 3, 6, 9, 0, 7, 6, 8, 5, 6, 6, 4, 2, 3, 7, 6, 5, 1, 9, 5, 1, 8, 5, 4,
      8, 3, 1, 1, 7, 2, 9, 9, 7, 8, 6, 8, 2, 2, 9, 2, 0, 0, 3, 4, 0, 6, 4, 7, 7,
      2, 5, 7, 2, 9, 6, 2, 7, 1, 2, 1, 3, 0, 2, 4, 4, 8, 0, 3, 4, 1, 0, 9, 2, 0,
      9, 5, 0, 9, 2, 4, 3, 1, 8, 1, 1, 3, 9, 2, 7, 9, 8, 5, 8, 0, 5, 9, 0, 0, 9,
      9, 5, 5, 1, 9, 9, 7, 1, 6, 1, 6, 6, 1, 7, 8, 1, 4, 3, 5, 4, 4, 4, 5, 4, 0,
      4, 8, 0, 0, 9, 2, 5, 3, 7, 5, 6, 7, 9, 7, 5, 4, 3, 6, 7, 2, 1, 3, 5, 4, 7,
      5, 5, 1, 8, 2, 1, 1, 8, 4, 9, 4, 8, 9, 3, 3, 1, 6, 5, 1, 2, 1, 7, 1, 3, 8,
      7, 4, 3, 5, 4, 8, 9, 3, 3, 6, 0, 8, 9, 0, 1, 0, 2, 4, 7, 7, 0, 1, 7, 1, 4,
      5, 6, 4, 3, 8, 3, 9, 9, 2, 8};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2,
      4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3,
      2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0,
      5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8,
      4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2,
      3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6,
      1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1,
      0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8,
      0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4,
      8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8,
      5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1,
      5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0,
      7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3,
      3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0,
      3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9,
      4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8,
      9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7,
      6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4,
      0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2,
      7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2,
      0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9,
      1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8,
      7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8,
      6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x5_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9,
      6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6,
      3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1,
      8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5,
      8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7,
      0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5,
      7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6,
      1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3,
      1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6,
      4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3, 2,
      5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0, 0,
      9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5, 8,
      1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8, 5,
      3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2, 1,
      6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4, 5,
      7, 5, 3, 0, 4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0, 9,
      6, 4, 7, 6, 7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2, 4,
      0, 7, 3, 4, 2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7, 9,
      9, 5, 4, 4, 0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7, 3,
      6, 2, 4, 2, 7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5, 9,
      0, 9, 7, 9, 3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8, 2,
      2, 0, 7, 0, 4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0, 7,
      4, 2, 3, 4, 2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7, 5,
      3, 7, 2, 8, 6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8, 9, 2, 7, 9, 3, 5, 9, 6, 3, 0,
      0, 5, 0, 8, 1, 9, 7, 3, 4, 1, 1, 9, 0, 4, 6, 4, 9, 4, 6, 5, 7, 0, 8, 0, 2,
      7, 4, 6, 5, 3, 7, 6, 0, 7, 1, 2, 9, 3, 5, 2, 5, 1, 0, 5, 4, 7, 1, 6, 0, 2,
      1, 6, 2, 4, 3, 4, 9, 0, 4, 7, 5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7, 5,
      6, 2, 3, 4, 6, 3, 6, 3, 4, 7, 2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5, 9,
      4, 3, 6, 6, 5, 4, 0, 4, 5, 7, 4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7, 8,
      0, 0, 1, 6, 3, 4, 2, 9, 5, 9, 0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5, 5,
      5, 4, 2, 3, 3, 0, 6, 7, 0, 2, 6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1, 6,
      2, 8, 7, 8, 4, 8, 9, 8, 8, 8, 5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9, 5,
      8, 9, 8, 6, 2, 2, 3, 1, 9, 5, 2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7, 4,
      8, 9, 7, 3, 6, 4, 9, 1, 3, 6, 2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2, 8,
      0, 8, 4, 2, 1, 0, 4, 6, 4, 2, 1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3, 8,
      9, 2, 1, 2, 7, 2, 4, 3, 5, 8, 8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1, 5,
      8, 5, 9, 3, 3, 4, 6, 5, 6, 0, 3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8, 4,
      0, 4, 1, 9, 3, 7, 4, 0, 3, 9, 8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7, 9,
      2, 3, 5, 6, 0, 9, 5, 4, 6, 1};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1,
      7, 3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7,
      7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3,
      6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2,
      7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1,
      0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1,
      9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9,
      6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3,
      2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4,
      7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2,
      9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1,
      1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1,
      2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8,
      3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3,
      6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0,
      3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x5_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {68, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9,
      4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0,
      0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6,
      1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2,
      0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4,
      1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6,
      5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5,
      2, 1, 7, 5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7,
      1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2,
      9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7,
      1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1,
      9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5,
      8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7,
      5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0,
      5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6,
      7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4,
      3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0,
      7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1,
      8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9,
      9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6,
      9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5,
      7, 9, 9, 5, 1, 7, 0, 5, 8, 9, 2, 7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9,
      7, 3, 4, 1, 1, 9, 0, 4, 6, 4, 9, 4, 6, 5, 7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7,
      6, 0, 7, 1, 2, 9, 3, 5, 2, 5, 1, 0, 5, 4, 7, 1, 6, 0, 2, 1, 6, 2, 4, 3, 4,
      9, 0, 4, 7, 5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3,
      6, 3, 4, 7, 2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4,
      0, 4, 5, 7, 4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4,
      2, 9, 5, 9, 0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0,
      6, 7, 0, 2, 6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8,
      9, 8, 8, 8, 5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2,
      3, 1, 9, 5, 2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4,
      9, 1, 3, 6, 2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0,
      4, 6, 4, 2, 1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2,
      4, 3, 5, 8, 8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4,
      6, 5, 6, 0, 3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7,
      4, 0, 3, 9, 8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9,
      5, 4, 6, 1, 4, 2, 0, 4, 1, 1, 1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7,
      6, 8, 5, 6, 6, 4, 2, 3, 7, 6, 5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9,
      9, 7, 8, 6, 8, 2, 2, 9, 2, 0};
  const std::vector<int> indices = {
      1, 1, 7, 2, 1, 1, 0, 4, 3, 2, 6, 7, 1, 3, 0, 1, 0, 1, 1, 5, 5, 0, 1,
      6, 0, 0, 4, 2, 3, 6, 0, 5, 6, 1, 7, 5, 2, 4, 6, 1, 4, 1, 1, 4, 3, 2,
      1, 6, 0, 2, 7, 2, 2, 7, 2, 0, 2, 1, 6, 0, 2, 2, 4, 1, 4, 6, 2, 7, 5,
      0, 3, 2, 1, 3, 6, 0, 7, 1, 2, 6, 3, 0, 6, 4, 1, 7, 4, 1, 2, 3, 2, 4,
      2, 1, 4, 5, 2, 5, 7, 0, 1, 5, 2, 0, 5, 0, 5, 4, 0, 4, 2, 1, 5, 4, 1,
      6, 5, 0, 3, 4, 0, 5, 0, 0, 3, 1, 0, 2, 0, 1, 1, 5, 1, 0, 3, 0, 2, 6,
      0, 3, 5, 1, 2, 1, 2, 1, 3, 1, 2, 0, 0, 7, 6, 1, 2, 7, 2, 1, 2, 2, 6,
      0, 1, 1, 1, 0, 2, 3, 1, 6, 6, 2, 7, 2, 2, 0, 6, 0, 1, 3, 0, 4, 1, 2,
      1, 4, 0, 4, 0, 0, 6, 3, 0, 2, 2, 1, 7, 1, 2, 5, 3, 2, 6, 6};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1,
      6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8,
      8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9,
      3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7,
      7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8,
      0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5,
      4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8,
      6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7,
      1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7,
      6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7,
      0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8,
      5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3,
      4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x5_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 5}};
  const std::array<int, 2> ind_shape = {337, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      2, 7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9, 7, 3, 4, 1, 1, 9, 0, 4, 6, 4,
      9, 4, 6, 5, 7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7, 6, 0, 7, 1, 2, 9, 3, 5, 2, 5,
      1, 0, 5, 4, 7, 1, 6, 0, 2, 1, 6, 2, 4, 3, 4, 9, 0, 4, 7, 5, 8, 4, 2, 4, 3,
      1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3, 6, 3, 4, 7, 2, 9, 8, 7, 0, 1,
      7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4, 0, 4, 5, 7, 4, 5, 7, 2, 3, 7,
      8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4, 2, 9, 5, 9, 0, 6, 9, 8, 7, 1,
      4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0, 6, 7, 0, 2, 6, 2, 0, 2, 9, 5,
      9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8, 9, 8, 8, 8, 5, 0, 1, 3, 3, 7,
      6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2, 3, 1, 9, 5, 2, 5, 9, 7, 7, 0,
      9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4, 9, 1, 3, 6, 2, 3, 2, 0, 6, 5,
      1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0, 4, 6, 4, 2, 1, 5, 1, 3, 5, 8,
      1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2, 4, 3, 5, 8, 8, 6, 9, 7, 4, 6,
      9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4, 6, 5, 6, 0, 3, 0, 6, 0, 6, 8,
      7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7, 4, 0, 3, 9, 8, 5, 5, 3, 0, 9,
      2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9, 5, 4, 6, 1, 4, 2, 0, 4, 1, 1,
      1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7, 6, 8, 5, 6, 6, 4, 2, 3, 7, 6,
      5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9, 9, 7, 8, 6, 8, 2, 2, 9, 2, 0,
      0, 3, 4, 0, 6, 4, 7, 7, 2, 5, 7, 2, 9, 6, 2, 7, 1, 2, 1, 3, 0, 2, 4, 4, 8,
      0, 3, 4, 1, 0, 9, 2, 0, 9, 5, 0, 9, 2, 4, 3, 1, 8, 1, 1, 3, 9, 2, 7, 9, 8,
      5, 8, 0, 5, 9, 0, 0, 9, 9, 5, 5, 1, 9, 9, 7, 1, 6, 1, 6, 6, 1, 7, 8, 1, 4,
      3, 5, 4, 4, 4, 5, 4, 0, 4, 8, 0, 0, 9, 2, 5, 3, 7, 5, 6, 7, 9, 7, 5, 4, 3,
      6, 7, 2, 1, 3, 5, 4, 7, 5, 5, 1, 8, 2, 1, 1, 8, 4, 9, 4, 8, 9, 3, 3, 1, 6,
      5, 1, 2, 1, 7, 1, 3, 8, 7, 4, 3, 5, 4, 8, 9, 3, 3, 6, 0, 8, 9, 0, 1, 0, 2,
      4, 7, 7, 0, 1, 7, 1, 4, 5, 6, 4, 3, 8, 3, 9, 9, 2, 8, 0, 6, 8, 3, 4, 0, 9,
      0, 9, 2, 5, 7, 5, 2, 9, 2, 4, 5, 2, 7, 8, 9, 8, 9, 6, 5, 8, 6, 8, 3, 1, 1,
      9, 6, 9, 1, 6, 8, 9, 1, 1, 6, 3, 0, 8, 6, 3, 1, 5, 6, 3, 8, 9, 0, 9, 3, 2,
      1, 3, 2, 3, 3, 5, 9, 3, 3, 0, 6, 4, 2, 5, 2, 7, 3, 3, 6, 9, 5, 3, 3, 6, 1,
      9, 8, 1, 5, 0, 5, 0, 7, 0, 2, 1, 9, 0, 7, 8, 7, 8, 7, 0, 2, 5, 6, 6, 2, 6,
      5, 3, 8, 6, 5, 0, 0, 8, 7, 9, 9, 9, 7, 6, 6, 5, 0, 2, 2, 8, 0, 4, 4, 5, 6,
      2, 8, 5, 3, 5, 3, 7, 1, 0, 0, 2, 6, 3, 4, 4, 5, 6, 7, 6, 4, 4, 8, 5, 4, 0,
      5, 9, 8, 5, 2, 0, 7, 8, 2, 8, 7, 0, 6, 4, 9, 8, 4, 9, 7, 4, 0, 9, 7, 2, 5,
      2, 2, 0, 8, 1, 1, 7, 5, 1, 6, 5, 0, 7, 5, 8, 1, 2, 9, 9, 2, 2, 5, 4, 9, 9,
      4, 6, 0, 1, 3, 3, 5, 3, 5, 3, 9, 1, 0, 4, 1, 6, 3, 3, 4, 5, 8, 8, 1, 3, 0,
      2, 7, 1, 4, 1, 0, 4, 9, 1, 0, 3, 4, 0, 3, 7, 9, 0, 4, 2, 2, 5, 8, 4, 5, 2,
      1, 2, 1, 9, 6, 1, 0, 8, 3, 1, 6, 1, 7, 2, 6, 9, 1, 7, 0, 2, 6, 1, 3, 8, 5,
      7, 1, 2, 1, 7, 1, 8, 7, 3, 2, 8, 2, 9, 8, 9, 3, 6, 8, 0, 5, 6, 5, 3, 3, 0,
      4, 9, 4, 3, 5, 9, 8, 2, 6, 2, 5, 2, 6, 5, 0, 6, 2, 8, 4, 5, 9, 9, 7, 9, 9,
      3, 5, 1, 8, 6, 4, 8, 9, 7, 9, 2, 6, 5, 4, 6, 7, 5, 9, 2, 4, 5, 6, 9, 0, 8,
      5, 7, 3, 0, 7, 8, 2, 4, 6, 6};
  const std::vector<int> indices = {
      1, 4, 3, 3, 1, 1, 7, 3, 0, 4, 5, 1, 0, 7, 1, 1, 2, 7, 3, 4, 2, 4, 3, 3, 1,
      4, 3, 1, 2, 0, 2, 3, 0, 6, 0, 3, 0, 4, 3, 4, 2, 1, 5, 0, 0, 6, 1, 3, 2, 4,
      0, 4, 2, 7, 1, 2, 2, 5, 2, 1, 2, 4, 4, 0, 2, 2, 5, 0, 0, 5, 0, 4, 0, 1, 5,
      1, 2, 0, 5, 0, 2, 5, 5, 2, 1, 6, 1, 2, 2, 4, 7, 4, 0, 2, 7, 3, 0, 7, 7, 4,
      1, 5, 5, 1, 0, 4, 4, 3, 2, 5, 6, 3, 0, 7, 0, 4, 1, 2, 5, 0, 0, 3, 7, 4, 1,
      7, 7, 2, 1, 1, 6, 3, 2, 5, 4, 0, 0, 2, 4, 1, 1, 6, 4, 4, 2, 2, 1, 4, 1, 0,
      5, 1, 2, 5, 0, 3, 0, 1, 6, 0, 1, 7, 5, 2, 1, 6, 7, 2, 1, 5, 3, 0, 0, 0, 0,
      2, 1, 2, 3, 0, 2, 1, 7, 2, 1, 3, 6, 4, 1, 1, 1, 0, 2, 3, 5, 0, 1, 3, 3, 2,
      0, 3, 4, 1, 1, 3, 6, 1, 2, 0, 2, 4, 2, 3, 4, 3, 1, 3, 2, 3, 1, 3, 3, 3, 2,
      4, 2, 2, 0, 5, 5, 0, 1, 3, 5, 4, 2, 1, 3, 0, 0, 6, 5, 2, 2, 3, 0, 2, 2, 4,
      1, 4, 2, 7, 6, 1, 0, 7, 2, 2, 1, 6, 6, 4, 1, 6, 3, 1, 2, 3, 0, 4, 0, 1, 7,
      2, 2, 0, 4, 4, 2, 7, 5, 4, 2, 5, 6, 1, 2, 6, 6, 3, 1, 1, 4, 0, 0, 5, 6, 4,
      1, 1, 3, 1, 0, 7, 6, 1, 0, 5, 1, 2, 0, 6, 3, 0, 2, 7, 2, 1, 2, 7, 4, 3, 0,
      4, 2, 3, 1, 7, 1, 1, 1, 6, 3, 2, 2, 0, 4, 3, 0, 7, 1, 0, 0, 6, 4, 0, 1, 7,
      7, 0, 0, 1, 1, 2, 2, 4, 1, 0, 1, 6, 3, 4, 0, 1, 2, 0, 0, 3, 4, 3, 1, 4, 1,
      1, 2, 6, 0, 1, 1, 2, 6, 0, 0, 4, 6, 3, 1, 0, 0, 3, 2, 0, 3, 3, 0, 2, 6, 2,
      0, 5, 2, 3, 2, 2, 6, 3, 1, 2, 6, 2, 0, 0, 0, 3, 1, 7, 5, 1, 1, 2, 1, 3, 1,
      3, 0, 2, 2, 6, 6, 2, 2, 7, 1, 3, 1, 2, 0, 0, 0, 4, 0, 1, 2, 2, 5, 4, 2, 6,
      0, 2, 1, 0, 6, 1, 2, 6, 2, 2, 1, 1, 3, 0, 0, 7, 6, 3, 2, 3, 1, 3, 1, 3, 7,
      3, 1, 5, 5, 4, 0, 3, 1, 3, 1, 3, 6, 0, 0, 6, 4, 3, 1, 0, 7, 0, 1, 4, 0, 3,
      1, 1, 5, 4, 1, 4, 4, 0, 2, 7, 1, 1, 0, 4, 6, 2, 2, 3, 4, 1, 0, 0, 3, 3, 2,
      3, 4, 2, 0, 3, 3, 0, 2, 6, 5, 2, 2, 3, 7, 4, 1, 1, 2, 4, 1, 1, 0, 3, 0, 3,
      5, 1, 2, 2, 4, 3, 0, 1, 6, 2, 0, 1, 6, 3, 2, 0, 4, 1, 1, 5, 3, 2, 0, 3, 2,
      0, 1, 4, 0, 2, 0, 1, 0, 1, 0, 3, 3, 4, 2, 4, 7, 3, 1, 0, 4, 1, 2, 1, 2, 4,
      0, 5, 4, 1, 0, 7, 4, 1, 2, 7, 7, 1, 0, 4, 2, 4, 0, 4, 7, 0, 2, 3, 3, 4, 1,
      3, 0, 1, 1, 4, 3, 2, 0, 3, 7, 2, 0, 3, 3, 3, 1, 1, 5, 0, 2, 4, 7, 1, 0, 7,
      1, 3, 2, 7, 7, 3, 0, 7, 5, 1, 1, 5, 1, 1, 2, 1, 1, 0, 2, 4, 5, 1, 1, 2, 2,
      2, 2, 7, 1, 0, 2, 7, 5, 2, 1, 3, 1, 0, 1, 2, 5, 1, 1, 1, 5, 1, 1, 4, 2, 3,
      2, 6, 1, 3, 0, 3, 4, 4, 0, 0, 4, 2, 0, 6, 7, 4, 1, 6, 1, 1, 0, 1, 4, 2, 0,
      3, 5, 0, 1, 3, 3, 4, 0, 5, 2, 4, 2, 6, 2, 1, 2, 7, 3, 0, 1, 5, 5, 0, 1, 1,
      1, 4, 2, 1, 1, 4, 1, 0, 1, 2, 0, 2, 7, 0, 1, 1, 6, 2, 0, 2, 2, 0, 1, 4, 6,
      0, 0, 4, 7, 3, 1, 7, 5, 4, 2, 6, 4, 3, 1, 5, 4, 1, 2, 4, 3, 0, 0, 2, 0, 3,
      2, 6, 7, 1, 0, 5, 5, 2, 2, 2, 5, 2, 2, 1, 4, 2, 2, 0, 0, 4, 2, 2, 3, 3, 0,
      5, 6, 2, 2, 5, 2, 4, 1, 3, 2, 4, 2, 3, 6, 4, 0, 1, 1, 1, 0, 2, 6, 0, 0, 4,
      1, 4, 0, 6, 6, 2, 1, 4, 5, 2, 0, 7, 7, 3, 1, 2, 3, 4, 1, 1, 5, 2, 2, 1, 1,
      1, 0, 7, 5, 3, 2, 5, 0, 1, 0, 0, 0, 1, 1, 7, 2, 2, 0, 2, 5, 2, 1, 0, 7, 3,
      0, 2, 4, 4, 1, 2, 5, 2, 0, 3, 7, 0, 1, 6, 7, 0, 0, 3, 3, 2, 2, 1, 3, 3, 0,
      2, 0, 4, 1, 7, 2, 3, 1, 7, 0, 1, 1, 7, 4, 2, 1, 3, 7, 0, 2, 7, 6, 3, 2, 3,
      5, 2, 1, 5, 3, 4, 2, 4, 4, 4, 0, 1, 4, 4, 0, 0, 3, 1, 0, 0, 1, 2, 2, 1, 0,
      1, 1, 6, 5, 3, 1, 3, 1, 4, 2, 5, 3, 2, 0, 2, 5, 1, 2, 5, 7, 4, 0, 5, 4, 2,
      1, 0, 2, 4, 1, 5, 2, 1, 1, 0, 3, 4, 1, 0, 1, 1, 1, 2, 0, 4, 0, 5, 0, 2, 2,
      1, 5, 4, 2, 3, 5, 3, 1, 0, 3, 2, 0, 6, 1, 2, 2, 5, 5, 4, 2, 0, 7, 4, 1, 1,
      7, 2, 2, 6, 2, 4, 0, 4, 7, 4, 2, 1, 2, 1, 2, 7, 5, 0, 0, 2, 1, 2, 2, 2, 6,
      4, 1, 5, 6, 1, 0, 0, 4, 3, 1, 1, 0, 0, 2, 1, 1, 3, 1, 1, 6, 0, 1, 3, 6, 3,
      0, 4, 0, 0, 0, 1, 7, 4, 1, 2, 4, 4, 0, 5, 2, 1, 1, 0, 6, 3, 0, 3, 3, 1, 0,
      1, 2, 4, 0, 5, 7, 2, 0, 5, 1, 3, 1, 3, 1, 2, 1, 3, 4, 2, 1, 4, 0, 4, 2, 5,
      7, 2, 2, 4, 3, 4, 0, 7, 3, 1, 0, 2, 1, 0, 0, 1, 7, 1, 1, 2, 1, 2, 2, 0, 1,
      0, 0, 5, 1, 0, 2, 1, 3, 1, 0, 4, 5, 0, 0, 6, 0, 2, 0, 6, 2, 0, 2, 2, 7, 2,
      1, 0, 6, 4, 0, 7, 6, 2, 1, 4, 2, 2, 2, 2, 1, 1, 1, 0, 3, 0, 0, 6, 3, 4, 2,
      0, 0, 1, 2, 6, 2, 3, 1, 7, 0, 2, 1, 0, 3, 1, 0, 7, 6, 0, 0, 7, 7, 1, 2, 2,
      5, 3, 0, 1, 3, 0, 2, 3, 2, 1, 2, 0, 5, 1, 0, 7, 2, 0, 1, 7, 4, 3, 0, 4, 5,
      4, 2, 5, 1, 4, 2, 5, 4, 4, 1, 6, 6, 0, 1, 6, 2, 1, 0, 1, 1, 4, 0, 2, 7, 4,
      1, 4, 6, 1, 2, 4, 5, 4, 2, 4, 5, 0, 1, 3, 2, 0, 2, 5, 3, 3, 0, 3, 6, 2, 2,
      0, 1, 4, 2, 3, 6, 0, 0, 2, 6, 1, 1, 7, 0, 4, 1, 2, 3, 3, 2, 2, 4, 1};
  const std::vector<DataType> updates = {
      3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2,
      1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9,
      4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5,
      6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9,
      0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0,
      4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6,
      7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4,
      2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4,
      0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2,
      7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9,
      3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0,
      4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4,
      2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8,
      6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8, 9};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x8_tensor_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {2, 1};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      4, 1, 1, 9, 0, 4, 6, 4, 9, 4, 6, 5, 7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7, 6, 0,
      7, 1, 2, 9, 3, 5, 2, 5, 1, 0, 5, 4, 7, 1, 6, 0, 2, 1, 6, 2, 4, 3, 4, 9, 0,
      4, 7, 5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3, 6, 3,
      4, 7, 2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4, 0, 4,
      5, 7, 4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4, 2, 9,
      5, 9, 0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0, 6, 7,
      0, 2, 6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8, 9, 8,
      8, 8, 5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2, 3, 1,
      9, 5, 2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4, 9, 1,
      3, 6, 2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0, 4, 6,
      4, 2, 1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2, 4, 3,
      5, 8, 8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4, 6, 5,
      6, 0, 3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7, 4, 0,
      3, 9, 8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9, 5, 4,
      6, 1, 4, 2, 0, 4, 1, 1, 1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7, 6, 8,
      5, 6, 6, 4, 2, 3, 7, 6, 5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9, 9, 7,
      8, 6, 8, 2, 2, 9, 2, 0, 0, 3, 4, 0, 6, 4, 7, 7, 2, 5, 7, 2, 9, 6, 2, 7, 1,
      2, 1, 3, 0, 2, 4, 4, 8, 0, 3, 4, 1, 0, 9, 2, 0, 9, 5, 0, 9, 2, 4, 3, 1, 8,
      1, 1, 3, 9, 2, 7, 9, 8, 5, 8, 0, 5, 9, 0, 0, 9, 9, 5, 5, 1, 9, 9, 7, 1, 6,
      1, 6, 6, 1, 7, 8, 1, 4, 3, 5, 4, 4, 4, 5, 4, 0, 4, 8, 0, 0, 9, 2, 5, 3, 7,
      5, 6, 7, 9, 7, 5, 4, 3, 6, 7, 2, 1, 3, 5, 4, 7, 5, 5, 1, 8, 2, 1, 1, 8, 4,
      9, 4, 8, 9, 3, 3, 1, 6, 5, 1, 2, 1, 7, 1, 3, 8, 7, 4, 3, 5, 4, 8, 9, 3, 3,
      6, 0, 8, 9, 0, 1, 0, 2, 4, 7, 7, 0, 1, 7, 1, 4, 5, 6, 4, 3, 8, 3, 9, 9, 2,
      8, 0, 6, 8, 3, 4, 0, 9, 0, 9, 2, 5, 7, 5, 2, 9, 2, 4, 5, 2, 7, 8, 9, 8, 9,
      6, 5, 8, 6, 8, 3, 1, 1, 9, 6, 9, 1, 6, 8, 9, 1, 1, 6, 3, 0, 8, 6, 3, 1, 5,
      6, 3, 8, 9, 0, 9, 3, 2, 1, 3, 2, 3, 3, 5, 9, 3, 3, 0, 6, 4, 2, 5, 2, 7, 3,
      3, 6, 9, 5, 3, 3, 6, 1, 9, 8, 1, 5, 0, 5, 0, 7, 0, 2, 1, 9, 0, 7, 8, 7, 8,
      7, 0, 2, 5, 6, 6, 2, 6, 5, 3, 8, 6, 5, 0, 0, 8, 7, 9, 9, 9, 7, 6, 6, 5, 0,
      2, 2, 8, 0, 4, 4, 5, 6, 2, 8, 5, 3, 5, 3, 7, 1, 0, 0, 2, 6, 3, 4, 4, 5, 6,
      7, 6, 4, 4, 8, 5, 4, 0, 5, 9, 8, 5, 2, 0, 7, 8, 2, 8, 7, 0, 6, 4, 9, 8, 4,
      9, 7, 4, 0, 9, 7, 2, 5, 2, 2, 0, 8, 1, 1, 7, 5, 1, 6, 5, 0, 7, 5, 8, 1, 2,
      9, 9, 2, 2, 5, 4, 9, 9, 4, 6, 0, 1, 3, 3, 5, 3, 5, 3, 9, 1, 0, 4, 1, 6, 3,
      3, 4, 5, 8, 8, 1, 3, 0, 2, 7, 1, 4, 1, 0, 4, 9, 1, 0, 3, 4, 0, 3, 7, 9, 0,
      4, 2, 2, 5, 8, 4, 5, 2, 1, 2, 1, 9, 6, 1, 0, 8, 3, 1, 6, 1, 7, 2, 6, 9, 1,
      7, 0, 2, 6, 1, 3, 8, 5, 7, 1, 2, 1, 7, 1, 8, 7, 3, 2, 8, 2, 9, 8, 9, 3, 6,
      8, 0, 5, 6, 5, 3, 3, 0, 4, 9, 4, 3, 5, 9, 8, 2, 6, 2, 5, 2, 6, 5, 0, 6, 2,
      8, 4, 5, 9, 9, 7, 9, 9, 3, 5, 1, 8, 6, 4, 8, 9, 7, 9, 2, 6, 5, 4, 6, 7, 5,
      9, 2, 4, 5, 6, 9, 0, 8, 5, 7, 3, 0, 7, 8, 2, 4, 6, 6, 4, 8, 9, 7, 8, 5, 0,
      9, 9, 8, 7, 7, 1, 3, 7, 6, 9, 2, 3, 1, 5, 7, 1, 9, 3, 0, 4, 8, 4, 6, 1, 3,
      9, 9, 0, 1, 1, 2, 2, 5, 2, 5, 0, 5, 4, 4, 2, 1, 3, 5, 1, 8, 8, 9, 7, 0, 0,
      9, 0, 7, 6, 6, 2, 8, 3, 4, 4, 0, 9, 2, 1, 3, 3, 8, 7, 2, 5, 9, 3, 9, 5, 2,
      0, 4, 3, 1, 6, 8, 0, 9, 4, 6, 1, 1, 1, 3, 3, 5, 2, 2, 1, 1, 2, 2, 7, 8, 5,
      3, 7, 5, 8, 2, 7, 3, 2, 8, 3, 3, 2, 6, 7, 2, 6, 0, 6, 8, 8, 0, 2, 7, 2, 1,
      6, 2, 8, 8, 0, 9, 9, 5, 2, 0, 3, 8, 6, 5, 9, 8, 0, 8, 4, 1, 8, 4, 4, 4, 6,
      8, 7, 4, 6, 3, 0, 4, 8, 9, 2, 2, 4, 8, 8, 2, 3, 6, 4, 0, 6, 7, 3, 5, 2, 9,
      5, 0, 1, 3, 3, 7, 2, 3, 1, 3, 9, 5, 8, 4, 9, 9, 4, 8, 2, 4, 8, 7, 2, 2, 4,
      5, 6, 0, 2, 4, 4, 9, 7, 7, 5, 5, 3, 0, 1, 0, 4, 4, 4, 1, 2, 0, 3, 2, 3, 5,
      1, 5, 9, 0, 7, 6, 6, 7, 2, 6, 5, 9, 3, 8, 2, 2, 2, 3, 5, 5, 2, 0, 6, 3, 8,
      4, 7, 7, 8, 8, 8, 2, 7, 2, 4, 2, 2, 3, 0, 9, 3, 6, 1, 1, 1, 0, 2, 0, 3, 4,
      9, 1, 1, 8, 6, 1, 0, 1, 8, 0, 1, 9, 3, 2, 4, 6, 7, 0, 4, 5, 2, 3, 7, 2, 2,
      5, 9, 9, 6, 1, 0, 0, 9, 5, 8, 5, 2, 6, 9, 8, 4, 7, 9, 9, 5, 8, 4, 7, 3, 3,
      7, 1, 7, 7, 8, 5, 7, 0, 1, 4, 0, 2, 3, 3, 3, 2, 3, 7, 5, 1, 2, 0, 9, 7, 3,
      7, 2, 2, 3, 0, 4, 3, 5, 6, 1, 6, 4, 8, 9, 9, 1, 2, 8, 0, 2, 3, 3, 1, 8, 4,
      4, 4, 9, 9, 0, 7, 5, 6, 0, 5, 5, 9, 7, 6, 1, 3, 2, 2, 8, 5, 7, 5, 5, 0, 5,
      4, 1, 5, 5, 2, 8, 9, 4, 1, 0, 8, 9, 5, 7, 1, 0, 3, 4, 3, 1, 0, 8, 5, 6, 5,
      9, 1, 4, 2, 9, 7, 0, 0, 2, 2, 8, 9, 5, 8, 9, 1, 3, 2, 0, 1, 4, 2, 1, 5, 1,
      1, 2, 4, 2, 1, 4, 5, 5, 4, 8, 7, 0, 5, 0, 6, 3, 8, 4, 9, 0, 3, 7, 4, 2, 8,
      9, 3, 6, 5, 0, 4, 9, 4, 4, 9, 8, 7, 7, 3, 2, 9, 4, 1, 0, 0, 0, 4, 3, 0, 9,
      9, 7, 8, 7, 9, 4, 7, 9, 6, 5, 0, 6, 4, 8, 1, 2, 0, 2, 0, 5, 9, 5, 2, 6, 7,
      1, 8, 2, 1, 2, 4, 4, 3, 5, 8, 4, 9, 8, 5, 4, 3, 5, 3, 1, 4, 5, 3, 9, 7, 8,
      2, 0, 4, 9, 3, 5, 7, 8, 0, 2, 9, 0, 7, 8, 8, 4, 4, 2, 8, 2, 0, 3, 9, 2, 0,
      2, 1, 6, 5, 9, 3, 6, 1, 5, 3, 1};
  const std::vector<int> indices = {2, 0};
  const std::vector<DataType> updates = {
      2, 7, 6, 6, 9, 3, 8, 3, 5, 5, 2, 1, 2, 6, 6, 9, 7, 2, 9, 9, 7, 6, 1, 0, 2,
      4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7, 3, 4, 4, 4, 2, 5, 8, 4, 1,
      0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8, 7, 9, 5, 5, 2, 9, 5, 4, 3,
      2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8, 3, 0, 0, 0, 6, 3, 2, 6, 0,
      5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4, 5, 2, 1, 2, 9, 2, 6, 2, 8,
      4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2,
      3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6,
      1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2,
      5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1,
      0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8,
      0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4,
      8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8,
      5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1,
      5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0,
      7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3,
      3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0,
      3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9,
      4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8,
      9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7,
      6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4,
      0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2,
      7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2,
      0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9,
      1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8,
      7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8,
      6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7,
      5, 3, 2, 9, 5, 4, 7, 6, 3, 3, 6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5,
      1, 5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1,
      0, 3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3,
      4, 3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6,
      4, 2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9,
      2, 6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7, 5, 2, 5,
      5, 4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0, 5, 3, 3,
      1, 4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6, 7, 5, 6,
      8, 9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4, 3, 3, 8,
      1, 7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0, 7, 7, 3,
      0, 4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1, 8, 4, 4,
      9, 6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9, 9, 7, 8,
      5, 0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6, 9, 9, 3,
      3, 9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5, 7, 9, 9,
      5, 1, 7, 0, 5, 8, 9, 2, 7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9, 7, 3};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x8_matrix_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {10, 2};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      7, 6, 3, 3, 6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1, 5, 5, 7, 4, 7,
      5, 5, 7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0, 3, 8, 0, 4, 3,
      1, 7, 4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4, 3, 0, 4, 7, 2,
      3, 6, 7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4, 2, 6, 0, 5, 1,
      1, 2, 8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2, 6, 6, 6, 1, 7,
      3, 1, 9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7, 5, 2, 5, 5, 4, 6, 6, 7, 1,
      5, 7, 3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0, 5, 3, 3, 1, 4, 6, 6, 1, 2,
      4, 0, 2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6, 7, 5, 6, 8, 9, 2, 8, 1, 3,
      7, 8, 6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4, 3, 3, 8, 1, 7, 6, 9, 3, 3,
      8, 1, 1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0, 7, 7, 3, 0, 4, 8, 3, 5, 7,
      9, 1, 0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1, 8, 4, 4, 9, 6, 0, 7, 2, 5,
      4, 2, 2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9, 9, 7, 8, 5, 0, 1, 3, 4, 2,
      7, 4, 6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6, 9, 9, 3, 3, 9, 6, 0, 0, 4,
      0, 7, 4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5, 7, 9, 9, 5, 1, 7, 0, 5, 8,
      9, 2, 7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9, 7, 3, 4, 1, 1, 9, 0, 4, 6,
      4, 9, 4, 6, 5, 7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7, 6, 0, 7, 1, 2, 9, 3, 5, 2,
      5, 1, 0, 5, 4, 7, 1, 6, 0, 2, 1, 6, 2, 4, 3, 4, 9, 0, 4, 7, 5, 8, 4, 2, 4,
      3, 1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3, 6, 3, 4, 7, 2, 9, 8, 7, 0,
      1, 7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4, 0, 4, 5, 7, 4, 5, 7, 2, 3,
      7, 8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4, 2, 9, 5, 9, 0, 6, 9, 8, 7,
      1, 4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0, 6, 7, 0, 2, 6, 2, 0, 2, 9,
      5, 9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8, 9, 8, 8, 8, 5, 0, 1, 3, 3,
      7, 6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2, 3, 1, 9, 5, 2, 5, 9, 7, 7,
      0, 9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4, 9, 1, 3, 6, 2, 3, 2, 0, 6,
      5, 1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0, 4, 6, 4, 2, 1, 5, 1, 3, 5,
      8, 1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2, 4, 3, 5, 8, 8, 6, 9, 7, 4,
      6, 9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4, 6, 5, 6, 0, 3, 0, 6, 0, 6,
      8, 7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7, 4, 0, 3, 9, 8, 5, 5, 3, 0,
      9, 2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9, 5, 4, 6, 1, 4, 2, 0, 4, 1,
      1, 1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7, 6, 8, 5, 6, 6, 4, 2, 3, 7,
      6, 5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9, 9, 7, 8, 6, 8, 2, 2, 9, 2,
      0, 0, 3, 4, 0, 6, 4, 7, 7, 2, 5, 7, 2, 9, 6, 2, 7, 1, 2, 1, 3, 0, 2, 4, 4,
      8, 0, 3, 4, 1, 0, 9, 2, 0, 9, 5, 0, 9, 2, 4, 3, 1, 8, 1, 1, 3, 9, 2, 7, 9,
      8, 5, 8, 0, 5, 9, 0, 0, 9, 9, 5, 5, 1, 9, 9, 7, 1, 6, 1, 6, 6, 1, 7, 8, 1,
      4, 3, 5, 4, 4, 4, 5, 4, 0, 4, 8, 0, 0, 9, 2, 5, 3, 7, 5, 6, 7, 9, 7, 5, 4,
      3, 6, 7, 2, 1, 3, 5, 4, 7, 5, 5, 1, 8, 2, 1, 1, 8, 4, 9, 4, 8, 9, 3, 3, 1,
      6, 5, 1, 2, 1, 7, 1, 3, 8, 7, 4, 3, 5, 4, 8, 9, 3, 3, 6, 0, 8, 9, 0, 1, 0,
      2, 4, 7, 7, 0, 1, 7, 1, 4, 5, 6, 4, 3, 8, 3, 9, 9, 2, 8, 0, 6, 8, 3, 4, 0,
      9, 0, 9, 2, 5, 7, 5, 2, 9, 2, 4, 5, 2, 7, 8, 9, 8, 9, 6, 5, 8, 6, 8, 3, 1,
      1, 9, 6, 9, 1, 6, 8, 9, 1, 1, 6, 3, 0, 8, 6, 3, 1, 5, 6, 3, 8, 9, 0, 9, 3,
      2, 1, 3, 2, 3, 3, 5, 9, 3, 3, 0, 6, 4, 2, 5, 2, 7, 3, 3, 6, 9, 5, 3, 3, 6,
      1, 9, 8, 1, 5, 0, 5, 0, 7, 0, 2, 1, 9, 0, 7, 8, 7, 8, 7, 0, 2, 5, 6, 6, 2,
      6, 5, 3, 8, 6, 5, 0, 0, 8, 7, 9, 9, 9, 7, 6, 6, 5, 0, 2, 2, 8, 0, 4, 4, 5,
      6, 2, 8, 5, 3, 5, 3, 7, 1, 0, 0, 2, 6, 3, 4, 4, 5, 6, 7, 6, 4, 4, 8, 5, 4,
      0, 5, 9, 8, 5, 2, 0, 7, 8, 2, 8, 7, 0, 6, 4, 9, 8, 4, 9, 7, 4, 0, 9, 7, 2,
      5, 2, 2, 0, 8, 1, 1, 7, 5, 1, 6, 5, 0, 7, 5, 8, 1, 2, 9, 9, 2, 2, 5, 4, 9,
      9, 4, 6, 0, 1, 3, 3, 5, 3, 5, 3, 9, 1, 0, 4, 1, 6, 3, 3, 4, 5, 8, 8, 1, 3,
      0, 2, 7, 1, 4, 1, 0, 4, 9, 1, 0, 3, 4, 0, 3, 7, 9, 0, 4, 2, 2, 5, 8, 4, 5,
      2, 1, 2, 1, 9, 6, 1, 0, 8, 3, 1, 6, 1, 7, 2, 6, 9, 1, 7, 0, 2, 6, 1, 3, 8,
      5, 7, 1, 2, 1, 7, 1, 8, 7, 3, 2, 8, 2, 9, 8, 9, 3, 6, 8, 0, 5, 6, 5, 3, 3,
      0, 4, 9, 4, 3, 5, 9, 8, 2, 6, 2, 5, 2, 6, 5, 0, 6, 2, 8, 4, 5, 9, 9, 7, 9,
      9, 3, 5, 1, 8, 6, 4, 8, 9, 7, 9, 2, 6, 5, 4, 6, 7, 5, 9, 2, 4, 5, 6, 9, 0,
      8, 5, 7, 3, 0, 7, 8, 2, 4, 6, 6, 4, 8, 9, 7, 8, 5, 0, 9, 9, 8, 7, 7, 1, 3,
      7, 6, 9, 2, 3, 1, 5, 7, 1, 9, 3, 0, 4, 8, 4, 6, 1, 3, 9, 9, 0, 1, 1, 2, 2,
      5, 2, 5, 0, 5, 4, 4, 2, 1, 3, 5, 1, 8, 8, 9, 7, 0, 0, 9, 0, 7, 6, 6, 2, 8,
      3, 4, 4, 0, 9, 2, 1, 3, 3, 8, 7, 2, 5, 9, 3, 9, 5, 2, 0, 4, 3, 1, 6, 8, 0,
      9, 4, 6, 1, 1, 1, 3, 3, 5, 2, 2, 1, 1, 2, 2, 7, 8, 5, 3, 7, 5, 8, 2, 7, 3,
      2, 8, 3, 3, 2, 6, 7, 2, 6, 0, 6, 8, 8, 0, 2, 7, 2, 1, 6, 2, 8, 8, 0, 9, 9,
      5, 2, 0, 3, 8, 6, 5, 9, 8, 0, 8, 4, 1, 8, 4, 4, 4, 6, 8, 7, 4, 6, 3, 0, 4,
      8, 9, 2, 2, 4, 8, 8, 2, 3, 6, 4, 0, 6, 7, 3, 5, 2, 9, 5, 0, 1, 3, 3, 7, 2,
      3, 1, 3, 9, 5, 8, 4, 9, 9, 4, 8, 2, 4, 8, 7, 2, 2, 4, 5, 6, 0, 2, 4, 4, 9,
      7, 7, 5, 5, 3, 0, 1, 0, 4, 4, 4};
  const std::vector<int> indices = {0, 3, 2, 4, 2, 5, 0, 5, 1, 0,
                                    1, 6, 1, 4, 1, 7, 2, 3, 2, 1};
  const std::vector<DataType> updates = {
      7, 2, 9, 9, 7, 6, 1, 0, 2, 4, 0, 8, 4, 6, 2, 3, 1, 7, 7, 2, 7, 0, 3, 1, 7,
      3, 4, 4, 4, 2, 5, 8, 4, 1, 0, 1, 0, 0, 1, 5, 8, 8, 6, 6, 3, 9, 6, 7, 7, 8,
      7, 9, 5, 5, 2, 9, 5, 4, 3, 2, 6, 4, 5, 6, 8, 3, 6, 9, 4, 2, 2, 3, 6, 2, 8,
      3, 0, 0, 0, 6, 3, 2, 6, 0, 5, 6, 0, 1, 3, 3, 9, 4, 6, 1, 8, 2, 7, 4, 4, 4,
      5, 2, 1, 2, 9, 2, 6, 2, 8, 4, 5, 2, 6, 4, 7, 2, 6, 8, 4, 1, 0, 8, 5, 1, 2,
      7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1, 6, 0, 1, 9, 2, 5, 6, 8, 0,
      8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8, 8, 9, 6, 4, 5, 3, 4, 2, 6,
      9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9, 3, 2, 5, 0, 3, 1, 2, 1, 2,
      3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7, 2, 8, 7, 1, 5, 3, 7, 3, 8,
      3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7, 7, 2, 9, 9, 7, 0, 2, 1, 6,
      0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8, 0, 6, 0, 3, 8, 0, 5, 7, 6,
      0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5, 4, 6, 1, 4, 1, 4, 2, 7, 9,
      7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8, 6, 7, 8, 9, 0, 9, 5, 5, 8,
      7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7, 1, 3, 1, 1, 1, 5, 8, 2, 4,
      6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7, 6, 8, 1, 4, 2, 4, 7, 1, 5,
      4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7, 0, 1, 2, 9, 0, 6, 6, 3, 6,
      0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8, 5, 6, 4, 4, 4, 3, 8, 1, 9,
      6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3, 4, 8, 5, 4, 8, 0, 1, 2, 6,
      3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9, 3, 8, 9, 6, 8, 1, 1, 2, 1,
      8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5, 3, 1, 0, 7, 6, 4, 7, 4, 5,
      8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4, 5, 1, 9, 9, 9, 4, 1, 7, 7,
      0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4, 0, 0, 5, 0, 7, 5, 9, 9, 5,
      7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1, 3, 9, 4, 6, 4, 9, 2, 3, 6,
      1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1, 3, 9, 4, 2, 9, 4, 8, 4, 3,
      1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3, 4, 3, 1, 3, 6, 4, 5, 0, 6,
      4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x8_vector_slice) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {68, 3};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 5, 7, 4, 7, 5, 5, 7, 7, 0, 3, 4, 6, 0, 0, 9, 0, 6, 2, 1, 2, 9, 4, 1, 0,
      3, 8, 0, 4, 3, 1, 7, 4, 1, 9, 7, 4, 4, 5, 8, 1, 1, 1, 9, 4, 7, 1, 0, 3, 4,
      3, 0, 4, 7, 2, 3, 6, 7, 3, 8, 6, 1, 2, 8, 5, 3, 7, 3, 5, 6, 1, 9, 6, 6, 4,
      2, 6, 0, 5, 1, 1, 2, 8, 0, 3, 0, 4, 9, 2, 1, 6, 3, 5, 9, 0, 5, 8, 6, 9, 2,
      6, 6, 6, 1, 7, 3, 1, 9, 4, 7, 3, 4, 0, 4, 5, 7, 5, 3, 0, 4, 7, 5, 2, 5, 5,
      4, 6, 6, 7, 1, 5, 7, 3, 1, 5, 8, 0, 5, 0, 9, 6, 4, 7, 6, 7, 0, 5, 3, 3, 1,
      4, 6, 6, 1, 2, 4, 0, 2, 3, 1, 1, 8, 5, 2, 4, 0, 7, 3, 4, 2, 6, 7, 5, 6, 8,
      9, 2, 8, 1, 3, 7, 8, 6, 2, 4, 8, 3, 1, 7, 9, 9, 5, 4, 4, 0, 4, 3, 3, 8, 1,
      7, 6, 9, 3, 3, 8, 1, 1, 7, 4, 4, 5, 7, 7, 3, 6, 2, 4, 2, 7, 0, 7, 7, 3, 0,
      4, 8, 3, 5, 7, 9, 1, 0, 8, 8, 5, 2, 3, 5, 9, 0, 9, 7, 9, 3, 1, 8, 4, 4, 9,
      6, 0, 7, 2, 5, 4, 2, 2, 4, 5, 7, 5, 7, 8, 2, 2, 0, 7, 0, 4, 9, 9, 7, 8, 5,
      0, 1, 3, 4, 2, 7, 4, 6, 9, 5, 5, 4, 0, 0, 7, 4, 2, 3, 4, 2, 6, 9, 9, 3, 3,
      9, 6, 0, 0, 4, 0, 7, 4, 0, 5, 2, 2, 8, 7, 5, 3, 7, 2, 8, 6, 5, 7, 9, 9, 5,
      1, 7, 0, 5, 8, 9, 2, 7, 9, 3, 5, 9, 6, 3, 0, 0, 5, 0, 8, 1, 9, 7, 3, 4, 1,
      1, 9, 0, 4, 6, 4, 9, 4, 6, 5, 7, 0, 8, 0, 2, 7, 4, 6, 5, 3, 7, 6, 0, 7, 1,
      2, 9, 3, 5, 2, 5, 1, 0, 5, 4, 7, 1, 6, 0, 2, 1, 6, 2, 4, 3, 4, 9, 0, 4, 7,
      5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3, 6, 3, 4, 7,
      2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4, 0, 4, 5, 7,
      4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4, 2, 9, 5, 9,
      0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0, 6, 7, 0, 2,
      6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8, 9, 8, 8, 8,
      5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2, 3, 1, 9, 5,
      2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4, 9, 1, 3, 6,
      2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0, 4, 6, 4, 2,
      1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2, 4, 3, 5, 8,
      8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4, 6, 5, 6, 0,
      3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7, 4, 0, 3, 9,
      8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9, 5, 4, 6, 1,
      4, 2, 0, 4, 1, 1, 1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7, 6, 8, 5, 6,
      6, 4, 2, 3, 7, 6, 5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9, 9, 7, 8, 6,
      8, 2, 2, 9, 2, 0, 0, 3, 4, 0, 6, 4, 7, 7, 2, 5, 7, 2, 9, 6, 2, 7, 1, 2, 1,
      3, 0, 2, 4, 4, 8, 0, 3, 4, 1, 0, 9, 2, 0, 9, 5, 0, 9, 2, 4, 3, 1, 8, 1, 1,
      3, 9, 2, 7, 9, 8, 5, 8, 0, 5, 9, 0, 0, 9, 9, 5, 5, 1, 9, 9, 7, 1, 6, 1, 6,
      6, 1, 7, 8, 1, 4, 3, 5, 4, 4, 4, 5, 4, 0, 4, 8, 0, 0, 9, 2, 5, 3, 7, 5, 6,
      7, 9, 7, 5, 4, 3, 6, 7, 2, 1, 3, 5, 4, 7, 5, 5, 1, 8, 2, 1, 1, 8, 4, 9, 4,
      8, 9, 3, 3, 1, 6, 5, 1, 2, 1, 7, 1, 3, 8, 7, 4, 3, 5, 4, 8, 9, 3, 3, 6, 0,
      8, 9, 0, 1, 0, 2, 4, 7, 7, 0, 1, 7, 1, 4, 5, 6, 4, 3, 8, 3, 9, 9, 2, 8, 0,
      6, 8, 3, 4, 0, 9, 0, 9, 2, 5, 7, 5, 2, 9, 2, 4, 5, 2, 7, 8, 9, 8, 9, 6, 5,
      8, 6, 8, 3, 1, 1, 9, 6, 9, 1, 6, 8, 9, 1, 1, 6, 3, 0, 8, 6, 3, 1, 5, 6, 3,
      8, 9, 0, 9, 3, 2, 1, 3, 2, 3, 3, 5, 9, 3, 3, 0, 6, 4, 2, 5, 2, 7, 3, 3, 6,
      9, 5, 3, 3, 6, 1, 9, 8, 1, 5, 0, 5, 0, 7, 0, 2, 1, 9, 0, 7, 8, 7, 8, 7, 0,
      2, 5, 6, 6, 2, 6, 5, 3, 8, 6, 5, 0, 0, 8, 7, 9, 9, 9, 7, 6, 6, 5, 0, 2, 2,
      8, 0, 4, 4, 5, 6, 2, 8, 5, 3, 5, 3, 7, 1, 0, 0, 2, 6, 3, 4, 4, 5, 6, 7, 6,
      4, 4, 8, 5, 4, 0, 5, 9, 8, 5, 2, 0, 7, 8, 2, 8, 7, 0, 6, 4, 9, 8, 4, 9, 7,
      4, 0, 9, 7, 2, 5, 2, 2, 0, 8, 1, 1, 7, 5, 1, 6, 5, 0, 7, 5, 8, 1, 2, 9, 9,
      2, 2, 5, 4, 9, 9, 4, 6, 0, 1, 3, 3, 5, 3, 5, 3, 9, 1, 0, 4, 1, 6, 3, 3, 4,
      5, 8, 8, 1, 3, 0, 2, 7, 1, 4, 1, 0, 4, 9, 1, 0, 3, 4, 0, 3, 7, 9, 0, 4, 2,
      2, 5, 8, 4, 5, 2, 1, 2, 1, 9, 6, 1, 0, 8, 3, 1, 6, 1, 7, 2, 6, 9, 1, 7, 0,
      2, 6, 1, 3, 8, 5, 7, 1, 2, 1, 7, 1, 8, 7, 3, 2, 8, 2, 9, 8, 9, 3, 6, 8, 0,
      5, 6, 5, 3, 3, 0, 4, 9, 4, 3, 5, 9, 8, 2, 6, 2, 5, 2, 6, 5, 0, 6, 2, 8, 4,
      5, 9, 9, 7, 9, 9, 3, 5, 1, 8, 6, 4, 8, 9, 7, 9, 2, 6, 5, 4, 6, 7, 5, 9, 2,
      4, 5, 6, 9, 0, 8, 5, 7, 3, 0, 7, 8, 2, 4, 6, 6, 4, 8, 9, 7, 8, 5, 0, 9, 9,
      8, 7, 7, 1, 3, 7, 6, 9, 2, 3, 1, 5, 7, 1, 9, 3, 0, 4, 8, 4, 6, 1, 3, 9, 9,
      0, 1, 1, 2, 2, 5, 2, 5, 0, 5, 4, 4, 2, 1, 3, 5, 1, 8, 8, 9, 7, 0, 0, 9, 0,
      7, 6, 6, 2, 8, 3, 4, 4, 0, 9, 2, 1, 3, 3, 8, 7, 2, 5, 9, 3, 9, 5, 2, 0, 4,
      3, 1, 6, 8, 0, 9, 4, 6, 1, 1, 1, 3, 3, 5, 2, 2, 1, 1, 2, 2, 7, 8, 5, 3, 7,
      5, 8, 2, 7, 3, 2, 8, 3, 3, 2, 6, 7, 2, 6, 0, 6, 8, 8, 0, 2, 7, 2, 1, 6, 2,
      8, 8, 0, 9, 9, 5, 2, 0, 3, 8, 6, 5, 9, 8, 0, 8, 4, 1, 8, 4, 4, 4, 6, 8, 7,
      4, 6, 3, 0, 4, 8, 9, 2, 2, 4, 8, 8, 2, 3, 6, 4, 0, 6, 7, 3, 5, 2, 9, 5, 0,
      1, 3, 3, 7, 2, 3, 1, 3, 9, 5, 8, 4, 9, 9, 4, 8, 2, 4, 8, 7, 2, 2, 4, 5, 6,
      0, 2, 4, 4, 9, 7, 7, 5, 5, 3, 0, 1, 0, 4, 4, 4, 1, 2, 0, 3, 2, 3, 5, 1, 5,
      9, 0, 7, 6, 6, 7, 2, 6, 5, 9, 3};
  const std::vector<int> indices = {
      1, 1, 7, 2, 1, 1, 0, 4, 3, 2, 6, 7, 1, 3, 0, 1, 0, 1, 1, 5, 5, 0, 1,
      6, 0, 0, 4, 2, 3, 6, 0, 5, 6, 1, 7, 5, 2, 4, 6, 1, 4, 1, 1, 4, 3, 2,
      1, 6, 0, 2, 7, 2, 2, 7, 2, 0, 2, 1, 6, 0, 2, 2, 4, 1, 4, 6, 2, 7, 5,
      0, 3, 2, 1, 3, 6, 0, 7, 1, 2, 6, 3, 0, 6, 4, 1, 7, 4, 1, 2, 3, 2, 4,
      2, 1, 4, 5, 2, 5, 7, 0, 1, 5, 2, 0, 5, 0, 5, 4, 0, 4, 2, 1, 5, 4, 1,
      6, 5, 0, 3, 4, 0, 5, 0, 0, 3, 1, 0, 2, 0, 1, 1, 5, 1, 0, 3, 0, 2, 6,
      0, 3, 5, 1, 2, 1, 2, 1, 3, 1, 2, 0, 0, 7, 6, 1, 2, 7, 2, 1, 2, 2, 6,
      0, 1, 1, 1, 0, 2, 3, 1, 6, 6, 2, 7, 2, 2, 0, 6, 0, 1, 3, 0, 4, 1, 2,
      1, 4, 0, 4, 0, 0, 6, 3, 0, 2, 2, 1, 7, 1, 2, 5, 3, 2, 6, 6};
  const std::vector<DataType> updates = {
      6, 8, 4, 1, 0, 8, 5, 1, 2, 7, 3, 6, 8, 2, 8, 7, 3, 2, 3, 0, 4, 6, 7, 5, 1,
      6, 0, 1, 9, 2, 5, 6, 8, 0, 8, 8, 6, 4, 2, 6, 6, 3, 6, 1, 2, 0, 2, 2, 8, 8,
      8, 9, 6, 4, 5, 3, 4, 2, 6, 9, 1, 0, 3, 4, 4, 1, 1, 2, 5, 7, 4, 2, 4, 5, 9,
      3, 2, 5, 0, 3, 1, 2, 1, 2, 3, 0, 3, 4, 0, 8, 8, 9, 1, 0, 9, 9, 8, 1, 6, 7,
      2, 8, 7, 1, 5, 3, 7, 3, 8, 3, 6, 5, 4, 0, 9, 4, 3, 8, 0, 0, 4, 4, 8, 4, 7,
      7, 2, 9, 9, 7, 0, 2, 1, 6, 0, 3, 0, 7, 3, 6, 1, 9, 4, 8, 9, 0, 9, 2, 9, 8,
      0, 6, 0, 3, 8, 0, 5, 7, 6, 0, 6, 0, 8, 9, 9, 7, 3, 8, 5, 4, 5, 1, 1, 5, 5,
      4, 6, 1, 4, 1, 4, 2, 7, 9, 7, 9, 1, 7, 2, 7, 4, 7, 1, 5, 4, 1, 2, 8, 6, 8,
      6, 7, 8, 9, 0, 9, 5, 5, 8, 7, 2, 6, 6, 1, 0, 3, 7, 0, 7, 8, 3, 0, 6, 5, 7,
      1, 3, 1, 1, 1, 5, 8, 2, 4, 6, 3, 0, 9, 6, 5, 3, 3, 3, 3, 6, 6, 7, 1, 3, 7,
      6, 8, 1, 4, 2, 4, 7, 1, 5, 4, 0, 7, 8, 4, 0, 6, 9, 0, 3, 2, 9, 2, 8, 9, 7,
      0, 1, 2, 9, 0, 6, 6, 3, 6, 0, 3, 7, 0, 6, 4, 8, 1, 9, 4, 6, 3, 7, 2, 7, 8,
      5, 6, 4, 4, 4, 3, 8, 1, 9, 6, 3, 5, 5, 9, 8, 9, 1, 8, 9, 8, 2, 4, 7, 3, 3,
      4, 8, 5, 4, 8, 0, 1, 2, 6, 3, 9, 4, 2, 4, 2, 9, 8, 7, 6, 0, 9, 6, 6, 5, 9,
      3, 8, 9, 6, 8, 1, 1, 2, 1, 8, 3, 3, 7, 6, 9, 4, 0, 4, 0, 0, 3, 8, 1, 3, 5,
      3, 1, 0, 7, 6, 4, 7, 4, 5, 8, 4, 5, 7, 5, 0, 0, 5, 2, 7, 4, 3, 8, 8, 0, 4,
      5, 1, 9, 9, 9, 4, 1, 7, 7, 0, 6, 8, 0, 1, 6, 1, 5, 2, 0, 4, 4, 4, 0, 4, 4,
      0, 0, 5, 0, 7, 5, 9, 9, 5, 7, 9, 2, 9, 7, 2, 0, 0, 9, 1, 0, 7, 7, 2, 3, 1,
      3, 9, 4, 6, 4, 9, 2, 3, 6, 1, 0, 1, 6, 9, 4, 1, 9, 8, 7, 2, 1, 8, 9, 0, 1,
      3, 9, 4, 2, 9, 4, 8, 4, 3, 1, 4, 6, 7, 0, 6, 5, 8, 8, 6, 5, 5, 8, 9, 2, 3,
      4, 3, 1, 3, 6, 4, 5, 0, 6, 4, 9, 3, 5, 2, 5, 2, 1, 7, 5, 3, 2, 9, 5, 4, 7,
      6, 3, 3, 6, 8, 3, 2, 3, 2, 5, 2, 9, 1, 3, 7, 1, 4, 5, 1};
  this->test_scatter_nd(input, indices, updates, params);
}
TYPED_TEST(ScatterNdAssign, 3x8x8x8_elementwise) {
  using DataType = typename TestFixture::DataType;
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const std::array<int, 2> ind_shape = {538, 4};
  const auto params = getScatterNDParams(in_shape, ind_shape);
  const std::vector<DataType> input = {
      5, 7, 5, 2, 9, 2, 4, 5, 2, 7, 8, 9, 8, 9, 6, 5, 8, 6, 8, 3, 1, 1, 9, 6, 9,
      1, 6, 8, 9, 1, 1, 6, 3, 0, 8, 6, 3, 1, 5, 6, 3, 8, 9, 0, 9, 3, 2, 1, 3, 2,
      3, 3, 5, 9, 3, 3, 0, 6, 4, 2, 5, 2, 7, 3, 3, 6, 9, 5, 3, 3, 6, 1, 9, 8, 1,
      5, 0, 5, 0, 7, 0, 2, 1, 9, 0, 7, 8, 7, 8, 7, 0, 2, 5, 6, 6, 2, 6, 5, 3, 8,
      6, 5, 0, 0, 8, 7, 9, 9, 9, 7, 6, 6, 5, 0, 2, 2, 8, 0, 4, 4, 5, 6, 2, 8, 5,
      3, 5, 3, 7, 1, 0, 0, 2, 6, 3, 4, 4, 5, 6, 7, 6, 4, 4, 8, 5, 4, 0, 5, 9, 8,
      5, 2, 0, 7, 8, 2, 8, 7, 0, 6, 4, 9, 8, 4, 9, 7, 4, 0, 9, 7, 2, 5, 2, 2, 0,
      8, 1, 1, 7, 5, 1, 6, 5, 0, 7, 5, 8, 1, 2, 9, 9, 2, 2, 5, 4, 9, 9, 4, 6, 0,
      1, 3, 3, 5, 3, 5, 3, 9, 1, 0, 4, 1, 6, 3, 3, 4, 5, 8, 8, 1, 3, 0, 2, 7, 1,
      4, 1, 0, 4, 9, 1, 0, 3, 4, 0, 3, 7, 9, 0, 4, 2, 2, 5, 8, 4, 5, 2, 1, 2, 1,
      9, 6, 1, 0, 8, 3, 1, 6, 1, 7, 2, 6, 9, 1, 7, 0, 2, 6, 1, 3, 8, 5, 7, 1, 2,
      1, 7, 1, 8, 7, 3, 2, 8, 2, 9, 8, 9, 3, 6, 8, 0, 5, 6, 5, 3, 3, 0, 4, 9, 4,
      3, 5, 9, 8, 2, 6, 2, 5, 2, 6, 5, 0, 6, 2, 8, 4, 5, 9, 9, 7, 9, 9, 3, 5, 1,
      8, 6, 4, 8, 9, 7, 9, 2, 6, 5, 4, 6, 7, 5, 9, 2, 4, 5, 6, 9, 0, 8, 5, 7, 3,
      0, 7, 8, 2, 4, 6, 6, 4, 8, 9, 7, 8, 5, 0, 9, 9, 8, 7, 7, 1, 3, 7, 6, 9, 2,
      3, 1, 5, 7, 1, 9, 3, 0, 4, 8, 4, 6, 1, 3, 9, 9, 0, 1, 1, 2, 2, 5, 2, 5, 0,
      5, 4, 4, 2, 1, 3, 5, 1, 8, 8, 9, 7, 0, 0, 9, 0, 7, 6, 6, 2, 8, 3, 4, 4, 0,
      9, 2, 1, 3, 3, 8, 7, 2, 5, 9, 3, 9, 5, 2, 0, 4, 3, 1, 6, 8, 0, 9, 4, 6, 1,
      1, 1, 3, 3, 5, 2, 2, 1, 1, 2, 2, 7, 8, 5, 3, 7, 5, 8, 2, 7, 3, 2, 8, 3, 3,
      2, 6, 7, 2, 6, 0, 6, 8, 8, 0, 2, 7, 2, 1, 6, 2, 8, 8, 0, 9, 9, 5, 2, 0, 3,
      8, 6, 5, 9, 8, 0, 8, 4, 1, 8, 4, 4, 4, 6, 8, 7, 4, 6, 3, 0, 4, 8, 9, 2, 2,
      4, 8, 8, 2, 3, 6, 4, 0, 6, 7, 3, 5, 2, 9, 5, 0, 1, 3, 3, 7, 2, 3, 1, 3, 9,
      5, 8, 4, 9, 9, 4, 8, 2, 4, 8, 7, 2, 2, 4, 5, 6, 0, 2, 4, 4, 9, 7, 7, 5, 5,
      3, 0, 1, 0, 4, 4, 4, 1, 2, 0, 3, 2, 3, 5, 1, 5, 9, 0, 7, 6, 6, 7, 2, 6, 5,
      9, 3, 8, 2, 2, 2, 3, 5, 5, 2, 0, 6, 3, 8, 4, 7, 7, 8, 8, 8, 2, 7, 2, 4, 2,
      2, 3, 0, 9, 3, 6, 1, 1, 1, 0, 2, 0, 3, 4, 9, 1, 1, 8, 6, 1, 0, 1, 8, 0, 1,
      9, 3, 2, 4, 6, 7, 0, 4, 5, 2, 3, 7, 2, 2, 5, 9, 9, 6, 1, 0, 0, 9, 5, 8, 5,
      2, 6, 9, 8, 4, 7, 9, 9, 5, 8, 4, 7, 3, 3, 7, 1, 7, 7, 8, 5, 7, 0, 1, 4, 0,
      2, 3, 3, 3, 2, 3, 7, 5, 1, 2, 0, 9, 7, 3, 7, 2, 2, 3, 0, 4, 3, 5, 6, 1, 6,
      4, 8, 9, 9, 1, 2, 8, 0, 2, 3, 3, 1, 8, 4, 4, 4, 9, 9, 0, 7, 5, 6, 0, 5, 5,
      9, 7, 6, 1, 3, 2, 2, 8, 5, 7, 5, 5, 0, 5, 4, 1, 5, 5, 2, 8, 9, 4, 1, 0, 8,
      9, 5, 7, 1, 0, 3, 4, 3, 1, 0, 8, 5, 6, 5, 9, 1, 4, 2, 9, 7, 0, 0, 2, 2, 8,
      9, 5, 8, 9, 1, 3, 2, 0, 1, 4, 2, 1, 5, 1, 1, 2, 4, 2, 1, 4, 5, 5, 4, 8, 7,
      0, 5, 0, 6, 3, 8, 4, 9, 0, 3, 7, 4, 2, 8, 9, 3, 6, 5, 0, 4, 9, 4, 4, 9, 8,
      7, 7, 3, 2, 9, 4, 1, 0, 0, 0, 4, 3, 0, 9, 9, 7, 8, 7, 9, 4, 7, 9, 6, 5, 0,
      6, 4, 8, 1, 2, 0, 2, 0, 5, 9, 5, 2, 6, 7, 1, 8, 2, 1, 2, 4, 4, 3, 5, 8, 4,
      9, 8, 5, 4, 3, 5, 3, 1, 4, 5, 3, 9, 7, 8, 2, 0, 4, 9, 3, 5, 7, 8, 0, 2, 9,
      0, 7, 8, 8, 4, 4, 2, 8, 2, 0, 3, 9, 2, 0, 2, 1, 6, 5, 9, 3, 6, 1, 5, 3, 1,
      9, 0, 7, 8, 6, 8, 0, 8, 5, 1, 9, 0, 7, 4, 0, 4, 7, 5, 4, 7, 0, 8, 4, 4, 0,
      7, 2, 0, 7, 2, 0, 2, 6, 3, 0, 8, 5, 1, 8, 8, 1, 1, 2, 1, 8, 3, 0, 4, 1, 8,
      7, 5, 5, 2, 5, 1, 0, 5, 9, 7, 8, 4, 2, 2, 1, 3, 4, 4, 7, 8, 1, 9, 7, 1, 1,
      0, 7, 2, 1, 0, 5, 5, 1, 9, 0, 7, 3, 3, 0, 0, 6, 6, 8, 7, 9, 8, 7, 8, 5, 7,
      9, 5, 2, 3, 7, 3, 1, 7, 7, 6, 2, 9, 9, 7, 4, 2, 8, 1, 9, 0, 7, 0, 5, 3, 0,
      9, 2, 3, 7, 0, 5, 8, 4, 4, 9, 5, 6, 6, 1, 0, 6, 5, 2, 2, 5, 2, 6, 0, 5, 4,
      2, 0, 3, 0, 5, 5, 7, 6, 5, 8, 5, 9, 0, 4, 0, 8, 8, 1, 6, 5, 9, 9, 1, 0, 5,
      7, 9, 1, 3, 0, 6, 5, 4, 8, 3, 3, 8, 2, 6, 3, 3, 2, 8, 5, 9, 1, 9, 1, 2, 7,
      3, 2, 0, 6, 4, 4, 9, 1, 2, 3, 8, 2, 7, 7, 6, 8, 2, 6, 1, 4, 7, 9, 1, 1, 0,
      0, 5, 2, 2, 4, 3, 7, 3, 0, 3, 9, 3, 4, 3, 8, 0, 6, 3, 0, 7, 8, 4, 3, 1, 5,
      9, 6, 2, 3, 7, 2, 4, 4, 3, 7, 7, 6, 6, 4, 3, 8, 3, 1, 1, 8, 4, 3, 6, 0, 0,
      5, 6, 4, 7, 2, 1, 5, 9, 6, 5, 9, 0, 0, 4, 5, 3, 9, 2, 3, 7, 9, 5, 3, 6, 7,
      6, 4, 0, 6, 6, 6, 6, 1, 0, 1, 0, 5, 6, 1, 6, 8, 3, 6, 8, 0, 9, 8, 6, 7, 9,
      8, 0, 0, 9, 0, 5, 1, 8, 0, 6, 6, 3, 9, 5, 7, 5, 0, 4, 8, 7, 3, 1, 4, 4, 7,
      8, 5, 2, 8, 0, 1, 1, 2, 8, 1, 2, 2, 4, 5, 7, 1, 0, 8, 8, 8, 6, 7, 5, 9, 5,
      5, 3, 6, 2, 2, 3, 9, 0, 8, 5, 6, 4, 1, 0, 5, 1, 3, 9, 2, 6, 4, 2, 6, 9, 8,
      8, 3, 7, 1, 9, 3, 1, 5, 2, 6, 4, 3, 0, 8, 5, 4, 8, 5, 5, 8, 4, 8, 9, 4, 8,
      0, 6, 7, 8, 1, 9, 5, 5, 8, 6, 6, 8, 8, 5, 4, 3, 1, 2, 4, 3, 8, 2, 2, 5, 9,
      2, 1, 2, 6, 6, 7, 2, 2, 5, 7, 4, 9, 1, 3, 1, 2, 2, 3, 6, 5, 4, 8, 1, 3, 6,
      9, 4, 7, 0, 5, 9, 6, 7, 9, 3, 1, 6, 4, 1, 3, 9, 9, 1, 5, 4, 3, 9, 1, 9, 8,
      7, 1, 5, 5, 6, 8, 0, 6, 4, 8, 6, 5, 1, 7, 0, 5, 3, 4, 9, 7, 7, 3, 8, 1, 8,
      1, 1, 0, 3, 7, 1, 2, 6, 9, 7, 1, 5, 5, 7, 8, 5, 7, 5, 0, 7, 7, 7, 9, 8, 2,
      1, 8, 0, 5, 2, 2, 6, 9, 2, 9, 3, 7, 3, 0, 0, 6, 8, 4, 7, 2, 1, 8, 6, 1, 3,
      1, 2, 6, 8, 6, 2, 7, 1, 2, 1, 6};
  const std::vector<int> indices = {
      2, 1, 2, 4, 1, 7, 4, 1, 2, 1, 3, 3, 2, 1, 4, 7, 1, 3, 7, 6, 1, 5, 4, 3, 0,
      5, 1, 7, 2, 7, 7, 6, 0, 4, 6, 6, 2, 0, 6, 5, 2, 2, 6, 0, 2, 3, 3, 3, 2, 7,
      3, 4, 1, 3, 3, 3, 0, 3, 6, 2, 1, 2, 6, 6, 0, 5, 2, 1, 2, 4, 5, 5, 2, 1, 6,
      4, 1, 4, 7, 0, 1, 0, 7, 1, 2, 5, 7, 1, 0, 0, 7, 2, 1, 7, 6, 0, 0, 7, 7, 7,
      1, 0, 6, 4, 1, 0, 1, 2, 2, 4, 0, 2, 2, 5, 0, 3, 1, 7, 5, 6, 0, 7, 2, 2, 1,
      2, 2, 3, 0, 7, 5, 5, 0, 5, 4, 4, 2, 4, 0, 6, 1, 0, 3, 4, 2, 5, 4, 4, 2, 4,
      3, 5, 0, 3, 0, 4, 1, 7, 1, 3, 1, 4, 4, 2, 1, 2, 2, 7, 2, 1, 2, 3, 2, 2, 0,
      0, 1, 4, 1, 6, 2, 2, 7, 6, 2, 0, 3, 5, 0, 6, 0, 4, 0, 5, 0, 7, 0, 2, 3, 2,
      0, 4, 7, 4, 0, 6, 5, 3, 1, 0, 2, 2, 0, 5, 2, 7, 1, 2, 6, 7, 2, 6, 2, 4, 1,
      0, 1, 4, 2, 5, 0, 7, 2, 0, 6, 3, 1, 5, 7, 5, 1, 6, 6, 3, 1, 2, 2, 1, 2, 0,
      2, 3, 1, 4, 6, 5, 1, 2, 4, 3, 1, 7, 3, 1, 0, 6, 5, 7, 0, 0, 7, 6, 0, 0, 3,
      6, 0, 4, 2, 7, 2, 5, 6, 3, 0, 0, 0, 4, 2, 4, 1, 1, 2, 6, 1, 3, 2, 1, 5, 3,
      0, 3, 6, 5, 0, 2, 1, 1, 2, 6, 3, 1, 2, 3, 4, 5, 1, 4, 0, 4, 1, 1, 0, 2, 0,
      6, 2, 2, 2, 4, 3, 6, 2, 2, 0, 6, 0, 7, 2, 5, 1, 7, 2, 4, 2, 7, 5, 5, 1, 0,
      1, 3, 2, 0, 3, 0, 2, 5, 7, 7, 1, 2, 0, 2, 1, 2, 0, 5, 2, 5, 2, 6, 0, 0, 6,
      3, 2, 5, 5, 2, 1, 6, 5, 7, 0, 7, 5, 2, 1, 5, 5, 2, 1, 5, 4, 6, 2, 2, 1, 0,
      1, 6, 3, 5, 2, 5, 6, 0, 0, 5, 2, 6, 0, 2, 2, 2, 1, 7, 7, 1, 1, 1, 1, 2, 0,
      0, 3, 1, 2, 2, 2, 5, 2, 2, 5, 0, 1, 7, 4, 2, 1, 1, 1, 0, 2, 3, 7, 6, 2, 3,
      0, 5, 0, 0, 0, 1, 1, 1, 3, 7, 0, 1, 4, 0, 1, 2, 3, 2, 0, 1, 4, 3, 0, 4, 3,
      6, 1, 3, 6, 5, 2, 5, 4, 5, 2, 2, 2, 6, 2, 2, 2, 0, 2, 5, 0, 5, 1, 4, 0, 6,
      1, 4, 7, 5, 0, 0, 0, 3, 1, 2, 7, 1, 0, 6, 3, 2, 1, 2, 6, 1, 0, 7, 6, 3, 1,
      5, 5, 4, 1, 0, 3, 7, 2, 5, 4, 6, 2, 2, 3, 4, 2, 0, 5, 6, 0, 3, 2, 5, 2, 2,
      5, 4, 0, 4, 7, 2, 0, 3, 4, 4, 2, 0, 5, 7, 1, 6, 6, 2, 1, 6, 6, 6, 2, 7, 0,
      3, 1, 5, 2, 6, 1, 4, 2, 4, 1, 1, 5, 5, 2, 5, 2, 5, 0, 6, 5, 2, 1, 4, 5, 3,
      1, 4, 2, 5, 1, 7, 5, 3, 1, 1, 7, 0, 0, 7, 5, 7, 0, 5, 1, 5, 1, 7, 2, 0, 1,
      4, 3, 7, 1, 5, 6, 7, 2, 5, 7, 4, 0, 2, 2, 3, 0, 0, 3, 5, 0, 1, 0, 6, 1, 3,
      2, 5, 2, 3, 0, 6, 2, 3, 5, 2, 1, 6, 5, 5, 0, 0, 4, 0, 2, 4, 4, 4, 2, 4, 7,
      5, 1, 1, 1, 4, 1, 0, 7, 7, 2, 3, 5, 3, 0, 6, 1, 1, 0, 2, 3, 3, 1, 2, 6, 2,
      1, 0, 5, 5, 0, 3, 1, 4, 2, 0, 0, 5, 0, 7, 5, 6, 1, 0, 2, 4, 1, 4, 0, 7, 1,
      1, 2, 7, 1, 3, 0, 2, 2, 1, 5, 4, 2, 4, 0, 1, 0, 5, 2, 0, 2, 0, 7, 0, 2, 1,
      4, 2, 2, 2, 7, 2, 0, 3, 5, 3, 1, 7, 7, 6, 2, 6, 0, 1, 1, 3, 1, 3, 1, 3, 5,
      6, 2, 0, 5, 1, 2, 1, 4, 1, 0, 3, 3, 0, 0, 7, 5, 0, 1, 5, 2, 2, 2, 1, 3, 6,
      1, 1, 7, 6, 1, 1, 4, 5, 0, 2, 7, 5, 1, 0, 4, 3, 1, 7, 1, 4, 1, 0, 2, 0, 0,
      1, 5, 5, 0, 6, 4, 6, 2, 6, 3, 7, 1, 6, 2, 0, 0, 4, 1, 5, 0, 0, 1, 3, 1, 2,
      5, 6, 1, 2, 7, 4, 1, 6, 4, 2, 2, 4, 6, 2, 0, 3, 3, 1, 1, 4, 0, 3, 0, 1, 5,
      4, 1, 2, 7, 2, 2, 7, 2, 1, 0, 7, 7, 4, 0, 3, 7, 0, 2, 0, 5, 2, 2, 3, 4, 2,
      0, 3, 0, 7, 0, 5, 3, 2, 1, 1, 5, 3, 2, 4, 3, 7, 0, 5, 6, 2, 1, 2, 3, 5, 0,
      6, 4, 1, 1, 6, 0, 0, 0, 2, 0, 1, 2, 1, 6, 0, 1, 0, 6, 3, 2, 1, 2, 2, 1, 3,
      4, 6, 0, 4, 7, 3, 0, 5, 2, 3, 1, 1, 3, 4, 2, 5, 5, 3, 1, 6, 2, 6, 2, 4, 2,
      4, 0, 1, 3, 6, 2, 7, 2, 0, 2, 3, 1, 6, 1, 2, 7, 0, 2, 3, 1, 3, 1, 1, 2, 1,
      2, 1, 6, 5, 1, 6, 7, 5, 0, 7, 0, 2, 2, 2, 1, 5, 2, 6, 5, 3, 0, 0, 7, 3, 2,
      7, 6, 4, 2, 7, 5, 6, 1, 3, 5, 4, 2, 1, 7, 2, 0, 3, 2, 7, 2, 6, 6, 0, 1, 4,
      4, 6, 0, 2, 4, 6, 2, 5, 1, 0, 2, 4, 5, 6, 1, 5, 5, 1, 1, 6, 3, 3, 2, 7, 2,
      4, 2, 1, 3, 5, 2, 2, 1, 7, 2, 5, 7, 6, 0, 4, 6, 4, 1, 7, 7, 4, 1, 4, 6, 2,
      1, 3, 1, 1, 1, 6, 5, 2, 0, 4, 3, 5, 0, 2, 6, 1, 2, 1, 2, 5, 1, 5, 7, 3, 2,
      1, 5, 2, 2, 4, 2, 6, 0, 3, 5, 7, 1, 0, 7, 5, 1, 0, 6, 0, 2, 5, 3, 6, 0, 3,
      1, 0, 1, 7, 2, 5, 2, 3, 0, 0, 0, 1, 2, 4, 1, 2, 4, 0, 2, 4, 5, 1, 1, 3, 2,
      1, 0, 1, 7, 0, 2, 4, 2, 5, 2, 0, 4, 6, 1, 3, 4, 2, 1, 3, 6, 3, 1, 0, 0, 2,
      2, 4, 7, 1, 2, 6, 3, 5, 1, 2, 1, 4, 2, 4, 3, 3, 1, 4, 5, 7, 2, 1, 1, 4, 2,
      2, 5, 6, 0, 7, 4, 6, 1, 7, 1, 2, 1, 5, 4, 0, 1, 4, 2, 0, 0, 3, 7, 4, 1, 5,
      6, 1, 1, 6, 4, 5, 0, 6, 5, 0, 1, 6, 2, 4, 2, 2, 5, 5, 0, 1, 6, 7, 1, 3, 5,
      5, 0, 3, 4, 3, 0, 7, 0, 4, 1, 1, 0, 3, 0, 6, 0, 1, 2, 7, 5, 3, 2, 6, 2, 5,
      2, 4, 4, 3, 0, 6, 5, 6, 0, 6, 2, 4, 0, 1, 0, 5, 2, 4, 6, 4, 2, 3, 5, 0, 2,
      7, 2, 3, 2, 0, 1, 0, 0, 6, 7, 1, 2, 7, 6, 5, 2, 2, 5, 7, 0, 6, 6, 2, 2, 4,
      1, 0, 1, 1, 2, 4, 2, 6, 7, 2, 2, 2, 6, 6, 0, 4, 7, 1, 2, 6, 4, 0, 2, 3, 3,
      6, 0, 1, 3, 3, 1, 7, 1, 0, 0, 2, 0, 7, 0, 4, 7, 6, 0, 7, 7, 2, 2, 7, 5, 4,
      0, 3, 3, 5, 1, 1, 2, 0, 1, 3, 3, 7, 1, 6, 3, 4, 1, 5, 2, 5, 1, 2, 6, 4, 2,
      7, 5, 0, 1, 7, 0, 2, 0, 6, 7, 3, 2, 6, 3, 3, 0, 3, 4, 2, 2, 7, 4, 1, 1, 3,
      3, 1, 0, 5, 4, 2, 0, 4, 5, 5, 0, 2, 4, 7, 1, 6, 1, 1, 1, 5, 5, 7, 0, 3, 2,
      2, 1, 1, 4, 1, 1, 6, 1, 0, 2, 1, 5, 1, 2, 6, 2, 3, 2, 7, 3, 5, 2, 7, 4, 2,
      0, 5, 6, 6, 2, 3, 7, 3, 0, 5, 4, 0, 1, 0, 5, 1, 2, 2, 3, 3, 1, 3, 1, 7, 2,
      5, 3, 2, 0, 4, 2, 1, 2, 1, 6, 7, 2, 5, 5, 4, 1, 2, 6, 3, 1, 7, 3, 3, 0, 2,
      0, 5, 2, 3, 7, 2, 1, 0, 4, 7, 2, 7, 1, 6, 2, 7, 1, 4, 0, 0, 7, 4, 0, 5, 1,
      0, 2, 3, 5, 6, 2, 6, 3, 6, 1, 6, 3, 2, 1, 5, 2, 7, 2, 0, 6, 0, 0, 7, 3, 7,
      2, 6, 7, 4, 0, 6, 6, 7, 0, 6, 4, 7, 0, 3, 1, 3, 2, 3, 2, 5, 0, 0, 1, 7, 0,
      3, 1, 7, 2, 1, 2, 6, 2, 1, 4, 3, 0, 7, 6, 2, 1, 4, 1, 1, 2, 4, 4, 0, 1, 3,
      3, 0, 0, 4, 4, 5, 1, 1, 7, 7, 0, 1, 0, 7, 2, 4, 6, 1, 0, 7, 6, 6, 0, 0, 4,
      1, 0, 2, 5, 0, 0, 0, 0, 5, 0, 3, 1, 2, 0, 3, 6, 4, 2, 3, 3, 7, 0, 4, 2, 6,
      0, 0, 4, 3, 0, 3, 0, 6, 1, 2, 5, 0, 2, 7, 0, 2, 1, 6, 6, 7, 0, 0, 5, 4, 2,
      2, 5, 1, 0, 5, 6, 3, 0, 3, 5, 0, 1, 6, 4, 3, 0, 1, 1, 1, 0, 7, 3, 6, 0, 6,
      1, 4, 2, 6, 2, 1, 0, 1, 6, 2, 1, 1, 4, 6, 1, 2, 7, 3, 2, 7, 0, 7, 0, 1, 7,
      1, 2, 5, 3, 1, 2, 2, 4, 6, 2, 2, 4, 5, 0, 2, 4, 2, 0, 4, 1, 1, 0, 0, 7, 5,
      0, 5, 1, 3, 2, 1, 5, 7, 0, 4, 7, 5, 1, 6, 7, 4, 1, 7, 3, 0, 1, 4, 7, 2, 0,
      7, 6, 1, 0, 5, 5, 7, 2, 2, 7, 1, 0, 4, 5, 7, 1, 3, 5, 1, 0, 2, 2, 4, 0, 0,
      3, 3, 2, 2, 4, 0, 1, 2, 4, 4, 1, 4, 4, 1, 1, 7, 3, 6, 0, 1, 4, 2, 0, 7, 1,
      4, 2, 5, 0, 0, 0, 5, 2, 4, 0, 5, 7, 4, 0, 7, 1, 2, 1, 6, 7, 7, 2, 6, 3, 2,
      0, 4, 4, 6, 0, 1, 5, 0, 2, 5, 7, 3, 2, 4, 0, 5, 2, 6, 4, 2, 1, 2, 4, 7, 0,
      4, 3, 2, 0, 2, 3, 5, 0, 1, 7, 5, 0, 1, 2, 2, 2, 0, 0, 3, 0, 7, 5, 1, 2, 4,
      6, 3, 0, 2, 2, 5, 1, 4, 1, 0, 0, 4, 4, 0, 0, 1, 2, 5, 1, 4, 3, 5, 1, 0, 4,
      0, 1, 6, 6, 1, 1, 5, 7, 1, 1, 5, 1, 6, 0, 5, 4, 6, 2, 6, 6, 7, 0, 3, 3, 3,
      0, 1, 1, 2, 0, 3, 0, 2, 0, 7, 7, 6, 0, 0, 2, 3, 2, 1, 3, 4, 1, 2, 1, 7, 2,
      3, 1, 0, 2, 3, 2, 2, 2, 7, 1, 3, 2, 7, 2, 6, 1, 5, 2, 1, 1, 5, 0, 6, 0, 7,
      0, 5, 0, 3, 3, 4, 1, 3, 6, 7, 1, 1, 5, 7, 1, 0, 1, 7, 1, 6, 0, 4, 2, 7, 6,
      0, 2, 1, 1, 1, 1, 7, 1, 6, 0, 6, 4, 3, 1, 2, 5, 2, 1, 5, 3, 1, 1, 5, 3, 4,
      1, 2, 5, 1, 0, 3, 6, 1, 0, 7, 4, 7, 1, 3, 1, 6, 1, 1, 4, 0, 1, 6, 4, 1, 0,
      6, 2, 7, 0, 0, 6, 5, 2, 5, 6, 6, 0, 2, 1, 0, 2, 3, 3, 2, 2, 7, 7, 0, 0, 1,
      0, 3};
  const std::vector<DataType> updates = {
      9, 0, 4, 7, 5, 8, 4, 2, 4, 3, 1, 4, 8, 3, 8, 3, 8, 7, 5, 6, 2, 3, 4, 6, 3,
      6, 3, 4, 7, 2, 9, 8, 7, 0, 1, 7, 5, 8, 0, 2, 2, 5, 5, 9, 4, 3, 6, 6, 5, 4,
      0, 4, 5, 7, 4, 5, 7, 2, 3, 7, 8, 5, 8, 3, 9, 5, 7, 7, 8, 0, 0, 1, 6, 3, 4,
      2, 9, 5, 9, 0, 6, 9, 8, 7, 1, 4, 8, 1, 1, 0, 1, 7, 5, 5, 5, 4, 2, 3, 3, 0,
      6, 7, 0, 2, 6, 2, 0, 2, 9, 5, 9, 2, 8, 1, 7, 8, 0, 1, 6, 2, 8, 7, 8, 4, 8,
      9, 8, 8, 8, 5, 0, 1, 3, 3, 7, 6, 4, 2, 7, 5, 2, 1, 9, 5, 8, 9, 8, 6, 2, 2,
      3, 1, 9, 5, 2, 5, 9, 7, 7, 0, 9, 1, 8, 6, 4, 5, 4, 7, 4, 8, 9, 7, 3, 6, 4,
      9, 1, 3, 6, 2, 3, 2, 0, 6, 5, 1, 6, 4, 2, 3, 2, 1, 2, 8, 0, 8, 4, 2, 1, 0,
      4, 6, 4, 2, 1, 5, 1, 3, 5, 8, 1, 3, 6, 5, 6, 0, 2, 3, 8, 9, 2, 1, 2, 7, 2,
      4, 3, 5, 8, 8, 6, 9, 7, 4, 6, 9, 1, 2, 7, 2, 4, 6, 1, 5, 8, 5, 9, 3, 3, 4,
      6, 5, 6, 0, 3, 0, 6, 0, 6, 8, 7, 6, 8, 3, 6, 5, 4, 8, 4, 0, 4, 1, 9, 3, 7,
      4, 0, 3, 9, 8, 5, 5, 3, 0, 9, 2, 0, 5, 0, 7, 6, 6, 7, 9, 2, 3, 5, 6, 0, 9,
      5, 4, 6, 1, 4, 2, 0, 4, 1, 1, 1, 4, 7, 9, 8, 8, 5, 5, 5, 9, 3, 6, 9, 0, 7,
      6, 8, 5, 6, 6, 4, 2, 3, 7, 6, 5, 1, 9, 5, 1, 8, 5, 4, 8, 3, 1, 1, 7, 2, 9,
      9, 7, 8, 6, 8, 2, 2, 9, 2, 0, 0, 3, 4, 0, 6, 4, 7, 7, 2, 5, 7, 2, 9, 6, 2,
      7, 1, 2, 1, 3, 0, 2, 4, 4, 8, 0, 3, 4, 1, 0, 9, 2, 0, 9, 5, 0, 9, 2, 4, 3,
      1, 8, 1, 1, 3, 9, 2, 7, 9, 8, 5, 8, 0, 5, 9, 0, 0, 9, 9, 5, 5, 1, 9, 9, 7,
      1, 6, 1, 6, 6, 1, 7, 8, 1, 4, 3, 5, 4, 4, 4, 5, 4, 0, 4, 8, 0, 0, 9, 2, 5,
      3, 7, 5, 6, 7, 9, 7, 5, 4, 3, 6, 7, 2, 1, 3, 5, 4, 7, 5, 5, 1, 8, 2, 1, 1,
      8, 4, 9, 4, 8, 9, 3, 3, 1, 6, 5, 1, 2, 1, 7, 1, 3, 8, 7, 4, 3, 5, 4, 8, 9,
      3, 3, 6, 0, 8, 9, 0, 1, 0, 2, 4, 7, 7, 0, 1, 7, 1, 4, 5, 6, 4, 3, 8, 3, 9,
      9, 2, 8, 0, 6, 8, 3, 4, 0, 9, 0, 9, 2};
  this->test_scatter_nd(input, indices, updates, params);
}
