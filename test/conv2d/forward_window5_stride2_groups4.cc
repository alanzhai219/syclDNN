/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow5Stride2Groups4 = GroupWindowStrideTest<Triple, 5, 2, 4>;
TYPED_TEST_SUITE(ForwardWindow5Stride2Groups4, GTestTypeTriples);
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x7x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,  50.,  25.,  50.,  50.,  100., 50.,  100., 25., 50.,  25.,
      50.,  50.,  100., 50.,  100., 25.,  50.,  25.,  50., 50.,  100.,
      50.,  100., 25.,  50.,  25.,  50.,  50.,  100., 50., 100., 25.,
      50.,  25.,  50.,  50.,  100., 50.,  100., 25.,  50., 25.,  50.,
      50.,  100., 50.,  100., 25.,  50.,  25.,  50.,  50., 100., 50.,
      100., 25.,  50.,  25.,  50.,  50.,  100., 50.,  100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27.,  54.,  27.,  54., 45.,  90., 45., 90., 45.,  90., 45.,  90.,  27.,
      54.,  27.,  54.,  45., 90.,  45., 90., 75., 150., 75., 150., 75.,  150.,
      75.,  150., 45.,  90., 45.,  90., 45., 90., 45.,  90., 75.,  150., 75.,
      150., 75.,  150., 75., 150., 45., 90., 45., 90.,  27., 54.,  27.,  54.,
      45.,  90.,  45.,  90., 45.,  90., 45., 90., 27.,  54., 27.,  54.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27.,  54.,  27.,  54., 45.,  90., 45., 90., 45.,  90., 45.,  90.,  27.,
      54.,  27.,  54.,  45., 90.,  45., 90., 75., 150., 75., 150., 75.,  150.,
      75.,  150., 45.,  90., 45.,  90., 45., 90., 45.,  90., 75.,  150., 75.,
      150., 75.,  150., 75., 150., 45., 90., 45., 90.,  27., 54.,  27.,  54.,
      45.,  90.,  45.,  90., 45.,  90., 45., 90., 27.,  54., 27.,  54.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x7x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,  50.,  25.,  50.,  50.,  100., 50.,  100., 25., 50.,  25.,
      50.,  50.,  100., 50.,  100., 25.,  50.,  25.,  50., 50.,  100.,
      50.,  100., 25.,  50.,  25.,  50.,  50.,  100., 50., 100., 25.,
      50.,  25.,  50.,  50.,  100., 50.,  100., 25.,  50., 25.,  50.,
      50.,  100., 50.,  100., 25.,  50.,  25.,  50.,  50., 100., 50.,
      100., 25.,  50.,  25.,  50.,  50.,  100., 50.,  100.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36.,  72.,  36.,  72.,  45.,  90.,  45.,  90., 45.,  90., 45.,
      90.,  27.,  54.,  27.,  54.,  60.,  120., 60., 120., 75., 150.,
      75.,  150., 75.,  150., 75.,  150., 45.,  90., 45.,  90., 60.,
      120., 60.,  120., 75.,  150., 75.,  150., 75., 150., 75., 150.,
      45.,  90.,  45.,  90.,  36.,  72.,  36.,  72., 45.,  90., 45.,
      90.,  45.,  90.,  45.,  90.,  27.,  54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36.,  72.,  36.,  72.,  45.,  90.,  45.,  90., 45.,  90., 45.,
      90.,  27.,  54.,  27.,  54.,  60.,  120., 60., 120., 75., 150.,
      75.,  150., 75.,  150., 75.,  150., 45.,  90., 45.,  90., 60.,
      120., 60.,  120., 75.,  150., 75.,  150., 75., 150., 75., 150.,
      45.,  90.,  45.,  90.,  36.,  72.,  36.,  72., 45.,  90., 45.,
      90.,  45.,  90.,  45.,  90.,  27.,  54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x7x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x7x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x8x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,  50.,  25.,  50.,  50.,  100., 50.,  100., 25., 50.,  25.,
      50.,  50.,  100., 50.,  100., 25.,  50.,  25.,  50., 50.,  100.,
      50.,  100., 25.,  50.,  25.,  50.,  50.,  100., 50., 100., 25.,
      50.,  25.,  50.,  50.,  100., 50.,  100., 25.,  50., 25.,  50.,
      50.,  100., 50.,  100., 25.,  50.,  25.,  50.,  50., 100., 50.,
      100., 25.,  50.,  25.,  50.,  50.,  100., 50.,  100.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36.,  72.,  36., 72.,  60.,  120., 60.,  120., 60.,  120., 60.,
      120., 36.,  72., 36.,  72.,  45.,  90.,  45.,  90.,  75.,  150.,
      75.,  150., 75., 150., 75.,  150., 45.,  90.,  45.,  90.,  45.,
      90.,  45.,  90., 75.,  150., 75.,  150., 75.,  150., 75.,  150.,
      45.,  90.,  45., 90.,  27.,  54.,  27.,  54.,  45.,  90.,  45.,
      90.,  45.,  90., 45.,  90.,  27.,  54.,  27.,  54.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36.,  72.,  36., 72.,  60.,  120., 60.,  120., 60.,  120., 60.,
      120., 36.,  72., 36.,  72.,  45.,  90.,  45.,  90.,  75.,  150.,
      75.,  150., 75., 150., 75.,  150., 45.,  90.,  45.,  90.,  45.,
      90.,  45.,  90., 75.,  150., 75.,  150., 75.,  150., 75.,  150.,
      45.,  90.,  45., 90.,  27.,  54.,  27.,  54.,  45.,  90.,  45.,
      90.,  45.,  90., 45.,  90.,  27.,  54.,  27.,  54.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x8x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,  50.,  25.,  50.,  50.,  100., 50.,  100., 25., 50.,  25.,
      50.,  50.,  100., 50.,  100., 25.,  50.,  25.,  50., 50.,  100.,
      50.,  100., 25.,  50.,  25.,  50.,  50.,  100., 50., 100., 25.,
      50.,  25.,  50.,  50.,  100., 50.,  100., 25.,  50., 25.,  50.,
      50.,  100., 50.,  100., 25.,  50.,  25.,  50.,  50., 100., 50.,
      100., 25.,  50.,  25.,  50.,  50.,  100., 50.,  100.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,  96.,  48.,  96.,  60.,  120., 60.,  120., 60.,  120., 60.,
      120., 36.,  72.,  36.,  72.,  60.,  120., 60.,  120., 75.,  150.,
      75.,  150., 75.,  150., 75.,  150., 45.,  90.,  45.,  90.,  60.,
      120., 60.,  120., 75.,  150., 75.,  150., 75.,  150., 75.,  150.,
      45.,  90.,  45.,  90.,  36.,  72.,  36.,  72.,  45.,  90.,  45.,
      90.,  45.,  90.,  45.,  90.,  27.,  54.,  27.,  54.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150., 75., 150.,
                                         75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,  96.,  48.,  96.,  60.,  120., 60.,  120., 60.,  120., 60.,
      120., 36.,  72.,  36.,  72.,  60.,  120., 60.,  120., 75.,  150.,
      75.,  150., 75.,  150., 75.,  150., 45.,  90.,  45.,  90.,  60.,
      120., 60.,  120., 75.,  150., 75.,  150., 75.,  150., 75.,  150.,
      45.,  90.,  45.,  90.,  36.,  72.,  36.,  72.,  45.,  90.,  45.,
      90.,  45.,  90.,  45.,  90.,  27.,  54.,  27.,  54.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x8x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x8x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x10x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x10x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED1x10x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED1x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED1x10x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED1x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x7x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x7x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x7x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x7x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x7x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x7x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x7x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x8x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x8x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x8x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x8x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x8x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x8x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x8x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x10x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x7x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x10x7x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      36., 72.,  36., 72.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  36., 72.,  36., 72.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      27., 54.,  27., 54.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  36., 72.,  36., 72.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  45., 90.,  45., 90.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      45., 90.,  45., 90.,  75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  27., 54.,  27., 54.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x10x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x8x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x10x8x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDHWCFINTERLEAVED3x10x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, VALIDFHWCSTRIDED3x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFSTRIDED3x10x10x4x16) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      16., 32.,  16., 32.,  32., 64.,  32., 64.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.,
      9.,  18.,  9.,  18.,  18., 36.,  18., 36.,  16., 32.,  16., 32.,
      32., 64.,  32., 64.,  16., 32.,  16., 32.,  32., 64.,  32., 64.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  12., 24.,  12., 24.,
      24., 48.,  24., 48.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      20., 40.,  20., 40.,  40., 80.,  40., 80.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  20., 40.,  20., 40.,
      40., 80.,  40., 80.,  20., 40.,  20., 40.,  40., 80.,  40., 80.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      25., 50.,  25., 50.,  50., 100., 50., 100., 25., 50.,  25., 50.,
      50., 100., 50., 100., 25., 50.,  25., 50.,  50., 100., 50., 100.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  12., 24.,  12., 24.,  24., 48.,  24., 48.,
      12., 24.,  12., 24.,  24., 48.,  24., 48.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  15., 30.,  15., 30.,
      30., 60.,  30., 60.,  15., 30.,  15., 30.,  30., 60.,  30., 60.,
      15., 30.,  15., 30.,  30., 60.,  30., 60.,  9.,  18.,  9.,  18.,
      18., 36.,  18., 36.,  9.,  18.,  9.,  18.,  18., 36.,  18., 36.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 16;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride2Groups4, SAMEHWCFINTERLEAVED3x10x10x8x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48., 96.,  48., 96.,  60., 120., 60., 120., 60., 120., 60., 120.,
      60., 120., 60., 120., 36., 72.,  36., 72.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  36., 72.,  36., 72.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      27., 54.,  27., 54.,  48., 96.,  48., 96.,  60., 120., 60., 120.,
      60., 120., 60., 120., 60., 120., 60., 120., 36., 72.,  36., 72.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      36., 72.,  36., 72.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  27., 54.,  27., 54.,  48., 96.,  48., 96.,
      60., 120., 60., 120., 60., 120., 60., 120., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  60., 120., 60., 120., 75., 150., 75., 150.,
      75., 150., 75., 150., 75., 150., 75., 150., 45., 90.,  45., 90.,
      60., 120., 60., 120., 75., 150., 75., 150., 75., 150., 75., 150.,
      75., 150., 75., 150., 45., 90.,  45., 90.,  60., 120., 60., 120.,
      75., 150., 75., 150., 75., 150., 75., 150., 75., 150., 75., 150.,
      45., 90.,  45., 90.,  36., 72.,  36., 72.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  27., 54.,  27., 54.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 8}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
