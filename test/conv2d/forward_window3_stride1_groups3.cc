/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow3Stride1Groups3 = GroupWindowStrideTest<Triple, 3, 1, 3>;
TYPED_TEST_SUITE(ForwardWindow3Stride1Groups3, GTestTypeTriples);
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x4x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {45., 36., 45., 45., 36., 45.,
                                         45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x4x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.};
  const std::array<int, 4> in_shape = {{1, 4, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {45., 36., 45., 45., 36., 45.,
                                         45., 36., 45., 45., 36., 45.,
                                         45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12.};
  const std::array<int, 4> in_shape = {{1, 4, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x4x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12.,
      15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24.,
      30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15.,
      12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30.,
      24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x4x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x5x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 5, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {45., 36., 45., 45., 36., 45.,
                                         45., 36., 45., 45., 36., 45.,
                                         45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12.};
  const std::array<int, 4> in_shape = {{1, 5, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x5x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13.,
      14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26.,
      28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14.,
      13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28.,
      26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14.,
      13., 26., 28., 26., 13., 14., 13., 26., 28., 26.};
  const std::array<int, 4> in_shape = {{1, 5, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 5, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x5x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 5, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x5x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 5, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x6x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12.,
      15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24.,
      30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15.,
      12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30.,
      24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x6x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28.};
  const std::array<int, 4> in_shape = {{1, 6, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 6, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED1x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED1x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x4x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10.,
      20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x4x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x4x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28.};
  const std::array<int, 4> in_shape = {{3, 4, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30.,
      24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 4, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x4x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30.,
      24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x4x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x4x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10.,
      20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10.,
      20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x4x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x5x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 5, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30.,
      24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 5, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x5x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30.,
      24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 5, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x5x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26.};
  const std::array<int, 4> in_shape = {{3, 5, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30.,
      24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30.,
      24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20.};
  const std::array<int, 4> in_shape = {{3, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 5, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x5x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30.,
      24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30.,
      24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30.,
      24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20.};
  const std::array<int, 4> in_shape = {{3, 5, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x5x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 5, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16.,
      20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x5x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12.};
  const std::array<int, 4> in_shape = {{3, 5, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x5x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24.,
      30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16.,
      20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20.,
      16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 5, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x6x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x4x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x6x4x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30.,
      30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x6x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13.,
      26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28.,
      14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13.,
      26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.,
      13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26., 14., 13., 14.,
      28., 26., 28., 14., 13., 14., 28., 26., 28., 13., 14., 13., 26., 28., 26.,
      13., 14., 13., 26., 28., 26., 14., 13., 14., 28., 26., 28., 14., 13., 14.,
      28., 26., 28., 13., 14., 13., 26., 28., 26., 13., 14., 13., 26., 28., 26.,
      14., 13., 14., 28., 26., 28., 14., 13., 14., 28., 26., 28.};
  const std::array<int, 4> in_shape = {{3, 6, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16.,
      20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30.,
      24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24.,
      30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x5x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 14., 28.,
      14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 14., 28., 14., 28., 13., 26., 13., 26.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12.};
  const std::array<int, 4> in_shape = {{3, 6, 5, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x6x5x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16.,
      20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36.,
      45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45.,
      36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24.,
      30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45.,
      36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36.,
      45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45.,
      36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 20., 16., 20.,
      30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 20., 16.,
      20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 20., 16., 20., 30.,
      24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24.,
      30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30.,
      24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24.,
      30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 5, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDHWCFINTERLEAVED3x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12.,
      24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30.,
      12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15.,
      30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12., 24., 30., 24.,
      12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30., 15., 12., 15.,
      30., 24., 30., 12., 15., 12., 24., 30., 24., 12., 15., 12., 24., 30., 24.,
      15., 12., 15., 30., 24., 30., 15., 12., 15., 30., 24., 30., 12., 15., 12.,
      24., 30., 24., 12., 15., 12., 24., 30., 24., 15., 12., 15., 30., 24., 30.,
      15., 12., 15., 30., 24., 30.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, VALIDFHWCSTRIDED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFSTRIDED3x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,
      16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16.,
      8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10.,
      20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20.,
      10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10.,
      20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16.,
      10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,
      12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 9.,  18., 9.,
      18., 9.,  18., 9.,  18., 9.,  18., 9.,  18., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12., 8.,  16., 8.,  16., 10., 20., 10., 20., 8.,
      16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10., 20.,
      8.,  16., 8.,  16., 10., 20., 10., 20., 8.,  16., 8.,  16., 10., 20., 10.,
      20., 8.,  16., 8.,  16., 10., 20., 10., 20., 6.,  12., 6.,  12., 6.,  12.,
      6.,  12., 6.,  12., 6.,  12.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow3Stride1Groups3, SAMEHWCFINTERLEAVED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 20., 16., 20., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20., 30., 24., 30., 45., 36., 45.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30., 30., 24., 30.,
      45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45., 30., 24., 30.,
      30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      30., 24., 30., 30., 24., 30., 45., 36., 45., 45., 36., 45., 45., 36., 45.,
      45., 36., 45., 30., 24., 30., 20., 16., 20., 30., 24., 30., 30., 24., 30.,
      30., 24., 30., 30., 24., 30., 20., 16., 20.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
