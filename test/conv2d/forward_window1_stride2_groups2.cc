/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow1Stride2Groups2 = GroupWindowStrideTest<Triple, 1, 2, 2>;
TYPED_TEST_SUITE(ForwardWindow1Stride2Groups2, GTestTypeTriples);
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x3x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x3x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x3x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x3x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 3, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x4x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x4x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x4x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x4x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x6x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x6x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED1x6x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6., 3.,
                                         6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6., 3.,
                                         6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED1x6x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6., 3.,
                                         6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x3x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x3x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x3x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x3x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x3x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x3x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 3, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x3x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 3, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x4x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x4x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x4x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x4x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.,
                                         3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x4x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x4x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x4x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 4, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x6x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x3x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 3, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x6x3x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 3, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x6x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x4x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x6x4x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 4, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDHWCFINTERLEAVED3x6x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.,
      1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2.,
      2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4., 1., 2., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, VALIDFHWCSTRIDED3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFSTRIDED3x6x6x2x8) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.,
      1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2.,
      1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2.,
      2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4.,
      2., 4., 1., 2., 1., 2., 2., 4., 2., 4., 1., 2., 1., 2., 2., 4., 2., 4.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int features = 8;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow1Stride2Groups2, SAMEHWCFINTERLEAVED3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.,
      3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6., 3., 6.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
