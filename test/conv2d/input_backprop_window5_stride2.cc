/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_tuple4.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;
using DataFormats = sycldnn::types::DataFormatTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using DataFormatBackendTypePairs =
    sycldnn::types::CartesianProduct<BackendTypePairs, DataFormats>::type;
using TestTuple4 =
    sycldnn::types::NestedPairsToTuple4<DataFormatBackendTypePairs>::type;

using GTestTypeTuple4s = sycldnn::types::ToGTestTypes<TestTuple4>::type;

template <typename Tuple>
using InputBackpropWindow5Stride2 = WindowStrideTest<Tuple, 5, 2>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride2, GTestTypeTuple4s);
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,  70.,  124.,  102., 172.,  134., 156.,  126., 140., 244.,
      192., 322., 244.,  266., 233.,  266., 450.,  344., 567., 422.,
      467., 318., 348.,  556., 400.,  634., 452.,  490., 521., 578.,
      918., 656., 1035., 734., 803.,  510., 556.,  868., 608., 946.,
      660., 714., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,  5.,  8.,  11.,  8.,   10.,  6.,   7.,   20., 23., 26.,  18.,
      20.,  14., 18., 48., 58.,  68.,  44.,  50.,  34.,  38., 98., 108., 118.,
      74.,  80., 54., 58., 148., 158., 168., 104., 110., 48., 51., 118., 125.,
      132., 76., 80., 63., 66.,  153., 160., 167., 96.,  100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,  472.,  854.,  720.,  1226., 968.,  1136.,  888.,  992.,  1754.,
      1400., 2366., 1808., 1976., 1660., 1912., 3267.,  2524., 4185., 3136.,
      3484., 2392., 2624., 4202., 3032., 4814., 3440.,  3736., 3916., 4360.,
      6939., 4972., 7857., 5584., 6124., 3896., 4256.,  6650., 4664., 7262.,
      5072., 5496., 5696., 6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  6632.,  7432.,
      13252., 10664., 18100., 13896., 15208., 12476., 14444., 24822., 19292.,
      32094., 24140., 26876., 18536., 20360., 32644., 23592., 37492., 26824.,
      29160., 30332., 33836., 53910., 38684., 61182., 43532., 47804., 30440.,
      33288., 52036., 36520., 56884., 39752., 43112., 44680., 47528., 74356.,
      52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      98.,   112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,
      246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,
      366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,
      499.,  532.,  846.,  900.,  649.,  688.,  1071., 1134., 799.,  844.,
      889.,  934.,  606.,  636.,  666.,  696.,  1064., 1112., 766.,  800.,
      1214., 1268., 866.,  904.,  942.,  980.,  985.,  1042., 1099., 1156.,
      1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,
      974.,  1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892.,
      1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456.,
      1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,
      16.,  18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,
      49.,  52.,  34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,
      96.,  106., 116., 126., 136., 82.,  88.,  94.,  100., 64.,  68.,
      72.,  76.,  186., 196., 206., 216., 226., 236., 142., 148., 154.,
      160., 104., 108., 112., 116., 286., 296., 306., 316., 326., 336.,
      202., 208., 214., 220., 93.,  96.,  99.,  102., 229., 236., 243.,
      250., 257., 264., 148., 152., 156., 160., 123., 126., 129., 132.,
      299., 306., 313., 320., 327., 334., 188., 192., 196., 200.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  1696.,  1800.,  1904.,  2008.,
      3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,
      3992.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,
      8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  4608.,  4840.,  5072.,
      5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,
      7248.,  7544.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,
      10064., 15129., 15903., 10760., 11300., 11840., 12380., 7520.,  7880.,
      8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674., 9824.,
      10248., 10672., 11096., 11120., 11480., 11840., 12200., 18514., 19078.,
      12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  65.,   71.,   77.,   83.,   240.,  260.,
      280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,
      198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,
      666.,  710.,  422.,  450.,  478.,  506.,  1288., 1360., 1432., 1504.,
      1576., 1648., 1018., 1062., 1106., 1150., 702.,  730.,  758.,  786.,
      2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,
      677.,  699.,  721.,  743.,  1688., 1740., 1792., 1844., 1896., 1948.,
      1103., 1133., 1163., 1193., 897.,  919.,  941.,  963.,  2208., 2260.,
      2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4744.,   5544.,   6344.,   7144.,   11684.,  13076.,  10088.,  11144.,
      17300.,  19076.,  13832.,  15144.,  16456.,  17768.,  12744.,  13544.,
      14344.,  15144.,  25604.,  26996.,  20648.,  21704.,  35060.,  36836.,
      26952.,  28264.,  29576.,  30888.,  23692.,  25660.,  27628.,  29596.,
      47574.,  50814.,  37084.,  39436.,  61758.,  65574.,  46540.,  49276.,
      52012.,  54748.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      58444.,  61948.,  65452.,  68956.,  104310., 109854., 74908.,  78796.,
      118494., 124614., 84364.,  88636.,  92908.,  97180.,  59080.,  61928.,
      64776.,  67624.,  101252., 105716., 71080.,  74184.,  110708., 115556.,
      77384.,  80744.,  84104.,  87464.,  87560.,  90408.,  93256.,  96104.,
      145892., 150356., 102120., 105224., 159188., 164036., 110984., 114344.,
      117704., 121064.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  430.,   470.,   510.,   550.,
      1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,
      2046.,  940.,   1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,
      6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,
      3644.,  9512.,  10056., 10600., 11144., 11688., 12232., 7676.,  8012.,
      8348.,  8684.,  5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040.,
      16584., 17128., 17672., 11036., 11372., 11708., 12044., 5150.,  5318.,
      5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932., 8502.,
      8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334.,  16932., 17332.,
      17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,
      472.,  496.,  354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,
      470.,  492.,  514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,
      490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,
      714.,  732.,  750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,
      954.,  976.,  998.,  1020., 1042., 1064., 833.,  866.,  899.,  932.,
      965.,  998.,  1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298.,
      1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688.,
      1733., 1778., 1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332.,
      1362., 1392., 2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600.,
      2374., 2428., 2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884.,
      1922., 1960., 1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312.,
      3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942.,
      4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212.,
      1902., 1948., 1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328.,
      3400., 3472., 2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784.,
      2478., 2532., 2586., 2640., 2694., 2748., 2802., 2856., 2822., 2868.,
      2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912.,
      3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612.,
      3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   11.,  14.,  17.,  20.,
      23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,
      34.,  36.,  38.,  40.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,
      71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98.,  101., 104.,
      66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  44.,  48.,  52.,  56.,
      60.,  64.,  68.,  72.,  162., 172., 182., 192., 202., 212., 222., 232.,
      242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200.,
      124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392.,
      402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296.,
      302., 308., 314., 320., 204., 208., 212., 216., 220., 224., 228., 232.,
      562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672.,
      398., 404., 410., 416., 422., 428., 434., 440., 183., 186., 189., 192.,
      195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500.,
      507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320.,
      243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612.,
      619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384.,
      388., 392., 396., 400.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,
      3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,
      4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,
      4664.,  3312.,  3416.,  3520.,  3624.,  3728.,  3832.,  3936.,  4040.,
      6602.,  6782.,  6962.,  7142.,  5288.,  5424.,  5560.,  5696.,  8942.,
      9170.,  9398.,  9626.,  6848.,  7016.,  7184.,  7352.,  7520.,  7688.,
      7856.,  8024.,  6064.,  6316.,  6568.,  6820.,  7072.,  7324.,  7576.,
      7828.,  12123., 12537., 12951., 13365., 9412.,  9712.,  10012., 10312.,
      15633., 16119., 16605., 17091., 11752., 12100., 12448., 12796., 13144.,
      13492., 13840., 14188., 9040.,  9272.,  9504.,  9736.,  9968.,  10200.,
      10432., 10664., 15962., 16334., 16706., 17078., 11528., 11792., 12056.,
      12320., 18302., 18722., 19142., 19562., 13088., 13384., 13680., 13976.,
      14272., 14568., 14864., 15160., 14656., 15100., 15544., 15988., 16432.,
      16876., 17320., 17764., 26163., 26865., 27567., 28269., 18772., 19264.,
      19756., 20248., 29673., 30447., 31221., 31995., 21112., 21652., 22192.,
      22732., 23272., 23812., 24352., 24892., 14768., 15128., 15488., 15848.,
      16208., 16568., 16928., 17288., 25322., 25886., 26450., 27014., 17768.,
      18160., 18552., 18944., 27662., 28274., 28886., 29498., 19328., 19752.,
      20176., 20600., 21024., 21448., 21872., 22296., 21968., 22328., 22688.,
      23048., 23408., 23768., 24128., 24488., 36602., 37166., 37730., 38294.,
      25608., 26000., 26392., 26784., 39902., 40514., 41126., 41738., 27808.,
      28232., 28656., 29080., 29504., 29928., 30352., 30776.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,
      137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,
      544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,
      487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,
      374.,  402.,  430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440.,
      1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254.,
      1298., 1342., 1386., 1430., 822.,  850.,  878.,  906.,  934.,  962.,
      990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024.,
      3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222.,
      2266., 2310., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578.,
      3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608.,
      4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190.,
      1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388.,
      3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908.,
      2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 1777., 1799.,
      1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532.,
      4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813.,
      2843., 2873., 2903., 2933., 2963., 2993.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8968.,   9768.,   10568.,  11368.,  12168.,  12968.,  13768.,  14568.,
      22468.,  23860.,  25252.,  26644.,  19496.,  20552.,  21608.,  22664.,
      33460.,  35236.,  37012.,  38788.,  26824.,  28136.,  29448.,  30760.,
      32072.,  33384.,  34696.,  36008.,  24968.,  25768.,  26568.,  27368.,
      28168.,  28968.,  29768.,  30568.,  50308.,  51700.,  53092.,  54484.,
      40616.,  41672.,  42728.,  43784.,  68980.,  70756.,  72532.,  74308.,
      53064.,  54376.,  55688.,  57000.,  58312.,  59624.,  60936.,  62248.,
      46124.,  48092.,  50060.,  52028.,  53996.,  55964.,  57932.,  59900.,
      93078.,  96318.,  99558.,  102798., 72668.,  75020.,  77372.,  79724.,
      121086., 124902., 128718., 132534., 91340.,  94076.,  96812.,  99548.,
      102284., 105020., 107756., 110492., 70664.,  72488.,  74312.,  76136.,
      77960.,  79784.,  81608.,  83432.,  124996., 127924., 130852., 133780.,
      90408.,  92488.,  94568.,  96648.,  143668., 146980., 150292., 153604.,
      102856., 105192., 107528., 109864., 112200., 114536., 116872., 119208.,
      114668., 118172., 121676., 125180., 128684., 132188., 135692., 139196.,
      205110., 210654., 216198., 221742., 147356., 151244., 155132., 159020.,
      233118., 239238., 245358., 251478., 166028., 170300., 174572., 178844.,
      183116., 187388., 191660., 195932., 116360., 119208., 122056., 124904.,
      127752., 130600., 133448., 136296., 199684., 204148., 208612., 213076.,
      140200., 143304., 146408., 149512., 218356., 223204., 228052., 232900.,
      152648., 156008., 159368., 162728., 166088., 169448., 172808., 176168.,
      173320., 176168., 179016., 181864., 184712., 187560., 190408., 193256.,
      288964., 293428., 297892., 302356., 202280., 205384., 208488., 211592.,
      315316., 320164., 325012., 329860., 219848., 223208., 226568., 229928.,
      233288., 236648., 240008., 243368.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  830.,   870.,   910.,   950.,   990.,   1030.,  1070.,  1110.,
      3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,
      4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,
      4022.,  4126.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,
      3196.,  7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592.,
      12136., 12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,
      10092., 10428., 10764., 5900.,  6108.,  6316.,  6524.,  6732.,  6940.,
      7148.,  7356.,  18664., 19208., 19752., 20296., 20840., 21384., 21928.,
      22472., 23016., 23560., 24104., 24648., 15132., 15468., 15804., 16140.,
      16476., 16812., 17148., 17484., 10060., 10268., 10476., 10684., 10892.,
      11100., 11308., 11516., 29544., 30088., 30632., 31176., 31720., 32264.,
      32808., 33352., 33896., 34440., 34984., 35528., 21852., 22188., 22524.,
      22860., 23196., 23532., 23868., 24204., 10190., 10358., 10526., 10694.,
      10862., 11030., 11198., 11366., 25604., 26004., 26404., 26804., 27204.,
      27604., 28004., 28404., 28804., 29204., 29604., 30004., 16854., 17086.,
      17318., 17550., 17782., 18014., 18246., 18478., 13550., 13718., 13886.,
      14054., 14222., 14390., 14558., 14726., 33604., 34004., 34404., 34804.,
      35204., 35604., 36004., 36404., 36804., 37204., 37604., 38004., 21494.,
      21726., 21958., 22190., 22422., 22654., 22886., 23118.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,  56.,   70.,  124.,  102., 172.,  134., 156., 52.,  126., 140., 244.,
      192., 322.,  244., 266.,  100., 233.,  266., 450., 344., 567., 422., 467.,
      148., 318.,  348., 556.,  400., 634.,  452., 490., 244., 521., 578., 918.,
      656., 1035., 734., 803.,  244., 510.,  556., 868., 608., 946., 660., 714.,
      354., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,  10.,  0.,   6.,   7.,  20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18., 48.,  58.,  68.,  44., 50.,  0.,
      34.,  38.,  98.,  108., 118., 74., 80.,  0.,   54.,  58., 148., 158.,
      168., 104., 110., 0.,   48.,  51., 118., 125., 132., 76., 80.,  0.,
      63.,  66.,  153., 160., 167., 96., 100., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,  368.,  472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,
      992.,  1754., 1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267.,
      2524., 4185., 3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814.,
      3440., 3736., 1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124.,
      1862., 3896., 4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   0.,   35.,  41.,
      128.,  148.,  168.,  123., 137.,  0.,    82.,   110., 312., 384.,
      456.,  306.,  350.,  0.,   222.,  250.,  672.,  744., 816., 526.,
      570.,  0.,    362.,  390., 1032., 1104., 1176., 746., 790., 0.,
      347.,  369.,  864.,  916., 968.,  563.,  593.,  0.,   457., 479.,
      1124., 1176., 1228., 713., 743.,  0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      2636.,  6632.,  7432.,  13252., 10664., 18100., 13896., 15208.,
      5218.,  12476., 14444., 24822., 19292., 32094., 24140., 26876.,
      8588.,  18536., 20360., 32644., 23592., 37492., 26824., 29160.,
      14146., 30332., 33836., 53910., 38684., 61182., 43532., 47804.,
      14540., 30440., 33288., 52036., 36520., 56884., 39752., 43112.,
      21340., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38.,   44.,   98.,   112.,  126.,  140.,  224.,  248.,  186.,  204.,
      314.,  344.,  246.,  268.,  290.,  312.,  98.,   104.,  238.,  252.,
      266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,
      510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,
      649.,  688.,  1071., 1134., 799.,  844.,  889.,  934.,  282.,  296.,
      606.,  636.,  666.,  696.,  1064., 1112., 766.,  800.,  1214., 1268.,
      866.,  904.,  942.,  980.,  461.,  488.,  985.,  1042., 1099., 1156.,
      1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,
      466.,  488.,  974.,  1020., 1066., 1112., 1664., 1736., 1166., 1216.,
      1814., 1892., 1266., 1320., 1374., 1428., 686.,  708.,  1434., 1480.,
      1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860.,
      1914., 1968.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,  16.,
      18.,  20.,  0.,   0.,   11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,
      49.,  52.,  34.,  36.,  38.,  40.,  0.,   0.,   24.,  28.,  32.,  36.,
      86.,  96.,  106., 116., 126., 136., 82.,  88.,  94.,  100., 0.,   0.,
      64.,  68.,  72.,  76.,  186., 196., 206., 216., 226., 236., 142., 148.,
      154., 160., 0.,   0.,   104., 108., 112., 116., 286., 296., 306., 316.,
      326., 336., 202., 208., 214., 220., 0.,   0.,   93.,  96.,  99.,  102.,
      229., 236., 243., 250., 257., 264., 148., 152., 156., 160., 0.,   0.,
      123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192.,
      196., 200., 0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242.,   286.,   656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,
      1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,
      1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,
      4786.,  3488.,  3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,
      3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,
      6356.,  6704.,  7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,
      8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,
      7544.,  3499.,  3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049.,
      9572.,  10064., 15129., 15903., 10760., 11300., 11840., 12380., 3594.,
      3766.,  7520.,  7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,
      14062., 14674., 9824.,  10248., 10672., 11096., 5314.,  5486.,  11120.,
      11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794.,
      14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  0.,    0.,    65.,   71.,   77.,   83.,
      240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,
      0.,    0.,    142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,
      856.,  928.,  578.,  622.,  666.,  710.,  0.,    0.,    422.,  450.,
      478.,  506.,  1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062.,
      1106., 1150., 0.,    0.,    702.,  730.,  758.,  786.,  2008., 2080.,
      2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590., 0.,    0.,
      677.,  699.,  721.,  743.,  1688., 1740., 1792., 1844., 1896., 1948.,
      1103., 1133., 1163., 1193., 0.,    0.,    897.,  919.,  941.,  963.,
      2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      41820.,  43180.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  0.,     0.,     430.,   470.,
      510.,   550.,   1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,
      1838.,  1942.,  2046.,  0.,     0.,     940.,   1148.,  1356.,  1564.,
      4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,
      5324.,  0.,     0.,     3020.,  3228.,  3436.,  3644.,  9512.,  10056.,
      10600., 11144., 11688., 12232., 7676.,  8012.,  8348.,  8684.,  0.,
      0.,     5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040., 16584.,
      17128., 17672., 11036., 11372., 11708., 12044., 0.,     0.,     5150.,
      5318.,  5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932.,
      8502.,  8734.,  8966.,  9198.,  0.,     0.,     6830.,  6998.,  7166.,
      7334.,  16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054.,
      11286., 11518., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,   76.,   82.,   88.,   182.,  196.,  210.,  224.,  238.,  252.,
      266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,  390.,  408.,
      598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,  558.,  580.,
      602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,  490.,  504.,
      518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,
      750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,  954.,  976.,
      998.,  1020., 1042., 1064., 355.,  370.,  385.,  400.,  833.,  866.,
      899.,  932.,  965.,  998.,  1031., 1064., 1638., 1692., 1746., 1800.,
      1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268., 1553., 1598.,
      1643., 1688., 1733., 1778., 1823., 1868., 550.,  564.,  578.,  592.,
      1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392., 2080., 2128.,
      2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428., 2482., 2536.,
      1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960., 895.,  922.,
      949.,  976.,  1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312.,
      3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942.,
      4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212.,
      910.,  932.,  954.,  976.,  1902., 1948., 1994., 2040., 2086., 2132.,
      2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332., 2382., 2432.,
      3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640., 2694., 2748.,
      2802., 2856., 1350., 1372., 1394., 1416., 2822., 2868., 2914., 2960.,
      3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332.,
      3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720.,
      3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   11.,  14.,  17.,  20.,
      23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,
      34.,  36.,  38.,  40.,  0.,   0.,   0.,   0.,   21.,  22.,  23.,  24.,
      25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,
      95.,  98.,  101., 104., 66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,
      0.,   0.,   0.,   0.,   44.,  48.,  52.,  56.,  60.,  64.,  68.,  72.,
      162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272.,
      158., 164., 170., 176., 182., 188., 194., 200., 0.,   0.,   0.,   0.,
      124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392.,
      402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296.,
      302., 308., 314., 320., 0.,   0.,   0.,   0.,   204., 208., 212., 216.,
      220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632.,
      642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440.,
      0.,   0.,   0.,   0.,   183., 186., 189., 192., 195., 198., 201., 204.,
      451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528.,
      292., 296., 300., 304., 308., 312., 316., 320., 0.,   0.,   0.,   0.,
      243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612.,
      619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384.,
      388., 392., 396., 400., 0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450.,   494.,   538.,   582.,   1232.,  1336.,  1440.,  1544.,  1648.,
      1752.,  1856.,  1960.,  3002.,  3182.,  3362.,  3542.,  2568.,  2704.,
      2840.,  2976.,  4382.,  4610.,  4838.,  5066.,  3488.,  3656.,  3824.,
      3992.,  4160.,  4328.,  4496.,  4664.,  1330.,  1374.,  1418.,  1462.,
      3312.,  3416.,  3520.,  3624.,  3728.,  3832.,  3936.,  4040.,  6602.,
      6782.,  6962.,  7142.,  5288.,  5424.,  5560.,  5696.,  8942.,  9170.,
      9398.,  9626.,  6848.,  7016.,  7184.,  7352.,  7520.,  7688.,  7856.,
      8024.,  2543.,  2657.,  2771.,  2885.,  6064.,  6316.,  6568.,  6820.,
      7072.,  7324.,  7576.,  7828.,  12123., 12537., 12951., 13365., 9412.,
      9712.,  10012., 10312., 15633., 16119., 16605., 17091., 11752., 12100.,
      12448., 12796., 13144., 13492., 13840., 14188., 4194.,  4302.,  4410.,
      4518.,  9040.,  9272.,  9504.,  9736.,  9968.,  10200., 10432., 10664.,
      15962., 16334., 16706., 17078., 11528., 11792., 12056., 12320., 18302.,
      18722., 19142., 19562., 13088., 13384., 13680., 13976., 14272., 14568.,
      14864., 15160., 6839.,  7049.,  7259.,  7469.,  14656., 15100., 15544.,
      15988., 16432., 16876., 17320., 17764., 26163., 26865., 27567., 28269.,
      18772., 19264., 19756., 20248., 29673., 30447., 31221., 31995., 21112.,
      21652., 22192., 22732., 23272., 23812., 24352., 24892., 7058.,  7230.,
      7402.,  7574.,  14768., 15128., 15488., 15848., 16208., 16568., 16928.,
      17288., 25322., 25886., 26450., 27014., 17768., 18160., 18552., 18944.,
      27662., 28274., 28886., 29498., 19328., 19752., 20176., 20600., 21024.,
      21448., 21872., 22296., 10498., 10670., 10842., 11014., 21968., 22328.,
      22688., 23048., 23408., 23768., 24128., 24488., 36602., 37166., 37730.,
      38294., 25608., 26000., 26392., 26784., 39902., 40514., 41126., 41738.,
      27808., 28232., 28656., 29080., 29504., 29928., 30352., 30776.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  0.,    0.,
      0.,    0.,    125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,
      464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,
      664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,
      0.,    0.,    0.,    0.,    262.,  290.,  318.,  346.,  374.,  402.,
      430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584.,
      1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342.,
      1386., 1430., 0.,    0.,    0.,    0.,    822.,  850.,  878.,  906.,
      934.,  962.,  990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880.,
      2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134.,
      2178., 2222., 2266., 2310., 0.,    0.,    0.,    0.,    1382., 1410.,
      1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176.,
      4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926.,
      2970., 3014., 3058., 3102., 3146., 3190., 0.,    0.,    0.,    0.,
      1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388.,
      3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908.,
      2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 0.,    0.,
      0.,    0.,    1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931.,
      4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844.,
      4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3164.,   3500.,   3836.,   4172.,   8968.,   9768.,   10568.,  11368.,
      12168.,  12968.,  13768.,  14568.,  22468.,  23860.,  25252.,  26644.,
      19496.,  20552.,  21608.,  22664.,  33460.,  35236.,  37012.,  38788.,
      26824.,  28136.,  29448.,  30760.,  32072.,  33384.,  34696.,  36008.,
      9884.,   10220.,  10556.,  10892.,  24968.,  25768.,  26568.,  27368.,
      28168.,  28968.,  29768.,  30568.,  50308.,  51700.,  53092.,  54484.,
      40616.,  41672.,  42728.,  43784.,  68980.,  70756.,  72532.,  74308.,
      53064.,  54376.,  55688.,  57000.,  58312.,  59624.,  60936.,  62248.,
      19162.,  20050.,  20938.,  21826.,  46124.,  48092.,  50060.,  52028.,
      53996.,  55964.,  57932.,  59900.,  93078.,  96318.,  99558.,  102798.,
      72668.,  75020.,  77372.,  79724.,  121086., 124902., 128718., 132534.,
      91340.,  94076.,  96812.,  99548.,  102284., 105020., 107756., 110492.,
      32732.,  33580.,  34428.,  35276.,  70664.,  72488.,  74312.,  76136.,
      77960.,  79784.,  81608.,  83432.,  124996., 127924., 130852., 133780.,
      90408.,  92488.,  94568.,  96648.,  143668., 146980., 150292., 153604.,
      102856., 105192., 107528., 109864., 112200., 114536., 116872., 119208.,
      53434.,  55090.,  56746.,  58402.,  114668., 118172., 121676., 125180.,
      128684., 132188., 135692., 139196., 205110., 210654., 216198., 221742.,
      147356., 151244., 155132., 159020., 233118., 239238., 245358., 251478.,
      166028., 170300., 174572., 178844., 183116., 187388., 191660., 195932.,
      55580.,  56940.,  58300.,  59660.,  116360., 119208., 122056., 124904.,
      127752., 130600., 133448., 136296., 199684., 204148., 208612., 213076.,
      140200., 143304., 146408., 149512., 218356., 223204., 228052., 232900.,
      152648., 156008., 159368., 162728., 166088., 169448., 172808., 176168.,
      82780.,  84140.,  85500.,  86860.,  173320., 176168., 179016., 181864.,
      184712., 187560., 190408., 193256., 288964., 293428., 297892., 302356.,
      202280., 205384., 208488., 211592., 315316., 320164., 325012., 329860.,
      219848., 223208., 226568., 229928., 233288., 236648., 240008., 243368.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  0.,     0.,     0.,     0.,     830.,   870.,   910.,   950.,
      990.,   1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,
      4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,
      3606.,  3710.,  3814.,  3918.,  4022.,  4126.,  0.,     0.,     0.,
      0.,     1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,
      7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592., 12136.,
      12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,  10092.,
      10428., 10764., 0.,     0.,     0.,     0.,     5900.,  6108.,  6316.,
      6524.,  6732.,  6940.,  7148.,  7356.,  18664., 19208., 19752., 20296.,
      20840., 21384., 21928., 22472., 23016., 23560., 24104., 24648., 15132.,
      15468., 15804., 16140., 16476., 16812., 17148., 17484., 0.,     0.,
      0.,     0.,     10060., 10268., 10476., 10684., 10892., 11100., 11308.,
      11516., 29544., 30088., 30632., 31176., 31720., 32264., 32808., 33352.,
      33896., 34440., 34984., 35528., 21852., 22188., 22524., 22860., 23196.,
      23532., 23868., 24204., 0.,     0.,     0.,     0.,     10190., 10358.,
      10526., 10694., 10862., 11030., 11198., 11366., 25604., 26004., 26404.,
      26804., 27204., 27604., 28004., 28404., 28804., 29204., 29604., 30004.,
      16854., 17086., 17318., 17550., 17782., 18014., 18246., 18478., 0.,
      0.,     0.,     0.,     13550., 13718., 13886., 14054., 14222., 14390.,
      14558., 14726., 33604., 34004., 34404., 34804., 35204., 35604., 36004.,
      36404., 36804., 37204., 37604., 38004., 21494., 21726., 21958., 22190.,
      22422., 22654., 22886., 23118., 0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,  2840.,  3768.,  6796.,  5720.,   9724.,  7672.,  12652., 9624.,
      11320., 3060.,  7480.,  8408.,  14716.,  11640., 19564., 14872., 24412.,
      18104., 19800., 6170.,  14380., 16732.,  28254., 21580., 35526., 26428.,
      42798., 31276., 34780., 10500., 22360.,  24568., 38956., 27800., 43804.,
      31032., 48652., 34264., 37240., 17330.,  36700., 40972., 64614., 45820.,
      71886., 50668., 79158., 55516., 60940.,  17940., 37240., 40728., 63196.,
      43960., 68044., 47192., 72892., 50424.,  54680., 26340., 54680., 58168.,
      90316., 62680., 97084., 67192., 103852., 71704., 75960.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   48.,   104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,
      329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,
      111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,
      659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,
      214.,  232.,  491.,  530.,  569.,  608.,  951.,  1014., 719.,  764.,
      1176., 1248., 869.,  920.,  1401., 1482., 1019., 1076., 1133., 1190.,
      341.,  358.,  724.,  760.,  796.,  832.,  1259., 1316., 896.,  936.,
      1409., 1472., 996.,  1040., 1559., 1628., 1096., 1144., 1192., 1240.,
      559.,  592.,  1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544.,
      2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,
      571.,  598.,  1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456.,
      2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,
      841.,  868.,  1744., 1800., 1856., 1912., 2879., 2966., 1996., 2056.,
      3089., 3182., 2136., 2200., 3299., 3398., 2276., 2344., 2412., 2480.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  22.,  28.,  23.,  28.,
      33.,  38.,  21.,  24.,  27.,  30.,  0.,   0.,   11.,  12.,  13.,  14.,
      37.,  40.,  43.,  46.,  82.,  88.,  73.,  78.,  83.,  88.,  51.,  54.,
      57.,  60.,  0.,   0.,   25.,  30.,  35.,  40.,  92.,  104., 116., 128.,
      209., 230., 176., 192., 208., 224., 123., 132., 141., 150., 0.,   0.,
      75.,  80.,  85.,  90.,  212., 224., 236., 248., 419., 440., 336., 352.,
      368., 384., 213., 222., 231., 240., 0.,   0.,   125., 130., 135., 140.,
      332., 344., 356., 368., 629., 650., 496., 512., 528., 544., 303., 312.,
      321., 330., 0.,   0.,   124., 128., 132., 136., 295., 304., 313., 322.,
      517., 532., 383., 394., 405., 416., 222., 228., 234., 240., 0.,   0.,
      164., 168., 172., 176., 385., 394., 403., 412., 667., 682., 493., 504.,
      515., 526., 282., 288., 294., 300., 0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      264.,   316.,   700.,   820.,   940.,   1060.,  1684.,  1888.,  1412.,
      1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,
      2788.,  3004.,  784.,   836.,   1900.,  2020.,  2140.,  2260.,  3724.,
      3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,  6100.,  6400.,
      4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,  3880.,  4180.,
      4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,  6556.,  6952.,
      10605., 11235., 7744.,  8188.,  8632.,  9076.,  2604.,  2736.,  5540.,
      5820.,  6100.,  6380.,  9664.,  10108., 6892.,  7204.,  10852., 11344.,
      7684.,  8028.,  12040., 12580., 8476.,  8852.,  9228.,  9604.,  4271.,
      4529.,  9040.,  9580.,  10120., 10660., 15951., 16797., 11308., 11896.,
      17733., 18651., 12496., 13132., 19515., 20505., 13684., 14368., 15052.,
      15736., 4424.,  4636.,  9180.,  9620.,  10060., 10500., 15604., 16288.,
      10852., 11324., 16792., 17524., 11644., 12148., 17980., 18760., 12436.,
      12972., 13508., 14044., 6544.,  6756.,  13580., 14020., 14460., 14900.,
      22444., 23128., 15572., 16044., 24112., 24844., 16684., 17188., 25780.,
      26560., 17796., 18332., 18868., 19404.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  137.,  179.,
      156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,  0.,    0.,
      65.,   71.,   77.,   83.,   240.,  260.,  280.,  300.,  557.,  599.,
      516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,  0.,    0.,
      148.,  184.,  220.,  256.,  612.,  700.,  788.,  876.,  1456., 1612.,
      1260., 1380., 1500., 1620., 900.,  968.,  1036., 1104., 0.,    0.,
      508.,  544.,  580.,  616.,  1492., 1580., 1668., 1756., 3016., 3172.,
      2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784., 0.,    0.,
      868.,  904.,  940.,  976.,  2372., 2460., 2548., 2636., 4576., 4732.,
      3660., 3780., 3900., 4020., 2260., 2328., 2396., 2464., 0.,    0.,
      923.,  953.,  983.,  1013., 2212., 2280., 2348., 2416., 3899., 4013.,
      2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829., 0.,    0.,
      1223., 1253., 1283., 1313., 2892., 2960., 3028., 3096., 5039., 5153.,
      3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289., 0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1860.,   2260.,   5080.,   6008.,   6936.,   7864.,   12572.,  14156.,
      10680.,  11864.,  18188.,  20156.,  14424.,  15864.,  23804.,  26156.,
      18168.,  19864.,  21560.,  23256.,  5860.,   6260.,   14360.,  15288.,
      16216.,  17144.,  28412.,  29996.,  22520.,  23704.,  37868.,  39836.,
      28824.,  30264.,  47324.,  49676.,  35128.,  36824.,  38520.,  40216.,
      11650.,  12730.,  27260.,  29612.,  31964.,  34316.,  54078.,  57894.,
      41420.,  44156.,  68262.,  72654.,  50876.,  53996.,  82446.,  87414.,
      60332.,  63836.,  67340.,  70844.,  20340.,  21380.,  43320.,  45528.,
      47736.,  49944.,  75692.,  79196.,  54040.,  56504.,  85148.,  89036.,
      60344.,  63064.,  94604.,  98876.,  66648.,  69624.,  72600.,  75576.,
      33370.,  35410.,  70700.,  74972.,  79244.,  83516.,  124998., 131694.,
      88700.,  93356.,  139182., 146454., 98156.,  103196., 153366., 161214.,
      107612., 113036., 118460., 123884., 34820.,  36500.,  72280.,  75768.,
      79256.,  82744.,  122972., 128396., 85560.,  89304.,  132428., 138236.,
      91864.,  95864.,  141884., 148076., 98168.,  102424., 106680., 110936.,
      51620.,  53300.,  107160., 110648., 114136., 117624., 177212., 182636.,
      123000., 126744., 190508., 196316., 131864., 135864., 203804., 209996.,
      140728., 144984., 149240., 153496.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   946.,
      1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,
      0.,     0.,     430.,   470.,   510.,   550.,   1700.,  1844.,  1988.,
      2132.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,
      3134.,  3302.,  0.,     0.,     980.,   1252.,  1524.,  1796.,  4408.,
      5080.,  5752.,  6424.,  10796., 11996., 9496.,  10424., 11352., 12280.,
      6868.,  7396.,  7924.,  8452.,  0.,     0.,     3700.,  3972.,  4244.,
      4516.,  11128., 11800., 12472., 13144., 22796., 23996., 18776., 19704.,
      20632., 21560., 12148., 12676., 13204., 13732., 0.,     0.,     6420.,
      6692.,  6964.,  7236.,  17848., 18520., 19192., 19864., 34796., 35996.,
      28056., 28984., 29912., 30840., 17428., 17956., 18484., 19012., 0.,
      0.,     7110.,  7342.,  7574.,  7806.,  17108., 17636., 18164., 18692.,
      30250., 31138., 22596., 23252., 23908., 24564., 13190., 13550., 13910.,
      14270., 0.,     0.,     9430.,  9662.,  9894.,  10126., 22388., 22916.,
      23444., 23972., 39130., 40018., 29156., 29812., 30468., 31124., 16790.,
      17150., 17510., 17870., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75.,   82.,   89.,   96.,   192.,  208.,  224.,  240.,  256.,  272.,
      288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,
      625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,
      877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,
      215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,
      608.,  624.,  991.,  1018., 1045., 1072., 772.,  792.,  812.,  832.,
      1285., 1318., 1351., 1384., 968.,  992.,  1016., 1040., 1579., 1618.,
      1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,
      410.,  428.,  446.,  464.,  943.,  982.,  1021., 1060., 1099., 1138.,
      1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528.,
      2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802.,
      2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,
      665.,  682.,  699.,  716.,  1412., 1448., 1484., 1520., 1556., 1592.,
      1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872.,
      2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118.,
      3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480.,
      1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638.,
      2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088.,
      4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052.,
      5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060.,
      1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592.,
      2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912.,
      4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618.,
      4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600.,
      1655., 1682., 1709., 1736., 3432., 3488., 3544., 3600., 3656., 3712.,
      3768., 3824., 5671., 5758., 5845., 5932., 3932., 3992., 4052., 4112.,
      6085., 6178., 6271., 6364., 4208., 4272., 4336., 4400., 6499., 6598.,
      6697., 6796., 4484., 4552., 4620., 4688., 4756., 4824., 4892., 4960.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,  20.,  23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,
      41.,  46.,  51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,
      45.,  48.,  51.,   54.,   57.,   60.,   0.,    0.,    0.,    0.,
      21.,  22.,  23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,
      77.,  80.,  83.,   86.,   89.,   92.,   158.,  164.,  170.,  176.,
      141., 146., 151.,  156.,  161.,  166.,  171.,  176.,  99.,   102.,
      105., 108., 111.,  114.,  117.,  120.,  0.,    0.,    0.,    0.,
      45.,  50.,  55.,   60.,   65.,   70.,   75.,   80.,   172.,  184.,
      196., 208., 220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,
      336., 352., 368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,
      255., 264., 273.,  282.,  291.,  300.,  0.,    0.,    0.,    0.,
      145., 150., 155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,
      436., 448., 460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,
      656., 672., 688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,
      435., 444., 453.,  462.,  471.,  480.,  0.,    0.,    0.,    0.,
      245., 250., 255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,
      676., 688., 700.,  712.,  724.,  736.,  1237., 1258., 1279., 1300.,
      976., 992., 1008., 1024., 1040., 1056., 1072., 1088., 597.,  606.,
      615., 624., 633.,  642.,  651.,  660.,  0.,    0.,    0.,    0.,
      244., 248., 252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,
      599., 608., 617.,  626.,  635.,  644.,  1019., 1034., 1049., 1064.,
      755., 766., 777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,
      450., 456., 462.,  468.,  474.,  480.,  0.,    0.,    0.,    0.,
      324., 328., 332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,
      779., 788., 797.,  806.,  815.,  824.,  1319., 1334., 1349., 1364.,
      975., 986., 997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,
      570., 576., 582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      488.,   540.,   592.,   644.,   1308.,  1428.,  1548.,  1668.,  1788.,
      1908.,  2028.,  2148.,  3212.,  3416.,  3620.,  3824.,  2708.,  2860.,
      3012.,  3164.,  4592.,  4844.,  5096.,  5348.,  3628.,  3812.,  3996.,
      4180.,  5972.,  6272.,  6572.,  6872.,  4548.,  4764.,  4980.,  5196.,
      5412.,  5628.,  5844.,  6060.,  1528.,  1580.,  1632.,  1684.,  3708.,
      3828.,  3948.,  4068.,  4188.,  4308.,  4428.,  4548.,  7292.,  7496.,
      7700.,  7904.,  5748.,  5900.,  6052.,  6204.,  9632.,  9884.,  10136.,
      10388., 7308.,  7492.,  7676.,  7860.,  11972., 12272., 12572., 12872.,
      8868.,  9084.,  9300.,  9516.,  9732.,  9948.,  10164., 10380., 2977.,
      3115.,  3253.,  3391.,  6932.,  7232.,  7532.,  7832.,  8132.,  8432.,
      8732.,  9032.,  13713., 14199., 14685., 15171., 10472., 10820., 11168.,
      11516., 17223., 17781., 18339., 18897., 12812., 13208., 13604., 14000.,
      20733., 21363., 21993., 22623., 15152., 15596., 16040., 16484., 16928.,
      17372., 17816., 18260., 5108.,  5240.,  5372.,  5504.,  10868., 11148.,
      11428., 11708., 11988., 12268., 12548., 12828., 18992., 19436., 19880.,
      20324., 13548., 13860., 14172., 14484., 21332., 21824., 22316., 22808.,
      15108., 15452., 15796., 16140., 23672., 24212., 24752., 25292., 16668.,
      17044., 17420., 17796., 18172., 18548., 18924., 19300., 8347.,  8605.,
      8863.,  9121.,  17672., 18212., 18752., 19292., 19832., 20372., 20912.,
      21452., 31263., 32109., 32955., 33801., 22172., 22760., 23348., 23936.,
      34773., 35691., 36609., 37527., 24512., 25148., 25784., 26420., 38283.,
      39273., 40263., 41253., 26852., 27536., 28220., 28904., 29588., 30272.,
      30956., 31640., 8688.,  8900.,  9112.,  9324.,  18028., 18468., 18908.,
      19348., 19788., 20228., 20668., 21108., 30692., 31376., 32060., 32744.,
      21348., 21820., 22292., 22764., 33032., 33764., 34496., 35228., 22908.,
      23412., 23916., 24420., 35372., 36152., 36932., 37712., 24468., 25004.,
      25540., 26076., 26612., 27148., 27684., 28220., 12928., 13140., 13352.,
      13564., 26828., 27268., 27708., 28148., 28588., 29028., 29468., 29908.,
      44372., 45056., 45740., 46424., 30788., 31260., 31732., 32204., 47672.,
      48404., 49136., 49868., 32988., 33492., 33996., 34500., 50972., 51752.,
      52532., 53312., 35188., 35724., 36260., 36796., 37332., 37868., 38404.,
      38940.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,    64.,    84.,
      104.,  124.,  144.,  164.,  184.,  204.,  241.,  283.,   325.,   367.,
      284.,  320.,  356.,  392.,  428.,  464.,  500.,  536.,   281.,   303.,
      325.,  347.,  369.,  391.,  413.,  435.,  0.,    0.,     0.,     0.,
      125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,   464.,   484.,
      504.,  524.,  544.,  564.,  584.,  604.,  1081., 1123.,  1165.,  1207.,
      1004., 1040., 1076., 1112., 1148., 1184., 1220., 1256.,  721.,   743.,
      765.,  787.,  809.,  831.,  853.,  875.,  0.,    0.,     0.,     0.,
      268.,  304.,  340.,  376.,  412.,  448.,  484.,  520.,   1156.,  1244.,
      1332., 1420., 1508., 1596., 1684., 1772., 2792., 2948.,  3104.,  3260.,
      2428., 2548., 2668., 2788., 2908., 3028., 3148., 3268.,  1748.,  1816.,
      1884., 1952., 2020., 2088., 2156., 2224., 0.,    0.,     0.,     0.,
      988.,  1024., 1060., 1096., 1132., 1168., 1204., 1240.,  2916.,  3004.,
      3092., 3180., 3268., 3356., 3444., 3532., 5912., 6068.,  6224.,  6380.,
      4828., 4948., 5068., 5188., 5308., 5428., 5548., 5668.,  3108.,  3176.,
      3244., 3312., 3380., 3448., 3516., 3584., 0.,    0.,     0.,     0.,
      1708., 1744., 1780., 1816., 1852., 1888., 1924., 1960.,  4676.,  4764.,
      4852., 4940., 5028., 5116., 5204., 5292., 9032., 9188.,  9344.,  9500.,
      7228., 7348., 7468., 7588., 7708., 7828., 7948., 8068.,  4468.,  4536.,
      4604., 4672., 4740., 4808., 4876., 4944., 0.,    0.,     0.,     0.,
      1823., 1853., 1883., 1913., 1943., 1973., 2003., 2033.,  4372.,  4440.,
      4508., 4576., 4644., 4712., 4780., 4848., 7711., 7825.,  7939.,  8053.,
      5744., 5828., 5912., 5996., 6080., 6164., 6248., 6332.,  3347.,  3393.,
      3439., 3485., 3531., 3577., 3623., 3669., 0.,    0.,     0.,     0.,
      2423., 2453., 2483., 2513., 2543., 2573., 2603., 2633.,  5732.,  5800.,
      5868., 5936., 6004., 6072., 6140., 6208., 9991., 10105., 10219., 10333.,
      7424., 7508., 7592., 7676., 7760., 7844., 7928., 8012.,  4267.,  4313.,
      4359., 4405., 4451., 4497., 4543., 4589., 0.,    0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3460.,   3860.,   4260.,   4660.,   9560.,   10488.,  11416.,  12344.,
      13272.,  14200.,  15128.,  16056.,  24124.,  25708.,  27292.,  28876.,
      20600.,  21784.,  22968.,  24152.,  35116.,  37084.,  39052.,  41020.,
      27928.,  29368.,  30808.,  32248.,  46108.,  48460.,  50812.,  53164.,
      35256.,  36952.,  38648.,  40344.,  42040.,  43736.,  45432.,  47128.,
      11460.,  11860.,  12260.,  12660.,  28120.,  29048.,  29976.,  30904.,
      31832.,  32760.,  33688.,  34616.,  55804.,  57388.,  58972.,  60556.,
      44280.,  45464.,  46648.,  47832.,  74476.,  76444.,  78412.,  80380.,
      56728.,  58168.,  59608.,  61048.,  93148.,  95500.,  97852.,  100204.,
      69176.,  70872.,  72568.,  74264.,  75960.,  77656.,  79352.,  81048.,
      22610.,  23690.,  24770.,  25850.,  53020.,  55372.,  57724.,  60076.,
      62428.,  64780.,  67132.,  69484.,  105726., 109542., 113358., 117174.,
      81100.,  83836.,  86572.,  89308.,  133734., 138126., 142518., 146910.,
      99772.,  102892., 106012., 109132., 161742., 166710., 171678., 176646.,
      118444., 121948., 125452., 128956., 132460., 135964., 139468., 142972.,
      40020.,  41060.,  42100.,  43140.,  85240.,  87448.,  89656.,  91864.,
      94072.,  96280.,  98488.,  100696., 149164., 152668., 156172., 159676.,
      106520., 108984., 111448., 113912., 167836., 171724., 175612., 179500.,
      118968., 121688., 124408., 127128., 186508., 190780., 195052., 199324.,
      131416., 134392., 137368., 140344., 143320., 146296., 149272., 152248.,
      65450.,  67490.,  69530.,  71570.,  138700., 142972., 147244., 151516.,
      155788., 160060., 164332., 168604., 245766., 252462., 259158., 265854.,
      174460., 179116., 183772., 188428., 273774., 281046., 288318., 295590.,
      193132., 198172., 203212., 208252., 301782., 309630., 317478., 325326.,
      211804., 217228., 222652., 228076., 233500., 238924., 244348., 249772.,
      68580.,  70260.,  71940.,  73620.,  142360., 145848., 149336., 152824.,
      156312., 159800., 163288., 166776., 242524., 247948., 253372., 258796.,
      168760., 172504., 176248., 179992., 261196., 267004., 272812., 278620.,
      181208., 185208., 189208., 193208., 279868., 286060., 292252., 298444.,
      193656., 197912., 202168., 206424., 210680., 214936., 219192., 223448.,
      102180., 103860., 105540., 107220., 212120., 215608., 219096., 222584.,
      226072., 229560., 233048., 236536., 351004., 356428., 361852., 367276.,
      243640., 247384., 251128., 254872., 377356., 383164., 388972., 394780.,
      261208., 265208., 269208., 273208., 403708., 409900., 416092., 422284.,
      278776., 283032., 287288., 291544., 295800., 300056., 304312., 308568.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1682.,  1994.,
      2306.,  2618.,  2100.,  2372.,  2644.,  2916.,  3188.,  3460.,  3732.,
      4004.,  2126.,  2294.,  2462.,  2630.,  2798.,  2966.,  3134.,  3302.,
      0.,     0.,     0.,     0.,     830.,   870.,   910.,   950.,   990.,
      1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,
      4164.,  4308.,  7922.,  8234.,  8546.,  8858.,  7540.,  7812.,  8084.,
      8356.,  8628.,  8900.,  9172.,  9444.,  5486.,  5654.,  5822.,  5990.,
      6158.,  6326.,  6494.,  6662.,  0.,     0.,     0.,     0.,     1780.,
      2052.,  2324.,  2596.,  2868.,  3140.,  3412.,  3684.,  8376.,  9048.,
      9720.,  10392., 11064., 11736., 12408., 13080., 20812., 22012., 23212.,
      24412., 18392., 19320., 20248., 21176., 22104., 23032., 23960., 24888.,
      13396., 13924., 14452., 14980., 15508., 16036., 16564., 17092., 0.,
      0.,     0.,     0.,     7220.,  7492.,  7764.,  8036.,  8308.,  8580.,
      8852.,  9124.,  21816., 22488., 23160., 23832., 24504., 25176., 25848.,
      26520., 44812., 46012., 47212., 48412., 36952., 37880., 38808., 39736.,
      40664., 41592., 42520., 43448., 23956., 24484., 25012., 25540., 26068.,
      26596., 27124., 27652., 0.,     0.,     0.,     0.,     12660., 12932.,
      13204., 13476., 13748., 14020., 14292., 14564., 35256., 35928., 36600.,
      37272., 37944., 38616., 39288., 39960., 68812., 70012., 71212., 72412.,
      55512., 56440., 57368., 58296., 59224., 60152., 61080., 62008., 34516.,
      35044., 35572., 36100., 36628., 37156., 37684., 38212., 0.,     0.,
      0.,     0.,     14070., 14302., 14534., 14766., 14998., 15230., 15462.,
      15694., 33876., 34404., 34932., 35460., 35988., 36516., 37044., 37572.,
      59930., 60818., 61706., 62594., 44772., 45428., 46084., 46740., 47396.,
      48052., 48708., 49364., 26150., 26510., 26870., 27230., 27590., 27950.,
      28310., 28670., 0.,     0.,     0.,     0.,     18710., 18942., 19174.,
      19406., 19638., 19870., 20102., 20334., 44436., 44964., 45492., 46020.,
      46548., 47076., 47604., 48132., 77690., 78578., 79466., 80354., 57892.,
      58548., 59204., 59860., 60516., 61172., 61828., 62484., 33350., 33710.,
      34070., 34430., 34790., 35150., 35510., 35870., 0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,  23.,  44.,  39.,   68.,  55.,   62.,  56.,  70.,  124., 102., 172.,
      134., 156., 126., 140.,  244., 192.,  322., 244., 266., 233., 266., 450.,
      344., 567., 422., 467.,  318., 348.,  556., 400., 634., 452., 490., 521.,
      578., 918., 656., 1035., 734., 803.,  510., 556., 868., 608., 946., 660.,
      714., 740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11., 8.,  10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48., 58., 68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54., 58., 148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76., 80., 63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,  0.,  0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,  272.,   481.,  396.,  448.,  368.,  472.,  854.,
      720.,  1226., 968.,  1136.,  888.,  992.,  1754., 1400., 2366., 1808.,
      1976., 1660., 1912., 3267.,  2524., 4185., 3136., 3484., 2392., 2624.,
      4202., 3032., 4814., 3440.,  3736., 3916., 4360., 6939., 4972., 7857.,
      5584., 6124., 3896., 4256.,  6650., 4664., 7262., 5072., 5496., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743., 0.,
      0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,
      3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  6632.,  7432.,
      13252., 10664., 18100., 13896., 15208., 12476., 14444., 24822.,
      19292., 32094., 24140., 26876., 18536., 20360., 32644., 23592.,
      37492., 26824., 29160., 30332., 33836., 53910., 38684., 61182.,
      43532., 47804., 30440., 33288., 52036., 36520., 56884., 39752.,
      43112., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718., 0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   127.,  136.,
      103.,  110.,  117.,  124.,  98.,   112.,  126.,  140.,  224.,  248.,
      186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,
      266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,
      510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,
      1071., 1134., 799.,  844.,  889.,  934.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070.,
      1399., 1468., 1537., 1606., 974.,  1020., 1066., 1112., 1664., 1736.,
      1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480.,
      1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860.,
      1914., 1968.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,  16.,
      18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,
      34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96.,  106., 116.,
      126., 136., 82.,  88.,  94.,  100., 64.,  68.,  72.,  76.,  186., 196.,
      206., 216., 226., 236., 142., 148., 154., 160., 104., 108., 112., 116.,
      286., 296., 306., 316., 326., 336., 202., 208., 214., 220., 93.,  96.,
      99.,  102., 229., 236., 243., 250., 257., 264., 148., 152., 156., 160.,
      123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192.,
      196., 200., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,
      977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,
      1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,
      2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,
      4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,
      3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,
      6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,
      6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,
      8384.,  8828.,  13347., 14049., 9572.,  10064., 15129., 15903., 10760.,
      11300., 11840., 12380., 7520.,  7880.,  8240.,  8600.,  12874., 13438.,
      9032.,  9424.,  14062., 14674., 9824.,  10248., 10672., 11096., 11120.,
      11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794.,
      14064., 14488., 14912., 15336.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  65.,   71.,   77.,   83.,   240.,  260.,
      280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,
      198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,
      666.,  710.,  422.,  450.,  478.,  506.,  1288., 1360., 1432., 1504.,
      1576., 1648., 1018., 1062., 1106., 1150., 702.,  730.,  758.,  786.,
      2008., 2080., 2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590.,
      677.,  699.,  721.,  743.,  1688., 1740., 1792., 1844., 1896., 1948.,
      1103., 1133., 1163., 1193., 897.,  919.,  941.,  963.,  2208., 2260.,
      2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      6874.,   7378.,   5732.,   6132.,   6532.,   6932.,   4744.,   5544.,
      6344.,   7144.,   11684.,  13076.,  10088.,  11144.,  17300.,  19076.,
      13832.,  15144.,  16456.,  17768.,  12744.,  13544.,  14344.,  15144.,
      25604.,  26996.,  20648.,  21704.,  35060.,  36836.,  26952.,  28264.,
      29576.,  30888.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      35912.,  37736.,  39560.,  41384.,  63428.,  66356.,  45864.,  47944.,
      72884.,  76196.,  52168.,  54504.,  56840.,  59176.,  58444.,  61948.,
      65452.,  68956.,  104310., 109854., 74908.,  78796.,  118494., 124614.,
      84364.,  88636.,  92908.,  97180.,  59080.,  61928.,  64776.,  67624.,
      101252., 105716., 71080.,  74184.,  110708., 115556., 77384.,  80744.,
      84104.,  87464.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  430.,   470.,   510.,   550.,
      1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,
      2046.,  940.,   1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,
      6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,
      3644.,  9512.,  10056., 10600., 11144., 11688., 12232., 7676.,  8012.,
      8348.,  8684.,  5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040.,
      16584., 17128., 17672., 11036., 11372., 11708., 12044., 5150.,  5318.,
      5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932., 8502.,
      8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334.,  16932., 17332.,
      17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,
      170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,
      199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,  182.,  196.,
      210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,
      354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,
      514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,  490.,  504.,
      518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,
      750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,  954.,  976.,
      998.,  1020., 1042., 1064., 833.,  866.,  899.,  932.,  965.,  998.,
      1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376.,
      2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778.,
      1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392.,
      2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428.,
      2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,
      1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492.,
      3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140.,
      2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212., 1902., 1948.,
      1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472.,
      2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532.,
      2586., 2640., 2694., 2748., 2802., 2856., 2822., 2868., 2914., 2960.,
      3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912., 3282., 3332.,
      3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612., 3666., 3720.,
      3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   11.,  14.,  17.,  20.,
      23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,
      34.,  36.,  38.,  40.,  21.,  22.,  23.,  24.,  25.,  26.,  27.,  28.,
      71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,  95.,  98.,  101., 104.,
      66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,  44.,  48.,  52.,  56.,
      60.,  64.,  68.,  72.,  162., 172., 182., 192., 202., 212., 222., 232.,
      242., 252., 262., 272., 158., 164., 170., 176., 182., 188., 194., 200.,
      124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392.,
      402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296.,
      302., 308., 314., 320., 204., 208., 212., 216., 220., 224., 228., 232.,
      562., 572., 582., 592., 602., 612., 622., 632., 642., 652., 662., 672.,
      398., 404., 410., 416., 422., 428., 434., 440., 183., 186., 189., 192.,
      195., 198., 201., 204., 451., 458., 465., 472., 479., 486., 493., 500.,
      507., 514., 521., 528., 292., 296., 300., 304., 308., 312., 316., 320.,
      243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612.,
      619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384.,
      388., 392., 396., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   1081.,
      1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1771.,  1837.,
      1903.,  1969.,  1464.,  1516.,  1568.,  1620.,  1672.,  1724.,  1776.,
      1828.,  1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,
      3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,
      4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,
      4496.,  4664.,  3312.,  3416.,  3520.,  3624.,  3728.,  3832.,  3936.,
      4040.,  6602.,  6782.,  6962.,  7142.,  5288.,  5424.,  5560.,  5696.,
      8942.,  9170.,  9398.,  9626.,  6848.,  7016.,  7184.,  7352.,  7520.,
      7688.,  7856.,  8024.,  6064.,  6316.,  6568.,  6820.,  7072.,  7324.,
      7576.,  7828.,  12123., 12537., 12951., 13365., 9412.,  9712.,  10012.,
      10312., 15633., 16119., 16605., 17091., 11752., 12100., 12448., 12796.,
      13144., 13492., 13840., 14188., 9040.,  9272.,  9504.,  9736.,  9968.,
      10200., 10432., 10664., 15962., 16334., 16706., 17078., 11528., 11792.,
      12056., 12320., 18302., 18722., 19142., 19562., 13088., 13384., 13680.,
      13976., 14272., 14568., 14864., 15160., 14656., 15100., 15544., 15988.,
      16432., 16876., 17320., 17764., 26163., 26865., 27567., 28269., 18772.,
      19264., 19756., 20248., 29673., 30447., 31221., 31995., 21112., 21652.,
      22192., 22732., 23272., 23812., 24352., 24892., 14768., 15128., 15488.,
      15848., 16208., 16568., 16928., 17288., 25322., 25886., 26450., 27014.,
      17768., 18160., 18552., 18944., 27662., 28274., 28886., 29498., 19328.,
      19752., 20176., 20600., 21024., 21448., 21872., 22296., 21968., 22328.,
      22688., 23048., 23408., 23768., 24128., 24488., 36602., 37166., 37730.,
      38294., 25608., 26000., 26392., 26784., 39902., 40514., 41126., 41738.,
      27808., 28232., 28656., 29080., 29504., 29928., 30352., 30776.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,
      137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,
      544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,
      487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,
      374.,  402.,  430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440.,
      1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254.,
      1298., 1342., 1386., 1430., 822.,  850.,  878.,  906.,  934.,  962.,
      990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024.,
      3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222.,
      2266., 2310., 1382., 1410., 1438., 1466., 1494., 1522., 1550., 1578.,
      3960., 4032., 4104., 4176., 4248., 4320., 4392., 4464., 4536., 4608.,
      4680., 4752., 2882., 2926., 2970., 3014., 3058., 3102., 3146., 3190.,
      1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388.,
      3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908.,
      2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 1777., 1799.,
      1821., 1843., 1865., 1887., 1909., 1931., 4376., 4428., 4480., 4532.,
      4584., 4636., 4688., 4740., 4792., 4844., 4896., 4948., 2783., 2813.,
      2843., 2873., 2903., 2933., 2963., 2993., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      13418.,  13922.,  14426.,  14930.,  11204.,  11604.,  12004.,  12404.,
      12804.,  13204.,  13604.,  14004.,  8968.,   9768.,   10568.,  11368.,
      12168.,  12968.,  13768.,  14568.,  22468.,  23860.,  25252.,  26644.,
      19496.,  20552.,  21608.,  22664.,  33460.,  35236.,  37012.,  38788.,
      26824.,  28136.,  29448.,  30760.,  32072.,  33384.,  34696.,  36008.,
      24968.,  25768.,  26568.,  27368.,  28168.,  28968.,  29768.,  30568.,
      50308.,  51700.,  53092.,  54484.,  40616.,  41672.,  42728.,  43784.,
      68980.,  70756.,  72532.,  74308.,  53064.,  54376.,  55688.,  57000.,
      58312.,  59624.,  60936.,  62248.,  46124.,  48092.,  50060.,  52028.,
      53996.,  55964.,  57932.,  59900.,  93078.,  96318.,  99558.,  102798.,
      72668.,  75020.,  77372.,  79724.,  121086., 124902., 128718., 132534.,
      91340.,  94076.,  96812.,  99548.,  102284., 105020., 107756., 110492.,
      70664.,  72488.,  74312.,  76136.,  77960.,  79784.,  81608.,  83432.,
      124996., 127924., 130852., 133780., 90408.,  92488.,  94568.,  96648.,
      143668., 146980., 150292., 153604., 102856., 105192., 107528., 109864.,
      112200., 114536., 116872., 119208., 114668., 118172., 121676., 125180.,
      128684., 132188., 135692., 139196., 205110., 210654., 216198., 221742.,
      147356., 151244., 155132., 159020., 233118., 239238., 245358., 251478.,
      166028., 170300., 174572., 178844., 183116., 187388., 191660., 195932.,
      116360., 119208., 122056., 124904., 127752., 130600., 133448., 136296.,
      199684., 204148., 208612., 213076., 140200., 143304., 146408., 149512.,
      218356., 223204., 228052., 232900., 152648., 156008., 159368., 162728.,
      166088., 169448., 172808., 176168., 173320., 176168., 179016., 181864.,
      184712., 187560., 190408., 193256., 288964., 293428., 297892., 302356.,
      202280., 205384., 208488., 211592., 315316., 320164., 325012., 329860.,
      219848., 223208., 226568., 229928., 233288., 236648., 240008., 243368.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  830.,   870.,   910.,   950.,   990.,   1030.,  1070.,  1110.,
      3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,
      4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,
      4022.,  4126.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,
      3196.,  7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592.,
      12136., 12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,
      10092., 10428., 10764., 5900.,  6108.,  6316.,  6524.,  6732.,  6940.,
      7148.,  7356.,  18664., 19208., 19752., 20296., 20840., 21384., 21928.,
      22472., 23016., 23560., 24104., 24648., 15132., 15468., 15804., 16140.,
      16476., 16812., 17148., 17484., 10060., 10268., 10476., 10684., 10892.,
      11100., 11308., 11516., 29544., 30088., 30632., 31176., 31720., 32264.,
      32808., 33352., 33896., 34440., 34984., 35528., 21852., 22188., 22524.,
      22860., 23196., 23532., 23868., 24204., 10190., 10358., 10526., 10694.,
      10862., 11030., 11198., 11366., 25604., 26004., 26404., 26804., 27204.,
      27604., 28004., 28404., 28804., 29204., 29604., 30004., 16854., 17086.,
      17318., 17550., 17782., 18014., 18246., 18478., 13550., 13718., 13886.,
      14054., 14222., 14390., 14558., 14726., 33604., 34004., 34404., 34804.,
      35204., 35604., 36004., 36404., 36804., 37204., 37604., 38004., 21494.,
      21726., 21958., 22190., 22422., 22654., 22886., 23118., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,  44.,  39.,   68.,  55.,   62.,  22.,  56.,  70.,
      124., 102.,  172., 134., 156.,  52.,  126.,  140., 244., 192., 322.,
      244., 266.,  100., 233., 266.,  450., 344.,  567., 422., 467., 148.,
      318., 348.,  556., 400., 634.,  452., 490.,  244., 521., 578., 918.,
      656., 1035., 734., 803., 244.,  510., 556.,  868., 608., 946., 660.,
      714., 354.,  740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,
      23.,  26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,
      50.,  0.,   34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,
      58.,  148., 158., 168., 104., 110., 0.,   48.,  51.,  118., 125.,
      132., 76.,  80.,  0.,   63.,  66.,  153., 160., 167., 96.,  100.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,  396.,  448.,  138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,  992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267., 2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814., 3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124., 1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696., 6056., 9470.,
      6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,   28.,   48.,   68.,  53.,  67.,   0.,    35.,   41.,  128.,
      148., 168.,  123.,  137.,  0.,   82.,  110.,  312.,  384.,  456., 306.,
      350., 0.,    222.,  250.,  672., 744., 816.,  526.,  570.,  0.,   362.,
      390., 1032., 1104., 1176., 746., 790., 0.,    347.,  369.,  864., 916.,
      968., 563.,  593.,  0.,    457., 479., 1124., 1176., 1228., 713., 743.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      2636.,  6632.,  7432.,  13252., 10664., 18100., 13896., 15208.,
      5218.,  12476., 14444., 24822., 19292., 32094., 24140., 26876.,
      8588.,  18536., 20360., 32644., 23592., 37492., 26824., 29160.,
      14146., 30332., 33836., 53910., 38684., 61182., 43532., 47804.,
      14540., 30440., 33288., 52036., 36520., 56884., 39752., 43112.,
      21340., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,
      127.,  136.,  103.,  110.,  117.,  124.,  38.,   44.,   98.,   112.,
      126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,
      290.,  312.,  98.,   104.,  238.,  252.,  266.,  280.,  464.,  488.,
      366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,
      433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,  1071., 1134.,
      799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      461.,  488.,  985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312.,
      1971., 2070., 1399., 1468., 1537., 1606., 466.,  488.,  974.,  1020.,
      1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320.,
      1374., 1428., 686.,  708.,  1434., 1480., 1526., 1572., 2384., 2456.,
      1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,  16.,
      18.,  20.,  0.,   0.,   11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,
      49.,  52.,  34.,  36.,  38.,  40.,  0.,   0.,   24.,  28.,  32.,  36.,
      86.,  96.,  106., 116., 126., 136., 82.,  88.,  94.,  100., 0.,   0.,
      64.,  68.,  72.,  76.,  186., 196., 206., 216., 226., 236., 142., 148.,
      154., 160., 0.,   0.,   104., 108., 112., 116., 286., 296., 306., 316.,
      326., 336., 202., 208., 214., 220., 0.,   0.,   93.,  96.,  99.,  102.,
      229., 236., 243., 250., 257., 264., 148., 152., 156., 160., 0.,   0.,
      123., 126., 129., 132., 299., 306., 313., 320., 327., 334., 188., 192.,
      196., 200., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,   1696.,  1800.,
      1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,
      3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,
      6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,
      7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,
      5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,
      3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,  10064.,
      15129., 15903., 10760., 11300., 11840., 12380., 3594.,  3766.,  7520.,
      7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674.,
      9824.,  10248., 10672., 11096., 5314.,  5486.,  11120., 11480., 11840.,
      12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488.,
      14912., 15336.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  0.,    0.,    65.,   71.,   77.,   83.,
      240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,
      0.,    0.,    142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,
      856.,  928.,  578.,  622.,  666.,  710.,  0.,    0.,    422.,  450.,
      478.,  506.,  1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062.,
      1106., 1150., 0.,    0.,    702.,  730.,  758.,  786.,  2008., 2080.,
      2152., 2224., 2296., 2368., 1458., 1502., 1546., 1590., 0.,    0.,
      677.,  699.,  721.,  743.,  1688., 1740., 1792., 1844., 1896., 1948.,
      1103., 1133., 1163., 1193., 0.,    0.,    897.,  919.,  941.,  963.,
      2208., 2260., 2312., 2364., 2416., 2468., 1403., 1433., 1463., 1493.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   6532.,   6932.,
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      41820.,  43180.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  0.,     0.,     430.,   470.,
      510.,   550.,   1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,
      1838.,  1942.,  2046.,  0.,     0.,     940.,   1148.,  1356.,  1564.,
      4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,
      5324.,  0.,     0.,     3020.,  3228.,  3436.,  3644.,  9512.,  10056.,
      10600., 11144., 11688., 12232., 7676.,  8012.,  8348.,  8684.,  0.,
      0.,     5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040., 16584.,
      17128., 17672., 11036., 11372., 11708., 12044., 0.,     0.,     5150.,
      5318.,  5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932.,
      8502.,  8734.,  8966.,  9198.,  0.,     0.,     6830.,  6998.,  7166.,
      7334.,  16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054.,
      11286., 11518., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,
      89.,   92.,   158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,
      245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,
      241.,  248.,  70.,   76.,   82.,   88.,   182.,  196.,  210.,  224.,
      238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,
      390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,
      558.,  580.,  602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,
      490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,
      714.,  732.,  750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,
      954.,  976.,  998.,  1020., 1042., 1064., 355.,  370.,  385.,  400.,
      833.,  866.,  899.,  932.,  965.,  998.,  1031., 1064., 1638., 1692.,
      1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268.,
      1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868., 550.,  564.,
      578.,  592.,  1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392.,
      2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428.,
      2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,
      895.,  922.,  949.,  976.,  1913., 1970., 2027., 2084., 2141., 2198.,
      2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624.,
      3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074.,
      3143., 3212., 910.,  932.,  954.,  976.,  1902., 1948., 1994., 2040.,
      2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332.,
      2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640.,
      2694., 2748., 2802., 2856., 1350., 1372., 1394., 1416., 2822., 2868.,
      2914., 2960., 3006., 3052., 3098., 3144., 4696., 4768., 4840., 4912.,
      3282., 3332., 3382., 3432., 5110., 5188., 5266., 5344., 3558., 3612.,
      3666., 3720., 3774., 3828., 3882., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   11.,  14.,  17.,  20.,
      23.,  26.,  29.,  32.,  35.,  38.,  41.,  44.,  26.,  28.,  30.,  32.,
      34.,  36.,  38.,  40.,  0.,   0.,   0.,   0.,   21.,  22.,  23.,  24.,
      25.,  26.,  27.,  28.,  71.,  74.,  77.,  80.,  83.,  86.,  89.,  92.,
      95.,  98.,  101., 104., 66.,  68.,  70.,  72.,  74.,  76.,  78.,  80.,
      0.,   0.,   0.,   0.,   44.,  48.,  52.,  56.,  60.,  64.,  68.,  72.,
      162., 172., 182., 192., 202., 212., 222., 232., 242., 252., 262., 272.,
      158., 164., 170., 176., 182., 188., 194., 200., 0.,   0.,   0.,   0.,
      124., 128., 132., 136., 140., 144., 148., 152., 362., 372., 382., 392.,
      402., 412., 422., 432., 442., 452., 462., 472., 278., 284., 290., 296.,
      302., 308., 314., 320., 0.,   0.,   0.,   0.,   204., 208., 212., 216.,
      220., 224., 228., 232., 562., 572., 582., 592., 602., 612., 622., 632.,
      642., 652., 662., 672., 398., 404., 410., 416., 422., 428., 434., 440.,
      0.,   0.,   0.,   0.,   183., 186., 189., 192., 195., 198., 201., 204.,
      451., 458., 465., 472., 479., 486., 493., 500., 507., 514., 521., 528.,
      292., 296., 300., 304., 308., 312., 316., 320., 0.,   0.,   0.,   0.,
      243., 246., 249., 252., 255., 258., 261., 264., 591., 598., 605., 612.,
      619., 626., 633., 640., 647., 654., 661., 668., 372., 376., 380., 384.,
      388., 392., 396., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,
      1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,
      1620.,  1672.,  1724.,  1776.,  1828.,  450.,   494.,   538.,   582.,
      1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,
      3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,
      4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,
      4664.,  1330.,  1374.,  1418.,  1462.,  3312.,  3416.,  3520.,  3624.,
      3728.,  3832.,  3936.,  4040.,  6602.,  6782.,  6962.,  7142.,  5288.,
      5424.,  5560.,  5696.,  8942.,  9170.,  9398.,  9626.,  6848.,  7016.,
      7184.,  7352.,  7520.,  7688.,  7856.,  8024.,  2543.,  2657.,  2771.,
      2885.,  6064.,  6316.,  6568.,  6820.,  7072.,  7324.,  7576.,  7828.,
      12123., 12537., 12951., 13365., 9412.,  9712.,  10012., 10312., 15633.,
      16119., 16605., 17091., 11752., 12100., 12448., 12796., 13144., 13492.,
      13840., 14188., 4194.,  4302.,  4410.,  4518.,  9040.,  9272.,  9504.,
      9736.,  9968.,  10200., 10432., 10664., 15962., 16334., 16706., 17078.,
      11528., 11792., 12056., 12320., 18302., 18722., 19142., 19562., 13088.,
      13384., 13680., 13976., 14272., 14568., 14864., 15160., 6839.,  7049.,
      7259.,  7469.,  14656., 15100., 15544., 15988., 16432., 16876., 17320.,
      17764., 26163., 26865., 27567., 28269., 18772., 19264., 19756., 20248.,
      29673., 30447., 31221., 31995., 21112., 21652., 22192., 22732., 23272.,
      23812., 24352., 24892., 7058.,  7230.,  7402.,  7574.,  14768., 15128.,
      15488., 15848., 16208., 16568., 16928., 17288., 25322., 25886., 26450.,
      27014., 17768., 18160., 18552., 18944., 27662., 28274., 28886., 29498.,
      19328., 19752., 20176., 20600., 21024., 21448., 21872., 22296., 10498.,
      10670., 10842., 11014., 21968., 22328., 22688., 23048., 23408., 23768.,
      24128., 24488., 36602., 37166., 37730., 38294., 25608., 26000., 26392.,
      26784., 39902., 40514., 41126., 41738., 27808., 28232., 28656., 29080.,
      29504., 29928., 30352., 30776.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  0.,    0.,
      0.,    0.,    125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,
      464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,
      664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,
      0.,    0.,    0.,    0.,    262.,  290.,  318.,  346.,  374.,  402.,
      430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584.,
      1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342.,
      1386., 1430., 0.,    0.,    0.,    0.,    822.,  850.,  878.,  906.,
      934.,  962.,  990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880.,
      2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134.,
      2178., 2222., 2266., 2310., 0.,    0.,    0.,    0.,    1382., 1410.,
      1438., 1466., 1494., 1522., 1550., 1578., 3960., 4032., 4104., 4176.,
      4248., 4320., 4392., 4464., 4536., 4608., 4680., 4752., 2882., 2926.,
      2970., 3014., 3058., 3102., 3146., 3190., 0.,    0.,    0.,    0.,
      1337., 1359., 1381., 1403., 1425., 1447., 1469., 1491., 3336., 3388.,
      3440., 3492., 3544., 3596., 3648., 3700., 3752., 3804., 3856., 3908.,
      2183., 2213., 2243., 2273., 2303., 2333., 2363., 2393., 0.,    0.,
      0.,    0.,    1777., 1799., 1821., 1843., 1865., 1887., 1909., 1931.,
      4376., 4428., 4480., 4532., 4584., 4636., 4688., 4740., 4792., 4844.,
      4896., 4948., 2783., 2813., 2843., 2873., 2903., 2933., 2963., 2993.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   7922.,   8234.,   8546.,   8858.,
      7540.,   7812.,   8084.,   8356.,   13418.,  13922.,  14426.,  14930.,
      11204.,  11604.,  12004.,  12404.,  12804.,  13204.,  13604.,  14004.,
      3164.,   3500.,   3836.,   4172.,   8968.,   9768.,   10568.,  11368.,
      12168.,  12968.,  13768.,  14568.,  22468.,  23860.,  25252.,  26644.,
      19496.,  20552.,  21608.,  22664.,  33460.,  35236.,  37012.,  38788.,
      26824.,  28136.,  29448.,  30760.,  32072.,  33384.,  34696.,  36008.,
      9884.,   10220.,  10556.,  10892.,  24968.,  25768.,  26568.,  27368.,
      28168.,  28968.,  29768.,  30568.,  50308.,  51700.,  53092.,  54484.,
      40616.,  41672.,  42728.,  43784.,  68980.,  70756.,  72532.,  74308.,
      53064.,  54376.,  55688.,  57000.,  58312.,  59624.,  60936.,  62248.,
      19162.,  20050.,  20938.,  21826.,  46124.,  48092.,  50060.,  52028.,
      53996.,  55964.,  57932.,  59900.,  93078.,  96318.,  99558.,  102798.,
      72668.,  75020.,  77372.,  79724.,  121086., 124902., 128718., 132534.,
      91340.,  94076.,  96812.,  99548.,  102284., 105020., 107756., 110492.,
      32732.,  33580.,  34428.,  35276.,  70664.,  72488.,  74312.,  76136.,
      77960.,  79784.,  81608.,  83432.,  124996., 127924., 130852., 133780.,
      90408.,  92488.,  94568.,  96648.,  143668., 146980., 150292., 153604.,
      102856., 105192., 107528., 109864., 112200., 114536., 116872., 119208.,
      53434.,  55090.,  56746.,  58402.,  114668., 118172., 121676., 125180.,
      128684., 132188., 135692., 139196., 205110., 210654., 216198., 221742.,
      147356., 151244., 155132., 159020., 233118., 239238., 245358., 251478.,
      166028., 170300., 174572., 178844., 183116., 187388., 191660., 195932.,
      55580.,  56940.,  58300.,  59660.,  116360., 119208., 122056., 124904.,
      127752., 130600., 133448., 136296., 199684., 204148., 208612., 213076.,
      140200., 143304., 146408., 149512., 218356., 223204., 228052., 232900.,
      152648., 156008., 159368., 162728., 166088., 169448., 172808., 176168.,
      82780.,  84140.,  85500.,  86860.,  173320., 176168., 179016., 181864.,
      184712., 187560., 190408., 193256., 288964., 293428., 297892., 302356.,
      202280., 205384., 208488., 211592., 315316., 320164., 325012., 329860.,
      219848., 223208., 226568., 229928., 233288., 236648., 240008., 243368.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  0.,     0.,     0.,     0.,     830.,   870.,   910.,   950.,
      990.,   1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,
      4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,
      3606.,  3710.,  3814.,  3918.,  4022.,  4126.,  0.,     0.,     0.,
      0.,     1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,
      7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592., 12136.,
      12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,  10092.,
      10428., 10764., 0.,     0.,     0.,     0.,     5900.,  6108.,  6316.,
      6524.,  6732.,  6940.,  7148.,  7356.,  18664., 19208., 19752., 20296.,
      20840., 21384., 21928., 22472., 23016., 23560., 24104., 24648., 15132.,
      15468., 15804., 16140., 16476., 16812., 17148., 17484., 0.,     0.,
      0.,     0.,     10060., 10268., 10476., 10684., 10892., 11100., 11308.,
      11516., 29544., 30088., 30632., 31176., 31720., 32264., 32808., 33352.,
      33896., 34440., 34984., 35528., 21852., 22188., 22524., 22860., 23196.,
      23532., 23868., 24204., 0.,     0.,     0.,     0.,     10190., 10358.,
      10526., 10694., 10862., 11030., 11198., 11366., 25604., 26004., 26404.,
      26804., 27204., 27604., 28004., 28404., 28804., 29204., 29604., 30004.,
      16854., 17086., 17318., 17550., 17782., 18014., 18246., 18478., 0.,
      0.,     0.,     0.,     13550., 13718., 13886., 14054., 14222., 14390.,
      14558., 14726., 33604., 34004., 34404., 34804., 35204., 35604., 36004.,
      36404., 36804., 37204., 37604., 38004., 21494., 21726., 21958., 22190.,
      22422., 22654., 22886., 23118., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,  23.,  44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,  148.,  295.,   272.,  481.,   396.,  667.,   520.,  588.,
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,   2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,   9724.,  7672.,  12652.,
      9624.,  11320., 3060.,  7480.,  8408.,  14716.,  11640., 19564., 14872.,
      24412., 18104., 19800., 6170.,  14380., 16732.,  28254., 21580., 35526.,
      26428., 42798., 31276., 34780., 10500., 22360.,  24568., 38956., 27800.,
      43804., 31032., 48652., 34264., 37240., 17330.,  36700., 40972., 64614.,
      45820., 71886., 50668., 79158., 55516., 60940.,  17940., 37240., 40728.,
      63196., 43960., 68044., 47192., 72892., 50424.,  54680., 26340., 54680.,
      58168., 90316., 62680., 97084., 67192., 103852., 71704., 75960.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,
      127.,  136.,  103.,  110.,  172.,  184.,  133.,  142.,  151.,  160.,
      41.,   48.,   104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,
      329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,
      111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,
      659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,
      214.,  232.,  491.,  530.,  569.,  608.,  951.,  1014., 719.,  764.,
      1176., 1248., 869.,  920.,  1401., 1482., 1019., 1076., 1133., 1190.,
      341.,  358.,  724.,  760.,  796.,  832.,  1259., 1316., 896.,  936.,
      1409., 1472., 996.,  1040., 1559., 1628., 1096., 1144., 1192., 1240.,
      559.,  592.,  1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544.,
      2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,
      571.,  598.,  1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456.,
      2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,
      841.,  868.,  1744., 1800., 1856., 1912., 2879., 2966., 1996., 2056.,
      3089., 3182., 2136., 2200., 3299., 3398., 2276., 2344., 2412., 2480.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  22.,  28.,  23.,  28.,
      33.,  38.,  21.,  24.,  27.,  30.,  0.,   0.,   11.,  12.,  13.,  14.,
      37.,  40.,  43.,  46.,  82.,  88.,  73.,  78.,  83.,  88.,  51.,  54.,
      57.,  60.,  0.,   0.,   25.,  30.,  35.,  40.,  92.,  104., 116., 128.,
      209., 230., 176., 192., 208., 224., 123., 132., 141., 150., 0.,   0.,
      75.,  80.,  85.,  90.,  212., 224., 236., 248., 419., 440., 336., 352.,
      368., 384., 213., 222., 231., 240., 0.,   0.,   125., 130., 135., 140.,
      332., 344., 356., 368., 629., 650., 496., 512., 528., 544., 303., 312.,
      321., 330., 0.,   0.,   124., 128., 132., 136., 295., 304., 313., 322.,
      517., 532., 383., 394., 405., 416., 222., 228., 234., 240., 0.,   0.,
      164., 168., 172., 176., 385., 394., 403., 412., 667., 682., 493., 504.,
      515., 526., 282., 288., 294., 300., 0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   1265.,  1355.,  988.,   1056.,
      1124.,  1192.,  264.,   316.,   700.,   820.,   940.,   1060.,  1684.,
      1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,
      2356.,  2572.,  2788.,  3004.,  784.,   836.,   1900.,  2020.,  2140.,
      2260.,  3724.,  3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,
      6100.,  6400.,  4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,
      3880.,  4180.,  4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,
      6556.,  6952.,  10605., 11235., 7744.,  8188.,  8632.,  9076.,  2604.,
      2736.,  5540.,  5820.,  6100.,  6380.,  9664.,  10108., 6892.,  7204.,
      10852., 11344., 7684.,  8028.,  12040., 12580., 8476.,  8852.,  9228.,
      9604.,  4271.,  4529.,  9040.,  9580.,  10120., 10660., 15951., 16797.,
      11308., 11896., 17733., 18651., 12496., 13132., 19515., 20505., 13684.,
      14368., 15052., 15736., 4424.,  4636.,  9180.,  9620.,  10060., 10500.,
      15604., 16288., 10852., 11324., 16792., 17524., 11644., 12148., 17980.,
      18760., 12436., 12972., 13508., 14044., 6544.,  6756.,  13580., 14020.,
      14460., 14900., 22444., 23128., 15572., 16044., 24112., 24844., 16684.,
      17188., 25780., 26560., 17796., 18332., 18868., 19404.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  137.,  179.,
      156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,  0.,    0.,
      65.,   71.,   77.,   83.,   240.,  260.,  280.,  300.,  557.,  599.,
      516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,  0.,    0.,
      148.,  184.,  220.,  256.,  612.,  700.,  788.,  876.,  1456., 1612.,
      1260., 1380., 1500., 1620., 900.,  968.,  1036., 1104., 0.,    0.,
      508.,  544.,  580.,  616.,  1492., 1580., 1668., 1756., 3016., 3172.,
      2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784., 0.,    0.,
      868.,  904.,  940.,  976.,  2372., 2460., 2548., 2636., 4576., 4732.,
      3660., 3780., 3900., 4020., 2260., 2328., 2396., 2464., 0.,    0.,
      923.,  953.,  983.,  1013., 2212., 2280., 2348., 2416., 3899., 4013.,
      2904., 2988., 3072., 3156., 1691., 1737., 1783., 1829., 0.,    0.,
      1223., 1253., 1283., 1313., 2892., 2960., 3028., 3096., 5039., 5153.,
      3744., 3828., 3912., 3996., 2151., 2197., 2243., 2289., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   9682.,   10378.,
      7604.,   8132.,   8660.,   9188.,   1860.,   2260.,   5080.,   6008.,
      6936.,   7864.,   12572.,  14156.,  10680.,  11864.,  18188.,  20156.,
      14424.,  15864.,  23804.,  26156.,  18168.,  19864.,  21560.,  23256.,
      5860.,   6260.,   14360.,  15288.,  16216.,  17144.,  28412.,  29996.,
      22520.,  23704.,  37868.,  39836.,  28824.,  30264.,  47324.,  49676.,
      35128.,  36824.,  38520.,  40216.,  11650.,  12730.,  27260.,  29612.,
      31964.,  34316.,  54078.,  57894.,  41420.,  44156.,  68262.,  72654.,
      50876.,  53996.,  82446.,  87414.,  60332.,  63836.,  67340.,  70844.,
      20340.,  21380.,  43320.,  45528.,  47736.,  49944.,  75692.,  79196.,
      54040.,  56504.,  85148.,  89036.,  60344.,  63064.,  94604.,  98876.,
      66648.,  69624.,  72600.,  75576.,  33370.,  35410.,  70700.,  74972.,
      79244.,  83516.,  124998., 131694., 88700.,  93356.,  139182., 146454.,
      98156.,  103196., 153366., 161214., 107612., 113036., 118460., 123884.,
      34820.,  36500.,  72280.,  75768.,  79256.,  82744.,  122972., 128396.,
      85560.,  89304.,  132428., 138236., 91864.,  95864.,  141884., 148076.,
      98168.,  102424., 106680., 110936., 51620.,  53300.,  107160., 110648.,
      114136., 117624., 177212., 182636., 123000., 126744., 190508., 196316.,
      131864., 135864., 203804., 209996., 140728., 144984., 149240., 153496.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   946.,
      1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,
      0.,     0.,     430.,   470.,   510.,   550.,   1700.,  1844.,  1988.,
      2132.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,
      3134.,  3302.,  0.,     0.,     980.,   1252.,  1524.,  1796.,  4408.,
      5080.,  5752.,  6424.,  10796., 11996., 9496.,  10424., 11352., 12280.,
      6868.,  7396.,  7924.,  8452.,  0.,     0.,     3700.,  3972.,  4244.,
      4516.,  11128., 11800., 12472., 13144., 22796., 23996., 18776., 19704.,
      20632., 21560., 12148., 12676., 13204., 13732., 0.,     0.,     6420.,
      6692.,  6964.,  7236.,  17848., 18520., 19192., 19864., 34796., 35996.,
      28056., 28984., 29912., 30840., 17428., 17956., 18484., 19012., 0.,
      0.,     7110.,  7342.,  7574.,  7806.,  17108., 17636., 18164., 18692.,
      30250., 31138., 22596., 23252., 23908., 24564., 13190., 13550., 13910.,
      14270., 0.,     0.,     9430.,  9662.,  9894.,  10126., 22388., 22916.,
      23444., 23972., 39130., 40018., 29156., 29812., 30468., 31124., 16790.,
      17150., 17510., 17870., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,
      89.,   92.,   158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,
      245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  332.,  344.,
      356.,  368.,  257.,  266.,  275.,  284.,  293.,  302.,  311.,  320.,
      75.,   82.,   89.,   96.,   192.,  208.,  224.,  240.,  256.,  272.,
      288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,
      625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,
      877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,
      215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,
      608.,  624.,  991.,  1018., 1045., 1072., 772.,  792.,  812.,  832.,
      1285., 1318., 1351., 1384., 968.,  992.,  1016., 1040., 1579., 1618.,
      1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,
      410.,  428.,  446.,  464.,  943.,  982.,  1021., 1060., 1099., 1138.,
      1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528.,
      2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802.,
      2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,
      665.,  682.,  699.,  716.,  1412., 1448., 1484., 1520., 1556., 1592.,
      1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872.,
      2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118.,
      3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480.,
      1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638.,
      2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088.,
      4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052.,
      5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060.,
      1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592.,
      2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912.,
      4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618.,
      4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600.,
      1655., 1682., 1709., 1736., 3432., 3488., 3544., 3600., 3656., 3712.,
      3768., 3824., 5671., 5758., 5845., 5932., 3932., 3992., 4052., 4112.,
      6085., 6178., 6271., 6364., 4208., 4272., 4336., 4400., 6499., 6598.,
      6697., 6796., 4484., 4552., 4620., 4688., 4756., 4824., 4892., 4960.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,  20.,  23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,
      41.,  46.,  51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,
      45.,  48.,  51.,   54.,   57.,   60.,   0.,    0.,    0.,    0.,
      21.,  22.,  23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,
      77.,  80.,  83.,   86.,   89.,   92.,   158.,  164.,  170.,  176.,
      141., 146., 151.,  156.,  161.,  166.,  171.,  176.,  99.,   102.,
      105., 108., 111.,  114.,  117.,  120.,  0.,    0.,    0.,    0.,
      45.,  50.,  55.,   60.,   65.,   70.,   75.,   80.,   172.,  184.,
      196., 208., 220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,
      336., 352., 368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,
      255., 264., 273.,  282.,  291.,  300.,  0.,    0.,    0.,    0.,
      145., 150., 155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,
      436., 448., 460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,
      656., 672., 688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,
      435., 444., 453.,  462.,  471.,  480.,  0.,    0.,    0.,    0.,
      245., 250., 255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,
      676., 688., 700.,  712.,  724.,  736.,  1237., 1258., 1279., 1300.,
      976., 992., 1008., 1024., 1040., 1056., 1072., 1088., 597.,  606.,
      615., 624., 633.,  642.,  651.,  660.,  0.,    0.,    0.,    0.,
      244., 248., 252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,
      599., 608., 617.,  626.,  635.,  644.,  1019., 1034., 1049., 1064.,
      755., 766., 777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,
      450., 456., 462.,  468.,  474.,  480.,  0.,    0.,    0.,    0.,
      324., 328., 332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,
      779., 788., 797.,  806.,  815.,  824.,  1319., 1334., 1349., 1364.,
      975., 986., 997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,
      570., 576., 582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,
      1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,
      1620.,  2461.,  2551.,  2641.,  2731.,  1924.,  1992.,  2060.,  2128.,
      2196.,  2264.,  2332.,  2400.,  488.,   540.,   592.,   644.,   1308.,
      1428.,  1548.,  1668.,  1788.,  1908.,  2028.,  2148.,  3212.,  3416.,
      3620.,  3824.,  2708.,  2860.,  3012.,  3164.,  4592.,  4844.,  5096.,
      5348.,  3628.,  3812.,  3996.,  4180.,  5972.,  6272.,  6572.,  6872.,
      4548.,  4764.,  4980.,  5196.,  5412.,  5628.,  5844.,  6060.,  1528.,
      1580.,  1632.,  1684.,  3708.,  3828.,  3948.,  4068.,  4188.,  4308.,
      4428.,  4548.,  7292.,  7496.,  7700.,  7904.,  5748.,  5900.,  6052.,
      6204.,  9632.,  9884.,  10136., 10388., 7308.,  7492.,  7676.,  7860.,
      11972., 12272., 12572., 12872., 8868.,  9084.,  9300.,  9516.,  9732.,
      9948.,  10164., 10380., 2977.,  3115.,  3253.,  3391.,  6932.,  7232.,
      7532.,  7832.,  8132.,  8432.,  8732.,  9032.,  13713., 14199., 14685.,
      15171., 10472., 10820., 11168., 11516., 17223., 17781., 18339., 18897.,
      12812., 13208., 13604., 14000., 20733., 21363., 21993., 22623., 15152.,
      15596., 16040., 16484., 16928., 17372., 17816., 18260., 5108.,  5240.,
      5372.,  5504.,  10868., 11148., 11428., 11708., 11988., 12268., 12548.,
      12828., 18992., 19436., 19880., 20324., 13548., 13860., 14172., 14484.,
      21332., 21824., 22316., 22808., 15108., 15452., 15796., 16140., 23672.,
      24212., 24752., 25292., 16668., 17044., 17420., 17796., 18172., 18548.,
      18924., 19300., 8347.,  8605.,  8863.,  9121.,  17672., 18212., 18752.,
      19292., 19832., 20372., 20912., 21452., 31263., 32109., 32955., 33801.,
      22172., 22760., 23348., 23936., 34773., 35691., 36609., 37527., 24512.,
      25148., 25784., 26420., 38283., 39273., 40263., 41253., 26852., 27536.,
      28220., 28904., 29588., 30272., 30956., 31640., 8688.,  8900.,  9112.,
      9324.,  18028., 18468., 18908., 19348., 19788., 20228., 20668., 21108.,
      30692., 31376., 32060., 32744., 21348., 21820., 22292., 22764., 33032.,
      33764., 34496., 35228., 22908., 23412., 23916., 24420., 35372., 36152.,
      36932., 37712., 24468., 25004., 25540., 26076., 26612., 27148., 27684.,
      28220., 12928., 13140., 13352., 13564., 26828., 27268., 27708., 28148.,
      28588., 29028., 29468., 29908., 44372., 45056., 45740., 46424., 30788.,
      31260., 31732., 32204., 47672., 48404., 49136., 49868., 32988., 33492.,
      33996., 34500., 50972., 51752., 52532., 53312., 35188., 35724., 36260.,
      36796., 37332., 37868., 38404., 38940.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,    64.,    84.,
      104.,  124.,  144.,  164.,  184.,  204.,  241.,  283.,   325.,   367.,
      284.,  320.,  356.,  392.,  428.,  464.,  500.,  536.,   281.,   303.,
      325.,  347.,  369.,  391.,  413.,  435.,  0.,    0.,     0.,     0.,
      125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,   464.,   484.,
      504.,  524.,  544.,  564.,  584.,  604.,  1081., 1123.,  1165.,  1207.,
      1004., 1040., 1076., 1112., 1148., 1184., 1220., 1256.,  721.,   743.,
      765.,  787.,  809.,  831.,  853.,  875.,  0.,    0.,     0.,     0.,
      268.,  304.,  340.,  376.,  412.,  448.,  484.,  520.,   1156.,  1244.,
      1332., 1420., 1508., 1596., 1684., 1772., 2792., 2948.,  3104.,  3260.,
      2428., 2548., 2668., 2788., 2908., 3028., 3148., 3268.,  1748.,  1816.,
      1884., 1952., 2020., 2088., 2156., 2224., 0.,    0.,     0.,     0.,
      988.,  1024., 1060., 1096., 1132., 1168., 1204., 1240.,  2916.,  3004.,
      3092., 3180., 3268., 3356., 3444., 3532., 5912., 6068.,  6224.,  6380.,
      4828., 4948., 5068., 5188., 5308., 5428., 5548., 5668.,  3108.,  3176.,
      3244., 3312., 3380., 3448., 3516., 3584., 0.,    0.,     0.,     0.,
      1708., 1744., 1780., 1816., 1852., 1888., 1924., 1960.,  4676.,  4764.,
      4852., 4940., 5028., 5116., 5204., 5292., 9032., 9188.,  9344.,  9500.,
      7228., 7348., 7468., 7588., 7708., 7828., 7948., 8068.,  4468.,  4536.,
      4604., 4672., 4740., 4808., 4876., 4944., 0.,    0.,     0.,     0.,
      1823., 1853., 1883., 1913., 1943., 1973., 2003., 2033.,  4372.,  4440.,
      4508., 4576., 4644., 4712., 4780., 4848., 7711., 7825.,  7939.,  8053.,
      5744., 5828., 5912., 5996., 6080., 6164., 6248., 6332.,  3347.,  3393.,
      3439., 3485., 3531., 3577., 3623., 3669., 0.,    0.,     0.,     0.,
      2423., 2453., 2483., 2513., 2543., 2573., 2603., 2633.,  5732.,  5800.,
      5868., 5936., 6004., 6072., 6140., 6208., 9991., 10105., 10219., 10333.,
      7424., 7508., 7592., 7676., 7760., 7844., 7928., 8012.,  4267.,  4313.,
      4359., 4405., 4451., 4497., 4543., 4589., 0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   7922.,   8234.,   8546.,   8858.,
      7540.,   7812.,   8084.,   8356.,   13418.,  13922.,  14426.,  14930.,
      11204.,  11604.,  12004.,  12404.,  18914.,  19610.,  20306.,  21002.,
      14868.,  15396.,  15924.,  16452.,  16980.,  17508.,  18036.,  18564.,
      3460.,   3860.,   4260.,   4660.,   9560.,   10488.,  11416.,  12344.,
      13272.,  14200.,  15128.,  16056.,  24124.,  25708.,  27292.,  28876.,
      20600.,  21784.,  22968.,  24152.,  35116.,  37084.,  39052.,  41020.,
      27928.,  29368.,  30808.,  32248.,  46108.,  48460.,  50812.,  53164.,
      35256.,  36952.,  38648.,  40344.,  42040.,  43736.,  45432.,  47128.,
      11460.,  11860.,  12260.,  12660.,  28120.,  29048.,  29976.,  30904.,
      31832.,  32760.,  33688.,  34616.,  55804.,  57388.,  58972.,  60556.,
      44280.,  45464.,  46648.,  47832.,  74476.,  76444.,  78412.,  80380.,
      56728.,  58168.,  59608.,  61048.,  93148.,  95500.,  97852.,  100204.,
      69176.,  70872.,  72568.,  74264.,  75960.,  77656.,  79352.,  81048.,
      22610.,  23690.,  24770.,  25850.,  53020.,  55372.,  57724.,  60076.,
      62428.,  64780.,  67132.,  69484.,  105726., 109542., 113358., 117174.,
      81100.,  83836.,  86572.,  89308.,  133734., 138126., 142518., 146910.,
      99772.,  102892., 106012., 109132., 161742., 166710., 171678., 176646.,
      118444., 121948., 125452., 128956., 132460., 135964., 139468., 142972.,
      40020.,  41060.,  42100.,  43140.,  85240.,  87448.,  89656.,  91864.,
      94072.,  96280.,  98488.,  100696., 149164., 152668., 156172., 159676.,
      106520., 108984., 111448., 113912., 167836., 171724., 175612., 179500.,
      118968., 121688., 124408., 127128., 186508., 190780., 195052., 199324.,
      131416., 134392., 137368., 140344., 143320., 146296., 149272., 152248.,
      65450.,  67490.,  69530.,  71570.,  138700., 142972., 147244., 151516.,
      155788., 160060., 164332., 168604., 245766., 252462., 259158., 265854.,
      174460., 179116., 183772., 188428., 273774., 281046., 288318., 295590.,
      193132., 198172., 203212., 208252., 301782., 309630., 317478., 325326.,
      211804., 217228., 222652., 228076., 233500., 238924., 244348., 249772.,
      68580.,  70260.,  71940.,  73620.,  142360., 145848., 149336., 152824.,
      156312., 159800., 163288., 166776., 242524., 247948., 253372., 258796.,
      168760., 172504., 176248., 179992., 261196., 267004., 272812., 278620.,
      181208., 185208., 189208., 193208., 279868., 286060., 292252., 298444.,
      193656., 197912., 202168., 206424., 210680., 214936., 219192., 223448.,
      102180., 103860., 105540., 107220., 212120., 215608., 219096., 222584.,
      226072., 229560., 233048., 236536., 351004., 356428., 361852., 367276.,
      243640., 247384., 251128., 254872., 377356., 383164., 388972., 394780.,
      261208., 265208., 269208., 273208., 403708., 409900., 416092., 422284.,
      278776., 283032., 287288., 291544., 295800., 300056., 304312., 308568.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1682.,  1994.,
      2306.,  2618.,  2100.,  2372.,  2644.,  2916.,  3188.,  3460.,  3732.,
      4004.,  2126.,  2294.,  2462.,  2630.,  2798.,  2966.,  3134.,  3302.,
      0.,     0.,     0.,     0.,     830.,   870.,   910.,   950.,   990.,
      1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,  4020.,
      4164.,  4308.,  7922.,  8234.,  8546.,  8858.,  7540.,  7812.,  8084.,
      8356.,  8628.,  8900.,  9172.,  9444.,  5486.,  5654.,  5822.,  5990.,
      6158.,  6326.,  6494.,  6662.,  0.,     0.,     0.,     0.,     1780.,
      2052.,  2324.,  2596.,  2868.,  3140.,  3412.,  3684.,  8376.,  9048.,
      9720.,  10392., 11064., 11736., 12408., 13080., 20812., 22012., 23212.,
      24412., 18392., 19320., 20248., 21176., 22104., 23032., 23960., 24888.,
      13396., 13924., 14452., 14980., 15508., 16036., 16564., 17092., 0.,
      0.,     0.,     0.,     7220.,  7492.,  7764.,  8036.,  8308.,  8580.,
      8852.,  9124.,  21816., 22488., 23160., 23832., 24504., 25176., 25848.,
      26520., 44812., 46012., 47212., 48412., 36952., 37880., 38808., 39736.,
      40664., 41592., 42520., 43448., 23956., 24484., 25012., 25540., 26068.,
      26596., 27124., 27652., 0.,     0.,     0.,     0.,     12660., 12932.,
      13204., 13476., 13748., 14020., 14292., 14564., 35256., 35928., 36600.,
      37272., 37944., 38616., 39288., 39960., 68812., 70012., 71212., 72412.,
      55512., 56440., 57368., 58296., 59224., 60152., 61080., 62008., 34516.,
      35044., 35572., 36100., 36628., 37156., 37684., 38212., 0.,     0.,
      0.,     0.,     14070., 14302., 14534., 14766., 14998., 15230., 15462.,
      15694., 33876., 34404., 34932., 35460., 35988., 36516., 37044., 37572.,
      59930., 60818., 61706., 62594., 44772., 45428., 46084., 46740., 47396.,
      48052., 48708., 49364., 26150., 26510., 26870., 27230., 27590., 27950.,
      28310., 28670., 0.,     0.,     0.,     0.,     18710., 18942., 19174.,
      19406., 19638., 19870., 20102., 20334., 44436., 44964., 45492., 46020.,
      46548., 47076., 47604., 48132., 77690., 78578., 79466., 80354., 57892.,
      58548., 59204., 59860., 60516., 61172., 61828., 62484., 33350., 33710.,
      34070., 34430., 34790., 35150., 35510., 35870., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,  39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134., 156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266., 450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634., 452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510., 556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968., 1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938., 1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  59.,  68.,  169., 190., 211., 128., 140., 78.,
      86.,  194., 212., 230., 130., 140., 118., 126., 284., 302., 320., 180.,
      190., 80.,  85.,  186., 197., 208., 114., 120., 105., 110., 241., 252.,
      263., 144., 150., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,   272.,  481.,   396.,  448.,   368.,  472.,
      854.,  720.,  1226.,  968.,  1136.,  888.,  992.,   1754., 1400.,
      2366., 1808., 1976.,  1660., 1912.,  3267., 2524.,  4185., 3136.,
      3484., 2392., 2624.,  4202., 3032.,  4814., 3440.,  3736., 3916.,
      4360., 6939., 4972.,  7857., 5584.,  6124., 3896.,  4256., 6650.,
      4664., 7262., 5072.,  5496., 6172.,  6808., 10611., 7420., 11529.,
      8032., 8764., 5400.,  5888., 9098.,  6296., 9710.,  6704., 7256.,
      7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,   2020.,  3602.,   2996.,  3396.,  2632.,  3432.,
      6292.,  5384.,  9220.,   7336.,  8648.,   6632.,  7432.,  13252., 10664.,
      18100., 13896., 15208.,  12476., 14444.,  24822., 19292., 32094., 24140.,
      26876., 18536., 20360.,  32644., 23592.,  37492., 26824., 29160., 30332.,
      33836., 53910., 38684.,  61182., 43532.,  47804., 30440., 33288., 52036.,
      36520., 56884., 39752.,  43112., 48188.,  53228., 82998., 58076., 90270.,
      62924., 68732., 42344.,  46216., 71428.,  49448., 76276., 52680., 57064.,
      61704., 65576., 101428., 70088., 108196., 74600., 78984.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2810.,  3314.,  8668.,  9868.,  11068., 6938.,  7634.,  4300.,
      4764.,  10888., 11944., 13000., 7436.,  8028.,  6620.,  7084.,  16168.,
      17224., 18280., 10396., 10988., 4630.,  4926.,  10852., 11508., 12164.,
      6710.,  7070.,  6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   127.,  136.,
      103.,  110.,  117.,  124.,  98.,   112.,  126.,  140.,  224.,  248.,
      186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,
      266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,
      510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,
      1071., 1134., 799.,  844.,  889.,  934.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070.,
      1399., 1468., 1537., 1606., 974.,  1020., 1066., 1112., 1664., 1736.,
      1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1537., 1618.,
      1699., 1780., 2646., 2772., 1849., 1936., 2871., 3006., 1999., 2092.,
      2185., 2278., 1342., 1404., 1466., 1528., 2264., 2360., 1566., 1632.,
      2414., 2516., 1666., 1736., 1806., 1876., 1962., 2024., 2086., 2148.,
      3224., 3320., 2226., 2292., 3434., 3536., 2366., 2436., 2506., 2576.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,  16.,
      18.,  20.,  11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,  49.,  52.,
      34.,  36.,  38.,  40.,  24.,  28.,  32.,  36.,  86.,  96.,  106., 116.,
      126., 136., 82.,  88.,  94.,  100., 64.,  68.,  72.,  76.,  186., 196.,
      206., 216., 226., 236., 142., 148., 154., 160., 109., 118., 127., 136.,
      317., 338., 359., 380., 401., 422., 244., 256., 268., 280., 148., 156.,
      164., 172., 370., 388., 406., 424., 442., 460., 250., 260., 270., 280.,
      228., 236., 244., 252., 550., 568., 586., 604., 622., 640., 350., 360.,
      370., 380., 155., 160., 165., 170., 361., 372., 383., 394., 405., 416.,
      222., 228., 234., 240., 205., 210., 215., 220., 471., 482., 493., 504.,
      515., 526., 282., 288., 294., 300., 0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,
      977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,
      1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,
      2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,
      4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,
      3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,
      6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,
      6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,
      8384.,  8828.,  13347., 14049., 9572.,  10064., 15129., 15903., 10760.,
      11300., 11840., 12380., 7520.,  7880.,  8240.,  8600.,  12874., 13438.,
      9032.,  9424.,  14062., 14674., 9824.,  10248., 10672., 11096., 11864.,
      12500., 13136., 13772., 20475., 21465., 14324., 15008., 22257., 23319.,
      15512., 16244., 16976., 17708., 10432., 10920., 11408., 11896., 17626.,
      18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648.,
      15312., 15800., 16288., 16776., 25186., 25942., 17400., 17920., 26854.,
      27658., 18512., 19064., 19616., 20168.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  65.,   71.,   77.,   83.,   240.,  260.,
      280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,  142.,  170.,
      198.,  226.,  568.,  640.,  712.,  784.,  856.,  928.,  578.,  622.,
      666.,  710.,  422.,  450.,  478.,  506.,  1288., 1360., 1432., 1504.,
      1576., 1648., 1018., 1062., 1106., 1150., 731.,  797.,  863.,  929.,
      2224., 2380., 2536., 2692., 2848., 3004., 1769., 1859., 1949., 2039.,
      1086., 1146., 1206., 1266., 2744., 2880., 3016., 3152., 3288., 3424.,
      1874., 1950., 2026., 2102., 1686., 1746., 1806., 1866., 4104., 4240.,
      4376., 4512., 4648., 4784., 2634., 2710., 2786., 2862., 1169., 1207.,
      1245., 1283., 2736., 2820., 2904., 2988., 3072., 3156., 1691., 1737.,
      1783., 1829., 1549., 1587., 1625., 1663., 3576., 3660., 3744., 3828.,
      3912., 3996., 2151., 2197., 2243., 2289., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      6874.,   7378.,   5732.,   6132.,   6532.,   6932.,   4744.,   5544.,
      6344.,   7144.,   11684.,  13076.,  10088.,  11144.,  17300.,  19076.,
      13832.,  15144.,  16456.,  17768.,  12744.,  13544.,  14344.,  15144.,
      25604.,  26996.,  20648.,  21704.,  35060.,  36836.,  26952.,  28264.,
      29576.,  30888.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      35912.,  37736.,  39560.,  41384.,  63428.,  66356.,  45864.,  47944.,
      72884.,  76196.,  52168.,  54504.,  56840.,  59176.,  58444.,  61948.,
      65452.,  68956.,  104310., 109854., 74908.,  78796.,  118494., 124614.,
      84364.,  88636.,  92908.,  97180.,  59080.,  61928.,  64776.,  67624.,
      101252., 105716., 71080.,  74184.,  110708., 115556., 77384.,  80744.,
      84104.,  87464.,  93196.,  98236.,  103276., 108316., 161046., 168894.,
      112732., 118156., 175230., 183654., 122188., 127996., 133804., 139612.,
      82248.,  86120.,  89992.,  93864.,  139076., 145076., 96296.,  100424.,
      148532., 154916., 102600., 106984., 111368., 115752., 120968., 124840.,
      128712., 132584., 199076., 205076., 137576., 141704., 212372., 218756.,
      146440., 150824., 155208., 159592.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  430.,   470.,   510.,   550.,
      1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,
      2046.,  940.,   1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,
      6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,
      3644.,  9512.,  10056., 10600., 11144., 11688., 12232., 7676.,  8012.,
      8348.,  8684.,  5290.,  5794.,  6298.,  6802.,  16556., 17756., 18956.,
      20156., 21356., 22556., 13426., 14122., 14818., 15514., 8300.,  8764.,
      9228.,  9692.,  21096., 22152., 23208., 24264., 25320., 26376., 14492.,
      15084., 15676., 16268., 12940., 13404., 13868., 14332., 31656., 32712.,
      33768., 34824., 35880., 36936., 20412., 21004., 21596., 22188., 9070.,
      9366.,  9662.,  9958.,  21284., 21940., 22596., 23252., 23908., 24564.,
      13190., 13550., 13910., 14270., 12030., 12326., 12622., 12918., 27844.,
      28500., 29156., 29812., 30468., 31124., 16790., 17150., 17510., 17870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,
      170.,  176.,  141.,  146.,  151.,  156.,  245.,  254.,  263.,  272.,
      199.,  206.,  213.,  220.,  227.,  234.,  241.,  248.,  182.,  196.,
      210.,  224.,  238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,
      354.,  372.,  390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,
      514.,  536.,  558.,  580.,  602.,  624.,  462.,  476.,  490.,  504.,
      518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,  714.,  732.,
      750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,  954.,  976.,
      998.,  1020., 1042., 1064., 833.,  866.,  899.,  932.,  965.,  998.,
      1031., 1064., 1638., 1692., 1746., 1800., 1259., 1298., 1337., 1376.,
      2079., 2142., 2205., 2268., 1553., 1598., 1643., 1688., 1733., 1778.,
      1823., 1868., 1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392.,
      2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428.,
      2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,
      1913., 1970., 2027., 2084., 2141., 2198., 2255., 2312., 3402., 3492.,
      3582., 3672., 2435., 2498., 2561., 2624., 3843., 3942., 4041., 4140.,
      2729., 2798., 2867., 2936., 3005., 3074., 3143., 3212., 1902., 1948.,
      1994., 2040., 2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472.,
      2282., 2332., 2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532.,
      2586., 2640., 2694., 2748., 2802., 2856., 2993., 3074., 3155., 3236.,
      3317., 3398., 3479., 3560., 5166., 5292., 5418., 5544., 3611., 3698.,
      3785., 3872., 5607., 5742., 5877., 6012., 3905., 3998., 4091., 4184.,
      4277., 4370., 4463., 4556., 2622., 2684., 2746., 2808., 2870., 2932.,
      2994., 3056., 4432., 4528., 4624., 4720., 3066., 3132., 3198., 3264.,
      4726., 4828., 4930., 5032., 3262., 3332., 3402., 3472., 3542., 3612.,
      3682., 3752., 3862., 3924., 3986., 4048., 4110., 4172., 4234., 4296.,
      6352., 6448., 6544., 6640., 4386., 4452., 4518., 4584., 6766., 6868.,
      6970., 7072., 4662., 4732., 4802., 4872., 4942., 5012., 5082., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,
      23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,
      83.,   86.,   89.,   92.,   95.,   98.,   101.,  104.,  66.,   68.,
      70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,
      60.,   64.,   68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,
      222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,
      182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,
      148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,
      442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,
      314.,  320.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,
      613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,
      823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,
      288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,
      758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,
      490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  448.,  456.,
      464.,  472.,  480.,  488.,  496.,  504.,  1082., 1100., 1118., 1136.,
      1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280., 690.,  700.,
      710.,  720.,  730.,  740.,  750.,  760.,  305.,  310.,  315.,  320.,
      325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,
      777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,
      462.,  468.,  474.,  480.,  405.,  410.,  415.,  420.,  425.,  430.,
      435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997.,  1008.,
      1019., 1030., 1041., 1052., 558.,  564.,  570.,  576.,  582.,  588.,
      594.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   1081.,
      1123.,  1165.,  1207.,  1004.,  1040.,  1076.,  1112.,  1771.,  1837.,
      1903.,  1969.,  1464.,  1516.,  1568.,  1620.,  1672.,  1724.,  1776.,
      1828.,  1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,
      3002.,  3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,
      4610.,  4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,
      4496.,  4664.,  3312.,  3416.,  3520.,  3624.,  3728.,  3832.,  3936.,
      4040.,  6602.,  6782.,  6962.,  7142.,  5288.,  5424.,  5560.,  5696.,
      8942.,  9170.,  9398.,  9626.,  6848.,  7016.,  7184.,  7352.,  7520.,
      7688.,  7856.,  8024.,  6064.,  6316.,  6568.,  6820.,  7072.,  7324.,
      7576.,  7828.,  12123., 12537., 12951., 13365., 9412.,  9712.,  10012.,
      10312., 15633., 16119., 16605., 17091., 11752., 12100., 12448., 12796.,
      13144., 13492., 13840., 14188., 9040.,  9272.,  9504.,  9736.,  9968.,
      10200., 10432., 10664., 15962., 16334., 16706., 17078., 11528., 11792.,
      12056., 12320., 18302., 18722., 19142., 19562., 13088., 13384., 13680.,
      13976., 14272., 14568., 14864., 15160., 14656., 15100., 15544., 15988.,
      16432., 16876., 17320., 17764., 26163., 26865., 27567., 28269., 18772.,
      19264., 19756., 20248., 29673., 30447., 31221., 31995., 21112., 21652.,
      22192., 22732., 23272., 23812., 24352., 24892., 14768., 15128., 15488.,
      15848., 16208., 16568., 16928., 17288., 25322., 25886., 26450., 27014.,
      17768., 18160., 18552., 18944., 27662., 28274., 28886., 29498., 19328.,
      19752., 20176., 20600., 21024., 21448., 21872., 22296., 23248., 23884.,
      24520., 25156., 25792., 26428., 27064., 27700., 40203., 41193., 42183.,
      43173., 28132., 28816., 29500., 30184., 43713., 44775., 45837., 46899.,
      30472., 31204., 31936., 32668., 33400., 34132., 34864., 35596., 20496.,
      20984., 21472., 21960., 22448., 22936., 23424., 23912., 34682., 35438.,
      36194., 36950., 24008., 24528., 25048., 25568., 37022., 37826., 38630.,
      39434., 25568., 26120., 26672., 27224., 27776., 28328., 28880., 29432.,
      30256., 30744., 31232., 31720., 32208., 32696., 33184., 33672., 49802.,
      50558., 51314., 52070., 34408., 34928., 35448., 35968., 53102., 53906.,
      54710., 55514., 36608., 37160., 37712., 38264., 38816., 39368., 39920.,
      40472.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  125.,  131.,
      137.,  143.,  149.,  155.,  161.,  167.,  464.,  484.,  504.,  524.,
      544.,  564.,  584.,  604.,  624.,  644.,  664.,  684.,  459.,  473.,
      487.,  501.,  515.,  529.,  543.,  557.,  262.,  290.,  318.,  346.,
      374.,  402.,  430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440.,
      1512., 1584., 1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254.,
      1298., 1342., 1386., 1430., 822.,  850.,  878.,  906.,  934.,  962.,
      990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880., 2952., 3024.,
      3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134., 2178., 2222.,
      2266., 2310., 1411., 1477., 1543., 1609., 1675., 1741., 1807., 1873.,
      4328., 4484., 4640., 4796., 4952., 5108., 5264., 5420., 5576., 5732.,
      5888., 6044., 3469., 3559., 3649., 3739., 3829., 3919., 4009., 4099.,
      2126., 2186., 2246., 2306., 2366., 2426., 2486., 2546., 5384., 5520.,
      5656., 5792., 5928., 6064., 6200., 6336., 6472., 6608., 6744., 6880.,
      3690., 3766., 3842., 3918., 3994., 4070., 4146., 4222., 3326., 3386.,
      3446., 3506., 3566., 3626., 3686., 3746., 8104., 8240., 8376., 8512.,
      8648., 8784., 8920., 9056., 9192., 9328., 9464., 9600., 5210., 5286.,
      5362., 5438., 5514., 5590., 5666., 5742., 2309., 2347., 2385., 2423.,
      2461., 2499., 2537., 2575., 5408., 5492., 5576., 5660., 5744., 5828.,
      5912., 5996., 6080., 6164., 6248., 6332., 3347., 3393., 3439., 3485.,
      3531., 3577., 3623., 3669., 3069., 3107., 3145., 3183., 3221., 3259.,
      3297., 3335., 7088., 7172., 7256., 7340., 7424., 7508., 7592., 7676.,
      7760., 7844., 7928., 8012., 4267., 4313., 4359., 4405., 4451., 4497.,
      4543., 4589., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      13418.,  13922.,  14426.,  14930.,  11204.,  11604.,  12004.,  12404.,
      12804.,  13204.,  13604.,  14004.,  8968.,   9768.,   10568.,  11368.,
      12168.,  12968.,  13768.,  14568.,  22468.,  23860.,  25252.,  26644.,
      19496.,  20552.,  21608.,  22664.,  33460.,  35236.,  37012.,  38788.,
      26824.,  28136.,  29448.,  30760.,  32072.,  33384.,  34696.,  36008.,
      24968.,  25768.,  26568.,  27368.,  28168.,  28968.,  29768.,  30568.,
      50308.,  51700.,  53092.,  54484.,  40616.,  41672.,  42728.,  43784.,
      68980.,  70756.,  72532.,  74308.,  53064.,  54376.,  55688.,  57000.,
      58312.,  59624.,  60936.,  62248.,  46124.,  48092.,  50060.,  52028.,
      53996.,  55964.,  57932.,  59900.,  93078.,  96318.,  99558.,  102798.,
      72668.,  75020.,  77372.,  79724.,  121086., 124902., 128718., 132534.,
      91340.,  94076.,  96812.,  99548.,  102284., 105020., 107756., 110492.,
      70664.,  72488.,  74312.,  76136.,  77960.,  79784.,  81608.,  83432.,
      124996., 127924., 130852., 133780., 90408.,  92488.,  94568.,  96648.,
      143668., 146980., 150292., 153604., 102856., 105192., 107528., 109864.,
      112200., 114536., 116872., 119208., 114668., 118172., 121676., 125180.,
      128684., 132188., 135692., 139196., 205110., 210654., 216198., 221742.,
      147356., 151244., 155132., 159020., 233118., 239238., 245358., 251478.,
      166028., 170300., 174572., 178844., 183116., 187388., 191660., 195932.,
      116360., 119208., 122056., 124904., 127752., 130600., 133448., 136296.,
      199684., 204148., 208612., 213076., 140200., 143304., 146408., 149512.,
      218356., 223204., 228052., 232900., 152648., 156008., 159368., 162728.,
      166088., 169448., 172808., 176168., 183212., 188252., 193292., 198332.,
      203372., 208412., 213452., 218492., 317142., 324990., 332838., 340686.,
      222044., 227468., 232892., 238316., 345150., 353574., 361998., 370422.,
      240716., 246524., 252332., 258140., 263948., 269756., 275564., 281372.,
      162056., 165928., 169800., 173672., 177544., 181416., 185288., 189160.,
      274372., 280372., 286372., 292372., 189992., 194120., 198248., 202376.,
      293044., 299428., 305812., 312196., 202440., 206824., 211208., 215592.,
      219976., 224360., 228744., 233128., 239496., 243368., 247240., 251112.,
      254984., 258856., 262728., 266600., 394372., 400372., 406372., 412372.,
      272552., 276680., 280808., 284936., 420724., 427108., 433492., 439876.,
      290120., 294504., 298888., 303272., 307656., 312040., 316424., 320808.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  830.,   870.,   910.,   950.,   990.,   1030.,  1070.,  1110.,
      3300.,  3444.,  3588.,  3732.,  3876.,  4020.,  4164.,  4308.,  4452.,
      4596.,  4740.,  4884.,  3398.,  3502.,  3606.,  3710.,  3814.,  3918.,
      4022.,  4126.,  1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,
      3196.,  7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592.,
      12136., 12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,
      10092., 10428., 10764., 5900.,  6108.,  6316.,  6524.,  6732.,  6940.,
      7148.,  7356.,  18664., 19208., 19752., 20296., 20840., 21384., 21928.,
      22472., 23016., 23560., 24104., 24648., 15132., 15468., 15804., 16140.,
      16476., 16812., 17148., 17484., 10250., 10754., 11258., 11762., 12266.,
      12770., 13274., 13778., 32332., 33532., 34732., 35932., 37132., 38332.,
      39532., 40732., 41932., 43132., 44332., 45532., 26402., 27098., 27794.,
      28490., 29186., 29882., 30578., 31274., 16300., 16764., 17228., 17692.,
      18156., 18620., 19084., 19548., 41512., 42568., 43624., 44680., 45736.,
      46792., 47848., 48904., 49960., 51016., 52072., 53128., 28604., 29196.,
      29788., 30380., 30972., 31564., 32156., 32748., 25580., 26044., 26508.,
      26972., 27436., 27900., 28364., 28828., 62632., 63688., 64744., 65800.,
      66856., 67912., 68968., 70024., 71080., 72136., 73192., 74248., 40444.,
      41036., 41628., 42220., 42812., 43404., 43996., 44588., 17950., 18246.,
      18542., 18838., 19134., 19430., 19726., 20022., 42148., 42804., 43460.,
      44116., 44772., 45428., 46084., 46740., 47396., 48052., 48708., 49364.,
      26150., 26510., 26870., 27230., 27590., 27950., 28310., 28670., 23870.,
      24166., 24462., 24758., 25054., 25350., 25646., 25942., 55268., 55924.,
      56580., 57236., 57892., 58548., 59204., 59860., 60516., 61172., 61828.,
      62484., 33350., 33710., 34070., 34430., 34790., 35150., 35510., 35870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,  124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192., 322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422., 467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244., 521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556., 868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968., 1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868., 938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   59.,  68.,  169., 190.,
      211., 128., 140., 0.,   78.,  86.,  194., 212., 230., 130., 140., 0.,
      118., 126., 284., 302., 320., 180., 190., 0.,   80.,  85.,  186., 197.,
      208., 114., 120., 0.,   105., 110., 241., 252., 263., 144., 150., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,   396.,  448.,   138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136.,  358.,  888.,   992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660.,  1912., 3267.,  2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202.,  3032., 4814.,  3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857.,  5584., 6124.,  1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496.,  2957., 6172.,  6808., 10611.,
      7420., 11529., 8032., 8764., 2614., 5400.,  5888., 9098.,  6296., 9710.,
      6704., 7256.,  3794., 7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,   2020.,  3602.,   2996.,  3396.,  956.,
      2632.,  3432.,  6292.,  5384.,   9220.,  7336.,   8648.,  2636.,  6632.,
      7432.,  13252., 10664., 18100.,  13896., 15208.,  5218.,  12476., 14444.,
      24822., 19292., 32094., 24140.,  26876., 8588.,   18536., 20360., 32644.,
      23592., 37492., 26824., 29160.,  14146., 30332.,  33836., 53910., 38684.,
      61182., 43532., 47804., 14540.,  30440., 33288.,  52036., 36520., 56884.,
      39752., 43112., 23074., 48188.,  53228., 82998.,  58076., 90270., 62924.,
      68732., 20492., 42344., 46216.,  71428., 49448.,  76276., 52680., 57064.,
      29852., 61704., 65576., 101428., 70088., 108196., 74600., 78984.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,   180.,  324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,  1044., 1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760., 3304., 2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024., 3948., 4284.,  0.,     2810.,  3314.,  8668.,  9868.,
      11068., 6938., 7634., 0.,     4300.,  4764.,  10888., 11944., 13000.,
      7436.,  8028., 0.,    6620.,  7084.,  16168., 17224., 18280., 10396.,
      10988., 0.,    4630., 4926.,  10852., 11508., 12164., 6710.,  7070.,
      0.,     6110., 6406., 14132., 14788., 15444., 8510.,  8870.,  0.,
      0.,     0.,    0.,    0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,
      127.,  136.,  103.,  110.,  117.,  124.,  38.,   44.,   98.,   112.,
      126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,
      290.,  312.,  98.,   104.,  238.,  252.,  266.,  280.,  464.,  488.,
      366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,
      433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,  1071., 1134.,
      799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      461.,  488.,  985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312.,
      1971., 2070., 1399., 1468., 1537., 1606., 466.,  488.,  974.,  1020.,
      1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320.,
      1374., 1428., 737.,  776.,  1537., 1618., 1699., 1780., 2646., 2772.,
      1849., 1936., 2871., 3006., 1999., 2092., 2185., 2278., 650.,  680.,
      1342., 1404., 1466., 1528., 2264., 2360., 1566., 1632., 2414., 2516.,
      1666., 1736., 1806., 1876., 950.,  980.,  1962., 2024., 2086., 2148.,
      3224., 3320., 2226., 2292., 3434., 3536., 2366., 2436., 2506., 2576.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   7.,   10.,  13.,  16.,  19.,  22.,  14.,  16.,
      18.,  20.,  0.,   0.,   11.,  12.,  13.,  14.,  37.,  40.,  43.,  46.,
      49.,  52.,  34.,  36.,  38.,  40.,  0.,   0.,   24.,  28.,  32.,  36.,
      86.,  96.,  106., 116., 126., 136., 82.,  88.,  94.,  100., 0.,   0.,
      64.,  68.,  72.,  76.,  186., 196., 206., 216., 226., 236., 142., 148.,
      154., 160., 0.,   0.,   109., 118., 127., 136., 317., 338., 359., 380.,
      401., 422., 244., 256., 268., 280., 0.,   0.,   148., 156., 164., 172.,
      370., 388., 406., 424., 442., 460., 250., 260., 270., 280., 0.,   0.,
      228., 236., 244., 252., 550., 568., 586., 604., 622., 640., 350., 360.,
      370., 380., 0.,   0.,   155., 160., 165., 170., 361., 372., 383., 394.,
      405., 416., 222., 228., 234., 240., 0.,   0.,   205., 210., 215., 220.,
      471., 482., 493., 504., 515., 526., 282., 288., 294., 300., 0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,   1696.,  1800.,
      1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,
      3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,
      6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,
      7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,
      5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,
      3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,  10064.,
      15129., 15903., 10760., 11300., 11840., 12380., 3594.,  3766.,  7520.,
      7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674.,
      9824.,  10248., 10672., 11096., 5683.,  5989.,  11864., 12500., 13136.,
      13772., 20475., 21465., 14324., 15008., 22257., 23319., 15512., 16244.,
      16976., 17708., 5050.,  5286.,  10432., 10920., 11408., 11896., 17626.,
      18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648.,
      7410.,  7646.,  15312., 15800., 16288., 16776., 25186., 25942., 17400.,
      17920., 26854., 27658., 18512., 19064., 19616., 20168.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  120.,  140.,
      95.,   109.,  123.,  137.,  0.,    0.,    65.,   71.,   77.,   83.,
      240.,  260.,  280.,  300.,  320.,  340.,  235.,  249.,  263.,  277.,
      0.,    0.,    142.,  170.,  198.,  226.,  568.,  640.,  712.,  784.,
      856.,  928.,  578.,  622.,  666.,  710.,  0.,    0.,    422.,  450.,
      478.,  506.,  1288., 1360., 1432., 1504., 1576., 1648., 1018., 1062.,
      1106., 1150., 0.,    0.,    731.,  797.,  863.,  929.,  2224., 2380.,
      2536., 2692., 2848., 3004., 1769., 1859., 1949., 2039., 0.,    0.,
      1086., 1146., 1206., 1266., 2744., 2880., 3016., 3152., 3288., 3424.,
      1874., 1950., 2026., 2102., 0.,    0.,    1686., 1746., 1806., 1866.,
      4104., 4240., 4376., 4512., 4648., 4784., 2634., 2710., 2786., 2862.,
      0.,    0.,    1169., 1207., 1245., 1283., 2736., 2820., 2904., 2988.,
      3072., 3156., 1691., 1737., 1783., 1829., 0.,    0.,    1549., 1587.,
      1625., 1663., 3576., 3660., 3744., 3828., 3912., 3996., 2151., 2197.,
      2243., 2289., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   6532.,   6932.,
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      44618.,  47042.,  93196.,  98236.,  103276., 108316., 161046., 168894.,
      112732., 118156., 175230., 183654., 122188., 127996., 133804., 139612.,
      39804.,  41676.,  82248.,  86120.,  89992.,  93864.,  139076., 145076.,
      96296.,  100424., 148532., 154916., 102600., 106984., 111368., 115752.,
      58524.,  60396.,  120968., 124840., 128712., 132584., 199076., 205076.,
      137576., 141704., 212372., 218756., 146440., 150824., 155208., 159592.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  0.,     0.,     430.,   470.,
      510.,   550.,   1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,
      1838.,  1942.,  2046.,  0.,     0.,     940.,   1148.,  1356.,  1564.,
      4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,
      5324.,  0.,     0.,     3020.,  3228.,  3436.,  3644.,  9512.,  10056.,
      10600., 11144., 11688., 12232., 7676.,  8012.,  8348.,  8684.,  0.,
      0.,     5290.,  5794.,  6298.,  6802.,  16556., 17756., 18956., 20156.,
      21356., 22556., 13426., 14122., 14818., 15514., 0.,     0.,     8300.,
      8764.,  9228.,  9692.,  21096., 22152., 23208., 24264., 25320., 26376.,
      14492., 15084., 15676., 16268., 0.,     0.,     12940., 13404., 13868.,
      14332., 31656., 32712., 33768., 34824., 35880., 36936., 20412., 21004.,
      21596., 22188., 0.,     0.,     9070.,  9366.,  9662.,  9958.,  21284.,
      21940., 22596., 23252., 23908., 24564., 13190., 13550., 13910., 14270.,
      0.,     0.,     12030., 12326., 12622., 12918., 27844., 28500., 29156.,
      29812., 30468., 31124., 16790., 17150., 17510., 17870., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,
      89.,   92.,   158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,
      245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  227.,  234.,
      241.,  248.,  70.,   76.,   82.,   88.,   182.,  196.,  210.,  224.,
      238.,  252.,  266.,  280.,  424.,  448.,  472.,  496.,  354.,  372.,
      390.,  408.,  598.,  628.,  658.,  688.,  470.,  492.,  514.,  536.,
      558.,  580.,  602.,  624.,  190.,  196.,  202.,  208.,  462.,  476.,
      490.,  504.,  518.,  532.,  546.,  560.,  904.,  928.,  952.,  976.,
      714.,  732.,  750.,  768.,  1198., 1228., 1258., 1288., 910.,  932.,
      954.,  976.,  998.,  1020., 1042., 1064., 355.,  370.,  385.,  400.,
      833.,  866.,  899.,  932.,  965.,  998.,  1031., 1064., 1638., 1692.,
      1746., 1800., 1259., 1298., 1337., 1376., 2079., 2142., 2205., 2268.,
      1553., 1598., 1643., 1688., 1733., 1778., 1823., 1868., 550.,  564.,
      578.,  592.,  1182., 1212., 1242., 1272., 1302., 1332., 1362., 1392.,
      2080., 2128., 2176., 2224., 1498., 1532., 1566., 1600., 2374., 2428.,
      2482., 2536., 1694., 1732., 1770., 1808., 1846., 1884., 1922., 1960.,
      895.,  922.,  949.,  976.,  1913., 1970., 2027., 2084., 2141., 2198.,
      2255., 2312., 3402., 3492., 3582., 3672., 2435., 2498., 2561., 2624.,
      3843., 3942., 4041., 4140., 2729., 2798., 2867., 2936., 3005., 3074.,
      3143., 3212., 910.,  932.,  954.,  976.,  1902., 1948., 1994., 2040.,
      2086., 2132., 2178., 2224., 3256., 3328., 3400., 3472., 2282., 2332.,
      2382., 2432., 3550., 3628., 3706., 3784., 2478., 2532., 2586., 2640.,
      2694., 2748., 2802., 2856., 1435., 1474., 1513., 1552., 2993., 3074.,
      3155., 3236., 3317., 3398., 3479., 3560., 5166., 5292., 5418., 5544.,
      3611., 3698., 3785., 3872., 5607., 5742., 5877., 6012., 3905., 3998.,
      4091., 4184., 4277., 4370., 4463., 4556., 1270., 1300., 1330., 1360.,
      2622., 2684., 2746., 2808., 2870., 2932., 2994., 3056., 4432., 4528.,
      4624., 4720., 3066., 3132., 3198., 3264., 4726., 4828., 4930., 5032.,
      3262., 3332., 3402., 3472., 3542., 3612., 3682., 3752., 1870., 1900.,
      1930., 1960., 3862., 3924., 3986., 4048., 4110., 4172., 4234., 4296.,
      6352., 6448., 6544., 6640., 4386., 4452., 4518., 4584., 6766., 6868.,
      6970., 7072., 4662., 4732., 4802., 4872., 4942., 5012., 5082., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   0.,    0.,
      0.,    0.,    21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,
      101.,  104.,  66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,
      0.,    0.,    0.,    0.,    44.,   48.,   52.,   56.,   60.,   64.,
      68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,
      242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,
      194.,  200.,  0.,    0.,    0.,    0.,    124.,  128.,  132.,  136.,
      140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,
      422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,
      302.,  308.,  314.,  320.,  0.,    0.,    0.,    0.,    209.,  218.,
      227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,
      697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,
      500.,  512.,  524.,  536.,  548.,  560.,  0.,    0.,    0.,    0.,
      288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,
      758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,
      490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  0.,    0.,
      0.,    0.,    448.,  456.,  464.,  472.,  480.,  488.,  496.,  504.,
      1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244.,
      1262., 1280., 690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,
      0.,    0.,    0.,    0.,    305.,  310.,  315.,  320.,  325.,  330.,
      335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,
      799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,
      474.,  480.,  0.,    0.,    0.,    0.,    405.,  410.,  415.,  420.,
      425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,
      997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,  570.,  576.,
      582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,
      1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,
      1620.,  1672.,  1724.,  1776.,  1828.,  450.,   494.,   538.,   582.,
      1232.,  1336.,  1440.,  1544.,  1648.,  1752.,  1856.,  1960.,  3002.,
      3182.,  3362.,  3542.,  2568.,  2704.,  2840.,  2976.,  4382.,  4610.,
      4838.,  5066.,  3488.,  3656.,  3824.,  3992.,  4160.,  4328.,  4496.,
      4664.,  1330.,  1374.,  1418.,  1462.,  3312.,  3416.,  3520.,  3624.,
      3728.,  3832.,  3936.,  4040.,  6602.,  6782.,  6962.,  7142.,  5288.,
      5424.,  5560.,  5696.,  8942.,  9170.,  9398.,  9626.,  6848.,  7016.,
      7184.,  7352.,  7520.,  7688.,  7856.,  8024.,  2543.,  2657.,  2771.,
      2885.,  6064.,  6316.,  6568.,  6820.,  7072.,  7324.,  7576.,  7828.,
      12123., 12537., 12951., 13365., 9412.,  9712.,  10012., 10312., 15633.,
      16119., 16605., 17091., 11752., 12100., 12448., 12796., 13144., 13492.,
      13840., 14188., 4194.,  4302.,  4410.,  4518.,  9040.,  9272.,  9504.,
      9736.,  9968.,  10200., 10432., 10664., 15962., 16334., 16706., 17078.,
      11528., 11792., 12056., 12320., 18302., 18722., 19142., 19562., 13088.,
      13384., 13680., 13976., 14272., 14568., 14864., 15160., 6839.,  7049.,
      7259.,  7469.,  14656., 15100., 15544., 15988., 16432., 16876., 17320.,
      17764., 26163., 26865., 27567., 28269., 18772., 19264., 19756., 20248.,
      29673., 30447., 31221., 31995., 21112., 21652., 22192., 22732., 23272.,
      23812., 24352., 24892., 7058.,  7230.,  7402.,  7574.,  14768., 15128.,
      15488., 15848., 16208., 16568., 16928., 17288., 25322., 25886., 26450.,
      27014., 17768., 18160., 18552., 18944., 27662., 28274., 28886., 29498.,
      19328., 19752., 20176., 20600., 21024., 21448., 21872., 22296., 11135.,
      11441., 11747., 12053., 23248., 23884., 24520., 25156., 25792., 26428.,
      27064., 27700., 40203., 41193., 42183., 43173., 28132., 28816., 29500.,
      30184., 43713., 44775., 45837., 46899., 30472., 31204., 31936., 32668.,
      33400., 34132., 34864., 35596., 9922.,  10158., 10394., 10630., 20496.,
      20984., 21472., 21960., 22448., 22936., 23424., 23912., 34682., 35438.,
      36194., 36950., 24008., 24528., 25048., 25568., 37022., 37826., 38630.,
      39434., 25568., 26120., 26672., 27224., 27776., 28328., 28880., 29432.,
      14642., 14878., 15114., 15350., 30256., 30744., 31232., 31720., 32208.,
      32696., 33184., 33672., 49802., 50558., 51314., 52070., 34408., 34928.,
      35448., 35968., 53102., 53906., 54710., 55514., 36608., 37160., 37712.,
      38264., 38816., 39368., 39920., 40472.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   29.,   35.,   41.,   47.,   64.,   84.,
      104.,  124.,  144.,  164.,  184.,  204.,  224.,  244.,  264.,  284.,
      179.,  193.,  207.,  221.,  235.,  249.,  263.,  277.,  0.,    0.,
      0.,    0.,    125.,  131.,  137.,  143.,  149.,  155.,  161.,  167.,
      464.,  484.,  504.,  524.,  544.,  564.,  584.,  604.,  624.,  644.,
      664.,  684.,  459.,  473.,  487.,  501.,  515.,  529.,  543.,  557.,
      0.,    0.,    0.,    0.,    262.,  290.,  318.,  346.,  374.,  402.,
      430.,  458.,  1080., 1152., 1224., 1296., 1368., 1440., 1512., 1584.,
      1656., 1728., 1800., 1872., 1122., 1166., 1210., 1254., 1298., 1342.,
      1386., 1430., 0.,    0.,    0.,    0.,    822.,  850.,  878.,  906.,
      934.,  962.,  990.,  1018., 2520., 2592., 2664., 2736., 2808., 2880.,
      2952., 3024., 3096., 3168., 3240., 3312., 2002., 2046., 2090., 2134.,
      2178., 2222., 2266., 2310., 0.,    0.,    0.,    0.,    1411., 1477.,
      1543., 1609., 1675., 1741., 1807., 1873., 4328., 4484., 4640., 4796.,
      4952., 5108., 5264., 5420., 5576., 5732., 5888., 6044., 3469., 3559.,
      3649., 3739., 3829., 3919., 4009., 4099., 0.,    0.,    0.,    0.,
      2126., 2186., 2246., 2306., 2366., 2426., 2486., 2546., 5384., 5520.,
      5656., 5792., 5928., 6064., 6200., 6336., 6472., 6608., 6744., 6880.,
      3690., 3766., 3842., 3918., 3994., 4070., 4146., 4222., 0.,    0.,
      0.,    0.,    3326., 3386., 3446., 3506., 3566., 3626., 3686., 3746.,
      8104., 8240., 8376., 8512., 8648., 8784., 8920., 9056., 9192., 9328.,
      9464., 9600., 5210., 5286., 5362., 5438., 5514., 5590., 5666., 5742.,
      0.,    0.,    0.,    0.,    2309., 2347., 2385., 2423., 2461., 2499.,
      2537., 2575., 5408., 5492., 5576., 5660., 5744., 5828., 5912., 5996.,
      6080., 6164., 6248., 6332., 3347., 3393., 3439., 3485., 3531., 3577.,
      3623., 3669., 0.,    0.,    0.,    0.,    3069., 3107., 3145., 3183.,
      3221., 3259., 3297., 3335., 7088., 7172., 7256., 7340., 7424., 7508.,
      7592., 7676., 7760., 7844., 7928., 8012., 4267., 4313., 4359., 4405.,
      4451., 4497., 4543., 4589., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   7922.,   8234.,   8546.,   8858.,
      7540.,   7812.,   8084.,   8356.,   13418.,  13922.,  14426.,  14930.,
      11204.,  11604.,  12004.,  12404.,  12804.,  13204.,  13604.,  14004.,
      3164.,   3500.,   3836.,   4172.,   8968.,   9768.,   10568.,  11368.,
      12168.,  12968.,  13768.,  14568.,  22468.,  23860.,  25252.,  26644.,
      19496.,  20552.,  21608.,  22664.,  33460.,  35236.,  37012.,  38788.,
      26824.,  28136.,  29448.,  30760.,  32072.,  33384.,  34696.,  36008.,
      9884.,   10220.,  10556.,  10892.,  24968.,  25768.,  26568.,  27368.,
      28168.,  28968.,  29768.,  30568.,  50308.,  51700.,  53092.,  54484.,
      40616.,  41672.,  42728.,  43784.,  68980.,  70756.,  72532.,  74308.,
      53064.,  54376.,  55688.,  57000.,  58312.,  59624.,  60936.,  62248.,
      19162.,  20050.,  20938.,  21826.,  46124.,  48092.,  50060.,  52028.,
      53996.,  55964.,  57932.,  59900.,  93078.,  96318.,  99558.,  102798.,
      72668.,  75020.,  77372.,  79724.,  121086., 124902., 128718., 132534.,
      91340.,  94076.,  96812.,  99548.,  102284., 105020., 107756., 110492.,
      32732.,  33580.,  34428.,  35276.,  70664.,  72488.,  74312.,  76136.,
      77960.,  79784.,  81608.,  83432.,  124996., 127924., 130852., 133780.,
      90408.,  92488.,  94568.,  96648.,  143668., 146980., 150292., 153604.,
      102856., 105192., 107528., 109864., 112200., 114536., 116872., 119208.,
      53434.,  55090.,  56746.,  58402.,  114668., 118172., 121676., 125180.,
      128684., 132188., 135692., 139196., 205110., 210654., 216198., 221742.,
      147356., 151244., 155132., 159020., 233118., 239238., 245358., 251478.,
      166028., 170300., 174572., 178844., 183116., 187388., 191660., 195932.,
      55580.,  56940.,  58300.,  59660.,  116360., 119208., 122056., 124904.,
      127752., 130600., 133448., 136296., 199684., 204148., 208612., 213076.,
      140200., 143304., 146408., 149512., 218356., 223204., 228052., 232900.,
      152648., 156008., 159368., 162728., 166088., 169448., 172808., 176168.,
      87706.,  90130.,  92554.,  94978.,  183212., 188252., 193292., 198332.,
      203372., 208412., 213452., 218492., 317142., 324990., 332838., 340686.,
      222044., 227468., 232892., 238316., 345150., 353574., 361998., 370422.,
      240716., 246524., 252332., 258140., 263948., 269756., 275564., 281372.,
      78428.,  80300.,  82172.,  84044.,  162056., 165928., 169800., 173672.,
      177544., 181416., 185288., 189160., 274372., 280372., 286372., 292372.,
      189992., 194120., 198248., 202376., 293044., 299428., 305812., 312196.,
      202440., 206824., 211208., 215592., 219976., 224360., 228744., 233128.,
      115868., 117740., 119612., 121484., 239496., 243368., 247240., 251112.,
      254984., 258856., 262728., 266600., 394372., 400372., 406372., 412372.,
      272552., 276680., 280808., 284936., 420724., 427108., 433492., 439876.,
      290120., 294504., 298888., 303272., 307656., 312040., 316424., 320808.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   190.,   230.,   270.,   310.,   420.,
      564.,   708.,   852.,   996.,   1140.,  1284.,  1428.,  1572.,  1716.,
      1860.,  2004.,  1318.,  1422.,  1526.,  1630.,  1734.,  1838.,  1942.,
      2046.,  0.,     0.,     0.,     0.,     830.,   870.,   910.,   950.,
      990.,   1030.,  1070.,  1110.,  3300.,  3444.,  3588.,  3732.,  3876.,
      4020.,  4164.,  4308.,  4452.,  4596.,  4740.,  4884.,  3398.,  3502.,
      3606.,  3710.,  3814.,  3918.,  4022.,  4126.,  0.,     0.,     0.,
      0.,     1740.,  1948.,  2156.,  2364.,  2572.,  2780.,  2988.,  3196.,
      7784.,  8328.,  8872.,  9416.,  9960.,  10504., 11048., 11592., 12136.,
      12680., 13224., 13768., 8412.,  8748.,  9084.,  9420.,  9756.,  10092.,
      10428., 10764., 0.,     0.,     0.,     0.,     5900.,  6108.,  6316.,
      6524.,  6732.,  6940.,  7148.,  7356.,  18664., 19208., 19752., 20296.,
      20840., 21384., 21928., 22472., 23016., 23560., 24104., 24648., 15132.,
      15468., 15804., 16140., 16476., 16812., 17148., 17484., 0.,     0.,
      0.,     0.,     10250., 10754., 11258., 11762., 12266., 12770., 13274.,
      13778., 32332., 33532., 34732., 35932., 37132., 38332., 39532., 40732.,
      41932., 43132., 44332., 45532., 26402., 27098., 27794., 28490., 29186.,
      29882., 30578., 31274., 0.,     0.,     0.,     0.,     16300., 16764.,
      17228., 17692., 18156., 18620., 19084., 19548., 41512., 42568., 43624.,
      44680., 45736., 46792., 47848., 48904., 49960., 51016., 52072., 53128.,
      28604., 29196., 29788., 30380., 30972., 31564., 32156., 32748., 0.,
      0.,     0.,     0.,     25580., 26044., 26508., 26972., 27436., 27900.,
      28364., 28828., 62632., 63688., 64744., 65800., 66856., 67912., 68968.,
      70024., 71080., 72136., 73192., 74248., 40444., 41036., 41628., 42220.,
      42812., 43404., 43996., 44588., 0.,     0.,     0.,     0.,     17950.,
      18246., 18542., 18838., 19134., 19430., 19726., 20022., 42148., 42804.,
      43460., 44116., 44772., 45428., 46084., 46740., 47396., 48052., 48708.,
      49364., 26150., 26510., 26870., 27230., 27590., 27950., 28310., 28670.,
      0.,     0.,     0.,     0.,     23870., 24166., 24462., 24758., 25054.,
      25350., 25646., 25942., 55268., 55924., 56580., 57236., 57892., 58548.,
      59204., 59860., 60516., 61172., 61828., 62484., 33350., 33710., 34070.,
      34430., 34790., 35150., 35510., 35870., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476., 985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419., 860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604., 1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   72.,  84.,  201., 228., 393., 306., 339., 192.,
      210., 0.,   106., 117., 256., 280., 454., 332., 360., 195., 210., 0.,
      161., 172., 376., 400., 649., 472., 500., 270., 285., 0.,   112., 119.,
      254., 269., 428., 305., 322., 171., 180., 0.,   147., 154., 329., 344.,
      548., 390., 407., 216., 225., 0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,  152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260., 1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164., 2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428., 5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612., 3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876., 9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060., 5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324., 12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636., 7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692., 9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      489.,  579.,  1416., 1620., 2829., 2232., 2484., 1419., 1557., 0.,
      784.,  868.,  1908., 2092., 3404., 2500., 2716., 1476., 1592., 0.,
      1204., 1288., 2828., 3012., 4904., 3580., 3796., 2056., 2172., 0.,
      851.,  905.,  1936., 2052., 3271., 2336., 2468., 1313., 1383., 0.,
      1121., 1175., 2516., 2632., 4201., 2996., 3128., 1663., 1733., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,    1044.,  2138.,   2020.,  3602.,   2996.,  5066.,
      3972.,  4500.,   1060.,  2840.,   3768.,  6796.,   5720.,  9724.,
      7672.,  12652.,  9624.,  11320.,  3060.,  7480.,   8408.,  14716.,
      11640., 19564.,  14872., 24412.,  18104., 19800.,  6170.,  14380.,
      16732., 28254.,  21580., 35526.,  26428., 42798.,  31276., 34780.,
      10500., 22360.,  24568., 38956.,  27800., 43804.,  31032., 48652.,
      34264., 37240.,  17330., 36700.,  40972., 64614.,  45820., 71886.,
      50668., 79158.,  55516., 60940.,  17940., 37240.,  40728., 63196.,
      43960., 68044.,  47192., 72892.,  50424., 54680.,  28490., 59020.,
      65212., 100974., 70060., 108246., 74908., 115518., 79756., 87100.,
      25380., 52120.,  56888., 87436.,  60120., 92284.,  63352., 97132.,
      66584., 72120.,  36980., 75960.,  80728., 124156., 85240., 130924.,
      89752., 137692., 94264., 99800.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,   0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454.,  1622.,  0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,  0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244.,  6772.,  0.,
      3570., 4266., 10572., 12156., 21390., 17004., 18972., 10890., 11970., 0.,
      6020., 6676., 14712., 16152., 26332., 19384., 21080., 11476., 12388., 0.,
      9300., 9956., 21912., 23352., 38092., 27864., 29560., 16036., 16948., 0.,
      6630., 7054., 15108., 16020., 25562., 18276., 19316., 10286., 10838., 0.,
      8750., 9174., 19668., 20580., 32882., 23476., 24516., 13046., 13598., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,
      127.,  136.,  103.,  110.,  172.,  184.,  133.,  142.,  151.,  160.,
      41.,   48.,   104.,  120.,  136.,  152.,  239.,  266.,  196.,  216.,
      329.,  362.,  256.,  280.,  419.,  458.,  316.,  344.,  372.,  400.,
      111.,  118.,  264.,  280.,  296.,  312.,  509.,  536.,  396.,  416.,
      659.,  692.,  496.,  520.,  809.,  848.,  596.,  624.,  652.,  680.,
      214.,  232.,  491.,  530.,  569.,  608.,  951.,  1014., 719.,  764.,
      1176., 1248., 869.,  920.,  1401., 1482., 1019., 1076., 1133., 1190.,
      341.,  358.,  724.,  760.,  796.,  832.,  1259., 1316., 896.,  936.,
      1409., 1472., 996.,  1040., 1559., 1628., 1096., 1144., 1192., 1240.,
      559.,  592.,  1181., 1250., 1319., 1388., 2076., 2184., 1469., 1544.,
      2301., 2418., 1619., 1700., 2526., 2652., 1769., 1856., 1943., 2030.,
      571.,  598.,  1184., 1240., 1296., 1352., 2009., 2096., 1396., 1456.,
      2159., 2252., 1496., 1560., 2309., 2408., 1596., 1664., 1732., 1800.,
      904.,  952.,  1871., 1970., 2069., 2168., 3201., 3354., 2219., 2324.,
      3426., 3588., 2369., 2480., 3651., 3822., 2519., 2636., 2753., 2870.,
      801.,  838.,  1644., 1720., 1796., 1872., 2759., 2876., 1896., 1976.,
      2909., 3032., 1996., 2080., 3059., 3188., 2096., 2184., 2272., 2360.,
      1171., 1208., 2404., 2480., 2556., 2632., 3929., 4046., 2696., 2776.,
      4139., 4262., 2836., 2920., 4349., 4478., 2976., 3064., 3152., 3240.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,    3.,   4.,    7.,    10.,  13.,  16.,   22.,   28.,  23.,
      28.,  33.,   38.,  21.,   24.,   27.,  30.,  0.,    0.,    11.,  12.,
      13.,  14.,   37.,  40.,   43.,   46.,  82.,  88.,   73.,   78.,  83.,
      88.,  51.,   54.,  57.,   60.,   0.,   0.,   25.,   30.,   35.,  40.,
      92.,  104.,  116., 128.,  209.,  230., 176., 192.,  208.,  224., 123.,
      132., 141.,  150., 0.,    0.,    75.,  80.,  85.,   90.,   212., 224.,
      236., 248.,  419., 440.,  336.,  352., 368., 384.,  213.,  222., 231.,
      240., 0.,    0.,   132.,  144.,  156., 168., 375.,  402.,  429., 456.,
      741., 786.,  579., 612.,  645.,  678., 366., 384.,  402.,  420., 0.,
      0.,   201.,  212., 223.,  234.,  488., 512., 536.,  560.,  869., 908.,
      636., 664.,  692., 720.,  375.,  390., 405., 420.,  0.,    0.,   311.,
      322., 333.,  344., 728.,  752.,  776., 800., 1259., 1298., 916., 944.,
      972., 1000., 525., 540.,  555.,  570., 0.,   0.,    217.,  224., 231.,
      238., 493.,  508., 523.,  538.,  832., 856., 593.,  610.,  627., 644.,
      333., 342.,  351., 360.,  0.,    0.,   287., 294.,  301.,  308., 643.,
      658., 673.,  688., 1072., 1096., 763., 780., 797.,  814.,  423., 432.,
      441., 450.,  0.,   0.,    0.,    0.,   0.,   0.,    0.,    0.,   0.,
      0.,   0.,    0.,   0.,    0.,    0.,   0.,   0.,    0.,    0.,   0.,
      0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   1265.,  1355.,  988.,   1056.,
      1124.,  1192.,  264.,   316.,   700.,   820.,   940.,   1060.,  1684.,
      1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,
      2356.,  2572.,  2788.,  3004.,  784.,   836.,   1900.,  2020.,  2140.,
      2260.,  3724.,  3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,
      6100.,  6400.,  4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,
      3880.,  4180.,  4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,
      6556.,  6952.,  10605., 11235., 7744.,  8188.,  8632.,  9076.,  2604.,
      2736.,  5540.,  5820.,  6100.,  6380.,  9664.,  10108., 6892.,  7204.,
      10852., 11344., 7684.,  8028.,  12040., 12580., 8476.,  8852.,  9228.,
      9604.,  4271.,  4529.,  9040.,  9580.,  10120., 10660., 15951., 16797.,
      11308., 11896., 17733., 18651., 12496., 13132., 19515., 20505., 13684.,
      14368., 15052., 15736., 4424.,  4636.,  9180.,  9620.,  10060., 10500.,
      15604., 16288., 10852., 11324., 16792., 17524., 11644., 12148., 17980.,
      18760., 12436., 12972., 13508., 14044., 7001.,  7379.,  14500., 15280.,
      16060., 16840., 24861., 26067., 17248., 18076., 26643., 27921., 18436.,
      19312., 28425., 29775., 19624., 20548., 21472., 22396., 6244.,  6536.,
      12820., 13420., 14020., 14620., 21544., 22468., 14812., 15444., 22732.,
      23704., 15604., 16268., 23920., 24940., 16396., 17092., 17788., 18484.,
      9164.,  9456.,  18820., 19420., 20020., 20620., 30784., 31708., 21132.,
      21764., 32452., 33424., 22244., 22908., 34120., 35140., 23356., 24052.,
      24748., 25444.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   17.,   23.,   40.,   60.,   80.,   100.,  137.,  179.,
      156.,  192.,  228.,  264.,  149.,  171.,  193.,  215.,  0.,    0.,
      65.,   71.,   77.,   83.,   240.,  260.,  280.,  300.,  557.,  599.,
      516.,  552.,  588.,  624.,  369.,  391.,  413.,  435.,  0.,    0.,
      148.,  184.,  220.,  256.,  612.,  700.,  788.,  876.,  1456., 1612.,
      1260., 1380., 1500., 1620., 900.,  968.,  1036., 1104., 0.,    0.,
      508.,  544.,  580.,  616.,  1492., 1580., 1668., 1756., 3016., 3172.,
      2460., 2580., 2700., 2820., 1580., 1648., 1716., 1784., 0.,    0.,
      909.,  999.,  1089., 1179., 2676., 2880., 3084., 3288., 5397., 5739.,
      4272., 4524., 4776., 5028., 2733., 2871., 3009., 3147., 0.,    0.,
      1504., 1588., 1672., 1756., 3676., 3860., 4044., 4228., 6580., 6880.,
      4836., 5052., 5268., 5484., 2864., 2980., 3096., 3212., 0.,    0.,
      2344., 2428., 2512., 2596., 5516., 5700., 5884., 6068., 9580., 9880.,
      6996., 7212., 7428., 7644., 4024., 4140., 4256., 4372., 0.,    0.,
      1661., 1715., 1769., 1823., 3784., 3900., 4016., 4132., 6401., 6587.,
      4572., 4704., 4836., 4968., 2573., 2643., 2713., 2783., 0.,    0.,
      2201., 2255., 2309., 2363., 4944., 5060., 5176., 5292., 8261., 8447.,
      5892., 6024., 6156., 6288., 3273., 3343., 3413., 3483., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   9682.,   10378.,
      7604.,   8132.,   8660.,   9188.,   1860.,   2260.,   5080.,   6008.,
      6936.,   7864.,   12572.,  14156.,  10680.,  11864.,  18188.,  20156.,
      14424.,  15864.,  23804.,  26156.,  18168.,  19864.,  21560.,  23256.,
      5860.,   6260.,   14360.,  15288.,  16216.,  17144.,  28412.,  29996.,
      22520.,  23704.,  37868.,  39836.,  28824.,  30264.,  47324.,  49676.,
      35128.,  36824.,  38520.,  40216.,  11650.,  12730.,  27260.,  29612.,
      31964.,  34316.,  54078.,  57894.,  41420.,  44156.,  68262.,  72654.,
      50876.,  53996.,  82446.,  87414.,  60332.,  63836.,  67340.,  70844.,
      20340.,  21380.,  43320.,  45528.,  47736.,  49944.,  75692.,  79196.,
      54040.,  56504.,  85148.,  89036.,  60344.,  63064.,  94604.,  98876.,
      66648.,  69624.,  72600.,  75576.,  33370.,  35410.,  70700.,  74972.,
      79244.,  83516.,  124998., 131694., 88700.,  93356.,  139182., 146454.,
      98156.,  103196., 153366., 161214., 107612., 113036., 118460., 123884.,
      34820.,  36500.,  72280.,  75768.,  79256.,  82744.,  122972., 128396.,
      85560.,  89304.,  132428., 138236., 91864.,  95864.,  141884., 148076.,
      98168.,  102424., 106680., 110936., 55090.,  58090.,  114140., 120332.,
      126524., 132716., 195918., 205494., 135980., 142556., 210102., 220254.,
      145436., 152396., 224286., 235014., 154892., 162236., 169580., 176924.,
      49300.,  51620.,  101240., 106008., 110776., 115544., 170252., 177596.,
      117080., 122104., 179708., 187436., 123384., 128664., 189164., 197276.,
      129688., 135224., 140760., 146296., 72500.,  74820.,  148920., 153688.,
      158456., 163224., 243692., 251036., 167320., 172344., 256988., 264716.,
      176184., 181464., 270284., 278396., 185048., 190584., 196120., 201656.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   946.,
      1258.,  1140.,  1412.,  1684.,  1956.,  1118.,  1286.,  1454.,  1622.,
      0.,     0.,     430.,   470.,   510.,   550.,   1700.,  1844.,  1988.,
      2132.,  4066.,  4378.,  3860.,  4132.,  4404.,  4676.,  2798.,  2966.,
      3134.,  3302.,  0.,     0.,     980.,   1252.,  1524.,  1796.,  4408.,
      5080.,  5752.,  6424.,  10796., 11996., 9496.,  10424., 11352., 12280.,
      6868.,  7396.,  7924.,  8452.,  0.,     0.,     3700.,  3972.,  4244.,
      4516.,  11128., 11800., 12472., 13144., 22796., 23996., 18776., 19704.,
      20632., 21560., 12148., 12676., 13204., 13732., 0.,     0.,     6690.,
      7386.,  8082.,  8778.,  20124., 21708., 23292., 24876., 41070., 43734.,
      32748., 34716., 36684., 38652., 21090., 22170., 23250., 24330., 0.,
      0.,     11620., 12276., 12932., 13588., 28504., 29944., 31384., 32824.,
      51164., 53516., 37688., 39384., 41080., 42776., 22372., 23284., 24196.,
      25108., 0.,     0.,     18180., 18836., 19492., 20148., 42904., 44344.,
      45784., 47224., 74684., 77036., 54648., 56344., 58040., 59736., 31492.,
      32404., 33316., 34228., 0.,     0.,     12990., 13414., 13838., 14262.,
      29636., 30548., 31460., 32372., 50194., 51658., 35892., 36932., 37972.,
      39012., 20222., 20774., 21326., 21878., 0.,     0.,     17230., 17654.,
      18078., 18502., 38756., 39668., 40580., 41492., 64834., 66298., 46292.,
      47332., 48372., 49412., 25742., 26294., 26846., 27398., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,   83.,   86.,
      89.,   92.,   158.,  164.,  170.,  176.,  141.,  146.,  151.,  156.,
      245.,  254.,  263.,  272.,  199.,  206.,  213.,  220.,  332.,  344.,
      356.,  368.,  257.,  266.,  275.,  284.,  293.,  302.,  311.,  320.,
      75.,   82.,   89.,   96.,   192.,  208.,  224.,  240.,  256.,  272.,
      288.,  304.,  451.,  478.,  505.,  532.,  372.,  392.,  412.,  432.,
      625.,  658.,  691.,  724.,  488.,  512.,  536.,  560.,  799.,  838.,
      877.,  916.,  604.,  632.,  660.,  688.,  716.,  744.,  772.,  800.,
      215.,  222.,  229.,  236.,  512.,  528.,  544.,  560.,  576.,  592.,
      608.,  624.,  991.,  1018., 1045., 1072., 772.,  792.,  812.,  832.,
      1285., 1318., 1351., 1384., 968.,  992.,  1016., 1040., 1579., 1618.,
      1657., 1696., 1164., 1192., 1220., 1248., 1276., 1304., 1332., 1360.,
      410.,  428.,  446.,  464.,  943.,  982.,  1021., 1060., 1099., 1138.,
      1177., 1216., 1839., 1902., 1965., 2028., 1393., 1438., 1483., 1528.,
      2280., 2352., 2424., 2496., 1687., 1738., 1789., 1840., 2721., 2802.,
      2883., 2964., 1981., 2038., 2095., 2152., 2209., 2266., 2323., 2380.,
      665.,  682.,  699.,  716.,  1412., 1448., 1484., 1520., 1556., 1592.,
      1628., 1664., 2461., 2518., 2575., 2632., 1752., 1792., 1832., 1872.,
      2755., 2818., 2881., 2944., 1948., 1992., 2036., 2080., 3049., 3118.,
      3187., 3256., 2144., 2192., 2240., 2288., 2336., 2384., 2432., 2480.,
      1085., 1118., 1151., 1184., 2293., 2362., 2431., 2500., 2569., 2638.,
      2707., 2776., 4044., 4152., 4260., 4368., 2863., 2938., 3013., 3088.,
      4485., 4602., 4719., 4836., 3157., 3238., 3319., 3400., 4926., 5052.,
      5178., 5304., 3451., 3538., 3625., 3712., 3799., 3886., 3973., 4060.,
      1115., 1142., 1169., 1196., 2312., 2368., 2424., 2480., 2536., 2592.,
      2648., 2704., 3931., 4018., 4105., 4192., 2732., 2792., 2852., 2912.,
      4225., 4318., 4411., 4504., 2928., 2992., 3056., 3120., 4519., 4618.,
      4717., 4816., 3124., 3192., 3260., 3328., 3396., 3464., 3532., 3600.,
      1760., 1808., 1856., 1904., 3643., 3742., 3841., 3940., 4039., 4138.,
      4237., 4336., 6249., 6402., 6555., 6708., 4333., 4438., 4543., 4648.,
      6690., 6852., 7014., 7176., 4627., 4738., 4849., 4960., 7131., 7302.,
      7473., 7644., 4921., 5038., 5155., 5272., 5389., 5506., 5623., 5740.,
      1565., 1602., 1639., 1676., 3212., 3288., 3364., 3440., 3516., 3592.,
      3668., 3744., 5401., 5518., 5635., 5752., 3712., 3792., 3872., 3952.,
      5695., 5818., 5941., 6064., 3908., 3992., 4076., 4160., 5989., 6118.,
      6247., 6376., 4104., 4192., 4280., 4368., 4456., 4544., 4632., 4720.,
      2305., 2342., 2379., 2416., 4732., 4808., 4884., 4960., 5036., 5112.,
      5188., 5264., 7741., 7858., 7975., 8092., 5312., 5392., 5472., 5552.,
      8155., 8278., 8401., 8524., 5588., 5672., 5756., 5840., 8569., 8698.,
      8827., 8956., 5864., 5952., 6040., 6128., 6216., 6304., 6392., 6480.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,
      41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,
      45.,   48.,   51.,   54.,   57.,   60.,   0.,    0.,    0.,    0.,
      21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,
      77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,  170.,  176.,
      141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,  99.,   102.,
      105.,  108.,  111.,  114.,  117.,  120.,  0.,    0.,    0.,    0.,
      45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,   172.,  184.,
      196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,
      336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,
      255.,  264.,  273.,  282.,  291.,  300.,  0.,    0.,    0.,    0.,
      145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,
      436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,
      656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,
      435.,  444.,  453.,  462.,  471.,  480.,  0.,    0.,    0.,    0.,
      252.,  264.,  276.,  288.,  300.,  312.,  324.,  336.,  723.,  750.,
      777.,  804.,  831.,  858.,  885.,  912.,  1437., 1482., 1527., 1572.,
      1125., 1158., 1191., 1224., 1257., 1290., 1323., 1356., 714.,  732.,
      750.,  768.,  786.,  804.,  822.,  840.,  0.,    0.,    0.,    0.,
      391.,  402.,  413.,  424.,  435.,  446.,  457.,  468.,  952.,  976.,
      1000., 1024., 1048., 1072., 1096., 1120., 1699., 1738., 1777., 1816.,
      1244., 1272., 1300., 1328., 1356., 1384., 1412., 1440., 735.,  750.,
      765.,  780.,  795.,  810.,  825.,  840.,  0.,    0.,    0.,    0.,
      611.,  622.,  633.,  644.,  655.,  666.,  677.,  688.,  1432., 1456.,
      1480., 1504., 1528., 1552., 1576., 1600., 2479., 2518., 2557., 2596.,
      1804., 1832., 1860., 1888., 1916., 1944., 1972., 2000., 1035., 1050.,
      1065., 1080., 1095., 1110., 1125., 1140., 0.,    0.,    0.,    0.,
      427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,  971.,  986.,
      1001., 1016., 1031., 1046., 1061., 1076., 1640., 1664., 1688., 1712.,
      1169., 1186., 1203., 1220., 1237., 1254., 1271., 1288., 657.,  666.,
      675.,  684.,  693.,  702.,  711.,  720.,  0.,    0.,    0.,    0.,
      567.,  574.,  581.,  588.,  595.,  602.,  609.,  616.,  1271., 1286.,
      1301., 1316., 1331., 1346., 1361., 1376., 2120., 2144., 2168., 2192.,
      1509., 1526., 1543., 1560., 1577., 1594., 1611., 1628., 837.,  846.,
      855.,  864.,  873.,  882.,  891.,  900.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,
      1076.,  1112.,  1771.,  1837.,  1903.,  1969.,  1464.,  1516.,  1568.,
      1620.,  2461.,  2551.,  2641.,  2731.,  1924.,  1992.,  2060.,  2128.,
      2196.,  2264.,  2332.,  2400.,  488.,   540.,   592.,   644.,   1308.,
      1428.,  1548.,  1668.,  1788.,  1908.,  2028.,  2148.,  3212.,  3416.,
      3620.,  3824.,  2708.,  2860.,  3012.,  3164.,  4592.,  4844.,  5096.,
      5348.,  3628.,  3812.,  3996.,  4180.,  5972.,  6272.,  6572.,  6872.,
      4548.,  4764.,  4980.,  5196.,  5412.,  5628.,  5844.,  6060.,  1528.,
      1580.,  1632.,  1684.,  3708.,  3828.,  3948.,  4068.,  4188.,  4308.,
      4428.,  4548.,  7292.,  7496.,  7700.,  7904.,  5748.,  5900.,  6052.,
      6204.,  9632.,  9884.,  10136., 10388., 7308.,  7492.,  7676.,  7860.,
      11972., 12272., 12572., 12872., 8868.,  9084.,  9300.,  9516.,  9732.,
      9948.,  10164., 10380., 2977.,  3115.,  3253.,  3391.,  6932.,  7232.,
      7532.,  7832.,  8132.,  8432.,  8732.,  9032.,  13713., 14199., 14685.,
      15171., 10472., 10820., 11168., 11516., 17223., 17781., 18339., 18897.,
      12812., 13208., 13604., 14000., 20733., 21363., 21993., 22623., 15152.,
      15596., 16040., 16484., 16928., 17372., 17816., 18260., 5108.,  5240.,
      5372.,  5504.,  10868., 11148., 11428., 11708., 11988., 12268., 12548.,
      12828., 18992., 19436., 19880., 20324., 13548., 13860., 14172., 14484.,
      21332., 21824., 22316., 22808., 15108., 15452., 15796., 16140., 23672.,
      24212., 24752., 25292., 16668., 17044., 17420., 17796., 18172., 18548.,
      18924., 19300., 8347.,  8605.,  8863.,  9121.,  17672., 18212., 18752.,
      19292., 19832., 20372., 20912., 21452., 31263., 32109., 32955., 33801.,
      22172., 22760., 23348., 23936., 34773., 35691., 36609., 37527., 24512.,
      25148., 25784., 26420., 38283., 39273., 40263., 41253., 26852., 27536.,
      28220., 28904., 29588., 30272., 30956., 31640., 8688.,  8900.,  9112.,
      9324.,  18028., 18468., 18908., 19348., 19788., 20228., 20668., 21108.,
      30692., 31376., 32060., 32744., 21348., 21820., 22292., 22764., 33032.,
      33764., 34496., 35228., 22908., 23412., 23916., 24420., 35372., 36152.,
      36932., 37712., 24468., 25004., 25540., 26076., 26612., 27148., 27684.,
      28220., 13717., 14095., 14473., 14851., 28412., 29192., 29972., 30752.,
      31532., 32312., 33092., 33872., 48813., 50019., 51225., 52431., 33872.,
      34700., 35528., 36356., 52323., 53601., 54879., 56157., 36212., 37088.,
      37964., 38840., 55833., 57183., 58533., 59883., 38552., 39476., 40400.,
      41324., 42248., 43172., 44096., 45020., 12268., 12560., 12852., 13144.,
      25188., 25788., 26388., 26988., 27588., 28188., 28788., 29388., 42392.,
      43316., 44240., 45164., 29148., 29780., 30412., 31044., 44732., 45704.,
      46676., 47648., 30708., 31372., 32036., 32700., 47072., 48092., 49112.,
      50132., 32268., 32964., 33660., 34356., 35052., 35748., 36444., 37140.,
      18108., 18400., 18692., 18984., 37188., 37788., 38388., 38988., 39588.,
      40188., 40788., 41388., 60872., 61796., 62720., 63644., 41788., 42420.,
      43052., 43684., 64172., 65144., 66116., 67088., 43988., 44652., 45316.,
      45980., 67472., 68492., 69512., 70532., 46188., 46884., 47580., 48276.,
      48972., 49668., 50364., 51060.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,
      325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,
      536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,
      0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,   149.,
      155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,
      584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,
      1112.,  1148.,  1184.,  1220.,  1256.,  721.,   743.,   765.,   787.,
      809.,   831.,   853.,   875.,   0.,     0.,     0.,     0.,     268.,
      304.,   340.,   376.,   412.,   448.,   484.,   520.,   1156.,  1244.,
      1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,
      3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,
      1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,  0.,
      0.,     0.,     0.,     988.,   1024.,  1060.,  1096.,  1132.,  1168.,
      1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,
      3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,
      5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,
      3448.,  3516.,  3584.,  0.,     0.,     0.,     0.,     1749.,  1839.,
      1929.,  2019.,  2109.,  2199.,  2289.,  2379.,  5196.,  5400.,  5604.,
      5808.,  6012.,  6216.,  6420.,  6624.,  10533., 10875., 11217., 11559.,
      8352.,  8604.,  8856.,  9108.,  9360.,  9612.,  9864.,  10116., 5361.,
      5499.,  5637.,  5775.,  5913.,  6051.,  6189.,  6327.,  0.,     0.,
      0.,     0.,     2944.,  3028.,  3112.,  3196.,  3280.,  3364.,  3448.,
      3532.,  7212.,  7396.,  7580.,  7764.,  7948.,  8132.,  8316.,  8500.,
      12932., 13232., 13532., 13832., 9508.,  9724.,  9940.,  10156., 10372.,
      10588., 10804., 11020., 5640.,  5756.,  5872.,  5988.,  6104.,  6220.,
      6336.,  6452.,  0.,     0.,     0.,     0.,     4624.,  4708.,  4792.,
      4876.,  4960.,  5044.,  5128.,  5212.,  10892., 11076., 11260., 11444.,
      11628., 11812., 11996., 12180., 18932., 19232., 19532., 19832., 13828.,
      14044., 14260., 14476., 14692., 14908., 15124., 15340., 7960.,  8076.,
      8192.,  8308.,  8424.,  8540.,  8656.,  8772.,  0.,     0.,     0.,
      0.,     3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,
      7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  12661.,
      12847., 13033., 13219., 9044.,  9176.,  9308.,  9440.,  9572.,  9704.,
      9836.,  9968.,  5093.,  5163.,  5233.,  5303.,  5373.,  5443.,  5513.,
      5583.,  0.,     0.,     0.,     0.,     4361.,  4415.,  4469.,  4523.,
      4577.,  4631.,  4685.,  4739.,  9800.,  9916.,  10032., 10148., 10264.,
      10380., 10496., 10612., 16381., 16567., 16753., 16939., 11684., 11816.,
      11948., 12080., 12212., 12344., 12476., 12608., 6493.,  6563.,  6633.,
      6703.,  6773.,  6843.,  6913.,  6983.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   7922.,   8234.,   8546.,   8858.,
      7540.,   7812.,   8084.,   8356.,   13418.,  13922.,  14426.,  14930.,
      11204.,  11604.,  12004.,  12404.,  18914.,  19610.,  20306.,  21002.,
      14868.,  15396.,  15924.,  16452.,  16980.,  17508.,  18036.,  18564.,
      3460.,   3860.,   4260.,   4660.,   9560.,   10488.,  11416.,  12344.,
      13272.,  14200.,  15128.,  16056.,  24124.,  25708.,  27292.,  28876.,
      20600.,  21784.,  22968.,  24152.,  35116.,  37084.,  39052.,  41020.,
      27928.,  29368.,  30808.,  32248.,  46108.,  48460.,  50812.,  53164.,
      35256.,  36952.,  38648.,  40344.,  42040.,  43736.,  45432.,  47128.,
      11460.,  11860.,  12260.,  12660.,  28120.,  29048.,  29976.,  30904.,
      31832.,  32760.,  33688.,  34616.,  55804.,  57388.,  58972.,  60556.,
      44280.,  45464.,  46648.,  47832.,  74476.,  76444.,  78412.,  80380.,
      56728.,  58168.,  59608.,  61048.,  93148.,  95500.,  97852.,  100204.,
      69176.,  70872.,  72568.,  74264.,  75960.,  77656.,  79352.,  81048.,
      22610.,  23690.,  24770.,  25850.,  53020.,  55372.,  57724.,  60076.,
      62428.,  64780.,  67132.,  69484.,  105726., 109542., 113358., 117174.,
      81100.,  83836.,  86572.,  89308.,  133734., 138126., 142518., 146910.,
      99772.,  102892., 106012., 109132., 161742., 166710., 171678., 176646.,
      118444., 121948., 125452., 128956., 132460., 135964., 139468., 142972.,
      40020.,  41060.,  42100.,  43140.,  85240.,  87448.,  89656.,  91864.,
      94072.,  96280.,  98488.,  100696., 149164., 152668., 156172., 159676.,
      106520., 108984., 111448., 113912., 167836., 171724., 175612., 179500.,
      118968., 121688., 124408., 127128., 186508., 190780., 195052., 199324.,
      131416., 134392., 137368., 140344., 143320., 146296., 149272., 152248.,
      65450.,  67490.,  69530.,  71570.,  138700., 142972., 147244., 151516.,
      155788., 160060., 164332., 168604., 245766., 252462., 259158., 265854.,
      174460., 179116., 183772., 188428., 273774., 281046., 288318., 295590.,
      193132., 198172., 203212., 208252., 301782., 309630., 317478., 325326.,
      211804., 217228., 222652., 228076., 233500., 238924., 244348., 249772.,
      68580.,  70260.,  71940.,  73620.,  142360., 145848., 149336., 152824.,
      156312., 159800., 163288., 166776., 242524., 247948., 253372., 258796.,
      168760., 172504., 176248., 179992., 261196., 267004., 272812., 278620.,
      181208., 185208., 189208., 193208., 279868., 286060., 292252., 298444.,
      193656., 197912., 202168., 206424., 210680., 214936., 219192., 223448.,
      108290., 111290., 114290., 117290., 224380., 230572., 236764., 242956.,
      249148., 255340., 261532., 267724., 385806., 395382., 404958., 414534.,
      267820., 274396., 280972., 287548., 413814., 423966., 434118., 444270.,
      286492., 293452., 300412., 307372., 441822., 452550., 463278., 474006.,
      305164., 312508., 319852., 327196., 334540., 341884., 349228., 356572.,
      97140.,  99460.,  101780., 104100., 199480., 204248., 209016., 213784.,
      218552., 223320., 228088., 232856., 335884., 343228., 350572., 357916.,
      231000., 236024., 241048., 246072., 354556., 362284., 370012., 377740.,
      243448., 248728., 254008., 259288., 373228., 381340., 389452., 397564.,
      255896., 261432., 266968., 272504., 278040., 283576., 289112., 294648.,
      143540., 145860., 148180., 150500., 294840., 299608., 304376., 309144.,
      313912., 318680., 323448., 328216., 482764., 490108., 497452., 504796.,
      331480., 336504., 341528., 346552., 509116., 516844., 524572., 532300.,
      349048., 354328., 359608., 364888., 535468., 543580., 551692., 559804.,
      366616., 372152., 377688., 383224., 388760., 394296., 399832., 405368.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1682.,   1994.,   2306.,   2618.,   2100.,   2372.,   2644.,   2916.,
      3188.,   3460.,   3732.,   4004.,   2126.,   2294.,   2462.,   2630.,
      2798.,   2966.,   3134.,   3302.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      8628.,   8900.,   9172.,   9444.,   5486.,   5654.,   5822.,   5990.,
      6158.,   6326.,   6494.,   6662.,   0.,      0.,      0.,      0.,
      1780.,   2052.,   2324.,   2596.,   2868.,   3140.,   3412.,   3684.,
      8376.,   9048.,   9720.,   10392.,  11064.,  11736.,  12408.,  13080.,
      20812.,  22012.,  23212.,  24412.,  18392.,  19320.,  20248.,  21176.,
      22104.,  23032.,  23960.,  24888.,  13396.,  13924.,  14452.,  14980.,
      15508.,  16036.,  16564.,  17092.,  0.,      0.,      0.,      0.,
      7220.,   7492.,   7764.,   8036.,   8308.,   8580.,   8852.,   9124.,
      21816.,  22488.,  23160.,  23832.,  24504.,  25176.,  25848.,  26520.,
      44812.,  46012.,  47212.,  48412.,  36952.,  37880.,  38808.,  39736.,
      40664.,  41592.,  42520.,  43448.,  23956.,  24484.,  25012.,  25540.,
      26068.,  26596.,  27124.,  27652.,  0.,      0.,      0.,      0.,
      12930.,  13626.,  14322.,  15018.,  15714.,  16410.,  17106.,  17802.,
      39228.,  40812.,  42396.,  43980.,  45564.,  47148.,  48732.,  50316.,
      80430.,  83094.,  85758.,  88422.,  64236.,  66204.,  68172.,  70140.,
      72108.,  74076.,  76044.,  78012.,  41490.,  42570.,  43650.,  44730.,
      45810.,  46890.,  47970.,  49050.,  0.,      0.,      0.,      0.,
      22820.,  23476.,  24132.,  24788.,  25444.,  26100.,  26756.,  27412.,
      56088.,  57528.,  58968.,  60408.,  61848.,  63288.,  64728.,  66168.,
      100828., 103180., 105532., 107884., 74296.,  75992.,  77688.,  79384.,
      81080.,  82776.,  84472.,  86168.,  44164.,  45076.,  45988.,  46900.,
      47812.,  48724.,  49636.,  50548.,  0.,      0.,      0.,      0.,
      35940.,  36596.,  37252.,  37908.,  38564.,  39220.,  39876.,  40532.,
      84888.,  86328.,  87768.,  89208.,  90648.,  92088.,  93528.,  94968.,
      147868., 150220., 152572., 154924., 108216., 109912., 111608., 113304.,
      115000., 116696., 118392., 120088., 62404.,  63316.,  64228.,  65140.,
      66052.,  66964.,  67876.,  68788.,  0.,      0.,      0.,      0.,
      25710.,  26134.,  26558.,  26982.,  27406.,  27830.,  28254.,  28678.,
      58692.,  59604.,  60516.,  61428.,  62340.,  63252.,  64164.,  65076.,
      99458.,  100922., 102386., 103850., 71124.,  72164.,  73204.,  74244.,
      75284.,  76324.,  77364.,  78404.,  40094.,  40646.,  41198.,  41750.,
      42302.,  42854.,  43406.,  43958.,  0.,      0.,      0.,      0.,
      34190.,  34614.,  35038.,  35462.,  35886.,  36310.,  36734.,  37158.,
      76932.,  77844.,  78756.,  79668.,  80580.,  81492.,  82404.,  83316.,
      128738., 130202., 131666., 133130., 91924.,  92964.,  94004.,  95044.,
      96084.,  97124.,  98164.,  99204.,  51134.,  51686.,  52238.,  52790.,
      53342.,  53894.,  54446.,  54998.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,   70.,   124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,
      192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,
      467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,
      918.,  656.,  1035., 734.,  803.,  510.,  556.,  868.,  608.,  946.,
      660.,  714.,  740.,  786.,  1228., 858.,  1336., 930.,  984.,  504.,
      582.,  892.,  614.,  940.,  646.,  732.,  894.,  972.,  1492., 1024.,
      1570., 1076., 1162., 1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790.,
      1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492.,
      1610., 1828., 1938., 2956., 2010., 3064., 2082., 2200., 952.,  1094.,
      1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155., 1854.,
      2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662., 3152.,
      4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 5.,   10.,  21.,  32.,  43.,  24.,  30.,  30.,  35.,  76.,  87.,
      98.,  54.,  60.,  62.,  74.,  160., 186., 212., 116., 130., 122., 134.,
      290., 316., 342., 186., 200., 182., 194., 420., 446., 472., 256., 270.,
      112., 119., 254., 269., 284., 152., 160., 147., 154., 329., 344., 359.,
      192., 200., 9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,  63.,  132.,
      151., 170., 90.,  100., 110., 130., 272., 314., 356., 188., 210., 210.,
      230., 482., 524., 566., 298., 320., 310., 330., 692., 734., 776., 408.,
      430., 176., 187., 390., 413., 436., 228., 240., 231., 242., 505., 528.,
      551., 288., 300.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  888.,   992.,
      1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,
      4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,
      3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,
      4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,
      6624.,  10322., 7192.,  7616.,  3824.,  4440.,  6806.,  4688.,  7178.,
      4936.,  5616.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      10684., 11704., 17955., 12316., 18873., 12928., 14044., 8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 12940., 14152., 21627., 14764.,
      22545., 15376., 16684., 9912.,  10784., 16442., 11192., 17054., 11600.,
      12536., 14272., 15144., 23102., 15712., 23954., 16280., 17216., 7280.,
      8408.,  12758., 8656.,  13130., 8904.,  10096., 12920., 14048., 21338.,
      14456., 21950., 14864., 16056., 19708., 21496., 32643., 22108., 33561.,
      22720., 24604., 14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      21964., 23944., 36315., 24556., 37233., 25168., 27244., 15928., 17312.,
      26234., 17720., 26846., 18128., 19576., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  29.,
      67.,   140.,  224.,  308.,  173.,  219.,  219.,  257.,  560.,  644.,
      728.,  403.,  449.,  450.,  542.,  1176., 1376., 1576., 866.,  974.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 1370., 1462., 3176.,
      3376., 3576., 1946., 2054., 851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 1121., 1175., 2516., 2632., 2748., 1473., 1535., 53.,   123.,
      252.,  400.,  548.,  293.,  371.,  403.,  473.,  992.,  1140., 1288.,
      683.,  761.,  818.,  974.,  2040., 2368., 2696., 1426., 1598., 1598.,
      1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648.,
      5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,
      7432.,   13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,
      24822.,  19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,
      23592.,  37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,
      61182.,  43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,
      39752.,  43112.,  44680.,  47528.,  74356.,  52040.,  81124.,  56552.,
      59912.,  29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,  83900.,
      92012.,  141174., 96860.,  148446., 101708., 110588., 66152.,  72072.,
      110212., 75304.,  115060., 78536.,  84968.,  101756., 111404., 170262.,
      116252., 177534., 121100., 131516., 78056.,  85000.,  129604., 88232.,
      134452., 91464.,  98920.,  112776., 119720., 182644., 124232., 189412.,
      128744., 136200., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,
      79304.,  101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      155324., 169580., 257526., 174428., 264798., 179276., 194300., 113768.,
      123784., 187780., 127016., 192628., 130248., 140776., 173180., 188972.,
      286614., 193820., 293886., 198668., 215228., 125672., 136712., 207172.,
      139944., 212020., 143176., 154728., 180872., 191912., 290932., 196424.,
      297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  190.,   486.,   1012.,  1668.,  2324.,
      1310.,  1670.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 10620., 11340., 24680., 26248.,
      27816., 15164., 16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,
      9582.,  8750.,  9174.,  19668., 20580., 21492., 11534., 12022., 350.,
      902.,   1844.,  3012.,  4180.,  2238.,  2854.,  3110.,  3662.,  7684.,
      8852.,  10020., 5318.,  5934.,  6300.,  7532.,  15784., 18376., 20968.,
      11100., 12460., 12460., 13692., 28744., 31336., 33928., 17900., 19260.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 10630., 11310.,
      23620., 25044., 26468., 13862., 14606., 14030., 14710., 30740., 32164.,
      33588., 17582., 18326.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      98.,   112.,  126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,
      246.,  268.,  290.,  312.,  238.,  252.,  266.,  280.,  464.,  488.,
      366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  433.,  466.,
      499.,  532.,  846.,  900.,  649.,  688.,  1071., 1134., 799.,  844.,
      889.,  934.,  606.,  636.,  666.,  696.,  1064., 1112., 766.,  800.,
      1214., 1268., 866.,  904.,  942.,  980.,  985.,  1042., 1099., 1156.,
      1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,
      974.,  1020., 1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892.,
      1266., 1320., 1374., 1428., 1434., 1480., 1526., 1572., 2384., 2456.,
      1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968., 930.,  1008.,
      1086., 1164., 1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292.,
      1378., 1464., 1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048.,
      3014., 3140., 2066., 2152., 2238., 2324., 2641., 2770., 2899., 3028.,
      4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622.,
      2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764.,
      2466., 2568., 2670., 2772., 3193., 3346., 3499., 3652., 5346., 5580.,
      3649., 3808., 5571., 5814., 3799., 3964., 4129., 4294., 2446., 2556.,
      2666., 2776., 4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984.,
      3102., 3220., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020.,
      5954., 6128., 4046., 4164., 4282., 4400., 1762., 1904., 2046., 2188.,
      3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616.,
      3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636.,
      3666., 3816., 3966., 4116., 4849., 5074., 5299., 5524., 8046., 8388.,
      5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310., 3550., 3708.,
      3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260., 4066., 4232.,
      4398., 4564., 5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304.,
      9171., 9558., 6199., 6460., 6721., 6982., 3918., 4092., 4266., 4440.,
      6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012.,
      5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584.,
      6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,   4.,   7.,    10.,   13.,   16.,   19.,   22.,
      14.,   16.,   18.,  20.,  11.,   12.,   13.,   14.,   37.,   40.,
      43.,   46.,   49.,  52.,  34.,   36.,   38.,   40.,   24.,   28.,
      32.,   36.,   86.,  96.,  106.,  116.,  126.,  136.,  82.,   88.,
      94.,   100.,  64.,  68.,  72.,   76.,   186.,  196.,  206.,  216.,
      226.,  236.,  142., 148., 154.,  160.,  104.,  108.,  112.,  116.,
      286.,  296.,  306., 316., 326.,  336.,  202.,  208.,  214.,  220.,
      93.,   96.,   99.,  102., 229.,  236.,  243.,  250.,  257.,  264.,
      148.,  152.,  156., 160., 123.,  126.,  129.,  132.,  299.,  306.,
      313.,  320.,  327., 334., 188.,  192.,  196.,  200.,  5.,    10.,
      15.,   20.,   31.,  42.,  53.,   64.,   75.,   86.,   42.,   48.,
      54.,   60.,   55.,  60.,  65.,   70.,   141.,  152.,  163.,  174.,
      185.,  196.,  102., 108., 114.,  120.,  112.,  124.,  136.,  148.,
      294.,  320.,  346., 372., 398.,  424.,  218.,  232.,  246.,  260.,
      232.,  244.,  256., 268., 554.,  580.,  606.,  632.,  658.,  684.,
      358.,  372.,  386., 400., 352.,  364.,  376.,  388.,  814.,  840.,
      866.,  892.,  918., 944., 498.,  512.,  526.,  540.,  217.,  224.,
      231.,  238.,  493., 508., 523.,  538.,  553.,  568.,  296.,  304.,
      312.,  320.,  287., 294., 301.,  308.,  643.,  658.,  673.,  688.,
      703.,  718.,  376., 384., 392.,  400.,  9.,    18.,   27.,   36.,
      55.,   74.,   93.,  112., 131.,  150.,  70.,   80.,   90.,   100.,
      99.,   108.,  117., 126., 245.,  264.,  283.,  302.,  321.,  340.,
      170.,  180.,  190., 200., 200.,  220.,  240.,  260.,  502.,  544.,
      586.,  628.,  670., 712., 354.,  376.,  398.,  420.,  400.,  420.,
      440.,  460.,  922., 964., 1006., 1048., 1090., 1132., 574.,  596.,
      618.,  640.,  600., 620., 640.,  660.,  1342., 1384., 1426., 1468.,
      1510., 1552., 794., 816., 838.,  860.,  341.,  352.,  363.,  374.,
      757.,  780.,  803., 826., 849.,  872.,  444.,  456.,  468.,  480.,
      451.,  462.,  473., 484., 987.,  1010., 1033., 1056., 1079., 1102.,
      564.,  576.,  588., 600.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  1696.,  1800.,  1904.,  2008.,
      3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,  3656.,  3824.,
      3992.,  3128.,  3380.,  3632.,  3884.,  6219.,  6633.,  4820.,  5120.,
      8001.,  8487.,  6008.,  6356.,  6704.,  7052.,  4608.,  4840.,  5072.,
      5304.,  8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,
      7248.,  7544.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,
      10064., 15129., 15903., 10760., 11300., 11840., 12380., 7520.,  7880.,
      8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674., 9824.,
      10248., 10672., 11096., 11120., 11480., 11840., 12200., 18514., 19078.,
      12952., 13344., 20182., 20794., 14064., 14488., 14912., 15336., 7184.,
      7800.,  8416.,  9032.,  12898., 13846., 8888.,  9536.,  13606., 14602.,
      9360.,  10040., 10720., 11400., 13344., 13960., 14576., 15192., 22378.,
      23326., 15368., 16016., 23566., 24562., 16160., 16840., 17520., 18200.,
      20600., 21620., 22640., 23660., 34731., 36297., 23828., 24896., 36513.,
      38151., 25016., 26132., 27248., 28364., 16256., 17000., 17744., 18488.,
      27130., 28270., 18536., 19312., 28318., 29506., 19328., 20136., 20944.,
      21752., 24968., 26180., 27392., 28604., 41859., 43713., 28580., 29840.,
      43641., 45567., 29768., 31076., 32384., 33692., 19168., 20040., 20912.,
      21784., 31882., 33214., 21704., 22608., 33070., 34450., 22496., 23432.,
      24368., 25304., 27888., 28760., 29632., 30504., 45202., 46534., 30744.,
      31648., 46870., 48250., 31856., 32792., 33728., 34664., 13712., 14840.,
      15968., 17096., 24226., 25942., 16440., 17600., 24934., 26698., 16912.,
      18104., 19296., 20488., 24992., 26120., 27248., 28376., 41386., 43102.,
      28040., 29200., 42574., 44338., 28832., 30024., 31216., 32408., 38072.,
      39860., 41648., 43436., 63243., 65961., 42836., 44672., 65025., 67815.,
      44024., 45908., 47792., 49676., 27904., 29160., 30416., 31672., 46138.,
      48046., 31208., 32496., 47326., 49282., 32000., 33320., 34640., 35960.,
      42440., 44420., 46400., 48380., 70371., 73377., 47588., 49616., 72153.,
      75231., 48776., 50852., 52928., 55004., 30816., 32200., 33584., 34968.,
      50890., 52990., 34376., 35792., 52078., 54226., 35168., 36616., 38064.,
      39512., 44656., 46040., 47424., 48808., 71890., 73990., 48536., 49952.,
      73558., 75706., 49648., 51096., 52544., 53992.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,   17.,   23.,   40.,    60.,    80.,    100.,   120.,
      140.,   95.,   109.,  123.,  137.,   65.,    71.,    77.,    83.,
      240.,   260.,  280.,  300.,  320.,   340.,   235.,   249.,   263.,
      277.,   142.,  170.,  198.,  226.,   568.,   640.,   712.,   784.,
      856.,   928.,  578.,  622.,  666.,   710.,   422.,   450.,   478.,
      506.,   1288., 1360., 1432., 1504.,  1576.,  1648.,  1018.,  1062.,
      1106.,  1150., 702.,  730.,  758.,   786.,   2008.,  2080.,  2152.,
      2224.,  2296., 2368., 1458., 1502.,  1546.,  1590.,  677.,   699.,
      721.,   743.,  1688., 1740., 1792.,  1844.,  1896.,  1948.,  1103.,
      1133.,  1163., 1193., 897.,  919.,   941.,   963.,   2208.,  2260.,
      2312.,  2364., 2416., 2468., 1403.,  1433.,  1463.,  1493.,  29.,
      67.,    105.,  143.,  216.,  300.,   384.,   468.,   552.,   636.,
      311.,   357.,  403.,  449.,  409.,   447.,   485.,   523.,   1056.,
      1140.,  1224., 1308., 1392., 1476.,  771.,   817.,   863.,   909.,
      830.,   922.,  1014., 1106., 2200.,  2400.,  2600.,  2800.,  3000.,
      3200.,  1650., 1758., 1866., 1974.,  1750.,  1842.,  1934.,  2026.,
      4200.,  4400., 4600., 4800., 5000.,  5200.,  2730.,  2838.,  2946.,
      3054.,  2670., 2762., 2854., 2946.,  6200.,  6400.,  6600.,  6800.,
      7000.,  7200., 3810., 3918., 4026.,  4134.,  1661.,  1715.,  1769.,
      1823.,  3784., 3900., 4016., 4132.,  4248.,  4364.,  2279.,  2341.,
      2403.,  2465., 2201., 2255., 2309.,  2363.,  4944.,  5060.,  5176.,
      5292.,  5408., 5524., 2899., 2961.,  3023.,  3085.,  53.,    123.,
      193.,   263.,  392.,  540.,  688.,   836.,   984.,   1132.,  527.,
      605.,   683.,  761.,  753.,  823.,   893.,   963.,   1872.,  2020.,
      2168.,  2316., 2464., 2612., 1307.,  1385.,  1463.,  1541.,  1518.,
      1674.,  1830., 1986., 3832., 4160.,  4488.,  4816.,  5144.,  5472.,
      2722.,  2894., 3066., 3238., 3078.,  3234.,  3390.,  3546.,  7112.,
      7440.,  7768., 8096., 8424., 8752.,  4442.,  4614.,  4786.,  4958.,
      4638.,  4794., 4950., 5106., 10392., 10720., 11048., 11376., 11704.,
      12032., 6162., 6334., 6506., 6678.,  2645.,  2731.,  2817.,  2903.,
      5880.,  6060., 6240., 6420., 6600.,  6780.,  3455.,  3549.,  3643.,
      3737.,  3505., 3591., 3677., 3763.,  7680.,  7860.,  8040.,  8220.,
      8400.,  8580., 4395., 4489., 4583.,  4677.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4744.,   5544.,   6344.,   7144.,   11684.,  13076.,  10088.,  11144.,
      17300.,  19076.,  13832.,  15144.,  16456.,  17768.,  12744.,  13544.,
      14344.,  15144.,  25604.,  26996.,  20648.,  21704.,  35060.,  36836.,
      26952.,  28264.,  29576.,  30888.,  23692.,  25660.,  27628.,  29596.,
      47574.,  50814.,  37084.,  39436.,  61758.,  65574.,  46540.,  49276.,
      52012.,  54748.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      58444.,  61948.,  65452.,  68956.,  104310., 109854., 74908.,  78796.,
      118494., 124614., 84364.,  88636.,  92908.,  97180.,  59080.,  61928.,
      64776.,  67624.,  101252., 105716., 71080.,  74184.,  110708., 115556.,
      77384.,  80744.,  84104.,  87464.,  87560.,  90408.,  93256.,  96104.,
      145892., 150356., 102120., 105224., 159188., 164036., 110984., 114344.,
      117704., 121064., 56456.,  61352.,  66248.,  71144.,  101540., 109076.,
      69992.,  75144.,  107156., 115076., 73736.,  79144.,  84552.,  89960.,
      105416., 110312., 115208., 120104., 176900., 184436., 121512., 126664.,
      186356., 194276., 127816., 133224., 138632., 144040., 162700., 170812.,
      178924., 187036., 274518., 286974., 188380., 196876., 288702., 301734.,
      197836., 206716., 215596., 224476., 128584., 134504., 140424., 146344.,
      214724., 223796., 146728., 152904., 224180., 233636., 153032., 159464.,
      165896., 172328., 197452., 207100., 216748., 226396., 331254., 346014.,
      226204., 236236., 345438., 360774., 235660., 246076., 256492., 266908.,
      151752., 158696., 165640., 172584., 252548., 263156., 171944., 179144.,
      262004., 272996., 178248., 185704., 193160., 200616., 221192., 228136.,
      235080., 242024., 358628., 369236., 243944., 251144., 371924., 382916.,
      252808., 260264., 267720., 275176., 108168., 117160., 126152., 135144.,
      191396., 205076., 129896., 139144., 197012., 211076., 133640., 143144.,
      152648., 162152., 198088., 207080., 216072., 225064., 328196., 341876.,
      222376., 231624., 337652., 351716., 228680., 238184., 247688., 257192.,
      301708., 315964., 330220., 344476., 501462., 523134., 339676., 354316.,
      515646., 537894., 349132., 364156., 379180., 394204., 221256., 231272.,
      241288., 251304., 366020., 381236., 247592., 257864., 375476., 391076.,
      253896., 264424., 274952., 285480., 336460., 352252., 368044., 383836.,
      558198., 582174., 377500., 393676., 572382., 596934., 386956., 403516.,
      420076., 436636., 244424., 255464., 266504., 277544., 403844., 420596.,
      272808., 284104., 413300., 430436., 279112., 290664., 302216., 313768.,
      354824., 365864., 376904., 387944., 571364., 588116., 385768., 397064.,
      584660., 601796., 394632., 406184., 417736., 429288.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  430.,   470.,   510.,   550.,
      1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,
      2046.,  940.,   1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,
      6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,
      3644.,  9512.,  10056., 10600., 11144., 11688., 12232., 7676.,  8012.,
      8348.,  8684.,  5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040.,
      16584., 17128., 17672., 11036., 11372., 11708., 12044., 5150.,  5318.,
      5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932., 8502.,
      8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334.,  16932., 17332.,
      17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518., 190.,
      486.,   782.,   1078.,  1604.,  2260.,  2916.,  3572.,  4228.,  4884.,
      2390.,  2750.,  3110.,  3470.,  3150.,  3446.,  3742.,  4038.,  8164.,
      8820.,  9476.,  10132., 10788., 11444., 5990.,  6350.,  6710.,  7070.,
      6380.,  7100.,  7820.,  8540.,  17000., 18568., 20136., 21704., 23272.,
      24840., 12828., 13676., 14524., 15372., 13580., 14300., 15020., 15740.,
      32680., 34248., 35816., 37384., 38952., 40520., 21308., 22156., 23004.,
      23852., 20780., 21500., 22220., 22940., 48360., 49928., 51496., 53064.,
      54632., 56200., 29788., 30636., 31484., 32332., 12990., 13414., 13838.,
      14262., 29636., 30548., 31460., 32372., 33284., 34196., 17878., 18366.,
      18854., 19342., 17230., 17654., 18078., 18502., 38756., 39668., 40580.,
      41492., 42404., 43316., 22758., 23246., 23734., 24222., 350.,   902.,
      1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,  4086.,
      4702.,  5318.,  5934.,  5870.,  6422.,  6974.,  7526.,  14628., 15796.,
      16964., 18132., 19300., 20468., 10246., 10862., 11478., 12094., 11820.,
      13052., 14284., 15516., 29928., 32520., 35112., 37704., 40296., 42888.,
      21340., 22700., 24060., 25420., 24140., 25372., 26604., 27836., 55848.,
      58440., 61032., 63624., 66216., 68808., 34940., 36300., 37660., 39020.,
      36460., 37692., 38924., 40156., 81768., 84360., 86952., 89544., 92136.,
      94728., 48540., 49900., 51260., 52620., 20830., 21510., 22190., 22870.,
      46340., 47764., 49188., 50612., 52036., 53460., 27254., 27998., 28742.,
      29486., 27630., 28310., 28990., 29670., 60580., 62004., 63428., 64852.,
      66276., 67700., 34694., 35438., 36182., 36926.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,
      448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,
      658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,
      624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,
      904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,   1198.,
      1228.,  1258.,  1288.,  910.,   932.,   954.,   976.,   998.,   1020.,
      1042.,  1064.,  833.,   866.,   899.,   932.,   965.,   998.,   1031.,
      1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,
      2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,
      1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,  1332.,
      1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,
      1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,
      1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,  2141.,
      2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,
      2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,
      2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,  2040.,
      2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,  2282.,
      2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,  2532.,
      2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2822.,  2868.,  2914.,
      2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,  4912.,
      3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,  3558.,
      3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,  1782.,  1860.,
      1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,  3328.,  3448.,
      3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,  3634.,  3760.,
      2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,  2928.,  3342.,
      3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,
      5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,
      6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,
      5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,  6056.,  8694.,
      8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,  9135.,  9342.,
      9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,  6962.,  7103.,
      7244.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,
      6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,
      7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,
      5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,  6998.,  7151.,
      7304.,  10458., 10692., 10926., 11160., 7139.,  7298.,  7457.,  7616.,
      10899., 11142., 11385., 11628., 7433.,  7598.,  7763.,  7928.,  8093.,
      8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,
      5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,
      5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,
      6086.,  6204.,  6322.,  6440.,  6982.,  7092.,  7202.,  7312.,  7422.,
      7532.,  7642.,  7752.,  11320., 11488., 11656., 11824., 7698.,  7812.,
      7926.,  8040.,  11734., 11908., 12082., 12256., 7974.,  8092.,  8210.,
      8328.,  8446.,  8564.,  8682.,  8800.,  3382.,  3524.,  3666.,  3808.,
      3950.,  4092.,  4234.,  4376.,  5992.,  6208.,  6424.,  6640.,  4066.,
      4212.,  4358.,  4504.,  6166.,  6388.,  6610.,  6832.,  4182.,  4332.,
      4482.,  4632.,  4782.,  4932.,  5082.,  5232.,  6222.,  6364.,  6506.,
      6648.,  6790.,  6932.,  7074.,  7216.,  10312., 10528., 10744., 10960.,
      6986.,  7132.,  7278.,  7424.,  10606., 10828., 11050., 11272., 7182.,
      7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  9473.,  9698.,
      9923.,  10148., 10373., 10598., 10823., 11048., 15750., 16092., 16434.,
      16776., 10667., 10898., 11129., 11360., 16191., 16542., 16893., 17244.,
      10961., 11198., 11435., 11672., 11909., 12146., 12383., 12620., 6942.,
      7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048.,  11488., 11728.,
      11968., 12208., 7770.,  7932.,  8094.,  8256.,  11782., 12028., 12274.,
      12520., 7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128.,
      10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296., 17514.,
      17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955., 18342.,
      18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442., 13703.,
      13964., 7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880.,
      12664., 12928., 13192., 13456., 8554.,  8732.,  8910.,  9088.,  12958.,
      13228., 13498., 13768., 8750.,  8932.,  9114.,  9296.,  9478.,  9660.,
      9842.,  10024., 11142., 11316., 11490., 11664., 11838., 12012., 12186.,
      12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648.,
      18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118.,
      13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,
      23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,
      83.,   86.,   89.,   92.,   95.,   98.,   101.,  104.,  66.,   68.,
      70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,
      60.,   64.,   68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,
      222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,
      182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,
      148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,
      442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,
      314.,  320.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,
      562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,
      662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,
      183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,
      465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,
      292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  243.,  246.,
      249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,
      619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,
      380.,  384.,  388.,  392.,  396.,  400.,  5.,    10.,   15.,   20.,
      25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,   106.,
      117.,  128.,  139.,  150.,  161.,  172.,  78.,   84.,   90.,   96.,
      102.,  108.,  114.,  120.,  105.,  110.,  115.,  120.,  125.,  130.,
      135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,
      359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,
      234.,  240.,  212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,
      562.,  588.,  614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,
      822.,  848.,  422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,
      452.,  464.,  476.,  488.,  500.,  512.,  524.,  536.,  1082., 1108.,
      1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,
      702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,  692.,  704.,
      716.,  728.,  740.,  752.,  764.,  776.,  1602., 1628., 1654., 1680.,
      1706., 1732., 1758., 1784., 1810., 1836., 1862., 1888., 982.,  996.,
      1010., 1024., 1038., 1052., 1066., 1080., 427.,  434.,  441.,  448.,
      455.,  462.,  469.,  476.,  971.,  986.,  1001., 1016., 1031., 1046.,
      1061., 1076., 1091., 1106., 1121., 1136., 584.,  592.,  600.,  608.,
      616.,  624.,  632.,  640.,  567.,  574.,  581.,  588.,  595.,  602.,
      609.,  616.,  1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376.,
      1391., 1406., 1421., 1436., 744.,  752.,  760.,  768.,  776.,  784.,
      792.,  800.,  9.,    18.,   27.,   36.,   45.,   54.,   63.,   72.,
      91.,   110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,
      281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,
      189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,
      509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,
      330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,  380.,  400.,
      420.,  440.,  460.,  480.,  500.,  520.,  962.,  1004., 1046., 1088.,
      1130., 1172., 1214., 1256., 1298., 1340., 1382., 1424., 686.,  708.,
      730.,  752.,  774.,  796.,  818.,  840.,  780.,  800.,  820.,  840.,
      860.,  880.,  900.,  920.,  1802., 1844., 1886., 1928., 1970., 2012.,
      2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192.,
      1214., 1236., 1258., 1280., 1180., 1200., 1220., 1240., 1260., 1280.,
      1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936.,
      2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676.,
      1698., 1720., 671.,  682.,  693.,  704.,  715.,  726.,  737.,  748.,
      1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698.,
      1721., 1744., 876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,
      891.,  902.,  913.,  924.,  935.,  946.,  957.,  968.,  1951., 1974.,
      1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204.,
      1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1232.,   1336.,   1440.,   1544.,   1648.,   1752.,   1856.,   1960.,
      3002.,   3182.,   3362.,   3542.,   2568.,   2704.,   2840.,   2976.,
      4382.,   4610.,   4838.,   5066.,   3488.,   3656.,   3824.,   3992.,
      4160.,   4328.,   4496.,   4664.,   3312.,   3416.,   3520.,   3624.,
      3728.,   3832.,   3936.,   4040.,   6602.,   6782.,   6962.,   7142.,
      5288.,   5424.,   5560.,   5696.,   8942.,   9170.,   9398.,   9626.,
      6848.,   7016.,   7184.,   7352.,   7520.,   7688.,   7856.,   8024.,
      6064.,   6316.,   6568.,   6820.,   7072.,   7324.,   7576.,   7828.,
      12123.,  12537.,  12951.,  13365.,  9412.,   9712.,   10012.,  10312.,
      15633.,  16119.,  16605.,  17091.,  11752.,  12100.,  12448.,  12796.,
      13144.,  13492.,  13840.,  14188.,  9040.,   9272.,   9504.,   9736.,
      9968.,   10200.,  10432.,  10664.,  15962.,  16334.,  16706.,  17078.,
      11528.,  11792.,  12056.,  12320.,  18302.,  18722.,  19142.,  19562.,
      13088.,  13384.,  13680.,  13976.,  14272.,  14568.,  14864.,  15160.,
      14656.,  15100.,  15544.,  15988.,  16432.,  16876.,  17320.,  17764.,
      26163.,  26865.,  27567.,  28269.,  18772.,  19264.,  19756.,  20248.,
      29673.,  30447.,  31221.,  31995.,  21112.,  21652.,  22192.,  22732.,
      23272.,  23812.,  24352.,  24892.,  14768.,  15128.,  15488.,  15848.,
      16208.,  16568.,  16928.,  17288.,  25322.,  25886.,  26450.,  27014.,
      17768.,  18160.,  18552.,  18944.,  27662.,  28274.,  28886.,  29498.,
      19328.,  19752.,  20176.,  20600.,  21024.,  21448.,  21872.,  22296.,
      21968.,  22328.,  22688.,  23048.,  23408.,  23768.,  24128.,  24488.,
      36602.,  37166.,  37730.,  38294.,  25608.,  26000.,  26392.,  26784.,
      39902.,  40514.,  41126.,  41738.,  27808.,  28232.,  28656.,  29080.,
      29504.,  29928.,  30352.,  30776.,  13904.,  14520.,  15136.,  15752.,
      16368.,  16984.,  17600.,  18216.,  25082.,  26030.,  26978.,  27926.,
      17288.,  17936.,  18584.,  19232.,  26462.,  27458.,  28454.,  29450.,
      18208.,  18888.,  19568.,  20248.,  20928.,  21608.,  22288.,  22968.,
      26224.,  26840.,  27456.,  28072.,  28688.,  29304.,  29920.,  30536.,
      44042.,  44990.,  45938.,  46886.,  30248.,  30896.,  31544.,  32192.,
      46382.,  47378.,  48374.,  49370.,  31808.,  32488.,  33168.,  33848.,
      34528.,  35208.,  35888.,  36568.,  40432.,  41452.,  42472.,  43492.,
      44512.,  45532.,  46552.,  47572.,  68283.,  69849.,  71415.,  72981.,
      46852.,  47920.,  48988.,  50056.,  71793.,  73431.,  75069.,  76707.,
      49192.,  50308.,  51424.,  52540.,  53656.,  54772.,  55888.,  57004.,
      31952.,  32696.,  33440.,  34184.,  34928.,  35672.,  36416.,  37160.,
      53402.,  54542.,  55682.,  56822.,  36488.,  37264.,  38040.,  38816.,
      55742.,  56930.,  58118.,  59306.,  38048.,  38856.,  39664.,  40472.,
      41280.,  42088.,  42896.,  43704.,  49024.,  50236.,  51448.,  52660.,
      53872.,  55084.,  56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212.,  57472.,  58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552.,  59860.,  61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      37680.,  38552.,  39424.,  40296.,  41168.,  42040.,  42912.,  43784.,
      62762.,  64094.,  65426.,  66758.,  42728.,  43632.,  44536.,  45440.,
      65102.,  66482.,  67862.,  69242.,  44288.,  45224.,  46160.,  47096.,
      48032.,  48968.,  49904.,  50840.,  55120.,  55992.,  56864.,  57736.,
      58608.,  59480.,  60352.,  61224.,  89402.,  90734.,  92066.,  93398.,
      60808.,  61712.,  62616.,  63520.,  92702.,  94082.,  95462.,  96842.,
      63008.,  63944.,  64880.,  65816.,  66752.,  67688.,  68624.,  69560.,
      26576.,  27704.,  28832.,  29960.,  31088.,  32216.,  33344.,  34472.,
      47162.,  48878.,  50594.,  52310.,  32008.,  33168.,  34328.,  35488.,
      48542.,  50306.,  52070.,  53834.,  32928.,  34120.,  35312.,  36504.,
      37696.,  38888.,  40080.,  41272.,  49136.,  50264.,  51392.,  52520.,
      53648.,  54776.,  55904.,  57032.,  81482.,  83198.,  84914.,  86630.,
      55208.,  56368.,  57528.,  58688.,  83822.,  85586.,  87350.,  89114.,
      56768.,  57960.,  59152.,  60344.,  61536.,  62728.,  63920.,  65112.,
      74800.,  76588.,  78376.,  80164.,  81952.,  83740.,  85528.,  87316.,
      124443., 127161., 129879., 132597., 84292.,  86128.,  87964.,  89800.,
      127953., 130743., 133533., 136323., 86632.,  88516.,  90400.,  92284.,
      94168.,  96052.,  97936.,  99820.,  54864.,  56120.,  57376.,  58632.,
      59888.,  61144.,  62400.,  63656.,  90842.,  92750.,  94658.,  96566.,
      61448.,  62736.,  64024.,  65312.,  93182.,  95138.,  97094.,  99050.,
      63008.,  64328.,  65648.,  66968.,  68288.,  69608.,  70928.,  72248.,
      83392.,  85372.,  87352.,  89332.,  91312.,  93292.,  95272.,  97252.,
      138483., 141489., 144495., 147501., 93652.,  95680.,  97708.,  99736.,
      141993., 145071., 148149., 151227., 95992.,  98068.,  100144., 102220.,
      104296., 106372., 108448., 110524., 60592.,  61976.,  63360.,  64744.,
      66128.,  67512.,  68896.,  70280.,  100202., 102302., 104402., 106502.,
      67688.,  69104.,  70520.,  71936.,  102542., 104690., 106838., 108986.,
      69248.,  70696.,  72144.,  73592.,  75040.,  76488.,  77936.,  79384.,
      88272.,  89656.,  91040.,  92424.,  93808.,  95192.,  96576.,  97960.,
      142202., 144302., 146402., 148502., 96008.,  97424.,  98840.,  100256.,
      145502., 147650., 149798., 151946., 98208.,  99656.,  101104., 102552.,
      104000., 105448., 106896., 108344.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,
      464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,
      644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,
      543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,
      458.,   1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,
      1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,
      1342.,  1386.,  1430.,  822.,   850.,   878.,   906.,   934.,   962.,
      990.,   1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,
      3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,
      2178.,  2222.,  2266.,  2310.,  1382.,  1410.,  1438.,  1466.,  1494.,
      1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,
      4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,
      3014.,  3058.,  3102.,  3146.,  3190.,  1337.,  1359.,  1381.,  1403.,
      1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,
      3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,
      2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  1777.,  1799.,  1821.,
      1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,
      4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,
      2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,  29.,    67.,
      105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,   536.,
      620.,   704.,   788.,   872.,   956.,   1040.,  1124.,  1208.,  1292.,
      587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,   789.,
      827.,   865.,   903.,   941.,   979.,   1017.,  1055.,  2048.,  2132.,
      2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,  2888.,
      2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,  1829.,
      1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,
      4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,
      6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,
      3974.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,
      8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848.,
      10048., 10248., 10448., 5378.,  5486.,  5594.,  5702.,  5810.,  5918.,
      6026.,  6134.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,
      5914.,  12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648.,
      13848., 14048., 14248., 14448., 7538.,  7646.,  7754.,  7862.,  7970.,
      8078.,  8186.,  8294.,  3281.,  3335.,  3389.,  3443.,  3497.,  3551.,
      3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,
      8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,
      4759.,  4821.,  4883.,  4945.,  4361.,  4415.,  4469.,  4523.,  4577.,
      4631.,  4685.,  4739.,  9800.,  9916.,  10032., 10148., 10264., 10380.,
      10496., 10612., 10728., 10844., 10960., 11076., 5751.,  5813.,  5875.,
      5937.,  5999.,  6061.,  6123.,  6185.,  53.,    123.,   193.,   263.,
      333.,   403.,   473.,   543.,   672.,   820.,   968.,   1116.,  1264.,
      1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,  995.,   1073.,
      1151.,  1229.,  1307.,  1385.,  1463.,  1541.,  1453.,  1523.,  1593.,
      1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,
      4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,
      2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,  2918.,  3074.,
      3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,  8072.,
      8400.,  8728.,  9056.,  9384.,  9712.,  10040., 10368., 10696., 11024.,
      5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,  6038.,
      6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130.,  13976., 14304.,
      14632., 14960., 15288., 15616., 15944., 16272., 16600., 16928., 17256.,
      17584., 8754.,  8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,
      9158.,  9314.,  9470.,  9626.,  9782.,  9938.,  10094., 10250., 20536.,
      20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488.,
      23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226.,
      13398., 5225.,  5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827.,
      11624., 11804., 11984., 12164., 12344., 12524., 12704., 12884., 13064.,
      13244., 13424., 13604., 6839.,  6933.,  7027.,  7121.,  7215.,  7309.,
      7403.,  7497.,  6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,
      7547.,  15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484.,
      16664., 16844., 17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,
      9189.,  9283.,  9377.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8968.,   9768.,    10568.,   11368.,   12168.,   12968.,   13768.,
      14568.,  22468.,   23860.,   25252.,   26644.,   19496.,   20552.,
      21608.,  22664.,   33460.,   35236.,   37012.,   38788.,   26824.,
      28136.,  29448.,   30760.,   32072.,   33384.,   34696.,   36008.,
      24968.,  25768.,   26568.,   27368.,   28168.,   28968.,   29768.,
      30568.,  50308.,   51700.,   53092.,   54484.,   40616.,   41672.,
      42728.,  43784.,   68980.,   70756.,   72532.,   74308.,   53064.,
      54376.,  55688.,   57000.,   58312.,   59624.,   60936.,   62248.,
      46124.,  48092.,   50060.,   52028.,   53996.,   55964.,   57932.,
      59900.,  93078.,   96318.,   99558.,   102798.,  72668.,   75020.,
      77372.,  79724.,   121086.,  124902.,  128718.,  132534.,  91340.,
      94076.,  96812.,   99548.,   102284.,  105020.,  107756.,  110492.,
      70664.,  72488.,   74312.,   76136.,   77960.,   79784.,   81608.,
      83432.,  124996.,  127924.,  130852.,  133780.,  90408.,   92488.,
      94568.,  96648.,   143668.,  146980.,  150292.,  153604.,  102856.,
      105192., 107528.,  109864.,  112200.,  114536.,  116872.,  119208.,
      114668., 118172.,  121676.,  125180.,  128684.,  132188.,  135692.,
      139196., 205110.,  210654.,  216198.,  221742.,  147356.,  151244.,
      155132., 159020.,  233118.,  239238.,  245358.,  251478.,  166028.,
      170300., 174572.,  178844.,  183116.,  187388.,  191660.,  195932.,
      116360., 119208.,  122056.,  124904.,  127752.,  130600.,  133448.,
      136296., 199684.,  204148.,  208612.,  213076.,  140200.,  143304.,
      146408., 149512.,  218356.,  223204.,  228052.,  232900.,  152648.,
      156008., 159368.,  162728.,  166088.,  169448.,  172808.,  176168.,
      173320., 176168.,  179016.,  181864.,  184712.,  187560.,  190408.,
      193256., 288964.,  293428.,  297892.,  302356.,  202280.,  205384.,
      208488., 211592.,  315316.,  320164.,  325012.,  329860.,  219848.,
      223208., 226568.,  229928.,  233288.,  236648.,  240008.,  243368.,
      109832., 114728.,  119624.,  124520.,  129416.,  134312.,  139208.,
      144104., 198340.,  205876.,  213412.,  220948.,  136744.,  141896.,
      147048., 152200.,  209332.,  217252.,  225172.,  233092.,  144072.,
      149480., 154888.,  160296.,  165704.,  171112.,  176520.,  181928.,
      207752., 212648.,  217544.,  222440.,  227336.,  232232.,  237128.,
      242024., 349060.,  356596.,  364132.,  371668.,  239784.,  244936.,
      250088., 255240.,  367732.,  375652.,  383572.,  391492.,  252232.,
      257640., 263048.,  268456.,  273864.,  279272.,  284680.,  290088.,
      320300., 328412.,  336524.,  344636.,  352748.,  360860.,  368972.,
      377084., 541206.,  553662.,  566118.,  578574.,  371420.,  379916.,
      388412., 396908.,  569214.,  582246.,  595278.,  608310.,  390092.,
      398972., 407852.,  416732.,  425612.,  434492.,  443372.,  452252.,
      253448., 259368.,  265288.,  271208.,  277128.,  283048.,  288968.,
      294888., 423748.,  432820.,  441892.,  450964.,  289576.,  295752.,
      301928., 308104.,  442420.,  451876.,  461332.,  470788.,  302024.,
      308456., 314888.,  321320.,  327752.,  334184.,  340616.,  347048.,
      388844., 398492.,  408140.,  417788.,  427436.,  437084.,  446732.,
      456380., 653238.,  667998.,  682758.,  697518.,  446108.,  456140.,
      466172., 476204.,  681246.,  696582.,  711918.,  727254.,  464780.,
      475196., 485612.,  496028.,  506444.,  516860.,  527276.,  537692.,
      299144., 306088.,  313032.,  319976.,  326920.,  333864.,  340808.,
      347752., 498436.,  509044.,  519652.,  530260.,  339368.,  346568.,
      353768., 360968.,  517108.,  528100.,  539092.,  550084.,  351816.,
      359272., 366728.,  374184.,  381640.,  389096.,  396552.,  404008.,
      438024., 444968.,  451912.,  458856.,  465800.,  472744.,  479688.,
      486632., 710596.,  721204.,  731812.,  742420.,  483368.,  490568.,
      497768., 504968.,  736948.,  747940.,  758932.,  769924.,  500936.,
      508392., 515848.,  523304.,  530760.,  538216.,  545672.,  553128.,
      210696., 219688.,  228680.,  237672.,  246664.,  255656.,  264648.,
      273640., 374212.,  387892.,  401572.,  415252.,  253992.,  263240.,
      272488., 281736.,  385204.,  399268.,  413332.,  427396.,  261320.,
      270824., 280328.,  289832.,  299336.,  308840.,  318344.,  327848.,
      390536., 399528.,  408520.,  417512.,  426504.,  435496.,  444488.,
      453480., 647812.,  661492.,  675172.,  688852.,  438952.,  448200.,
      457448., 466696.,  666484.,  680548.,  694612.,  708676.,  451400.,
      460904., 470408.,  479912.,  489416.,  498920.,  508424.,  517928.,
      594476., 608732.,  622988.,  637244.,  651500.,  665756.,  680012.,
      694268., 989334.,  1011006., 1032678., 1054350., 670172.,  684812.,
      699452., 714092.,  1017342., 1039590., 1061838., 1084086., 688844.,
      703868., 718892.,  733916.,  748940.,  763964.,  778988.,  794012.,
      436232., 446248.,  456264.,  466280.,  476296.,  486312.,  496328.,
      506344., 722500.,  737716.,  752932.,  768148.,  488744.,  499016.,
      509288., 519560.,  741172.,  756772.,  772372.,  787972.,  501192.,
      511720., 522248.,  532776.,  543304.,  553832.,  564360.,  574888.,
      663020., 678812.,  694604.,  710396.,  726188.,  741980.,  757772.,
      773564., 1101366., 1125342., 1149318., 1173294., 744860.,  761036.,
      777212., 793388.,  1129374., 1153926., 1178478., 1203030., 763532.,
      780092., 796652.,  813212.,  829772.,  846332.,  862892.,  879452.,
      481928., 492968.,  504008.,  515048.,  526088.,  537128.,  548168.,
      559208., 797188.,  813940.,  830692.,  847444.,  538536.,  549832.,
      561128., 572424.,  815860.,  832996.,  850132.,  867268.,  550984.,
      562536., 574088.,  585640.,  597192.,  608744.,  620296.,  631848.,
      702728., 713768.,  724808.,  735848.,  746888.,  757928.,  768968.,
      780008., 1132228., 1148980., 1165732., 1182484., 764456.,  775752.,
      787048., 798344.,  1158580., 1175716., 1192852., 1209988., 782024.,
      793576., 805128.,  816680.,  828232.,  839784.,  851336.,  862888.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   830.,    870.,    910.,    950.,
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   4452.,   4596.,   4740.,   4884.,
      3398.,   3502.,   3606.,   3710.,   3814.,   3918.,   4022.,   4126.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  5900.,   6108.,   6316.,   6524.,
      6732.,   6940.,   7148.,   7356.,   18664.,  19208.,  19752.,  20296.,
      20840.,  21384.,  21928.,  22472.,  23016.,  23560.,  24104.,  24648.,
      15132.,  15468.,  15804.,  16140.,  16476.,  16812.,  17148.,  17484.,
      10060.,  10268.,  10476.,  10684.,  10892.,  11100.,  11308.,  11516.,
      29544.,  30088.,  30632.,  31176.,  31720.,  32264.,  32808.,  33352.,
      33896.,  34440.,  34984.,  35528.,  21852.,  22188.,  22524.,  22860.,
      23196.,  23532.,  23868.,  24204.,  10190.,  10358.,  10526.,  10694.,
      10862.,  11030.,  11198.,  11366.,  25604.,  26004.,  26404.,  26804.,
      27204.,  27604.,  28004.,  28404.,  28804.,  29204.,  29604.,  30004.,
      16854.,  17086.,  17318.,  17550.,  17782.,  18014.,  18246.,  18478.,
      13550.,  13718.,  13886.,  14054.,  14222.,  14390.,  14558.,  14726.,
      33604.,  34004.,  34404.,  34804.,  35204.,  35604.,  36004.,  36404.,
      36804.,  37204.,  37604.,  38004.,  21494.,  21726.,  21958.,  22190.,
      22422.,  22654.,  22886.,  23118.,  190.,    486.,    782.,    1078.,
      1374.,   1670.,   1966.,   2262.,   2788.,   3444.,   4100.,   4756.,
      5412.,   6068.,   6724.,   7380.,   8036.,   8692.,   9348.,   10004.,
      4550.,   4910.,   5270.,   5630.,   5990.,   6350.,   6710.,   7070.,
      6110.,   6406.,   6702.,   6998.,   7294.,   7590.,   7886.,   8182.,
      15908.,  16564.,  17220.,  17876.,  18532.,  19188.,  19844.,  20500.,
      21156.,  21812.,  22468.,  23124.,  11750.,  12110.,  12470.,  12830.,
      13190.,  13550.,  13910.,  14270.,  12300.,  13020.,  13740.,  14460.,
      15180.,  15900.,  16620.,  17340.,  33000.,  34568.,  36136.,  37704.,
      39272.,  40840.,  42408.,  43976.,  45544.,  47112.,  48680.,  50248.,
      25116.,  25964.,  26812.,  27660.,  28508.,  29356.,  30204.,  31052.,
      26700.,  27420.,  28140.,  28860.,  29580.,  30300.,  31020.,  31740.,
      64360.,  65928.,  67496.,  69064.,  70632.,  72200.,  73768.,  75336.,
      76904.,  78472.,  80040.,  81608.,  42076.,  42924.,  43772.,  44620.,
      45468.,  46316.,  47164.,  48012.,  41100.,  41820.,  42540.,  43260.,
      43980.,  44700.,  45420.,  46140.,  95720.,  97288.,  98856.,  100424.,
      101992., 103560., 105128., 106696., 108264., 109832., 111400., 112968.,
      59036.,  59884.,  60732.,  61580.,  62428.,  63276.,  64124.,  64972.,
      25710.,  26134.,  26558.,  26982.,  27406.,  27830.,  28254.,  28678.,
      58692.,  59604.,  60516.,  61428.,  62340.,  63252.,  64164.,  65076.,
      65988.,  66900.,  67812.,  68724.,  35446.,  35934.,  36422.,  36910.,
      37398.,  37886.,  38374.,  38862.,  34190.,  34614.,  35038.,  35462.,
      35886.,  36310.,  36734.,  37158.,  76932.,  77844.,  78756.,  79668.,
      80580.,  81492.,  82404.,  83316.,  84228.,  85140.,  86052.,  86964.,
      45206.,  45694.,  46182.,  46670.,  47158.,  47646.,  48134.,  48622.,
      350.,    902.,    1454.,   2006.,   2558.,   3110.,   3662.,   4214.,
      5156.,   6324.,   7492.,   8660.,   9828.,   10996.,  12164.,  13332.,
      14500.,  15668.,  16836.,  18004.,  7782.,   8398.,   9014.,   9630.,
      10246.,  10862.,  11478.,  12094.,  11390.,  11942.,  12494.,  13046.,
      13598.,  14150.,  14702.,  15254.,  28516.,  29684.,  30852.,  32020.,
      33188.,  34356.,  35524.,  36692.,  37860.,  39028.,  40196.,  41364.,
      20102.,  20718.,  21334.,  21950.,  22566.,  23182.,  23798.,  24414.,
      22860.,  24092.,  25324.,  26556.,  27788.,  29020.,  30252.,  31484.,
      58216.,  60808.,  63400.,  65992.,  68584.,  71176.,  73768.,  76360.,
      78952.,  81544.,  84136.,  86728.,  41820.,  43180.,  44540.,  45900.,
      47260.,  48620.,  49980.,  51340.,  47500.,  48732.,  49964.,  51196.,
      52428.,  53660.,  54892.,  56124.,  110056., 112648., 115240., 117832.,
      120424., 123016., 125608., 128200., 130792., 133384., 135976., 138568.,
      69020.,  70380.,  71740.,  73100.,  74460.,  75820.,  77180.,  78540.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 41230.,  41910.,  42590.,  43270.,
      43950.,  44630.,  45310.,  45990.,  91780.,  93204.,  94628.,  96052.,
      97476.,  98900.,  100324., 101748., 103172., 104596., 106020., 107444.,
      54038.,  54782.,  55526.,  56270.,  57014.,  57758.,  58502.,  59246.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,   56.,   70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,
      140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,
      344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,
      452.,  490.,  244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,
      244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  246.,  504.,  582.,  892.,
      614.,  940.,  646.,  732.,  436.,  894.,  972.,  1492., 1024., 1570.,
      1076., 1162., 676.,  1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      532.,  1086., 1180., 1804., 1232., 1882., 1284., 1386., 820.,  1673.,
      1826., 2790., 1904., 2907., 1982., 2147., 628.,  1278., 1388., 2116.,
      1440., 2194., 1492., 1610., 898.,  1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 470.,  952.,  1094., 1660., 1126., 1708., 1158., 1308.,
      820.,  1662., 1804., 2740., 1856., 2818., 1908., 2058., 1252., 2537.,
      2762., 4194., 2840., 4311., 2918., 3155., 916.,  1854., 2012., 3052.,
      2064., 3130., 2116., 2282., 1396., 2825., 3074., 4662., 3152., 4779.,
      3230., 3491., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      1442., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  0.,   30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,
      62.,  74.,  160., 186., 212., 116., 130., 0.,   122., 134., 290., 316.,
      342., 186., 200., 0.,   182., 194., 420., 446., 472., 256., 270., 0.,
      112., 119., 254., 269., 284., 152., 160., 0.,   147., 154., 329., 344.,
      359., 192., 200., 0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  0.,
      54.,  63.,  132., 151., 170., 90.,  100., 0.,   110., 130., 272., 314.,
      356., 188., 210., 0.,   210., 230., 482., 524., 566., 298., 320., 0.,
      310., 330., 692., 734., 776., 408., 430., 0.,   176., 187., 390., 413.,
      436., 228., 240., 0.,   231., 242., 505., 528., 551., 288., 300., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,   368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,
      888.,   992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,
      1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,
      4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,
      4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,
      7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,
      5616.,  3366.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      5213.,  10684., 11704., 17955., 12316., 18873., 12928., 14044., 4118.,
      8408.,  9152.,  13994., 9560.,  14606., 9968.,  10776., 6341.,  12940.,
      14152., 21627., 14764., 22545., 15376., 16684., 4870.,  9912.,  10784.,
      16442., 11192., 17054., 11600., 12536., 7010.,  14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3594.,  7280.,  8408.,  12758., 8656.,
      13130., 8904.,  10096., 6374.,  12920., 14048., 21338., 14456., 21950.,
      14864., 16056., 9725.,  19708., 21496., 32643., 22108., 33561., 22720.,
      24604., 7126.,  14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      10853., 21964., 23944., 36315., 24556., 37233., 25168., 27244., 7878.,
      15928., 17312., 26234., 17720., 26846., 18128., 19576., 11298., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,
      449.,  0.,    450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462.,
      3176., 3376., 3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052.,
      2168., 1163., 1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473.,
      1535., 0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  0.,
      403.,  473.,  992.,  1140., 1288., 683.,  761.,  0.,    818.,  974.,
      2040., 2368., 2696., 1426., 1598., 0.,    1598., 1754., 3680., 4008.,
      4336., 2286., 2458., 0.,    2378., 2534., 5320., 5648., 5976., 3146.,
      3318., 0.,    1355., 1441., 3008., 3188., 3368., 1763., 1857., 0.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,  6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,  12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,  18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146., 30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540., 30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      21340., 44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      14524., 29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      26444., 54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,
      40930., 83900.,  92012.,  141174., 96860.,  148446., 101708., 110588.,
      32396., 66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858., 101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348., 78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      55388., 112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      28092., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,  79304.,
      50252., 101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      76642., 155324., 169580., 257526., 174428., 264798., 179276., 194300.,
      56204., 113768., 123784., 187780., 127016., 192628., 130248., 140776.,
      85570., 173180., 188972., 286614., 193820., 293886., 198668., 215228.,
      62156., 125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      89436., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      0.,     1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,
      7740.,  16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340.,
      24680., 26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108.,
      16020., 16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580.,
      21492., 11534., 12022., 0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,
      5934.,  0.,     6300.,  7532.,  15784., 18376., 20968., 11100., 12460.,
      0.,     12460., 13692., 28744., 31336., 33928., 17900., 19260., 0.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 0.,     10630.,
      11310., 23620., 25044., 26468., 13862., 14606., 0.,     14030., 14710.,
      30740., 32164., 33588., 17582., 18326., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      38.,   44.,   98.,   112.,  126.,  140.,  224.,  248.,  186.,  204.,
      314.,  344.,  246.,  268.,  290.,  312.,  98.,   104.,  238.,  252.,
      266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,
      510.,  532.,  185.,  200.,  433.,  466.,  499.,  532.,  846.,  900.,
      649.,  688.,  1071., 1134., 799.,  844.,  889.,  934.,  282.,  296.,
      606.,  636.,  666.,  696.,  1064., 1112., 766.,  800.,  1214., 1268.,
      866.,  904.,  942.,  980.,  461.,  488.,  985.,  1042., 1099., 1156.,
      1746., 1836., 1249., 1312., 1971., 2070., 1399., 1468., 1537., 1606.,
      466.,  488.,  974.,  1020., 1066., 1112., 1664., 1736., 1166., 1216.,
      1814., 1892., 1266., 1320., 1374., 1428., 686.,  708.,  1434., 1480.,
      1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860.,
      1914., 1968., 454.,  492.,  930.,  1008., 1086., 1164., 1664., 1784.,
      1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464., 834.,  872.,
      1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140.,
      2066., 2152., 2238., 2324., 1289., 1352., 2641., 2770., 2899., 3028.,
      4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622.,
      1018., 1064., 2078., 2172., 2266., 2360., 3464., 3608., 2366., 2464.,
      3614., 3764., 2466., 2568., 2670., 2772., 1565., 1640., 3193., 3346.,
      3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814., 3799., 3964.,
      4129., 4294., 1202., 1256., 2446., 2556., 2666., 2776., 4064., 4232.,
      2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220., 1742., 1796.,
      3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128.,
      4046., 4164., 4282., 4400., 870.,  940.,  1762., 1904., 2046., 2188.,
      3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616.,
      1570., 1640., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712.,
      5414., 5636., 3666., 3816., 3966., 4116., 2393., 2504., 4849., 5074.,
      5299., 5524., 8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836.,
      6073., 6310., 1754., 1832., 3550., 3708., 3866., 4024., 5864., 6104.,
      3966., 4128., 6014., 6260., 4066., 4232., 4398., 4564., 2669., 2792.,
      5401., 5650., 5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558.,
      6199., 6460., 6721., 6982., 1938., 2024., 3918., 4092., 4266., 4440.,
      6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012.,
      2798., 2884., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324.,
      9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,   3.,   4.,    7.,    10.,   13.,   16.,   19.,   22.,   14.,
      16.,   18.,  20.,  0.,    0.,    11.,   12.,   13.,   14.,   37.,   40.,
      43.,   46.,  49.,  52.,   34.,   36.,   38.,   40.,   0.,    0.,    24.,
      28.,   32.,  36.,  86.,   96.,   106.,  116.,  126.,  136.,  82.,   88.,
      94.,   100., 0.,   0.,    64.,   68.,   72.,   76.,   186.,  196.,  206.,
      216.,  226., 236., 142.,  148.,  154.,  160.,  0.,    0.,    104.,  108.,
      112.,  116., 286., 296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,
      220.,  0.,   0.,   93.,   96.,   99.,   102.,  229.,  236.,  243.,  250.,
      257.,  264., 148., 152.,  156.,  160.,  0.,    0.,    123.,  126.,  129.,
      132.,  299., 306., 313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,
      0.,    0.,   5.,   10.,   15.,   20.,   31.,   42.,   53.,   64.,   75.,
      86.,   42.,  48.,  54.,   60.,   0.,    0.,    55.,   60.,   65.,   70.,
      141.,  152., 163., 174.,  185.,  196.,  102.,  108.,  114.,  120.,  0.,
      0.,    112., 124., 136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,
      218.,  232., 246., 260.,  0.,    0.,    232.,  244.,  256.,  268.,  554.,
      580.,  606., 632., 658.,  684.,  358.,  372.,  386.,  400.,  0.,    0.,
      352.,  364., 376., 388.,  814.,  840.,  866.,  892.,  918.,  944.,  498.,
      512.,  526., 540., 0.,    0.,    217.,  224.,  231.,  238.,  493.,  508.,
      523.,  538., 553., 568.,  296.,  304.,  312.,  320.,  0.,    0.,    287.,
      294.,  301., 308., 643.,  658.,  673.,  688.,  703.,  718.,  376.,  384.,
      392.,  400., 0.,   0.,    9.,    18.,   27.,   36.,   55.,   74.,   93.,
      112.,  131., 150., 70.,   80.,   90.,   100.,  0.,    0.,    99.,   108.,
      117.,  126., 245., 264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,
      200.,  0.,   0.,   200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,
      670.,  712., 354., 376.,  398.,  420.,  0.,    0.,    400.,  420.,  440.,
      460.,  922., 964., 1006., 1048., 1090., 1132., 574.,  596.,  618.,  640.,
      0.,    0.,   600., 620.,  640.,  660.,  1342., 1384., 1426., 1468., 1510.,
      1552., 794., 816., 838.,  860.,  0.,    0.,    341.,  352.,  363.,  374.,
      757.,  780., 803., 826.,  849.,  872.,  444.,  456.,  468.,  480.,  0.,
      0.,    451., 462., 473.,  484.,  987.,  1010., 1033., 1056., 1079., 1102.,
      564.,  576., 588., 600.,  0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242.,   286.,   656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,
      1472.,  2278.,  2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,
      1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,
      4786.,  3488.,  3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,
      3632.,  3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,
      6356.,  6704.,  7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,
      8122.,  8494.,  5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,
      7544.,  3499.,  3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049.,
      9572.,  10064., 15129., 15903., 10760., 11300., 11840., 12380., 3594.,
      3766.,  7520.,  7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,
      14062., 14674., 9824.,  10248., 10672., 11096., 5314.,  5486.,  11120.,
      11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794.,
      14064., 14488., 14912., 15336., 3506.,  3806.,  7184.,  7800.,  8416.,
      9032.,  12898., 13846., 8888.,  9536.,  13606., 14602., 9360.,  10040.,
      10720., 11400., 6506.,  6806.,  13344., 13960., 14576., 15192., 22378.,
      23326., 15368., 16016., 23566., 24562., 16160., 16840., 17520., 18200.,
      10051., 10549., 20600., 21620., 22640., 23660., 34731., 36297., 23828.,
      24896., 36513., 38151., 25016., 26132., 27248., 28364., 7962.,  8326.,
      16256., 17000., 17744., 18488., 27130., 28270., 18536., 19312., 28318.,
      29506., 19328., 20136., 20944., 21752., 12235., 12829., 24968., 26180.,
      27392., 28604., 41859., 43713., 28580., 29840., 43641., 45567., 29768.,
      31076., 32384., 33692., 9418.,  9846.,  19168., 20040., 20912., 21784.,
      31882., 33214., 21704., 22608., 33070., 34450., 22496., 23432., 24368.,
      25304., 13698., 14126., 27888., 28760., 29632., 30504., 45202., 46534.,
      30744., 31648., 46870., 48250., 31856., 32792., 33728., 34664., 6770.,
      7326.,  13712., 14840., 15968., 17096., 24226., 25942., 16440., 17600.,
      24934., 26698., 16912., 18104., 19296., 20488., 12330., 12886., 24992.,
      26120., 27248., 28376., 41386., 43102., 28040., 29200., 42574., 44338.,
      28832., 30024., 31216., 32408., 18787., 19669., 38072., 39860., 41648.,
      43436., 63243., 65961., 42836., 44672., 65025., 67815., 44024., 45908.,
      47792., 49676., 13786., 14406., 27904., 29160., 30416., 31672., 46138.,
      48046., 31208., 32496., 47326., 49282., 32000., 33320., 34640., 35960.,
      20971., 21949., 42440., 44420., 46400., 48380., 70371., 73377., 47588.,
      49616., 72153., 75231., 48776., 50852., 52928., 55004., 15242., 15926.,
      30816., 32200., 33584., 34968., 50890., 52990., 34376., 35792., 52078.,
      54226., 35168., 36616., 38064., 39512., 22082., 22766., 44656., 46040.,
      47424., 48808., 71890., 73990., 48536., 49952., 73558., 75706., 49648.,
      51096., 52544., 53992.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,   17.,   23.,   40.,    60.,    80.,    100.,   120.,
      140.,   95.,   109.,  123.,  137.,   0.,     0.,     65.,    71.,
      77.,    83.,   240.,  260.,  280.,   300.,   320.,   340.,   235.,
      249.,   263.,  277.,  0.,    0.,     142.,   170.,   198.,   226.,
      568.,   640.,  712.,  784.,  856.,   928.,   578.,   622.,   666.,
      710.,   0.,    0.,    422.,  450.,   478.,   506.,   1288.,  1360.,
      1432.,  1504., 1576., 1648., 1018.,  1062.,  1106.,  1150.,  0.,
      0.,     702.,  730.,  758.,  786.,   2008.,  2080.,  2152.,  2224.,
      2296.,  2368., 1458., 1502., 1546.,  1590.,  0.,     0.,     677.,
      699.,   721.,  743.,  1688., 1740.,  1792.,  1844.,  1896.,  1948.,
      1103.,  1133., 1163., 1193., 0.,     0.,     897.,   919.,   941.,
      963.,   2208., 2260., 2312., 2364.,  2416.,  2468.,  1403.,  1433.,
      1463.,  1493., 0.,    0.,    29.,    67.,    105.,   143.,   216.,
      300.,   384.,  468.,  552.,  636.,   311.,   357.,   403.,   449.,
      0.,     0.,    409.,  447.,  485.,   523.,   1056.,  1140.,  1224.,
      1308.,  1392., 1476., 771.,  817.,   863.,   909.,   0.,     0.,
      830.,   922.,  1014., 1106., 2200.,  2400.,  2600.,  2800.,  3000.,
      3200.,  1650., 1758., 1866., 1974.,  0.,     0.,     1750.,  1842.,
      1934.,  2026., 4200., 4400., 4600.,  4800.,  5000.,  5200.,  2730.,
      2838.,  2946., 3054., 0.,    0.,     2670.,  2762.,  2854.,  2946.,
      6200.,  6400., 6600., 6800., 7000.,  7200.,  3810.,  3918.,  4026.,
      4134.,  0.,    0.,    1661., 1715.,  1769.,  1823.,  3784.,  3900.,
      4016.,  4132., 4248., 4364., 2279.,  2341.,  2403.,  2465.,  0.,
      0.,     2201., 2255., 2309., 2363.,  4944.,  5060.,  5176.,  5292.,
      5408.,  5524., 2899., 2961., 3023.,  3085.,  0.,     0.,     53.,
      123.,   193.,  263.,  392.,  540.,   688.,   836.,   984.,   1132.,
      527.,   605.,  683.,  761.,  0.,     0.,     753.,   823.,   893.,
      963.,   1872., 2020., 2168., 2316.,  2464.,  2612.,  1307.,  1385.,
      1463.,  1541., 0.,    0.,    1518.,  1674.,  1830.,  1986.,  3832.,
      4160.,  4488., 4816., 5144., 5472.,  2722.,  2894.,  3066.,  3238.,
      0.,     0.,    3078., 3234., 3390.,  3546.,  7112.,  7440.,  7768.,
      8096.,  8424., 8752., 4442., 4614.,  4786.,  4958.,  0.,     0.,
      4638.,  4794., 4950., 5106., 10392., 10720., 11048., 11376., 11704.,
      12032., 6162., 6334., 6506., 6678.,  0.,     0.,     2645.,  2731.,
      2817.,  2903., 5880., 6060., 6240.,  6420.,  6600.,  6780.,  3455.,
      3549.,  3643., 3737., 0.,    0.,     3505.,  3591.,  3677.,  3763.,
      7680.,  7860., 8040., 8220., 8400.,  8580.,  4395.,  4489.,  4583.,
      4677.,  0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      41820.,  43180.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.,
      27548.,  29932.,  56456.,  61352.,  66248.,  71144.,  101540., 109076.,
      69992.,  75144.,  107156., 115076., 73736.,  79144.,  84552.,  89960.,
      51388.,  53772.,  105416., 110312., 115208., 120104., 176900., 184436.,
      121512., 126664., 186356., 194276., 127816., 133224., 138632., 144040.,
      79370.,  83330.,  162700., 170812., 178924., 187036., 274518., 286974.,
      188380., 196876., 288702., 301734., 197836., 206716., 215596., 224476.,
      62972.,  65868.,  128584., 134504., 140424., 146344., 214724., 223796.,
      146728., 152904., 224180., 233636., 153032., 159464., 165896., 172328.,
      96746.,  101474., 197452., 207100., 216748., 226396., 331254., 346014.,
      226204., 236236., 345438., 360774., 235660., 246076., 256492., 266908.,
      74556.,  77964.,  151752., 158696., 165640., 172584., 252548., 263156.,
      171944., 179144., 262004., 272996., 178248., 185704., 193160., 200616.,
      108636., 112044., 221192., 228136., 235080., 242024., 358628., 369236.,
      243944., 251144., 371924., 382916., 252808., 260264., 267720., 275176.,
      53404.,  57836.,  108168., 117160., 126152., 135144., 191396., 205076.,
      129896., 139144., 197012., 211076., 133640., 143144., 152648., 162152.,
      97724.,  102156., 198088., 207080., 216072., 225064., 328196., 341876.,
      222376., 231624., 337652., 351716., 228680., 238184., 247688., 257192.,
      148874., 155906., 301708., 315964., 330220., 344476., 501462., 523134.,
      339676., 354316., 515646., 537894., 349132., 364156., 379180., 394204.,
      109308., 114252., 221256., 231272., 241288., 251304., 366020., 381236.,
      247592., 257864., 375476., 391076., 253896., 264424., 274952., 285480.,
      166250., 174050., 336460., 352252., 368044., 383836., 558198., 582174.,
      377500., 393676., 572382., 596934., 386956., 403516., 420076., 436636.,
      120892., 126348., 244424., 255464., 266504., 277544., 403844., 420596.,
      272808., 284104., 413300., 430436., 279112., 290664., 302216., 313768.,
      175452., 180908., 354824., 365864., 376904., 387944., 571364., 588116.,
      385768., 397064., 584660., 601796., 394632., 406184., 417736., 429288.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  0.,     0.,     430.,   470.,
      510.,   550.,   1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,
      1838.,  1942.,  2046.,  0.,     0.,     940.,   1148.,  1356.,  1564.,
      4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,
      5324.,  0.,     0.,     3020.,  3228.,  3436.,  3644.,  9512.,  10056.,
      10600., 11144., 11688., 12232., 7676.,  8012.,  8348.,  8684.,  0.,
      0.,     5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040., 16584.,
      17128., 17672., 11036., 11372., 11708., 12044., 0.,     0.,     5150.,
      5318.,  5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932.,
      8502.,  8734.,  8966.,  9198.,  0.,     0.,     6830.,  6998.,  7166.,
      7334.,  16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054.,
      11286., 11518., 0.,     0.,     190.,   486.,   782.,   1078.,  1604.,
      2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,
      0.,     0.,     3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  9476.,
      10132., 10788., 11444., 5990.,  6350.,  6710.,  7070.,  0.,     0.,
      6380.,  7100.,  7820.,  8540.,  17000., 18568., 20136., 21704., 23272.,
      24840., 12828., 13676., 14524., 15372., 0.,     0.,     13580., 14300.,
      15020., 15740., 32680., 34248., 35816., 37384., 38952., 40520., 21308.,
      22156., 23004., 23852., 0.,     0.,     20780., 21500., 22220., 22940.,
      48360., 49928., 51496., 53064., 54632., 56200., 29788., 30636., 31484.,
      32332., 0.,     0.,     12990., 13414., 13838., 14262., 29636., 30548.,
      31460., 32372., 33284., 34196., 17878., 18366., 18854., 19342., 0.,
      0.,     17230., 17654., 18078., 18502., 38756., 39668., 40580., 41492.,
      42404., 43316., 22758., 23246., 23734., 24222., 0.,     0.,     350.,
      902.,   1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,
      4086.,  4702.,  5318.,  5934.,  0.,     0.,     5870.,  6422.,  6974.,
      7526.,  14628., 15796., 16964., 18132., 19300., 20468., 10246., 10862.,
      11478., 12094., 0.,     0.,     11820., 13052., 14284., 15516., 29928.,
      32520., 35112., 37704., 40296., 42888., 21340., 22700., 24060., 25420.,
      0.,     0.,     24140., 25372., 26604., 27836., 55848., 58440., 61032.,
      63624., 66216., 68808., 34940., 36300., 37660., 39020., 0.,     0.,
      36460., 37692., 38924., 40156., 81768., 84360., 86952., 89544., 92136.,
      94728., 48540., 49900., 51260., 52620., 0.,     0.,     20830., 21510.,
      22190., 22870., 46340., 47764., 49188., 50612., 52036., 53460., 27254.,
      27998., 28742., 29486., 0.,     0.,     27630., 28310., 28990., 29670.,
      60580., 62004., 63428., 64852., 66276., 67700., 34694., 35438., 36182.,
      36926., 0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,    76.,    82.,    88.,    182.,   196.,   210.,   224.,   238.,
      252.,   266.,   280.,   424.,   448.,   472.,   496.,   354.,   372.,
      390.,   408.,   598.,   628.,   658.,   688.,   470.,   492.,   514.,
      536.,   558.,   580.,   602.,   624.,   190.,   196.,   202.,   208.,
      462.,   476.,   490.,   504.,   518.,   532.,   546.,   560.,   904.,
      928.,   952.,   976.,   714.,   732.,   750.,   768.,   1198.,  1228.,
      1258.,  1288.,  910.,   932.,   954.,   976.,   998.,   1020.,  1042.,
      1064.,  355.,   370.,   385.,   400.,   833.,   866.,   899.,   932.,
      965.,   998.,   1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,
      1298.,  1337.,  1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,
      1643.,  1688.,  1733.,  1778.,  1823.,  1868.,  550.,   564.,   578.,
      592.,   1182.,  1212.,  1242.,  1272.,  1302.,  1332.,  1362.,  1392.,
      2080.,  2128.,  2176.,  2224.,  1498.,  1532.,  1566.,  1600.,  2374.,
      2428.,  2482.,  2536.,  1694.,  1732.,  1770.,  1808.,  1846.,  1884.,
      1922.,  1960.,  895.,   922.,   949.,   976.,   1913.,  1970.,  2027.,
      2084.,  2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,
      2435.,  2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,
      2798.,  2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  910.,   932.,
      954.,   976.,   1902.,  1948.,  1994.,  2040.,  2086.,  2132.,  2178.,
      2224.,  3256.,  3328.,  3400.,  3472.,  2282.,  2332.,  2382.,  2432.,
      3550.,  3628.,  3706.,  3784.,  2478.,  2532.,  2586.,  2640.,  2694.,
      2748.,  2802.,  2856.,  1350.,  1372.,  1394.,  1416.,  2822.,  2868.,
      2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,
      4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,
      3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,  870.,
      908.,   946.,   984.,   1782.,  1860.,  1938.,  2016.,  2094.,  2172.,
      2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,  2374.,
      2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,  2584.,
      2670.,  2756.,  2842.,  2928.,  1630.,  1668.,  1706.,  1744.,  3342.,
      3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,  5728.,
      5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,  6154.,
      6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,  4648.,
      2515.,  2578.,  2641.,  2704.,  5153.,  5282.,  5411.,  5540.,  5669.,
      5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,
      6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,
      6680.,  6821.,  6962.,  7103.,  7244.,  1990.,  2036.,  2082.,  2128.,
      4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,  6784.,
      6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,  7228.,
      7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,  5442.,
      5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,  6692.,
      6845.,  6998.,  7151.,  7304.,  10458., 10692., 10926., 11160., 7139.,
      7298.,  7457.,  7616.,  10899., 11142., 11385., 11628., 7433.,  7598.,
      7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,  2458.,
      2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,  5552.,
      7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,  8254.,
      8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,  6204.,
      6322.,  6440.,  3430.,  3484.,  3538.,  3592.,  6982.,  7092.,  7202.,
      7312.,  7422.,  7532.,  7642.,  7752.,  11320., 11488., 11656., 11824.,
      7698.,  7812.,  7926.,  8040.,  11734., 11908., 12082., 12256., 7974.,
      8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  1670.,  1740.,
      1810.,  1880.,  3382.,  3524.,  3666.,  3808.,  3950.,  4092.,  4234.,
      4376.,  5992.,  6208.,  6424.,  6640.,  4066.,  4212.,  4358.,  4504.,
      6166.,  6388.,  6610.,  6832.,  4182.,  4332.,  4482.,  4632.,  4782.,
      4932.,  5082.,  5232.,  3070.,  3140.,  3210.,  3280.,  6222.,  6364.,
      6506.,  6648.,  6790.,  6932.,  7074.,  7216.,  10312., 10528., 10744.,
      10960., 6986.,  7132.,  7278.,  7424.,  10606., 10828., 11050., 11272.,
      7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,  8232.,  4675.,
      4786.,  4897.,  5008.,  9473.,  9698.,  9923.,  10148., 10373., 10598.,
      10823., 11048., 15750., 16092., 16434., 16776., 10667., 10898., 11129.,
      11360., 16191., 16542., 16893., 17244., 10961., 11198., 11435., 11672.,
      11909., 12146., 12383., 12620., 3430.,  3508.,  3586.,  3664.,  6942.,
      7100.,  7258.,  7416.,  7574.,  7732.,  7890.,  8048.,  11488., 11728.,
      11968., 12208., 7770.,  7932.,  8094.,  8256.,  11782., 12028., 12274.,
      12520., 7966.,  8132.,  8298.,  8464.,  8630.,  8796.,  8962.,  9128.,
      5215.,  5338.,  5461.,  5584.,  10553., 10802., 11051., 11300., 11549.,
      11798., 12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098.,
      12353., 12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659.,
      12920., 13181., 13442., 13703., 13964., 3790.,  3876.,  3962.,  4048.,
      7662.,  7836.,  8010.,  8184.,  8358.,  8532.,  8706.,  8880.,  12664.,
      12928., 13192., 13456., 8554.,  8732.,  8910.,  9088.,  12958., 13228.,
      13498., 13768., 8750.,  8932.,  9114.,  9296.,  9478.,  9660.,  9842.,
      10024., 5510.,  5596.,  5682.,  5768.,  11142., 11316., 11490., 11664.,
      11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114.,
      12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572.,
      12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   0.,    0.,
      0.,    0.,    21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,
      101.,  104.,  66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,
      0.,    0.,    0.,    0.,    44.,   48.,   52.,   56.,   60.,   64.,
      68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,
      242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,
      194.,  200.,  0.,    0.,    0.,    0.,    124.,  128.,  132.,  136.,
      140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,
      422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,
      302.,  308.,  314.,  320.,  0.,    0.,    0.,    0.,    204.,  208.,
      212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,
      602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,
      410.,  416.,  422.,  428.,  434.,  440.,  0.,    0.,    0.,    0.,
      183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,
      465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,
      292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  0.,    0.,
      0.,    0.,    243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,
      591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,
      661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,
      0.,    0.,    0.,    0.,    5.,    10.,   15.,   20.,   25.,   30.,
      35.,   40.,   51.,   62.,   73.,   84.,   95.,   106.,  117.,  128.,
      139.,  150.,  161.,  172.,  78.,   84.,   90.,   96.,   102.,  108.,
      114.,  120.,  0.,    0.,    0.,    0.,    105.,  110.,  115.,  120.,
      125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,  315.,  326.,
      337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,  210.,  216.,
      222.,  228.,  234.,  240.,  0.,    0.,    0.,    0.,    212.,  224.,
      236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,  614.,  640.,
      666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,  422.,  436.,
      450.,  464.,  478.,  492.,  506.,  520.,  0.,    0.,    0.,    0.,
      452.,  464.,  476.,  488.,  500.,  512.,  524.,  536.,  1082., 1108.,
      1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368.,
      702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,  0.,    0.,
      0.,    0.,    692.,  704.,  716.,  728.,  740.,  752.,  764.,  776.,
      1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784., 1810., 1836.,
      1862., 1888., 982.,  996.,  1010., 1024., 1038., 1052., 1066., 1080.,
      0.,    0.,    0.,    0.,    427.,  434.,  441.,  448.,  455.,  462.,
      469.,  476.,  971.,  986.,  1001., 1016., 1031., 1046., 1061., 1076.,
      1091., 1106., 1121., 1136., 584.,  592.,  600.,  608.,  616.,  624.,
      632.,  640.,  0.,    0.,    0.,    0.,    567.,  574.,  581.,  588.,
      595.,  602.,  609.,  616.,  1271., 1286., 1301., 1316., 1331., 1346.,
      1361., 1376., 1391., 1406., 1421., 1436., 744.,  752.,  760.,  768.,
      776.,  784.,  792.,  800.,  0.,    0.,    0.,    0.,    9.,    18.,
      27.,   36.,   45.,   54.,   63.,   72.,   91.,   110.,  129.,  148.,
      167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  0.,    0.,    0.,    0.,
      189.,  198.,  207.,  216.,  225.,  234.,  243.,  252.,  471.,  490.,
      509.,  528.,  547.,  566.,  585.,  604.,  623.,  642.,  661.,  680.,
      330.,  340.,  350.,  360.,  370.,  380.,  390.,  400.,  0.,    0.,
      0.,    0.,    380.,  400.,  420.,  440.,  460.,  480.,  500.,  520.,
      962.,  1004., 1046., 1088., 1130., 1172., 1214., 1256., 1298., 1340.,
      1382., 1424., 686.,  708.,  730.,  752.,  774.,  796.,  818.,  840.,
      0.,    0.,    0.,    0.,    780.,  800.,  820.,  840.,  860.,  880.,
      900.,  920.,  1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096.,
      2138., 2180., 2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236.,
      1258., 1280., 0.,    0.,    0.,    0.,    1180., 1200., 1220., 1240.,
      1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768., 2810., 2852.,
      2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588., 1610., 1632.,
      1654., 1676., 1698., 1720., 0.,    0.,    0.,    0.,    671.,  682.,
      693.,  704.,  715.,  726.,  737.,  748.,  1491., 1514., 1537., 1560.,
      1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744., 876.,  888.,
      900.,  912.,  924.,  936.,  948.,  960.,  0.,    0.,    0.,    0.,
      891.,  902.,  913.,  924.,  935.,  946.,  957.,  968.,  1951., 1974.,
      1997., 2020., 2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204.,
      1116., 1128., 1140., 1152., 1164., 1176., 1188., 1200., 0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450.,   494.,   538.,    582.,    1232.,   1336.,   1440.,   1544.,
      1648.,  1752.,  1856.,   1960.,   3002.,   3182.,   3362.,   3542.,
      2568.,  2704.,  2840.,   2976.,   4382.,   4610.,   4838.,   5066.,
      3488.,  3656.,  3824.,   3992.,   4160.,   4328.,   4496.,   4664.,
      1330.,  1374.,  1418.,   1462.,   3312.,   3416.,   3520.,   3624.,
      3728.,  3832.,  3936.,   4040.,   6602.,   6782.,   6962.,   7142.,
      5288.,  5424.,  5560.,   5696.,   8942.,   9170.,   9398.,   9626.,
      6848.,  7016.,  7184.,   7352.,   7520.,   7688.,   7856.,   8024.,
      2543.,  2657.,  2771.,   2885.,   6064.,   6316.,   6568.,   6820.,
      7072.,  7324.,  7576.,   7828.,   12123.,  12537.,  12951.,  13365.,
      9412.,  9712.,  10012.,  10312.,  15633.,  16119.,  16605.,  17091.,
      11752., 12100., 12448.,  12796.,  13144.,  13492.,  13840.,  14188.,
      4194.,  4302.,  4410.,   4518.,   9040.,   9272.,   9504.,   9736.,
      9968.,  10200., 10432.,  10664.,  15962.,  16334.,  16706.,  17078.,
      11528., 11792., 12056.,  12320.,  18302.,  18722.,  19142.,  19562.,
      13088., 13384., 13680.,  13976.,  14272.,  14568.,  14864.,  15160.,
      6839.,  7049.,  7259.,   7469.,   14656.,  15100.,  15544.,  15988.,
      16432., 16876., 17320.,  17764.,  26163.,  26865.,  27567.,  28269.,
      18772., 19264., 19756.,  20248.,  29673.,  30447.,  31221.,  31995.,
      21112., 21652., 22192.,  22732.,  23272.,  23812.,  24352.,  24892.,
      7058.,  7230.,  7402.,   7574.,   14768.,  15128.,  15488.,  15848.,
      16208., 16568., 16928.,  17288.,  25322.,  25886.,  26450.,  27014.,
      17768., 18160., 18552.,  18944.,  27662.,  28274.,  28886.,  29498.,
      19328., 19752., 20176.,  20600.,  21024.,  21448.,  21872.,  22296.,
      10498., 10670., 10842.,  11014.,  21968.,  22328.,  22688.,  23048.,
      23408., 23768., 24128.,  24488.,  36602.,  37166.,  37730.,  38294.,
      25608., 26000., 26392.,  26784.,  39902.,  40514.,  41126.,  41738.,
      27808., 28232., 28656.,  29080.,  29504.,  29928.,  30352.,  30776.,
      6786.,  7086.,  7386.,   7686.,   13904.,  14520.,  15136.,  15752.,
      16368., 16984., 17600.,  18216.,  25082.,  26030.,  26978.,  27926.,
      17288., 17936., 18584.,  19232.,  26462.,  27458.,  28454.,  29450.,
      18208., 18888., 19568.,  20248.,  20928.,  21608.,  22288.,  22968.,
      12786., 13086., 13386.,  13686.,  26224.,  26840.,  27456.,  28072.,
      28688., 29304., 29920.,  30536.,  44042.,  44990.,  45938.,  46886.,
      30248., 30896., 31544.,  32192.,  46382.,  47378.,  48374.,  49370.,
      31808., 32488., 33168.,  33848.,  34528.,  35208.,  35888.,  36568.,
      19727., 20225., 20723.,  21221.,  40432.,  41452.,  42472.,  43492.,
      44512., 45532., 46552.,  47572.,  68283.,  69849.,  71415.,  72981.,
      46852., 47920., 48988.,  50056.,  71793.,  73431.,  75069.,  76707.,
      49192., 50308., 51424.,  52540.,  53656.,  54772.,  55888.,  57004.,
      15650., 16014., 16378.,  16742.,  31952.,  32696.,  33440.,  34184.,
      34928., 35672., 36416.,  37160.,  53402.,  54542.,  55682.,  56822.,
      36488., 37264., 38040.,  38816.,  55742.,  56930.,  58118.,  59306.,
      38048., 38856., 39664.,  40472.,  41280.,  42088.,  42896.,  43704.,
      24023., 24617., 25211.,  25805.,  49024.,  50236.,  51448.,  52660.,
      53872., 55084., 56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212., 57472., 58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552., 59860., 61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      18514., 18942., 19370.,  19798.,  37680.,  38552.,  39424.,  40296.,
      41168., 42040., 42912.,  43784.,  62762.,  64094.,  65426.,  66758.,
      42728., 43632., 44536.,  45440.,  65102.,  66482.,  67862.,  69242.,
      44288., 45224., 46160.,  47096.,  48032.,  48968.,  49904.,  50840.,
      27074., 27502., 27930.,  28358.,  55120.,  55992.,  56864.,  57736.,
      58608., 59480., 60352.,  61224.,  89402.,  90734.,  92066.,  93398.,
      60808., 61712., 62616.,  63520.,  92702.,  94082.,  95462.,  96842.,
      63008., 63944., 64880.,  65816.,  66752.,  67688.,  68624.,  69560.,
      13122., 13678., 14234.,  14790.,  26576.,  27704.,  28832.,  29960.,
      31088., 32216., 33344.,  34472.,  47162.,  48878.,  50594.,  52310.,
      32008., 33168., 34328.,  35488.,  48542.,  50306.,  52070.,  53834.,
      32928., 34120., 35312.,  36504.,  37696.,  38888.,  40080.,  41272.,
      24242., 24798., 25354.,  25910.,  49136.,  50264.,  51392.,  52520.,
      53648., 54776., 55904.,  57032.,  81482.,  83198.,  84914.,  86630.,
      55208., 56368., 57528.,  58688.,  83822.,  85586.,  87350.,  89114.,
      56768., 57960., 59152.,  60344.,  61536.,  62728.,  63920.,  65112.,
      36911., 37793., 38675.,  39557.,  74800.,  76588.,  78376.,  80164.,
      81952., 83740., 85528.,  87316.,  124443., 127161., 129879., 132597.,
      84292., 86128., 87964.,  89800.,  127953., 130743., 133533., 136323.,
      86632., 88516., 90400.,  92284.,  94168.,  96052.,  97936.,  99820.,
      27106., 27726., 28346.,  28966.,  54864.,  56120.,  57376.,  58632.,
      59888., 61144., 62400.,  63656.,  90842.,  92750.,  94658.,  96566.,
      61448., 62736., 64024.,  65312.,  93182.,  95138.,  97094.,  99050.,
      63008., 64328., 65648.,  66968.,  68288.,  69608.,  70928.,  72248.,
      41207., 42185., 43163.,  44141.,  83392.,  85372.,  87352.,  89332.,
      91312., 93292., 95272.,  97252.,  138483., 141489., 144495., 147501.,
      93652., 95680., 97708.,  99736.,  141993., 145071., 148149., 151227.,
      95992., 98068., 100144., 102220., 104296., 106372., 108448., 110524.,
      29970., 30654., 31338.,  32022.,  60592.,  61976.,  63360.,  64744.,
      66128., 67512., 68896.,  70280.,  100202., 102302., 104402., 106502.,
      67688., 69104., 70520.,  71936.,  102542., 104690., 106838., 108986.,
      69248., 70696., 72144.,  73592.,  75040.,  76488.,  77936.,  79384.,
      43650., 44334., 45018.,  45702.,  88272.,  89656.,  91040.,  92424.,
      93808., 95192., 96576.,  97960.,  142202., 144302., 146402., 148502.,
      96008., 97424., 98840.,  100256., 145502., 147650., 149798., 151946.,
      98208., 99656., 101104., 102552., 104000., 105448., 106896., 108344.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,
      487.,   501.,   515.,   529.,   543.,   557.,   0.,     0.,     0.,
      0.,     262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,
      1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,
      1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,
      1386.,  1430.,  0.,     0.,     0.,     0.,     822.,   850.,   878.,
      906.,   934.,   962.,   990.,   1018.,  2520.,  2592.,  2664.,  2736.,
      2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,
      2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,  0.,     0.,
      0.,     0.,     1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,
      1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,
      4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,
      3102.,  3146.,  3190.,  0.,     0.,     0.,     0.,     1337.,  1359.,
      1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,
      3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,
      2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  0.,
      0.,     0.,     0.,     1777.,  1799.,  1821.,  1843.,  1865.,  1887.,
      1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,
      4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,
      2903.,  2933.,  2963.,  2993.,  0.,     0.,     0.,     0.,     29.,
      67.,    105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,
      536.,   620.,   704.,   788.,   872.,   956.,   1040.,  1124.,  1208.,
      1292.,  587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,
      0.,     0.,     0.,     0.,     789.,   827.,   865.,   903.,   941.,
      979.,   1017.,  1055.,  2048.,  2132.,  2216.,  2300.,  2384.,  2468.,
      2552.,  2636.,  2720.,  2804.,  2888.,  2972.,  1507.,  1553.,  1599.,
      1645.,  1691.,  1737.,  1783.,  1829.,  0.,     0.,     0.,     0.,
      1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,  4248.,
      4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,  6048.,
      6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,  3866.,
      3974.,  0.,     0.,     0.,     0.,     3430.,  3522.,  3614.,  3706.,
      3798.,  3890.,  3982.,  4074.,  8248.,  8448.,  8648.,  8848.,  9048.,
      9248.,  9448.,  9648.,  9848.,  10048., 10248., 10448., 5378.,  5486.,
      5594.,  5702.,  5810.,  5918.,  6026.,  6134.,  0.,     0.,     0.,
      0.,     5270.,  5362.,  5454.,  5546.,  5638.,  5730.,  5822.,  5914.,
      12248., 12448., 12648., 12848., 13048., 13248., 13448., 13648., 13848.,
      14048., 14248., 14448., 7538.,  7646.,  7754.,  7862.,  7970.,  8078.,
      8186.,  8294.,  0.,     0.,     0.,     0.,     3281.,  3335.,  3389.,
      3443.,  3497.,  3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,
      7944.,  8060.,  8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,
      4573.,  4635.,  4697.,  4759.,  4821.,  4883.,  4945.,  0.,     0.,
      0.,     0.,     4361.,  4415.,  4469.,  4523.,  4577.,  4631.,  4685.,
      4739.,  9800.,  9916.,  10032., 10148., 10264., 10380., 10496., 10612.,
      10728., 10844., 10960., 11076., 5751.,  5813.,  5875.,  5937.,  5999.,
      6061.,  6123.,  6185.,  0.,     0.,     0.,     0.,     53.,    123.,
      193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,
      1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,
      995.,   1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,  0.,
      0.,     0.,     0.,     1453.,  1523.,  1593.,  1663.,  1733.,  1803.,
      1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,  4520.,
      4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,  2789.,
      2867.,  2945.,  3023.,  3101.,  0.,     0.,     0.,     0.,     2918.,
      3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,  7744.,
      8072.,  8400.,  8728.,  9056.,  9384.,  9712.,  10040., 10368., 10696.,
      11024., 5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,  6518.,
      0.,     0.,     0.,     0.,     6038.,  6194.,  6350.,  6506.,  6662.,
      6818.,  6974.,  7130.,  13976., 14304., 14632., 14960., 15288., 15616.,
      15944., 16272., 16600., 16928., 17256., 17584., 8754.,  8926.,  9098.,
      9270.,  9442.,  9614.,  9786.,  9958.,  0.,     0.,     0.,     0.,
      9158.,  9314.,  9470.,  9626.,  9782.,  9938.,  10094., 10250., 20536.,
      20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488.,
      23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226.,
      13398., 0.,     0.,     0.,     0.,     5225.,  5311.,  5397.,  5483.,
      5569.,  5655.,  5741.,  5827.,  11624., 11804., 11984., 12164., 12344.,
      12524., 12704., 12884., 13064., 13244., 13424., 13604., 6839.,  6933.,
      7027.,  7121.,  7215.,  7309.,  7403.,  7497.,  0.,     0.,     0.,
      0.,     6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547.,
      15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664.,
      16844., 17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,  9189.,
      9283.,  9377.,  0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3164.,    3500.,    3836.,    4172.,    8968.,    9768.,    10568.,
      11368.,   12168.,   12968.,   13768.,   14568.,   22468.,   23860.,
      25252.,   26644.,   19496.,   20552.,   21608.,   22664.,   33460.,
      35236.,   37012.,   38788.,   26824.,   28136.,   29448.,   30760.,
      32072.,   33384.,   34696.,   36008.,   9884.,    10220.,   10556.,
      10892.,   24968.,   25768.,   26568.,   27368.,   28168.,   28968.,
      29768.,   30568.,   50308.,   51700.,   53092.,   54484.,   40616.,
      41672.,   42728.,   43784.,   68980.,   70756.,   72532.,   74308.,
      53064.,   54376.,   55688.,   57000.,   58312.,   59624.,   60936.,
      62248.,   19162.,   20050.,   20938.,   21826.,   46124.,   48092.,
      50060.,   52028.,   53996.,   55964.,   57932.,   59900.,   93078.,
      96318.,   99558.,   102798.,  72668.,   75020.,   77372.,   79724.,
      121086.,  124902.,  128718.,  132534.,  91340.,   94076.,   96812.,
      99548.,   102284.,  105020.,  107756.,  110492.,  32732.,   33580.,
      34428.,   35276.,   70664.,   72488.,   74312.,   76136.,   77960.,
      79784.,   81608.,   83432.,   124996.,  127924.,  130852.,  133780.,
      90408.,   92488.,   94568.,   96648.,   143668.,  146980.,  150292.,
      153604.,  102856.,  105192.,  107528.,  109864.,  112200.,  114536.,
      116872.,  119208.,  53434.,   55090.,   56746.,   58402.,   114668.,
      118172.,  121676.,  125180.,  128684.,  132188.,  135692.,  139196.,
      205110.,  210654.,  216198.,  221742.,  147356.,  151244.,  155132.,
      159020.,  233118.,  239238.,  245358.,  251478.,  166028.,  170300.,
      174572.,  178844.,  183116.,  187388.,  191660.,  195932.,  55580.,
      56940.,   58300.,   59660.,   116360.,  119208.,  122056.,  124904.,
      127752.,  130600.,  133448.,  136296.,  199684.,  204148.,  208612.,
      213076.,  140200.,  143304.,  146408.,  149512.,  218356.,  223204.,
      228052.,  232900.,  152648.,  156008.,  159368.,  162728.,  166088.,
      169448.,  172808.,  176168.,  82780.,   84140.,   85500.,   86860.,
      173320.,  176168.,  179016.,  181864.,  184712.,  187560.,  190408.,
      193256.,  288964.,  293428.,  297892.,  302356.,  202280.,  205384.,
      208488.,  211592.,  315316.,  320164.,  325012.,  329860.,  219848.,
      223208.,  226568.,  229928.,  233288.,  236648.,  240008.,  243368.,
      53596.,   55980.,   58364.,   60748.,   109832.,  114728.,  119624.,
      124520.,  129416.,  134312.,  139208.,  144104.,  198340.,  205876.,
      213412.,  220948.,  136744.,  141896.,  147048.,  152200.,  209332.,
      217252.,  225172.,  233092.,  144072.,  149480.,  154888.,  160296.,
      165704.,  171112.,  176520.,  181928.,  101276.,  103660.,  106044.,
      108428.,  207752.,  212648.,  217544.,  222440.,  227336.,  232232.,
      237128.,  242024.,  349060.,  356596.,  364132.,  371668.,  239784.,
      244936.,  250088.,  255240.,  367732.,  375652.,  383572.,  391492.,
      252232.,  257640.,  263048.,  268456.,  273864.,  279272.,  284680.,
      290088.,  156250.,  160210.,  164170.,  168130.,  320300.,  328412.,
      336524.,  344636.,  352748.,  360860.,  368972.,  377084.,  541206.,
      553662.,  566118.,  578574.,  371420.,  379916.,  388412.,  396908.,
      569214.,  582246.,  595278.,  608310.,  390092.,  398972.,  407852.,
      416732.,  425612.,  434492.,  443372.,  452252.,  124124.,  127020.,
      129916.,  132812.,  253448.,  259368.,  265288.,  271208.,  277128.,
      283048.,  288968.,  294888.,  423748.,  432820.,  441892.,  450964.,
      289576.,  295752.,  301928.,  308104.,  442420.,  451876.,  461332.,
      470788.,  302024.,  308456.,  314888.,  321320.,  327752.,  334184.,
      340616.,  347048.,  190522.,  195250.,  199978.,  204706.,  388844.,
      398492.,  408140.,  417788.,  427436.,  437084.,  446732.,  456380.,
      653238.,  667998.,  682758.,  697518.,  446108.,  456140.,  466172.,
      476204.,  681246.,  696582.,  711918.,  727254.,  464780.,  475196.,
      485612.,  496028.,  506444.,  516860.,  527276.,  537692.,  146972.,
      150380.,  153788.,  157196.,  299144.,  306088.,  313032.,  319976.,
      326920.,  333864.,  340808.,  347752.,  498436.,  509044.,  519652.,
      530260.,  339368.,  346568.,  353768.,  360968.,  517108.,  528100.,
      539092.,  550084.,  351816.,  359272.,  366728.,  374184.,  381640.,
      389096.,  396552.,  404008.,  215132.,  218540.,  221948.,  225356.,
      438024.,  444968.,  451912.,  458856.,  465800.,  472744.,  479688.,
      486632.,  710596.,  721204.,  731812.,  742420.,  483368.,  490568.,
      497768.,  504968.,  736948.,  747940.,  758932.,  769924.,  500936.,
      508392.,  515848.,  523304.,  530760.,  538216.,  545672.,  553128.,
      104028.,  108460.,  112892.,  117324.,  210696.,  219688.,  228680.,
      237672.,  246664.,  255656.,  264648.,  273640.,  374212.,  387892.,
      401572.,  415252.,  253992.,  263240.,  272488.,  281736.,  385204.,
      399268.,  413332.,  427396.,  261320.,  270824.,  280328.,  289832.,
      299336.,  308840.,  318344.,  327848.,  192668.,  197100.,  201532.,
      205964.,  390536.,  399528.,  408520.,  417512.,  426504.,  435496.,
      444488.,  453480.,  647812.,  661492.,  675172.,  688852.,  438952.,
      448200.,  457448.,  466696.,  666484.,  680548.,  694612.,  708676.,
      451400.,  460904.,  470408.,  479912.,  489416.,  498920.,  508424.,
      517928.,  293338.,  300370.,  307402.,  314434.,  594476.,  608732.,
      622988.,  637244.,  651500.,  665756.,  680012.,  694268.,  989334.,
      1011006., 1032678., 1054350., 670172.,  684812.,  699452.,  714092.,
      1017342., 1039590., 1061838., 1084086., 688844.,  703868.,  718892.,
      733916.,  748940.,  763964.,  778988.,  794012.,  215516.,  220460.,
      225404.,  230348.,  436232.,  446248.,  456264.,  466280.,  476296.,
      486312.,  496328.,  506344.,  722500.,  737716.,  752932.,  768148.,
      488744.,  499016.,  509288.,  519560.,  741172.,  756772.,  772372.,
      787972.,  501192.,  511720.,  522248.,  532776.,  543304.,  553832.,
      564360.,  574888.,  327610.,  335410.,  343210.,  351010.,  663020.,
      678812.,  694604.,  710396.,  726188.,  741980.,  757772.,  773564.,
      1101366., 1125342., 1149318., 1173294., 744860.,  761036.,  777212.,
      793388.,  1129374., 1153926., 1178478., 1203030., 763532.,  780092.,
      796652.,  813212.,  829772.,  846332.,  862892.,  879452.,  238364.,
      243820.,  249276.,  254732.,  481928.,  492968.,  504008.,  515048.,
      526088.,  537128.,  548168.,  559208.,  797188.,  813940.,  830692.,
      847444.,  538536.,  549832.,  561128.,  572424.,  815860.,  832996.,
      850132.,  867268.,  550984.,  562536.,  574088.,  585640.,  597192.,
      608744.,  620296.,  631848.,  347484.,  352940.,  358396.,  363852.,
      702728.,  713768.,  724808.,  735848.,  746888.,  757928.,  768968.,
      780008.,  1132228., 1148980., 1165732., 1182484., 764456.,  775752.,
      787048.,  798344.,  1158580., 1175716., 1192852., 1209988., 782024.,
      793576.,  805128.,  816680.,  828232.,  839784.,  851336.,  862888.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      4452.,   4596.,   4740.,   4884.,   3398.,   3502.,   3606.,   3710.,
      3814.,   3918.,   4022.,   4126.,   0.,      0.,      0.,      0.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  0.,      0.,      0.,      0.,
      5900.,   6108.,   6316.,   6524.,   6732.,   6940.,   7148.,   7356.,
      18664.,  19208.,  19752.,  20296.,  20840.,  21384.,  21928.,  22472.,
      23016.,  23560.,  24104.,  24648.,  15132.,  15468.,  15804.,  16140.,
      16476.,  16812.,  17148.,  17484.,  0.,      0.,      0.,      0.,
      10060.,  10268.,  10476.,  10684.,  10892.,  11100.,  11308.,  11516.,
      29544.,  30088.,  30632.,  31176.,  31720.,  32264.,  32808.,  33352.,
      33896.,  34440.,  34984.,  35528.,  21852.,  22188.,  22524.,  22860.,
      23196.,  23532.,  23868.,  24204.,  0.,      0.,      0.,      0.,
      10190.,  10358.,  10526.,  10694.,  10862.,  11030.,  11198.,  11366.,
      25604.,  26004.,  26404.,  26804.,  27204.,  27604.,  28004.,  28404.,
      28804.,  29204.,  29604.,  30004.,  16854.,  17086.,  17318.,  17550.,
      17782.,  18014.,  18246.,  18478.,  0.,      0.,      0.,      0.,
      13550.,  13718.,  13886.,  14054.,  14222.,  14390.,  14558.,  14726.,
      33604.,  34004.,  34404.,  34804.,  35204.,  35604.,  36004.,  36404.,
      36804.,  37204.,  37604.,  38004.,  21494.,  21726.,  21958.,  22190.,
      22422.,  22654.,  22886.,  23118.,  0.,      0.,      0.,      0.,
      190.,    486.,    782.,    1078.,   1374.,   1670.,   1966.,   2262.,
      2788.,   3444.,   4100.,   4756.,   5412.,   6068.,   6724.,   7380.,
      8036.,   8692.,   9348.,   10004.,  4550.,   4910.,   5270.,   5630.,
      5990.,   6350.,   6710.,   7070.,   0.,      0.,      0.,      0.,
      6110.,   6406.,   6702.,   6998.,   7294.,   7590.,   7886.,   8182.,
      15908.,  16564.,  17220.,  17876.,  18532.,  19188.,  19844.,  20500.,
      21156.,  21812.,  22468.,  23124.,  11750.,  12110.,  12470.,  12830.,
      13190.,  13550.,  13910.,  14270.,  0.,      0.,      0.,      0.,
      12300.,  13020.,  13740.,  14460.,  15180.,  15900.,  16620.,  17340.,
      33000.,  34568.,  36136.,  37704.,  39272.,  40840.,  42408.,  43976.,
      45544.,  47112.,  48680.,  50248.,  25116.,  25964.,  26812.,  27660.,
      28508.,  29356.,  30204.,  31052.,  0.,      0.,      0.,      0.,
      26700.,  27420.,  28140.,  28860.,  29580.,  30300.,  31020.,  31740.,
      64360.,  65928.,  67496.,  69064.,  70632.,  72200.,  73768.,  75336.,
      76904.,  78472.,  80040.,  81608.,  42076.,  42924.,  43772.,  44620.,
      45468.,  46316.,  47164.,  48012.,  0.,      0.,      0.,      0.,
      41100.,  41820.,  42540.,  43260.,  43980.,  44700.,  45420.,  46140.,
      95720.,  97288.,  98856.,  100424., 101992., 103560., 105128., 106696.,
      108264., 109832., 111400., 112968., 59036.,  59884.,  60732.,  61580.,
      62428.,  63276.,  64124.,  64972.,  0.,      0.,      0.,      0.,
      25710.,  26134.,  26558.,  26982.,  27406.,  27830.,  28254.,  28678.,
      58692.,  59604.,  60516.,  61428.,  62340.,  63252.,  64164.,  65076.,
      65988.,  66900.,  67812.,  68724.,  35446.,  35934.,  36422.,  36910.,
      37398.,  37886.,  38374.,  38862.,  0.,      0.,      0.,      0.,
      34190.,  34614.,  35038.,  35462.,  35886.,  36310.,  36734.,  37158.,
      76932.,  77844.,  78756.,  79668.,  80580.,  81492.,  82404.,  83316.,
      84228.,  85140.,  86052.,  86964.,  45206.,  45694.,  46182.,  46670.,
      47158.,  47646.,  48134.,  48622.,  0.,      0.,      0.,      0.,
      350.,    902.,    1454.,   2006.,   2558.,   3110.,   3662.,   4214.,
      5156.,   6324.,   7492.,   8660.,   9828.,   10996.,  12164.,  13332.,
      14500.,  15668.,  16836.,  18004.,  7782.,   8398.,   9014.,   9630.,
      10246.,  10862.,  11478.,  12094.,  0.,      0.,      0.,      0.,
      11390.,  11942.,  12494.,  13046.,  13598.,  14150.,  14702.,  15254.,
      28516.,  29684.,  30852.,  32020.,  33188.,  34356.,  35524.,  36692.,
      37860.,  39028.,  40196.,  41364.,  20102.,  20718.,  21334.,  21950.,
      22566.,  23182.,  23798.,  24414.,  0.,      0.,      0.,      0.,
      22860.,  24092.,  25324.,  26556.,  27788.,  29020.,  30252.,  31484.,
      58216.,  60808.,  63400.,  65992.,  68584.,  71176.,  73768.,  76360.,
      78952.,  81544.,  84136.,  86728.,  41820.,  43180.,  44540.,  45900.,
      47260.,  48620.,  49980.,  51340.,  0.,      0.,      0.,      0.,
      47500.,  48732.,  49964.,  51196.,  52428.,  53660.,  54892.,  56124.,
      110056., 112648., 115240., 117832., 120424., 123016., 125608., 128200.,
      130792., 133384., 135976., 138568., 69020.,  70380.,  71740.,  73100.,
      74460.,  75820.,  77180.,  78540.,  0.,      0.,      0.,      0.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 0.,      0.,      0.,      0.,
      41230.,  41910.,  42590.,  43270.,  43950.,  44630.,  45310.,  45990.,
      91780.,  93204.,  94628.,  96052.,  97476.,  98900.,  100324., 101748.,
      103172., 104596., 106020., 107444., 54038.,  54782.,  55526.,  56270.,
      57014.,  57758.,  58502.,  59246.,  0.,      0.,      0.,      0.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,   12.,   15.,   0.,    6.,
      7.,   20.,  23.,  44.,  39.,  44.,  27.,   30.,   0.,    15.,   20.,
      52.,  64.,  115., 96.,  112., 66.,  75.,   0.,    40.,   45.,   112.,
      124., 220., 176., 192., 111., 120., 0.,    65.,   70.,   172.,  184.,
      325., 256., 272., 156., 165., 0.,   64.,   68.,   152.,  161.,  266.,
      197., 208., 114., 120., 0.,   84.,  88.,   197.,  206.,  341.,  252.,
      263., 144., 150., 0.,   7.,   14.,  29.,   44.,   68.,   50.,   67.,
      36.,  45.,  0.,   42.,  49.,  104., 119.,  188.,  135.,  152.,  81.,
      90.,  0.,   87.,  104., 220., 256., 403.,  288.,  328.,  174.,  195.,
      0.,   172., 189., 400., 436., 688., 488.,  528.,  279.,  300.,  0.,
      257., 274., 580., 616., 973., 688., 728.,  384.,  405.,  0.,    160.,
      170., 356., 377., 590., 413., 436., 228.,  240.,  0.,    210.,  220.,
      461., 482., 755., 528., 551., 288., 300.,  0.,    13.,   26.,   53.,
      80.,  122., 86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,
      332., 231., 260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,
      480., 544., 282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,
      864., 447., 480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184.,
      612., 645., 0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,
      360., 0.,   336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,
      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,  1260.,
      1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,  3164.,
      2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,  3428.,
      5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,
      3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,
      9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,  8060.,
      5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396.,
      11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  2312.,  4716.,
      5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,  7076.,  4172.,
      8516.,  9276.,  14180., 9684.,  14792., 10092., 15404., 10500., 11356.,
      6463.,  13184., 14444., 22065., 15056., 22983., 15668., 23901., 16280.,
      17684., 5112.,  10396., 11316., 17240., 11724., 17852., 12132., 18464.,
      12540., 13556., 7873.,  16004., 17504., 26655., 18116., 27573., 18728.,
      28491., 19340., 20984., 6052.,  12276., 13356., 20300., 13764., 20912.,
      14172., 21524., 14580., 15756., 8712.,  17676., 18756., 28520., 19324.,
      29372., 19892., 30224., 20460., 21636., 4472.,  9036.,  10436., 15800.,
      10684., 16172., 10932., 16544., 11180., 12676., 7932.,  16036., 17436.,
      26420., 17844., 27032., 18252., 27644., 18660., 20156., 12103., 24464.,
      26684., 40425., 27296., 41343., 27908., 42261., 28520., 30884., 8872.,
      17916., 19476., 29480., 19884., 30092., 20292., 30704., 20700., 22356.,
      13513., 27284., 29744., 45015., 30356., 45933., 30968., 46851., 31580.,
      34184., 9812.,  19796., 21516., 32540., 21924., 33152., 22332., 33764.,
      22740., 24556., 14072., 28396., 30116., 45560., 30684., 46412., 31252.,
      47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,   2840.,   3768.,   6796.,   5720.,   9724.,   7672.,   12652.,
      9624.,   11320.,  3060.,   7480.,   8408.,   14716.,  11640.,  19564.,
      14872.,  24412.,  18104.,  19800.,  6170.,   14380.,  16732.,  28254.,
      21580.,  35526.,  26428.,  42798.,  31276.,  34780.,  10500.,  22360.,
      24568.,  38956.,  27800.,  43804.,  31032.,  48652.,  34264.,  37240.,
      17330.,  36700.,  40972.,  64614.,  45820.,  71886.,  50668.,  79158.,
      55516.,  60940.,  17940.,  37240.,  40728.,  63196.,  43960.,  68044.,
      47192.,  72892.,  50424.,  54680.,  26340.,  54680.,  58168.,  90316.,
      62680.,  97084.,  67192.,  103852., 71704.,  75960.,  18020.,  36760.,
      42808.,  65356.,  44760.,  68284.,  46712.,  71212.,  48664.,  55480.,
      32820.,  67000.,  73048.,  111676., 76280.,  116524., 79512.,  121372.,
      82744.,  89560.,  50810.,  103660., 113692., 173694., 118540., 180966.,
      123388., 188238., 128236., 139420., 40260.,  81880.,  89208.,  135916.,
      92440.,  140764., 95672.,  145612., 98904.,  107000., 61970.,  125980.,
      137932., 210054., 142780., 217326., 147628., 224598., 152476., 165580.,
      47700.,  96760.,  105368., 160156., 108600., 165004., 111832., 169852.,
      115064., 124440., 68900.,  139800., 148408., 225676., 152920., 232444.,
      157432., 239212., 161944., 171320., 34980.,  70680.,  81848.,  123916.,
      83800.,  126844., 85752.,  129772., 87704.,  99640.,  62580.,  126520.,
      137688., 208636., 140920., 213484., 144152., 218332., 147384., 159320.,
      95450.,  192940., 210652., 319134., 215500., 326406., 220348., 333678.,
      225196., 244060., 70020.,  141400., 153848., 232876., 157080., 237724.,
      160312., 242572., 163544., 176760., 106610., 215260., 234892., 355494.,
      239740., 362766., 244588., 370038., 249436., 270220., 77460.,  156280.,
      170008., 257116., 173240., 261964., 176472., 266812., 179704., 194200.,
      111460., 224920., 238648., 361036., 243160., 367804., 247672., 374572.,
      252184., 266680.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  2212.,  5784.,  6456.,  11788., 9688.,
      10616., 6244.,  6772.,  0.,     3300.,  3572.,  9144.,  9816.,  17788.,
      14328., 15256., 8884.,  9412.,  0.,     3630.,  3862.,  8724.,  9252.,
      15410., 11508., 12164., 6710.,  7070.,  0.,     4790.,  5022.,  11364.,
      11892., 19850., 14788., 15444., 8510.,  8870.,  0.,     270.,   694.,
      1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,     2390.,
      2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,  0.,
      4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228., 11524.,
      0.,     10100., 11140., 23640., 25848., 40876., 29080., 31544., 16708.,
      18004., 0.,     15300., 16340., 34680., 36888., 58396., 41400., 43864.,
      23188., 24484., 0.,     9630.,  10246., 21492., 22788., 35714., 25044.,
      26468., 13862., 14606., 0.,     12710., 13326., 27972., 29268., 45914.,
      32164., 33588., 17582., 18326., 0.,     510.,   1318.,  2676.,  4356.,
      6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,  5358.,  11076.,
      12756., 19706., 13732., 15540., 8078.,  9014.,  0.,     9220.,  11028.,
      22776., 26520., 40924., 28472., 32472., 16852., 18916., 0.,     18260.,
      20068., 41496., 45240., 69964., 48472., 52472., 27172., 29236., 0.,
      27300., 29108., 60216., 63960., 99004., 68472., 72472., 37492., 39556.,
      0.,     15630., 16630., 34260., 36324., 56018., 38580., 40772., 21014.,
      22142., 0.,     20630., 21630., 44580., 46644., 71978., 49540., 51732.,
      26654., 27782., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    48.,    104.,   120.,   136.,  152.,   239.,   266.,   196.,
      216.,   329.,   362.,   256.,   280.,  419.,   458.,   316.,   344.,
      372.,   400.,   111.,   118.,   264.,  280.,   296.,   312.,   509.,
      536.,   396.,   416.,   659.,   692.,  496.,   520.,   809.,   848.,
      596.,   624.,   652.,   680.,   214.,  232.,   491.,   530.,   569.,
      608.,   951.,   1014.,  719.,   764.,  1176.,  1248.,  869.,   920.,
      1401.,  1482.,  1019.,  1076.,  1133., 1190.,  341.,   358.,   724.,
      760.,   796.,   832.,   1259.,  1316., 896.,   936.,   1409.,  1472.,
      996.,   1040.,  1559.,  1628.,  1096., 1144.,  1192.,  1240.,  559.,
      592.,   1181.,  1250.,  1319.,  1388., 2076.,  2184.,  1469.,  1544.,
      2301.,  2418.,  1619.,  1700.,  2526., 2652.,  1769.,  1856.,  1943.,
      2030.,  571.,   598.,   1184.,  1240., 1296.,  1352.,  2009.,  2096.,
      1396.,  1456.,  2159.,  2252.,  1496., 1560.,  2309.,  2408.,  1596.,
      1664.,  1732.,  1800.,  841.,   868.,  1744.,  1800.,  1856.,  1912.,
      2879.,  2966.,  1996.,  2056.,  3089., 3182.,  2136.,  2200.,  3299.,
      3398.,  2276.,  2344.,  2412.,  2480., 561.,   608.,   1144.,  1240.,
      1336.,  1432.,  2039.,  2186.,  1396., 1496.,  2129.,  2282.,  1456.,
      1560.,  2219.,  2378.,  1516.,  1624., 1732.,  1840.,  1031.,  1078.,
      2104.,  2200.,  2296.,  2392.,  3509., 3656.,  2396.,  2496.,  3659.,
      3812.,  2496.,  2600.,  3809.,  3968., 2596.,  2704.,  2812.,  2920.,
      1594.,  1672.,  3251.,  3410.,  3569., 3728.,  5451.,  5694.,  3719.,
      3884.,  5676.,  5928.,  3869.,  4040., 5901.,  6162.,  4019.,  4196.,
      4373.,  4550.,  1261.,  1318.,  2564., 2680.,  2796.,  2912.,  4259.,
      4436.,  2896.,  3016.,  4409.,  4592., 2996.,  3120.,  4559.,  4748.,
      3096.,  3224.,  3352.,  3480.,  1939., 2032.,  3941.,  4130.,  4319.,
      4508.,  6576.,  6864.,  4469.,  4664., 6801.,  7098.,  4619.,  4820.,
      7026.,  7332.,  4769.,  4976.,  5183., 5390.,  1491.,  1558.,  3024.,
      3160.,  3296.,  3432.,  5009.,  5216., 3396.,  3536.,  5159.,  5372.,
      3496.,  3640.,  5309.,  5528.,  3596., 3744.,  3892.,  4040.,  2161.,
      2228.,  4384.,  4520.,  4656.,  4792., 7079.,  7286.,  4796.,  4936.,
      7289.,  7502.,  4936.,  5080.,  7499., 7718.,  5076.,  5224.,  5372.,
      5520.,  1081.,  1168.,  2184.,  2360., 2536.,  2712.,  3839.,  4106.,
      2596.,  2776.,  3929.,  4202.,  2656., 2840.,  4019.,  4298.,  2716.,
      2904.,  3092.,  3280.,  1951.,  2038., 3944.,  4120.,  4296.,  4472.,
      6509.,  6776.,  4396.,  4576.,  6659., 6932.,  4496.,  4680.,  6809.,
      7088.,  4596.,  4784.,  4972.,  5160., 2974.,  3112.,  6011.,  6290.,
      6569.,  6848.,  9951.,  10374., 6719., 7004.,  10176., 10608., 6869.,
      7160.,  10401., 10842., 7019.,  7316., 7613.,  7910.,  2181.,  2278.,
      4404.,  4600.,  4796.,  4992.,  7259., 7556.,  4896.,  5096.,  7409.,
      7712.,  4996.,  5200.,  7559.,  7868., 5096.,  5304.,  5512.,  5720.,
      3319.,  3472.,  6701.,  7010.,  7319., 7628.,  11076., 11544., 7469.,
      7784.,  11301., 11778., 7619.,  7940., 11526., 12012., 7769.,  8096.,
      8423.,  8750.,  2411.,  2518.,  4864., 5080.,  5296.,  5512.,  8009.,
      8336.,  5396.,  5616.,  8159.,  8492., 5496.,  5720.,  8309.,  8648.,
      5596.,  5824.,  6052.,  6280.,  3481., 3588.,  7024.,  7240.,  7456.,
      7672.,  11279., 11606., 7596.,  7816., 11489., 11822., 7736.,  7960.,
      11699., 12038., 7876.,  8104.,  8332., 8560.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,   0.,    0.,
      11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,
      73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   0.,    0.,
      25.,   30.,   35.,   40.,   92.,   104.,  116.,  128.,  209.,  230.,
      176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,  0.,    0.,
      75.,   80.,   85.,   90.,   212.,  224.,  236.,  248.,  419.,  440.,
      336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  0.,    0.,
      125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,
      496.,  512.,  528.,  544.,  303.,  312.,  321.,  330.,  0.,    0.,
      124.,  128.,  132.,  136.,  295.,  304.,  313.,  322.,  517.,  532.,
      383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,  0.,    0.,
      164.,  168.,  172.,  176.,  385.,  394.,  403.,  412.,  667.,  682.,
      493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,  0.,    0.,
      7.,    14.,   21.,   28.,   43.,   58.,   73.,   88.,   112.,  136.,
      83.,   100.,  117.,  134.,  63.,   72.,   81.,   90.,   0.,    0.,
      77.,   84.,   91.,   98.,   193.,  208.,  223.,  238.,  352.,  376.,
      253.,  270.,  287.,  304.,  153.,  162.,  171.,  180.,  0.,    0.,
      157.,  174.,  191.,  208.,  404.,  440.,  476.,  512.,  749.,  806.,
      536.,  576.,  616.,  656.,  327.,  348.,  369.,  390.,  0.,    0.,
      327.,  344.,  361.,  378.,  764.,  800.,  836.,  872.,  1319., 1376.,
      936.,  976.,  1016., 1056., 537.,  558.,  579.,  600.,  0.,    0.,
      497.,  514.,  531.,  548.,  1124., 1160., 1196., 1232., 1889., 1946.,
      1336., 1376., 1416., 1456., 747.,  768.,  789.,  810.,  0.,    0.,
      310.,  320.,  330.,  340.,  691.,  712.,  733.,  754.,  1147., 1180.,
      803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,  0.,    0.,
      410.,  420.,  430.,  440.,  901.,  922.,  943.,  964.,  1477., 1510.,
      1033., 1056., 1079., 1102., 564.,  576.,  588.,  600.,  0.,    0.,
      13.,   26.,   39.,   52.,   79.,   106.,  133.,  160.,  202.,  244.,
      143.,  172.,  201.,  230.,  105.,  120.,  135.,  150.,  0.,    0.,
      143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  622.,  664.,
      433.,  462.,  491.,  520.,  255.,  270.,  285.,  300.,  0.,    0.,
      289.,  318.,  347.,  376.,  716.,  776.,  836.,  896.,  1289., 1382.,
      896.,  960.,  1024., 1088., 531.,  564.,  597.,  630.,  0.,    0.,
      579.,  608.,  637.,  666.,  1316., 1376., 1436., 1496., 2219., 2312.,
      1536., 1600., 1664., 1728., 861.,  894.,  927.,  960.,  0.,    0.,
      869.,  898.,  927.,  956.,  1916., 1976., 2036., 2096., 3149., 3242.,
      2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290., 0.,    0.,
      496.,  512.,  528.,  544.,  1087., 1120., 1153., 1186., 1777., 1828.,
      1223., 1258., 1293., 1328., 666.,  684.,  702.,  720.,  0.,    0.,
      656.,  672.,  688.,  704.,  1417., 1450., 1483., 1516., 2287., 2338.,
      1573., 1608., 1643., 1678., 846.,  864.,  882.,  900.,  0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      264.,   316.,   700.,   820.,   940.,   1060.,  1684.,  1888.,  1412.,
      1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,  2356.,  2572.,
      2788.,  3004.,  784.,   836.,   1900.,  2020.,  2140.,  2260.,  3724.,
      3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,  6100.,  6400.,
      4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,  3880.,  4180.,
      4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,  6556.,  6952.,
      10605., 11235., 7744.,  8188.,  8632.,  9076.,  2604.,  2736.,  5540.,
      5820.,  6100.,  6380.,  9664.,  10108., 6892.,  7204.,  10852., 11344.,
      7684.,  8028.,  12040., 12580., 8476.,  8852.,  9228.,  9604.,  4271.,
      4529.,  9040.,  9580.,  10120., 10660., 15951., 16797., 11308., 11896.,
      17733., 18651., 12496., 13132., 19515., 20505., 13684., 14368., 15052.,
      15736., 4424.,  4636.,  9180.,  9620.,  10060., 10500., 15604., 16288.,
      10852., 11324., 16792., 17524., 11644., 12148., 17980., 18760., 12436.,
      12972., 13508., 14044., 6544.,  6756.,  13580., 14020., 14460., 14900.,
      22444., 23128., 15572., 16044., 24112., 24844., 16684., 17188., 25780.,
      26560., 17796., 18332., 18868., 19404., 4344.,  4716.,  8860.,  9620.,
      10380., 11140., 15844., 17008., 10852., 11644., 16552., 17764., 11324.,
      12148., 17260., 18520., 11796., 12652., 13508., 14364., 8064.,  8436.,
      16460., 17220., 17980., 18740., 27484., 28648., 18772., 19564., 28672.,
      29884., 19564., 20388., 29860., 31120., 20356., 21212., 22068., 22924.,
      12461., 13079., 25420., 26680., 27940., 29200., 42681., 44607., 29128.,
      30436., 44463., 46461., 30316., 31672., 46245., 48315., 31504., 32908.,
      34312., 35716., 9884.,  10336., 20100., 21020., 21940., 22860., 33424.,
      34828., 22732., 23684., 34612., 36064., 23524., 24508., 35800., 37300.,
      24316., 25332., 26348., 27364., 15191., 15929., 30880., 32380., 33880.,
      35380., 51591., 53877., 35068., 36616., 53373., 55731., 36256., 37852.,
      55155., 57585., 37444., 39088., 40732., 42376., 11704., 12236., 23740.,
      24820., 25900., 26980., 39364., 41008., 26692., 27804., 40552., 42244.,
      27484., 28628., 41740., 43480., 28276., 29452., 30628., 31804., 17024.,
      17556., 34540., 35620., 36700., 37780., 55804., 57448., 37812., 38924.,
      57472., 59164., 38924., 40068., 59140., 60880., 40036., 41212., 42388.,
      43564., 8424.,  9116.,  17020., 18420., 19820., 21220., 30004., 32128.,
      20292., 21724., 30712., 32884., 20764., 22228., 31420., 33640., 21236.,
      22732., 24228., 25724., 15344., 16036., 31020., 32420., 33820., 35220.,
      51244., 53368., 34612., 36044., 52432., 54604., 35404., 36868., 53620.,
      55840., 36196., 37692., 39188., 40684., 23381., 24479., 47260., 49480.,
      51700., 53920., 78321., 81687., 52888., 55156., 80103., 83541., 54076.,
      56392., 81885., 85395., 55264., 57628., 59992., 62356., 17164., 17936.,
      34660., 36220., 37780., 39340., 57184., 59548., 38572., 40164., 58372.,
      60784., 39364., 40988., 59560., 62020., 40156., 41812., 43468., 45124.,
      26111., 27329., 52720., 55180., 57640., 60100., 87231., 90957., 58828.,
      61336., 89013., 92811., 60016., 62572., 90795., 94665., 61204., 63808.,
      66412., 69016., 18984., 19836., 38300., 40020., 41740., 43460., 63124.,
      65728., 42532., 44284., 64312., 66964., 43324., 45108., 65500., 68200.,
      44116., 45932., 47748., 49564., 27504., 28356., 55500., 57220., 58940.,
      60660., 89164., 91768., 60052., 61804., 90832., 93484., 61164., 62948.,
      92500., 95200., 62276., 64092., 65908., 67724.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,
      0.,     0.,     65.,    71.,    77.,    83.,    240.,   260.,   280.,
      300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,
      413.,   435.,   0.,     0.,     148.,   184.,   220.,   256.,   612.,
      700.,   788.,   876.,   1456.,  1612.,  1260.,  1380.,  1500.,  1620.,
      900.,   968.,   1036.,  1104.,  0.,     0.,     508.,   544.,   580.,
      616.,   1492.,  1580.,  1668.,  1756.,  3016.,  3172.,  2460.,  2580.,
      2700.,  2820.,  1580.,  1648.,  1716.,  1784.,  0.,     0.,     868.,
      904.,   940.,   976.,   2372.,  2460.,  2548.,  2636.,  4576.,  4732.,
      3660.,  3780.,  3900.,  4020.,  2260.,  2328.,  2396.,  2464.,  0.,
      0.,     923.,   953.,   983.,   1013.,  2212.,  2280.,  2348.,  2416.,
      3899.,  4013.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,
      1829.,  0.,     0.,     1223.,  1253.,  1283.,  1313.,  2892.,  2960.,
      3028.,  3096.,  5039.,  5153.,  3744.,  3828.,  3912.,  3996.,  2151.,
      2197.,  2243.,  2289.,  0.,     0.,     41.,    95.,    149.,   203.,
      304.,   420.,   536.,   652.,   821.,   1007.,  612.,   744.,   876.,
      1008.,  473.,   543.,   613.,   683.,   0.,     0.,     581.,   635.,
      689.,   743.,   1464.,  1580.,  1696.,  1812.,  2681.,  2867.,  1932.,
      2064.,  2196.,  2328.,  1173.,  1243.,  1313.,  1383.,  0.,     0.,
      1180.,  1312.,  1444.,  1576.,  3060.,  3340.,  3620.,  3900.,  5704.,
      6148.,  4092.,  4404.,  4716.,  5028.,  2508.,  2672.,  2836.,  3000.,
      0.,     0.,     2500.,  2632.,  2764.,  2896.,  5860.,  6140.,  6420.,
      6700.,  10144., 10588., 7212.,  7524.,  7836.,  8148.,  4148.,  4312.,
      4476.,  4640.,  0.,     0.,     3820.,  3952.,  4084.,  4216.,  8660.,
      8940.,  9220.,  9500.,  14584., 15028., 10332., 10644., 10956., 11268.,
      5788.,  5952.,  6116.,  6280.,  0.,     0.,     2399.,  2477.,  2555.,
      2633.,  5356.,  5520.,  5684.,  5848.,  8903.,  9161.,  6240.,  6420.,
      6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  0.,     0.,     3179.,
      3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488.,  11483., 11741.,
      8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,  4677.,  0.,
      0.,     77.,    179.,   281.,   383.,   568.,   780.,   992.,   1204.,
      1505.,  1835.,  1068.,  1296.,  1524.,  1752.,  797.,   915.,   1033.,
      1151.,  0.,     0.,     1097.,  1199.,  1301.,  1403.,  2688.,  2900.,
      3112.,  3324.,  4805.,  5135.,  3348.,  3576.,  3804.,  4032.,  1977.,
      2095.,  2213.,  2331.,  0.,     0.,     2212.,  2440.,  2668.,  2896.,
      5508.,  5980.,  6452.,  6924.,  9952.,  10684., 6924.,  7428.,  7932.,
      8436.,  4116.,  4376.,  4636.,  4896.,  0.,     0.,     4492.,  4720.,
      4948.,  5176.,  10228., 10700., 11172., 11644., 17272., 18004., 11964.,
      12468., 12972., 13476., 6716.,  6976.,  7236.,  7496.,  0.,     0.,
      6772.,  7000.,  7228.,  7456.,  14948., 15420., 15892., 16364., 24592.,
      25324., 17004., 17508., 18012., 18516., 9316.,  9576.,  9836.,  10096.,
      0.,     0.,     3875.,  4001.,  4127.,  4253.,  8500.,  8760.,  9020.,
      9280.,  13907., 14309., 9576.,  9852.,  10128., 10404., 5219.,  5361.,
      5503.,  5645.,  0.,     0.,     5135.,  5261.,  5387.,  5513.,  11100.,
      11360., 11620., 11880., 17927., 18329., 12336., 12612., 12888., 13164.,
      6639.,  6781.,  6923.,  7065.,  0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1860.,   2260.,   5080.,   6008.,   6936.,   7864.,   12572.,  14156.,
      10680.,  11864.,  18188.,  20156.,  14424.,  15864.,  23804.,  26156.,
      18168.,  19864.,  21560.,  23256.,  5860.,   6260.,   14360.,  15288.,
      16216.,  17144.,  28412.,  29996.,  22520.,  23704.,  37868.,  39836.,
      28824.,  30264.,  47324.,  49676.,  35128.,  36824.,  38520.,  40216.,
      11650.,  12730.,  27260.,  29612.,  31964.,  34316.,  54078.,  57894.,
      41420.,  44156.,  68262.,  72654.,  50876.,  53996.,  82446.,  87414.,
      60332.,  63836.,  67340.,  70844.,  20340.,  21380.,  43320.,  45528.,
      47736.,  49944.,  75692.,  79196.,  54040.,  56504.,  85148.,  89036.,
      60344.,  63064.,  94604.,  98876.,  66648.,  69624.,  72600.,  75576.,
      33370.,  35410.,  70700.,  74972.,  79244.,  83516.,  124998., 131694.,
      88700.,  93356.,  139182., 146454., 98156.,  103196., 153366., 161214.,
      107612., 113036., 118460., 123884., 34820.,  36500.,  72280.,  75768.,
      79256.,  82744.,  122972., 128396., 85560.,  89304.,  132428., 138236.,
      91864.,  95864.,  141884., 148076., 98168.,  102424., 106680., 110936.,
      51620.,  53300.,  107160., 110648., 114136., 117624., 177212., 182636.,
      123000., 126744., 190508., 196316., 131864., 135864., 203804., 209996.,
      140728., 144984., 149240., 153496., 34180.,  37140.,  69720.,  75768.,
      81816.,  87864.,  124892., 134156., 85560.,  91864.,  130508., 140156.,
      89304.,  95864.,  136124., 146156., 93048.,  99864.,  106680., 113496.,
      63780.,  66740.,  130200., 136248., 142296., 148344., 217532., 226796.,
      148600., 154904., 226988., 236636., 154904., 161464., 236444., 246476.,
      161208., 168024., 174840., 181656., 98530.,  103450., 201020., 211052.,
      221084., 231116., 337758., 353094., 230540., 240956., 351942., 367854.,
      239996., 250796., 366126., 382614., 249452., 260636., 271820., 283004.,
      78260.,  81860.,  159160., 166488., 173816., 181144., 264812., 275996.,
      180120., 187704., 274268., 285836., 186424., 194264., 283724., 295676.,
      192728., 200824., 208920., 217016., 120250., 126130., 244460., 256412.,
      268364., 280316., 408678., 426894., 277820., 290156., 422862., 441654.,
      287276., 299996., 437046., 456414., 296732., 309836., 322940., 336044.,
      92740.,  96980.,  188120., 196728., 205336., 213944., 312092., 325196.,
      211640., 220504., 321548., 335036., 217944., 227064., 331004., 344876.,
      224248., 233624., 243000., 252376., 135140., 139380., 274200., 282808.,
      291416., 300024., 443132., 456236., 300280., 309144., 456428., 469916.,
      309144., 318264., 469724., 483596., 318008., 327384., 336760., 346136.,
      66500.,  72020.,  134360., 145528., 156696., 167864., 237212., 254156.,
      160440., 171864., 242828., 260156., 164184., 175864., 248444., 266156.,
      167928., 179864., 191800., 203736., 121700., 127220., 246040., 257208.,
      268376., 279544., 406652., 423596., 274680., 286104., 416108., 433436.,
      280984., 292664., 425564., 443276., 287288., 299224., 311160., 323096.,
      185410., 194170., 374780., 392492., 410204., 427916., 621438., 648294.,
      419660., 437756., 635622., 663054., 429116., 447596., 649806., 677814.,
      438572., 457436., 476300., 495164., 136180., 142340., 275000., 287448.,
      299896., 312344., 453932., 472796., 306200., 318904., 463388., 482636.,
      312504., 325464., 472844., 492476., 318808., 332024., 345240., 358456.,
      207130., 216850., 418220., 437852., 457484., 477116., 692358., 722094.,
      466940., 486956., 706542., 736854., 476396., 496796., 720726., 751614.,
      485852., 506636., 527420., 548204., 150660., 157460., 303960., 317688.,
      331416., 345144., 501212., 521996., 337720., 351704., 510668., 531836.,
      344024., 358264., 520124., 541676., 350328., 364824., 379320., 393816.,
      218660., 225460., 441240., 454968., 468696., 482424., 709052., 729836.,
      477560., 491544., 722348., 743516., 486424., 500664., 735644., 757196.,
      495288., 509784., 524280., 538776.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1140.,   1412.,   1684.,   1956.,   1118.,   1286.,
      1454.,   1622.,   0.,      0.,      430.,    470.,    510.,    550.,
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      4404.,   4676.,   2798.,   2966.,   3134.,   3302.,   0.,      0.,
      980.,    1252.,   1524.,   1796.,   4408.,   5080.,   5752.,   6424.,
      10796.,  11996.,  9496.,   10424.,  11352.,  12280.,  6868.,   7396.,
      7924.,   8452.,   0.,      0.,      3700.,   3972.,   4244.,   4516.,
      11128.,  11800.,  12472.,  13144.,  22796.,  23996.,  18776.,  19704.,
      20632.,  21560.,  12148.,  12676.,  13204.,  13732.,  0.,      0.,
      6420.,   6692.,   6964.,   7236.,   17848.,  18520.,  19192.,  19864.,
      34796.,  35996.,  28056.,  28984.,  29912.,  30840.,  17428.,  17956.,
      18484.,  19012.,  0.,      0.,      7110.,   7342.,   7574.,   7806.,
      17108.,  17636.,  18164.,  18692.,  30250.,  31138.,  22596.,  23252.,
      23908.,  24564.,  13190.,  13550.,  13910.,  14270.,  0.,      0.,
      9430.,   9662.,   9894.,   10126.,  22388.,  22916.,  23444.,  23972.,
      39130.,  40018.,  29156.,  29812.,  30468.,  31124.,  16790.,  17150.,
      17510.,  17870.,  0.,      0.,      270.,    694.,    1118.,   1542.,
      2276.,   3188.,   4100.,   5012.,   6274.,   7738.,   4692.,   5732.,
      6772.,   7812.,   3662.,   4214.,   4766.,   5318.,   0.,      0.,
      4510.,   4934.,   5358.,   5782.,   11396.,  12308.,  13220.,  14132.,
      20914.,  22378.,  15092.,  16132.,  17172.,  18212.,  9182.,   9734.,
      10286.,  10838.,  0.,      0.,      9140.,   10180.,  11220.,  12260.,
      23800.,  26008.,  28216.,  30424.,  44492.,  47996.,  31960.,  34424.,
      36888.,  39352.,  19636.,  20932.,  22228.,  23524.,  0.,      0.,
      19540.,  20580.,  21620.,  22660.,  45880.,  48088.,  50296.,  52504.,
      79532.,  83036.,  56600.,  59064.,  61528.,  63992.,  32596.,  33892.,
      35188.,  36484.,  0.,      0.,      29940.,  30980.,  32020.,  33060.,
      67960.,  70168.,  72376.,  74584.,  114572., 118076., 81240.,  83704.,
      86168.,  88632.,  45556.,  46852.,  48148.,  49444.,  0.,      0.,
      18870.,  19486.,  20102.,  20718.,  42164.,  43460.,  44756.,  46052.,
      70138.,  72178.,  49188.,  50612.,  52036.,  53460.,  27254.,  27998.,
      28742.,  29486.,  0.,      0.,      25030.,  25646.,  26262.,  26878.,
      55124.,  56420.,  57716.,  59012.,  90538.,  92578.,  63428.,  64852.,
      66276.,  67700.,  34694.,  35438.,  36182.,  36926.,  0.,      0.,
      510.,    1318.,   2126.,   2934.,   4292.,   5972.,   7652.,   9332.,
      11602.,  14218.,  8244.,   10052.,  11860.,  13668.,  6206.,   7142.,
      8078.,   9014.,   0.,      0.,      8590.,   9398.,   10206.,  11014.,
      21092.,  22772.,  24452.,  26132.,  37762.,  40378.,  26324.,  28132.,
      29940.,  31748.,  15566.,  16502.,  17438.,  18374.,  0.,      0.,
      17300.,  19108.,  20916.,  22724.,  43192.,  46936.,  50680.,  54424.,
      78188.,  83996.,  54424.,  58424.,  62424.,  66424.,  32404.,  34468.,
      36532.,  38596.,  0.,      0.,      35380.,  37188.,  38996.,  40804.,
      80632.,  84376.,  88120.,  91864.,  136268., 142076., 94424.,  98424.,
      102424., 106424., 53044.,  55108.,  57172.,  59236.,  0.,      0.,
      53460.,  55268.,  57076.,  58884.,  118072., 121816., 125560., 129304.,
      194348., 200156., 134424., 138424., 142424., 146424., 73684.,  75748.,
      77812.,  79876.,  0.,      0.,      30630.,  31630.,  32630.,  33630.,
      67220.,  69284.,  71348.,  73412.,  110026., 113218., 75780.,  77972.,
      80164.,  82356.,  41318.,  42446.,  43574.,  44702.,  0.,      0.,
      40630.,  41630.,  42630.,  43630.,  87860.,  89924.,  91988.,  94052.,
      141946., 145138., 97700.,  99892.,  102084., 104276., 52598.,  53726.,
      54854.,  55982.,  0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      75.,    82.,    89.,    96.,    192.,   208.,   224.,   240.,   256.,
      272.,   288.,   304.,   451.,   478.,   505.,   532.,   372.,   392.,
      412.,   432.,   625.,   658.,   691.,   724.,   488.,   512.,   536.,
      560.,   799.,   838.,   877.,   916.,   604.,   632.,   660.,   688.,
      716.,   744.,   772.,   800.,   215.,   222.,   229.,   236.,   512.,
      528.,   544.,   560.,   576.,   592.,   608.,   624.,   991.,   1018.,
      1045.,  1072.,  772.,   792.,   812.,   832.,   1285.,  1318.,  1351.,
      1384.,  968.,   992.,   1016.,  1040.,  1579.,  1618.,  1657.,  1696.,
      1164.,  1192.,  1220.,  1248.,  1276.,  1304.,  1332.,  1360.,  410.,
      428.,   446.,   464.,   943.,   982.,   1021.,  1060.,  1099.,  1138.,
      1177.,  1216.,  1839.,  1902.,  1965.,  2028.,  1393.,  1438.,  1483.,
      1528.,  2280.,  2352.,  2424.,  2496.,  1687.,  1738.,  1789.,  1840.,
      2721.,  2802.,  2883.,  2964.,  1981.,  2038.,  2095.,  2152.,  2209.,
      2266.,  2323.,  2380.,  665.,   682.,   699.,   716.,   1412.,  1448.,
      1484.,  1520.,  1556.,  1592.,  1628.,  1664.,  2461.,  2518.,  2575.,
      2632.,  1752.,  1792.,  1832.,  1872.,  2755.,  2818.,  2881.,  2944.,
      1948.,  1992.,  2036.,  2080.,  3049.,  3118.,  3187.,  3256.,  2144.,
      2192.,  2240.,  2288.,  2336.,  2384.,  2432.,  2480.,  1085.,  1118.,
      1151.,  1184.,  2293.,  2362.,  2431.,  2500.,  2569.,  2638.,  2707.,
      2776.,  4044.,  4152.,  4260.,  4368.,  2863.,  2938.,  3013.,  3088.,
      4485.,  4602.,  4719.,  4836.,  3157.,  3238.,  3319.,  3400.,  4926.,
      5052.,  5178.,  5304.,  3451.,  3538.,  3625.,  3712.,  3799.,  3886.,
      3973.,  4060.,  1115.,  1142.,  1169.,  1196.,  2312.,  2368.,  2424.,
      2480.,  2536.,  2592.,  2648.,  2704.,  3931.,  4018.,  4105.,  4192.,
      2732.,  2792.,  2852.,  2912.,  4225.,  4318.,  4411.,  4504.,  2928.,
      2992.,  3056.,  3120.,  4519.,  4618.,  4717.,  4816.,  3124.,  3192.,
      3260.,  3328.,  3396.,  3464.,  3532.,  3600.,  1655.,  1682.,  1709.,
      1736.,  3432.,  3488.,  3544.,  3600.,  3656.,  3712.,  3768.,  3824.,
      5671.,  5758.,  5845.,  5932.,  3932.,  3992.,  4052.,  4112.,  6085.,
      6178.,  6271.,  6364.,  4208.,  4272.,  4336.,  4400.,  6499.,  6598.,
      6697.,  6796.,  4484.,  4552.,  4620.,  4688.,  4756.,  4824.,  4892.,
      4960.,  1075.,  1122.,  1169.,  1216.,  2192.,  2288.,  2384.,  2480.,
      2576.,  2672.,  2768.,  2864.,  3931.,  4078.,  4225.,  4372.,  2692.,
      2792.,  2892.,  2992.,  4105.,  4258.,  4411.,  4564.,  2808.,  2912.,
      3016.,  3120.,  4279.,  4438.,  4597.,  4756.,  2924.,  3032.,  3140.,
      3248.,  3356.,  3464.,  3572.,  3680.,  2015.,  2062.,  2109.,  2156.,
      4112.,  4208.,  4304.,  4400.,  4496.,  4592.,  4688.,  4784.,  6871.,
      7018.,  7165.,  7312.,  4692.,  4792.,  4892.,  4992.,  7165.,  7318.,
      7471.,  7624.,  4888.,  4992.,  5096.,  5200.,  7459.,  7618.,  7777.,
      7936.,  5084.,  5192.,  5300.,  5408.,  5516.,  5624.,  5732.,  5840.,
      3110.,  3188.,  3266.,  3344.,  6343.,  6502.,  6661.,  6820.,  6979.,
      7138.,  7297.,  7456.,  10659., 10902., 11145., 11388., 7273.,  7438.,
      7603.,  7768.,  11100., 11352., 11604., 11856., 7567.,  7738.,  7909.,
      8080.,  11541., 11802., 12063., 12324., 7861.,  8038.,  8215.,  8392.,
      8569.,  8746.,  8923.,  9100.,  2465.,  2522.,  2579.,  2636.,  5012.,
      5128.,  5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,
      8695.,  8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,
      9184.,  5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,
      6064.,  6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,
      3878.,  3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,
      8827.,  9016.,  12864., 13152., 13440., 13728., 8743.,  8938.,  9133.,
      9328.,  13305., 13602., 13899., 14196., 9037.,  9238.,  9439.,  9640.,
      13746., 14052., 14358., 14664., 9331.,  9538.,  9745.,  9952.,  10159.,
      10366., 10573., 10780., 2915.,  2982.,  3049.,  3116.,  5912.,  6048.,
      6184.,  6320.,  6456.,  6592.,  6728.,  6864.,  9811.,  10018., 10225.,
      10432., 6652.,  6792.,  6932.,  7072.,  10105., 10318., 10531., 10744.,
      6848.,  6992.,  7136.,  7280.,  10399., 10618., 10837., 11056., 7044.,
      7192.,  7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4255.,  4322.,
      4389.,  4456.,  8632.,  8768.,  8904.,  9040.,  9176.,  9312.,  9448.,
      9584.,  13951., 14158., 14365., 14572., 9452.,  9592.,  9732.,  9872.,
      14365., 14578., 14791., 15004., 9728.,  9872.,  10016., 10160., 14779.,
      14998., 15217., 15436., 10004., 10152., 10300., 10448., 10596., 10744.,
      10892., 11040., 2075.,  2162.,  2249.,  2336.,  4192.,  4368.,  4544.,
      4720.,  4896.,  5072.,  5248.,  5424.,  7411.,  7678.,  7945.,  8212.,
      5012.,  5192.,  5372.,  5552.,  7585.,  7858.,  8131.,  8404.,  5128.,
      5312.,  5496.,  5680.,  7759.,  8038.,  8317.,  8596.,  5244.,  5432.,
      5620.,  5808.,  5996.,  6184.,  6372.,  6560.,  3815.,  3902.,  3989.,
      4076.,  7712.,  7888.,  8064.,  8240.,  8416.,  8592.,  8768.,  8944.,
      12751., 13018., 13285., 13552., 8612.,  8792.,  8972.,  9152.,  13045.,
      13318., 13591., 13864., 8808.,  8992.,  9176.,  9360.,  13339., 13618.,
      13897., 14176., 9004.,  9192.,  9380.,  9568.,  9756.,  9944.,  10132.,
      10320., 5810.,  5948.,  6086.,  6224.,  11743., 12022., 12301., 12580.,
      12859., 13138., 13417., 13696., 19479., 19902., 20325., 20748., 13153.,
      13438., 13723., 14008., 19920., 20352., 20784., 21216., 13447., 13738.,
      14029., 14320., 20361., 20802., 21243., 21684., 13741., 14038., 14335.,
      14632., 14929., 15226., 15523., 15820., 4265.,  4362.,  4459.,  4556.,
      8612.,  8808.,  9004.,  9200.,  9396.,  9592.,  9788.,  9984.,  14221.,
      14518., 14815., 15112., 9592.,  9792.,  9992.,  10192., 14515., 14818.,
      15121., 15424., 9788.,  9992.,  10196., 10400., 14809., 15118., 15427.,
      15736., 9984.,  10192., 10400., 10608., 10816., 11024., 11232., 11440.,
      6485.,  6638.,  6791.,  6944.,  13093., 13402., 13711., 14020., 14329.,
      14638., 14947., 15256., 21684., 22152., 22620., 23088., 14623., 14938.,
      15253., 15568., 22125., 22602., 23079., 23556., 14917., 15238., 15559.,
      15880., 22566., 23052., 23538., 24024., 15211., 15538., 15865., 16192.,
      16519., 16846., 17173., 17500., 4715.,  4822.,  4929.,  5036.,  9512.,
      9728.,  9944.,  10160., 10376., 10592., 10808., 11024., 15691., 16018.,
      16345., 16672., 10572., 10792., 11012., 11232., 15985., 16318., 16651.,
      16984., 10768., 10992., 11216., 11440., 16279., 16618., 16957., 17296.,
      10964., 11192., 11420., 11648., 11876., 12104., 12332., 12560., 6855.,
      6962.,  7069.,  7176.,  13832., 14048., 14264., 14480., 14696., 14912.,
      15128., 15344., 22231., 22558., 22885., 23212., 14972., 15192., 15412.,
      15632., 22645., 22978., 23311., 23644., 15248., 15472., 15696., 15920.,
      23059., 23398., 23737., 24076., 15524., 15752., 15980., 16208., 16436.,
      16664., 16892., 17120.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,
      41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,
      45.,   48.,   51.,   54.,   57.,   60.,   0.,    0.,    0.,    0.,
      21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,
      77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,  170.,  176.,
      141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,  99.,   102.,
      105.,  108.,  111.,  114.,  117.,  120.,  0.,    0.,    0.,    0.,
      45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,   172.,  184.,
      196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,
      336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,
      255.,  264.,  273.,  282.,  291.,  300.,  0.,    0.,    0.,    0.,
      145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,
      436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,
      656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,
      435.,  444.,  453.,  462.,  471.,  480.,  0.,    0.,    0.,    0.,
      245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,
      676.,  688.,  700.,  712.,  724.,  736.,  1237., 1258., 1279., 1300.,
      976.,  992.,  1008., 1024., 1040., 1056., 1072., 1088., 597.,  606.,
      615.,  624.,  633.,  642.,  651.,  660.,  0.,    0.,    0.,    0.,
      244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,
      599.,  608.,  617.,  626.,  635.,  644.,  1019., 1034., 1049., 1064.,
      755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,
      450.,  456.,  462.,  468.,  474.,  480.,  0.,    0.,    0.,    0.,
      324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,
      779.,  788.,  797.,  806.,  815.,  824.,  1319., 1334., 1349., 1364.,
      975.,  986.,  997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,
      570.,  576.,  582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,
      101.,  116.,  131.,  146.,  161.,  176.,  200.,  224.,  248.,  272.,
      149.,  166.,  183.,  200.,  217.,  234.,  251.,  268.,  117.,  126.,
      135.,  144.,  153.,  162.,  171.,  180.,  0.,    0.,    0.,    0.,
      147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,
      401.,  416.,  431.,  446.,  461.,  476.,  680.,  704.,  728.,  752.,
      489.,  506.,  523.,  540.,  557.,  574.,  591.,  608.,  297.,  306.,
      315.,  324.,  333.,  342.,  351.,  360.,  0.,    0.,    0.,    0.,
      297.,  314.,  331.,  348.,  365.,  382.,  399.,  416.,  772.,  808.,
      844.,  880.,  916.,  952.,  988.,  1024., 1441., 1498., 1555., 1612.,
      1032., 1072., 1112., 1152., 1192., 1232., 1272., 1312., 633.,  654.,
      675.,  696.,  717.,  738.,  759.,  780.,  0.,    0.,    0.,    0.,
      637.,  654.,  671.,  688.,  705.,  722.,  739.,  756.,  1492., 1528.,
      1564., 1600., 1636., 1672., 1708., 1744., 2581., 2638., 2695., 2752.,
      1832., 1872., 1912., 1952., 1992., 2032., 2072., 2112., 1053., 1074.,
      1095., 1116., 1137., 1158., 1179., 1200., 0.,    0.,    0.,    0.,
      977.,  994.,  1011., 1028., 1045., 1062., 1079., 1096., 2212., 2248.,
      2284., 2320., 2356., 2392., 2428., 2464., 3721., 3778., 3835., 3892.,
      2632., 2672., 2712., 2752., 2792., 2832., 2872., 2912., 1473., 1494.,
      1515., 1536., 1557., 1578., 1599., 1620., 0.,    0.,    0.,    0.,
      610.,  620.,  630.,  640.,  650.,  660.,  670.,  680.,  1361., 1382.,
      1403., 1424., 1445., 1466., 1487., 1508., 2261., 2294., 2327., 2360.,
      1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744., 876.,  888.,
      900.,  912.,  924.,  936.,  948.,  960.,  0.,    0.,    0.,    0.,
      810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  1781., 1802.,
      1823., 1844., 1865., 1886., 1907., 1928., 2921., 2954., 2987., 3020.,
      2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128.,
      1140., 1152., 1164., 1176., 1188., 1200., 0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   65.,   78.,   91.,   104.,  131.,  158.,
      185.,  212.,  239.,  266.,  293.,  320.,  362.,  404.,  446.,  488.,
      257.,  286.,  315.,  344.,  373.,  402.,  431.,  460.,  195.,  210.,
      225.,  240.,  255.,  270.,  285.,  300.,  0.,    0.,    0.,    0.,
      273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,
      725.,  752.,  779.,  806.,  833.,  860.,  1202., 1244., 1286., 1328.,
      837.,  866.,  895.,  924.,  953.,  982.,  1011., 1040., 495.,  510.,
      525.,  540.,  555.,  570.,  585.,  600.,  0.,    0.,    0.,    0.,
      549.,  578.,  607.,  636.,  665.,  694.,  723.,  752.,  1372., 1432.,
      1492., 1552., 1612., 1672., 1732., 1792., 2485., 2578., 2671., 2764.,
      1728., 1792., 1856., 1920., 1984., 2048., 2112., 2176., 1029., 1062.,
      1095., 1128., 1161., 1194., 1227., 1260., 0.,    0.,    0.,    0.,
      1129., 1158., 1187., 1216., 1245., 1274., 1303., 1332., 2572., 2632.,
      2692., 2752., 2812., 2872., 2932., 2992., 4345., 4438., 4531., 4624.,
      3008., 3072., 3136., 3200., 3264., 3328., 3392., 3456., 1689., 1722.,
      1755., 1788., 1821., 1854., 1887., 1920., 0.,    0.,    0.,    0.,
      1709., 1738., 1767., 1796., 1825., 1854., 1883., 1912., 3772., 3832.,
      3892., 3952., 4012., 4072., 4132., 4192., 6205., 6298., 6391., 6484.,
      4288., 4352., 4416., 4480., 4544., 4608., 4672., 4736., 2349., 2382.,
      2415., 2448., 2481., 2514., 2547., 2580., 0.,    0.,    0.,    0.,
      976.,  992.,  1008., 1024., 1040., 1056., 1072., 1088., 2141., 2174.,
      2207., 2240., 2273., 2306., 2339., 2372., 3503., 3554., 3605., 3656.,
      2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332.,
      1350., 1368., 1386., 1404., 1422., 1440., 0.,    0.,    0.,    0.,
      1296., 1312., 1328., 1344., 1360., 1376., 1392., 1408., 2801., 2834.,
      2867., 2900., 2933., 2966., 2999., 3032., 4523., 4574., 4625., 4676.,
      3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692.,
      1710., 1728., 1746., 1764., 1782., 1800., 0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      488.,    540.,    592.,    644.,    1308.,   1428.,   1548.,   1668.,
      1788.,   1908.,   2028.,   2148.,   3212.,   3416.,   3620.,   3824.,
      2708.,   2860.,   3012.,   3164.,   4592.,   4844.,   5096.,   5348.,
      3628.,   3812.,   3996.,   4180.,   5972.,   6272.,   6572.,   6872.,
      4548.,   4764.,   4980.,   5196.,   5412.,   5628.,   5844.,   6060.,
      1528.,   1580.,   1632.,   1684.,   3708.,   3828.,   3948.,   4068.,
      4188.,   4308.,   4428.,   4548.,   7292.,   7496.,   7700.,   7904.,
      5748.,   5900.,   6052.,   6204.,   9632.,   9884.,   10136.,  10388.,
      7308.,   7492.,   7676.,   7860.,   11972.,  12272.,  12572.,  12872.,
      8868.,   9084.,   9300.,   9516.,   9732.,   9948.,   10164.,  10380.,
      2977.,   3115.,   3253.,   3391.,   6932.,   7232.,   7532.,   7832.,
      8132.,   8432.,   8732.,   9032.,   13713.,  14199.,  14685.,  15171.,
      10472.,  10820.,  11168.,  11516.,  17223.,  17781.,  18339.,  18897.,
      12812.,  13208.,  13604.,  14000.,  20733.,  21363.,  21993.,  22623.,
      15152.,  15596.,  16040.,  16484.,  16928.,  17372.,  17816.,  18260.,
      5108.,   5240.,   5372.,   5504.,   10868.,  11148.,  11428.,  11708.,
      11988.,  12268.,  12548.,  12828.,  18992.,  19436.,  19880.,  20324.,
      13548.,  13860.,  14172.,  14484.,  21332.,  21824.,  22316.,  22808.,
      15108.,  15452.,  15796.,  16140.,  23672.,  24212.,  24752.,  25292.,
      16668.,  17044.,  17420.,  17796.,  18172.,  18548.,  18924.,  19300.,
      8347.,   8605.,   8863.,   9121.,   17672.,  18212.,  18752.,  19292.,
      19832.,  20372.,  20912.,  21452.,  31263.,  32109.,  32955.,  33801.,
      22172.,  22760.,  23348.,  23936.,  34773.,  35691.,  36609.,  37527.,
      24512.,  25148.,  25784.,  26420.,  38283.,  39273.,  40263.,  41253.,
      26852.,  27536.,  28220.,  28904.,  29588.,  30272.,  30956.,  31640.,
      8688.,   8900.,   9112.,   9324.,   18028.,  18468.,  18908.,  19348.,
      19788.,  20228.,  20668.,  21108.,  30692.,  31376.,  32060.,  32744.,
      21348.,  21820.,  22292.,  22764.,  33032.,  33764.,  34496.,  35228.,
      22908.,  23412.,  23916.,  24420.,  35372.,  36152.,  36932.,  37712.,
      24468.,  25004.,  25540.,  26076.,  26612.,  27148.,  27684.,  28220.,
      12928.,  13140.,  13352.,  13564.,  26828.,  27268.,  27708.,  28148.,
      28588.,  29028.,  29468.,  29908.,  44372.,  45056.,  45740.,  46424.,
      30788.,  31260.,  31732.,  32204.,  47672.,  48404.,  49136.,  49868.,
      32988.,  33492.,  33996.,  34500.,  50972.,  51752.,  52532.,  53312.,
      35188.,  35724.,  36260.,  36796.,  37332.,  37868.,  38404.,  38940.,
      8408.,   8780.,   9152.,   9524.,   17148.,  17908.,  18668.,  19428.,
      20188.,  20948.,  21708.,  22468.,  30812.,  31976.,  33140.,  34304.,
      21108.,  21900.,  22692.,  23484.,  32192.,  33404.,  34616.,  35828.,
      22028.,  22852.,  23676.,  24500.,  33572.,  34832.,  36092.,  37352.,
      22948.,  23804.,  24660.,  25516.,  26372.,  27228.,  28084.,  28940.,
      15848.,  16220.,  16592.,  16964.,  32348.,  33108.,  33868.,  34628.,
      35388.,  36148.,  36908.,  37668.,  54092.,  55256.,  56420.,  57584.,
      36948.,  37740.,  38532.,  39324.,  56432.,  57644.,  58856.,  60068.,
      38508.,  39332.,  40156.,  40980.,  58772.,  60032.,  61292.,  62552.,
      40068.,  40924.,  41780.,  42636.,  43492.,  44348.,  45204.,  46060.,
      24457.,  25075.,  25693.,  26311.,  49892.,  51152.,  52412.,  53672.,
      54932.,  56192.,  57452.,  58712.,  83913.,  85839.,  87765.,  89691.,
      57272.,  58580.,  59888.,  61196.,  87423.,  89421.,  91419.,  93417.,
      59612.,  60968.,  62324.,  63680.,  90933.,  93003.,  95073.,  97143.,
      61952.,  63356.,  64760.,  66164.,  67568.,  68972.,  70376.,  71780.,
      19428.,  19880.,  20332.,  20784.,  39508.,  40428.,  41348.,  42268.,
      43188.,  44108.,  45028.,  45948.,  65792.,  67196.,  68600.,  70004.,
      44748.,  45700.,  46652.,  47604.,  68132.,  69584.,  71036.,  72488.,
      46308.,  47292.,  48276.,  49260.,  70472.,  71972.,  73472.,  74972.,
      47868.,  48884.,  49900.,  50916.,  51932.,  52948.,  53964.,  54980.,
      29827.,  30565.,  31303.,  32041.,  60632.,  62132.,  63632.,  65132.,
      66632.,  68132.,  69632.,  71132.,  101463., 103749., 106035., 108321.,
      68972.,  70520.,  72068.,  73616.,  104973., 107331., 109689., 112047.,
      71312.,  72908.,  74504.,  76100.,  108483., 110913., 113343., 115773.,
      73652.,  75296.,  76940.,  78584.,  80228.,  81872.,  83516.,  85160.,
      23008.,  23540.,  24072.,  24604.,  46668.,  47748.,  48828.,  49908.,
      50988.,  52068.,  53148.,  54228.,  77492.,  79136.,  80780.,  82424.,
      52548.,  53660.,  54772.,  55884.,  79832.,  81524.,  83216.,  84908.,
      54108.,  55252.,  56396.,  57540.,  82172.,  83912.,  85652.,  87392.,
      55668.,  56844.,  58020.,  59196.,  60372.,  61548.,  62724.,  63900.,
      33648.,  34180.,  34712.,  35244.,  68268.,  69348.,  70428.,  71508.,
      72588.,  73668.,  74748.,  75828.,  110372., 112016., 113660., 115304.,
      74788.,  75900.,  77012.,  78124.,  113672., 115364., 117056., 118748.,
      76988.,  78132.,  79276.,  80420.,  116972., 118712., 120452., 122192.,
      79188.,  80364.,  81540.,  82716.,  83892.,  85068.,  86244.,  87420.,
      16328.,  17020.,  17712.,  18404.,  32988.,  34388.,  35788.,  37188.,
      38588.,  39988.,  41388.,  42788.,  58412.,  60536.,  62660.,  64784.,
      39508.,  40940.,  42372.,  43804.,  59792.,  61964.,  64136.,  66308.,
      40428.,  41892.,  43356.,  44820.,  61172.,  63392.,  65612.,  67832.,
      41348.,  42844.,  44340.,  45836.,  47332.,  48828.,  50324.,  51820.,
      30168.,  30860.,  31552.,  32244.,  60988.,  62388.,  63788.,  65188.,
      66588.,  67988.,  69388.,  70788.,  100892., 103016., 105140., 107264.,
      68148.,  69580.,  71012.,  72444.,  103232., 105404., 107576., 109748.,
      69708.,  71172.,  72636.,  74100.,  105572., 107792., 110012., 112232.,
      71268.,  72764.,  74260.,  75756.,  77252.,  78748.,  80244.,  81740.,
      45937.,  47035.,  48133.,  49231.,  92852.,  95072.,  97292.,  99512.,
      101732., 103952., 106172., 108392., 154113., 157479., 160845., 164211.,
      104072., 106340., 108608., 110876., 157623., 161061., 164499., 167937.,
      106412., 108728., 111044., 113360., 161133., 164643., 168153., 171663.,
      108752., 111116., 113480., 115844., 118208., 120572., 122936., 125300.,
      33748.,  34520.,  35292.,  36064.,  68148.,  69708.,  71268.,  72828.,
      74388.,  75948.,  77508.,  79068.,  112592., 114956., 117320., 119684.,
      75948.,  77540.,  79132.,  80724.,  114932., 117344., 119756., 122168.,
      77508.,  79132.,  80756.,  82380.,  117272., 119732., 122192., 124652.,
      79068.,  80724.,  82380.,  84036.,  85692.,  87348.,  89004.,  90660.,
      51307.,  52525.,  53743.,  54961.,  103592., 106052., 108512., 110972.,
      113432., 115892., 118352., 120812., 171663., 175389., 179115., 182841.,
      115772., 118280., 120788., 123296., 175173., 178971., 182769., 186567.,
      118112., 120668., 123224., 125780., 178683., 182553., 186423., 190293.,
      120452., 123056., 125660., 128264., 130868., 133472., 136076., 138680.,
      37328.,  38180.,  39032.,  39884.,  75308.,  77028.,  78748.,  80468.,
      82188.,  83908.,  85628.,  87348.,  124292., 126896., 129500., 132104.,
      83748.,  85500.,  87252.,  89004.,  126632., 129284., 131936., 134588.,
      85308.,  87092.,  88876.,  90660.,  128972., 131672., 134372., 137072.,
      86868.,  88684.,  90500.,  92316.,  94132.,  95948.,  97764.,  99580.,
      54368.,  55220.,  56072.,  56924.,  109708., 111428., 113148., 114868.,
      116588., 118308., 120028., 121748., 176372., 178976., 181580., 184184.,
      118788., 120540., 122292., 124044., 179672., 182324., 184976., 187628.,
      120988., 122772., 124556., 126340., 182972., 185672., 188372., 191072.,
      123188., 125004., 126820., 128636., 130452., 132268., 134084., 135900.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,
      325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,
      536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,
      0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,   149.,
      155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,
      584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,
      1112.,  1148.,  1184.,  1220.,  1256.,  721.,   743.,   765.,   787.,
      809.,   831.,   853.,   875.,   0.,     0.,     0.,     0.,     268.,
      304.,   340.,   376.,   412.,   448.,   484.,   520.,   1156.,  1244.,
      1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,
      3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,
      1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,  0.,
      0.,     0.,     0.,     988.,   1024.,  1060.,  1096.,  1132.,  1168.,
      1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,
      3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,
      5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,
      3448.,  3516.,  3584.,  0.,     0.,     0.,     0.,     1708.,  1744.,
      1780.,  1816.,  1852.,  1888.,  1924.,  1960.,  4676.,  4764.,  4852.,
      4940.,  5028.,  5116.,  5204.,  5292.,  9032.,  9188.,  9344.,  9500.,
      7228.,  7348.,  7468.,  7588.,  7708.,  7828.,  7948.,  8068.,  4468.,
      4536.,  4604.,  4672.,  4740.,  4808.,  4876.,  4944.,  0.,     0.,
      0.,     0.,     1823.,  1853.,  1883.,  1913.,  1943.,  1973.,  2003.,
      2033.,  4372.,  4440.,  4508.,  4576.,  4644.,  4712.,  4780.,  4848.,
      7711.,  7825.,  7939.,  8053.,  5744.,  5828.,  5912.,  5996.,  6080.,
      6164.,  6248.,  6332.,  3347.,  3393.,  3439.,  3485.,  3531.,  3577.,
      3623.,  3669.,  0.,     0.,     0.,     0.,     2423.,  2453.,  2483.,
      2513.,  2543.,  2573.,  2603.,  2633.,  5732.,  5800.,  5868.,  5936.,
      6004.,  6072.,  6140.,  6208.,  9991.,  10105., 10219., 10333., 7424.,
      7508.,  7592.,  7676.,  7760.,  7844.,  7928.,  8012.,  4267.,  4313.,
      4359.,  4405.,  4451.,  4497.,  4543.,  4589.,  0.,     0.,     0.,
      0.,     41.,    95.,    149.,   203.,   257.,   311.,   365.,   419.,
      520.,   636.,   752.,   868.,   984.,   1100.,  1216.,  1332.,  1501.,
      1687.,  1873.,  2059.,  1124.,  1256.,  1388.,  1520.,  1652.,  1784.,
      1916.,  2048.,  893.,   963.,   1033.,  1103.,  1173.,  1243.,  1313.,
      1383.,  0.,     0.,     0.,     0.,     1121.,  1175.,  1229.,  1283.,
      1337.,  1391.,  1445.,  1499.,  2840.,  2956.,  3072.,  3188.,  3304.,
      3420.,  3536.,  3652.,  5221.,  5407.,  5593.,  5779.,  3764.,  3896.,
      4028.,  4160.,  4292.,  4424.,  4556.,  4688.,  2293.,  2363.,  2433.,
      2503.,  2573.,  2643.,  2713.,  2783.,  0.,     0.,     0.,     0.,
      2260.,  2392.,  2524.,  2656.,  2788.,  2920.,  3052.,  3184.,  5908.,
      6188.,  6468.,  6748.,  7028.,  7308.,  7588.,  7868.,  11072., 11516.,
      11960., 12404., 7948.,  8260.,  8572.,  8884.,  9196.,  9508.,  9820.,
      10132., 4892.,  5056.,  5220.,  5384.,  5548.,  5712.,  5876.,  6040.,
      0.,     0.,     0.,     0.,     4900.,  5032.,  5164.,  5296.,  5428.,
      5560.,  5692.,  5824.,  11508., 11788., 12068., 12348., 12628., 12908.,
      13188., 13468., 19952., 20396., 20840., 21284., 14188., 14500., 14812.,
      15124., 15436., 15748., 16060., 16372., 8172.,  8336.,  8500.,  8664.,
      8828.,  8992.,  9156.,  9320.,  0.,     0.,     0.,     0.,     7540.,
      7672.,  7804.,  7936.,  8068.,  8200.,  8332.,  8464.,  17108., 17388.,
      17668., 17948., 18228., 18508., 18788., 19068., 28832., 29276., 29720.,
      30164., 20428., 20740., 21052., 21364., 21676., 21988., 22300., 22612.,
      11452., 11616., 11780., 11944., 12108., 12272., 12436., 12600., 0.,
      0.,     0.,     0.,     4739.,  4817.,  4895.,  4973.,  5051.,  5129.,
      5207.,  5285.,  10588., 10752., 10916., 11080., 11244., 11408., 11572.,
      11736., 17611., 17869., 18127., 18385., 12344., 12524., 12704., 12884.,
      13064., 13244., 13424., 13604., 6839.,  6933.,  7027.,  7121.,  7215.,
      7309.,  7403.,  7497.,  0.,     0.,     0.,     0.,     6299.,  6377.,
      6455.,  6533.,  6611.,  6689.,  6767.,  6845.,  13868., 14032., 14196.,
      14360., 14524., 14688., 14852., 15016., 22771., 23029., 23287., 23545.,
      15944., 16124., 16304., 16484., 16664., 16844., 17024., 17204., 8719.,
      8813.,  8907.,  9001.,  9095.,  9189.,  9283.,  9377.,  0.,     0.,
      0.,     0.,     77.,    179.,   281.,   383.,   485.,   587.,   689.,
      791.,   976.,   1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,
      2761.,  3091.,  3421.,  3751.,  1964.,  2192.,  2420.,  2648.,  2876.,
      3104.,  3332.,  3560.,  1505.,  1623.,  1741.,  1859.,  1977.,  2095.,
      2213.,  2331.,  0.,     0.,     0.,     0.,     2117.,  2219.,  2321.,
      2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,
      6064.,  6276.,  6488.,  6700.,  9361.,  9691.,  10021., 10351., 6524.,
      6752.,  6980.,  7208.,  7436.,  7664.,  7892.,  8120.,  3865.,  3983.,
      4101.,  4219.,  4337.,  4455.,  4573.,  4691.,  0.,     0.,     0.,
      0.,     4252.,  4480.,  4708.,  4936.,  5164.,  5392.,  5620.,  5848.,
      10660., 11132., 11604., 12076., 12548., 13020., 13492., 13964., 19352.,
      20084., 20816., 21548., 13468., 13972., 14476., 14980., 15484., 15988.,
      16492., 16996., 8036.,  8296.,  8556.,  8816.,  9076.,  9336.,  9596.,
      9856.,  0.,     0.,     0.,     0.,     8812.,  9040.,  9268.,  9496.,
      9724.,  9952.,  10180., 10408., 20100., 20572., 21044., 21516., 21988.,
      22460., 22932., 23404., 33992., 34724., 35456., 36188., 23548., 24052.,
      24556., 25060., 25564., 26068., 26572., 27076., 13236., 13496., 13756.,
      14016., 14276., 14536., 14796., 15056., 0.,     0.,     0.,     0.,
      13372., 13600., 13828., 14056., 14284., 14512., 14740., 14968., 29540.,
      30012., 30484., 30956., 31428., 31900., 32372., 32844., 48632., 49364.,
      50096., 50828., 33628., 34132., 34636., 35140., 35644., 36148., 36652.,
      37156., 18436., 18696., 18956., 19216., 19476., 19736., 19996., 20256.,
      0.,     0.,     0.,     0.,     7655.,  7781.,  7907.,  8033.,  8159.,
      8285.,  8411.,  8537.,  16804., 17064., 17324., 17584., 17844., 18104.,
      18364., 18624., 27511., 27913., 28315., 28717., 18944., 19220., 19496.,
      19772., 20048., 20324., 20600., 20876., 10331., 10473., 10615., 10757.,
      10899., 11041., 11183., 11325., 0.,     0.,     0.,     0.,     10175.,
      10301., 10427., 10553., 10679., 10805., 10931., 11057., 22004., 22264.,
      22524., 22784., 23044., 23304., 23564., 23824., 35551., 35953., 36355.,
      36757., 24464., 24740., 25016., 25292., 25568., 25844., 26120., 26396.,
      13171., 13313., 13455., 13597., 13739., 13881., 14023., 14165., 0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3460.,    3860.,    4260.,    4660.,    9560.,    10488.,   11416.,
      12344.,   13272.,   14200.,   15128.,   16056.,   24124.,   25708.,
      27292.,   28876.,   20600.,   21784.,   22968.,   24152.,   35116.,
      37084.,   39052.,   41020.,   27928.,   29368.,   30808.,   32248.,
      46108.,   48460.,   50812.,   53164.,   35256.,   36952.,   38648.,
      40344.,   42040.,   43736.,   45432.,   47128.,   11460.,   11860.,
      12260.,   12660.,   28120.,   29048.,   29976.,   30904.,   31832.,
      32760.,   33688.,   34616.,   55804.,   57388.,   58972.,   60556.,
      44280.,   45464.,   46648.,   47832.,   74476.,   76444.,   78412.,
      80380.,   56728.,   58168.,   59608.,   61048.,   93148.,   95500.,
      97852.,   100204.,  69176.,   70872.,   72568.,   74264.,   75960.,
      77656.,   79352.,   81048.,   22610.,   23690.,   24770.,   25850.,
      53020.,   55372.,   57724.,   60076.,   62428.,   64780.,   67132.,
      69484.,   105726.,  109542.,  113358.,  117174.,  81100.,   83836.,
      86572.,   89308.,   133734.,  138126.,  142518.,  146910.,  99772.,
      102892.,  106012.,  109132.,  161742.,  166710.,  171678.,  176646.,
      118444.,  121948.,  125452.,  128956.,  132460.,  135964.,  139468.,
      142972.,  40020.,   41060.,   42100.,   43140.,   85240.,   87448.,
      89656.,   91864.,   94072.,   96280.,   98488.,   100696.,  149164.,
      152668.,  156172.,  159676.,  106520.,  108984.,  111448.,  113912.,
      167836.,  171724.,  175612.,  179500.,  118968.,  121688.,  124408.,
      127128.,  186508.,  190780.,  195052.,  199324.,  131416.,  134392.,
      137368.,  140344.,  143320.,  146296.,  149272.,  152248.,  65450.,
      67490.,   69530.,   71570.,   138700.,  142972.,  147244.,  151516.,
      155788.,  160060.,  164332.,  168604.,  245766.,  252462.,  259158.,
      265854.,  174460.,  179116.,  183772.,  188428.,  273774.,  281046.,
      288318.,  295590.,  193132.,  198172.,  203212.,  208252.,  301782.,
      309630.,  317478.,  325326.,  211804.,  217228.,  222652.,  228076.,
      233500.,  238924.,  244348.,  249772.,  68580.,   70260.,   71940.,
      73620.,   142360.,  145848.,  149336.,  152824.,  156312.,  159800.,
      163288.,  166776.,  242524.,  247948.,  253372.,  258796.,  168760.,
      172504.,  176248.,  179992.,  261196.,  267004.,  272812.,  278620.,
      181208.,  185208.,  189208.,  193208.,  279868.,  286060.,  292252.,
      298444.,  193656.,  197912.,  202168.,  206424.,  210680.,  214936.,
      219192.,  223448.,  102180.,  103860.,  105540.,  107220.,  212120.,
      215608.,  219096.,  222584.,  226072.,  229560.,  233048.,  236536.,
      351004.,  356428.,  361852.,  367276.,  243640.,  247384.,  251128.,
      254872.,  377356.,  383164.,  388972.,  394780.,  261208.,  265208.,
      269208.,  273208.,  403708.,  409900.,  416092.,  422284.,  278776.,
      283032.,  287288.,  291544.,  295800.,  300056.,  304312.,  308568.,
      66500.,   69460.,   72420.,   75380.,   135640.,  141688.,  147736.,
      153784.,  159832.,  165880.,  171928.,  177976.,  243964.,  253228.,
      262492.,  271756.,  167160.,  173464.,  179768.,  186072.,  254956.,
      264604.,  274252.,  283900.,  174488.,  181048.,  187608.,  194168.,
      265948.,  275980.,  286012.,  296044.,  181816.,  188632.,  195448.,
      202264.,  209080.,  215896.,  222712.,  229528.,  125700.,  128660.,
      131620.,  134580.,  256600.,  262648.,  268696.,  274744.,  280792.,
      286840.,  292888.,  298936.,  429244.,  438508.,  447772.,  457036.,
      293240.,  299544.,  305848.,  312152.,  447916.,  457564.,  467212.,
      476860.,  305688.,  312248.,  318808.,  325368.,  466588.,  476620.,
      486652.,  496684.,  318136.,  324952.,  331768.,  338584.,  345400.,
      352216.,  359032.,  365848.,  193970.,  198890.,  203810.,  208730.,
      395740.,  405772.,  415804.,  425836.,  435868.,  445900.,  455932.,
      465964.,  665886.,  681222.,  696558.,  711894.,  454540.,  464956.,
      475372.,  485788.,  693894.,  709806.,  725718.,  741630.,  473212.,
      484012.,  494812.,  505612.,  721902.,  738390.,  754878.,  771366.,
      491884.,  503068.,  514252.,  525436.,  536620.,  547804.,  558988.,
      570172.,  154260.,  157860.,  161460.,  165060.,  313720.,  321048.,
      328376.,  335704.,  343032.,  350360.,  357688.,  365016.,  522604.,
      533788.,  544972.,  556156.,  355480.,  363064.,  370648.,  378232.,
      541276.,  552844.,  564412.,  575980.,  367928.,  375768.,  383608.,
      391448.,  559948.,  571900.,  583852.,  595804.,  380376.,  388472.,
      396568.,  404664.,  412760.,  420856.,  428952.,  437048.,  236810.,
      242690.,  248570.,  254450.,  481420.,  493372.,  505324.,  517276.,
      529228.,  541180.,  553132.,  565084.,  805926.,  824142.,  842358.,
      860574.,  547900.,  560236.,  572572.,  584908.,  833934.,  852726.,
      871518.,  890310.,  566572.,  579292.,  592012.,  604732.,  861942.,
      881310.,  900678.,  920046.,  585244.,  598348.,  611452.,  624556.,
      637660.,  650764.,  663868.,  676972.,  182820.,  187060.,  191300.,
      195540.,  370840.,  379448.,  388056.,  396664.,  405272.,  413880.,
      422488.,  431096.,  615964.,  629068.,  642172.,  655276.,  417720.,
      426584.,  435448.,  444312.,  634636.,  648124.,  661612.,  675100.,
      430168.,  439288.,  448408.,  457528.,  653308.,  667180.,  681052.,
      694924.,  442616.,  451992.,  461368.,  470744.,  480120.,  489496.,
      498872.,  508248.,  267620.,  271860.,  276100.,  280340.,  543000.,
      551608.,  560216.,  568824.,  577432.,  586040.,  594648.,  603256.,
      878044.,  891148.,  904252.,  917356.,  595000.,  603864.,  612728.,
      621592.,  904396.,  917884.,  931372.,  944860.,  612568.,  621688.,
      630808.,  639928.,  930748.,  944620.,  958492.,  972364.,  630136.,
      639512.,  648888.,  658264.,  667640.,  677016.,  686392.,  695768.,
      129540.,  135060.,  140580.,  146100.,  261720.,  272888.,  284056.,
      295224.,  306392.,  317560.,  328728.,  339896.,  463804.,  480748.,
      497692.,  514636.,  313720.,  325144.,  336568.,  347992.,  474796.,
      492124.,  509452.,  526780.,  321048.,  332728.,  344408.,  356088.,
      485788.,  503500.,  521212.,  538924.,  328376.,  340312.,  352248.,
      364184.,  376120.,  388056.,  399992.,  411928.,  239940.,  245460.,
      250980.,  256500.,  485080.,  496248.,  507416.,  518584.,  529752.,
      540920.,  552088.,  563256.,  802684.,  819628.,  836572.,  853516.,
      542200.,  553624.,  565048.,  576472.,  821356.,  838684.,  856012.,
      873340.,  554648.,  566328.,  578008.,  589688.,  840028.,  857740.,
      875452.,  893164.,  567096.,  579032.,  590968.,  602904.,  614840.,
      626776.,  638712.,  650648.,  365330.,  374090.,  382850.,  391610.,
      738460.,  756172.,  773884.,  791596.,  809308.,  827020.,  844732.,
      862444.,  1226046., 1252902., 1279758., 1306614., 827980.,  846076.,
      864172.,  882268.,  1254054., 1281486., 1308918., 1336350., 846652.,
      865132.,  883612.,  902092.,  1282062., 1310070., 1338078., 1366086.,
      865324.,  884188.,  903052.,  921916.,  940780.,  959644.,  978508.,
      997372.,  268500.,  274660.,  280820.,  286980.,  542200.,  554648.,
      567096.,  579544.,  591992.,  604440.,  616888.,  629336.,  896044.,
      914908.,  933772.,  952636.,  604440.,  617144.,  629848.,  642552.,
      914716.,  933964.,  953212.,  972460.,  616888.,  629848.,  642808.,
      655768.,  933388.,  953020.,  972652.,  992284.,  629336.,  642552.,
      655768.,  668984.,  682200.,  695416.,  708632.,  721848.,  408170.,
      417890.,  427610.,  437330.,  824140.,  843772.,  863404.,  883036.,
      902668.,  922300.,  941932.,  961564.,  1366086., 1395822., 1425558.,
      1455294., 921340.,  941356.,  961372.,  981388.,  1394094., 1424406.,
      1454718., 1485030., 940012.,  960412.,  980812.,  1001212., 1422102.,
      1452990., 1483878., 1514766., 958684.,  979468.,  1000252., 1021036.,
      1041820., 1062604., 1083388., 1104172., 297060.,  303860.,  310660.,
      317460.,  599320.,  613048.,  626776.,  640504.,  654232.,  667960.,
      681688.,  695416.,  989404.,  1010188., 1030972., 1051756., 666680.,
      680664.,  694648.,  708632.,  1008076., 1029244., 1050412., 1071580.,
      679128.,  693368.,  707608.,  721848.,  1026748., 1048300., 1069852.,
      1091404., 691576.,  706072.,  720568.,  735064.,  749560.,  764056.,
      778552.,  793048.,  433060.,  439860.,  446660.,  453460.,  873880.,
      887608.,  901336.,  915064.,  928792.,  942520.,  956248.,  969976.,
      1405084., 1425868., 1446652., 1467436., 946360.,  960344.,  974328.,
      988312.,  1431436., 1452604., 1473772., 1494940., 963928.,  978168.,
      992408.,  1006648., 1457788., 1479340., 1500892., 1522444., 981496.,
      995992.,  1010488., 1024984., 1039480., 1053976., 1068472., 1082968.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1682.,   1994.,   2306.,   2618.,   2100.,   2372.,   2644.,   2916.,
      3188.,   3460.,   3732.,   4004.,   2126.,   2294.,   2462.,   2630.,
      2798.,   2966.,   3134.,   3302.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      8628.,   8900.,   9172.,   9444.,   5486.,   5654.,   5822.,   5990.,
      6158.,   6326.,   6494.,   6662.,   0.,      0.,      0.,      0.,
      1780.,   2052.,   2324.,   2596.,   2868.,   3140.,   3412.,   3684.,
      8376.,   9048.,   9720.,   10392.,  11064.,  11736.,  12408.,  13080.,
      20812.,  22012.,  23212.,  24412.,  18392.,  19320.,  20248.,  21176.,
      22104.,  23032.,  23960.,  24888.,  13396.,  13924.,  14452.,  14980.,
      15508.,  16036.,  16564.,  17092.,  0.,      0.,      0.,      0.,
      7220.,   7492.,   7764.,   8036.,   8308.,   8580.,   8852.,   9124.,
      21816.,  22488.,  23160.,  23832.,  24504.,  25176.,  25848.,  26520.,
      44812.,  46012.,  47212.,  48412.,  36952.,  37880.,  38808.,  39736.,
      40664.,  41592.,  42520.,  43448.,  23956.,  24484.,  25012.,  25540.,
      26068.,  26596.,  27124.,  27652.,  0.,      0.,      0.,      0.,
      12660.,  12932.,  13204.,  13476.,  13748.,  14020.,  14292.,  14564.,
      35256.,  35928.,  36600.,  37272.,  37944.,  38616.,  39288.,  39960.,
      68812.,  70012.,  71212.,  72412.,  55512.,  56440.,  57368.,  58296.,
      59224.,  60152.,  61080.,  62008.,  34516.,  35044.,  35572.,  36100.,
      36628.,  37156.,  37684.,  38212.,  0.,      0.,      0.,      0.,
      14070.,  14302.,  14534.,  14766.,  14998.,  15230.,  15462.,  15694.,
      33876.,  34404.,  34932.,  35460.,  35988.,  36516.,  37044.,  37572.,
      59930.,  60818.,  61706.,  62594.,  44772.,  45428.,  46084.,  46740.,
      47396.,  48052.,  48708.,  49364.,  26150.,  26510.,  26870.,  27230.,
      27590.,  27950.,  28310.,  28670.,  0.,      0.,      0.,      0.,
      18710.,  18942.,  19174.,  19406.,  19638.,  19870.,  20102.,  20334.,
      44436.,  44964.,  45492.,  46020.,  46548.,  47076.,  47604.,  48132.,
      77690.,  78578.,  79466.,  80354.,  57892.,  58548.,  59204.,  59860.,
      60516.,  61172.,  61828.,  62484.,  33350.,  33710.,  34070.,  34430.,
      34790.,  35150.,  35510.,  35870.,  0.,      0.,      0.,      0.,
      270.,    694.,    1118.,   1542.,   1966.,   2390.,   2814.,   3238.,
      3972.,   4884.,   5796.,   6708.,   7620.,   8532.,   9444.,   10356.,
      11618.,  13082.,  14546.,  16010.,  8724.,   9764.,   10804.,  11844.,
      12884.,  13924.,  14964.,  16004.,  6974.,   7526.,   8078.,   8630.,
      9182.,   9734.,   10286.,  10838.,  0.,      0.,      0.,      0.,
      8750.,   9174.,   9598.,   10022.,  10446.,  10870.,  11294.,  11718.,
      22212.,  23124.,  24036.,  24948.,  25860.,  26772.,  27684.,  28596.,
      40898.,  42362.,  43826.,  45290.,  29524.,  30564.,  31604.,  32644.,
      33684.,  34724.,  35764.,  36804.,  18014.,  18566.,  19118.,  19670.,
      20222.,  20774.,  21326.,  21878.,  0.,      0.,      0.,      0.,
      17620.,  18660.,  19700.,  20740.,  21780.,  22820.,  23860.,  24900.,
      46200.,  48408.,  50616.,  52824.,  55032.,  57240.,  59448.,  61656.,
      86764.,  90268.,  93772.,  97276.,  62360.,  64824.,  67288.,  69752.,
      72216.,  74680.,  77144.,  79608.,  38452.,  39748.,  41044.,  42340.,
      43636.,  44932.,  46228.,  47524.,  0.,      0.,      0.,      0.,
      38420.,  39460.,  40500.,  41540.,  42580.,  43620.,  44660.,  45700.,
      90360.,  92568.,  94776.,  96984.,  99192.,  101400., 103608., 105816.,
      156844., 160348., 163852., 167356., 111640., 114104., 116568., 119032.,
      121496., 123960., 126424., 128888., 64372.,  65668.,  66964.,  68260.,
      69556.,  70852.,  72148.,  73444.,  0.,      0.,      0.,      0.,
      59220.,  60260.,  61300.,  62340.,  63380.,  64420.,  65460.,  66500.,
      134520., 136728., 138936., 141144., 143352., 145560., 147768., 149976.,
      226924., 230428., 233932., 237436., 160920., 163384., 165848., 168312.,
      170776., 173240., 175704., 178168., 90292.,  91588.,  92884.,  94180.,
      95476.,  96772.,  98068.,  99364.,  0.,      0.,      0.,      0.,
      37350.,  37966.,  38582.,  39198.,  39814.,  40430.,  41046.,  41662.,
      83508.,  84804.,  86100.,  87396.,  88692.,  89988.,  91284.,  92580.,
      138986., 141026., 143066., 145106., 97476.,  98900.,  100324., 101748.,
      103172., 104596., 106020., 107444., 54038.,  54782.,  55526.,  56270.,
      57014.,  57758.,  58502.,  59246.,  0.,      0.,      0.,      0.,
      49670.,  50286.,  50902.,  51518.,  52134.,  52750.,  53366.,  53982.,
      109428., 110724., 112020., 113316., 114612., 115908., 117204., 118500.,
      179786., 181826., 183866., 185906., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   3742.,   4550.,   5358.,   6166.,
      7524.,   9204.,   10884.,  12564.,  14244.,  15924.,  17604.,  19284.,
      21554.,  24170.,  26786.,  29402.,  15348.,  17156.,  18964.,  20772.,
      22580.,  24388.,  26196.,  28004.,  11822.,  12758.,  13694.,  14630.,
      15566.,  16502.,  17438.,  18374.,  0.,      0.,      0.,      0.,
      16670.,  17478.,  18286.,  19094.,  19902.,  20710.,  21518.,  22326.,
      41124.,  42804.,  44484.,  46164.,  47844.,  49524.,  51204.,  52884.,
      73874.,  76490.,  79106.,  81722.,  51508.,  53316.,  55124.,  56932.,
      58740.,  60548.,  62356.,  64164.,  30542.,  31478.,  32414.,  33350.,
      34286.,  35222.,  36158.,  37094.,  0.,      0.,      0.,      0.,
      33460.,  35268.,  37076.,  38884.,  40692.,  42500.,  44308.,  46116.,
      84024.,  87768.,  91512.,  95256.,  99000.,  102744., 106488., 110232.,
      152716., 158524., 164332., 170140., 106328., 110328., 114328., 118328.,
      122328., 126328., 130328., 134328., 63508.,  65572.,  67636.,  69700.,
      71764.,  73828.,  75892.,  77956.,  0.,      0.,      0.,      0.,
      69620.,  71428.,  73236.,  75044.,  76852.,  78660.,  80468.,  82276.,
      158904., 162648., 166392., 170136., 173880., 177624., 181368., 185112.,
      268876., 274684., 280492., 286300., 186328., 190328., 194328., 198328.,
      202328., 206328., 210328., 214328., 104788., 106852., 108916., 110980.,
      113044., 115108., 117172., 119236., 0.,      0.,      0.,      0.,
      105780., 107588., 109396., 111204., 113012., 114820., 116628., 118436.,
      233784., 237528., 241272., 245016., 248760., 252504., 256248., 259992.,
      385036., 390844., 396652., 402460., 266328., 270328., 274328., 278328.,
      282328., 286328., 290328., 294328., 146068., 148132., 150196., 152260.,
      154324., 156388., 158452., 160516., 0.,      0.,      0.,      0.,
      60630.,  61630.,  62630.,  63630.,  64630.,  65630.,  66630.,  67630.,
      133140., 135204., 137268., 139332., 141396., 143460., 145524., 147588.,
      218042., 221234., 224426., 227618., 150180., 152372., 154564., 156756.,
      158948., 161140., 163332., 165524., 81926.,  83054.,  84182.,  85310.,
      86438.,  87566.,  88694.,  89822.,  0.,      0.,      0.,      0.,
      80630.,  81630.,  82630.,  83630.,  84630.,  85630.,  86630.,  87630.,
      174420., 176484., 178548., 180612., 182676., 184740., 186804., 188868.,
      281882., 285074., 288266., 291458., 194020., 196212., 198404., 200596.,
      202788., 204980., 207172., 209364., 104486., 105614., 106742., 107870.,
      108998., 110126., 111254., 112382., 0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  244.,  279.,  428.,  295.,
      452.,  311.,  350.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      894.,  972.,  1492., 1024., 1570., 1076., 1162., 1385., 1514., 2322.,
      1592., 2439., 1670., 1811., 1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 468.,  535.,  812.,  551.,  836.,  567.,  638.,  952.,
      1094., 1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      1854., 2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662.,
      3152., 4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,  62.,  74.,
      160., 186., 212., 116., 130., 122., 134., 290., 316., 342., 186., 200.,
      182., 194., 420., 446., 472., 256., 270., 112., 119., 254., 269., 284.,
      152., 160., 147., 154., 329., 344., 359., 192., 200., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,
      63.,  132., 151., 170., 90.,  100., 110., 130., 272., 314., 356., 188.,
      210., 210., 230., 482., 524., 566., 298., 320., 310., 330., 692., 734.,
      776., 408., 430., 176., 187., 390., 413., 436., 228., 240., 231., 242.,
      505., 528., 551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  6904.,  7520.,
      11546., 7928.,  12158., 8336.,  9016.,  10684., 11704., 17955., 12316.,
      18873., 12928., 14044., 8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3584.,  4116.,  6247.,  4240.,  6433.,
      4364.,  4928.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 19708., 21496.,
      32643., 22108., 33561., 22720., 24604., 14424., 15680., 23786., 16088.,
      24398., 16496., 17816., 21964., 23944., 36315., 24556., 37233., 25168.,
      27244., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  0.,
      0.,    0.,    0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  910.,  1002., 2176.,
      2376., 2576., 1406., 1514., 1370., 1462., 3176., 3376., 3576., 1946.,
      2054., 851.,  905.,  1936., 2052., 2168., 1163., 1225., 1121., 1175.,
      2516., 2632., 2748., 1473., 1535., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  403.,
      473.,  992.,  1140., 1288., 683.,  761.,  818.,  974.,  2040., 2368.,
      2696., 1426., 1598., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008.,
      3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,   2632.,
      3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,   7432.,
      13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,  24822.,
      19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,  23592.,
      37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,  61182.,
      43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,
      43112.,  44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      14468.,  16660.,  25562.,  17636.,  27026.,  18612.,  21060.,  29768.,
      34664.,  53140.,  36616.,  56068.,  38568.,  43976.,  54248.,  59144.,
      90820.,  62376.,  95668.,  65608.,  71016.,  83900.,  92012.,  141174.,
      96860.,  148446., 101708., 110588., 66152.,  72072.,  110212., 75304.,
      115060., 78536.,  84968.,  101756., 111404., 170262., 116252., 177534.,
      121100., 131516., 78056.,  85000.,  129604., 88232.,  134452., 91464.,
      98920.,  112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      28036.,  32276.,  48986.,  33252.,  50450.,  34228.,  38724.,  56904.,
      65896.,  99988.,  67848.,  102916., 69800.,  79304.,  101864., 110856.,
      168388., 114088., 173236., 117320., 126824., 155324., 169580., 257526.,
      174428., 264798., 179276., 194300., 113768., 123784., 187780., 127016.,
      192628., 130248., 140776., 173180., 188972., 286614., 193820., 293886.,
      198668., 215228., 125672., 136712., 207172., 139944., 212020., 143176.,
      154728., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,
      9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,  16840., 18408.,
      19976., 10924., 11772., 10620., 11340., 24680., 26248., 27816., 15164.,
      16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,  9582.,  8750.,
      9174.,  19668., 20580., 21492., 11534., 12022., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 12460., 13692.,
      28744., 31336., 33928., 17900., 19260., 18620., 19852., 41704., 44296.,
      46888., 24700., 26060., 10630., 11310., 23620., 25044., 26468., 13862.,
      14606., 14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,   127.,  136.,
      103.,  110.,  117.,  124.,  98.,   112.,  126.,  140.,  224.,  248.,
      186.,  204.,  314.,  344.,  246.,  268.,  290.,  312.,  238.,  252.,
      266.,  280.,  464.,  488.,  366.,  384.,  614.,  644.,  466.,  488.,
      510.,  532.,  433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,
      1071., 1134., 799.,  844.,  889.,  934.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312., 1971., 2070.,
      1399., 1468., 1537., 1606., 974.,  1020., 1066., 1112., 1664., 1736.,
      1166., 1216., 1814., 1892., 1266., 1320., 1374., 1428., 1434., 1480.,
      1526., 1572., 2384., 2456., 1666., 1716., 2594., 2672., 1806., 1860.,
      1914., 1968., 453.,  488.,  523.,  558.,  802.,  856.,  553.,  590.,
      847.,  904.,  583.,  622.,  661.,  700.,  930.,  1008., 1086., 1164.,
      1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464.,
      1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048., 3014., 3140.,
      2066., 2152., 2238., 2324., 2641., 2770., 2899., 3028., 4446., 4644.,
      3049., 3184., 4671., 4878., 3199., 3340., 3481., 3622., 2078., 2172.,
      2266., 2360., 3464., 3608., 2366., 2464., 3614., 3764., 2466., 2568.,
      2670., 2772., 3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808.,
      5571., 5814., 3799., 3964., 4129., 4294., 2446., 2556., 2666., 2776.,
      4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220.,
      3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020., 5954., 6128.,
      4046., 4164., 4282., 4400., 869.,  936.,  1003., 1070., 1522., 1624.,
      1033., 1102., 1567., 1672., 1063., 1134., 1205., 1276., 1762., 1904.,
      2046., 2188., 3104., 3320., 2106., 2252., 3194., 3416., 2166., 2316.,
      2466., 2616., 3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712.,
      5414., 5636., 3666., 3816., 3966., 4116., 4849., 5074., 5299., 5524.,
      8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310.,
      3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128., 6014., 6260.,
      4066., 4232., 4398., 4564., 5401., 5650., 5899., 6148., 8946., 9324.,
      6049., 6304., 9171., 9558., 6199., 6460., 6721., 6982., 3918., 4092.,
      4266., 4440., 6464., 6728., 4366., 4544., 6614., 6884., 4466., 4648.,
      4830., 5012., 5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324.,
      9314., 9584., 6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      14.,  16.,  18.,   20.,   11.,   12.,   13.,   14.,   37.,   40.,
      43.,  46.,  49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,
      32.,  36.,  86.,   96.,   106.,  116.,  126.,  136.,  82.,   88.,
      94.,  100., 64.,   68.,   72.,   76.,   186.,  196.,  206.,  216.,
      226., 236., 142.,  148.,  154.,  160.,  104.,  108.,  112.,  116.,
      286., 296., 306.,  316.,  326.,  336.,  202.,  208.,  214.,  220.,
      93.,  96.,  99.,   102.,  229.,  236.,  243.,  250.,  257.,  264.,
      148., 152., 156.,  160.,  123.,  126.,  129.,  132.,  299.,  306.,
      313., 320., 327.,  334.,  188.,  192.,  196.,  200.,  0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   5.,    10.,   15.,   20.,   31.,   42.,   53.,   64.,
      75.,  86.,  42.,   48.,   54.,   60.,   55.,   60.,   65.,   70.,
      141., 152., 163.,  174.,  185.,  196.,  102.,  108.,  114.,  120.,
      112., 124., 136.,  148.,  294.,  320.,  346.,  372.,  398.,  424.,
      218., 232., 246.,  260.,  232.,  244.,  256.,  268.,  554.,  580.,
      606., 632., 658.,  684.,  358.,  372.,  386.,  400.,  352.,  364.,
      376., 388., 814.,  840.,  866.,  892.,  918.,  944.,  498.,  512.,
      526., 540., 217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,
      553., 568., 296.,  304.,  312.,  320.,  287.,  294.,  301.,  308.,
      643., 658., 673.,  688.,  703.,  718.,  376.,  384.,  392.,  400.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    9.,    18.,   27.,   36.,   55.,   74.,
      93.,  112., 131.,  150.,  70.,   80.,   90.,   100.,  99.,   108.,
      117., 126., 245.,  264.,  283.,  302.,  321.,  340.,  170.,  180.,
      190., 200., 200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,
      670., 712., 354.,  376.,  398.,  420.,  400.,  420.,  440.,  460.,
      922., 964., 1006., 1048., 1090., 1132., 574.,  596.,  618.,  640.,
      600., 620., 640.,  660.,  1342., 1384., 1426., 1468., 1510., 1552.,
      794., 816., 838.,  860.,  341.,  352.,  363.,  374.,  757.,  780.,
      803., 826., 849.,  872.,  444.,  456.,  468.,  480.,  451.,  462.,
      473., 484., 987.,  1010., 1033., 1056., 1079., 1102., 564.,  576.,
      588., 600., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,
      977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,
      1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,
      2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,
      4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,
      3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,
      6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,
      6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,
      8384.,  8828.,  13347., 14049., 9572.,  10064., 15129., 15903., 10760.,
      11300., 11840., 12380., 7520.,  7880.,  8240.,  8600.,  12874., 13438.,
      9032.,  9424.,  14062., 14674., 9824.,  10248., 10672., 11096., 11120.,
      11480., 11840., 12200., 18514., 19078., 12952., 13344., 20182., 20794.,
      14064., 14488., 14912., 15336., 3504.,  3780.,  4056.,  4332.,  6221.,
      6647.,  4292.,  4584.,  6575.,  7025.,  4528.,  4836.,  5144.,  5452.,
      7184.,  7800.,  8416.,  9032.,  12898., 13846., 8888.,  9536.,  13606.,
      14602., 9360.,  10040., 10720., 11400., 13344., 13960., 14576., 15192.,
      22378., 23326., 15368., 16016., 23566., 24562., 16160., 16840., 17520.,
      18200., 20600., 21620., 22640., 23660., 34731., 36297., 23828., 24896.,
      36513., 38151., 25016., 26132., 27248., 28364., 16256., 17000., 17744.,
      18488., 27130., 28270., 18536., 19312., 28318., 29506., 19328., 20136.,
      20944., 21752., 24968., 26180., 27392., 28604., 41859., 43713., 28580.,
      29840., 43641., 45567., 29768., 31076., 32384., 33692., 19168., 20040.,
      20912., 21784., 31882., 33214., 21704., 22608., 33070., 34450., 22496.,
      23432., 24368., 25304., 27888., 28760., 29632., 30504., 45202., 46534.,
      30744., 31648., 46870., 48250., 31856., 32792., 33728., 34664., 6768.,
      7300.,  7832.,  8364.,  11885., 12695., 8068.,  8616.,  12239., 13073.,
      8304.,  8868.,  9432.,  9996.,  13712., 14840., 15968., 17096., 24226.,
      25942., 16440., 17600., 24934., 26698., 16912., 18104., 19296., 20488.,
      24992., 26120., 27248., 28376., 41386., 43102., 28040., 29200., 42574.,
      44338., 28832., 30024., 31216., 32408., 38072., 39860., 41648., 43436.,
      63243., 65961., 42836., 44672., 65025., 67815., 44024., 45908., 47792.,
      49676., 27904., 29160., 30416., 31672., 46138., 48046., 31208., 32496.,
      47326., 49282., 32000., 33320., 34640., 35960., 42440., 44420., 46400.,
      48380., 70371., 73377., 47588., 49616., 72153., 75231., 48776., 50852.,
      52928., 55004., 30816., 32200., 33584., 34968., 50890., 52990., 34376.,
      35792., 52078., 54226., 35168., 36616., 38064., 39512., 44656., 46040.,
      47424., 48808., 71890., 73990., 48536., 49952., 73558., 75706., 49648.,
      51096., 52544., 53992.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,   23.,   40.,   60.,    80.,    100.,   120.,
      140.,   95.,    109.,  123.,  137.,  65.,    71.,    77.,    83.,
      240.,   260.,   280.,  300.,  320.,  340.,   235.,   249.,   263.,
      277.,   142.,   170.,  198.,  226.,  568.,   640.,   712.,   784.,
      856.,   928.,   578.,  622.,  666.,  710.,   422.,   450.,   478.,
      506.,   1288.,  1360., 1432., 1504., 1576.,  1648.,  1018.,  1062.,
      1106.,  1150.,  702.,  730.,  758.,  786.,   2008.,  2080.,  2152.,
      2224.,  2296.,  2368., 1458., 1502., 1546.,  1590.,  677.,   699.,
      721.,   743.,   1688., 1740., 1792., 1844.,  1896.,  1948.,  1103.,
      1133.,  1163.,  1193., 897.,  919.,  941.,   963.,   2208.,  2260.,
      2312.,  2364.,  2416., 2468., 1403., 1433.,  1463.,  1493.,  0.,
      0.,     0.,     0.,    0.,    0.,    0.,     0.,     0.,     0.,
      0.,     0.,     0.,    0.,    29.,   67.,    105.,   143.,   216.,
      300.,   384.,   468.,  552.,  636.,  311.,   357.,   403.,   449.,
      409.,   447.,   485.,  523.,  1056., 1140.,  1224.,  1308.,  1392.,
      1476.,  771.,   817.,  863.,  909.,  830.,   922.,   1014.,  1106.,
      2200.,  2400.,  2600., 2800., 3000., 3200.,  1650.,  1758.,  1866.,
      1974.,  1750.,  1842., 1934., 2026., 4200.,  4400.,  4600.,  4800.,
      5000.,  5200.,  2730., 2838., 2946., 3054.,  2670.,  2762.,  2854.,
      2946.,  6200.,  6400., 6600., 6800., 7000.,  7200.,  3810.,  3918.,
      4026.,  4134.,  1661., 1715., 1769., 1823.,  3784.,  3900.,  4016.,
      4132.,  4248.,  4364., 2279., 2341., 2403.,  2465.,  2201.,  2255.,
      2309.,  2363.,  4944., 5060., 5176., 5292.,  5408.,  5524.,  2899.,
      2961.,  3023.,  3085., 0.,    0.,    0.,     0.,     0.,     0.,
      0.,     0.,     0.,    0.,    0.,    0.,     0.,     0.,     53.,
      123.,   193.,   263.,  392.,  540.,  688.,   836.,   984.,   1132.,
      527.,   605.,   683.,  761.,  753.,  823.,   893.,   963.,   1872.,
      2020.,  2168.,  2316., 2464., 2612., 1307.,  1385.,  1463.,  1541.,
      1518.,  1674.,  1830., 1986., 3832., 4160.,  4488.,  4816.,  5144.,
      5472.,  2722.,  2894., 3066., 3238., 3078.,  3234.,  3390.,  3546.,
      7112.,  7440.,  7768., 8096., 8424., 8752.,  4442.,  4614.,  4786.,
      4958.,  4638.,  4794., 4950., 5106., 10392., 10720., 11048., 11376.,
      11704., 12032., 6162., 6334., 6506., 6678.,  2645.,  2731.,  2817.,
      2903.,  5880.,  6060., 6240., 6420., 6600.,  6780.,  3455.,  3549.,
      3643.,  3737.,  3505., 3591., 3677., 3763.,  7680.,  7860.,  8040.,
      8220.,  8400.,  8580., 4395., 4489., 4583.,  4677.,  0.,     0.,
      0.,     0.,     0.,    0.,    0.,    0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      6874.,   7378.,   5732.,   6132.,   6532.,   6932.,   4744.,   5544.,
      6344.,   7144.,   11684.,  13076.,  10088.,  11144.,  17300.,  19076.,
      13832.,  15144.,  16456.,  17768.,  12744.,  13544.,  14344.,  15144.,
      25604.,  26996.,  20648.,  21704.,  35060.,  36836.,  26952.,  28264.,
      29576.,  30888.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      35912.,  37736.,  39560.,  41384.,  63428.,  66356.,  45864.,  47944.,
      72884.,  76196.,  52168.,  54504.,  56840.,  59176.,  58444.,  61948.,
      65452.,  68956.,  104310., 109854., 74908.,  78796.,  118494., 124614.,
      84364.,  88636.,  92908.,  97180.,  59080.,  61928.,  64776.,  67624.,
      101252., 105716., 71080.,  74184.,  110708., 115556., 77384.,  80744.,
      84104.,  87464.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.,
      27556.,  29748.,  31940.,  34132.,  48994.,  52378.,  33812.,  36132.,
      51802.,  55378.,  35684.,  38132.,  40580.,  43028.,  56456.,  61352.,
      66248.,  71144.,  101540., 109076., 69992.,  75144.,  107156., 115076.,
      73736.,  79144.,  84552.,  89960.,  105416., 110312., 115208., 120104.,
      176900., 184436., 121512., 126664., 186356., 194276., 127816., 133224.,
      138632., 144040., 162700., 170812., 178924., 187036., 274518., 286974.,
      188380., 196876., 288702., 301734., 197836., 206716., 215596., 224476.,
      128584., 134504., 140424., 146344., 214724., 223796., 146728., 152904.,
      224180., 233636., 153032., 159464., 165896., 172328., 197452., 207100.,
      216748., 226396., 331254., 346014., 226204., 236236., 345438., 360774.,
      235660., 246076., 256492., 266908., 151752., 158696., 165640., 172584.,
      252548., 263156., 171944., 179144., 262004., 272996., 178248., 185704.,
      193160., 200616., 221192., 228136., 235080., 242024., 358628., 369236.,
      243944., 251144., 371924., 382916., 252808., 260264., 267720., 275176.,
      53412.,  57652.,  61892.,  66132.,  93922.,  100378., 63764.,  68132.,
      96730.,  103378., 65636.,  70132.,  74628.,  79124.,  108168., 117160.,
      126152., 135144., 191396., 205076., 129896., 139144., 197012., 211076.,
      133640., 143144., 152648., 162152., 198088., 207080., 216072., 225064.,
      328196., 341876., 222376., 231624., 337652., 351716., 228680., 238184.,
      247688., 257192., 301708., 315964., 330220., 344476., 501462., 523134.,
      339676., 354316., 515646., 537894., 349132., 364156., 379180., 394204.,
      221256., 231272., 241288., 251304., 366020., 381236., 247592., 257864.,
      375476., 391076., 253896., 264424., 274952., 285480., 336460., 352252.,
      368044., 383836., 558198., 582174., 377500., 393676., 572382., 596934.,
      386956., 403516., 420076., 436636., 244424., 255464., 266504., 277544.,
      403844., 420596., 272808., 284104., 413300., 430436., 279112., 290664.,
      302216., 313768., 354824., 365864., 376904., 387944., 571364., 588116.,
      385768., 397064., 584660., 601796., 394632., 406184., 417736., 429288.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  430.,   470.,   510.,   550.,
      1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,  1838.,  1942.,
      2046.,  940.,   1148.,  1356.,  1564.,  4072.,  4616.,  5160.,  5704.,
      6248.,  6792.,  4316.,  4652.,  4988.,  5324.,  3020.,  3228.,  3436.,
      3644.,  9512.,  10056., 10600., 11144., 11688., 12232., 7676.,  8012.,
      8348.,  8684.,  5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040.,
      16584., 17128., 17672., 11036., 11372., 11708., 12044., 5150.,  5318.,
      5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932., 8502.,
      8734.,  8966.,  9198.,  6830.,  6998.,  7166.,  7334.,  16932., 17332.,
      17732., 18132., 18532., 18932., 10822., 11054., 11286., 11518., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     190.,   486.,   782.,   1078.,  1604.,
      2260.,  2916.,  3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,
      3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  9476.,  10132., 10788.,
      11444., 5990.,  6350.,  6710.,  7070.,  6380.,  7100.,  7820.,  8540.,
      17000., 18568., 20136., 21704., 23272., 24840., 12828., 13676., 14524.,
      15372., 13580., 14300., 15020., 15740., 32680., 34248., 35816., 37384.,
      38952., 40520., 21308., 22156., 23004., 23852., 20780., 21500., 22220.,
      22940., 48360., 49928., 51496., 53064., 54632., 56200., 29788., 30636.,
      31484., 32332., 12990., 13414., 13838., 14262., 29636., 30548., 31460.,
      32372., 33284., 34196., 17878., 18366., 18854., 19342., 17230., 17654.,
      18078., 18502., 38756., 39668., 40580., 41492., 42404., 43316., 22758.,
      23246., 23734., 24222., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     350.,
      902.,   1454.,  2006.,  2948.,  4116.,  5284.,  6452.,  7620.,  8788.,
      4086.,  4702.,  5318.,  5934.,  5870.,  6422.,  6974.,  7526.,  14628.,
      15796., 16964., 18132., 19300., 20468., 10246., 10862., 11478., 12094.,
      11820., 13052., 14284., 15516., 29928., 32520., 35112., 37704., 40296.,
      42888., 21340., 22700., 24060., 25420., 24140., 25372., 26604., 27836.,
      55848., 58440., 61032., 63624., 66216., 68808., 34940., 36300., 37660.,
      39020., 36460., 37692., 38924., 40156., 81768., 84360., 86952., 89544.,
      92136., 94728., 48540., 49900., 51260., 52620., 20830., 21510., 22190.,
      22870., 46340., 47764., 49188., 50612., 52036., 53460., 27254., 27998.,
      28742., 29486., 27630., 28310., 28990., 29670., 60580., 62004., 63428.,
      64852., 66276., 67700., 34694., 35438., 36182., 36926., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,    158.,
      164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,
      263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,
      248.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,
      424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,
      628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,
      602.,   624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,
      560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,
      1198.,  1228.,  1258.,  1288.,  910.,   932.,   954.,   976.,   998.,
      1020.,  1042.,  1064.,  833.,   866.,   899.,   932.,   965.,   998.,
      1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,
      1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,
      1733.,  1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,
      1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,
      1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,
      1808.,  1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,
      2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,
      2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,
      2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,
      2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,
      2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,
      2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2822.,  2868.,
      2914.,  2960.,  3006.,  3052.,  3098.,  3144.,  4696.,  4768.,  4840.,
      4912.,  3282.,  3332.,  3382.,  3432.,  5110.,  5188.,  5266.,  5344.,
      3558.,  3612.,  3666.,  3720.,  3774.,  3828.,  3882.,  3936.,  871.,
      906.,   941.,   976.,   1011.,  1046.,  1081.,  1116.,  1550.,  1604.,
      1658.,  1712.,  1069.,  1106.,  1143.,  1180.,  1637.,  1694.,  1751.,
      1808.,  1127.,  1166.,  1205.,  1244.,  1283.,  1322.,  1361.,  1400.,
      1782.,  1860.,  1938.,  2016.,  2094.,  2172.,  2250.,  2328.,  3208.,
      3328.,  3448.,  3568.,  2210.,  2292.,  2374.,  2456.,  3382.,  3508.,
      3634.,  3760.,  2326.,  2412.,  2498.,  2584.,  2670.,  2756.,  2842.,
      2928.,  3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,
      5608.,  5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,
      6028.,  6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,
      4562.,  4648.,  5153.,  5282.,  5411.,  5540.,  5669.,  5798.,  5927.,
      6056.,  8694.,  8892.,  9090.,  9288.,  5963.,  6098.,  6233.,  6368.,
      9135.,  9342.,  9549.,  9756.,  6257.,  6398.,  6539.,  6680.,  6821.,
      6962.,  7103.,  7244.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,
      4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,
      4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,
      5238.,  5340.,  5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,
      6998.,  7151.,  7304.,  10458., 10692., 10926., 11160., 7139.,  7298.,
      7457.,  7616.,  10899., 11142., 11385., 11628., 7433.,  7598.,  7763.,
      7928.,  8093.,  8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,
      5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,
      5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,
      5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  6982.,  7092.,  7202.,
      7312.,  7422.,  7532.,  7642.,  7752.,  11320., 11488., 11656., 11824.,
      7698.,  7812.,  7926.,  8040.,  11734., 11908., 12082., 12256., 7974.,
      8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  1671.,  1738.,
      1805.,  1872.,  1939.,  2006.,  2073.,  2140.,  2942.,  3044.,  3146.,
      3248.,  1997.,  2066.,  2135.,  2204.,  3029.,  3134.,  3239.,  3344.,
      2055.,  2126.,  2197.,  2268.,  2339.,  2410.,  2481.,  2552.,  3382.,
      3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,
      6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,
      6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,
      6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216.,  10312.,
      10528., 10744., 10960., 6986.,  7132.,  7278.,  7424.,  10606., 10828.,
      11050., 11272., 7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,
      8232.,  9473.,  9698.,  9923.,  10148., 10373., 10598., 10823., 11048.,
      15750., 16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191.,
      16542., 16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146.,
      12383., 12620., 6942.,  7100.,  7258.,  7416.,  7574.,  7732.,  7890.,
      8048.,  11488., 11728., 11968., 12208., 7770.,  7932.,  8094.,  8256.,
      11782., 12028., 12274., 12520., 7966.,  8132.,  8298.,  8464.,  8630.,
      8796.,  8962.,  9128.,  10553., 10802., 11051., 11300., 11549., 11798.,
      12047., 12296., 17514., 17892., 18270., 18648., 11843., 12098., 12353.,
      12608., 17955., 18342., 18729., 19116., 12137., 12398., 12659., 12920.,
      13181., 13442., 13703., 13964., 7662.,  7836.,  8010.,  8184.,  8358.,
      8532.,  8706.,  8880.,  12664., 12928., 13192., 13456., 8554.,  8732.,
      8910.,  9088.,  12958., 13228., 13498., 13768., 8750.,  8932.,  9114.,
      9296.,  9478.,  9660.,  9842.,  10024., 11142., 11316., 11490., 11664.,
      11838., 12012., 12186., 12360., 17944., 18208., 18472., 18736., 12114.,
      12292., 12470., 12648., 18358., 18628., 18898., 19168., 12390., 12572.,
      12754., 12936., 13118., 13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,
      23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,
      83.,   86.,   89.,   92.,   95.,   98.,   101.,  104.,  66.,   68.,
      70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,
      60.,   64.,   68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,
      222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,
      182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,
      148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,
      442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,
      314.,  320.,  204.,  208.,  212.,  216.,  220.,  224.,  228.,  232.,
      562.,  572.,  582.,  592.,  602.,  612.,  622.,  632.,  642.,  652.,
      662.,  672.,  398.,  404.,  410.,  416.,  422.,  428.,  434.,  440.,
      183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,
      465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,
      292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  243.,  246.,
      249.,  252.,  255.,  258.,  261.,  264.,  591.,  598.,  605.,  612.,
      619.,  626.,  633.,  640.,  647.,  654.,  661.,  668.,  372.,  376.,
      380.,  384.,  388.,  392.,  396.,  400.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    5.,    10.,   15.,   20.,   25.,   30.,
      35.,   40.,   51.,   62.,   73.,   84.,   95.,   106.,  117.,  128.,
      139.,  150.,  161.,  172.,  78.,   84.,   90.,   96.,   102.,  108.,
      114.,  120.,  105.,  110.,  115.,  120.,  125.,  130.,  135.,  140.,
      271.,  282.,  293.,  304.,  315.,  326.,  337.,  348.,  359.,  370.,
      381.,  392.,  198.,  204.,  210.,  216.,  222.,  228.,  234.,  240.,
      212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,
      614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,
      422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,  452.,  464.,
      476.,  488.,  500.,  512.,  524.,  536.,  1082., 1108., 1134., 1160.,
      1186., 1212., 1238., 1264., 1290., 1316., 1342., 1368., 702.,  716.,
      730.,  744.,  758.,  772.,  786.,  800.,  692.,  704.,  716.,  728.,
      740.,  752.,  764.,  776.,  1602., 1628., 1654., 1680., 1706., 1732.,
      1758., 1784., 1810., 1836., 1862., 1888., 982.,  996.,  1010., 1024.,
      1038., 1052., 1066., 1080., 427.,  434.,  441.,  448.,  455.,  462.,
      469.,  476.,  971.,  986.,  1001., 1016., 1031., 1046., 1061., 1076.,
      1091., 1106., 1121., 1136., 584.,  592.,  600.,  608.,  616.,  624.,
      632.,  640.,  567.,  574.,  581.,  588.,  595.,  602.,  609.,  616.,
      1271., 1286., 1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406.,
      1421., 1436., 744.,  752.,  760.,  768.,  776.,  784.,  792.,  800.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,    18.,
      27.,   36.,   45.,   54.,   63.,   72.,   91.,   110.,  129.,  148.,
      167.,  186.,  205.,  224.,  243.,  262.,  281.,  300.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  189.,  198.,  207.,  216.,
      225.,  234.,  243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,
      585.,  604.,  623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,
      370.,  380.,  390.,  400.,  380.,  400.,  420.,  440.,  460.,  480.,
      500.,  520.,  962.,  1004., 1046., 1088., 1130., 1172., 1214., 1256.,
      1298., 1340., 1382., 1424., 686.,  708.,  730.,  752.,  774.,  796.,
      818.,  840.,  780.,  800.,  820.,  840.,  860.,  880.,  900.,  920.,
      1802., 1844., 1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180.,
      2222., 2264., 1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280.,
      1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684.,
      2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104.,
      1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720., 671.,  682.,
      693.,  704.,  715.,  726.,  737.,  748.,  1491., 1514., 1537., 1560.,
      1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744., 876.,  888.,
      900.,  912.,  924.,  936.,  948.,  960.,  891.,  902.,  913.,  924.,
      935.,  946.,  957.,  968.,  1951., 1974., 1997., 2020., 2043., 2066.,
      2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152.,
      1164., 1176., 1188., 1200., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      464.,    484.,    504.,    524.,    544.,    564.,    584.,    604.,
      1081.,   1123.,   1165.,   1207.,   1004.,   1040.,   1076.,   1112.,
      1771.,   1837.,   1903.,   1969.,   1464.,   1516.,   1568.,   1620.,
      1672.,   1724.,   1776.,   1828.,   1232.,   1336.,   1440.,   1544.,
      1648.,   1752.,   1856.,   1960.,   3002.,   3182.,   3362.,   3542.,
      2568.,   2704.,   2840.,   2976.,   4382.,   4610.,   4838.,   5066.,
      3488.,   3656.,   3824.,   3992.,   4160.,   4328.,   4496.,   4664.,
      3312.,   3416.,   3520.,   3624.,   3728.,   3832.,   3936.,   4040.,
      6602.,   6782.,   6962.,   7142.,   5288.,   5424.,   5560.,   5696.,
      8942.,   9170.,   9398.,   9626.,   6848.,   7016.,   7184.,   7352.,
      7520.,   7688.,   7856.,   8024.,   6064.,   6316.,   6568.,   6820.,
      7072.,   7324.,   7576.,   7828.,   12123.,  12537.,  12951.,  13365.,
      9412.,   9712.,   10012.,  10312.,  15633.,  16119.,  16605.,  17091.,
      11752.,  12100.,  12448.,  12796.,  13144.,  13492.,  13840.,  14188.,
      9040.,   9272.,   9504.,   9736.,   9968.,   10200.,  10432.,  10664.,
      15962.,  16334.,  16706.,  17078.,  11528.,  11792.,  12056.,  12320.,
      18302.,  18722.,  19142.,  19562.,  13088.,  13384.,  13680.,  13976.,
      14272.,  14568.,  14864.,  15160.,  14656.,  15100.,  15544.,  15988.,
      16432.,  16876.,  17320.,  17764.,  26163.,  26865.,  27567.,  28269.,
      18772.,  19264.,  19756.,  20248.,  29673.,  30447.,  31221.,  31995.,
      21112.,  21652.,  22192.,  22732.,  23272.,  23812.,  24352.,  24892.,
      14768.,  15128.,  15488.,  15848.,  16208.,  16568.,  16928.,  17288.,
      25322.,  25886.,  26450.,  27014.,  17768.,  18160.,  18552.,  18944.,
      27662.,  28274.,  28886.,  29498.,  19328.,  19752.,  20176.,  20600.,
      21024.,  21448.,  21872.,  22296.,  21968.,  22328.,  22688.,  23048.,
      23408.,  23768.,  24128.,  24488.,  36602.,  37166.,  37730.,  38294.,
      25608.,  26000.,  26392.,  26784.,  39902.,  40514.,  41126.,  41738.,
      27808.,  28232.,  28656.,  29080.,  29504.,  29928.,  30352.,  30776.,
      6800.,   7076.,   7352.,   7628.,   7904.,   8180.,   8456.,   8732.,
      12121.,  12547.,  12973.,  13399.,  8364.,   8656.,   8948.,   9240.,
      12811.,  13261.,  13711.,  14161.,  8824.,   9132.,   9440.,   9748.,
      10056.,  10364.,  10672.,  10980.,  13904.,  14520.,  15136.,  15752.,
      16368.,  16984.,  17600.,  18216.,  25082.,  26030.,  26978.,  27926.,
      17288.,  17936.,  18584.,  19232.,  26462.,  27458.,  28454.,  29450.,
      18208.,  18888.,  19568.,  20248.,  20928.,  21608.,  22288.,  22968.,
      26224.,  26840.,  27456.,  28072.,  28688.,  29304.,  29920.,  30536.,
      44042.,  44990.,  45938.,  46886.,  30248.,  30896.,  31544.,  32192.,
      46382.,  47378.,  48374.,  49370.,  31808.,  32488.,  33168.,  33848.,
      34528.,  35208.,  35888.,  36568.,  40432.,  41452.,  42472.,  43492.,
      44512.,  45532.,  46552.,  47572.,  68283.,  69849.,  71415.,  72981.,
      46852.,  47920.,  48988.,  50056.,  71793.,  73431.,  75069.,  76707.,
      49192.,  50308.,  51424.,  52540.,  53656.,  54772.,  55888.,  57004.,
      31952.,  32696.,  33440.,  34184.,  34928.,  35672.,  36416.,  37160.,
      53402.,  54542.,  55682.,  56822.,  36488.,  37264.,  38040.,  38816.,
      55742.,  56930.,  58118.,  59306.,  38048.,  38856.,  39664.,  40472.,
      41280.,  42088.,  42896.,  43704.,  49024.,  50236.,  51448.,  52660.,
      53872.,  55084.,  56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212.,  57472.,  58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552.,  59860.,  61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      37680.,  38552.,  39424.,  40296.,  41168.,  42040.,  42912.,  43784.,
      62762.,  64094.,  65426.,  66758.,  42728.,  43632.,  44536.,  45440.,
      65102.,  66482.,  67862.,  69242.,  44288.,  45224.,  46160.,  47096.,
      48032.,  48968.,  49904.,  50840.,  55120.,  55992.,  56864.,  57736.,
      58608.,  59480.,  60352.,  61224.,  89402.,  90734.,  92066.,  93398.,
      60808.,  61712.,  62616.,  63520.,  92702.,  94082.,  95462.,  96842.,
      63008.,  63944.,  64880.,  65816.,  66752.,  67688.,  68624.,  69560.,
      13136.,  13668.,  14200.,  14732.,  15264.,  15796.,  16328.,  16860.,
      23161.,  23971.,  24781.,  25591.,  15724.,  16272.,  16820.,  17368.,
      23851.,  24685.,  25519.,  26353.,  16184.,  16748.,  17312.,  17876.,
      18440.,  19004.,  19568.,  20132.,  26576.,  27704.,  28832.,  29960.,
      31088.,  32216.,  33344.,  34472.,  47162.,  48878.,  50594.,  52310.,
      32008.,  33168.,  34328.,  35488.,  48542.,  50306.,  52070.,  53834.,
      32928.,  34120.,  35312.,  36504.,  37696.,  38888.,  40080.,  41272.,
      49136.,  50264.,  51392.,  52520.,  53648.,  54776.,  55904.,  57032.,
      81482.,  83198.,  84914.,  86630.,  55208.,  56368.,  57528.,  58688.,
      83822.,  85586.,  87350.,  89114.,  56768.,  57960.,  59152.,  60344.,
      61536.,  62728.,  63920.,  65112.,  74800.,  76588.,  78376.,  80164.,
      81952.,  83740.,  85528.,  87316.,  124443., 127161., 129879., 132597.,
      84292.,  86128.,  87964.,  89800.,  127953., 130743., 133533., 136323.,
      86632.,  88516.,  90400.,  92284.,  94168.,  96052.,  97936.,  99820.,
      54864.,  56120.,  57376.,  58632.,  59888.,  61144.,  62400.,  63656.,
      90842.,  92750.,  94658.,  96566.,  61448.,  62736.,  64024.,  65312.,
      93182.,  95138.,  97094.,  99050.,  63008.,  64328.,  65648.,  66968.,
      68288.,  69608.,  70928.,  72248.,  83392.,  85372.,  87352.,  89332.,
      91312.,  93292.,  95272.,  97252.,  138483., 141489., 144495., 147501.,
      93652.,  95680.,  97708.,  99736.,  141993., 145071., 148149., 151227.,
      95992.,  98068.,  100144., 102220., 104296., 106372., 108448., 110524.,
      60592.,  61976.,  63360.,  64744.,  66128.,  67512.,  68896.,  70280.,
      100202., 102302., 104402., 106502., 67688.,  69104.,  70520.,  71936.,
      102542., 104690., 106838., 108986., 69248.,  70696.,  72144.,  73592.,
      75040.,  76488.,  77936.,  79384.,  88272.,  89656.,  91040.,  92424.,
      93808.,  95192.,  96576.,  97960.,  142202., 144302., 146402., 148502.,
      96008.,  97424.,  98840.,  100256., 145502., 147650., 149798., 151946.,
      98208.,  99656.,  101104., 102552., 104000., 105448., 106896., 108344.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,
      464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,
      644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,
      543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,
      458.,   1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,
      1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,
      1342.,  1386.,  1430.,  822.,   850.,   878.,   906.,   934.,   962.,
      990.,   1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,
      3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,
      2178.,  2222.,  2266.,  2310.,  1382.,  1410.,  1438.,  1466.,  1494.,
      1522.,  1550.,  1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,
      4392.,  4464.,  4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,
      3014.,  3058.,  3102.,  3146.,  3190.,  1337.,  1359.,  1381.,  1403.,
      1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,  3492.,  3544.,
      3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,  2183.,  2213.,
      2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  1777.,  1799.,  1821.,
      1843.,  1865.,  1887.,  1909.,  1931.,  4376.,  4428.,  4480.,  4532.,
      4584.,  4636.,  4688.,  4740.,  4792.,  4844.,  4896.,  4948.,  2783.,
      2813.,  2843.,  2873.,  2903.,  2933.,  2963.,  2993.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     29.,
      67.,    105.,   143.,   181.,   219.,   257.,   295.,   368.,   452.,
      536.,   620.,   704.,   788.,   872.,   956.,   1040.,  1124.,  1208.,
      1292.,  587.,   633.,   679.,   725.,   771.,   817.,   863.,   909.,
      789.,   827.,   865.,   903.,   941.,   979.,   1017.,  1055.,  2048.,
      2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,
      2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,
      1829.,  1590.,  1682.,  1774.,  1866.,  1958.,  2050.,  2142.,  2234.,
      4248.,  4448.,  4648.,  4848.,  5048.,  5248.,  5448.,  5648.,  5848.,
      6048.,  6248.,  6448.,  3218.,  3326.,  3434.,  3542.,  3650.,  3758.,
      3866.,  3974.,  3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,
      4074.,  8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,
      9848.,  10048., 10248., 10448., 5378.,  5486.,  5594.,  5702.,  5810.,
      5918.,  6026.,  6134.,  5270.,  5362.,  5454.,  5546.,  5638.,  5730.,
      5822.,  5914.,  12248., 12448., 12648., 12848., 13048., 13248., 13448.,
      13648., 13848., 14048., 14248., 14448., 7538.,  7646.,  7754.,  7862.,
      7970.,  8078.,  8186.,  8294.,  3281.,  3335.,  3389.,  3443.,  3497.,
      3551.,  3605.,  3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,
      8176.,  8292.,  8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,
      4697.,  4759.,  4821.,  4883.,  4945.,  4361.,  4415.,  4469.,  4523.,
      4577.,  4631.,  4685.,  4739.,  9800.,  9916.,  10032., 10148., 10264.,
      10380., 10496., 10612., 10728., 10844., 10960., 11076., 5751.,  5813.,
      5875.,  5937.,  5999.,  6061.,  6123.,  6185.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     53.,    123.,
      193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,   968.,
      1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,  2300.,
      995.,   1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,  1453.,
      1523.,  1593.,  1663.,  1733.,  1803.,  1873.,  1943.,  3632.,  3780.,
      3928.,  4076.,  4224.,  4372.,  4520.,  4668.,  4816.,  4964.,  5112.,
      5260.,  2555.,  2633.,  2711.,  2789.,  2867.,  2945.,  3023.,  3101.,
      2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,
      7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712.,  10040., 10368.,
      10696., 11024., 5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,
      6518.,  6038.,  6194.,  6350.,  6506.,  6662.,  6818.,  6974.,  7130.,
      13976., 14304., 14632., 14960., 15288., 15616., 15944., 16272., 16600.,
      16928., 17256., 17584., 8754.,  8926.,  9098.,  9270.,  9442.,  9614.,
      9786.,  9958.,  9158.,  9314.,  9470.,  9626.,  9782.,  9938.,  10094.,
      10250., 20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832.,
      23160., 23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882.,
      13054., 13226., 13398., 5225.,  5311.,  5397.,  5483.,  5569.,  5655.,
      5741.,  5827.,  11624., 11804., 11984., 12164., 12344., 12524., 12704.,
      12884., 13064., 13244., 13424., 13604., 6839.,  6933.,  7027.,  7121.,
      7215.,  7309.,  7403.,  7497.,  6945.,  7031.,  7117.,  7203.,  7289.,
      7375.,  7461.,  7547.,  15224., 15404., 15584., 15764., 15944., 16124.,
      16304., 16484., 16664., 16844., 17024., 17204., 8719.,  8813.,  8907.,
      9001.,  9095.,  9189.,  9283.,  9377.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3300.,   3444.,    3588.,    3732.,    3876.,    4020.,    4164.,
      4308.,   7922.,    8234.,    8546.,    8858.,    7540.,    7812.,
      8084.,   8356.,    13418.,   13922.,   14426.,   14930.,   11204.,
      11604.,  12004.,   12404.,   12804.,   13204.,   13604.,   14004.,
      8968.,   9768.,    10568.,   11368.,   12168.,   12968.,   13768.,
      14568.,  22468.,   23860.,   25252.,   26644.,   19496.,   20552.,
      21608.,  22664.,   33460.,   35236.,   37012.,   38788.,   26824.,
      28136.,  29448.,   30760.,   32072.,   33384.,   34696.,   36008.,
      24968.,  25768.,   26568.,   27368.,   28168.,   28968.,   29768.,
      30568.,  50308.,   51700.,   53092.,   54484.,   40616.,   41672.,
      42728.,  43784.,   68980.,   70756.,   72532.,   74308.,   53064.,
      54376.,  55688.,   57000.,   58312.,   59624.,   60936.,   62248.,
      46124.,  48092.,   50060.,   52028.,   53996.,   55964.,   57932.,
      59900.,  93078.,   96318.,   99558.,   102798.,  72668.,   75020.,
      77372.,  79724.,   121086.,  124902.,  128718.,  132534.,  91340.,
      94076.,  96812.,   99548.,   102284.,  105020.,  107756.,  110492.,
      70664.,  72488.,   74312.,   76136.,   77960.,   79784.,   81608.,
      83432.,  124996.,  127924.,  130852.,  133780.,  90408.,   92488.,
      94568.,  96648.,   143668.,  146980.,  150292.,  153604.,  102856.,
      105192., 107528.,  109864.,  112200.,  114536.,  116872.,  119208.,
      114668., 118172.,  121676.,  125180.,  128684.,  132188.,  135692.,
      139196., 205110.,  210654.,  216198.,  221742.,  147356.,  151244.,
      155132., 159020.,  233118.,  239238.,  245358.,  251478.,  166028.,
      170300., 174572.,  178844.,  183116.,  187388.,  191660.,  195932.,
      116360., 119208.,  122056.,  124904.,  127752.,  130600.,  133448.,
      136296., 199684.,  204148.,  208612.,  213076.,  140200.,  143304.,
      146408., 149512.,  218356.,  223204.,  228052.,  232900.,  152648.,
      156008., 159368.,  162728.,  166088.,  169448.,  172808.,  176168.,
      173320., 176168.,  179016.,  181864.,  184712.,  187560.,  190408.,
      193256., 288964.,  293428.,  297892.,  302356.,  202280.,  205384.,
      208488., 211592.,  315316.,  320164.,  325012.,  329860.,  219848.,
      223208., 226568.,  229928.,  233288.,  236648.,  240008.,  243368.,
      53732.,  55924.,   58116.,   60308.,   62500.,   64692.,   66884.,
      69076.,  95858.,   99242.,   102626.,  106010.,  66164.,   68484.,
      70804.,  73124.,   101354.,  104930.,  108506.,  112082.,  69828.,
      72276.,  74724.,   77172.,   79620.,   82068.,   84516.,   86964.,
      109832., 114728.,  119624.,  124520.,  129416.,  134312.,  139208.,
      144104., 198340.,  205876.,  213412.,  220948.,  136744.,  141896.,
      147048., 152200.,  209332.,  217252.,  225172.,  233092.,  144072.,
      149480., 154888.,  160296.,  165704.,  171112.,  176520.,  181928.,
      207752., 212648.,  217544.,  222440.,  227336.,  232232.,  237128.,
      242024., 349060.,  356596.,  364132.,  371668.,  239784.,  244936.,
      250088., 255240.,  367732.,  375652.,  383572.,  391492.,  252232.,
      257640., 263048.,  268456.,  273864.,  279272.,  284680.,  290088.,
      320300., 328412.,  336524.,  344636.,  352748.,  360860.,  368972.,
      377084., 541206.,  553662.,  566118.,  578574.,  371420.,  379916.,
      388412., 396908.,  569214.,  582246.,  595278.,  608310.,  390092.,
      398972., 407852.,  416732.,  425612.,  434492.,  443372.,  452252.,
      253448., 259368.,  265288.,  271208.,  277128.,  283048.,  288968.,
      294888., 423748.,  432820.,  441892.,  450964.,  289576.,  295752.,
      301928., 308104.,  442420.,  451876.,  461332.,  470788.,  302024.,
      308456., 314888.,  321320.,  327752.,  334184.,  340616.,  347048.,
      388844., 398492.,  408140.,  417788.,  427436.,  437084.,  446732.,
      456380., 653238.,  667998.,  682758.,  697518.,  446108.,  456140.,
      466172., 476204.,  681246.,  696582.,  711918.,  727254.,  464780.,
      475196., 485612.,  496028.,  506444.,  516860.,  527276.,  537692.,
      299144., 306088.,  313032.,  319976.,  326920.,  333864.,  340808.,
      347752., 498436.,  509044.,  519652.,  530260.,  339368.,  346568.,
      353768., 360968.,  517108.,  528100.,  539092.,  550084.,  351816.,
      359272., 366728.,  374184.,  381640.,  389096.,  396552.,  404008.,
      438024., 444968.,  451912.,  458856.,  465800.,  472744.,  479688.,
      486632., 710596.,  721204.,  731812.,  742420.,  483368.,  490568.,
      497768., 504968.,  736948.,  747940.,  758932.,  769924.,  500936.,
      508392., 515848.,  523304.,  530760.,  538216.,  545672.,  553128.,
      104164., 108404.,  112644.,  116884.,  121124.,  125364.,  129604.,
      133844., 183794.,  190250.,  196706.,  203162.,  124788.,  129156.,
      133524., 137892.,  189290.,  195938.,  202586.,  209234.,  128452.,
      132948., 137444.,  141940.,  146436.,  150932.,  155428.,  159924.,
      210696., 219688.,  228680.,  237672.,  246664.,  255656.,  264648.,
      273640., 374212.,  387892.,  401572.,  415252.,  253992.,  263240.,
      272488., 281736.,  385204.,  399268.,  413332.,  427396.,  261320.,
      270824., 280328.,  289832.,  299336.,  308840.,  318344.,  327848.,
      390536., 399528.,  408520.,  417512.,  426504.,  435496.,  444488.,
      453480., 647812.,  661492.,  675172.,  688852.,  438952.,  448200.,
      457448., 466696.,  666484.,  680548.,  694612.,  708676.,  451400.,
      460904., 470408.,  479912.,  489416.,  498920.,  508424.,  517928.,
      594476., 608732.,  622988.,  637244.,  651500.,  665756.,  680012.,
      694268., 989334.,  1011006., 1032678., 1054350., 670172.,  684812.,
      699452., 714092.,  1017342., 1039590., 1061838., 1084086., 688844.,
      703868., 718892.,  733916.,  748940.,  763964.,  778988.,  794012.,
      436232., 446248.,  456264.,  466280.,  476296.,  486312.,  496328.,
      506344., 722500.,  737716.,  752932.,  768148.,  488744.,  499016.,
      509288., 519560.,  741172.,  756772.,  772372.,  787972.,  501192.,
      511720., 522248.,  532776.,  543304.,  553832.,  564360.,  574888.,
      663020., 678812.,  694604.,  710396.,  726188.,  741980.,  757772.,
      773564., 1101366., 1125342., 1149318., 1173294., 744860.,  761036.,
      777212., 793388.,  1129374., 1153926., 1178478., 1203030., 763532.,
      780092., 796652.,  813212.,  829772.,  846332.,  862892.,  879452.,
      481928., 492968.,  504008.,  515048.,  526088.,  537128.,  548168.,
      559208., 797188.,  813940.,  830692.,  847444.,  538536.,  549832.,
      561128., 572424.,  815860.,  832996.,  850132.,  867268.,  550984.,
      562536., 574088.,  585640.,  597192.,  608744.,  620296.,  631848.,
      702728., 713768.,  724808.,  735848.,  746888.,  757928.,  768968.,
      780008., 1132228., 1148980., 1165732., 1182484., 764456.,  775752.,
      787048., 798344.,  1158580., 1175716., 1192852., 1209988., 782024.,
      793576., 805128.,  816680.,  828232.,  839784.,  851336.,  862888.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   830.,    870.,    910.,    950.,
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   4452.,   4596.,   4740.,   4884.,
      3398.,   3502.,   3606.,   3710.,   3814.,   3918.,   4022.,   4126.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  5900.,   6108.,   6316.,   6524.,
      6732.,   6940.,   7148.,   7356.,   18664.,  19208.,  19752.,  20296.,
      20840.,  21384.,  21928.,  22472.,  23016.,  23560.,  24104.,  24648.,
      15132.,  15468.,  15804.,  16140.,  16476.,  16812.,  17148.,  17484.,
      10060.,  10268.,  10476.,  10684.,  10892.,  11100.,  11308.,  11516.,
      29544.,  30088.,  30632.,  31176.,  31720.,  32264.,  32808.,  33352.,
      33896.,  34440.,  34984.,  35528.,  21852.,  22188.,  22524.,  22860.,
      23196.,  23532.,  23868.,  24204.,  10190.,  10358.,  10526.,  10694.,
      10862.,  11030.,  11198.,  11366.,  25604.,  26004.,  26404.,  26804.,
      27204.,  27604.,  28004.,  28404.,  28804.,  29204.,  29604.,  30004.,
      16854.,  17086.,  17318.,  17550.,  17782.,  18014.,  18246.,  18478.,
      13550.,  13718.,  13886.,  14054.,  14222.,  14390.,  14558.,  14726.,
      33604.,  34004.,  34404.,  34804.,  35204.,  35604.,  36004.,  36404.,
      36804.,  37204.,  37604.,  38004.,  21494.,  21726.,  21958.,  22190.,
      22422.,  22654.,  22886.,  23118.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      190.,    486.,    782.,    1078.,   1374.,   1670.,   1966.,   2262.,
      2788.,   3444.,   4100.,   4756.,   5412.,   6068.,   6724.,   7380.,
      8036.,   8692.,   9348.,   10004.,  4550.,   4910.,   5270.,   5630.,
      5990.,   6350.,   6710.,   7070.,   6110.,   6406.,   6702.,   6998.,
      7294.,   7590.,   7886.,   8182.,   15908.,  16564.,  17220.,  17876.,
      18532.,  19188.,  19844.,  20500.,  21156.,  21812.,  22468.,  23124.,
      11750.,  12110.,  12470.,  12830.,  13190.,  13550.,  13910.,  14270.,
      12300.,  13020.,  13740.,  14460.,  15180.,  15900.,  16620.,  17340.,
      33000.,  34568.,  36136.,  37704.,  39272.,  40840.,  42408.,  43976.,
      45544.,  47112.,  48680.,  50248.,  25116.,  25964.,  26812.,  27660.,
      28508.,  29356.,  30204.,  31052.,  26700.,  27420.,  28140.,  28860.,
      29580.,  30300.,  31020.,  31740.,  64360.,  65928.,  67496.,  69064.,
      70632.,  72200.,  73768.,  75336.,  76904.,  78472.,  80040.,  81608.,
      42076.,  42924.,  43772.,  44620.,  45468.,  46316.,  47164.,  48012.,
      41100.,  41820.,  42540.,  43260.,  43980.,  44700.,  45420.,  46140.,
      95720.,  97288.,  98856.,  100424., 101992., 103560., 105128., 106696.,
      108264., 109832., 111400., 112968., 59036.,  59884.,  60732.,  61580.,
      62428.,  63276.,  64124.,  64972.,  25710.,  26134.,  26558.,  26982.,
      27406.,  27830.,  28254.,  28678.,  58692.,  59604.,  60516.,  61428.,
      62340.,  63252.,  64164.,  65076.,  65988.,  66900.,  67812.,  68724.,
      35446.,  35934.,  36422.,  36910.,  37398.,  37886.,  38374.,  38862.,
      34190.,  34614.,  35038.,  35462.,  35886.,  36310.,  36734.,  37158.,
      76932.,  77844.,  78756.,  79668.,  80580.,  81492.,  82404.,  83316.,
      84228.,  85140.,  86052.,  86964.,  45206.,  45694.,  46182.,  46670.,
      47158.,  47646.,  48134.,  48622.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      350.,    902.,    1454.,   2006.,   2558.,   3110.,   3662.,   4214.,
      5156.,   6324.,   7492.,   8660.,   9828.,   10996.,  12164.,  13332.,
      14500.,  15668.,  16836.,  18004.,  7782.,   8398.,   9014.,   9630.,
      10246.,  10862.,  11478.,  12094.,  11390.,  11942.,  12494.,  13046.,
      13598.,  14150.,  14702.,  15254.,  28516.,  29684.,  30852.,  32020.,
      33188.,  34356.,  35524.,  36692.,  37860.,  39028.,  40196.,  41364.,
      20102.,  20718.,  21334.,  21950.,  22566.,  23182.,  23798.,  24414.,
      22860.,  24092.,  25324.,  26556.,  27788.,  29020.,  30252.,  31484.,
      58216.,  60808.,  63400.,  65992.,  68584.,  71176.,  73768.,  76360.,
      78952.,  81544.,  84136.,  86728.,  41820.,  43180.,  44540.,  45900.,
      47260.,  48620.,  49980.,  51340.,  47500.,  48732.,  49964.,  51196.,
      52428.,  53660.,  54892.,  56124.,  110056., 112648., 115240., 117832.,
      120424., 123016., 125608., 128200., 130792., 133384., 135976., 138568.,
      69020.,  70380.,  71740.,  73100.,  74460.,  75820.,  77180.,  78540.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 41230.,  41910.,  42590.,  43270.,
      43950.,  44630.,  45310.,  45990.,  91780.,  93204.,  94628.,  96052.,
      97476.,  98900.,  100324., 101748., 103172., 104596., 106020., 107444.,
      54038.,  54782.,  55526.,  56270.,  57014.,  57758.,  58502.,  59246.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786.,  1228.,
      858.,  1336., 930.,  984.,  119.,  244.,  279.,  428.,  295.,  452.,
      311.,  350.,  246.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      436.,  894.,  972.,  1492., 1024., 1570., 1076., 1162., 676.,  1385.,
      1514., 2322., 1592., 2439., 1670., 1811., 532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      898.,  1828., 1938., 2956., 2010., 3064., 2082., 2200., 231.,  468.,
      535.,  812.,  551.,  836.,  567.,  638.,  470.,  952.,  1094., 1660.,
      1126., 1708., 1158., 1308., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1252., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      916.,  1854., 2012., 3052., 2064., 3130., 2116., 2282., 1396., 2825.,
      3074., 4662., 3152., 4779., 3230., 3491., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1442., 2916., 3090., 4684., 3162., 4792.,
      3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,  43.,  24.,  30.,  0.,
      30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,   62.,  74.,  160., 186.,
      212., 116., 130., 0.,   122., 134., 290., 316., 342., 186., 200., 0.,
      182., 194., 420., 446., 472., 256., 270., 0.,   112., 119., 254., 269.,
      284., 152., 160., 0.,   147., 154., 329., 344., 359., 192., 200., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,
      75.,  40.,  50.,  0.,   54.,  63.,  132., 151., 170., 90.,  100., 0.,
      110., 130., 272., 314., 356., 188., 210., 0.,   210., 230., 482., 524.,
      566., 298., 320., 0.,   310., 330., 692., 734., 776., 408., 430., 0.,
      176., 187., 390., 413., 436., 228., 240., 0.,   231., 242., 505., 528.,
      551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322., 7192.,
      7616.,  905.,   1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  3366.,
      6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,  5213.,  10684.,
      11704., 17955., 12316., 18873., 12928., 14044., 4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7010.,  14272., 15144., 23102., 15712., 23954.,
      16280., 17216., 1769.,  3584.,  4116.,  6247.,  4240.,  6433.,  4364.,
      4928.,  3594.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9725.,
      19708., 21496., 32643., 22108., 33561., 22720., 24604., 7126.,  14424.,
      15680., 23786., 16088., 24398., 16496., 17816., 10853., 21964., 23944.,
      36315., 24556., 37233., 25168., 27244., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11298., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,  308.,  173.,
      219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,  449.,  0.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,    910.,  1002.,
      2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462., 3176., 3376.,
      3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473., 1535., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    53.,   123.,
      252.,  400.,  548.,  293.,  371.,  0.,    403.,  473.,  992.,  1140.,
      1288., 683.,  761.,  0.,    818.,  974.,  2040., 2368., 2696., 1426.,
      1598., 0.,    1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441.,
      3008., 3188., 3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,
      956.,   2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,  6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,  12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,  18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146., 30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540., 30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      21340., 44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      7054.,  14468.,  16660.,  25562.,  17636.,  27026.,  18612.,  21060.,
      14524., 29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      26444., 54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,
      40930., 83900.,  92012.,  141174., 96860.,  148446., 101708., 110588.,
      32396., 66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858., 101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348., 78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      55388., 112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      13838., 28036.,  32276.,  48986.,  33252.,  50450.,  34228.,  38724.,
      28092., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,  79304.,
      50252., 101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      76642., 155324., 169580., 257526., 174428., 264798., 179276., 194300.,
      56204., 113768., 123784., 187780., 127016., 192628., 130248., 140776.,
      85570., 173180., 188972., 286614., 193820., 293886., 198668., 215228.,
      62156., 125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      89436., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,  0.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,     3420.,
      4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340., 24680.,
      26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108., 16020.,
      16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580., 21492.,
      11534., 12022., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,  2238.,  2854.,
      0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,  0.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 0.,     12460.,
      13692., 28744., 31336., 33928., 17900., 19260., 0.,     18620., 19852.,
      41704., 44296., 46888., 24700., 26060., 0.,     10630., 11310., 23620.,
      25044., 26468., 13862., 14606., 0.,     14030., 14710., 30740., 32164.,
      33588., 17582., 18326., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,   73.,   78.,
      127.,  136.,  103.,  110.,  117.,  124.,  38.,   44.,   98.,   112.,
      126.,  140.,  224.,  248.,  186.,  204.,  314.,  344.,  246.,  268.,
      290.,  312.,  98.,   104.,  238.,  252.,  266.,  280.,  464.,  488.,
      366.,  384.,  614.,  644.,  466.,  488.,  510.,  532.,  185.,  200.,
      433.,  466.,  499.,  532.,  846.,  900.,  649.,  688.,  1071., 1134.,
      799.,  844.,  889.,  934.,  282.,  296.,  606.,  636.,  666.,  696.,
      1064., 1112., 766.,  800.,  1214., 1268., 866.,  904.,  942.,  980.,
      461.,  488.,  985.,  1042., 1099., 1156., 1746., 1836., 1249., 1312.,
      1971., 2070., 1399., 1468., 1537., 1606., 466.,  488.,  974.,  1020.,
      1066., 1112., 1664., 1736., 1166., 1216., 1814., 1892., 1266., 1320.,
      1374., 1428., 686.,  708.,  1434., 1480., 1526., 1572., 2384., 2456.,
      1666., 1716., 2594., 2672., 1806., 1860., 1914., 1968., 221.,  238.,
      453.,  488.,  523.,  558.,  802.,  856.,  553.,  590.,  847.,  904.,
      583.,  622.,  661.,  700.,  454.,  492.,  930.,  1008., 1086., 1164.,
      1664., 1784., 1146., 1228., 1754., 1880., 1206., 1292., 1378., 1464.,
      834.,  872.,  1710., 1788., 1866., 1944., 2864., 2984., 1966., 2048.,
      3014., 3140., 2066., 2152., 2238., 2324., 1289., 1352., 2641., 2770.,
      2899., 3028., 4446., 4644., 3049., 3184., 4671., 4878., 3199., 3340.,
      3481., 3622., 1018., 1064., 2078., 2172., 2266., 2360., 3464., 3608.,
      2366., 2464., 3614., 3764., 2466., 2568., 2670., 2772., 1565., 1640.,
      3193., 3346., 3499., 3652., 5346., 5580., 3649., 3808., 5571., 5814.,
      3799., 3964., 4129., 4294., 1202., 1256., 2446., 2556., 2666., 2776.,
      4064., 4232., 2766., 2880., 4214., 4388., 2866., 2984., 3102., 3220.,
      1742., 1796., 3546., 3656., 3766., 3876., 5744., 5912., 3906., 4020.,
      5954., 6128., 4046., 4164., 4282., 4400., 429.,  462.,  869.,  936.,
      1003., 1070., 1522., 1624., 1033., 1102., 1567., 1672., 1063., 1134.,
      1205., 1276., 870.,  940.,  1762., 1904., 2046., 2188., 3104., 3320.,
      2106., 2252., 3194., 3416., 2166., 2316., 2466., 2616., 1570., 1640.,
      3182., 3324., 3466., 3608., 5264., 5480., 3566., 3712., 5414., 5636.,
      3666., 3816., 3966., 4116., 2393., 2504., 4849., 5074., 5299., 5524.,
      8046., 8388., 5449., 5680., 8271., 8622., 5599., 5836., 6073., 6310.,
      1754., 1832., 3550., 3708., 3866., 4024., 5864., 6104., 3966., 4128.,
      6014., 6260., 4066., 4232., 4398., 4564., 2669., 2792., 5401., 5650.,
      5899., 6148., 8946., 9324., 6049., 6304., 9171., 9558., 6199., 6460.,
      6721., 6982., 1938., 2024., 3918., 4092., 4266., 4440., 6464., 6728.,
      4366., 4544., 6614., 6884., 4466., 4648., 4830., 5012., 2798., 2884.,
      5658., 5832., 6006., 6180., 9104., 9368., 6146., 6324., 9314., 9584.,
      6286., 6468., 6650., 6832.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,   14.,
      16.,  18.,  20.,   0.,    0.,    11.,   12.,   13.,   14.,   37.,   40.,
      43.,  46.,  49.,   52.,   34.,   36.,   38.,   40.,   0.,    0.,    24.,
      28.,  32.,  36.,   86.,   96.,   106.,  116.,  126.,  136.,  82.,   88.,
      94.,  100., 0.,    0.,    64.,   68.,   72.,   76.,   186.,  196.,  206.,
      216., 226., 236.,  142.,  148.,  154.,  160.,  0.,    0.,    104.,  108.,
      112., 116., 286.,  296.,  306.,  316.,  326.,  336.,  202.,  208.,  214.,
      220., 0.,   0.,    93.,   96.,   99.,   102.,  229.,  236.,  243.,  250.,
      257., 264., 148.,  152.,  156.,  160.,  0.,    0.,    123.,  126.,  129.,
      132., 299., 306.,  313.,  320.,  327.,  334.,  188.,  192.,  196.,  200.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    5.,    10.,   15.,   20.,
      31.,  42.,  53.,   64.,   75.,   86.,   42.,   48.,   54.,   60.,   0.,
      0.,   55.,  60.,   65.,   70.,   141.,  152.,  163.,  174.,  185.,  196.,
      102., 108., 114.,  120.,  0.,    0.,    112.,  124.,  136.,  148.,  294.,
      320., 346., 372.,  398.,  424.,  218.,  232.,  246.,  260.,  0.,    0.,
      232., 244., 256.,  268.,  554.,  580.,  606.,  632.,  658.,  684.,  358.,
      372., 386., 400.,  0.,    0.,    352.,  364.,  376.,  388.,  814.,  840.,
      866., 892., 918.,  944.,  498.,  512.,  526.,  540.,  0.,    0.,    217.,
      224., 231., 238.,  493.,  508.,  523.,  538.,  553.,  568.,  296.,  304.,
      312., 320., 0.,    0.,    287.,  294.,  301.,  308.,  643.,  658.,  673.,
      688., 703., 718.,  376.,  384.,  392.,  400.,  0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    9.,    18.,   27.,   36.,   55.,   74.,   93.,   112.,
      131., 150., 70.,   80.,   90.,   100.,  0.,    0.,    99.,   108.,  117.,
      126., 245., 264.,  283.,  302.,  321.,  340.,  170.,  180.,  190.,  200.,
      0.,   0.,   200.,  220.,  240.,  260.,  502.,  544.,  586.,  628.,  670.,
      712., 354., 376.,  398.,  420.,  0.,    0.,    400.,  420.,  440.,  460.,
      922., 964., 1006., 1048., 1090., 1132., 574.,  596.,  618.,  640.,  0.,
      0.,   600., 620.,  640.,  660.,  1342., 1384., 1426., 1468., 1510., 1552.,
      794., 816., 838.,  860.,  0.,    0.,    341.,  352.,  363.,  374.,  757.,
      780., 803., 826.,  849.,  872.,  444.,  456.,  468.,  480.,  0.,    0.,
      451., 462., 473.,  484.,  987.,  1010., 1033., 1056., 1079., 1102., 564.,
      576., 588., 600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,   1696.,  1800.,
      1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,
      3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,
      6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,
      7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,
      5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,
      3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,  10064.,
      15129., 15903., 10760., 11300., 11840., 12380., 3594.,  3766.,  7520.,
      7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674.,
      9824.,  10248., 10672., 11096., 5314.,  5486.,  11120., 11480., 11840.,
      12200., 18514., 19078., 12952., 13344., 20182., 20794., 14064., 14488.,
      14912., 15336., 1709.,  1843.,  3504.,  3780.,  4056.,  4332.,  6221.,
      6647.,  4292.,  4584.,  6575.,  7025.,  4528.,  4836.,  5144.,  5452.,
      3506.,  3806.,  7184.,  7800.,  8416.,  9032.,  12898., 13846., 8888.,
      9536.,  13606., 14602., 9360.,  10040., 10720., 11400., 6506.,  6806.,
      13344., 13960., 14576., 15192., 22378., 23326., 15368., 16016., 23566.,
      24562., 16160., 16840., 17520., 18200., 10051., 10549., 20600., 21620.,
      22640., 23660., 34731., 36297., 23828., 24896., 36513., 38151., 25016.,
      26132., 27248., 28364., 7962.,  8326.,  16256., 17000., 17744., 18488.,
      27130., 28270., 18536., 19312., 28318., 29506., 19328., 20136., 20944.,
      21752., 12235., 12829., 24968., 26180., 27392., 28604., 41859., 43713.,
      28580., 29840., 43641., 45567., 29768., 31076., 32384., 33692., 9418.,
      9846.,  19168., 20040., 20912., 21784., 31882., 33214., 21704., 22608.,
      33070., 34450., 22496., 23432., 24368., 25304., 13698., 14126., 27888.,
      28760., 29632., 30504., 45202., 46534., 30744., 31648., 46870., 48250.,
      31856., 32792., 33728., 34664., 3341.,  3603.,  6768.,  7300.,  7832.,
      8364.,  11885., 12695., 8068.,  8616.,  12239., 13073., 8304.,  8868.,
      9432.,  9996.,  6770.,  7326.,  13712., 14840., 15968., 17096., 24226.,
      25942., 16440., 17600., 24934., 26698., 16912., 18104., 19296., 20488.,
      12330., 12886., 24992., 26120., 27248., 28376., 41386., 43102., 28040.,
      29200., 42574., 44338., 28832., 30024., 31216., 32408., 18787., 19669.,
      38072., 39860., 41648., 43436., 63243., 65961., 42836., 44672., 65025.,
      67815., 44024., 45908., 47792., 49676., 13786., 14406., 27904., 29160.,
      30416., 31672., 46138., 48046., 31208., 32496., 47326., 49282., 32000.,
      33320., 34640., 35960., 20971., 21949., 42440., 44420., 46400., 48380.,
      70371., 73377., 47588., 49616., 72153., 75231., 48776., 50852., 52928.,
      55004., 15242., 15926., 30816., 32200., 33584., 34968., 50890., 52990.,
      34376., 35792., 52078., 54226., 35168., 36616., 38064., 39512., 22082.,
      22766., 44656., 46040., 47424., 48808., 71890., 73990., 48536., 49952.,
      73558., 75706., 49648., 51096., 52544., 53992.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,   100.,  120.,
      140.,   95.,    109.,   123.,   137.,   0.,     0.,    65.,   71.,
      77.,    83.,    240.,   260.,   280.,   300.,   320.,  340.,  235.,
      249.,   263.,   277.,   0.,     0.,     142.,   170.,  198.,  226.,
      568.,   640.,   712.,   784.,   856.,   928.,   578.,  622.,  666.,
      710.,   0.,     0.,     422.,   450.,   478.,   506.,  1288., 1360.,
      1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106., 1150., 0.,
      0.,     702.,   730.,   758.,   786.,   2008.,  2080., 2152., 2224.,
      2296.,  2368.,  1458.,  1502.,  1546.,  1590.,  0.,    0.,    677.,
      699.,   721.,   743.,   1688.,  1740.,  1792.,  1844., 1896., 1948.,
      1103.,  1133.,  1163.,  1193.,  0.,     0.,     897.,  919.,  941.,
      963.,   2208.,  2260.,  2312.,  2364.,  2416.,  2468., 1403., 1433.,
      1463.,  1493.,  0.,     0.,     0.,     0.,     0.,    0.,    0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      0.,     0.,     29.,    67.,    105.,   143.,   216.,  300.,  384.,
      468.,   552.,   636.,   311.,   357.,   403.,   449.,  0.,    0.,
      409.,   447.,   485.,   523.,   1056.,  1140.,  1224., 1308., 1392.,
      1476.,  771.,   817.,   863.,   909.,   0.,     0.,    830.,  922.,
      1014.,  1106.,  2200.,  2400.,  2600.,  2800.,  3000., 3200., 1650.,
      1758.,  1866.,  1974.,  0.,     0.,     1750.,  1842., 1934., 2026.,
      4200.,  4400.,  4600.,  4800.,  5000.,  5200.,  2730., 2838., 2946.,
      3054.,  0.,     0.,     2670.,  2762.,  2854.,  2946., 6200., 6400.,
      6600.,  6800.,  7000.,  7200.,  3810.,  3918.,  4026., 4134., 0.,
      0.,     1661.,  1715.,  1769.,  1823.,  3784.,  3900., 4016., 4132.,
      4248.,  4364.,  2279.,  2341.,  2403.,  2465.,  0.,    0.,    2201.,
      2255.,  2309.,  2363.,  4944.,  5060.,  5176.,  5292., 5408., 5524.,
      2899.,  2961.,  3023.,  3085.,  0.,     0.,     0.,    0.,    0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      0.,     0.,     0.,     0.,     53.,    123.,   193.,  263.,  392.,
      540.,   688.,   836.,   984.,   1132.,  527.,   605.,  683.,  761.,
      0.,     0.,     753.,   823.,   893.,   963.,   1872., 2020., 2168.,
      2316.,  2464.,  2612.,  1307.,  1385.,  1463.,  1541., 0.,    0.,
      1518.,  1674.,  1830.,  1986.,  3832.,  4160.,  4488., 4816., 5144.,
      5472.,  2722.,  2894.,  3066.,  3238.,  0.,     0.,    3078., 3234.,
      3390.,  3546.,  7112.,  7440.,  7768.,  8096.,  8424., 8752., 4442.,
      4614.,  4786.,  4958.,  0.,     0.,     4638.,  4794., 4950., 5106.,
      10392., 10720., 11048., 11376., 11704., 12032., 6162., 6334., 6506.,
      6678.,  0.,     0.,     2645.,  2731.,  2817.,  2903., 5880., 6060.,
      6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643., 3737., 0.,
      0.,     3505.,  3591.,  3677.,  3763.,  7680.,  7860., 8040., 8220.,
      8400.,  8580.,  4395.,  4489.,  4583.,  4677.,  0.,    0.,    0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   6532.,   6932.,
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      41820.,  43180.,  87560.,  90408.,  93256.,  96104.,  145892., 150356.,
      102120., 105224., 159188., 164036., 110984., 114344., 117704., 121064.,
      13438.,  14502.,  27556.,  29748.,  31940.,  34132.,  48994.,  52378.,
      33812.,  36132.,  51802.,  55378.,  35684.,  38132.,  40580.,  43028.,
      27548.,  29932.,  56456.,  61352.,  66248.,  71144.,  101540., 109076.,
      69992.,  75144.,  107156., 115076., 73736.,  79144.,  84552.,  89960.,
      51388.,  53772.,  105416., 110312., 115208., 120104., 176900., 184436.,
      121512., 126664., 186356., 194276., 127816., 133224., 138632., 144040.,
      79370.,  83330.,  162700., 170812., 178924., 187036., 274518., 286974.,
      188380., 196876., 288702., 301734., 197836., 206716., 215596., 224476.,
      62972.,  65868.,  128584., 134504., 140424., 146344., 214724., 223796.,
      146728., 152904., 224180., 233636., 153032., 159464., 165896., 172328.,
      96746.,  101474., 197452., 207100., 216748., 226396., 331254., 346014.,
      226204., 236236., 345438., 360774., 235660., 246076., 256492., 266908.,
      74556.,  77964.,  151752., 158696., 165640., 172584., 252548., 263156.,
      171944., 179144., 262004., 272996., 178248., 185704., 193160., 200616.,
      108636., 112044., 221192., 228136., 235080., 242024., 358628., 369236.,
      243944., 251144., 371924., 382916., 252808., 260264., 267720., 275176.,
      26366.,  28454.,  53412.,  57652.,  61892.,  66132.,  93922.,  100378.,
      63764.,  68132.,  96730.,  103378., 65636.,  70132.,  74628.,  79124.,
      53404.,  57836.,  108168., 117160., 126152., 135144., 191396., 205076.,
      129896., 139144., 197012., 211076., 133640., 143144., 152648., 162152.,
      97724.,  102156., 198088., 207080., 216072., 225064., 328196., 341876.,
      222376., 231624., 337652., 351716., 228680., 238184., 247688., 257192.,
      148874., 155906., 301708., 315964., 330220., 344476., 501462., 523134.,
      339676., 354316., 515646., 537894., 349132., 364156., 379180., 394204.,
      109308., 114252., 221256., 231272., 241288., 251304., 366020., 381236.,
      247592., 257864., 375476., 391076., 253896., 264424., 274952., 285480.,
      166250., 174050., 336460., 352252., 368044., 383836., 558198., 582174.,
      377500., 393676., 572382., 596934., 386956., 403516., 420076., 436636.,
      120892., 126348., 244424., 255464., 266504., 277544., 403844., 420596.,
      272808., 284104., 413300., 430436., 279112., 290664., 302216., 313768.,
      175452., 180908., 354824., 365864., 376904., 387944., 571364., 588116.,
      385768., 397064., 584660., 601796., 394632., 406184., 417736., 429288.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   694.,   798.,   902.,   1006.,  0.,     0.,     430.,   470.,
      510.,   550.,   1700.,  1844.,  1988.,  2132.,  2276.,  2420.,  1734.,
      1838.,  1942.,  2046.,  0.,     0.,     940.,   1148.,  1356.,  1564.,
      4072.,  4616.,  5160.,  5704.,  6248.,  6792.,  4316.,  4652.,  4988.,
      5324.,  0.,     0.,     3020.,  3228.,  3436.,  3644.,  9512.,  10056.,
      10600., 11144., 11688., 12232., 7676.,  8012.,  8348.,  8684.,  0.,
      0.,     5100.,  5308.,  5516.,  5724.,  14952., 15496., 16040., 16584.,
      17128., 17672., 11036., 11372., 11708., 12044., 0.,     0.,     5150.,
      5318.,  5486.,  5654.,  12932., 13332., 13732., 14132., 14532., 14932.,
      8502.,  8734.,  8966.,  9198.,  0.,     0.,     6830.,  6998.,  7166.,
      7334.,  16932., 17332., 17732., 18132., 18532., 18932., 10822., 11054.,
      11286., 11518., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     190.,   486.,   782.,   1078.,  1604.,  2260.,  2916.,
      3572.,  4228.,  4884.,  2390.,  2750.,  3110.,  3470.,  0.,     0.,
      3150.,  3446.,  3742.,  4038.,  8164.,  8820.,  9476.,  10132., 10788.,
      11444., 5990.,  6350.,  6710.,  7070.,  0.,     0.,     6380.,  7100.,
      7820.,  8540.,  17000., 18568., 20136., 21704., 23272., 24840., 12828.,
      13676., 14524., 15372., 0.,     0.,     13580., 14300., 15020., 15740.,
      32680., 34248., 35816., 37384., 38952., 40520., 21308., 22156., 23004.,
      23852., 0.,     0.,     20780., 21500., 22220., 22940., 48360., 49928.,
      51496., 53064., 54632., 56200., 29788., 30636., 31484., 32332., 0.,
      0.,     12990., 13414., 13838., 14262., 29636., 30548., 31460., 32372.,
      33284., 34196., 17878., 18366., 18854., 19342., 0.,     0.,     17230.,
      17654., 18078., 18502., 38756., 39668., 40580., 41492., 42404., 43316.,
      22758., 23246., 23734., 24222., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     350.,   902.,   1454.,  2006.,  2948.,
      4116.,  5284.,  6452.,  7620.,  8788.,  4086.,  4702.,  5318.,  5934.,
      0.,     0.,     5870.,  6422.,  6974.,  7526.,  14628., 15796., 16964.,
      18132., 19300., 20468., 10246., 10862., 11478., 12094., 0.,     0.,
      11820., 13052., 14284., 15516., 29928., 32520., 35112., 37704., 40296.,
      42888., 21340., 22700., 24060., 25420., 0.,     0.,     24140., 25372.,
      26604., 27836., 55848., 58440., 61032., 63624., 66216., 68808., 34940.,
      36300., 37660., 39020., 0.,     0.,     36460., 37692., 38924., 40156.,
      81768., 84360., 86952., 89544., 92136., 94728., 48540., 49900., 51260.,
      52620., 0.,     0.,     20830., 21510., 22190., 22870., 46340., 47764.,
      49188., 50612., 52036., 53460., 27254., 27998., 28742., 29486., 0.,
      0.,     27630., 28310., 28990., 29670., 60580., 62004., 63428., 64852.,
      66276., 67700., 34694., 35438., 36182., 36926., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,
      86.,    89.,    92.,    158.,   164.,   170.,   176.,   141.,   146.,
      151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,
      220.,   227.,   234.,   241.,   248.,   70.,    76.,    82.,    88.,
      182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,
      448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,
      658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,
      624.,   190.,   196.,   202.,   208.,   462.,   476.,   490.,   504.,
      518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,
      732.,   750.,   768.,   1198.,  1228.,  1258.,  1288.,  910.,   932.,
      954.,   976.,   998.,   1020.,  1042.,  1064.,  355.,   370.,   385.,
      400.,   833.,   866.,   899.,   932.,   965.,   998.,   1031.,  1064.,
      1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,
      2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,
      1823.,  1868.,  550.,   564.,   578.,   592.,   1182.,  1212.,  1242.,
      1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,
      1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,
      1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,  895.,   922.,
      949.,   976.,   1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,
      2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,
      3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,
      3074.,  3143.,  3212.,  910.,   932.,   954.,   976.,   1902.,  1948.,
      1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,
      3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,
      2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  1350.,
      1372.,  1394.,  1416.,  2822.,  2868.,  2914.,  2960.,  3006.,  3052.,
      3098.,  3144.,  4696.,  4768.,  4840.,  4912.,  3282.,  3332.,  3382.,
      3432.,  5110.,  5188.,  5266.,  5344.,  3558.,  3612.,  3666.,  3720.,
      3774.,  3828.,  3882.,  3936.,  425.,   442.,   459.,   476.,   871.,
      906.,   941.,   976.,   1011.,  1046.,  1081.,  1116.,  1550.,  1604.,
      1658.,  1712.,  1069.,  1106.,  1143.,  1180.,  1637.,  1694.,  1751.,
      1808.,  1127.,  1166.,  1205.,  1244.,  1283.,  1322.,  1361.,  1400.,
      870.,   908.,   946.,   984.,   1782.,  1860.,  1938.,  2016.,  2094.,
      2172.,  2250.,  2328.,  3208.,  3328.,  3448.,  3568.,  2210.,  2292.,
      2374.,  2456.,  3382.,  3508.,  3634.,  3760.,  2326.,  2412.,  2498.,
      2584.,  2670.,  2756.,  2842.,  2928.,  1630.,  1668.,  1706.,  1744.,
      3342.,  3420.,  3498.,  3576.,  3654.,  3732.,  3810.,  3888.,  5608.,
      5728.,  5848.,  5968.,  3850.,  3932.,  4014.,  4096.,  5902.,  6028.,
      6154.,  6280.,  4046.,  4132.,  4218.,  4304.,  4390.,  4476.,  4562.,
      4648.,  2515.,  2578.,  2641.,  2704.,  5153.,  5282.,  5411.,  5540.,
      5669.,  5798.,  5927.,  6056.,  8694.,  8892.,  9090.,  9288.,  5963.,
      6098.,  6233.,  6368.,  9135.,  9342.,  9549.,  9756.,  6257.,  6398.,
      6539.,  6680.,  6821.,  6962.,  7103.,  7244.,  1990.,  2036.,  2082.,
      2128.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,
      6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,
      7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,
      5442.,  5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,
      6692.,  6845.,  6998.,  7151.,  7304.,  10458., 10692., 10926., 11160.,
      7139.,  7298.,  7457.,  7616.,  10899., 11142., 11385., 11628., 7433.,
      7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,
      2458.,  2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,
      5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,
      8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,
      6204.,  6322.,  6440.,  3430.,  3484.,  3538.,  3592.,  6982.,  7092.,
      7202.,  7312.,  7422.,  7532.,  7642.,  7752.,  11320., 11488., 11656.,
      11824., 7698.,  7812.,  7926.,  8040.,  11734., 11908., 12082., 12256.,
      7974.,  8092.,  8210.,  8328.,  8446.,  8564.,  8682.,  8800.,  825.,
      858.,   891.,   924.,   1671.,  1738.,  1805.,  1872.,  1939.,  2006.,
      2073.,  2140.,  2942.,  3044.,  3146.,  3248.,  1997.,  2066.,  2135.,
      2204.,  3029.,  3134.,  3239.,  3344.,  2055.,  2126.,  2197.,  2268.,
      2339.,  2410.,  2481.,  2552.,  1670.,  1740.,  1810.,  1880.,  3382.,
      3524.,  3666.,  3808.,  3950.,  4092.,  4234.,  4376.,  5992.,  6208.,
      6424.,  6640.,  4066.,  4212.,  4358.,  4504.,  6166.,  6388.,  6610.,
      6832.,  4182.,  4332.,  4482.,  4632.,  4782.,  4932.,  5082.,  5232.,
      3070.,  3140.,  3210.,  3280.,  6222.,  6364.,  6506.,  6648.,  6790.,
      6932.,  7074.,  7216.,  10312., 10528., 10744., 10960., 6986.,  7132.,
      7278.,  7424.,  10606., 10828., 11050., 11272., 7182.,  7332.,  7482.,
      7632.,  7782.,  7932.,  8082.,  8232.,  4675.,  4786.,  4897.,  5008.,
      9473.,  9698.,  9923.,  10148., 10373., 10598., 10823., 11048., 15750.,
      16092., 16434., 16776., 10667., 10898., 11129., 11360., 16191., 16542.,
      16893., 17244., 10961., 11198., 11435., 11672., 11909., 12146., 12383.,
      12620., 3430.,  3508.,  3586.,  3664.,  6942.,  7100.,  7258.,  7416.,
      7574.,  7732.,  7890.,  8048.,  11488., 11728., 11968., 12208., 7770.,
      7932.,  8094.,  8256.,  11782., 12028., 12274., 12520., 7966.,  8132.,
      8298.,  8464.,  8630.,  8796.,  8962.,  9128.,  5215.,  5338.,  5461.,
      5584.,  10553., 10802., 11051., 11300., 11549., 11798., 12047., 12296.,
      17514., 17892., 18270., 18648., 11843., 12098., 12353., 12608., 17955.,
      18342., 18729., 19116., 12137., 12398., 12659., 12920., 13181., 13442.,
      13703., 13964., 3790.,  3876.,  3962.,  4048.,  7662.,  7836.,  8010.,
      8184.,  8358.,  8532.,  8706.,  8880.,  12664., 12928., 13192., 13456.,
      8554.,  8732.,  8910.,  9088.,  12958., 13228., 13498., 13768., 8750.,
      8932.,  9114.,  9296.,  9478.,  9660.,  9842.,  10024., 5510.,  5596.,
      5682.,  5768.,  11142., 11316., 11490., 11664., 11838., 12012., 12186.,
      12360., 17944., 18208., 18472., 18736., 12114., 12292., 12470., 12648.,
      18358., 18628., 18898., 19168., 12390., 12572., 12754., 12936., 13118.,
      13300., 13482., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   0.,    0.,
      0.,    0.,    21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,
      101.,  104.,  66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,
      0.,    0.,    0.,    0.,    44.,   48.,   52.,   56.,   60.,   64.,
      68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,
      242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,
      194.,  200.,  0.,    0.,    0.,    0.,    124.,  128.,  132.,  136.,
      140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,
      422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,
      302.,  308.,  314.,  320.,  0.,    0.,    0.,    0.,    204.,  208.,
      212.,  216.,  220.,  224.,  228.,  232.,  562.,  572.,  582.,  592.,
      602.,  612.,  622.,  632.,  642.,  652.,  662.,  672.,  398.,  404.,
      410.,  416.,  422.,  428.,  434.,  440.,  0.,    0.,    0.,    0.,
      183.,  186.,  189.,  192.,  195.,  198.,  201.,  204.,  451.,  458.,
      465.,  472.,  479.,  486.,  493.,  500.,  507.,  514.,  521.,  528.,
      292.,  296.,  300.,  304.,  308.,  312.,  316.,  320.,  0.,    0.,
      0.,    0.,    243.,  246.,  249.,  252.,  255.,  258.,  261.,  264.,
      591.,  598.,  605.,  612.,  619.,  626.,  633.,  640.,  647.,  654.,
      661.,  668.,  372.,  376.,  380.,  384.,  388.,  392.,  396.,  400.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    5.,    10.,   15.,   20.,
      25.,   30.,   35.,   40.,   51.,   62.,   73.,   84.,   95.,   106.,
      117.,  128.,  139.,  150.,  161.,  172.,  78.,   84.,   90.,   96.,
      102.,  108.,  114.,  120.,  0.,    0.,    0.,    0.,    105.,  110.,
      115.,  120.,  125.,  130.,  135.,  140.,  271.,  282.,  293.,  304.,
      315.,  326.,  337.,  348.,  359.,  370.,  381.,  392.,  198.,  204.,
      210.,  216.,  222.,  228.,  234.,  240.,  0.,    0.,    0.,    0.,
      212.,  224.,  236.,  248.,  260.,  272.,  284.,  296.,  562.,  588.,
      614.,  640.,  666.,  692.,  718.,  744.,  770.,  796.,  822.,  848.,
      422.,  436.,  450.,  464.,  478.,  492.,  506.,  520.,  0.,    0.,
      0.,    0.,    452.,  464.,  476.,  488.,  500.,  512.,  524.,  536.,
      1082., 1108., 1134., 1160., 1186., 1212., 1238., 1264., 1290., 1316.,
      1342., 1368., 702.,  716.,  730.,  744.,  758.,  772.,  786.,  800.,
      0.,    0.,    0.,    0.,    692.,  704.,  716.,  728.,  740.,  752.,
      764.,  776.,  1602., 1628., 1654., 1680., 1706., 1732., 1758., 1784.,
      1810., 1836., 1862., 1888., 982.,  996.,  1010., 1024., 1038., 1052.,
      1066., 1080., 0.,    0.,    0.,    0.,    427.,  434.,  441.,  448.,
      455.,  462.,  469.,  476.,  971.,  986.,  1001., 1016., 1031., 1046.,
      1061., 1076., 1091., 1106., 1121., 1136., 584.,  592.,  600.,  608.,
      616.,  624.,  632.,  640.,  0.,    0.,    0.,    0.,    567.,  574.,
      581.,  588.,  595.,  602.,  609.,  616.,  1271., 1286., 1301., 1316.,
      1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436., 744.,  752.,
      760.,  768.,  776.,  784.,  792.,  800.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    9.,    18.,   27.,   36.,   45.,   54.,   63.,   72.,
      91.,   110.,  129.,  148.,  167.,  186.,  205.,  224.,  243.,  262.,
      281.,  300.,  130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,
      0.,    0.,    0.,    0.,    189.,  198.,  207.,  216.,  225.,  234.,
      243.,  252.,  471.,  490.,  509.,  528.,  547.,  566.,  585.,  604.,
      623.,  642.,  661.,  680.,  330.,  340.,  350.,  360.,  370.,  380.,
      390.,  400.,  0.,    0.,    0.,    0.,    380.,  400.,  420.,  440.,
      460.,  480.,  500.,  520.,  962.,  1004., 1046., 1088., 1130., 1172.,
      1214., 1256., 1298., 1340., 1382., 1424., 686.,  708.,  730.,  752.,
      774.,  796.,  818.,  840.,  0.,    0.,    0.,    0.,    780.,  800.,
      820.,  840.,  860.,  880.,  900.,  920.,  1802., 1844., 1886., 1928.,
      1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264., 1126., 1148.,
      1170., 1192., 1214., 1236., 1258., 1280., 0.,    0.,    0.,    0.,
      1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684.,
      2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104.,
      1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720., 0.,    0.,
      0.,    0.,    671.,  682.,  693.,  704.,  715.,  726.,  737.,  748.,
      1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652., 1675., 1698.,
      1721., 1744., 876.,  888.,  900.,  912.,  924.,  936.,  948.,  960.,
      0.,    0.,    0.,    0.,    891.,  902.,  913.,  924.,  935.,  946.,
      957.,  968.,  1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112.,
      2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176.,
      1188., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,   155.,   161.,    167.,    464.,    484.,    504.,    524.,
      544.,   564.,   584.,    604.,    1081.,   1123.,   1165.,   1207.,
      1004.,  1040.,  1076.,   1112.,   1771.,   1837.,   1903.,   1969.,
      1464.,  1516.,  1568.,   1620.,   1672.,   1724.,   1776.,   1828.,
      450.,   494.,   538.,    582.,    1232.,   1336.,   1440.,   1544.,
      1648.,  1752.,  1856.,   1960.,   3002.,   3182.,   3362.,   3542.,
      2568.,  2704.,  2840.,   2976.,   4382.,   4610.,   4838.,   5066.,
      3488.,  3656.,  3824.,   3992.,   4160.,   4328.,   4496.,   4664.,
      1330.,  1374.,  1418.,   1462.,   3312.,   3416.,   3520.,   3624.,
      3728.,  3832.,  3936.,   4040.,   6602.,   6782.,   6962.,   7142.,
      5288.,  5424.,  5560.,   5696.,   8942.,   9170.,   9398.,   9626.,
      6848.,  7016.,  7184.,   7352.,   7520.,   7688.,   7856.,   8024.,
      2543.,  2657.,  2771.,   2885.,   6064.,   6316.,   6568.,   6820.,
      7072.,  7324.,  7576.,   7828.,   12123.,  12537.,  12951.,  13365.,
      9412.,  9712.,  10012.,  10312.,  15633.,  16119.,  16605.,  17091.,
      11752., 12100., 12448.,  12796.,  13144.,  13492.,  13840.,  14188.,
      4194.,  4302.,  4410.,   4518.,   9040.,   9272.,   9504.,   9736.,
      9968.,  10200., 10432.,  10664.,  15962.,  16334.,  16706.,  17078.,
      11528., 11792., 12056.,  12320.,  18302.,  18722.,  19142.,  19562.,
      13088., 13384., 13680.,  13976.,  14272.,  14568.,  14864.,  15160.,
      6839.,  7049.,  7259.,   7469.,   14656.,  15100.,  15544.,  15988.,
      16432., 16876., 17320.,  17764.,  26163.,  26865.,  27567.,  28269.,
      18772., 19264., 19756.,  20248.,  29673.,  30447.,  31221.,  31995.,
      21112., 21652., 22192.,  22732.,  23272.,  23812.,  24352.,  24892.,
      7058.,  7230.,  7402.,   7574.,   14768.,  15128.,  15488.,  15848.,
      16208., 16568., 16928.,  17288.,  25322.,  25886.,  26450.,  27014.,
      17768., 18160., 18552.,  18944.,  27662.,  28274.,  28886.,  29498.,
      19328., 19752., 20176.,  20600.,  21024.,  21448.,  21872.,  22296.,
      10498., 10670., 10842.,  11014.,  21968.,  22328.,  22688.,  23048.,
      23408., 23768., 24128.,  24488.,  36602.,  37166.,  37730.,  38294.,
      25608., 26000., 26392.,  26784.,  39902.,  40514.,  41126.,  41738.,
      27808., 28232., 28656.,  29080.,  29504.,  29928.,  30352.,  30776.,
      3317.,  3451.,  3585.,   3719.,   6800.,   7076.,   7352.,   7628.,
      7904.,  8180.,  8456.,   8732.,   12121.,  12547.,  12973.,  13399.,
      8364.,  8656.,  8948.,   9240.,   12811.,  13261.,  13711.,  14161.,
      8824.,  9132.,  9440.,   9748.,   10056.,  10364.,  10672.,  10980.,
      6786.,  7086.,  7386.,   7686.,   13904.,  14520.,  15136.,  15752.,
      16368., 16984., 17600.,  18216.,  25082.,  26030.,  26978.,  27926.,
      17288., 17936., 18584.,  19232.,  26462.,  27458.,  28454.,  29450.,
      18208., 18888., 19568.,  20248.,  20928.,  21608.,  22288.,  22968.,
      12786., 13086., 13386.,  13686.,  26224.,  26840.,  27456.,  28072.,
      28688., 29304., 29920.,  30536.,  44042.,  44990.,  45938.,  46886.,
      30248., 30896., 31544.,  32192.,  46382.,  47378.,  48374.,  49370.,
      31808., 32488., 33168.,  33848.,  34528.,  35208.,  35888.,  36568.,
      19727., 20225., 20723.,  21221.,  40432.,  41452.,  42472.,  43492.,
      44512., 45532., 46552.,  47572.,  68283.,  69849.,  71415.,  72981.,
      46852., 47920., 48988.,  50056.,  71793.,  73431.,  75069.,  76707.,
      49192., 50308., 51424.,  52540.,  53656.,  54772.,  55888.,  57004.,
      15650., 16014., 16378.,  16742.,  31952.,  32696.,  33440.,  34184.,
      34928., 35672., 36416.,  37160.,  53402.,  54542.,  55682.,  56822.,
      36488., 37264., 38040.,  38816.,  55742.,  56930.,  58118.,  59306.,
      38048., 38856., 39664.,  40472.,  41280.,  42088.,  42896.,  43704.,
      24023., 24617., 25211.,  25805.,  49024.,  50236.,  51448.,  52660.,
      53872., 55084., 56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212., 57472., 58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552., 59860., 61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      18514., 18942., 19370.,  19798.,  37680.,  38552.,  39424.,  40296.,
      41168., 42040., 42912.,  43784.,  62762.,  64094.,  65426.,  66758.,
      42728., 43632., 44536.,  45440.,  65102.,  66482.,  67862.,  69242.,
      44288., 45224., 46160.,  47096.,  48032.,  48968.,  49904.,  50840.,
      27074., 27502., 27930.,  28358.,  55120.,  55992.,  56864.,  57736.,
      58608., 59480., 60352.,  61224.,  89402.,  90734.,  92066.,  93398.,
      60808., 61712., 62616.,  63520.,  92702.,  94082.,  95462.,  96842.,
      63008., 63944., 64880.,  65816.,  66752.,  67688.,  68624.,  69560.,
      6485.,  6747.,  7009.,   7271.,   13136.,  13668.,  14200.,  14732.,
      15264., 15796., 16328.,  16860.,  23161.,  23971.,  24781.,  25591.,
      15724., 16272., 16820.,  17368.,  23851.,  24685.,  25519.,  26353.,
      16184., 16748., 17312.,  17876.,  18440.,  19004.,  19568.,  20132.,
      13122., 13678., 14234.,  14790.,  26576.,  27704.,  28832.,  29960.,
      31088., 32216., 33344.,  34472.,  47162.,  48878.,  50594.,  52310.,
      32008., 33168., 34328.,  35488.,  48542.,  50306.,  52070.,  53834.,
      32928., 34120., 35312.,  36504.,  37696.,  38888.,  40080.,  41272.,
      24242., 24798., 25354.,  25910.,  49136.,  50264.,  51392.,  52520.,
      53648., 54776., 55904.,  57032.,  81482.,  83198.,  84914.,  86630.,
      55208., 56368., 57528.,  58688.,  83822.,  85586.,  87350.,  89114.,
      56768., 57960., 59152.,  60344.,  61536.,  62728.,  63920.,  65112.,
      36911., 37793., 38675.,  39557.,  74800.,  76588.,  78376.,  80164.,
      81952., 83740., 85528.,  87316.,  124443., 127161., 129879., 132597.,
      84292., 86128., 87964.,  89800.,  127953., 130743., 133533., 136323.,
      86632., 88516., 90400.,  92284.,  94168.,  96052.,  97936.,  99820.,
      27106., 27726., 28346.,  28966.,  54864.,  56120.,  57376.,  58632.,
      59888., 61144., 62400.,  63656.,  90842.,  92750.,  94658.,  96566.,
      61448., 62736., 64024.,  65312.,  93182.,  95138.,  97094.,  99050.,
      63008., 64328., 65648.,  66968.,  68288.,  69608.,  70928.,  72248.,
      41207., 42185., 43163.,  44141.,  83392.,  85372.,  87352.,  89332.,
      91312., 93292., 95272.,  97252.,  138483., 141489., 144495., 147501.,
      93652., 95680., 97708.,  99736.,  141993., 145071., 148149., 151227.,
      95992., 98068., 100144., 102220., 104296., 106372., 108448., 110524.,
      29970., 30654., 31338.,  32022.,  60592.,  61976.,  63360.,  64744.,
      66128., 67512., 68896.,  70280.,  100202., 102302., 104402., 106502.,
      67688., 69104., 70520.,  71936.,  102542., 104690., 106838., 108986.,
      69248., 70696., 72144.,  73592.,  75040.,  76488.,  77936.,  79384.,
      43650., 44334., 45018.,  45702.,  88272.,  89656.,  91040.,  92424.,
      93808., 95192., 96576.,  97960.,  142202., 144302., 146402., 148502.,
      96008., 97424., 98840.,  100256., 145502., 147650., 149798., 151946.,
      98208., 99656., 101104., 102552., 104000., 105448., 106896., 108344.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,
      487.,   501.,   515.,   529.,   543.,   557.,   0.,     0.,     0.,
      0.,     262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,
      1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,
      1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,
      1386.,  1430.,  0.,     0.,     0.,     0.,     822.,   850.,   878.,
      906.,   934.,   962.,   990.,   1018.,  2520.,  2592.,  2664.,  2736.,
      2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,
      2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,  0.,     0.,
      0.,     0.,     1382.,  1410.,  1438.,  1466.,  1494.,  1522.,  1550.,
      1578.,  3960.,  4032.,  4104.,  4176.,  4248.,  4320.,  4392.,  4464.,
      4536.,  4608.,  4680.,  4752.,  2882.,  2926.,  2970.,  3014.,  3058.,
      3102.,  3146.,  3190.,  0.,     0.,     0.,     0.,     1337.,  1359.,
      1381.,  1403.,  1425.,  1447.,  1469.,  1491.,  3336.,  3388.,  3440.,
      3492.,  3544.,  3596.,  3648.,  3700.,  3752.,  3804.,  3856.,  3908.,
      2183.,  2213.,  2243.,  2273.,  2303.,  2333.,  2363.,  2393.,  0.,
      0.,     0.,     0.,     1777.,  1799.,  1821.,  1843.,  1865.,  1887.,
      1909.,  1931.,  4376.,  4428.,  4480.,  4532.,  4584.,  4636.,  4688.,
      4740.,  4792.,  4844.,  4896.,  4948.,  2783.,  2813.,  2843.,  2873.,
      2903.,  2933.,  2963.,  2993.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     29.,    67.,    105.,   143.,   181.,
      219.,   257.,   295.,   368.,   452.,   536.,   620.,   704.,   788.,
      872.,   956.,   1040.,  1124.,  1208.,  1292.,  587.,   633.,   679.,
      725.,   771.,   817.,   863.,   909.,   0.,     0.,     0.,     0.,
      789.,   827.,   865.,   903.,   941.,   979.,   1017.,  1055.,  2048.,
      2132.,  2216.,  2300.,  2384.,  2468.,  2552.,  2636.,  2720.,  2804.,
      2888.,  2972.,  1507.,  1553.,  1599.,  1645.,  1691.,  1737.,  1783.,
      1829.,  0.,     0.,     0.,     0.,     1590.,  1682.,  1774.,  1866.,
      1958.,  2050.,  2142.,  2234.,  4248.,  4448.,  4648.,  4848.,  5048.,
      5248.,  5448.,  5648.,  5848.,  6048.,  6248.,  6448.,  3218.,  3326.,
      3434.,  3542.,  3650.,  3758.,  3866.,  3974.,  0.,     0.,     0.,
      0.,     3430.,  3522.,  3614.,  3706.,  3798.,  3890.,  3982.,  4074.,
      8248.,  8448.,  8648.,  8848.,  9048.,  9248.,  9448.,  9648.,  9848.,
      10048., 10248., 10448., 5378.,  5486.,  5594.,  5702.,  5810.,  5918.,
      6026.,  6134.,  0.,     0.,     0.,     0.,     5270.,  5362.,  5454.,
      5546.,  5638.,  5730.,  5822.,  5914.,  12248., 12448., 12648., 12848.,
      13048., 13248., 13448., 13648., 13848., 14048., 14248., 14448., 7538.,
      7646.,  7754.,  7862.,  7970.,  8078.,  8186.,  8294.,  0.,     0.,
      0.,     0.,     3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,
      3659.,  7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,
      8408.,  8524.,  8640.,  8756.,  4511.,  4573.,  4635.,  4697.,  4759.,
      4821.,  4883.,  4945.,  0.,     0.,     0.,     0.,     4361.,  4415.,
      4469.,  4523.,  4577.,  4631.,  4685.,  4739.,  9800.,  9916.,  10032.,
      10148., 10264., 10380., 10496., 10612., 10728., 10844., 10960., 11076.,
      5751.,  5813.,  5875.,  5937.,  5999.,  6061.,  6123.,  6185.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     53.,
      123.,   193.,   263.,   333.,   403.,   473.,   543.,   672.,   820.,
      968.,   1116.,  1264.,  1412.,  1560.,  1708.,  1856.,  2004.,  2152.,
      2300.,  995.,   1073.,  1151.,  1229.,  1307.,  1385.,  1463.,  1541.,
      0.,     0.,     0.,     0.,     1453.,  1523.,  1593.,  1663.,  1733.,
      1803.,  1873.,  1943.,  3632.,  3780.,  3928.,  4076.,  4224.,  4372.,
      4520.,  4668.,  4816.,  4964.,  5112.,  5260.,  2555.,  2633.,  2711.,
      2789.,  2867.,  2945.,  3023.,  3101.,  0.,     0.,     0.,     0.,
      2918.,  3074.,  3230.,  3386.,  3542.,  3698.,  3854.,  4010.,  7416.,
      7744.,  8072.,  8400.,  8728.,  9056.,  9384.,  9712.,  10040., 10368.,
      10696., 11024., 5314.,  5486.,  5658.,  5830.,  6002.,  6174.,  6346.,
      6518.,  0.,     0.,     0.,     0.,     6038.,  6194.,  6350.,  6506.,
      6662.,  6818.,  6974.,  7130.,  13976., 14304., 14632., 14960., 15288.,
      15616., 15944., 16272., 16600., 16928., 17256., 17584., 8754.,  8926.,
      9098.,  9270.,  9442.,  9614.,  9786.,  9958.,  0.,     0.,     0.,
      0.,     9158.,  9314.,  9470.,  9626.,  9782.,  9938.,  10094., 10250.,
      20536., 20864., 21192., 21520., 21848., 22176., 22504., 22832., 23160.,
      23488., 23816., 24144., 12194., 12366., 12538., 12710., 12882., 13054.,
      13226., 13398., 0.,     0.,     0.,     0.,     5225.,  5311.,  5397.,
      5483.,  5569.,  5655.,  5741.,  5827.,  11624., 11804., 11984., 12164.,
      12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604., 6839.,
      6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,  0.,     0.,
      0.,     0.,     6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,
      7547.,  15224., 15404., 15584., 15764., 15944., 16124., 16304., 16484.,
      16664., 16844., 17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,
      9189.,  9283.,  9377.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     1030.,    1070.,    1110.,    3300.,   3444.,    3588.,
      3732.,    3876.,    4020.,    4164.,    4308.,   7922.,    8234.,
      8546.,    8858.,    7540.,    7812.,    8084.,   8356.,    13418.,
      13922.,   14426.,   14930.,   11204.,   11604.,  12004.,   12404.,
      12804.,   13204.,   13604.,   14004.,   3164.,   3500.,    3836.,
      4172.,    8968.,    9768.,    10568.,   11368.,  12168.,   12968.,
      13768.,   14568.,   22468.,   23860.,   25252.,  26644.,   19496.,
      20552.,   21608.,   22664.,   33460.,   35236.,  37012.,   38788.,
      26824.,   28136.,   29448.,   30760.,   32072.,  33384.,   34696.,
      36008.,   9884.,    10220.,   10556.,   10892.,  24968.,   25768.,
      26568.,   27368.,   28168.,   28968.,   29768.,  30568.,   50308.,
      51700.,   53092.,   54484.,   40616.,   41672.,  42728.,   43784.,
      68980.,   70756.,   72532.,   74308.,   53064.,  54376.,   55688.,
      57000.,   58312.,   59624.,   60936.,   62248.,  19162.,   20050.,
      20938.,   21826.,   46124.,   48092.,   50060.,  52028.,   53996.,
      55964.,   57932.,   59900.,   93078.,   96318.,  99558.,   102798.,
      72668.,   75020.,   77372.,   79724.,   121086., 124902.,  128718.,
      132534.,  91340.,   94076.,   96812.,   99548.,  102284.,  105020.,
      107756.,  110492.,  32732.,   33580.,   34428.,  35276.,   70664.,
      72488.,   74312.,   76136.,   77960.,   79784.,  81608.,   83432.,
      124996.,  127924.,  130852.,  133780.,  90408.,  92488.,   94568.,
      96648.,   143668.,  146980.,  150292.,  153604., 102856.,  105192.,
      107528.,  109864.,  112200.,  114536.,  116872., 119208.,  53434.,
      55090.,   56746.,   58402.,   114668.,  118172., 121676.,  125180.,
      128684.,  132188.,  135692.,  139196.,  205110., 210654.,  216198.,
      221742.,  147356.,  151244.,  155132.,  159020., 233118.,  239238.,
      245358.,  251478.,  166028.,  170300.,  174572., 178844.,  183116.,
      187388.,  191660.,  195932.,  55580.,   56940.,  58300.,   59660.,
      116360.,  119208.,  122056.,  124904.,  127752., 130600.,  133448.,
      136296.,  199684.,  204148.,  208612.,  213076., 140200.,  143304.,
      146408.,  149512.,  218356.,  223204.,  228052., 232900.,  152648.,
      156008.,  159368.,  162728.,  166088.,  169448., 172808.,  176168.,
      82780.,   84140.,   85500.,   86860.,   173320., 176168.,  179016.,
      181864.,  184712.,  187560.,  190408.,  193256., 288964.,  293428.,
      297892.,  302356.,  202280.,  205384.,  208488., 211592.,  315316.,
      320164.,  325012.,  329860.,  219848.,  223208., 226568.,  229928.,
      233288.,  236648.,  240008.,  243368.,  26206.,  27270.,   28334.,
      29398.,   53732.,   55924.,   58116.,   60308.,  62500.,   64692.,
      66884.,   69076.,   95858.,   99242.,   102626., 106010.,  66164.,
      68484.,   70804.,   73124.,   101354.,  104930., 108506.,  112082.,
      69828.,   72276.,   74724.,   77172.,   79620.,  82068.,   84516.,
      86964.,   53596.,   55980.,   58364.,   60748.,  109832.,  114728.,
      119624.,  124520.,  129416.,  134312.,  139208., 144104.,  198340.,
      205876.,  213412.,  220948.,  136744.,  141896., 147048.,  152200.,
      209332.,  217252.,  225172.,  233092.,  144072., 149480.,  154888.,
      160296.,  165704.,  171112.,  176520.,  181928., 101276.,  103660.,
      106044.,  108428.,  207752.,  212648.,  217544., 222440.,  227336.,
      232232.,  237128.,  242024.,  349060.,  356596., 364132.,  371668.,
      239784.,  244936.,  250088.,  255240.,  367732., 375652.,  383572.,
      391492.,  252232.,  257640.,  263048.,  268456., 273864.,  279272.,
      284680.,  290088.,  156250.,  160210.,  164170., 168130.,  320300.,
      328412.,  336524.,  344636.,  352748.,  360860., 368972.,  377084.,
      541206.,  553662.,  566118.,  578574.,  371420., 379916.,  388412.,
      396908.,  569214.,  582246.,  595278.,  608310., 390092.,  398972.,
      407852.,  416732.,  425612.,  434492.,  443372., 452252.,  124124.,
      127020.,  129916.,  132812.,  253448.,  259368., 265288.,  271208.,
      277128.,  283048.,  288968.,  294888.,  423748., 432820.,  441892.,
      450964.,  289576.,  295752.,  301928.,  308104., 442420.,  451876.,
      461332.,  470788.,  302024.,  308456.,  314888., 321320.,  327752.,
      334184.,  340616.,  347048.,  190522.,  195250., 199978.,  204706.,
      388844.,  398492.,  408140.,  417788.,  427436., 437084.,  446732.,
      456380.,  653238.,  667998.,  682758.,  697518., 446108.,  456140.,
      466172.,  476204.,  681246.,  696582.,  711918., 727254.,  464780.,
      475196.,  485612.,  496028.,  506444.,  516860., 527276.,  537692.,
      146972.,  150380.,  153788.,  157196.,  299144., 306088.,  313032.,
      319976.,  326920.,  333864.,  340808.,  347752., 498436.,  509044.,
      519652.,  530260.,  339368.,  346568.,  353768., 360968.,  517108.,
      528100.,  539092.,  550084.,  351816.,  359272., 366728.,  374184.,
      381640.,  389096.,  396552.,  404008.,  215132., 218540.,  221948.,
      225356.,  438024.,  444968.,  451912.,  458856., 465800.,  472744.,
      479688.,  486632.,  710596.,  721204.,  731812., 742420.,  483368.,
      490568.,  497768.,  504968.,  736948.,  747940., 758932.,  769924.,
      500936.,  508392.,  515848.,  523304.,  530760., 538216.,  545672.,
      553128.,  51422.,   53510.,   55598.,   57686.,  104164.,  108404.,
      112644.,  116884.,  121124.,  125364.,  129604., 133844.,  183794.,
      190250.,  196706.,  203162.,  124788.,  129156., 133524.,  137892.,
      189290.,  195938.,  202586.,  209234.,  128452., 132948.,  137444.,
      141940.,  146436.,  150932.,  155428.,  159924., 104028.,  108460.,
      112892.,  117324.,  210696.,  219688.,  228680., 237672.,  246664.,
      255656.,  264648.,  273640.,  374212.,  387892., 401572.,  415252.,
      253992.,  263240.,  272488.,  281736.,  385204., 399268.,  413332.,
      427396.,  261320.,  270824.,  280328.,  289832., 299336.,  308840.,
      318344.,  327848.,  192668.,  197100.,  201532., 205964.,  390536.,
      399528.,  408520.,  417512.,  426504.,  435496., 444488.,  453480.,
      647812.,  661492.,  675172.,  688852.,  438952., 448200.,  457448.,
      466696.,  666484.,  680548.,  694612.,  708676., 451400.,  460904.,
      470408.,  479912.,  489416.,  498920.,  508424., 517928.,  293338.,
      300370.,  307402.,  314434.,  594476.,  608732., 622988.,  637244.,
      651500.,  665756.,  680012.,  694268.,  989334., 1011006., 1032678.,
      1054350., 670172.,  684812.,  699452.,  714092., 1017342., 1039590.,
      1061838., 1084086., 688844.,  703868.,  718892., 733916.,  748940.,
      763964.,  778988.,  794012.,  215516.,  220460., 225404.,  230348.,
      436232.,  446248.,  456264.,  466280.,  476296., 486312.,  496328.,
      506344.,  722500.,  737716.,  752932.,  768148., 488744.,  499016.,
      509288.,  519560.,  741172.,  756772.,  772372., 787972.,  501192.,
      511720.,  522248.,  532776.,  543304.,  553832., 564360.,  574888.,
      327610.,  335410.,  343210.,  351010.,  663020., 678812.,  694604.,
      710396.,  726188.,  741980.,  757772.,  773564., 1101366., 1125342.,
      1149318., 1173294., 744860.,  761036.,  777212., 793388.,  1129374.,
      1153926., 1178478., 1203030., 763532.,  780092., 796652.,  813212.,
      829772.,  846332.,  862892.,  879452.,  238364., 243820.,  249276.,
      254732.,  481928.,  492968.,  504008.,  515048., 526088.,  537128.,
      548168.,  559208.,  797188.,  813940.,  830692., 847444.,  538536.,
      549832.,  561128.,  572424.,  815860.,  832996., 850132.,  867268.,
      550984.,  562536.,  574088.,  585640.,  597192., 608744.,  620296.,
      631848.,  347484.,  352940.,  358396.,  363852., 702728.,  713768.,
      724808.,  735848.,  746888.,  757928.,  768968., 780008.,  1132228.,
      1148980., 1165732., 1182484., 764456.,  775752., 787048.,  798344.,
      1158580., 1175716., 1192852., 1209988., 782024., 793576.,  805128.,
      816680.,  828232.,  839784.,  851336.,  862888.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      4452.,   4596.,   4740.,   4884.,   3398.,   3502.,   3606.,   3710.,
      3814.,   3918.,   4022.,   4126.,   0.,      0.,      0.,      0.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  0.,      0.,      0.,      0.,
      5900.,   6108.,   6316.,   6524.,   6732.,   6940.,   7148.,   7356.,
      18664.,  19208.,  19752.,  20296.,  20840.,  21384.,  21928.,  22472.,
      23016.,  23560.,  24104.,  24648.,  15132.,  15468.,  15804.,  16140.,
      16476.,  16812.,  17148.,  17484.,  0.,      0.,      0.,      0.,
      10060.,  10268.,  10476.,  10684.,  10892.,  11100.,  11308.,  11516.,
      29544.,  30088.,  30632.,  31176.,  31720.,  32264.,  32808.,  33352.,
      33896.,  34440.,  34984.,  35528.,  21852.,  22188.,  22524.,  22860.,
      23196.,  23532.,  23868.,  24204.,  0.,      0.,      0.,      0.,
      10190.,  10358.,  10526.,  10694.,  10862.,  11030.,  11198.,  11366.,
      25604.,  26004.,  26404.,  26804.,  27204.,  27604.,  28004.,  28404.,
      28804.,  29204.,  29604.,  30004.,  16854.,  17086.,  17318.,  17550.,
      17782.,  18014.,  18246.,  18478.,  0.,      0.,      0.,      0.,
      13550.,  13718.,  13886.,  14054.,  14222.,  14390.,  14558.,  14726.,
      33604.,  34004.,  34404.,  34804.,  35204.,  35604.,  36004.,  36404.,
      36804.,  37204.,  37604.,  38004.,  21494.,  21726.,  21958.,  22190.,
      22422.,  22654.,  22886.,  23118.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      190.,    486.,    782.,    1078.,   1374.,   1670.,   1966.,   2262.,
      2788.,   3444.,   4100.,   4756.,   5412.,   6068.,   6724.,   7380.,
      8036.,   8692.,   9348.,   10004.,  4550.,   4910.,   5270.,   5630.,
      5990.,   6350.,   6710.,   7070.,   0.,      0.,      0.,      0.,
      6110.,   6406.,   6702.,   6998.,   7294.,   7590.,   7886.,   8182.,
      15908.,  16564.,  17220.,  17876.,  18532.,  19188.,  19844.,  20500.,
      21156.,  21812.,  22468.,  23124.,  11750.,  12110.,  12470.,  12830.,
      13190.,  13550.,  13910.,  14270.,  0.,      0.,      0.,      0.,
      12300.,  13020.,  13740.,  14460.,  15180.,  15900.,  16620.,  17340.,
      33000.,  34568.,  36136.,  37704.,  39272.,  40840.,  42408.,  43976.,
      45544.,  47112.,  48680.,  50248.,  25116.,  25964.,  26812.,  27660.,
      28508.,  29356.,  30204.,  31052.,  0.,      0.,      0.,      0.,
      26700.,  27420.,  28140.,  28860.,  29580.,  30300.,  31020.,  31740.,
      64360.,  65928.,  67496.,  69064.,  70632.,  72200.,  73768.,  75336.,
      76904.,  78472.,  80040.,  81608.,  42076.,  42924.,  43772.,  44620.,
      45468.,  46316.,  47164.,  48012.,  0.,      0.,      0.,      0.,
      41100.,  41820.,  42540.,  43260.,  43980.,  44700.,  45420.,  46140.,
      95720.,  97288.,  98856.,  100424., 101992., 103560., 105128., 106696.,
      108264., 109832., 111400., 112968., 59036.,  59884.,  60732.,  61580.,
      62428.,  63276.,  64124.,  64972.,  0.,      0.,      0.,      0.,
      25710.,  26134.,  26558.,  26982.,  27406.,  27830.,  28254.,  28678.,
      58692.,  59604.,  60516.,  61428.,  62340.,  63252.,  64164.,  65076.,
      65988.,  66900.,  67812.,  68724.,  35446.,  35934.,  36422.,  36910.,
      37398.,  37886.,  38374.,  38862.,  0.,      0.,      0.,      0.,
      34190.,  34614.,  35038.,  35462.,  35886.,  36310.,  36734.,  37158.,
      76932.,  77844.,  78756.,  79668.,  80580.,  81492.,  82404.,  83316.,
      84228.,  85140.,  86052.,  86964.,  45206.,  45694.,  46182.,  46670.,
      47158.,  47646.,  48134.,  48622.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      350.,    902.,    1454.,   2006.,   2558.,   3110.,   3662.,   4214.,
      5156.,   6324.,   7492.,   8660.,   9828.,   10996.,  12164.,  13332.,
      14500.,  15668.,  16836.,  18004.,  7782.,   8398.,   9014.,   9630.,
      10246.,  10862.,  11478.,  12094.,  0.,      0.,      0.,      0.,
      11390.,  11942.,  12494.,  13046.,  13598.,  14150.,  14702.,  15254.,
      28516.,  29684.,  30852.,  32020.,  33188.,  34356.,  35524.,  36692.,
      37860.,  39028.,  40196.,  41364.,  20102.,  20718.,  21334.,  21950.,
      22566.,  23182.,  23798.,  24414.,  0.,      0.,      0.,      0.,
      22860.,  24092.,  25324.,  26556.,  27788.,  29020.,  30252.,  31484.,
      58216.,  60808.,  63400.,  65992.,  68584.,  71176.,  73768.,  76360.,
      78952.,  81544.,  84136.,  86728.,  41820.,  43180.,  44540.,  45900.,
      47260.,  48620.,  49980.,  51340.,  0.,      0.,      0.,      0.,
      47500.,  48732.,  49964.,  51196.,  52428.,  53660.,  54892.,  56124.,
      110056., 112648., 115240., 117832., 120424., 123016., 125608., 128200.,
      130792., 133384., 135976., 138568., 69020.,  70380.,  71740.,  73100.,
      74460.,  75820.,  77180.,  78540.,  0.,      0.,      0.,      0.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 0.,      0.,      0.,      0.,
      41230.,  41910.,  42590.,  43270.,  43950.,  44630.,  45310.,  45990.,
      91780.,  93204.,  94628.,  96052.,  97476.,  98900.,  100324., 101748.,
      103172., 104596., 106020., 107444., 54038.,  54782.,  55526.,  56270.,
      57014.,  57758.,  58502.,  59246.,  0.,      0.,      0.,      0.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  572.,  391.,  440.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  1052., 711.,  800.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,   14.,   19.,   12.,   15.,   0.,   6.,
      7.,   20.,  23.,  44.,  39.,   44.,   27.,   30.,   0.,    15.,  20.,
      52.,  64.,  115., 96.,  112.,  66.,   75.,   0.,    40.,   45.,  112.,
      124., 220., 176., 192., 111.,  120.,  0.,    65.,   70.,   172., 184.,
      325., 256., 272., 156., 165.,  0.,    64.,   68.,   152.,  161., 266.,
      197., 208., 114., 120., 0.,    84.,   88.,   197.,  206.,  341., 252.,
      263., 144., 150., 0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   7.,   14.,   29.,   44.,   68.,   50.,   67.,  36.,
      45.,  0.,   42.,  49.,  104.,  119.,  188.,  135.,  152.,  81.,  90.,
      0.,   87.,  104., 220., 256.,  403.,  288.,  328.,  174.,  195., 0.,
      172., 189., 400., 436., 688.,  488.,  528.,  279.,  300.,  0.,   257.,
      274., 580., 616., 973., 688.,  728.,  384.,  405.,  0.,    160., 170.,
      356., 377., 590., 413., 436.,  228.,  240.,  0.,    210.,  220., 461.,
      482., 755., 528., 551., 288.,  300.,  0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    13.,   26.,   53.,   80.,  122.,
      86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,  332., 231.,
      260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,  480., 544.,
      282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,  864., 447.,
      480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,
      0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,  360., 0.,
      336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,  0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,
      7396.,  11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  4387.,  3000.,  3388.,
      2312.,  4716.,  5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,
      7076.,  4172.,  8516.,  9276.,  14180., 9684.,  14792., 10092., 15404.,
      10500., 11356., 6463.,  13184., 14444., 22065., 15056., 22983., 15668.,
      23901., 16280., 17684., 5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 8712.,  17676., 18756.,
      28520., 19324., 29372., 19892., 30224., 20460., 21636., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  8107.,  5480.,  6188.,  4472.,
      9036.,  10436., 15800., 10684., 16172., 10932., 16544., 11180., 12676.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 12103., 24464., 26684., 40425., 27296., 41343., 27908., 42261.,
      28520., 30884., 8872.,  17916., 19476., 29480., 19884., 30092., 20292.,
      30704., 20700., 22356., 13513., 27284., 29744., 45015., 30356., 45933.,
      30968., 46851., 31580., 34184., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14072., 28396., 30116., 45560.,
      30684., 46412., 31252., 47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   5066.,
      3972.,   4500.,   1060.,   2840.,   3768.,   6796.,   5720.,   9724.,
      7672.,   12652.,  9624.,   11320.,  3060.,   7480.,   8408.,   14716.,
      11640.,  19564.,  14872.,  24412.,  18104.,  19800.,  6170.,   14380.,
      16732.,  28254.,  21580.,  35526.,  26428.,  42798.,  31276.,  34780.,
      10500.,  22360.,  24568.,  38956.,  27800.,  43804.,  31032.,  48652.,
      34264.,  37240.,  17330.,  36700.,  40972.,  64614.,  45820.,  71886.,
      50668.,  79158.,  55516.,  60940.,  17940.,  37240.,  40728.,  63196.,
      43960.,  68044.,  47192.,  72892.,  50424.,  54680.,  26340.,  54680.,
      58168.,  90316.,  62680.,  97084.,  67192.,  103852., 71704.,  75960.,
      8750.,   17860.,  20564.,  31418.,  21540.,  32882.,  22516.,  34346.,
      23492.,  26580.,  18020.,  36760.,  42808.,  65356.,  44760.,  68284.,
      46712.,  71212.,  48664.,  55480.,  32820.,  67000.,  73048.,  111676.,
      76280.,  116524., 79512.,  121372., 82744.,  89560.,  50810.,  103660.,
      113692., 173694., 118540., 180966., 123388., 188238., 128236., 139420.,
      40260.,  81880.,  89208.,  135916., 92440.,  140764., 95672.,  145612.,
      98904.,  107000., 61970.,  125980., 137932., 210054., 142780., 217326.,
      147628., 224598., 152476., 165580., 47700.,  96760.,  105368., 160156.,
      108600., 165004., 111832., 169852., 115064., 124440., 68900.,  139800.,
      148408., 225676., 152920., 232444., 157432., 239212., 161944., 171320.,
      17230.,  34820.,  40084.,  60698.,  41060.,  62162.,  42036.,  63626.,
      43012.,  48660.,  34980.,  70680.,  81848.,  123916., 83800.,  126844.,
      85752.,  129772., 87704.,  99640.,  62580.,  126520., 137688., 208636.,
      140920., 213484., 144152., 218332., 147384., 159320., 95450.,  192940.,
      210652., 319134., 215500., 326406., 220348., 333678., 225196., 244060.,
      70020.,  141400., 153848., 232876., 157080., 237724., 160312., 242572.,
      163544., 176760., 106610., 215260., 234892., 355494., 239740., 362766.,
      244588., 370038., 249436., 270220., 77460.,  156280., 170008., 257116.,
      173240., 261964., 176472., 266812., 179704., 194200., 111460., 224920.,
      238648., 361036., 243160., 367804., 247672., 374572., 252184., 266680.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  2212.,  5784.,  6456.,  11788., 9688.,
      10616., 6244.,  6772.,  0.,     3300.,  3572.,  9144.,  9816.,  17788.,
      14328., 15256., 8884.,  9412.,  0.,     3630.,  3862.,  8724.,  9252.,
      15410., 11508., 12164., 6710.,  7070.,  0.,     4790.,  5022.,  11364.,
      11892., 19850., 14788., 15444., 8510.,  8870.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,
      2390.,  2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,
      0.,     4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228.,
      11524., 0.,     10100., 11140., 23640., 25848., 40876., 29080., 31544.,
      16708., 18004., 0.,     15300., 16340., 34680., 36888., 58396., 41400.,
      43864., 23188., 24484., 0.,     9630.,  10246., 21492., 22788., 35714.,
      25044., 26468., 13862., 14606., 0.,     12710., 13326., 27972., 29268.,
      45914., 32164., 33588., 17582., 18326., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,
      5358.,  11076., 12756., 19706., 13732., 15540., 8078.,  9014.,  0.,
      9220.,  11028., 22776., 26520., 40924., 28472., 32472., 16852., 18916.,
      0.,     18260., 20068., 41496., 45240., 69964., 48472., 52472., 27172.,
      29236., 0.,     27300., 29108., 60216., 63960., 99004., 68472., 72472.,
      37492., 39556., 0.,     15630., 16630., 34260., 36324., 56018., 38580.,
      40772., 21014., 22142., 0.,     20630., 21630., 44580., 46644., 71978.,
      49540., 51732., 26654., 27782., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    14.,   37.,    40.,    43.,    46.,   82.,    88.,    73.,
      78.,    127.,  136.,   103.,   110.,   172.,  184.,   133.,   142.,
      151.,   160.,  41.,    48.,    104.,   120.,  136.,   152.,   239.,
      266.,   196.,  216.,   329.,   362.,   256.,  280.,   419.,   458.,
      316.,   344.,  372.,   400.,   111.,   118.,  264.,   280.,   296.,
      312.,   509.,  536.,   396.,   416.,   659.,  692.,   496.,   520.,
      809.,   848.,  596.,   624.,   652.,   680.,  214.,   232.,   491.,
      530.,   569.,  608.,   951.,   1014.,  719.,  764.,   1176.,  1248.,
      869.,   920.,  1401.,  1482.,  1019.,  1076., 1133.,  1190.,  341.,
      358.,   724.,  760.,   796.,   832.,   1259., 1316.,  896.,   936.,
      1409.,  1472., 996.,   1040.,  1559.,  1628., 1096.,  1144.,  1192.,
      1240.,  559.,  592.,   1181.,  1250.,  1319., 1388.,  2076.,  2184.,
      1469.,  1544., 2301.,  2418.,  1619.,  1700., 2526.,  2652.,  1769.,
      1856.,  1943., 2030.,  571.,   598.,   1184., 1240.,  1296.,  1352.,
      2009.,  2096., 1396.,  1456.,  2159.,  2252., 1496.,  1560.,  2309.,
      2408.,  1596., 1664.,  1732.,  1800.,  841.,  868.,   1744.,  1800.,
      1856.,  1912., 2879.,  2966.,  1996.,  2056., 3089.,  3182.,  2136.,
      2200.,  3299., 3398.,  2276.,  2344.,  2412., 2480.,  273.,   294.,
      557.,   600.,  643.,   686.,   982.,   1048., 673.,   718.,   1027.,
      1096.,  703.,  750.,   1072.,  1144.,  733.,  782.,   831.,   880.,
      561.,   608.,  1144.,  1240.,  1336.,  1432., 2039.,  2186.,  1396.,
      1496.,  2129., 2282.,  1456.,  1560.,  2219., 2378.,  1516.,  1624.,
      1732.,  1840., 1031.,  1078.,  2104.,  2200., 2296.,  2392.,  3509.,
      3656.,  2396., 2496.,  3659.,  3812.,  2496., 2600.,  3809.,  3968.,
      2596.,  2704., 2812.,  2920.,  1594.,  1672., 3251.,  3410.,  3569.,
      3728.,  5451., 5694.,  3719.,  3884.,  5676., 5928.,  3869.,  4040.,
      5901.,  6162., 4019.,  4196.,  4373.,  4550., 1261.,  1318.,  2564.,
      2680.,  2796., 2912.,  4259.,  4436.,  2896., 3016.,  4409.,  4592.,
      2996.,  3120., 4559.,  4748.,  3096.,  3224., 3352.,  3480.,  1939.,
      2032.,  3941., 4130.,  4319.,  4508.,  6576., 6864.,  4469.,  4664.,
      6801.,  7098., 4619.,  4820.,  7026.,  7332., 4769.,  4976.,  5183.,
      5390.,  1491., 1558.,  3024.,  3160.,  3296., 3432.,  5009.,  5216.,
      3396.,  3536., 5159.,  5372.,  3496.,  3640., 5309.,  5528.,  3596.,
      3744.,  3892., 4040.,  2161.,  2228.,  4384., 4520.,  4656.,  4792.,
      7079.,  7286., 4796.,  4936.,  7289.,  7502., 4936.,  5080.,  7499.,
      7718.,  5076., 5224.,  5372.,  5520.,  533.,  574.,   1077.,  1160.,
      1243.,  1326., 1882.,  2008.,  1273.,  1358., 1927.,  2056.,  1303.,
      1390.,  1972., 2104.,  1333.,  1422.,  1511., 1600.,  1081.,  1168.,
      2184.,  2360., 2536.,  2712.,  3839.,  4106., 2596.,  2776.,  3929.,
      4202.,  2656., 2840.,  4019.,  4298.,  2716., 2904.,  3092.,  3280.,
      1951.,  2038., 3944.,  4120.,  4296.,  4472., 6509.,  6776.,  4396.,
      4576.,  6659., 6932.,  4496.,  4680.,  6809., 7088.,  4596.,  4784.,
      4972.,  5160., 2974.,  3112.,  6011.,  6290., 6569.,  6848.,  9951.,
      10374., 6719., 7004.,  10176., 10608., 6869., 7160.,  10401., 10842.,
      7019.,  7316., 7613.,  7910.,  2181.,  2278., 4404.,  4600.,  4796.,
      4992.,  7259., 7556.,  4896.,  5096.,  7409., 7712.,  4996.,  5200.,
      7559.,  7868., 5096.,  5304.,  5512.,  5720., 3319.,  3472.,  6701.,
      7010.,  7319., 7628.,  11076., 11544., 7469., 7784.,  11301., 11778.,
      7619.,  7940., 11526., 12012., 7769.,  8096., 8423.,  8750.,  2411.,
      2518.,  4864., 5080.,  5296.,  5512.,  8009., 8336.,  5396.,  5616.,
      8159.,  8492., 5496.,  5720.,  8309.,  8648., 5596.,  5824.,  6052.,
      6280.,  3481., 3588.,  7024.,  7240.,  7456., 7672.,  11279., 11606.,
      7596.,  7816., 11489., 11822., 7736.,  7960., 11699., 12038., 7876.,
      8104.,  8332., 8560.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,   0.,    0.,
      11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,
      73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   0.,    0.,
      25.,   30.,   35.,   40.,   92.,   104.,  116.,  128.,  209.,  230.,
      176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,  0.,    0.,
      75.,   80.,   85.,   90.,   212.,  224.,  236.,  248.,  419.,  440.,
      336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  0.,    0.,
      125.,  130.,  135.,  140.,  332.,  344.,  356.,  368.,  629.,  650.,
      496.,  512.,  528.,  544.,  303.,  312.,  321.,  330.,  0.,    0.,
      124.,  128.,  132.,  136.,  295.,  304.,  313.,  322.,  517.,  532.,
      383.,  394.,  405.,  416.,  222.,  228.,  234.,  240.,  0.,    0.,
      164.,  168.,  172.,  176.,  385.,  394.,  403.,  412.,  667.,  682.,
      493.,  504.,  515.,  526.,  282.,  288.,  294.,  300.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   43.,   58.,   73.,   88.,   112.,  136.,
      83.,   100.,  117.,  134.,  63.,   72.,   81.,   90.,   0.,    0.,
      77.,   84.,   91.,   98.,   193.,  208.,  223.,  238.,  352.,  376.,
      253.,  270.,  287.,  304.,  153.,  162.,  171.,  180.,  0.,    0.,
      157.,  174.,  191.,  208.,  404.,  440.,  476.,  512.,  749.,  806.,
      536.,  576.,  616.,  656.,  327.,  348.,  369.,  390.,  0.,    0.,
      327.,  344.,  361.,  378.,  764.,  800.,  836.,  872.,  1319., 1376.,
      936.,  976.,  1016., 1056., 537.,  558.,  579.,  600.,  0.,    0.,
      497.,  514.,  531.,  548.,  1124., 1160., 1196., 1232., 1889., 1946.,
      1336., 1376., 1416., 1456., 747.,  768.,  789.,  810.,  0.,    0.,
      310.,  320.,  330.,  340.,  691.,  712.,  733.,  754.,  1147., 1180.,
      803.,  826.,  849.,  872.,  444.,  456.,  468.,  480.,  0.,    0.,
      410.,  420.,  430.,  440.,  901.,  922.,  943.,  964.,  1477., 1510.,
      1033., 1056., 1079., 1102., 564.,  576.,  588.,  600.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   79.,   106.,  133.,  160.,  202.,  244.,
      143.,  172.,  201.,  230.,  105.,  120.,  135.,  150.,  0.,    0.,
      143.,  156.,  169.,  182.,  349.,  376.,  403.,  430.,  622.,  664.,
      433.,  462.,  491.,  520.,  255.,  270.,  285.,  300.,  0.,    0.,
      289.,  318.,  347.,  376.,  716.,  776.,  836.,  896.,  1289., 1382.,
      896.,  960.,  1024., 1088., 531.,  564.,  597.,  630.,  0.,    0.,
      579.,  608.,  637.,  666.,  1316., 1376., 1436., 1496., 2219., 2312.,
      1536., 1600., 1664., 1728., 861.,  894.,  927.,  960.,  0.,    0.,
      869.,  898.,  927.,  956.,  1916., 1976., 2036., 2096., 3149., 3242.,
      2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290., 0.,    0.,
      496.,  512.,  528.,  544.,  1087., 1120., 1153., 1186., 1777., 1828.,
      1223., 1258., 1293., 1328., 666.,  684.,  702.,  720.,  0.,    0.,
      656.,  672.,  688.,  704.,  1417., 1450., 1483., 1516., 2287., 2338.,
      1573., 1608., 1643., 1678., 846.,  864.,  882.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   1265.,  1355.,  988.,   1056.,
      1124.,  1192.,  264.,   316.,   700.,   820.,   940.,   1060.,  1684.,
      1888.,  1412.,  1564.,  2392.,  2644.,  1884.,  2068.,  3100.,  3400.,
      2356.,  2572.,  2788.,  3004.,  784.,   836.,   1900.,  2020.,  2140.,
      2260.,  3724.,  3928.,  2932.,  3084.,  4912.,  5164.,  3724.,  3908.,
      6100.,  6400.,  4516.,  4732.,  4948.,  5164.,  1541.,  1679.,  3580.,
      3880.,  4180.,  4480.,  7041.,  7527.,  5368.,  5716.,  8823.,  9381.,
      6556.,  6952.,  10605., 11235., 7744.,  8188.,  8632.,  9076.,  2604.,
      2736.,  5540.,  5820.,  6100.,  6380.,  9664.,  10108., 6892.,  7204.,
      10852., 11344., 7684.,  8028.,  12040., 12580., 8476.,  8852.,  9228.,
      9604.,  4271.,  4529.,  9040.,  9580.,  10120., 10660., 15951., 16797.,
      11308., 11896., 17733., 18651., 12496., 13132., 19515., 20505., 13684.,
      14368., 15052., 15736., 4424.,  4636.,  9180.,  9620.,  10060., 10500.,
      15604., 16288., 10852., 11324., 16792., 17524., 11644., 12148., 17980.,
      18760., 12436., 12972., 13508., 14044., 6544.,  6756.,  13580., 14020.,
      14460., 14900., 22444., 23128., 15572., 16044., 24112., 24844., 16684.,
      17188., 25780., 26560., 17796., 18332., 18868., 19404., 2117.,  2283.,
      4320.,  4660.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  7991.,
      8537.,  5472.,  5844.,  8345.,  8915.,  5708.,  6096.,  6484.,  6872.,
      4344.,  4716.,  8860.,  9620.,  10380., 11140., 15844., 17008., 10852.,
      11644., 16552., 17764., 11324., 12148., 17260., 18520., 11796., 12652.,
      13508., 14364., 8064.,  8436.,  16460., 17220., 17980., 18740., 27484.,
      28648., 18772., 19564., 28672., 29884., 19564., 20388., 29860., 31120.,
      20356., 21212., 22068., 22924., 12461., 13079., 25420., 26680., 27940.,
      29200., 42681., 44607., 29128., 30436., 44463., 46461., 30316., 31672.,
      46245., 48315., 31504., 32908., 34312., 35716., 9884.,  10336., 20100.,
      21020., 21940., 22860., 33424., 34828., 22732., 23684., 34612., 36064.,
      23524., 24508., 35800., 37300., 24316., 25332., 26348., 27364., 15191.,
      15929., 30880., 32380., 33880., 35380., 51591., 53877., 35068., 36616.,
      53373., 55731., 36256., 37852., 55155., 57585., 37444., 39088., 40732.,
      42376., 11704., 12236., 23740., 24820., 25900., 26980., 39364., 41008.,
      26692., 27804., 40552., 42244., 27484., 28628., 41740., 43480., 28276.,
      29452., 30628., 31804., 17024., 17556., 34540., 35620., 36700., 37780.,
      55804., 57448., 37812., 38924., 57472., 59164., 38924., 40068., 59140.,
      60880., 40036., 41212., 42388., 43564., 4157.,  4483.,  8400.,  9060.,
      9720.,  10380., 14717., 15719., 9956.,  10632., 15071., 16097., 10192.,
      10884., 15425., 16475., 10428., 11136., 11844., 12552., 8424.,  9116.,
      17020., 18420., 19820., 21220., 30004., 32128., 20292., 21724., 30712.,
      32884., 20764., 22228., 31420., 33640., 21236., 22732., 24228., 25724.,
      15344., 16036., 31020., 32420., 33820., 35220., 51244., 53368., 34612.,
      36044., 52432., 54604., 35404., 36868., 53620., 55840., 36196., 37692.,
      39188., 40684., 23381., 24479., 47260., 49480., 51700., 53920., 78321.,
      81687., 52888., 55156., 80103., 83541., 54076., 56392., 81885., 85395.,
      55264., 57628., 59992., 62356., 17164., 17936., 34660., 36220., 37780.,
      39340., 57184., 59548., 38572., 40164., 58372., 60784., 39364., 40988.,
      59560., 62020., 40156., 41812., 43468., 45124., 26111., 27329., 52720.,
      55180., 57640., 60100., 87231., 90957., 58828., 61336., 89013., 92811.,
      60016., 62572., 90795., 94665., 61204., 63808., 66412., 69016., 18984.,
      19836., 38300., 40020., 41740., 43460., 63124., 65728., 42532., 44284.,
      64312., 66964., 43324., 45108., 65500., 68200., 44116., 45932., 47748.,
      49564., 27504., 28356., 55500., 57220., 58940., 60660., 89164., 91768.,
      60052., 61804., 90832., 93484., 61164., 62948., 92500., 95200., 62276.,
      64092., 65908., 67724.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,
      0.,     0.,     65.,    71.,    77.,    83.,    240.,   260.,   280.,
      300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,
      413.,   435.,   0.,     0.,     148.,   184.,   220.,   256.,   612.,
      700.,   788.,   876.,   1456.,  1612.,  1260.,  1380.,  1500.,  1620.,
      900.,   968.,   1036.,  1104.,  0.,     0.,     508.,   544.,   580.,
      616.,   1492.,  1580.,  1668.,  1756.,  3016.,  3172.,  2460.,  2580.,
      2700.,  2820.,  1580.,  1648.,  1716.,  1784.,  0.,     0.,     868.,
      904.,   940.,   976.,   2372.,  2460.,  2548.,  2636.,  4576.,  4732.,
      3660.,  3780.,  3900.,  4020.,  2260.,  2328.,  2396.,  2464.,  0.,
      0.,     923.,   953.,   983.,   1013.,  2212.,  2280.,  2348.,  2416.,
      3899.,  4013.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,
      1829.,  0.,     0.,     1223.,  1253.,  1283.,  1313.,  2892.,  2960.,
      3028.,  3096.,  5039.,  5153.,  3744.,  3828.,  3912.,  3996.,  2151.,
      2197.,  2243.,  2289.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     41.,    95.,
      149.,   203.,   304.,   420.,   536.,   652.,   821.,   1007.,  612.,
      744.,   876.,   1008.,  473.,   543.,   613.,   683.,   0.,     0.,
      581.,   635.,   689.,   743.,   1464.,  1580.,  1696.,  1812.,  2681.,
      2867.,  1932.,  2064.,  2196.,  2328.,  1173.,  1243.,  1313.,  1383.,
      0.,     0.,     1180.,  1312.,  1444.,  1576.,  3060.,  3340.,  3620.,
      3900.,  5704.,  6148.,  4092.,  4404.,  4716.,  5028.,  2508.,  2672.,
      2836.,  3000.,  0.,     0.,     2500.,  2632.,  2764.,  2896.,  5860.,
      6140.,  6420.,  6700.,  10144., 10588., 7212.,  7524.,  7836.,  8148.,
      4148.,  4312.,  4476.,  4640.,  0.,     0.,     3820.,  3952.,  4084.,
      4216.,  8660.,  8940.,  9220.,  9500.,  14584., 15028., 10332., 10644.,
      10956., 11268., 5788.,  5952.,  6116.,  6280.,  0.,     0.,     2399.,
      2477.,  2555.,  2633.,  5356.,  5520.,  5684.,  5848.,  8903.,  9161.,
      6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  0.,
      0.,     3179.,  3257.,  3335.,  3413.,  6996.,  7160.,  7324.,  7488.,
      11483., 11741., 8040.,  8220.,  8400.,  8580.,  4395.,  4489.,  4583.,
      4677.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     77.,    179.,   281.,   383.,
      568.,   780.,   992.,   1204.,  1505.,  1835.,  1068.,  1296.,  1524.,
      1752.,  797.,   915.,   1033.,  1151.,  0.,     0.,     1097.,  1199.,
      1301.,  1403.,  2688.,  2900.,  3112.,  3324.,  4805.,  5135.,  3348.,
      3576.,  3804.,  4032.,  1977.,  2095.,  2213.,  2331.,  0.,     0.,
      2212.,  2440.,  2668.,  2896.,  5508.,  5980.,  6452.,  6924.,  9952.,
      10684., 6924.,  7428.,  7932.,  8436.,  4116.,  4376.,  4636.,  4896.,
      0.,     0.,     4492.,  4720.,  4948.,  5176.,  10228., 10700., 11172.,
      11644., 17272., 18004., 11964., 12468., 12972., 13476., 6716.,  6976.,
      7236.,  7496.,  0.,     0.,     6772.,  7000.,  7228.,  7456.,  14948.,
      15420., 15892., 16364., 24592., 25324., 17004., 17508., 18012., 18516.,
      9316.,  9576.,  9836.,  10096., 0.,     0.,     3875.,  4001.,  4127.,
      4253.,  8500.,  8760.,  9020.,  9280.,  13907., 14309., 9576.,  9852.,
      10128., 10404., 5219.,  5361.,  5503.,  5645.,  0.,     0.,     5135.,
      5261.,  5387.,  5513.,  11100., 11360., 11620., 11880., 17927., 18329.,
      12336., 12612., 12888., 13164., 6639.,  6781.,  6923.,  7065.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   9682.,   10378.,
      7604.,   8132.,   8660.,   9188.,   1860.,   2260.,   5080.,   6008.,
      6936.,   7864.,   12572.,  14156.,  10680.,  11864.,  18188.,  20156.,
      14424.,  15864.,  23804.,  26156.,  18168.,  19864.,  21560.,  23256.,
      5860.,   6260.,   14360.,  15288.,  16216.,  17144.,  28412.,  29996.,
      22520.,  23704.,  37868.,  39836.,  28824.,  30264.,  47324.,  49676.,
      35128.,  36824.,  38520.,  40216.,  11650.,  12730.,  27260.,  29612.,
      31964.,  34316.,  54078.,  57894.,  41420.,  44156.,  68262.,  72654.,
      50876.,  53996.,  82446.,  87414.,  60332.,  63836.,  67340.,  70844.,
      20340.,  21380.,  43320.,  45528.,  47736.,  49944.,  75692.,  79196.,
      54040.,  56504.,  85148.,  89036.,  60344.,  63064.,  94604.,  98876.,
      66648.,  69624.,  72600.,  75576.,  33370.,  35410.,  70700.,  74972.,
      79244.,  83516.,  124998., 131694., 88700.,  93356.,  139182., 146454.,
      98156.,  103196., 153366., 161214., 107612., 113036., 118460., 123884.,
      34820.,  36500.,  72280.,  75768.,  79256.,  82744.,  122972., 128396.,
      85560.,  89304.,  132428., 138236., 91864.,  95864.,  141884., 148076.,
      98168.,  102424., 106680., 110936., 51620.,  53300.,  107160., 110648.,
      114136., 117624., 177212., 182636., 123000., 126744., 190508., 196316.,
      131864., 135864., 203804., 209996., 140728., 144984., 149240., 153496.,
      16670.,  17990.,  34020.,  36724.,  39428.,  42132.,  60226.,  64378.,
      41300.,  44132.,  63034.,  67378.,  43172.,  46132.,  65842.,  70378.,
      45044.,  48132.,  51220.,  54308.,  34180.,  37140.,  69720.,  75768.,
      81816.,  87864.,  124892., 134156., 85560.,  91864.,  130508., 140156.,
      89304.,  95864.,  136124., 146156., 93048.,  99864.,  106680., 113496.,
      63780.,  66740.,  130200., 136248., 142296., 148344., 217532., 226796.,
      148600., 154904., 226988., 236636., 154904., 161464., 236444., 246476.,
      161208., 168024., 174840., 181656., 98530.,  103450., 201020., 211052.,
      221084., 231116., 337758., 353094., 230540., 240956., 351942., 367854.,
      239996., 250796., 366126., 382614., 249452., 260636., 271820., 283004.,
      78260.,  81860.,  159160., 166488., 173816., 181144., 264812., 275996.,
      180120., 187704., 274268., 285836., 186424., 194264., 283724., 295676.,
      192728., 200824., 208920., 217016., 120250., 126130., 244460., 256412.,
      268364., 280316., 408678., 426894., 277820., 290156., 422862., 441654.,
      287276., 299996., 437046., 456414., 296732., 309836., 322940., 336044.,
      92740.,  96980.,  188120., 196728., 205336., 213944., 312092., 325196.,
      211640., 220504., 321548., 335036., 217944., 227064., 331004., 344876.,
      224248., 233624., 243000., 252376., 135140., 139380., 274200., 282808.,
      291416., 300024., 443132., 456236., 300280., 309144., 456428., 469916.,
      309144., 318264., 469724., 483596., 318008., 327384., 336760., 346136.,
      32830.,  35430.,  66340.,  71604.,  76868.,  82132.,  116386., 124378.,
      78740.,  84132.,  119194., 127378., 80612.,  86132.,  122002., 130378.,
      82484.,  88132.,  93780.,  99428.,  66500.,  72020.,  134360., 145528.,
      156696., 167864., 237212., 254156., 160440., 171864., 242828., 260156.,
      164184., 175864., 248444., 266156., 167928., 179864., 191800., 203736.,
      121700., 127220., 246040., 257208., 268376., 279544., 406652., 423596.,
      274680., 286104., 416108., 433436., 280984., 292664., 425564., 443276.,
      287288., 299224., 311160., 323096., 185410., 194170., 374780., 392492.,
      410204., 427916., 621438., 648294., 419660., 437756., 635622., 663054.,
      429116., 447596., 649806., 677814., 438572., 457436., 476300., 495164.,
      136180., 142340., 275000., 287448., 299896., 312344., 453932., 472796.,
      306200., 318904., 463388., 482636., 312504., 325464., 472844., 492476.,
      318808., 332024., 345240., 358456., 207130., 216850., 418220., 437852.,
      457484., 477116., 692358., 722094., 466940., 486956., 706542., 736854.,
      476396., 496796., 720726., 751614., 485852., 506636., 527420., 548204.,
      150660., 157460., 303960., 317688., 331416., 345144., 501212., 521996.,
      337720., 351704., 510668., 531836., 344024., 358264., 520124., 541676.,
      350328., 364824., 379320., 393816., 218660., 225460., 441240., 454968.,
      468696., 482424., 709052., 729836., 477560., 491544., 722348., 743516.,
      486424., 500664., 735644., 757196., 495288., 509784., 524280., 538776.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1140.,   1412.,   1684.,   1956.,   1118.,   1286.,
      1454.,   1622.,   0.,      0.,      430.,    470.,    510.,    550.,
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      4404.,   4676.,   2798.,   2966.,   3134.,   3302.,   0.,      0.,
      980.,    1252.,   1524.,   1796.,   4408.,   5080.,   5752.,   6424.,
      10796.,  11996.,  9496.,   10424.,  11352.,  12280.,  6868.,   7396.,
      7924.,   8452.,   0.,      0.,      3700.,   3972.,   4244.,   4516.,
      11128.,  11800.,  12472.,  13144.,  22796.,  23996.,  18776.,  19704.,
      20632.,  21560.,  12148.,  12676.,  13204.,  13732.,  0.,      0.,
      6420.,   6692.,   6964.,   7236.,   17848.,  18520.,  19192.,  19864.,
      34796.,  35996.,  28056.,  28984.,  29912.,  30840.,  17428.,  17956.,
      18484.,  19012.,  0.,      0.,      7110.,   7342.,   7574.,   7806.,
      17108.,  17636.,  18164.,  18692.,  30250.,  31138.,  22596.,  23252.,
      23908.,  24564.,  13190.,  13550.,  13910.,  14270.,  0.,      0.,
      9430.,   9662.,   9894.,   10126.,  22388.,  22916.,  23444.,  23972.,
      39130.,  40018.,  29156.,  29812.,  30468.,  31124.,  16790.,  17150.,
      17510.,  17870.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      270.,    694.,    1118.,   1542.,   2276.,   3188.,   4100.,   5012.,
      6274.,   7738.,   4692.,   5732.,   6772.,   7812.,   3662.,   4214.,
      4766.,   5318.,   0.,      0.,      4510.,   4934.,   5358.,   5782.,
      11396.,  12308.,  13220.,  14132.,  20914.,  22378.,  15092.,  16132.,
      17172.,  18212.,  9182.,   9734.,   10286.,  10838.,  0.,      0.,
      9140.,   10180.,  11220.,  12260.,  23800.,  26008.,  28216.,  30424.,
      44492.,  47996.,  31960.,  34424.,  36888.,  39352.,  19636.,  20932.,
      22228.,  23524.,  0.,      0.,      19540.,  20580.,  21620.,  22660.,
      45880.,  48088.,  50296.,  52504.,  79532.,  83036.,  56600.,  59064.,
      61528.,  63992.,  32596.,  33892.,  35188.,  36484.,  0.,      0.,
      29940.,  30980.,  32020.,  33060.,  67960.,  70168.,  72376.,  74584.,
      114572., 118076., 81240.,  83704.,  86168.,  88632.,  45556.,  46852.,
      48148.,  49444.,  0.,      0.,      18870.,  19486.,  20102.,  20718.,
      42164.,  43460.,  44756.,  46052.,  70138.,  72178.,  49188.,  50612.,
      52036.,  53460.,  27254.,  27998.,  28742.,  29486.,  0.,      0.,
      25030.,  25646.,  26262.,  26878.,  55124.,  56420.,  57716.,  59012.,
      90538.,  92578.,  63428.,  64852.,  66276.,  67700.,  34694.,  35438.,
      36182.,  36926.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   4292.,   5972.,   7652.,   9332.,
      11602.,  14218.,  8244.,   10052.,  11860.,  13668.,  6206.,   7142.,
      8078.,   9014.,   0.,      0.,      8590.,   9398.,   10206.,  11014.,
      21092.,  22772.,  24452.,  26132.,  37762.,  40378.,  26324.,  28132.,
      29940.,  31748.,  15566.,  16502.,  17438.,  18374.,  0.,      0.,
      17300.,  19108.,  20916.,  22724.,  43192.,  46936.,  50680.,  54424.,
      78188.,  83996.,  54424.,  58424.,  62424.,  66424.,  32404.,  34468.,
      36532.,  38596.,  0.,      0.,      35380.,  37188.,  38996.,  40804.,
      80632.,  84376.,  88120.,  91864.,  136268., 142076., 94424.,  98424.,
      102424., 106424., 53044.,  55108.,  57172.,  59236.,  0.,      0.,
      53460.,  55268.,  57076.,  58884.,  118072., 121816., 125560., 129304.,
      194348., 200156., 134424., 138424., 142424., 146424., 73684.,  75748.,
      77812.,  79876.,  0.,      0.,      30630.,  31630.,  32630.,  33630.,
      67220.,  69284.,  71348.,  73412.,  110026., 113218., 75780.,  77972.,
      80164.,  82356.,  41318.,  42446.,  43574.,  44702.,  0.,      0.,
      40630.,  41630.,  42630.,  43630.,  87860.,  89924.,  91988.,  94052.,
      141946., 145138., 97700.,  99892.,  102084., 104276., 52598.,  53726.,
      54854.,  55982.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,
      86.,    89.,    92.,    158.,   164.,   170.,   176.,   141.,   146.,
      151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,
      220.,   332.,   344.,   356.,   368.,   257.,   266.,   275.,   284.,
      293.,   302.,   311.,   320.,   75.,    82.,    89.,    96.,    192.,
      208.,   224.,   240.,   256.,   272.,   288.,   304.,   451.,   478.,
      505.,   532.,   372.,   392.,   412.,   432.,   625.,   658.,   691.,
      724.,   488.,   512.,   536.,   560.,   799.,   838.,   877.,   916.,
      604.,   632.,   660.,   688.,   716.,   744.,   772.,   800.,   215.,
      222.,   229.,   236.,   512.,   528.,   544.,   560.,   576.,   592.,
      608.,   624.,   991.,   1018.,  1045.,  1072.,  772.,   792.,   812.,
      832.,   1285.,  1318.,  1351.,  1384.,  968.,   992.,   1016.,  1040.,
      1579.,  1618.,  1657.,  1696.,  1164.,  1192.,  1220.,  1248.,  1276.,
      1304.,  1332.,  1360.,  410.,   428.,   446.,   464.,   943.,   982.,
      1021.,  1060.,  1099.,  1138.,  1177.,  1216.,  1839.,  1902.,  1965.,
      2028.,  1393.,  1438.,  1483.,  1528.,  2280.,  2352.,  2424.,  2496.,
      1687.,  1738.,  1789.,  1840.,  2721.,  2802.,  2883.,  2964.,  1981.,
      2038.,  2095.,  2152.,  2209.,  2266.,  2323.,  2380.,  665.,   682.,
      699.,   716.,   1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,
      1664.,  2461.,  2518.,  2575.,  2632.,  1752.,  1792.,  1832.,  1872.,
      2755.,  2818.,  2881.,  2944.,  1948.,  1992.,  2036.,  2080.,  3049.,
      3118.,  3187.,  3256.,  2144.,  2192.,  2240.,  2288.,  2336.,  2384.,
      2432.,  2480.,  1085.,  1118.,  1151.,  1184.,  2293.,  2362.,  2431.,
      2500.,  2569.,  2638.,  2707.,  2776.,  4044.,  4152.,  4260.,  4368.,
      2863.,  2938.,  3013.,  3088.,  4485.,  4602.,  4719.,  4836.,  3157.,
      3238.,  3319.,  3400.,  4926.,  5052.,  5178.,  5304.,  3451.,  3538.,
      3625.,  3712.,  3799.,  3886.,  3973.,  4060.,  1115.,  1142.,  1169.,
      1196.,  2312.,  2368.,  2424.,  2480.,  2536.,  2592.,  2648.,  2704.,
      3931.,  4018.,  4105.,  4192.,  2732.,  2792.,  2852.,  2912.,  4225.,
      4318.,  4411.,  4504.,  2928.,  2992.,  3056.,  3120.,  4519.,  4618.,
      4717.,  4816.,  3124.,  3192.,  3260.,  3328.,  3396.,  3464.,  3532.,
      3600.,  1655.,  1682.,  1709.,  1736.,  3432.,  3488.,  3544.,  3600.,
      3656.,  3712.,  3768.,  3824.,  5671.,  5758.,  5845.,  5932.,  3932.,
      3992.,  4052.,  4112.,  6085.,  6178.,  6271.,  6364.,  4208.,  4272.,
      4336.,  4400.,  6499.,  6598.,  6697.,  6796.,  4484.,  4552.,  4620.,
      4688.,  4756.,  4824.,  4892.,  4960.,  525.,   546.,   567.,   588.,
      1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,  1898.,
      1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,  2054.,
      2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  2072.,  2144.,  2216.,
      2288.,  1417.,  1466.,  1515.,  1564.,  1613.,  1662.,  1711.,  1760.,
      1075.,  1122.,  1169.,  1216.,  2192.,  2288.,  2384.,  2480.,  2576.,
      2672.,  2768.,  2864.,  3931.,  4078.,  4225.,  4372.,  2692.,  2792.,
      2892.,  2992.,  4105.,  4258.,  4411.,  4564.,  2808.,  2912.,  3016.,
      3120.,  4279.,  4438.,  4597.,  4756.,  2924.,  3032.,  3140.,  3248.,
      3356.,  3464.,  3572.,  3680.,  2015.,  2062.,  2109.,  2156.,  4112.,
      4208.,  4304.,  4400.,  4496.,  4592.,  4688.,  4784.,  6871.,  7018.,
      7165.,  7312.,  4692.,  4792.,  4892.,  4992.,  7165.,  7318.,  7471.,
      7624.,  4888.,  4992.,  5096.,  5200.,  7459.,  7618.,  7777.,  7936.,
      5084.,  5192.,  5300.,  5408.,  5516.,  5624.,  5732.,  5840.,  3110.,
      3188.,  3266.,  3344.,  6343.,  6502.,  6661.,  6820.,  6979.,  7138.,
      7297.,  7456.,  10659., 10902., 11145., 11388., 7273.,  7438.,  7603.,
      7768.,  11100., 11352., 11604., 11856., 7567.,  7738.,  7909.,  8080.,
      11541., 11802., 12063., 12324., 7861.,  8038.,  8215.,  8392.,  8569.,
      8746.,  8923.,  9100.,  2465.,  2522.,  2579.,  2636.,  5012.,  5128.,
      5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,  8695.,
      8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,  9184.,
      5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,  6064.,
      6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,  3878.,
      3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,  8827.,
      9016.,  12864., 13152., 13440., 13728., 8743.,  8938.,  9133.,  9328.,
      13305., 13602., 13899., 14196., 9037.,  9238.,  9439.,  9640.,  13746.,
      14052., 14358., 14664., 9331.,  9538.,  9745.,  9952.,  10159., 10366.,
      10573., 10780., 2915.,  2982.,  3049.,  3116.,  5912.,  6048.,  6184.,
      6320.,  6456.,  6592.,  6728.,  6864.,  9811.,  10018., 10225., 10432.,
      6652.,  6792.,  6932.,  7072.,  10105., 10318., 10531., 10744., 6848.,
      6992.,  7136.,  7280.,  10399., 10618., 10837., 11056., 7044.,  7192.,
      7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4255.,  4322.,  4389.,
      4456.,  8632.,  8768.,  8904.,  9040.,  9176.,  9312.,  9448.,  9584.,
      13951., 14158., 14365., 14572., 9452.,  9592.,  9732.,  9872.,  14365.,
      14578., 14791., 15004., 9728.,  9872.,  10016., 10160., 14779., 14998.,
      15217., 15436., 10004., 10152., 10300., 10448., 10596., 10744., 10892.,
      11040., 1025.,  1066.,  1107.,  1148.,  2071.,  2154.,  2237.,  2320.,
      2403.,  2486.,  2569.,  2652.,  3638.,  3764.,  3890.,  4016.,  2461.,
      2546.,  2631.,  2716.,  3725.,  3854.,  3983.,  4112.,  2519.,  2606.,
      2693.,  2780.,  3812.,  3944.,  4076.,  4208.,  2577.,  2666.,  2755.,
      2844.,  2933.,  3022.,  3111.,  3200.,  2075.,  2162.,  2249.,  2336.,
      4192.,  4368.,  4544.,  4720.,  4896.,  5072.,  5248.,  5424.,  7411.,
      7678.,  7945.,  8212.,  5012.,  5192.,  5372.,  5552.,  7585.,  7858.,
      8131.,  8404.,  5128.,  5312.,  5496.,  5680.,  7759.,  8038.,  8317.,
      8596.,  5244.,  5432.,  5620.,  5808.,  5996.,  6184.,  6372.,  6560.,
      3815.,  3902.,  3989.,  4076.,  7712.,  7888.,  8064.,  8240.,  8416.,
      8592.,  8768.,  8944.,  12751., 13018., 13285., 13552., 8612.,  8792.,
      8972.,  9152.,  13045., 13318., 13591., 13864., 8808.,  8992.,  9176.,
      9360.,  13339., 13618., 13897., 14176., 9004.,  9192.,  9380.,  9568.,
      9756.,  9944.,  10132., 10320., 5810.,  5948.,  6086.,  6224.,  11743.,
      12022., 12301., 12580., 12859., 13138., 13417., 13696., 19479., 19902.,
      20325., 20748., 13153., 13438., 13723., 14008., 19920., 20352., 20784.,
      21216., 13447., 13738., 14029., 14320., 20361., 20802., 21243., 21684.,
      13741., 14038., 14335., 14632., 14929., 15226., 15523., 15820., 4265.,
      4362.,  4459.,  4556.,  8612.,  8808.,  9004.,  9200.,  9396.,  9592.,
      9788.,  9984.,  14221., 14518., 14815., 15112., 9592.,  9792.,  9992.,
      10192., 14515., 14818., 15121., 15424., 9788.,  9992.,  10196., 10400.,
      14809., 15118., 15427., 15736., 9984.,  10192., 10400., 10608., 10816.,
      11024., 11232., 11440., 6485.,  6638.,  6791.,  6944.,  13093., 13402.,
      13711., 14020., 14329., 14638., 14947., 15256., 21684., 22152., 22620.,
      23088., 14623., 14938., 15253., 15568., 22125., 22602., 23079., 23556.,
      14917., 15238., 15559., 15880., 22566., 23052., 23538., 24024., 15211.,
      15538., 15865., 16192., 16519., 16846., 17173., 17500., 4715.,  4822.,
      4929.,  5036.,  9512.,  9728.,  9944.,  10160., 10376., 10592., 10808.,
      11024., 15691., 16018., 16345., 16672., 10572., 10792., 11012., 11232.,
      15985., 16318., 16651., 16984., 10768., 10992., 11216., 11440., 16279.,
      16618., 16957., 17296., 10964., 11192., 11420., 11648., 11876., 12104.,
      12332., 12560., 6855.,  6962.,  7069.,  7176.,  13832., 14048., 14264.,
      14480., 14696., 14912., 15128., 15344., 22231., 22558., 22885., 23212.,
      14972., 15192., 15412., 15632., 22645., 22978., 23311., 23644., 15248.,
      15472., 15696., 15920., 23059., 23398., 23737., 24076., 15524., 15752.,
      15980., 16208., 16436., 16664., 16892., 17120.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,   50.,   56.,
      41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,   39.,   42.,
      45.,   48.,   51.,   54.,   57.,   60.,   0.,    0.,    0.,    0.,
      21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,
      77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,  170.,  176.,
      141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,  99.,   102.,
      105.,  108.,  111.,  114.,  117.,  120.,  0.,    0.,    0.,    0.,
      45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,   172.,  184.,
      196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,  439.,  460.,
      336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,  237.,  246.,
      255.,  264.,  273.,  282.,  291.,  300.,  0.,    0.,    0.,    0.,
      145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,  412.,  424.,
      436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,  859.,  880.,
      656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,  417.,  426.,
      435.,  444.,  453.,  462.,  471.,  480.,  0.,    0.,    0.,    0.,
      245.,  250.,  255.,  260.,  265.,  270.,  275.,  280.,  652.,  664.,
      676.,  688.,  700.,  712.,  724.,  736.,  1237., 1258., 1279., 1300.,
      976.,  992.,  1008., 1024., 1040., 1056., 1072., 1088., 597.,  606.,
      615.,  624.,  633.,  642.,  651.,  660.,  0.,    0.,    0.,    0.,
      244.,  248.,  252.,  256.,  260.,  264.,  268.,  272.,  581.,  590.,
      599.,  608.,  617.,  626.,  635.,  644.,  1019., 1034., 1049., 1064.,
      755.,  766.,  777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,
      450.,  456.,  462.,  468.,  474.,  480.,  0.,    0.,    0.,    0.,
      324.,  328.,  332.,  336.,  340.,  344.,  348.,  352.,  761.,  770.,
      779.,  788.,  797.,  806.,  815.,  824.,  1319., 1334., 1349., 1364.,
      975.,  986.,  997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,
      570.,  576.,  582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,
      101.,  116.,  131.,  146.,  161.,  176.,  200.,  224.,  248.,  272.,
      149.,  166.,  183.,  200.,  217.,  234.,  251.,  268.,  117.,  126.,
      135.,  144.,  153.,  162.,  171.,  180.,  0.,    0.,    0.,    0.,
      147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,
      401.,  416.,  431.,  446.,  461.,  476.,  680.,  704.,  728.,  752.,
      489.,  506.,  523.,  540.,  557.,  574.,  591.,  608.,  297.,  306.,
      315.,  324.,  333.,  342.,  351.,  360.,  0.,    0.,    0.,    0.,
      297.,  314.,  331.,  348.,  365.,  382.,  399.,  416.,  772.,  808.,
      844.,  880.,  916.,  952.,  988.,  1024., 1441., 1498., 1555., 1612.,
      1032., 1072., 1112., 1152., 1192., 1232., 1272., 1312., 633.,  654.,
      675.,  696.,  717.,  738.,  759.,  780.,  0.,    0.,    0.,    0.,
      637.,  654.,  671.,  688.,  705.,  722.,  739.,  756.,  1492., 1528.,
      1564., 1600., 1636., 1672., 1708., 1744., 2581., 2638., 2695., 2752.,
      1832., 1872., 1912., 1952., 1992., 2032., 2072., 2112., 1053., 1074.,
      1095., 1116., 1137., 1158., 1179., 1200., 0.,    0.,    0.,    0.,
      977.,  994.,  1011., 1028., 1045., 1062., 1079., 1096., 2212., 2248.,
      2284., 2320., 2356., 2392., 2428., 2464., 3721., 3778., 3835., 3892.,
      2632., 2672., 2712., 2752., 2792., 2832., 2872., 2912., 1473., 1494.,
      1515., 1536., 1557., 1578., 1599., 1620., 0.,    0.,    0.,    0.,
      610.,  620.,  630.,  640.,  650.,  660.,  670.,  680.,  1361., 1382.,
      1403., 1424., 1445., 1466., 1487., 1508., 2261., 2294., 2327., 2360.,
      1583., 1606., 1629., 1652., 1675., 1698., 1721., 1744., 876.,  888.,
      900.,  912.,  924.,  936.,  948.,  960.,  0.,    0.,    0.,    0.,
      810.,  820.,  830.,  840.,  850.,  860.,  870.,  880.,  1781., 1802.,
      1823., 1844., 1865., 1886., 1907., 1928., 2921., 2954., 2987., 3020.,
      2043., 2066., 2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128.,
      1140., 1152., 1164., 1176., 1188., 1200., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   65.,   78.,   91.,   104.,  131.,  158.,
      185.,  212.,  239.,  266.,  293.,  320.,  362.,  404.,  446.,  488.,
      257.,  286.,  315.,  344.,  373.,  402.,  431.,  460.,  195.,  210.,
      225.,  240.,  255.,  270.,  285.,  300.,  0.,    0.,    0.,    0.,
      273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,
      725.,  752.,  779.,  806.,  833.,  860.,  1202., 1244., 1286., 1328.,
      837.,  866.,  895.,  924.,  953.,  982.,  1011., 1040., 495.,  510.,
      525.,  540.,  555.,  570.,  585.,  600.,  0.,    0.,    0.,    0.,
      549.,  578.,  607.,  636.,  665.,  694.,  723.,  752.,  1372., 1432.,
      1492., 1552., 1612., 1672., 1732., 1792., 2485., 2578., 2671., 2764.,
      1728., 1792., 1856., 1920., 1984., 2048., 2112., 2176., 1029., 1062.,
      1095., 1128., 1161., 1194., 1227., 1260., 0.,    0.,    0.,    0.,
      1129., 1158., 1187., 1216., 1245., 1274., 1303., 1332., 2572., 2632.,
      2692., 2752., 2812., 2872., 2932., 2992., 4345., 4438., 4531., 4624.,
      3008., 3072., 3136., 3200., 3264., 3328., 3392., 3456., 1689., 1722.,
      1755., 1788., 1821., 1854., 1887., 1920., 0.,    0.,    0.,    0.,
      1709., 1738., 1767., 1796., 1825., 1854., 1883., 1912., 3772., 3832.,
      3892., 3952., 4012., 4072., 4132., 4192., 6205., 6298., 6391., 6484.,
      4288., 4352., 4416., 4480., 4544., 4608., 4672., 4736., 2349., 2382.,
      2415., 2448., 2481., 2514., 2547., 2580., 0.,    0.,    0.,    0.,
      976.,  992.,  1008., 1024., 1040., 1056., 1072., 1088., 2141., 2174.,
      2207., 2240., 2273., 2306., 2339., 2372., 3503., 3554., 3605., 3656.,
      2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332.,
      1350., 1368., 1386., 1404., 1422., 1440., 0.,    0.,    0.,    0.,
      1296., 1312., 1328., 1344., 1360., 1376., 1392., 1408., 2801., 2834.,
      2867., 2900., 2933., 2966., 2999., 3032., 4523., 4574., 4625., 4676.,
      3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692.,
      1710., 1728., 1746., 1764., 1782., 1800., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    155.,    161.,    167.,    464.,    484.,    504.,    524.,
      544.,    564.,    584.,    604.,    1081.,   1123.,   1165.,   1207.,
      1004.,   1040.,   1076.,   1112.,   1771.,   1837.,   1903.,   1969.,
      1464.,   1516.,   1568.,   1620.,   2461.,   2551.,   2641.,   2731.,
      1924.,   1992.,   2060.,   2128.,   2196.,   2264.,   2332.,   2400.,
      488.,    540.,    592.,    644.,    1308.,   1428.,   1548.,   1668.,
      1788.,   1908.,   2028.,   2148.,   3212.,   3416.,   3620.,   3824.,
      2708.,   2860.,   3012.,   3164.,   4592.,   4844.,   5096.,   5348.,
      3628.,   3812.,   3996.,   4180.,   5972.,   6272.,   6572.,   6872.,
      4548.,   4764.,   4980.,   5196.,   5412.,   5628.,   5844.,   6060.,
      1528.,   1580.,   1632.,   1684.,   3708.,   3828.,   3948.,   4068.,
      4188.,   4308.,   4428.,   4548.,   7292.,   7496.,   7700.,   7904.,
      5748.,   5900.,   6052.,   6204.,   9632.,   9884.,   10136.,  10388.,
      7308.,   7492.,   7676.,   7860.,   11972.,  12272.,  12572.,  12872.,
      8868.,   9084.,   9300.,   9516.,   9732.,   9948.,   10164.,  10380.,
      2977.,   3115.,   3253.,   3391.,   6932.,   7232.,   7532.,   7832.,
      8132.,   8432.,   8732.,   9032.,   13713.,  14199.,  14685.,  15171.,
      10472.,  10820.,  11168.,  11516.,  17223.,  17781.,  18339.,  18897.,
      12812.,  13208.,  13604.,  14000.,  20733.,  21363.,  21993.,  22623.,
      15152.,  15596.,  16040.,  16484.,  16928.,  17372.,  17816.,  18260.,
      5108.,   5240.,   5372.,   5504.,   10868.,  11148.,  11428.,  11708.,
      11988.,  12268.,  12548.,  12828.,  18992.,  19436.,  19880.,  20324.,
      13548.,  13860.,  14172.,  14484.,  21332.,  21824.,  22316.,  22808.,
      15108.,  15452.,  15796.,  16140.,  23672.,  24212.,  24752.,  25292.,
      16668.,  17044.,  17420.,  17796.,  18172.,  18548.,  18924.,  19300.,
      8347.,   8605.,   8863.,   9121.,   17672.,  18212.,  18752.,  19292.,
      19832.,  20372.,  20912.,  21452.,  31263.,  32109.,  32955.,  33801.,
      22172.,  22760.,  23348.,  23936.,  34773.,  35691.,  36609.,  37527.,
      24512.,  25148.,  25784.,  26420.,  38283.,  39273.,  40263.,  41253.,
      26852.,  27536.,  28220.,  28904.,  29588.,  30272.,  30956.,  31640.,
      8688.,   8900.,   9112.,   9324.,   18028.,  18468.,  18908.,  19348.,
      19788.,  20228.,  20668.,  21108.,  30692.,  31376.,  32060.,  32744.,
      21348.,  21820.,  22292.,  22764.,  33032.,  33764.,  34496.,  35228.,
      22908.,  23412.,  23916.,  24420.,  35372.,  36152.,  36932.,  37712.,
      24468.,  25004.,  25540.,  26076.,  26612.,  27148.,  27684.,  28220.,
      12928.,  13140.,  13352.,  13564.,  26828.,  27268.,  27708.,  28148.,
      28588.,  29028.,  29468.,  29908.,  44372.,  45056.,  45740.,  46424.,
      30788.,  31260.,  31732.,  32204.,  47672.,  48404.,  49136.,  49868.,
      32988.,  33492.,  33996.,  34500.,  50972.,  51752.,  52532.,  53312.,
      35188.,  35724.,  36260.,  36796.,  37332.,  37868.,  38404.,  38940.,
      4109.,   4275.,   4441.,   4607.,   8384.,   8724.,   9064.,   9404.,
      9744.,   10084.,  10424.,  10764.,  14881.,  15403.,  15925.,  16447.,
      10204.,  10560.,  10916.,  11272.,  15571.,  16117.,  16663.,  17209.,
      10664.,  11036.,  11408.,  11780.,  16261.,  16831.,  17401.,  17971.,
      11124.,  11512.,  11900.,  12288.,  12676.,  13064.,  13452.,  13840.,
      8408.,   8780.,   9152.,   9524.,   17148.,  17908.,  18668.,  19428.,
      20188.,  20948.,  21708.,  22468.,  30812.,  31976.,  33140.,  34304.,
      21108.,  21900.,  22692.,  23484.,  32192.,  33404.,  34616.,  35828.,
      22028.,  22852.,  23676.,  24500.,  33572.,  34832.,  36092.,  37352.,
      22948.,  23804.,  24660.,  25516.,  26372.,  27228.,  28084.,  28940.,
      15848.,  16220.,  16592.,  16964.,  32348.,  33108.,  33868.,  34628.,
      35388.,  36148.,  36908.,  37668.,  54092.,  55256.,  56420.,  57584.,
      36948.,  37740.,  38532.,  39324.,  56432.,  57644.,  58856.,  60068.,
      38508.,  39332.,  40156.,  40980.,  58772.,  60032.,  61292.,  62552.,
      40068.,  40924.,  41780.,  42636.,  43492.,  44348.,  45204.,  46060.,
      24457.,  25075.,  25693.,  26311.,  49892.,  51152.,  52412.,  53672.,
      54932.,  56192.,  57452.,  58712.,  83913.,  85839.,  87765.,  89691.,
      57272.,  58580.,  59888.,  61196.,  87423.,  89421.,  91419.,  93417.,
      59612.,  60968.,  62324.,  63680.,  90933.,  93003.,  95073.,  97143.,
      61952.,  63356.,  64760.,  66164.,  67568.,  68972.,  70376.,  71780.,
      19428.,  19880.,  20332.,  20784.,  39508.,  40428.,  41348.,  42268.,
      43188.,  44108.,  45028.,  45948.,  65792.,  67196.,  68600.,  70004.,
      44748.,  45700.,  46652.,  47604.,  68132.,  69584.,  71036.,  72488.,
      46308.,  47292.,  48276.,  49260.,  70472.,  71972.,  73472.,  74972.,
      47868.,  48884.,  49900.,  50916.,  51932.,  52948.,  53964.,  54980.,
      29827.,  30565.,  31303.,  32041.,  60632.,  62132.,  63632.,  65132.,
      66632.,  68132.,  69632.,  71132.,  101463., 103749., 106035., 108321.,
      68972.,  70520.,  72068.,  73616.,  104973., 107331., 109689., 112047.,
      71312.,  72908.,  74504.,  76100.,  108483., 110913., 113343., 115773.,
      73652.,  75296.,  76940.,  78584.,  80228.,  81872.,  83516.,  85160.,
      23008.,  23540.,  24072.,  24604.,  46668.,  47748.,  48828.,  49908.,
      50988.,  52068.,  53148.,  54228.,  77492.,  79136.,  80780.,  82424.,
      52548.,  53660.,  54772.,  55884.,  79832.,  81524.,  83216.,  84908.,
      54108.,  55252.,  56396.,  57540.,  82172.,  83912.,  85652.,  87392.,
      55668.,  56844.,  58020.,  59196.,  60372.,  61548.,  62724.,  63900.,
      33648.,  34180.,  34712.,  35244.,  68268.,  69348.,  70428.,  71508.,
      72588.,  73668.,  74748.,  75828.,  110372., 112016., 113660., 115304.,
      74788.,  75900.,  77012.,  78124.,  113672., 115364., 117056., 118748.,
      76988.,  78132.,  79276.,  80420.,  116972., 118712., 120452., 122192.,
      79188.,  80364.,  81540.,  82716.,  83892.,  85068.,  86244.,  87420.,
      8069.,   8395.,   8721.,   9047.,   16304.,  16964.,  17624.,  18284.,
      18944.,  19604.,  20264.,  20924.,  28681.,  29683.,  30685.,  31687.,
      19404.,  20080.,  20756.,  21432.,  29371.,  30397.,  31423.,  32449.,
      19864.,  20556.,  21248.,  21940.,  30061.,  31111.,  32161.,  33211.,
      20324.,  21032.,  21740.,  22448.,  23156.,  23864.,  24572.,  25280.,
      16328.,  17020.,  17712.,  18404.,  32988.,  34388.,  35788.,  37188.,
      38588.,  39988.,  41388.,  42788.,  58412.,  60536.,  62660.,  64784.,
      39508.,  40940.,  42372.,  43804.,  59792.,  61964.,  64136.,  66308.,
      40428.,  41892.,  43356.,  44820.,  61172.,  63392.,  65612.,  67832.,
      41348.,  42844.,  44340.,  45836.,  47332.,  48828.,  50324.,  51820.,
      30168.,  30860.,  31552.,  32244.,  60988.,  62388.,  63788.,  65188.,
      66588.,  67988.,  69388.,  70788.,  100892., 103016., 105140., 107264.,
      68148.,  69580.,  71012.,  72444.,  103232., 105404., 107576., 109748.,
      69708.,  71172.,  72636.,  74100.,  105572., 107792., 110012., 112232.,
      71268.,  72764.,  74260.,  75756.,  77252.,  78748.,  80244.,  81740.,
      45937.,  47035.,  48133.,  49231.,  92852.,  95072.,  97292.,  99512.,
      101732., 103952., 106172., 108392., 154113., 157479., 160845., 164211.,
      104072., 106340., 108608., 110876., 157623., 161061., 164499., 167937.,
      106412., 108728., 111044., 113360., 161133., 164643., 168153., 171663.,
      108752., 111116., 113480., 115844., 118208., 120572., 122936., 125300.,
      33748.,  34520.,  35292.,  36064.,  68148.,  69708.,  71268.,  72828.,
      74388.,  75948.,  77508.,  79068.,  112592., 114956., 117320., 119684.,
      75948.,  77540.,  79132.,  80724.,  114932., 117344., 119756., 122168.,
      77508.,  79132.,  80756.,  82380.,  117272., 119732., 122192., 124652.,
      79068.,  80724.,  82380.,  84036.,  85692.,  87348.,  89004.,  90660.,
      51307.,  52525.,  53743.,  54961.,  103592., 106052., 108512., 110972.,
      113432., 115892., 118352., 120812., 171663., 175389., 179115., 182841.,
      115772., 118280., 120788., 123296., 175173., 178971., 182769., 186567.,
      118112., 120668., 123224., 125780., 178683., 182553., 186423., 190293.,
      120452., 123056., 125660., 128264., 130868., 133472., 136076., 138680.,
      37328.,  38180.,  39032.,  39884.,  75308.,  77028.,  78748.,  80468.,
      82188.,  83908.,  85628.,  87348.,  124292., 126896., 129500., 132104.,
      83748.,  85500.,  87252.,  89004.,  126632., 129284., 131936., 134588.,
      85308.,  87092.,  88876.,  90660.,  128972., 131672., 134372., 137072.,
      86868.,  88684.,  90500.,  92316.,  94132.,  95948.,  97764.,  99580.,
      54368.,  55220.,  56072.,  56924.,  109708., 111428., 113148., 114868.,
      116588., 118308., 120028., 121748., 176372., 178976., 181580., 184184.,
      118788., 120540., 122292., 124044., 179672., 182324., 184976., 187628.,
      120988., 122772., 124556., 126340., 182972., 185672., 188372., 191072.,
      123188., 125004., 126820., 128636., 130452., 132268., 134084., 135900.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,
      325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,
      536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,
      0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,   149.,
      155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,
      584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,
      1112.,  1148.,  1184.,  1220.,  1256.,  721.,   743.,   765.,   787.,
      809.,   831.,   853.,   875.,   0.,     0.,     0.,     0.,     268.,
      304.,   340.,   376.,   412.,   448.,   484.,   520.,   1156.,  1244.,
      1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,
      3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,
      1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,  0.,
      0.,     0.,     0.,     988.,   1024.,  1060.,  1096.,  1132.,  1168.,
      1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,
      3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,
      5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,
      3448.,  3516.,  3584.,  0.,     0.,     0.,     0.,     1708.,  1744.,
      1780.,  1816.,  1852.,  1888.,  1924.,  1960.,  4676.,  4764.,  4852.,
      4940.,  5028.,  5116.,  5204.,  5292.,  9032.,  9188.,  9344.,  9500.,
      7228.,  7348.,  7468.,  7588.,  7708.,  7828.,  7948.,  8068.,  4468.,
      4536.,  4604.,  4672.,  4740.,  4808.,  4876.,  4944.,  0.,     0.,
      0.,     0.,     1823.,  1853.,  1883.,  1913.,  1943.,  1973.,  2003.,
      2033.,  4372.,  4440.,  4508.,  4576.,  4644.,  4712.,  4780.,  4848.,
      7711.,  7825.,  7939.,  8053.,  5744.,  5828.,  5912.,  5996.,  6080.,
      6164.,  6248.,  6332.,  3347.,  3393.,  3439.,  3485.,  3531.,  3577.,
      3623.,  3669.,  0.,     0.,     0.,     0.,     2423.,  2453.,  2483.,
      2513.,  2543.,  2573.,  2603.,  2633.,  5732.,  5800.,  5868.,  5936.,
      6004.,  6072.,  6140.,  6208.,  9991.,  10105., 10219., 10333., 7424.,
      7508.,  7592.,  7676.,  7760.,  7844.,  7928.,  8012.,  4267.,  4313.,
      4359.,  4405.,  4451.,  4497.,  4543.,  4589.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     41.,    95.,    149.,   203.,
      257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,
      1100.,  1216.,  1332.,  1501.,  1687.,  1873.,  2059.,  1124.,  1256.,
      1388.,  1520.,  1652.,  1784.,  1916.,  2048.,  893.,   963.,   1033.,
      1103.,  1173.,  1243.,  1313.,  1383.,  0.,     0.,     0.,     0.,
      1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,  2840.,
      2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  5221.,  5407.,
      5593.,  5779.,  3764.,  3896.,  4028.,  4160.,  4292.,  4424.,  4556.,
      4688.,  2293.,  2363.,  2433.,  2503.,  2573.,  2643.,  2713.,  2783.,
      0.,     0.,     0.,     0.,     2260.,  2392.,  2524.,  2656.,  2788.,
      2920.,  3052.,  3184.,  5908.,  6188.,  6468.,  6748.,  7028.,  7308.,
      7588.,  7868.,  11072., 11516., 11960., 12404., 7948.,  8260.,  8572.,
      8884.,  9196.,  9508.,  9820.,  10132., 4892.,  5056.,  5220.,  5384.,
      5548.,  5712.,  5876.,  6040.,  0.,     0.,     0.,     0.,     4900.,
      5032.,  5164.,  5296.,  5428.,  5560.,  5692.,  5824.,  11508., 11788.,
      12068., 12348., 12628., 12908., 13188., 13468., 19952., 20396., 20840.,
      21284., 14188., 14500., 14812., 15124., 15436., 15748., 16060., 16372.,
      8172.,  8336.,  8500.,  8664.,  8828.,  8992.,  9156.,  9320.,  0.,
      0.,     0.,     0.,     7540.,  7672.,  7804.,  7936.,  8068.,  8200.,
      8332.,  8464.,  17108., 17388., 17668., 17948., 18228., 18508., 18788.,
      19068., 28832., 29276., 29720., 30164., 20428., 20740., 21052., 21364.,
      21676., 21988., 22300., 22612., 11452., 11616., 11780., 11944., 12108.,
      12272., 12436., 12600., 0.,     0.,     0.,     0.,     4739.,  4817.,
      4895.,  4973.,  5051.,  5129.,  5207.,  5285.,  10588., 10752., 10916.,
      11080., 11244., 11408., 11572., 11736., 17611., 17869., 18127., 18385.,
      12344., 12524., 12704., 12884., 13064., 13244., 13424., 13604., 6839.,
      6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,  0.,     0.,
      0.,     0.,     6299.,  6377.,  6455.,  6533.,  6611.,  6689.,  6767.,
      6845.,  13868., 14032., 14196., 14360., 14524., 14688., 14852., 15016.,
      22771., 23029., 23287., 23545., 15944., 16124., 16304., 16484., 16664.,
      16844., 17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,  9189.,
      9283.,  9377.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     77.,    179.,   281.,   383.,   485.,   587.,   689.,   791.,
      976.,   1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2761.,
      3091.,  3421.,  3751.,  1964.,  2192.,  2420.,  2648.,  2876.,  3104.,
      3332.,  3560.,  1505.,  1623.,  1741.,  1859.,  1977.,  2095.,  2213.,
      2331.,  0.,     0.,     0.,     0.,     2117.,  2219.,  2321.,  2423.,
      2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,
      6276.,  6488.,  6700.,  9361.,  9691.,  10021., 10351., 6524.,  6752.,
      6980.,  7208.,  7436.,  7664.,  7892.,  8120.,  3865.,  3983.,  4101.,
      4219.,  4337.,  4455.,  4573.,  4691.,  0.,     0.,     0.,     0.,
      4252.,  4480.,  4708.,  4936.,  5164.,  5392.,  5620.,  5848.,  10660.,
      11132., 11604., 12076., 12548., 13020., 13492., 13964., 19352., 20084.,
      20816., 21548., 13468., 13972., 14476., 14980., 15484., 15988., 16492.,
      16996., 8036.,  8296.,  8556.,  8816.,  9076.,  9336.,  9596.,  9856.,
      0.,     0.,     0.,     0.,     8812.,  9040.,  9268.,  9496.,  9724.,
      9952.,  10180., 10408., 20100., 20572., 21044., 21516., 21988., 22460.,
      22932., 23404., 33992., 34724., 35456., 36188., 23548., 24052., 24556.,
      25060., 25564., 26068., 26572., 27076., 13236., 13496., 13756., 14016.,
      14276., 14536., 14796., 15056., 0.,     0.,     0.,     0.,     13372.,
      13600., 13828., 14056., 14284., 14512., 14740., 14968., 29540., 30012.,
      30484., 30956., 31428., 31900., 32372., 32844., 48632., 49364., 50096.,
      50828., 33628., 34132., 34636., 35140., 35644., 36148., 36652., 37156.,
      18436., 18696., 18956., 19216., 19476., 19736., 19996., 20256., 0.,
      0.,     0.,     0.,     7655.,  7781.,  7907.,  8033.,  8159.,  8285.,
      8411.,  8537.,  16804., 17064., 17324., 17584., 17844., 18104., 18364.,
      18624., 27511., 27913., 28315., 28717., 18944., 19220., 19496., 19772.,
      20048., 20324., 20600., 20876., 10331., 10473., 10615., 10757., 10899.,
      11041., 11183., 11325., 0.,     0.,     0.,     0.,     10175., 10301.,
      10427., 10553., 10679., 10805., 10931., 11057., 22004., 22264., 22524.,
      22784., 23044., 23304., 23564., 23824., 35551., 35953., 36355., 36757.,
      24464., 24740., 25016., 25292., 25568., 25844., 26120., 26396., 13171.,
      13313., 13455., 13597., 13739., 13881., 14023., 14165., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     1030.,    1070.,    1110.,    3300.,    3444.,    3588.,
      3732.,    3876.,    4020.,    4164.,    4308.,    7922.,    8234.,
      8546.,    8858.,    7540.,    7812.,    8084.,    8356.,    13418.,
      13922.,   14426.,   14930.,   11204.,   11604.,   12004.,   12404.,
      18914.,   19610.,   20306.,   21002.,   14868.,   15396.,   15924.,
      16452.,   16980.,   17508.,   18036.,   18564.,   3460.,    3860.,
      4260.,    4660.,    9560.,    10488.,   11416.,   12344.,   13272.,
      14200.,   15128.,   16056.,   24124.,   25708.,   27292.,   28876.,
      20600.,   21784.,   22968.,   24152.,   35116.,   37084.,   39052.,
      41020.,   27928.,   29368.,   30808.,   32248.,   46108.,   48460.,
      50812.,   53164.,   35256.,   36952.,   38648.,   40344.,   42040.,
      43736.,   45432.,   47128.,   11460.,   11860.,   12260.,   12660.,
      28120.,   29048.,   29976.,   30904.,   31832.,   32760.,   33688.,
      34616.,   55804.,   57388.,   58972.,   60556.,   44280.,   45464.,
      46648.,   47832.,   74476.,   76444.,   78412.,   80380.,   56728.,
      58168.,   59608.,   61048.,   93148.,   95500.,   97852.,   100204.,
      69176.,   70872.,   72568.,   74264.,   75960.,   77656.,   79352.,
      81048.,   22610.,   23690.,   24770.,   25850.,   53020.,   55372.,
      57724.,   60076.,   62428.,   64780.,   67132.,   69484.,   105726.,
      109542.,  113358.,  117174.,  81100.,   83836.,   86572.,   89308.,
      133734.,  138126.,  142518.,  146910.,  99772.,   102892.,  106012.,
      109132.,  161742.,  166710.,  171678.,  176646.,  118444.,  121948.,
      125452.,  128956.,  132460.,  135964.,  139468.,  142972.,  40020.,
      41060.,   42100.,   43140.,   85240.,   87448.,   89656.,   91864.,
      94072.,   96280.,   98488.,   100696.,  149164.,  152668.,  156172.,
      159676.,  106520.,  108984.,  111448.,  113912.,  167836.,  171724.,
      175612.,  179500.,  118968.,  121688.,  124408.,  127128.,  186508.,
      190780.,  195052.,  199324.,  131416.,  134392.,  137368.,  140344.,
      143320.,  146296.,  149272.,  152248.,  65450.,   67490.,   69530.,
      71570.,   138700.,  142972.,  147244.,  151516.,  155788.,  160060.,
      164332.,  168604.,  245766.,  252462.,  259158.,  265854.,  174460.,
      179116.,  183772.,  188428.,  273774.,  281046.,  288318.,  295590.,
      193132.,  198172.,  203212.,  208252.,  301782.,  309630.,  317478.,
      325326.,  211804.,  217228.,  222652.,  228076.,  233500.,  238924.,
      244348.,  249772.,  68580.,   70260.,   71940.,   73620.,   142360.,
      145848.,  149336.,  152824.,  156312.,  159800.,  163288.,  166776.,
      242524.,  247948.,  253372.,  258796.,  168760.,  172504.,  176248.,
      179992.,  261196.,  267004.,  272812.,  278620.,  181208.,  185208.,
      189208.,  193208.,  279868.,  286060.,  292252.,  298444.,  193656.,
      197912.,  202168.,  206424.,  210680.,  214936.,  219192.,  223448.,
      102180.,  103860.,  105540.,  107220.,  212120.,  215608.,  219096.,
      222584.,  226072.,  229560.,  233048.,  236536.,  351004.,  356428.,
      361852.,  367276.,  243640.,  247384.,  251128.,  254872.,  377356.,
      383164.,  388972.,  394780.,  261208.,  265208.,  269208.,  273208.,
      403708.,  409900.,  416092.,  422284.,  278776.,  283032.,  287288.,
      291544.,  295800.,  300056.,  304312.,  308568.,  32510.,   33830.,
      35150.,   36470.,   66340.,   69044.,   71748.,   74452.,   77156.,
      79860.,   82564.,   85268.,   117842.,  121994.,  126146.,  130298.,
      80820.,   83652.,   86484.,   89316.,   123338.,  127682.,  132026.,
      136370.,  84484.,   87444.,   90404.,   93364.,   128834.,  133370.,
      137906.,  142442.,  88148.,   91236.,   94324.,   97412.,   100500.,
      103588.,  106676.,  109764.,  66500.,   69460.,   72420.,   75380.,
      135640.,  141688.,  147736.,  153784.,  159832.,  165880.,  171928.,
      177976.,  243964.,  253228.,  262492.,  271756.,  167160.,  173464.,
      179768.,  186072.,  254956.,  264604.,  274252.,  283900.,  174488.,
      181048.,  187608.,  194168.,  265948.,  275980.,  286012.,  296044.,
      181816.,  188632.,  195448.,  202264.,  209080.,  215896.,  222712.,
      229528.,  125700.,  128660.,  131620.,  134580.,  256600.,  262648.,
      268696.,  274744.,  280792.,  286840.,  292888.,  298936.,  429244.,
      438508.,  447772.,  457036.,  293240.,  299544.,  305848.,  312152.,
      447916.,  457564.,  467212.,  476860.,  305688.,  312248.,  318808.,
      325368.,  466588.,  476620.,  486652.,  496684.,  318136.,  324952.,
      331768.,  338584.,  345400.,  352216.,  359032.,  365848.,  193970.,
      198890.,  203810.,  208730.,  395740.,  405772.,  415804.,  425836.,
      435868.,  445900.,  455932.,  465964.,  665886.,  681222.,  696558.,
      711894.,  454540.,  464956.,  475372.,  485788.,  693894.,  709806.,
      725718.,  741630.,  473212.,  484012.,  494812.,  505612.,  721902.,
      738390.,  754878.,  771366.,  491884.,  503068.,  514252.,  525436.,
      536620.,  547804.,  558988.,  570172.,  154260.,  157860.,  161460.,
      165060.,  313720.,  321048.,  328376.,  335704.,  343032.,  350360.,
      357688.,  365016.,  522604.,  533788.,  544972.,  556156.,  355480.,
      363064.,  370648.,  378232.,  541276.,  552844.,  564412.,  575980.,
      367928.,  375768.,  383608.,  391448.,  559948.,  571900.,  583852.,
      595804.,  380376.,  388472.,  396568.,  404664.,  412760.,  420856.,
      428952.,  437048.,  236810.,  242690.,  248570.,  254450.,  481420.,
      493372.,  505324.,  517276.,  529228.,  541180.,  553132.,  565084.,
      805926.,  824142.,  842358.,  860574.,  547900.,  560236.,  572572.,
      584908.,  833934.,  852726.,  871518.,  890310.,  566572.,  579292.,
      592012.,  604732.,  861942.,  881310.,  900678.,  920046.,  585244.,
      598348.,  611452.,  624556.,  637660.,  650764.,  663868.,  676972.,
      182820.,  187060.,  191300.,  195540.,  370840.,  379448.,  388056.,
      396664.,  405272.,  413880.,  422488.,  431096.,  615964.,  629068.,
      642172.,  655276.,  417720.,  426584.,  435448.,  444312.,  634636.,
      648124.,  661612.,  675100.,  430168.,  439288.,  448408.,  457528.,
      653308.,  667180.,  681052.,  694924.,  442616.,  451992.,  461368.,
      470744.,  480120.,  489496.,  498872.,  508248.,  267620.,  271860.,
      276100.,  280340.,  543000.,  551608.,  560216.,  568824.,  577432.,
      586040.,  594648.,  603256.,  878044.,  891148.,  904252.,  917356.,
      595000.,  603864.,  612728.,  621592.,  904396.,  917884.,  931372.,
      944860.,  612568.,  621688.,  630808.,  639928.,  930748.,  944620.,
      958492.,  972364.,  630136.,  639512.,  648888.,  658264.,  667640.,
      677016.,  686392.,  695768.,  64030.,   66630.,   69230.,   71830.,
      129380.,  134644.,  139908.,  145172.,  150436.,  155700.,  160964.,
      166228.,  227762.,  235754.,  243746.,  251738.,  154100.,  159492.,
      164884.,  170276.,  233258.,  241442.,  249626.,  257810.,  157764.,
      163284.,  168804.,  174324.,  238754.,  247130.,  255506.,  263882.,
      161428.,  167076.,  172724.,  178372.,  184020.,  189668.,  195316.,
      200964.,  129540.,  135060.,  140580.,  146100.,  261720.,  272888.,
      284056.,  295224.,  306392.,  317560.,  328728.,  339896.,  463804.,
      480748.,  497692.,  514636.,  313720.,  325144.,  336568.,  347992.,
      474796.,  492124.,  509452.,  526780.,  321048.,  332728.,  344408.,
      356088.,  485788.,  503500.,  521212.,  538924.,  328376.,  340312.,
      352248.,  364184.,  376120.,  388056.,  399992.,  411928.,  239940.,
      245460.,  250980.,  256500.,  485080.,  496248.,  507416.,  518584.,
      529752.,  540920.,  552088.,  563256.,  802684.,  819628.,  836572.,
      853516.,  542200.,  553624.,  565048.,  576472.,  821356.,  838684.,
      856012.,  873340.,  554648.,  566328.,  578008.,  589688.,  840028.,
      857740.,  875452.,  893164.,  567096.,  579032.,  590968.,  602904.,
      614840.,  626776.,  638712.,  650648.,  365330.,  374090.,  382850.,
      391610.,  738460.,  756172.,  773884.,  791596.,  809308.,  827020.,
      844732.,  862444.,  1226046., 1252902., 1279758., 1306614., 827980.,
      846076.,  864172.,  882268.,  1254054., 1281486., 1308918., 1336350.,
      846652.,  865132.,  883612.,  902092.,  1282062., 1310070., 1338078.,
      1366086., 865324.,  884188.,  903052.,  921916.,  940780.,  959644.,
      978508.,  997372.,  268500.,  274660.,  280820.,  286980.,  542200.,
      554648.,  567096.,  579544.,  591992.,  604440.,  616888.,  629336.,
      896044.,  914908.,  933772.,  952636.,  604440.,  617144.,  629848.,
      642552.,  914716.,  933964.,  953212.,  972460.,  616888.,  629848.,
      642808.,  655768.,  933388.,  953020.,  972652.,  992284.,  629336.,
      642552.,  655768.,  668984.,  682200.,  695416.,  708632.,  721848.,
      408170.,  417890.,  427610.,  437330.,  824140.,  843772.,  863404.,
      883036.,  902668.,  922300.,  941932.,  961564.,  1366086., 1395822.,
      1425558., 1455294., 921340.,  941356.,  961372.,  981388.,  1394094.,
      1424406., 1454718., 1485030., 940012.,  960412.,  980812.,  1001212.,
      1422102., 1452990., 1483878., 1514766., 958684.,  979468.,  1000252.,
      1021036., 1041820., 1062604., 1083388., 1104172., 297060.,  303860.,
      310660.,  317460.,  599320.,  613048.,  626776.,  640504.,  654232.,
      667960.,  681688.,  695416.,  989404.,  1010188., 1030972., 1051756.,
      666680.,  680664.,  694648.,  708632.,  1008076., 1029244., 1050412.,
      1071580., 679128.,  693368.,  707608.,  721848.,  1026748., 1048300.,
      1069852., 1091404., 691576.,  706072.,  720568.,  735064.,  749560.,
      764056.,  778552.,  793048.,  433060.,  439860.,  446660.,  453460.,
      873880.,  887608.,  901336.,  915064.,  928792.,  942520.,  956248.,
      969976.,  1405084., 1425868., 1446652., 1467436., 946360.,  960344.,
      974328.,  988312.,  1431436., 1452604., 1473772., 1494940., 963928.,
      978168.,  992408.,  1006648., 1457788., 1479340., 1500892., 1522444.,
      981496.,  995992.,  1010488., 1024984., 1039480., 1053976., 1068472.,
      1082968.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1682.,   1994.,   2306.,   2618.,   2100.,   2372.,   2644.,   2916.,
      3188.,   3460.,   3732.,   4004.,   2126.,   2294.,   2462.,   2630.,
      2798.,   2966.,   3134.,   3302.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      8628.,   8900.,   9172.,   9444.,   5486.,   5654.,   5822.,   5990.,
      6158.,   6326.,   6494.,   6662.,   0.,      0.,      0.,      0.,
      1780.,   2052.,   2324.,   2596.,   2868.,   3140.,   3412.,   3684.,
      8376.,   9048.,   9720.,   10392.,  11064.,  11736.,  12408.,  13080.,
      20812.,  22012.,  23212.,  24412.,  18392.,  19320.,  20248.,  21176.,
      22104.,  23032.,  23960.,  24888.,  13396.,  13924.,  14452.,  14980.,
      15508.,  16036.,  16564.,  17092.,  0.,      0.,      0.,      0.,
      7220.,   7492.,   7764.,   8036.,   8308.,   8580.,   8852.,   9124.,
      21816.,  22488.,  23160.,  23832.,  24504.,  25176.,  25848.,  26520.,
      44812.,  46012.,  47212.,  48412.,  36952.,  37880.,  38808.,  39736.,
      40664.,  41592.,  42520.,  43448.,  23956.,  24484.,  25012.,  25540.,
      26068.,  26596.,  27124.,  27652.,  0.,      0.,      0.,      0.,
      12660.,  12932.,  13204.,  13476.,  13748.,  14020.,  14292.,  14564.,
      35256.,  35928.,  36600.,  37272.,  37944.,  38616.,  39288.,  39960.,
      68812.,  70012.,  71212.,  72412.,  55512.,  56440.,  57368.,  58296.,
      59224.,  60152.,  61080.,  62008.,  34516.,  35044.,  35572.,  36100.,
      36628.,  37156.,  37684.,  38212.,  0.,      0.,      0.,      0.,
      14070.,  14302.,  14534.,  14766.,  14998.,  15230.,  15462.,  15694.,
      33876.,  34404.,  34932.,  35460.,  35988.,  36516.,  37044.,  37572.,
      59930.,  60818.,  61706.,  62594.,  44772.,  45428.,  46084.,  46740.,
      47396.,  48052.,  48708.,  49364.,  26150.,  26510.,  26870.,  27230.,
      27590.,  27950.,  28310.,  28670.,  0.,      0.,      0.,      0.,
      18710.,  18942.,  19174.,  19406.,  19638.,  19870.,  20102.,  20334.,
      44436.,  44964.,  45492.,  46020.,  46548.,  47076.,  47604.,  48132.,
      77690.,  78578.,  79466.,  80354.,  57892.,  58548.,  59204.,  59860.,
      60516.,  61172.,  61828.,  62484.,  33350.,  33710.,  34070.,  34430.,
      34790.,  35150.,  35510.,  35870.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      270.,    694.,    1118.,   1542.,   1966.,   2390.,   2814.,   3238.,
      3972.,   4884.,   5796.,   6708.,   7620.,   8532.,   9444.,   10356.,
      11618.,  13082.,  14546.,  16010.,  8724.,   9764.,   10804.,  11844.,
      12884.,  13924.,  14964.,  16004.,  6974.,   7526.,   8078.,   8630.,
      9182.,   9734.,   10286.,  10838.,  0.,      0.,      0.,      0.,
      8750.,   9174.,   9598.,   10022.,  10446.,  10870.,  11294.,  11718.,
      22212.,  23124.,  24036.,  24948.,  25860.,  26772.,  27684.,  28596.,
      40898.,  42362.,  43826.,  45290.,  29524.,  30564.,  31604.,  32644.,
      33684.,  34724.,  35764.,  36804.,  18014.,  18566.,  19118.,  19670.,
      20222.,  20774.,  21326.,  21878.,  0.,      0.,      0.,      0.,
      17620.,  18660.,  19700.,  20740.,  21780.,  22820.,  23860.,  24900.,
      46200.,  48408.,  50616.,  52824.,  55032.,  57240.,  59448.,  61656.,
      86764.,  90268.,  93772.,  97276.,  62360.,  64824.,  67288.,  69752.,
      72216.,  74680.,  77144.,  79608.,  38452.,  39748.,  41044.,  42340.,
      43636.,  44932.,  46228.,  47524.,  0.,      0.,      0.,      0.,
      38420.,  39460.,  40500.,  41540.,  42580.,  43620.,  44660.,  45700.,
      90360.,  92568.,  94776.,  96984.,  99192.,  101400., 103608., 105816.,
      156844., 160348., 163852., 167356., 111640., 114104., 116568., 119032.,
      121496., 123960., 126424., 128888., 64372.,  65668.,  66964.,  68260.,
      69556.,  70852.,  72148.,  73444.,  0.,      0.,      0.,      0.,
      59220.,  60260.,  61300.,  62340.,  63380.,  64420.,  65460.,  66500.,
      134520., 136728., 138936., 141144., 143352., 145560., 147768., 149976.,
      226924., 230428., 233932., 237436., 160920., 163384., 165848., 168312.,
      170776., 173240., 175704., 178168., 90292.,  91588.,  92884.,  94180.,
      95476.,  96772.,  98068.,  99364.,  0.,      0.,      0.,      0.,
      37350.,  37966.,  38582.,  39198.,  39814.,  40430.,  41046.,  41662.,
      83508.,  84804.,  86100.,  87396.,  88692.,  89988.,  91284.,  92580.,
      138986., 141026., 143066., 145106., 97476.,  98900.,  100324., 101748.,
      103172., 104596., 106020., 107444., 54038.,  54782.,  55526.,  56270.,
      57014.,  57758.,  58502.,  59246.,  0.,      0.,      0.,      0.,
      49670.,  50286.,  50902.,  51518.,  52134.,  52750.,  53366.,  53982.,
      109428., 110724., 112020., 113316., 114612., 115908., 117204., 118500.,
      179786., 181826., 183866., 185906., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   3742.,   4550.,   5358.,   6166.,
      7524.,   9204.,   10884.,  12564.,  14244.,  15924.,  17604.,  19284.,
      21554.,  24170.,  26786.,  29402.,  15348.,  17156.,  18964.,  20772.,
      22580.,  24388.,  26196.,  28004.,  11822.,  12758.,  13694.,  14630.,
      15566.,  16502.,  17438.,  18374.,  0.,      0.,      0.,      0.,
      16670.,  17478.,  18286.,  19094.,  19902.,  20710.,  21518.,  22326.,
      41124.,  42804.,  44484.,  46164.,  47844.,  49524.,  51204.,  52884.,
      73874.,  76490.,  79106.,  81722.,  51508.,  53316.,  55124.,  56932.,
      58740.,  60548.,  62356.,  64164.,  30542.,  31478.,  32414.,  33350.,
      34286.,  35222.,  36158.,  37094.,  0.,      0.,      0.,      0.,
      33460.,  35268.,  37076.,  38884.,  40692.,  42500.,  44308.,  46116.,
      84024.,  87768.,  91512.,  95256.,  99000.,  102744., 106488., 110232.,
      152716., 158524., 164332., 170140., 106328., 110328., 114328., 118328.,
      122328., 126328., 130328., 134328., 63508.,  65572.,  67636.,  69700.,
      71764.,  73828.,  75892.,  77956.,  0.,      0.,      0.,      0.,
      69620.,  71428.,  73236.,  75044.,  76852.,  78660.,  80468.,  82276.,
      158904., 162648., 166392., 170136., 173880., 177624., 181368., 185112.,
      268876., 274684., 280492., 286300., 186328., 190328., 194328., 198328.,
      202328., 206328., 210328., 214328., 104788., 106852., 108916., 110980.,
      113044., 115108., 117172., 119236., 0.,      0.,      0.,      0.,
      105780., 107588., 109396., 111204., 113012., 114820., 116628., 118436.,
      233784., 237528., 241272., 245016., 248760., 252504., 256248., 259992.,
      385036., 390844., 396652., 402460., 266328., 270328., 274328., 278328.,
      282328., 286328., 290328., 294328., 146068., 148132., 150196., 152260.,
      154324., 156388., 158452., 160516., 0.,      0.,      0.,      0.,
      60630.,  61630.,  62630.,  63630.,  64630.,  65630.,  66630.,  67630.,
      133140., 135204., 137268., 139332., 141396., 143460., 145524., 147588.,
      218042., 221234., 224426., 227618., 150180., 152372., 154564., 156756.,
      158948., 161140., 163332., 165524., 81926.,  83054.,  84182.,  85310.,
      86438.,  87566.,  88694.,  89822.,  0.,      0.,      0.,      0.,
      80630.,  81630.,  82630.,  83630.,  84630.,  85630.,  86630.,  87630.,
      174420., 176484., 178548., 180612., 182676., 184740., 186804., 188868.,
      281882., 285074., 288266., 291458., 194020., 196212., 198404., 200596.,
      202788., 204980., 207172., 209364., 104486., 105614., 106742., 107870.,
      108998., 110126., 111254., 112382., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968.,  1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      300.,  343.,  524.,  359.,  548.,  375.,  422.,  616.,  710.,  1084.,
      742.,  1132., 774.,  876.,  1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1961., 2138., 3258., 2216., 3375.,
      2294., 2483., 1470., 1596., 2428., 1648., 2506., 1700., 1834., 2249.,
      2450., 3726., 2528., 3843., 2606., 2819., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      580.,  663.,  1004., 679.,  1028., 695.,  782.,  1176., 1350., 2044.,
      1382., 2092., 1414., 1596., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 3113., 3386., 5130., 3464., 5247., 3542., 3827., 2238., 2428.,
      3676., 2480., 3754., 2532., 2730., 3401., 3698., 5598., 3776., 5715.,
      3854., 4163., 2430., 2636., 3988., 2688., 4066., 2740., 2954., 3689.,
      4010., 6066., 4088., 6183., 4166., 4499., 2622., 2844., 4300., 2896.,
      4378., 2948., 3178., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,    10.,   6.,    7.,    20.,   23.,
      26.,  18.,  20.,  14.,  18.,  48.,   58.,   68.,   44.,   50.,   34.,
      38.,  98.,  108., 118., 74.,  80.,   59.,   68.,   169.,  190.,  211.,
      128., 140., 78.,  86.,  194., 212.,  230.,  130.,  140.,  118.,  126.,
      284., 302., 320., 180., 190., 80.,   85.,   186.,  197.,  208.,  114.,
      120., 105., 110., 241., 252., 263.,  144.,  150.,  0.,    0.,    0.,
      0.,   0.,   0.,   0.,   7.,   14.,   29.,   44.,   59.,   32.,   40.,
      42.,  49.,  104., 119., 134., 72.,   80.,   86.,   102.,  216.,  250.,
      284., 152., 170., 166., 182., 386.,  420.,  454.,  242.,  260.,  257.,
      284., 601., 658., 715., 380., 410.,  210.,  230.,  482.,  524.,  566.,
      298., 320., 310., 330., 692., 734.,  776.,  408.,  430.,  176.,  187.,
      390., 413., 436., 228., 240., 231.,  242.,  505.,  528.,  551.,  288.,
      300., 0.,   0.,   0.,   0.,   0.,    0.,    0.,    13.,   26.,   53.,
      80.,  107., 56.,  70.,  78.,  91.,   188.,  215.,  242.,  126.,  140.,
      158., 186., 384., 442., 500., 260.,  290.,  298.,  326.,  674.,  732.,
      790., 410., 440., 455., 500., 1033., 1126., 1219., 632.,  680.,  342.,
      374., 770., 836., 902., 466., 500.,  502.,  534.,  1100., 1166., 1232.,
      636., 670., 272., 289., 594., 629.,  664.,  342.,  360.,  357.,  374.,
      769., 804., 839., 432., 450., 0.,    0.,    0.,    0.,    0.,    0.,
      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  6172.,  6808.,  10611., 7420.,  11529.,
      8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 2288.,  2628.,
      4015.,  2752.,  4201.,  2876.,  3248.,  4688.,  5432.,  8294.,  5680.,
      8666.,  5928.,  6736.,  8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 15196., 16600., 25299.,
      17212., 26217., 17824., 19324., 11416., 12416., 18890., 12824., 19502.,
      13232., 14296., 17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 18560., 19688.,
      29918., 20256., 30770., 20824., 22016., 4448.,  5108.,  7735.,  5232.,
      7921.,  5356.,  6048.,  9008.,  10392., 15734., 10640., 16106., 10888.,
      12336., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 24220.,
      26392., 39987., 27004., 40905., 27616., 29884., 17432., 18944., 28682.,
      19352., 29294., 19760., 21336., 26476., 28840., 43659., 29452., 44577.,
      30064., 32524., 18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      28732., 31288., 47331., 31900., 48249., 32512., 35164., 20440., 22208.,
      33578., 22616., 34190., 23024., 24856., 29280., 31048., 46958., 31616.,
      47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  311.,  365.,  776.,
      892.,  1008., 543.,  605.,  634.,  758.,  1608., 1872., 2136., 1146.,
      1286., 1254., 1378., 2928., 3192., 3456., 1846., 1986., 1939., 2149.,
      4556., 5000., 5444., 2899., 3133., 1598., 1754., 3680., 4008., 4336.,
      2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355.,
      1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  587.,  689.,  1424.,
      1636., 1848., 963.,  1073., 1186., 1406., 2904., 3360., 3816., 1986.,
      2222., 2286., 2506., 5184., 5640., 6096., 3166., 3402., 3487., 3841.,
      7940., 8672., 9404., 4879., 5257., 2630., 2882., 5936., 6456., 6976.,
      3606., 3874., 3890., 4142., 8536., 9056., 9576., 4946., 5214., 2111.,
      2245., 4616., 4892., 5168., 2663., 2805., 2781., 2915., 5996., 6272.,
      6548., 3373., 3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,   2632.,
      3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,   7432.,
      13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,  24822.,
      19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,  23592.,
      37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,  61182.,
      43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,
      43112.,  48188.,  53228.,  82998.,  58076.,  90270.,  62924.,  68732.,
      42344.,  46216.,  71428.,  49448.,  76276.,  52680.,  57064.,  61704.,
      65576.,  101428., 70088.,  108196., 74600.,  78984.,  17860.,  20564.,
      31418.,  21540.,  32882.,  22516.,  25476.,  36552.,  42472.,  64852.,
      44424.,  67780.,  46376.,  52808.,  66152.,  72072.,  110212., 75304.,
      115060., 78536.,  84968.,  101756., 111404., 170262., 116252., 177534.,
      121100., 131516., 78056.,  85000.,  129604., 88232.,  134452., 91464.,
      98920.,  119612., 130796., 199350., 135644., 206622., 140492., 152444.,
      89960.,  97928.,  148996., 101160., 153844., 104392., 112872., 137468.,
      150188., 228438., 155036., 235710., 159884., 173372., 101864., 110856.,
      168388., 114088., 173236., 117320., 126824., 146824., 155816., 236788.,
      160328., 243556., 164840., 174344., 34820.,  40084.,  60698.,  41060.,
      62162.,  42036.,  47556.,  70472.,  81512.,  123412., 83464.,  126340.,
      85416.,  96968.,  125672., 136712., 207172., 139944., 212020., 143176.,
      154728., 191036., 208364., 315702., 213212., 322974., 218060., 236156.,
      137576., 149640., 226564., 152872., 231412., 156104., 168680., 208892.,
      227756., 344790., 232604., 352062., 237452., 257084., 149480., 162568.,
      245956., 165800., 250804., 169032., 182632., 226748., 247148., 373878.,
      251996., 381150., 256844., 278012., 161384., 175496., 265348., 178728.,
      270196., 181960., 196584., 231944., 246056., 372148., 250568., 378916.,
      255080., 269704.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2810.,  3314.,  8668.,  9868.,  11068., 6938.,  7634.,  4300.,
      4764.,  10888., 11944., 13000., 7436.,  8028.,  6620.,  7084.,  16168.,
      17224., 18280., 10396., 10988., 4630.,  4926.,  10852., 11508., 12164.,
      6710.,  7070.,  6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,   694.,
      1428.,  2340.,  3252.,  1774.,  2262.,  2390.,  2814.,  5988.,  6900.,
      7812.,  4214.,  4702.,  4860.,  5836.,  12392., 14472., 16552., 8892.,
      9996.,  9740.,  10716., 22792., 24872., 26952., 14412., 15516., 15050.,
      16706., 35452., 38956., 42460., 22634., 24482., 12460., 13692., 28744.,
      31336., 33928., 17900., 19260., 18620., 19852., 41704., 44296., 46888.,
      24700., 26060., 10630., 11310., 23620., 25044., 26468., 13862., 14606.,
      14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     510.,   1318.,  2676.,  4356.,
      6036.,  3166.,  4038.,  4550.,  5358.,  11076., 12756., 14436., 7526.,
      8398.,  9180.,  10924., 22568., 26184., 29800., 15516., 17388., 17900.,
      19644., 40648., 44264., 47880., 24876., 26748., 27290., 30098., 62236.,
      68044., 73852., 38330., 41330., 20620., 22620., 46600., 50728., 54856.,
      28364., 30492., 30620., 32620., 67240., 71368., 75496., 39004., 41132.,
      16630., 17694., 36388., 38580., 40772., 21014., 22142., 21950., 23014.,
      47348., 49540., 51732., 26654., 27782., 0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37.,    40.,    43.,   46.,    82.,    88.,    73.,    78.,    127.,
      136.,   103.,   110.,  117.,   124.,   98.,    112.,   126.,   140.,
      224.,   248.,   186.,  204.,   314.,   344.,   246.,   268.,   290.,
      312.,   238.,   252.,  266.,   280.,   464.,   488.,   366.,   384.,
      614.,   644.,   466.,  488.,   510.,   532.,   433.,   466.,   499.,
      532.,   846.,   900.,  649.,   688.,   1071.,  1134.,  799.,   844.,
      889.,   934.,   606.,  636.,   666.,   696.,   1064.,  1112.,  766.,
      800.,   1214.,  1268., 866.,   904.,   942.,   980.,   985.,   1042.,
      1099.,  1156.,  1746., 1836.,  1249.,  1312.,  1971.,  2070.,  1399.,
      1468.,  1537.,  1606., 974.,   1020.,  1066.,  1112.,  1664.,  1736.,
      1166.,  1216.,  1814., 1892.,  1266.,  1320.,  1374.,  1428.,  1537.,
      1618.,  1699.,  1780., 2646.,  2772.,  1849.,  1936.,  2871.,  3006.,
      1999.,  2092.,  2185., 2278.,  1342.,  1404.,  1466.,  1528.,  2264.,
      2360.,  1566.,  1632., 2414.,  2516.,  1666.,  1736.,  1806.,  1876.,
      1962.,  2024.,  2086., 2148.,  3224.,  3320.,  2226.,  2292.,  3434.,
      3536.,  2366.,  2436., 2506.,  2576.,  557.,   600.,   643.,   686.,
      982.,   1048.,  673.,  718.,   1027.,  1096.,  703.,   750.,   797.,
      844.,   1138.,  1232., 1326.,  1420.,  2024.,  2168.,  1386.,  1484.,
      2114.,  2264.,  1446., 1548.,  1650.,  1752.,  2078.,  2172.,  2266.,
      2360.,  3464.,  3608., 2366.,  2464.,  3614.,  3764.,  2466.,  2568.,
      2670.,  2772.,  3193., 3346.,  3499.,  3652.,  5346.,  5580.,  3649.,
      3808.,  5571.,  5814., 3799.,  3964.,  4129.,  4294.,  2446.,  2556.,
      2666.,  2776.,  4064., 4232.,  2766.,  2880.,  4214.,  4388.,  2866.,
      2984.,  3102.,  3220., 3745.,  3922.,  4099.,  4276.,  6246.,  6516.,
      4249.,  4432.,  6471., 6750.,  4399.,  4588.,  4777.,  4966.,  2814.,
      2940.,  3066.,  3192., 4664.,  4856.,  3166.,  3296.,  4814.,  5012.,
      3266.,  3400.,  3534., 3668.,  4297.,  4498.,  4699.,  4900.,  7146.,
      7452.,  4849.,  5056., 7371.,  7686.,  4999.,  5212.,  5425.,  5638.,
      3182.,  3324.,  3466., 3608.,  5264.,  5480.,  3566.,  3712.,  5414.,
      5636.,  3666.,  3816., 3966.,  4116.,  4602.,  4744.,  4886.,  5028.,
      7424.,  7640.,  5026., 5172.,  7634.,  7856.,  5166.,  5316.,  5466.,
      5616.,  1077.,  1160., 1243.,  1326.,  1882.,  2008.,  1273.,  1358.,
      1927.,  2056.,  1303., 1390.,  1477.,  1564.,  2178.,  2352.,  2526.,
      2700.,  3824.,  4088., 2586.,  2764.,  3914.,  4184.,  2646.,  2828.,
      3010.,  3192.,  3918., 4092.,  4266.,  4440.,  6464.,  6728.,  4366.,
      4544.,  6614.,  6884., 4466.,  4648.,  4830.,  5012.,  5953.,  6226.,
      6499.,  6772.,  9846., 10260., 6649.,  6928.,  10071., 10494., 6799.,
      7084.,  7369.,  7654., 4286.,  4476.,  4666.,  4856.,  7064.,  7352.,
      4766.,  4960.,  7214., 7508.,  4866.,  5064.,  5262.,  5460.,  6505.,
      6802.,  7099.,  7396., 10746., 11196., 7249.,  7552.,  10971., 11430.,
      7399.,  7708.,  8017., 8326.,  4654.,  4860.,  5066.,  5272.,  7664.,
      7976.,  5166.,  5376., 7814.,  8132.,  5266.,  5480.,  5694.,  5908.,
      7057.,  7378.,  7699., 8020.,  11646., 12132., 7849.,  8176.,  11871.,
      12366., 7999.,  8332., 8665.,  8998.,  5022.,  5244.,  5466.,  5688.,
      8264.,  8600.,  5566., 5792.,  8414.,  8756.,  5666.,  5896.,  6126.,
      6356.,  7242.,  7464., 7686.,  7908.,  11624., 11960., 7826.,  8052.,
      11834., 12176., 7966., 8196.,  8426.,  8656.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      14.,   16.,   18.,   20.,   11.,   12.,   13.,   14.,   37.,   40.,
      43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,   24.,   28.,
      32.,   36.,   86.,   96.,   106.,  116.,  126.,  136.,  82.,   88.,
      94.,   100.,  64.,   68.,   72.,   76.,   186.,  196.,  206.,  216.,
      226.,  236.,  142.,  148.,  154.,  160.,  109.,  118.,  127.,  136.,
      317.,  338.,  359.,  380.,  401.,  422.,  244.,  256.,  268.,  280.,
      148.,  156.,  164.,  172.,  370.,  388.,  406.,  424.,  442.,  460.,
      250.,  260.,  270.,  280.,  228.,  236.,  244.,  252.,  550.,  568.,
      586.,  604.,  622.,  640.,  350.,  360.,  370.,  380.,  155.,  160.,
      165.,  170.,  361.,  372.,  383.,  394.,  405.,  416.,  222.,  228.,
      234.,  240.,  205.,  210.,  215.,  220.,  471.,  482.,  493.,  504.,
      515.,  526.,  282.,  288.,  294.,  300.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   43.,   58.,   73.,   88.,   103.,  118.,
      56.,   64.,   72.,   80.,   77.,   84.,   91.,   98.,   193.,  208.,
      223.,  238.,  253.,  268.,  136.,  144.,  152.,  160.,  156.,  172.,
      188.,  204.,  398.,  432.,  466.,  500.,  534.,  568.,  286.,  304.,
      322.,  340.,  316.,  332.,  348.,  364.,  738.,  772.,  806.,  840.,
      874.,  908.,  466.,  484.,  502.,  520.,  487.,  514.,  541.,  568.,
      1145., 1202., 1259., 1316., 1373., 1430., 730.,  760.,  790.,  820.,
      400.,  420.,  440.,  460.,  922.,  964.,  1006., 1048., 1090., 1132.,
      574.,  596.,  618.,  640.,  600.,  620.,  640.,  660.,  1342., 1384.,
      1426., 1468., 1510., 1552., 794.,  816.,  838.,  860.,  341.,  352.,
      363.,  374.,  757.,  780.,  803.,  826.,  849.,  872.,  444.,  456.,
      468.,  480.,  451.,  462.,  473.,  484.,  987.,  1010., 1033., 1056.,
      1079., 1102., 564.,  576.,  588.,  600.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   79.,   106.,  133.,  160.,  187.,  214.,
      98.,   112.,  126.,  140.,  143.,  156.,  169.,  182.,  349.,  376.,
      403.,  430.,  457.,  484.,  238.,  252.,  266.,  280.,  288.,  316.,
      344.,  372.,  710.,  768.,  826.,  884.,  942.,  1000., 490.,  520.,
      550.,  580.,  568.,  596.,  624.,  652.,  1290., 1348., 1406., 1464.,
      1522., 1580., 790.,  820.,  850.,  880.,  865.,  910.,  955.,  1000.,
      1973., 2066., 2159., 2252., 2345., 2438., 1216., 1264., 1312., 1360.,
      652.,  684.,  716.,  748.,  1474., 1540., 1606., 1672., 1738., 1804.,
      898.,  932.,  966.,  1000., 972.,  1004., 1036., 1068., 2134., 2200.,
      2266., 2332., 2398., 2464., 1238., 1272., 1306., 1340., 527.,  544.,
      561.,  578.,  1153., 1188., 1223., 1258., 1293., 1328., 666.,  684.,
      702.,  720.,  697.,  714.,  731.,  748.,  1503., 1538., 1573., 1608.,
      1643., 1678., 846.,  864.,  882.,  900.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      240.,   260.,   280.,   300.,   557.,   599.,   516.,   552.,   911.,
      977.,   752.,   804.,   856.,   908.,   656.,   760.,   864.,   968.,
      1570.,  1750.,  1336.,  1472.,  2278.,  2506.,  1808.,  1976.,  2144.,
      2312.,  1696.,  1800.,  1904.,  2008.,  3370.,  3550.,  2696.,  2832.,
      4558.,  4786.,  3488.,  3656.,  3824.,  3992.,  3128.,  3380.,  3632.,
      3884.,  6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,
      6704.,  7052.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,  5864.,
      6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  7496.,  7940.,
      8384.,  8828.,  13347., 14049., 9572.,  10064., 15129., 15903., 10760.,
      11300., 11840., 12380., 7520.,  7880.,  8240.,  8600.,  12874., 13438.,
      9032.,  9424.,  14062., 14674., 9824.,  10248., 10672., 11096., 11864.,
      12500., 13136., 13772., 20475., 21465., 14324., 15008., 22257., 23319.,
      15512., 16244., 16976., 17708., 10432., 10920., 11408., 11896., 17626.,
      18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648.,
      15312., 15800., 16288., 16776., 25186., 25942., 17400., 17920., 26854.,
      27658., 18512., 19064., 19616., 20168., 4320.,  4660.,  5000.,  5340.,
      7637.,  8159.,  5236.,  5592.,  7991.,  8537.,  5472.,  5844.,  6216.,
      6588.,  8816.,  9560.,  10304., 11048., 15730., 16870., 10776., 11552.,
      16438., 17626., 11248., 12056., 12864., 13672., 16256., 17000., 17744.,
      18488., 27130., 28270., 18536., 19312., 28318., 29506., 19328., 20136.,
      20944., 21752., 24968., 26180., 27392., 28604., 41859., 43713., 28580.,
      29840., 43641., 45567., 29768., 31076., 32384., 33692., 19168., 20040.,
      20912., 21784., 31882., 33214., 21704., 22608., 33070., 34450., 22496.,
      23432., 24368., 25304., 29336., 30740., 32144., 33548., 48987., 51129.,
      33332., 34784., 50769., 52983., 34520., 36020., 37520., 39020., 22080.,
      23080., 24080., 25080., 36634., 38158., 24872., 25904., 37822., 39394.,
      25664., 26728., 27792., 28856., 33704., 35300., 36896., 38492., 56115.,
      58545., 38084., 39728., 57897., 60399., 39272., 40964., 42656., 44348.,
      24992., 26120., 27248., 28376., 41386., 43102., 28040., 29200., 42574.,
      44338., 28832., 30024., 31216., 32408., 36272., 37400., 38528., 39656.,
      58546., 60262., 39640., 40800., 60214., 61978., 40752., 41944., 43136.,
      44328., 8400.,  9060.,  9720.,  10380., 14717., 15719., 9956.,  10632.,
      15071., 16097., 10192., 10884., 11576., 12268., 16976., 18360., 19744.,
      21128., 29890., 31990., 20216., 21632., 30598., 32746., 20688., 22136.,
      23584., 25032., 30816., 32200., 33584., 34968., 50890., 52990., 34376.,
      35792., 52078., 54226., 35168., 36616., 38064., 39512., 46808., 48980.,
      51152., 53324., 77499., 80793., 52340., 54560., 79281., 82647., 53528.,
      55796., 58064., 60332., 33728., 35240., 36752., 38264., 55642., 57934.,
      37544., 39088., 56830., 59170., 38336., 39912., 41488., 43064., 51176.,
      53540., 55904., 58268., 84627., 88209., 57092., 59504., 86409., 90063.,
      58280., 60740., 63200., 65660., 36640., 38280., 39920., 41560., 60394.,
      62878., 40712., 42384., 61582., 64114., 41504., 43208., 44912., 46616.,
      55544., 58100., 60656., 63212., 91755., 95625., 61844., 64448., 93537.,
      97479., 63032., 65684., 68336., 70988., 39552., 41320., 43088., 44856.,
      65146., 67822., 43880., 45680., 66334., 69058., 44672., 46504., 48336.,
      50168., 57232., 59000., 60768., 62536., 91906., 94582., 61880., 63680.,
      93574., 96298., 62992., 64824., 66656., 68488.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   95.,    109.,   123.,   137.,   65.,    71.,    77.,    83.,
      240.,   260.,   280.,   300.,   320.,   340.,   235.,   249.,   263.,
      277.,   142.,   170.,   198.,   226.,   568.,   640.,   712.,   784.,
      856.,   928.,   578.,   622.,   666.,   710.,   422.,   450.,   478.,
      506.,   1288.,  1360.,  1432.,  1504.,  1576.,  1648.,  1018.,  1062.,
      1106.,  1150.,  731.,   797.,   863.,   929.,   2224.,  2380.,  2536.,
      2692.,  2848.,  3004.,  1769.,  1859.,  1949.,  2039.,  1086.,  1146.,
      1206.,  1266.,  2744.,  2880.,  3016.,  3152.,  3288.,  3424.,  1874.,
      1950.,  2026.,  2102.,  1686.,  1746.,  1806.,  1866.,  4104.,  4240.,
      4376.,  4512.,  4648.,  4784.,  2634.,  2710.,  2786.,  2862.,  1169.,
      1207.,  1245.,  1283.,  2736.,  2820.,  2904.,  2988.,  3072.,  3156.,
      1691.,  1737.,  1783.,  1829.,  1549.,  1587.,  1625.,  1663.,  3576.,
      3660.,  3744.,  3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     41.,    95.,    149.,   203.,
      304.,   420.,   536.,   652.,   768.,   884.,   419.,   481.,   543.,
      605.,   581.,   635.,   689.,   743.,   1464.,  1580.,  1696.,  1812.,
      1928.,  2044.,  1039.,  1101.,  1163.,  1225.,  1174.,  1298.,  1422.,
      1546.,  3016.,  3280.,  3544.,  3808.,  4072.,  4336.,  2186.,  2326.,
      2466.,  2606.,  2414.,  2538.,  2662.,  2786.,  5656.,  5920.,  6184.,
      6448.,  6712.,  6976.,  3586.,  3726.,  3866.,  4006.,  3719.,  3929.,
      4139.,  4349.,  8776.,  9220.,  9664.,  10108., 10552., 10996., 5621.,
      5855.,  6089.,  6323.,  3078.,  3234.,  3390.,  3546.,  7112.,  7440.,
      7768.,  8096.,  8424.,  8752.,  4442.,  4614.,  4786.,  4958.,  4638.,
      4794.,  4950.,  5106.,  10392., 10720., 11048., 11376., 11704., 12032.,
      6162.,  6334.,  6506.,  6678.,  2645.,  2731.,  2817.,  2903.,  5880.,
      6060.,  6240.,  6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,
      3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,
      8580.,  4395.,  4489.,  4583.,  4677.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     77.,    179.,   281.,   383.,   568.,   780.,   992.,   1204.,
      1416.,  1628.,  743.,   853.,   963.,   1073.,  1097.,  1199.,  1301.,
      1403.,  2688.,  2900.,  3112.,  3324.,  3536.,  3748.,  1843.,  1953.,
      2063.,  2173.,  2206.,  2426.,  2646.,  2866.,  5464.,  5920.,  6376.,
      6832.,  7288.,  7744.,  3794.,  4030.,  4266.,  4502.,  4406.,  4626.,
      4846.,  5066.,  10024., 10480., 10936., 11392., 11848., 12304., 6154.,
      6390.,  6626.,  6862.,  6707.,  7061.,  7415.,  7769.,  15328., 16060.,
      16792., 17524., 18256., 18988., 9473.,  9851.,  10229., 10607., 5070.,
      5322.,  5574.,  5826.,  11480., 12000., 12520., 13040., 13560., 14080.,
      7010.,  7278.,  7546.,  7814.,  7590.,  7842.,  8094.,  8346.,  16680.,
      17200., 17720., 18240., 18760., 19280., 9690.,  9958.,  10226., 10494.,
      4121.,  4255.,  4389.,  4523.,  9024.,  9300.,  9576.,  9852.,  10128.,
      10404., 5219.,  5361.,  5503.,  5645.,  5461.,  5595.,  5729.,  5863.,
      11784., 12060., 12336., 12612., 12888., 13164., 6639.,  6781.,  6923.,
      7065.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      6874.,   7378.,   5732.,   6132.,   6532.,   6932.,   4744.,   5544.,
      6344.,   7144.,   11684.,  13076.,  10088.,  11144.,  17300.,  19076.,
      13832.,  15144.,  16456.,  17768.,  12744.,  13544.,  14344.,  15144.,
      25604.,  26996.,  20648.,  21704.,  35060.,  36836.,  26952.,  28264.,
      29576.,  30888.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      35912.,  37736.,  39560.,  41384.,  63428.,  66356.,  45864.,  47944.,
      72884.,  76196.,  52168.,  54504.,  56840.,  59176.,  58444.,  61948.,
      65452.,  68956.,  104310., 109854., 74908.,  78796.,  118494., 124614.,
      84364.,  88636.,  92908.,  97180.,  59080.,  61928.,  64776.,  67624.,
      101252., 105716., 71080.,  74184.,  110708., 115556., 77384.,  80744.,
      84104.,  87464.,  93196.,  98236.,  103276., 108316., 161046., 168894.,
      112732., 118156., 175230., 183654., 122188., 127996., 133804., 139612.,
      82248.,  86120.,  89992.,  93864.,  139076., 145076., 96296.,  100424.,
      148532., 154916., 102600., 106984., 111368., 115752., 120968., 124840.,
      128712., 132584., 199076., 205076., 137576., 141704., 212372., 218756.,
      146440., 150824., 155208., 159592., 34020.,  36724.,  39428.,  42132.,
      60226.,  64378.,  41300.,  44132.,  63034.,  67378.,  43172.,  46132.,
      49092.,  52052.,  69384.,  75304.,  81224.,  87144.,  124004., 133076.,
      84968.,  91144.,  129620., 139076., 88712.,  95144.,  101576., 108008.,
      128584., 134504., 140424., 146344., 214724., 223796., 146728., 152904.,
      224180., 233636., 153032., 159464., 165896., 172328., 197452., 207100.,
      216748., 226396., 331254., 346014., 226204., 236236., 345438., 360774.,
      235660., 246076., 256492., 266908., 151752., 158696., 165640., 172584.,
      252548., 263156., 171944., 179144., 262004., 272996., 178248., 185704.,
      193160., 200616., 232204., 243388., 254572., 265756., 387990., 405054.,
      264028., 275596., 402174., 419814., 273484., 285436., 297388., 309340.,
      174920., 182888., 190856., 198824., 290372., 302516., 197160., 205384.,
      299828., 312356., 203464., 211944., 220424., 228904., 266956., 279676.,
      292396., 305116., 444726., 464094., 301852., 314956., 458910., 478854.,
      311308., 324796., 338284., 351772., 198088., 207080., 216072., 225064.,
      328196., 341876., 222376., 231624., 337652., 351716., 228680., 238184.,
      247688., 257192., 288008., 297000., 305992., 314984., 464996., 478676.,
      314856., 324104., 478292., 492356., 323720., 333224., 342728., 352232.,
      66340.,  71604.,  76868.,  82132.,  116386., 124378., 78740.,  84132.,
      119194., 127378., 80612.,  86132.,  91652.,  97172.,  134024., 145064.,
      156104., 167144., 236324., 253076., 159848., 171144., 241940., 259076.,
      163592., 175144., 186696., 198248., 244424., 255464., 266504., 277544.,
      403844., 420596., 272808., 284104., 413300., 430436., 279112., 290664.,
      302216., 313768., 371212., 388540., 405868., 423196., 614934., 641214.,
      415324., 433036., 629118., 655974., 424780., 442876., 460972., 479068.,
      267592., 279656., 291720., 303784., 441668., 459956., 298024., 310344.,
      451124., 469796., 304328., 316904., 329480., 342056., 405964., 424828.,
      443692., 462556., 671670., 700254., 453148., 472396., 685854., 715014.,
      462604., 482236., 501868., 521500., 290760., 303848., 316936., 330024.,
      479492., 499316., 323240., 336584., 488948., 509156., 329544., 343144.,
      356744., 370344., 440716., 461116., 481516., 501916., 728406., 759294.,
      490972., 511756., 742590., 774054., 500428., 521596., 542764., 563932.,
      313928., 328040., 342152., 356264., 517316., 538676., 348456., 362824.,
      526772., 548516., 354760., 369384., 384008., 398632., 455048., 469160.,
      483272., 497384., 730916., 752276., 492136., 506504., 744212., 765956.,
      501000., 515624., 530248., 544872.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      836.,    980.,    694.,    798.,    902.,    1006.,   430.,    470.,
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   2276.,   2420.,
      1734.,   1838.,   1942.,   2046.,   940.,    1148.,   1356.,   1564.,
      4072.,   4616.,   5160.,   5704.,   6248.,   6792.,   4316.,   4652.,
      4988.,   5324.,   3020.,   3228.,   3436.,   3644.,   9512.,   10056.,
      10600.,  11144.,  11688.,  12232.,  7676.,   8012.,   8348.,   8684.,
      5290.,   5794.,   6298.,   6802.,   16556.,  17756.,  18956.,  20156.,
      21356.,  22556.,  13426.,  14122.,  14818.,  15514.,  8300.,   8764.,
      9228.,   9692.,   21096.,  22152.,  23208.,  24264.,  25320.,  26376.,
      14492.,  15084.,  15676.,  16268.,  12940.,  13404.,  13868.,  14332.,
      31656.,  32712.,  33768.,  34824.,  35880.,  36936.,  20412.,  21004.,
      21596.,  22188.,  9070.,   9366.,   9662.,   9958.,   21284.,  21940.,
      22596.,  23252.,  23908.,  24564.,  13190.,  13550.,  13910.,  14270.,
      12030.,  12326.,  12622.,  12918.,  27844.,  28500.,  29156.,  29812.,
      30468.,  31124.,  16790.,  17150.,  17510.,  17870.,  0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      270.,    694.,    1118.,   1542.,
      2276.,   3188.,   4100.,   5012.,   5924.,   6836.,   3238.,   3726.,
      4214.,   4702.,   4510.,   4934.,   5358.,   5782.,   11396.,  12308.,
      13220.,  14132.,  15044.,  15956.,  8118.,   8606.,   9094.,   9582.,
      9100.,   10076.,  11052.,  12028.,  23464.,  25544.,  27624.,  29704.,
      31784.,  33864.,  17084.,  18188.,  19292.,  20396.,  18860.,  19836.,
      20812.,  21788.,  44264.,  46344.,  48424.,  50504.,  52584.,  54664.,
      28124.,  29228.,  30332.,  31436.,  29050.,  30706.,  32362.,  34018.,
      68684.,  72188.,  75692.,  79196.,  82700.,  86204.,  44098.,  45946.,
      47794.,  49642.,  24140.,  25372.,  26604.,  27836.,  55848.,  58440.,
      61032.,  63624.,  66216.,  68808.,  34940.,  36300.,  37660.,  39020.,
      36460.,  37692.,  38924.,  40156.,  81768.,  84360.,  86952.,  89544.,
      92136.,  94728.,  48540.,  49900.,  51260.,  52620.,  20830.,  21510.,
      22190.,  22870.,  46340.,  47764.,  49188.,  50612.,  52036.,  53460.,
      27254.,  27998.,  28742.,  29486.,  27630.,  28310.,  28990.,  29670.,
      60580.,  62004.,  63428.,  64852.,  66276.,  67700.,  34694.,  35438.,
      36182.,  36926.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   4292.,   5972.,   7652.,   9332.,
      11012.,  12692.,  5782.,   6654.,   7526.,   8398.,   8590.,   9398.,
      10206.,  11014.,  21092.,  22772.,  24452.,  26132.,  27812.,  29492.,
      14502.,  15374.,  16246.,  17118.,  17260.,  19004.,  20748.,  22492.,
      42856.,  46472.,  50088.,  53704.,  57320.,  60936.,  29852.,  31724.,
      33596.,  35468.,  34700.,  36444.,  38188.,  39932.,  79016.,  82632.,
      86248.,  89864.,  93480.,  97096.,  48572.,  50444.,  52316.,  54188.,
      52810.,  55618.,  58426.,  61234.,  120812., 126620., 132428., 138236.,
      144044., 149852., 74770.,  77770.,  80770.,  83770.,  39980.,  41980.,
      43980.,  45980.,  90600.,  94728.,  98856.,  102984., 107112., 111240.,
      55388.,  57516.,  59644.,  61772.,  59980.,  61980.,  63980.,  65980.,
      131880., 136008., 140136., 144264., 148392., 152520., 76668.,  78796.,
      80924.,  83052.,  32590.,  33654.,  34718.,  35782.,  71396.,  73588.,
      75780.,  77972.,  80164.,  82356.,  41318.,  42446.,  43574.,  44702.,
      43230.,  44294.,  45358.,  46422.,  93316.,  95508.,  97700.,  99892.,
      102084., 104276., 52598.,  53726.,  54854.,  55982.,  0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      71.,    74.,    77.,    80.,    83.,    86.,    89.,    92.,    158.,
      164.,   170.,   176.,   141.,   146.,   151.,   156.,   245.,   254.,
      263.,   272.,   199.,   206.,   213.,   220.,   227.,   234.,   241.,
      248.,   182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,
      424.,   448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,
      628.,   658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,
      602.,   624.,   462.,   476.,   490.,   504.,   518.,   532.,   546.,
      560.,   904.,   928.,   952.,   976.,   714.,   732.,   750.,   768.,
      1198.,  1228.,  1258.,  1288.,  910.,   932.,   954.,   976.,   998.,
      1020.,  1042.,  1064.,  833.,   866.,   899.,   932.,   965.,   998.,
      1031.,  1064.,  1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,
      1376.,  2079.,  2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,
      1733.,  1778.,  1823.,  1868.,  1182.,  1212.,  1242.,  1272.,  1302.,
      1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,  1498.,  1532.,
      1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,  1732.,  1770.,
      1808.,  1846.,  1884.,  1922.,  1960.,  1913.,  1970.,  2027.,  2084.,
      2141.,  2198.,  2255.,  2312.,  3402.,  3492.,  3582.,  3672.,  2435.,
      2498.,  2561.,  2624.,  3843.,  3942.,  4041.,  4140.,  2729.,  2798.,
      2867.,  2936.,  3005.,  3074.,  3143.,  3212.,  1902.,  1948.,  1994.,
      2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,  3472.,
      2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,  2478.,
      2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  2993.,  3074.,
      3155.,  3236.,  3317.,  3398.,  3479.,  3560.,  5166.,  5292.,  5418.,
      5544.,  3611.,  3698.,  3785.,  3872.,  5607.,  5742.,  5877.,  6012.,
      3905.,  3998.,  4091.,  4184.,  4277.,  4370.,  4463.,  4556.,  2622.,
      2684.,  2746.,  2808.,  2870.,  2932.,  2994.,  3056.,  4432.,  4528.,
      4624.,  4720.,  3066.,  3132.,  3198.,  3264.,  4726.,  4828.,  4930.,
      5032.,  3262.,  3332.,  3402.,  3472.,  3542.,  3612.,  3682.,  3752.,
      3862.,  3924.,  3986.,  4048.,  4110.,  4172.,  4234.,  4296.,  6352.,
      6448.,  6544.,  6640.,  4386.,  4452.,  4518.,  4584.,  6766.,  6868.,
      6970.,  7072.,  4662.,  4732.,  4802.,  4872.,  4942.,  5012.,  5082.,
      5152.,  1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,
      1898.,  1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,
      2054.,  2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  1547.,  1594.,
      1641.,  1688.,  2182.,  2276.,  2370.,  2464.,  2558.,  2652.,  2746.,
      2840.,  3904.,  4048.,  4192.,  4336.,  2674.,  2772.,  2870.,  2968.,
      4078.,  4228.,  4378.,  4528.,  2790.,  2892.,  2994.,  3096.,  3198.,
      3300.,  3402.,  3504.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,
      4626.,  4720.,  6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,
      4928.,  7078.,  7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,
      5238.,  5340.,  5442.,  5544.,  6233.,  6386.,  6539.,  6692.,  6845.,
      6998.,  7151.,  7304.,  10458., 10692., 10926., 11160., 7139.,  7298.,
      7457.,  7616.,  10899., 11142., 11385., 11628., 7433.,  7598.,  7763.,
      7928.,  8093.,  8258.,  8423.,  8588.,  4782.,  4892.,  5002.,  5112.,
      5222.,  5332.,  5442.,  5552.,  7960.,  8128.,  8296.,  8464.,  5418.,
      5532.,  5646.,  5760.,  8254.,  8428.,  8602.,  8776.,  5614.,  5732.,
      5850.,  5968.,  6086.,  6204.,  6322.,  6440.,  7313.,  7490.,  7667.,
      7844.,  8021.,  8198.,  8375.,  8552.,  12222., 12492., 12762., 13032.,
      8315.,  8498.,  8681.,  8864.,  12663., 12942., 13221., 13500., 8609.,
      8798.,  8987.,  9176.,  9365.,  9554.,  9743.,  9932.,  5502.,  5628.,
      5754.,  5880.,  6006.,  6132.,  6258.,  6384.,  9136.,  9328.,  9520.,
      9712.,  6202.,  6332.,  6462.,  6592.,  9430.,  9628.,  9826.,  10024.,
      6398.,  6532.,  6666.,  6800.,  6934.,  7068.,  7202.,  7336.,  8393.,
      8594.,  8795.,  8996.,  9197.,  9398.,  9599.,  9800.,  13986., 14292.,
      14598., 14904., 9491.,  9698.,  9905.,  10112., 14427., 14742., 15057.,
      15372., 9785.,  9998.,  10211., 10424., 10637., 10850., 11063., 11276.,
      6222.,  6364.,  6506.,  6648.,  6790.,  6932.,  7074.,  7216.,  10312.,
      10528., 10744., 10960., 6986.,  7132.,  7278.,  7424.,  10606., 10828.,
      11050., 11272., 7182.,  7332.,  7482.,  7632.,  7782.,  7932.,  8082.,
      8232.,  9062.,  9204.,  9346.,  9488.,  9630.,  9772.,  9914.,  10056.,
      14632., 14848., 15064., 15280., 9906.,  10052., 10198., 10344., 15046.,
      15268., 15490., 15712., 10182., 10332., 10482., 10632., 10782., 10932.,
      11082., 11232., 2071.,  2154.,  2237.,  2320.,  2403.,  2486.,  2569.,
      2652.,  3638.,  3764.,  3890.,  4016.,  2461.,  2546.,  2631.,  2716.,
      3725.,  3854.,  3983.,  4112.,  2519.,  2606.,  2693.,  2780.,  2867.,
      2954.,  3041.,  3128.,  4182.,  4356.,  4530.,  4704.,  4878.,  5052.,
      5226.,  5400.,  7384.,  7648.,  7912.,  8176.,  4994.,  5172.,  5350.,
      5528.,  7558.,  7828.,  8098.,  8368.,  5110.,  5292.,  5474.,  5656.,
      5838.,  6020.,  6202.,  6384.,  7662.,  7836.,  8010.,  8184.,  8358.,
      8532.,  8706.,  8880.,  12664., 12928., 13192., 13456., 8554.,  8732.,
      8910.,  9088.,  12958., 13228., 13498., 13768., 8750.,  8932.,  9114.,
      9296.,  9478.,  9660.,  9842.,  10024., 11633., 11906., 12179., 12452.,
      12725., 12998., 13271., 13544., 19278., 19692., 20106., 20520., 13019.,
      13298., 13577., 13856., 19719., 20142., 20565., 20988., 13313., 13598.,
      13883., 14168., 14453., 14738., 15023., 15308., 8382.,  8572.,  8762.,
      8952.,  9142.,  9332.,  9522.,  9712.,  13840., 14128., 14416., 14704.,
      9338.,  9532.,  9726.,  9920.,  14134., 14428., 14722., 15016., 9534.,
      9732.,  9930.,  10128., 10326., 10524., 10722., 10920., 12713., 13010.,
      13307., 13604., 13901., 14198., 14495., 14792., 21042., 21492., 21942.,
      22392., 14195., 14498., 14801., 15104., 21483., 21942., 22401., 22860.,
      14489., 14798., 15107., 15416., 15725., 16034., 16343., 16652., 9102.,
      9308.,  9514.,  9720.,  9926.,  10132., 10338., 10544., 15016., 15328.,
      15640., 15952., 10122., 10332., 10542., 10752., 15310., 15628., 15946.,
      16264., 10318., 10532., 10746., 10960., 11174., 11388., 11602., 11816.,
      13793., 14114., 14435., 14756., 15077., 15398., 15719., 16040., 22806.,
      23292., 23778., 24264., 15371., 15698., 16025., 16352., 23247., 23742.,
      24237., 24732., 15665., 15998., 16331., 16664., 16997., 17330., 17663.,
      17996., 9822.,  10044., 10266., 10488., 10710., 10932., 11154., 11376.,
      16192., 16528., 16864., 17200., 10906., 11132., 11358., 11584., 16486.,
      16828., 17170., 17512., 11102., 11332., 11562., 11792., 12022., 12252.,
      12482., 12712., 14262., 14484., 14706., 14928., 15150., 15372., 15594.,
      15816., 22912., 23248., 23584., 23920., 15426., 15652., 15878., 16104.,
      23326., 23668., 24010., 24352., 15702., 15932., 16162., 16392., 16622.,
      16852., 17082., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   21.,   22.,
      23.,   24.,   25.,   26.,   27.,   28.,   71.,   74.,   77.,   80.,
      83.,   86.,   89.,   92.,   95.,   98.,   101.,  104.,  66.,   68.,
      70.,   72.,   74.,   76.,   78.,   80.,   44.,   48.,   52.,   56.,
      60.,   64.,   68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,
      222.,  232.,  242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,
      182.,  188.,  194.,  200.,  124.,  128.,  132.,  136.,  140.,  144.,
      148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,  422.,  432.,
      442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,  302.,  308.,
      314.,  320.,  209.,  218.,  227.,  236.,  245.,  254.,  263.,  272.,
      613.,  634.,  655.,  676.,  697.,  718.,  739.,  760.,  781.,  802.,
      823.,  844.,  476.,  488.,  500.,  512.,  524.,  536.,  548.,  560.,
      288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,
      758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,
      490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  448.,  456.,
      464.,  472.,  480.,  488.,  496.,  504.,  1082., 1100., 1118., 1136.,
      1154., 1172., 1190., 1208., 1226., 1244., 1262., 1280., 690.,  700.,
      710.,  720.,  730.,  740.,  750.,  760.,  305.,  310.,  315.,  320.,
      325.,  330.,  335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,
      777.,  788.,  799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,
      462.,  468.,  474.,  480.,  405.,  410.,  415.,  420.,  425.,  430.,
      435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,  997.,  1008.,
      1019., 1030., 1041., 1052., 558.,  564.,  570.,  576.,  582.,  588.,
      594.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,
      101.,  116.,  131.,  146.,  161.,  176.,  191.,  206.,  221.,  236.,
      104.,  112.,  120.,  128.,  136.,  144.,  152.,  160.,  147.,  154.,
      161.,  168.,  175.,  182.,  189.,  196.,  371.,  386.,  401.,  416.,
      431.,  446.,  461.,  476.,  491.,  506.,  521.,  536.,  264.,  272.,
      280.,  288.,  296.,  304.,  312.,  320.,  296.,  312.,  328.,  344.,
      360.,  376.,  392.,  408.,  762.,  796.,  830.,  864.,  898.,  932.,
      966.,  1000., 1034., 1068., 1102., 1136., 554.,  572.,  590.,  608.,
      626.,  644.,  662.,  680.,  616.,  632.,  648.,  664.,  680.,  696.,
      712.,  728.,  1442., 1476., 1510., 1544., 1578., 1612., 1646., 1680.,
      1714., 1748., 1782., 1816., 914.,  932.,  950.,  968.,  986.,  1004.,
      1022., 1040., 947.,  974.,  1001., 1028., 1055., 1082., 1109., 1136.,
      2233., 2290., 2347., 2404., 2461., 2518., 2575., 2632., 2689., 2746.,
      2803., 2860., 1430., 1460., 1490., 1520., 1550., 1580., 1610., 1640.,
      780.,  800.,  820.,  840.,  860.,  880.,  900.,  920.,  1802., 1844.,
      1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264.,
      1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280., 1180., 1200.,
      1220., 1240., 1260., 1280., 1300., 1320., 2642., 2684., 2726., 2768.,
      2810., 2852., 2894., 2936., 2978., 3020., 3062., 3104., 1566., 1588.,
      1610., 1632., 1654., 1676., 1698., 1720., 671.,  682.,  693.,  704.,
      715.,  726.,  737.,  748.,  1491., 1514., 1537., 1560., 1583., 1606.,
      1629., 1652., 1675., 1698., 1721., 1744., 876.,  888.,  900.,  912.,
      924.,  936.,  948.,  960.,  891.,  902.,  913.,  924.,  935.,  946.,
      957.,  968.,  1951., 1974., 1997., 2020., 2043., 2066., 2089., 2112.,
      2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152., 1164., 1176.,
      1188., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   65.,   78.,   91.,   104.,  131.,  158.,
      185.,  212.,  239.,  266.,  293.,  320.,  347.,  374.,  401.,  428.,
      182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  273.,  286.,
      299.,  312.,  325.,  338.,  351.,  364.,  671.,  698.,  725.,  752.,
      779.,  806.,  833.,  860.,  887.,  914.,  941.,  968.,  462.,  476.,
      490.,  504.,  518.,  532.,  546.,  560.,  548.,  576.,  604.,  632.,
      660.,  688.,  716.,  744.,  1362., 1420., 1478., 1536., 1594., 1652.,
      1710., 1768., 1826., 1884., 1942., 2000., 950.,  980.,  1010., 1040.,
      1070., 1100., 1130., 1160., 1108., 1136., 1164., 1192., 1220., 1248.,
      1276., 1304., 2522., 2580., 2638., 2696., 2754., 2812., 2870., 2928.,
      2986., 3044., 3102., 3160., 1550., 1580., 1610., 1640., 1670., 1700.,
      1730., 1760., 1685., 1730., 1775., 1820., 1865., 1910., 1955., 2000.,
      3853., 3946., 4039., 4132., 4225., 4318., 4411., 4504., 4597., 4690.,
      4783., 4876., 2384., 2432., 2480., 2528., 2576., 2624., 2672., 2720.,
      1272., 1304., 1336., 1368., 1400., 1432., 1464., 1496., 2882., 2948.,
      3014., 3080., 3146., 3212., 3278., 3344., 3410., 3476., 3542., 3608.,
      1762., 1796., 1830., 1864., 1898., 1932., 1966., 2000., 1912., 1944.,
      1976., 2008., 2040., 2072., 2104., 2136., 4202., 4268., 4334., 4400.,
      4466., 4532., 4598., 4664., 4730., 4796., 4862., 4928., 2442., 2476.,
      2510., 2544., 2578., 2612., 2646., 2680., 1037., 1054., 1071., 1088.,
      1105., 1122., 1139., 1156., 2271., 2306., 2341., 2376., 2411., 2446.,
      2481., 2516., 2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368.,
      1386., 1404., 1422., 1440., 1377., 1394., 1411., 1428., 1445., 1462.,
      1479., 1496., 2971., 3006., 3041., 3076., 3111., 3146., 3181., 3216.,
      3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728., 1746., 1764.,
      1782., 1800., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      464.,    484.,    504.,    524.,    544.,    564.,    584.,    604.,
      1081.,   1123.,   1165.,   1207.,   1004.,   1040.,   1076.,   1112.,
      1771.,   1837.,   1903.,   1969.,   1464.,   1516.,   1568.,   1620.,
      1672.,   1724.,   1776.,   1828.,   1232.,   1336.,   1440.,   1544.,
      1648.,   1752.,   1856.,   1960.,   3002.,   3182.,   3362.,   3542.,
      2568.,   2704.,   2840.,   2976.,   4382.,   4610.,   4838.,   5066.,
      3488.,   3656.,   3824.,   3992.,   4160.,   4328.,   4496.,   4664.,
      3312.,   3416.,   3520.,   3624.,   3728.,   3832.,   3936.,   4040.,
      6602.,   6782.,   6962.,   7142.,   5288.,   5424.,   5560.,   5696.,
      8942.,   9170.,   9398.,   9626.,   6848.,   7016.,   7184.,   7352.,
      7520.,   7688.,   7856.,   8024.,   6064.,   6316.,   6568.,   6820.,
      7072.,   7324.,   7576.,   7828.,   12123.,  12537.,  12951.,  13365.,
      9412.,   9712.,   10012.,  10312.,  15633.,  16119.,  16605.,  17091.,
      11752.,  12100.,  12448.,  12796.,  13144.,  13492.,  13840.,  14188.,
      9040.,   9272.,   9504.,   9736.,   9968.,   10200.,  10432.,  10664.,
      15962.,  16334.,  16706.,  17078.,  11528.,  11792.,  12056.,  12320.,
      18302.,  18722.,  19142.,  19562.,  13088.,  13384.,  13680.,  13976.,
      14272.,  14568.,  14864.,  15160.,  14656.,  15100.,  15544.,  15988.,
      16432.,  16876.,  17320.,  17764.,  26163.,  26865.,  27567.,  28269.,
      18772.,  19264.,  19756.,  20248.,  29673.,  30447.,  31221.,  31995.,
      21112.,  21652.,  22192.,  22732.,  23272.,  23812.,  24352.,  24892.,
      14768.,  15128.,  15488.,  15848.,  16208.,  16568.,  16928.,  17288.,
      25322.,  25886.,  26450.,  27014.,  17768.,  18160.,  18552.,  18944.,
      27662.,  28274.,  28886.,  29498.,  19328.,  19752.,  20176.,  20600.,
      21024.,  21448.,  21872.,  22296.,  23248.,  23884.,  24520.,  25156.,
      25792.,  26428.,  27064.,  27700.,  40203.,  41193.,  42183.,  43173.,
      28132.,  28816.,  29500.,  30184.,  43713.,  44775.,  45837.,  46899.,
      30472.,  31204.,  31936.,  32668.,  33400.,  34132.,  34864.,  35596.,
      20496.,  20984.,  21472.,  21960.,  22448.,  22936.,  23424.,  23912.,
      34682.,  35438.,  36194.,  36950.,  24008.,  24528.,  25048.,  25568.,
      37022.,  37826.,  38630.,  39434.,  25568.,  26120.,  26672.,  27224.,
      27776.,  28328.,  28880.,  29432.,  30256.,  30744.,  31232.,  31720.,
      32208.,  32696.,  33184.,  33672.,  49802.,  50558.,  51314.,  52070.,
      34408.,  34928.,  35448.,  35968.,  53102.,  53906.,  54710.,  55514.,
      36608.,  37160.,  37712.,  38264.,  38816.,  39368.,  39920.,  40472.,
      8384.,   8724.,   9064.,   9404.,   9744.,   10084.,  10424.,  10764.,
      14881.,  15403.,  15925.,  16447.,  10204.,  10560.,  10916.,  11272.,
      15571.,  16117.,  16663.,  17209.,  10664.,  11036.,  11408.,  11780.,
      12152.,  12524.,  12896.,  13268.,  17072.,  17816.,  18560.,  19304.,
      20048.,  20792.,  21536.,  22280.,  30602.,  31742.,  32882.,  34022.,
      20968.,  21744.,  22520.,  23296.,  31982.,  33170.,  34358.,  35546.,
      21888.,  22696.,  23504.,  24312.,  25120.,  25928.,  26736.,  27544.,
      31952.,  32696.,  33440.,  34184.,  34928.,  35672.,  36416.,  37160.,
      53402.,  54542.,  55682.,  56822.,  36488.,  37264.,  38040.,  38816.,
      55742.,  56930.,  58118.,  59306.,  38048.,  38856.,  39664.,  40472.,
      41280.,  42088.,  42896.,  43704.,  49024.,  50236.,  51448.,  52660.,
      53872.,  55084.,  56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212.,  57472.,  58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552.,  59860.,  61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      37680.,  38552.,  39424.,  40296.,  41168.,  42040.,  42912.,  43784.,
      62762.,  64094.,  65426.,  66758.,  42728.,  43632.,  44536.,  45440.,
      65102.,  66482.,  67862.,  69242.,  44288.,  45224.,  46160.,  47096.,
      48032.,  48968.,  49904.,  50840.,  57616.,  59020.,  60424.,  61828.,
      63232.,  64636.,  66040.,  67444.,  96363.,  98505.,  100647., 102789.,
      65572.,  67024.,  68476.,  69928.,  99873.,  102087., 104301., 106515.,
      67912.,  69412.,  70912.,  72412.,  73912.,  75412.,  76912.,  78412.,
      43408.,  44408.,  45408.,  46408.,  47408.,  48408.,  49408.,  50408.,
      72122.,  73646.,  75170.,  76694.,  48968.,  50000.,  51032.,  52064.,
      74462.,  76034.,  77606.,  79178.,  50528.,  51592.,  52656.,  53720.,
      54784.,  55848.,  56912.,  57976.,  66208.,  67804.,  69400.,  70996.,
      72592.,  74188.,  75784.,  77380.,  110403., 112833., 115263., 117693.,
      74932.,  76576.,  78220.,  79864.,  113913., 116415., 118917., 121419.,
      77272.,  78964.,  80656.,  82348.,  84040.,  85732.,  87424.,  89116.,
      49136.,  50264.,  51392.,  52520.,  53648.,  54776.,  55904.,  57032.,
      81482.,  83198.,  84914.,  86630.,  55208.,  56368.,  57528.,  58688.,
      83822.,  85586.,  87350.,  89114.,  56768.,  57960.,  59152.,  60344.,
      61536.,  62728.,  63920.,  65112.,  71696.,  72824.,  73952.,  75080.,
      76208.,  77336.,  78464.,  79592.,  115802., 117518., 119234., 120950.,
      78408.,  79568.,  80728.,  81888.,  119102., 120866., 122630., 124394.,
      80608.,  81800.,  82992.,  84184.,  85376.,  86568.,  87760.,  88952.,
      16304.,  16964.,  17624.,  18284.,  18944.,  19604.,  20264.,  20924.,
      28681.,  29683.,  30685.,  31687.,  19404.,  20080.,  20756.,  21432.,
      29371.,  30397.,  31423.,  32449.,  19864.,  20556.,  21248.,  21940.,
      22632.,  23324.,  24016.,  24708.,  32912.,  34296.,  35680.,  37064.,
      38448.,  39832.,  41216.,  42600.,  58202.,  60302.,  62402.,  64502.,
      39368.,  40784.,  42200.,  43616.,  59582.,  61730.,  63878.,  66026.,
      40288.,  41736.,  43184.,  44632.,  46080.,  47528.,  48976.,  50424.,
      60592.,  61976.,  63360.,  64744.,  66128.,  67512.,  68896.,  70280.,
      100202., 102302., 104402., 106502., 67688.,  69104.,  70520.,  71936.,
      102542., 104690., 106838., 108986., 69248.,  70696.,  72144.,  73592.,
      75040.,  76488.,  77936.,  79384.,  91984.,  94156.,  96328.,  98500.,
      100672., 102844., 105016., 107188., 152523., 155817., 159111., 162405.,
      103012., 105232., 107452., 109672., 156033., 159399., 162765., 166131.,
      105352., 107620., 109888., 112156., 114424., 116692., 118960., 121228.,
      66320.,  67832.,  69344.,  70856.,  72368.,  73880.,  75392.,  76904.,
      109562., 111854., 114146., 116438., 73928.,  75472.,  77016.,  78560.,
      111902., 114242., 116582., 118922., 75488.,  77064.,  78640.,  80216.,
      81792.,  83368.,  84944.,  86520.,  100576., 102940., 105304., 107668.,
      110032., 112396., 114760., 117124., 166563., 170145., 173727., 177309.,
      112372., 114784., 117196., 119608., 170073., 173727., 177381., 181035.,
      114712., 117172., 119632., 122092., 124552., 127012., 129472., 131932.,
      72048.,  73688.,  75328.,  76968.,  78608.,  80248.,  81888.,  83528.,
      118922., 121406., 123890., 126374., 80168.,  81840.,  83512.,  85184.,
      121262., 123794., 126326., 128858., 81728.,  83432.,  85136.,  86840.,
      88544.,  90248.,  91952.,  93656.,  109168., 111724., 114280., 116836.,
      119392., 121948., 124504., 127060., 180603., 184473., 188343., 192213.,
      121732., 124336., 126940., 129544., 184113., 188055., 191997., 195939.,
      124072., 126724., 129376., 132028., 134680., 137332., 139984., 142636.,
      77776.,  79544.,  81312.,  83080.,  84848.,  86616.,  88384.,  90152.,
      128282., 130958., 133634., 136310., 86408.,  88208.,  90008.,  91808.,
      130622., 133346., 136070., 138794., 87968.,  89800.,  91632.,  93464.,
      95296.,  97128.,  98960.,  100792., 113136., 114904., 116672., 118440.,
      120208., 121976., 123744., 125512., 181802., 184478., 187154., 189830.,
      122408., 124208., 126008., 127808., 185102., 187826., 190550., 193274.,
      124608., 126440., 128272., 130104., 131936., 133768., 135600., 137432.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   125.,   131.,   137.,   143.,   149.,   155.,   161.,   167.,
      464.,   484.,   504.,   524.,   544.,   564.,   584.,   604.,   624.,
      644.,   664.,   684.,   459.,   473.,   487.,   501.,   515.,   529.,
      543.,   557.,   262.,   290.,   318.,   346.,   374.,   402.,   430.,
      458.,   1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,
      1656.,  1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,
      1342.,  1386.,  1430.,  822.,   850.,   878.,   906.,   934.,   962.,
      990.,   1018.,  2520.,  2592.,  2664.,  2736.,  2808.,  2880.,  2952.,
      3024.,  3096.,  3168.,  3240.,  3312.,  2002.,  2046.,  2090.,  2134.,
      2178.,  2222.,  2266.,  2310.,  1411.,  1477.,  1543.,  1609.,  1675.,
      1741.,  1807.,  1873.,  4328.,  4484.,  4640.,  4796.,  4952.,  5108.,
      5264.,  5420.,  5576.,  5732.,  5888.,  6044.,  3469.,  3559.,  3649.,
      3739.,  3829.,  3919.,  4009.,  4099.,  2126.,  2186.,  2246.,  2306.,
      2366.,  2426.,  2486.,  2546.,  5384.,  5520.,  5656.,  5792.,  5928.,
      6064.,  6200.,  6336.,  6472.,  6608.,  6744.,  6880.,  3690.,  3766.,
      3842.,  3918.,  3994.,  4070.,  4146.,  4222.,  3326.,  3386.,  3446.,
      3506.,  3566.,  3626.,  3686.,  3746.,  8104.,  8240.,  8376.,  8512.,
      8648.,  8784.,  8920.,  9056.,  9192.,  9328.,  9464.,  9600.,  5210.,
      5286.,  5362.,  5438.,  5514.,  5590.,  5666.,  5742.,  2309.,  2347.,
      2385.,  2423.,  2461.,  2499.,  2537.,  2575.,  5408.,  5492.,  5576.,
      5660.,  5744.,  5828.,  5912.,  5996.,  6080.,  6164.,  6248.,  6332.,
      3347.,  3393.,  3439.,  3485.,  3531.,  3577.,  3623.,  3669.,  3069.,
      3107.,  3145.,  3183.,  3221.,  3259.,  3297.,  3335.,  7088.,  7172.,
      7256.,  7340.,  7424.,  7508.,  7592.,  7676.,  7760.,  7844.,  7928.,
      8012.,  4267.,  4313.,  4359.,  4405.,  4451.,  4497.,  4543.,  4589.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     41.,    95.,    149.,   203.,   257.,   311.,   365.,   419.,
      520.,   636.,   752.,   868.,   984.,   1100.,  1216.,  1332.,  1448.,
      1564.,  1680.,  1796.,  791.,   853.,   915.,   977.,   1039.,  1101.,
      1163.,  1225.,  1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,
      1499.,  2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,
      3768.,  3884.,  4000.,  4116.,  2031.,  2093.,  2155.,  2217.,  2279.,
      2341.,  2403.,  2465.,  2254.,  2378.,  2502.,  2626.,  2750.,  2874.,
      2998.,  3122.,  5832.,  6096.,  6360.,  6624.,  6888.,  7152.,  7416.,
      7680.,  7944.,  8208.,  8472.,  8736.,  4266.,  4406.,  4546.,  4686.,
      4826.,  4966.,  5106.,  5246.,  4734.,  4858.,  4982.,  5106.,  5230.,
      5354.,  5478.,  5602.,  11112., 11376., 11640., 11904., 12168., 12432.,
      12696., 12960., 13224., 13488., 13752., 14016., 7066.,  7206.,  7346.,
      7486.,  7626.,  7766.,  7906.,  8046.,  7279.,  7489.,  7699.,  7909.,
      8119.,  8329.,  8539.,  8749.,  17216., 17660., 18104., 18548., 18992.,
      19436., 19880., 20324., 20768., 21212., 21656., 22100., 11065., 11299.,
      11533., 11767., 12001., 12235., 12469., 12703., 6038.,  6194.,  6350.,
      6506.,  6662.,  6818.,  6974.,  7130.,  13976., 14304., 14632., 14960.,
      15288., 15616., 15944., 16272., 16600., 16928., 17256., 17584., 8754.,
      8926.,  9098.,  9270.,  9442.,  9614.,  9786.,  9958.,  9158.,  9314.,
      9470.,  9626.,  9782.,  9938.,  10094., 10250., 20536., 20864., 21192.,
      21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816., 24144.,
      12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398., 5225.,
      5311.,  5397.,  5483.,  5569.,  5655.,  5741.,  5827.,  11624., 11804.,
      11984., 12164., 12344., 12524., 12704., 12884., 13064., 13244., 13424.,
      13604., 6839.,  6933.,  7027.,  7121.,  7215.,  7309.,  7403.,  7497.,
      6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547.,  15224.,
      15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844.,
      17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,
      9377.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     77.,    179.,   281.,   383.,   485.,   587.,   689.,
      791.,   976.,   1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,
      2672.,  2884.,  3096.,  3308.,  1403.,  1513.,  1623.,  1733.,  1843.,
      1953.,  2063.,  2173.,  2117.,  2219.,  2321.,  2423.,  2525.,  2627.,
      2729.,  2831.,  5216.,  5428.,  5640.,  5852.,  6064.,  6276.,  6488.,
      6700.,  6912.,  7124.,  7336.,  7548.,  3603.,  3713.,  3823.,  3933.,
      4043.,  4153.,  4263.,  4373.,  4246.,  4466.,  4686.,  4906.,  5126.,
      5346.,  5566.,  5786.,  10584., 11040., 11496., 11952., 12408., 12864.,
      13320., 13776., 14232., 14688., 15144., 15600., 7410.,  7646.,  7882.,
      8118.,  8354.,  8590.,  8826.,  9062.,  8646.,  8866.,  9086.,  9306.,
      9526.,  9746.,  9966.,  10186., 19704., 20160., 20616., 21072., 21528.,
      21984., 22440., 22896., 23352., 23808., 24264., 24720., 12130., 12366.,
      12602., 12838., 13074., 13310., 13546., 13782., 13147., 13501., 13855.,
      14209., 14563., 14917., 15271., 15625., 30104., 30836., 31568., 32300.,
      33032., 33764., 34496., 35228., 35960., 36692., 37424., 38156., 18661.,
      19039., 19417., 19795., 20173., 20551., 20929., 21307., 9950.,  10202.,
      10454., 10706., 10958., 11210., 11462., 11714., 22568., 23088., 23608.,
      24128., 24648., 25168., 25688., 26208., 26728., 27248., 27768., 28288.,
      13818., 14086., 14354., 14622., 14890., 15158., 15426., 15694., 14990.,
      15242., 15494., 15746., 15998., 16250., 16502., 16754., 32968., 33488.,
      34008., 34528., 35048., 35568., 36088., 36608., 37128., 37648., 38168.,
      38688., 19178., 19446., 19714., 19982., 20250., 20518., 20786., 21054.,
      8141.,  8275.,  8409.,  8543.,  8677.,  8811.,  8945.,  9079.,  17840.,
      18116., 18392., 18668., 18944., 19220., 19496., 19772., 20048., 20324.,
      20600., 20876., 10331., 10473., 10615., 10757., 10899., 11041., 11183.,
      11325., 10821., 10955., 11089., 11223., 11357., 11491., 11625., 11759.,
      23360., 23636., 23912., 24188., 24464., 24740., 25016., 25292., 25568.,
      25844., 26120., 26396., 13171., 13313., 13455., 13597., 13739., 13881.,
      14023., 14165., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3300.,    3444.,    3588.,    3732.,    3876.,    4020.,    4164.,
      4308.,    7922.,    8234.,    8546.,    8858.,    7540.,    7812.,
      8084.,    8356.,    13418.,   13922.,   14426.,   14930.,   11204.,
      11604.,   12004.,   12404.,   12804.,   13204.,   13604.,   14004.,
      8968.,    9768.,    10568.,   11368.,   12168.,   12968.,   13768.,
      14568.,   22468.,   23860.,   25252.,   26644.,   19496.,   20552.,
      21608.,   22664.,   33460.,   35236.,   37012.,   38788.,   26824.,
      28136.,   29448.,   30760.,   32072.,   33384.,   34696.,   36008.,
      24968.,   25768.,   26568.,   27368.,   28168.,   28968.,   29768.,
      30568.,   50308.,   51700.,   53092.,   54484.,   40616.,   41672.,
      42728.,   43784.,   68980.,   70756.,   72532.,   74308.,   53064.,
      54376.,   55688.,   57000.,   58312.,   59624.,   60936.,   62248.,
      46124.,   48092.,   50060.,   52028.,   53996.,   55964.,   57932.,
      59900.,   93078.,   96318.,   99558.,   102798.,  72668.,   75020.,
      77372.,   79724.,   121086.,  124902.,  128718.,  132534.,  91340.,
      94076.,   96812.,   99548.,   102284.,  105020.,  107756.,  110492.,
      70664.,   72488.,   74312.,   76136.,   77960.,   79784.,   81608.,
      83432.,   124996.,  127924.,  130852.,  133780.,  90408.,   92488.,
      94568.,   96648.,   143668.,  146980.,  150292.,  153604.,  102856.,
      105192.,  107528.,  109864.,  112200.,  114536.,  116872.,  119208.,
      114668.,  118172.,  121676.,  125180.,  128684.,  132188.,  135692.,
      139196.,  205110.,  210654.,  216198.,  221742.,  147356.,  151244.,
      155132.,  159020.,  233118.,  239238.,  245358.,  251478.,  166028.,
      170300.,  174572.,  178844.,  183116.,  187388.,  191660.,  195932.,
      116360.,  119208.,  122056.,  124904.,  127752.,  130600.,  133448.,
      136296.,  199684.,  204148.,  208612.,  213076.,  140200.,  143304.,
      146408.,  149512.,  218356.,  223204.,  228052.,  232900.,  152648.,
      156008.,  159368.,  162728.,  166088.,  169448.,  172808.,  176168.,
      183212.,  188252.,  193292.,  198332.,  203372.,  208412.,  213452.,
      218492.,  317142.,  324990.,  332838.,  340686.,  222044.,  227468.,
      232892.,  238316.,  345150.,  353574.,  361998.,  370422.,  240716.,
      246524.,  252332.,  258140.,  263948.,  269756.,  275564.,  281372.,
      162056.,  165928.,  169800.,  173672.,  177544.,  181416.,  185288.,
      189160.,  274372.,  280372.,  286372.,  292372.,  189992.,  194120.,
      198248.,  202376.,  293044.,  299428.,  305812.,  312196.,  202440.,
      206824.,  211208.,  215592.,  219976.,  224360.,  228744.,  233128.,
      239496.,  243368.,  247240.,  251112.,  254984.,  258856.,  262728.,
      266600.,  394372.,  400372.,  406372.,  412372.,  272552.,  276680.,
      280808.,  284936.,  420724.,  427108.,  433492.,  439876.,  290120.,
      294504.,  298888.,  303272.,  307656.,  312040.,  316424.,  320808.,
      66340.,   69044.,   71748.,   74452.,   77156.,   79860.,   82564.,
      85268.,   117842.,  121994.,  126146.,  130298.,  80820.,   83652.,
      86484.,   89316.,   123338.,  127682.,  132026.,  136370.,  84484.,
      87444.,   90404.,   93364.,   96324.,   99284.,   102244.,  105204.,
      135048.,  140968.,  146888.,  152808.,  158728.,  164648.,  170568.,
      176488.,  242308.,  251380.,  260452.,  269524.,  166056.,  172232.,
      178408.,  184584.,  253300.,  262756.,  272212.,  281668.,  173384.,
      179816.,  186248.,  192680.,  199112.,  205544.,  211976.,  218408.,
      253448.,  259368.,  265288.,  271208.,  277128.,  283048.,  288968.,
      294888.,  423748.,  432820.,  441892.,  450964.,  289576.,  295752.,
      301928.,  308104.,  442420.,  451876.,  461332.,  470788.,  302024.,
      308456.,  314888.,  321320.,  327752.,  334184.,  340616.,  347048.,
      388844.,  398492.,  408140.,  417788.,  427436.,  437084.,  446732.,
      456380.,  653238.,  667998.,  682758.,  697518.,  446108.,  456140.,
      466172.,  476204.,  681246.,  696582.,  711918.,  727254.,  464780.,
      475196.,  485612.,  496028.,  506444.,  516860.,  527276.,  537692.,
      299144.,  306088.,  313032.,  319976.,  326920.,  333864.,  340808.,
      347752.,  498436.,  509044.,  519652.,  530260.,  339368.,  346568.,
      353768.,  360968.,  517108.,  528100.,  539092.,  550084.,  351816.,
      359272.,  366728.,  374184.,  381640.,  389096.,  396552.,  404008.,
      457388.,  468572.,  479756.,  490940.,  502124.,  513308.,  524492.,
      535676.,  765270.,  782334.,  799398.,  816462.,  520796.,  532364.,
      543932.,  555500.,  793278.,  810918.,  828558.,  846198.,  539468.,
      551420.,  563372.,  575324.,  587276.,  599228.,  611180.,  623132.,
      344840.,  352808.,  360776.,  368744.,  376712.,  384680.,  392648.,
      400616.,  573124.,  585268.,  597412.,  609556.,  389160.,  397384.,
      405608.,  413832.,  591796.,  604324.,  616852.,  629380.,  401608.,
      410088.,  418568.,  427048.,  435528.,  444008.,  452488.,  460968.,
      525932.,  538652.,  551372.,  564092.,  576812.,  589532.,  602252.,
      614972.,  877302.,  896670.,  916038.,  935406.,  595484.,  608588.,
      621692.,  634796.,  905310.,  925254.,  945198.,  965142.,  614156.,
      627644.,  641132.,  654620.,  668108.,  681596.,  695084.,  708572.,
      390536.,  399528.,  408520.,  417512.,  426504.,  435496.,  444488.,
      453480.,  647812.,  661492.,  675172.,  688852.,  438952.,  448200.,
      457448.,  466696.,  666484.,  680548.,  694612.,  708676.,  451400.,
      460904.,  470408.,  479912.,  489416.,  498920.,  508424.,  517928.,
      570376.,  579368.,  588360.,  597352.,  606344.,  615336.,  624328.,
      633320.,  921412.,  935092.,  948772.,  962452.,  623912.,  633160.,
      642408.,  651656.,  947764.,  961828.,  975892.,  989956.,  641480.,
      650984.,  660488.,  669992.,  679496.,  689000.,  698504.,  708008.,
      129380.,  134644.,  139908.,  145172.,  150436.,  155700.,  160964.,
      166228.,  227762.,  235754.,  243746.,  251738.,  154100.,  159492.,
      164884.,  170276.,  233258.,  241442.,  249626.,  257810.,  157764.,
      163284.,  168804.,  174324.,  179844.,  185364.,  190884.,  196404.,
      261128.,  272168.,  283208.,  294248.,  305288.,  316328.,  327368.,
      338408.,  462148.,  478900.,  495652.,  512404.,  312616.,  323912.,
      335208.,  346504.,  473140.,  490276.,  507412.,  524548.,  319944.,
      331496.,  343048.,  354600.,  366152.,  377704.,  389256.,  400808.,
      481928.,  492968.,  504008.,  515048.,  526088.,  537128.,  548168.,
      559208.,  797188.,  813940.,  830692.,  847444.,  538536.,  549832.,
      561128.,  572424.,  815860.,  832996.,  850132.,  867268.,  550984.,
      562536.,  574088.,  585640.,  597192.,  608744.,  620296.,  631848.,
      731564.,  748892.,  766220.,  783548.,  800876.,  818204.,  835532.,
      852860.,  1213398., 1239678., 1265958., 1292238., 819548.,  837260.,
      854972.,  872684.,  1241406., 1268262., 1295118., 1321974., 838220.,
      856316.,  874412.,  892508.,  910604.,  928700.,  946796.,  964892.,
      527624.,  539688.,  551752.,  563816.,  575880.,  587944.,  600008.,
      612072.,  871876.,  890164.,  908452.,  926740.,  588328.,  600648.,
      612968.,  625288.,  890548.,  909220.,  927892.,  946564.,  600776.,
      613352.,  625928.,  638504.,  651080.,  663656.,  676232.,  688808.,
      800108.,  818972.,  837836.,  856700.,  875564.,  894428.,  913292.,
      932156.,  1325430., 1354014., 1382598., 1411182., 894236.,  913484.,
      932732.,  951980.,  1353438., 1382598., 1411758., 1440918., 912908.,
      932540.,  952172.,  971804.,  991436.,  1011068., 1030700., 1050332.,
      573320.,  586408.,  599496.,  612584.,  625672.,  638760.,  651848.,
      664936.,  946564.,  966388.,  986212.,  1006036., 638120.,  651464.,
      664808.,  678152.,  965236.,  985444.,  1005652., 1025860., 650568.,
      664168.,  677768.,  691368.,  704968.,  718568.,  732168.,  745768.,
      868652.,  889052.,  909452.,  929852.,  950252.,  970652.,  991052.,
      1011452., 1437462., 1468350., 1499238., 1530126., 968924.,  989708.,
      1010492., 1031276., 1465470., 1496934., 1528398., 1559862., 987596.,
      1008764., 1029932., 1051100., 1072268., 1093436., 1114604., 1135772.,
      619016.,  633128.,  647240.,  661352.,  675464.,  689576.,  703688.,
      717800.,  1021252., 1042612., 1063972., 1085332., 687912.,  702280.,
      716648.,  731016.,  1039924., 1061668., 1083412., 1105156., 700360.,
      714984.,  729608.,  744232.,  758856.,  773480.,  788104.,  802728.,
      901256.,  915368.,  929480.,  943592.,  957704.,  971816.,  985928.,
      1000040., 1448452., 1469812., 1491172., 1512532., 975272.,  989640.,
      1004008., 1018376., 1474804., 1496548., 1518292., 1540036., 992840.,
      1007464., 1022088., 1036712., 1051336., 1065960., 1080584., 1095208.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   830.,    870.,    910.,    950.,
      990.,    1030.,   1070.,   1110.,   3300.,   3444.,   3588.,   3732.,
      3876.,   4020.,   4164.,   4308.,   4452.,   4596.,   4740.,   4884.,
      3398.,   3502.,   3606.,   3710.,   3814.,   3918.,   4022.,   4126.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  5900.,   6108.,   6316.,   6524.,
      6732.,   6940.,   7148.,   7356.,   18664.,  19208.,  19752.,  20296.,
      20840.,  21384.,  21928.,  22472.,  23016.,  23560.,  24104.,  24648.,
      15132.,  15468.,  15804.,  16140.,  16476.,  16812.,  17148.,  17484.,
      10250.,  10754.,  11258.,  11762.,  12266.,  12770.,  13274.,  13778.,
      32332.,  33532.,  34732.,  35932.,  37132.,  38332.,  39532.,  40732.,
      41932.,  43132.,  44332.,  45532.,  26402.,  27098.,  27794.,  28490.,
      29186.,  29882.,  30578.,  31274.,  16300.,  16764.,  17228.,  17692.,
      18156.,  18620.,  19084.,  19548.,  41512.,  42568.,  43624.,  44680.,
      45736.,  46792.,  47848.,  48904.,  49960.,  51016.,  52072.,  53128.,
      28604.,  29196.,  29788.,  30380.,  30972.,  31564.,  32156.,  32748.,
      25580.,  26044.,  26508.,  26972.,  27436.,  27900.,  28364.,  28828.,
      62632.,  63688.,  64744.,  65800.,  66856.,  67912.,  68968.,  70024.,
      71080.,  72136.,  73192.,  74248.,  40444.,  41036.,  41628.,  42220.,
      42812.,  43404.,  43996.,  44588.,  17950.,  18246.,  18542.,  18838.,
      19134.,  19430.,  19726.,  20022.,  42148.,  42804.,  43460.,  44116.,
      44772.,  45428.,  46084.,  46740.,  47396.,  48052.,  48708.,  49364.,
      26150.,  26510.,  26870.,  27230.,  27590.,  27950.,  28310.,  28670.,
      23870.,  24166.,  24462.,  24758.,  25054.,  25350.,  25646.,  25942.,
      55268.,  55924.,  56580.,  57236.,  57892.,  58548.,  59204.,  59860.,
      60516.,  61172.,  61828.,  62484.,  33350.,  33710.,  34070.,  34430.,
      34790.,  35150.,  35510.,  35870.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      270.,    694.,    1118.,   1542.,   1966.,   2390.,   2814.,   3238.,
      3972.,   4884.,   5796.,   6708.,   7620.,   8532.,   9444.,   10356.,
      11268.,  12180.,  13092.,  14004.,  6166.,   6654.,   7142.,   7630.,
      8118.,   8606.,   9094.,   9582.,   8750.,   9174.,   9598.,   10022.,
      10446.,  10870.,  11294.,  11718.,  22212.,  23124.,  24036.,  24948.,
      25860.,  26772.,  27684.,  28596.,  29508.,  30420.,  31332.,  32244.,
      15926.,  16414.,  16902.,  17390.,  17878.,  18366.,  18854.,  19342.,
      17580.,  18556.,  19532.,  20508.,  21484.,  22460.,  23436.,  24412.,
      45608.,  47688.,  49768.,  51848.,  53928.,  56008.,  58088.,  60168.,
      62248.,  64328.,  66408.,  68488.,  33468.,  34572.,  35676.,  36780.,
      37884.,  38988.,  40092.,  41196.,  37100.,  38076.,  39052.,  40028.,
      41004.,  41980.,  42956.,  43932.,  87208.,  89288.,  91368.,  93448.,
      95528.,  97608.,  99688.,  101768., 103848., 105928., 108008., 110088.,
      55548.,  56652.,  57756.,  58860.,  59964.,  61068.,  62172.,  63276.,
      57050.,  58706.,  60362.,  62018.,  63674.,  65330.,  66986.,  68642.,
      135148., 138652., 142156., 145660., 149164., 152668., 156172., 159676.,
      163180., 166684., 170188., 173692., 87026.,  88874.,  90722.,  92570.,
      94418.,  96266.,  98114.,  99962.,  47500.,  48732.,  49964.,  51196.,
      52428.,  53660.,  54892.,  56124.,  110056., 112648., 115240., 117832.,
      120424., 123016., 125608., 128200., 130792., 133384., 135976., 138568.,
      69020.,  70380.,  71740.,  73100.,  74460.,  75820.,  77180.,  78540.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 41230.,  41910.,  42590.,  43270.,
      43950.,  44630.,  45310.,  45990.,  91780.,  93204.,  94628.,  96052.,
      97476.,  98900.,  100324., 101748., 103172., 104596., 106020., 107444.,
      54038.,  54782.,  55526.,  56270.,  57014.,  57758.,  58502.,  59246.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   3742.,   4550.,   5358.,   6166.,
      7524.,   9204.,   10884.,  12564.,  14244.,  15924.,  17604.,  19284.,
      20964.,  22644.,  24324.,  26004.,  11014.,  11886.,  12758.,  13630.,
      14502.,  15374.,  16246.,  17118.,  16670.,  17478.,  18286.,  19094.,
      19902.,  20710.,  21518.,  22326.,  41124.,  42804.,  44484.,  46164.,
      47844.,  49524.,  51204.,  52884.,  54564.,  56244.,  57924.,  59604.,
      28454.,  29326.,  30198.,  31070.,  31942.,  32814.,  33686.,  34558.,
      33420.,  35164.,  36908.,  38652.,  40396.,  42140.,  43884.,  45628.,
      83432.,  87048.,  90664.,  94280.,  97896.,  101512., 105128., 108744.,
      112360., 115976., 119592., 123208., 58524.,  60396.,  62268.,  64140.,
      66012.,  67884.,  69756.,  71628.,  68300.,  70044.,  71788.,  73532.,
      75276.,  77020.,  78764.,  80508.,  155752., 159368., 162984., 166600.,
      170216., 173832., 177448., 181064., 184680., 188296., 191912., 195528.,
      95964.,  97836.,  99708.,  101580., 103452., 105324., 107196., 109068.,
      103850., 106658., 109466., 112274., 115082., 117890., 120698., 123506.,
      237964., 243772., 249580., 255388., 261196., 267004., 272812., 278620.,
      284428., 290236., 296044., 301852., 147650., 150650., 153650., 156650.,
      159650., 162650., 165650., 168650., 78700.,  80700.,  82700.,  84700.,
      86700.,  88700.,  90700.,  92700.,  178600., 182728., 186856., 190984.,
      195112., 199240., 203368., 207496., 211624., 215752., 219880., 224008.,
      109436., 111564., 113692., 115820., 117948., 120076., 122204., 124332.,
      118700., 120700., 122700., 124700., 126700., 128700., 130700., 132700.,
      261160., 265288., 269416., 273544., 277672., 281800., 285928., 290056.,
      294184., 298312., 302440., 306568., 151996., 154124., 156252., 158380.,
      160508., 162636., 164764., 166892., 64510.,  65574.,  66638.,  67702.,
      68766.,  69830.,  70894.,  71958.,  141412., 143604., 145796., 147988.,
      150180., 152372., 154564., 156756., 158948., 161140., 163332., 165524.,
      81926.,  83054.,  84182.,  85310.,  86438.,  87566.,  88694.,  89822.,
      85790.,  86854.,  87918.,  88982.,  90046.,  91110.,  92174.,  93238.,
      185252., 187444., 189636., 191828., 194020., 196212., 198404., 200596.,
      202788., 204980., 207172., 209364., 104486., 105614., 106742., 107870.,
      108998., 110126., 111254., 112382., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968.,  1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868.,  938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  422.,  302.,  616.,
      710.,  1084., 742.,  1132., 774.,  876.,  532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      964.,  1961., 2138., 3258., 2216., 3375., 2294., 2483., 724.,  1470.,
      1596., 2428., 1648., 2506., 1700., 1834., 1108., 2249., 2450., 3726.,
      2528., 3843., 2606., 2819., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1170., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  782.,  582.,  1176.,
      1350., 2044., 1382., 2092., 1414., 1596., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1540., 3113., 3386., 5130., 3464., 5247.,
      3542., 3827., 1108., 2238., 2428., 3676., 2480., 3754., 2532., 2730.,
      1684., 3401., 3698., 5598., 3776., 5715., 3854., 4163., 1204., 2430.,
      2636., 3988., 2688., 4066., 2740., 2954., 1828., 3689., 4010., 6066.,
      4088., 6183., 4166., 4499., 1300., 2622., 2844., 4300., 2896., 4378.,
      2948., 3178., 1850., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,    5.,    8.,    11.,  8.,   10.,  0.,    6.,    7.,    20.,
      23.,  26.,   18.,   20.,   0.,   14.,  18.,  48.,   58.,   68.,   44.,
      50.,  0.,    34.,   38.,   98.,  108., 118., 74.,   80.,   0.,    59.,
      68.,  169.,  190.,  211.,  128., 140., 0.,   78.,   86.,   194.,  212.,
      230., 130.,  140.,  0.,    118., 126., 284., 302.,  320.,  180.,  190.,
      0.,   80.,   85.,   186.,  197., 208., 114., 120.,  0.,    105.,  110.,
      241., 252.,  263.,  144.,  150., 0.,   0.,   0.,    0.,    0.,    0.,
      0.,   0.,    0.,    7.,    14.,  29.,  44.,  59.,   32.,   40.,   0.,
      42.,  49.,   104.,  119.,  134., 72.,  80.,  0.,    86.,   102.,  216.,
      250., 284.,  152.,  170.,  0.,   166., 182., 386.,  420.,  454.,  242.,
      260., 0.,    257.,  284.,  601., 658., 715., 380.,  410.,  0.,    210.,
      230., 482.,  524.,  566.,  298., 320., 0.,   310.,  330.,  692.,  734.,
      776., 408.,  430.,  0.,    176., 187., 390., 413.,  436.,  228.,  240.,
      0.,   231.,  242.,  505.,  528., 551., 288., 300.,  0.,    0.,    0.,
      0.,   0.,    0.,    0.,    0.,   0.,   13.,  26.,   53.,   80.,   107.,
      56.,  70.,   0.,    78.,   91.,  188., 215., 242.,  126.,  140.,  0.,
      158., 186.,  384.,  442.,  500., 260., 290., 0.,    298.,  326.,  674.,
      732., 790.,  410.,  440.,  0.,   455., 500., 1033., 1126., 1219., 632.,
      680., 0.,    342.,  374.,  770., 836., 902., 466.,  500.,  0.,    502.,
      534., 1100., 1166., 1232., 636., 670., 0.,   272.,  289.,  594.,  629.,
      664., 342.,  360.,  0.,    357., 374., 769., 804.,  839.,  432.,  450.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2957.,  6172.,  6808.,  10611., 7420.,  11529., 8032.,
      8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      3794.,  7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  3248.,  2298.,  4688.,
      5432.,  8294.,  5680.,  8666.,  5928.,  6736.,  4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7469.,  15196., 16600., 25299., 17212., 26217.,
      17824., 19324., 5622.,  11416., 12416., 18890., 12824., 19502., 13232.,
      14296., 8597.,  17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9154.,
      18560., 19688., 29918., 20256., 30770., 20824., 22016., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  6048.,  4458.,  9008.,  10392.,
      15734., 10640., 16106., 10888., 12336., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11981., 24220., 26392., 39987., 27004.,
      40905., 27616., 29884., 8630.,  17432., 18944., 28682., 19352., 29294.,
      19760., 21336., 13109., 26476., 28840., 43659., 29452., 44577., 30064.,
      32524., 9382.,  18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      14237., 28732., 31288., 47331., 31900., 48249., 32512., 35164., 10134.,
      20440., 22208., 33578., 22616., 34190., 23024., 24856., 14514., 29280.,
      31048., 46958., 31616., 47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  0.,    311.,  365.,
      776.,  892.,  1008., 543.,  605.,  0.,    634.,  758.,  1608., 1872.,
      2136., 1146., 1286., 0.,    1254., 1378., 2928., 3192., 3456., 1846.,
      1986., 0.,    1939., 2149., 4556., 5000., 5444., 2899., 3133., 0.,
      1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,    2378., 2534.,
      5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441., 3008., 3188.,
      3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  0.,    587.,  689.,
      1424., 1636., 1848., 963.,  1073., 0.,    1186., 1406., 2904., 3360.,
      3816., 1986., 2222., 0.,    2286., 2506., 5184., 5640., 6096., 3166.,
      3402., 0.,    3487., 3841., 7940., 8672., 9404., 4879., 5257., 0.,
      2630., 2882., 5936., 6456., 6976., 3606., 3874., 0.,    3890., 4142.,
      8536., 9056., 9576., 4946., 5214., 0.,    2111., 2245., 4616., 4892.,
      5168., 2663., 2805., 0.,    2781., 2915., 5996., 6272., 6548., 3373.,
      3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,
      956.,    2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,   6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,   12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,   18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146.,  30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      23074.,  48188.,  53228.,  82998.,  58076.,  90270.,  62924.,  68732.,
      20492.,  42344.,  46216.,  71428.,  49448.,  76276.,  52680.,  57064.,
      29852.,  61704.,  65576.,  101428., 70088.,  108196., 74600.,  78984.,
      8750.,   17860.,  20564.,  31418.,  21540.,  32882.,  22516.,  25476.,
      17916.,  36552.,  42472.,  64852.,  44424.,  67780.,  46376.,  52808.,
      32396.,  66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858.,  101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348.,  78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      58786.,  119612., 130796., 199350., 135644., 206622., 140492., 152444.,
      44300.,  89960.,  97928.,  148996., 101160., 153844., 104392., 112872.,
      67714.,  137468., 150188., 228438., 155036., 235710., 159884., 173372.,
      50252.,  101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      72412.,  146824., 155816., 236788., 160328., 243556., 164840., 174344.,
      17230.,  34820.,  40084.,  60698.,  41060.,  62162.,  42036.,  47556.,
      34876.,  70472.,  81512.,  123412., 83464.,  126340., 85416.,  96968.,
      62156.,  125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      94498.,  191036., 208364., 315702., 213212., 322974., 218060., 236156.,
      68108.,  137576., 149640., 226564., 152872., 231412., 156104., 168680.,
      103426., 208892., 227756., 344790., 232604., 352062., 237452., 257084.,
      74060.,  149480., 162568., 245956., 165800., 250804., 169032., 182632.,
      112354., 226748., 247148., 373878., 251996., 381150., 256844., 278012.,
      80012.,  161384., 175496., 265348., 178728., 270196., 181960., 196584.,
      114972., 231944., 246056., 372148., 250568., 378916., 255080., 269704.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2810.,  3314.,  8668.,  9868.,
      11068., 6938.,  7634.,  0.,     4300.,  4764.,  10888., 11944., 13000.,
      7436.,  8028.,  0.,     6620.,  7084.,  16168., 17224., 18280., 10396.,
      10988., 0.,     4630.,  4926.,  10852., 11508., 12164., 6710.,  7070.,
      0.,     6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3252.,  1774.,  2262.,  0.,     2390.,  2814.,
      5988.,  6900.,  7812.,  4214.,  4702.,  0.,     4860.,  5836.,  12392.,
      14472., 16552., 8892.,  9996.,  0.,     9740.,  10716., 22792., 24872.,
      26952., 14412., 15516., 0.,     15050., 16706., 35452., 38956., 42460.,
      22634., 24482., 0.,     12460., 13692., 28744., 31336., 33928., 17900.,
      19260., 0.,     18620., 19852., 41704., 44296., 46888., 24700., 26060.,
      0.,     10630., 11310., 23620., 25044., 26468., 13862., 14606., 0.,
      14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6036.,  3166.,  4038.,  0.,     4550.,  5358.,  11076.,
      12756., 14436., 7526.,  8398.,  0.,     9180.,  10924., 22568., 26184.,
      29800., 15516., 17388., 0.,     17900., 19644., 40648., 44264., 47880.,
      24876., 26748., 0.,     27290., 30098., 62236., 68044., 73852., 38330.,
      41330., 0.,     20620., 22620., 46600., 50728., 54856., 28364., 30492.,
      0.,     30620., 32620., 67240., 71368., 75496., 39004., 41132., 0.,
      16630., 17694., 36388., 38580., 40772., 21014., 22142., 0.,     21950.,
      23014., 47348., 49540., 51732., 26654., 27782., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    14.,    37.,    40.,    43.,   46.,    82.,    88.,    73.,
      78.,    127.,   136.,   103.,   110.,  117.,   124.,   38.,    44.,
      98.,    112.,   126.,   140.,   224.,  248.,   186.,   204.,   314.,
      344.,   246.,   268.,   290.,   312.,  98.,    104.,   238.,   252.,
      266.,   280.,   464.,   488.,   366.,  384.,   614.,   644.,   466.,
      488.,   510.,   532.,   185.,   200.,  433.,   466.,   499.,   532.,
      846.,   900.,   649.,   688.,   1071., 1134.,  799.,   844.,   889.,
      934.,   282.,   296.,   606.,   636.,  666.,   696.,   1064.,  1112.,
      766.,   800.,   1214.,  1268.,  866.,  904.,   942.,   980.,   461.,
      488.,   985.,   1042.,  1099.,  1156., 1746.,  1836.,  1249.,  1312.,
      1971.,  2070.,  1399.,  1468.,  1537., 1606.,  466.,   488.,   974.,
      1020.,  1066.,  1112.,  1664.,  1736., 1166.,  1216.,  1814.,  1892.,
      1266.,  1320.,  1374.,  1428.,  737.,  776.,   1537.,  1618.,  1699.,
      1780.,  2646.,  2772.,  1849.,  1936., 2871.,  3006.,  1999.,  2092.,
      2185.,  2278.,  650.,   680.,   1342., 1404.,  1466.,  1528.,  2264.,
      2360.,  1566.,  1632.,  2414.,  2516., 1666.,  1736.,  1806.,  1876.,
      950.,   980.,   1962.,  2024.,  2086., 2148.,  3224.,  3320.,  2226.,
      2292.,  3434.,  3536.,  2366.,  2436., 2506.,  2576.,  273.,   294.,
      557.,   600.,   643.,   686.,   982.,  1048.,  673.,   718.,   1027.,
      1096.,  703.,   750.,   797.,   844.,  558.,   604.,   1138.,  1232.,
      1326.,  1420.,  2024.,  2168.,  1386., 1484.,  2114.,  2264.,  1446.,
      1548.,  1650.,  1752.,  1018.,  1064., 2078.,  2172.,  2266.,  2360.,
      3464.,  3608.,  2366.,  2464.,  3614., 3764.,  2466.,  2568.,  2670.,
      2772.,  1565.,  1640.,  3193.,  3346., 3499.,  3652.,  5346.,  5580.,
      3649.,  3808.,  5571.,  5814.,  3799., 3964.,  4129.,  4294.,  1202.,
      1256.,  2446.,  2556.,  2666.,  2776., 4064.,  4232.,  2766.,  2880.,
      4214.,  4388.,  2866.,  2984.,  3102., 3220.,  1841.,  1928.,  3745.,
      3922.,  4099.,  4276.,  6246.,  6516., 4249.,  4432.,  6471.,  6750.,
      4399.,  4588.,  4777.,  4966.,  1386., 1448.,  2814.,  2940.,  3066.,
      3192.,  4664.,  4856.,  3166.,  3296., 4814.,  5012.,  3266.,  3400.,
      3534.,  3668.,  2117.,  2216.,  4297., 4498.,  4699.,  4900.,  7146.,
      7452.,  4849.,  5056.,  7371.,  7686., 4999.,  5212.,  5425.,  5638.,
      1570.,  1640.,  3182.,  3324.,  3466., 3608.,  5264.,  5480.,  3566.,
      3712.,  5414.,  5636.,  3666.,  3816., 3966.,  4116.,  2270.,  2340.,
      4602.,  4744.,  4886.,  5028.,  7424., 7640.,  5026.,  5172.,  7634.,
      7856.,  5166.,  5316.,  5466.,  5616., 533.,   574.,   1077.,  1160.,
      1243.,  1326.,  1882.,  2008.,  1273., 1358.,  1927.,  2056.,  1303.,
      1390.,  1477.,  1564.,  1078.,  1164., 2178.,  2352.,  2526.,  2700.,
      3824.,  4088.,  2586.,  2764.,  3914., 4184.,  2646.,  2828.,  3010.,
      3192.,  1938.,  2024.,  3918.,  4092., 4266.,  4440.,  6464.,  6728.,
      4366.,  4544.,  6614.,  6884.,  4466., 4648.,  4830.,  5012.,  2945.,
      3080.,  5953.,  6226.,  6499.,  6772., 9846.,  10260., 6649.,  6928.,
      10071., 10494., 6799.,  7084.,  7369., 7654.,  2122.,  2216.,  4286.,
      4476.,  4666.,  4856.,  7064.,  7352., 4766.,  4960.,  7214.,  7508.,
      4866.,  5064.,  5262.,  5460.,  3221., 3368.,  6505.,  6802.,  7099.,
      7396.,  10746., 11196., 7249.,  7552., 10971., 11430., 7399.,  7708.,
      8017.,  8326.,  2306.,  2408.,  4654., 4860.,  5066.,  5272.,  7664.,
      7976.,  5166.,  5376.,  7814.,  8132., 5266.,  5480.,  5694.,  5908.,
      3497.,  3656.,  7057.,  7378.,  7699., 8020.,  11646., 12132., 7849.,
      8176.,  11871., 12366., 7999.,  8332., 8665.,  8998.,  2490.,  2600.,
      5022.,  5244.,  5466.,  5688.,  8264., 8600.,  5566.,  5792.,  8414.,
      8756.,  5666.,  5896.,  6126.,  6356., 3590.,  3700.,  7242.,  7464.,
      7686.,  7908.,  11624., 11960., 7826., 8052.,  11834., 12176., 7966.,
      8196.,  8426.,  8656.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      14.,   16.,   18.,   20.,   0.,    0.,    11.,   12.,   13.,   14.,
      37.,   40.,   43.,   46.,   49.,   52.,   34.,   36.,   38.,   40.,
      0.,    0.,    24.,   28.,   32.,   36.,   86.,   96.,   106.,  116.,
      126.,  136.,  82.,   88.,   94.,   100.,  0.,    0.,    64.,   68.,
      72.,   76.,   186.,  196.,  206.,  216.,  226.,  236.,  142.,  148.,
      154.,  160.,  0.,    0.,    109.,  118.,  127.,  136.,  317.,  338.,
      359.,  380.,  401.,  422.,  244.,  256.,  268.,  280.,  0.,    0.,
      148.,  156.,  164.,  172.,  370.,  388.,  406.,  424.,  442.,  460.,
      250.,  260.,  270.,  280.,  0.,    0.,    228.,  236.,  244.,  252.,
      550.,  568.,  586.,  604.,  622.,  640.,  350.,  360.,  370.,  380.,
      0.,    0.,    155.,  160.,  165.,  170.,  361.,  372.,  383.,  394.,
      405.,  416.,  222.,  228.,  234.,  240.,  0.,    0.,    205.,  210.,
      215.,  220.,  471.,  482.,  493.,  504.,  515.,  526.,  282.,  288.,
      294.,  300.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   43.,   58.,   73.,   88.,   103.,  118.,
      56.,   64.,   72.,   80.,   0.,    0.,    77.,   84.,   91.,   98.,
      193.,  208.,  223.,  238.,  253.,  268.,  136.,  144.,  152.,  160.,
      0.,    0.,    156.,  172.,  188.,  204.,  398.,  432.,  466.,  500.,
      534.,  568.,  286.,  304.,  322.,  340.,  0.,    0.,    316.,  332.,
      348.,  364.,  738.,  772.,  806.,  840.,  874.,  908.,  466.,  484.,
      502.,  520.,  0.,    0.,    487.,  514.,  541.,  568.,  1145., 1202.,
      1259., 1316., 1373., 1430., 730.,  760.,  790.,  820.,  0.,    0.,
      400.,  420.,  440.,  460.,  922.,  964.,  1006., 1048., 1090., 1132.,
      574.,  596.,  618.,  640.,  0.,    0.,    600.,  620.,  640.,  660.,
      1342., 1384., 1426., 1468., 1510., 1552., 794.,  816.,  838.,  860.,
      0.,    0.,    341.,  352.,  363.,  374.,  757.,  780.,  803.,  826.,
      849.,  872.,  444.,  456.,  468.,  480.,  0.,    0.,    451.,  462.,
      473.,  484.,  987.,  1010., 1033., 1056., 1079., 1102., 564.,  576.,
      588.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   79.,   106.,  133.,  160.,  187.,  214.,
      98.,   112.,  126.,  140.,  0.,    0.,    143.,  156.,  169.,  182.,
      349.,  376.,  403.,  430.,  457.,  484.,  238.,  252.,  266.,  280.,
      0.,    0.,    288.,  316.,  344.,  372.,  710.,  768.,  826.,  884.,
      942.,  1000., 490.,  520.,  550.,  580.,  0.,    0.,    568.,  596.,
      624.,  652.,  1290., 1348., 1406., 1464., 1522., 1580., 790.,  820.,
      850.,  880.,  0.,    0.,    865.,  910.,  955.,  1000., 1973., 2066.,
      2159., 2252., 2345., 2438., 1216., 1264., 1312., 1360., 0.,    0.,
      652.,  684.,  716.,  748.,  1474., 1540., 1606., 1672., 1738., 1804.,
      898.,  932.,  966.,  1000., 0.,    0.,    972.,  1004., 1036., 1068.,
      2134., 2200., 2266., 2332., 2398., 2464., 1238., 1272., 1306., 1340.,
      0.,    0.,    527.,  544.,  561.,  578.,  1153., 1188., 1223., 1258.,
      1293., 1328., 666.,  684.,  702.,  720.,  0.,    0.,    697.,  714.,
      731.,  748.,  1503., 1538., 1573., 1608., 1643., 1678., 846.,  864.,
      882.,  900.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,   260.,   280.,   300.,   557.,   599.,   516.,
      552.,   911.,   977.,   752.,   804.,   856.,   908.,   242.,   286.,
      656.,   760.,   864.,   968.,   1570.,  1750.,  1336.,  1472.,  2278.,
      2506.,  1808.,  1976.,  2144.,  2312.,  682.,   726.,   1696.,  1800.,
      1904.,  2008.,  3370.,  3550.,  2696.,  2832.,  4558.,  4786.,  3488.,
      3656.,  3824.,  3992.,  1315.,  1429.,  3128.,  3380.,  3632.,  3884.,
      6219.,  6633.,  4820.,  5120.,  8001.,  8487.,  6008.,  6356.,  6704.,
      7052.,  2138.,  2246.,  4608.,  4840.,  5072.,  5304.,  8122.,  8494.,
      5864.,  6128.,  9310.,  9730.,  6656.,  6952.,  7248.,  7544.,  3499.,
      3709.,  7496.,  7940.,  8384.,  8828.,  13347., 14049., 9572.,  10064.,
      15129., 15903., 10760., 11300., 11840., 12380., 3594.,  3766.,  7520.,
      7880.,  8240.,  8600.,  12874., 13438., 9032.,  9424.,  14062., 14674.,
      9824.,  10248., 10672., 11096., 5683.,  5989.,  11864., 12500., 13136.,
      13772., 20475., 21465., 14324., 15008., 22257., 23319., 15512., 16244.,
      16976., 17708., 5050.,  5286.,  10432., 10920., 11408., 11896., 17626.,
      18382., 12200., 12720., 18814., 19618., 12992., 13544., 14096., 14648.,
      7410.,  7646.,  15312., 15800., 16288., 16776., 25186., 25942., 17400.,
      17920., 26854., 27658., 18512., 19064., 19616., 20168., 2117.,  2283.,
      4320.,  4660.,  5000.,  5340.,  7637.,  8159.,  5236.,  5592.,  7991.,
      8537.,  5472.,  5844.,  6216.,  6588.,  4322.,  4686.,  8816.,  9560.,
      10304., 11048., 15730., 16870., 10776., 11552., 16438., 17626., 11248.,
      12056., 12864., 13672., 7962.,  8326.,  16256., 17000., 17744., 18488.,
      27130., 28270., 18536., 19312., 28318., 29506., 19328., 20136., 20944.,
      21752., 12235., 12829., 24968., 26180., 27392., 28604., 41859., 43713.,
      28580., 29840., 43641., 45567., 29768., 31076., 32384., 33692., 9418.,
      9846.,  19168., 20040., 20912., 21784., 31882., 33214., 21704., 22608.,
      33070., 34450., 22496., 23432., 24368., 25304., 14419., 15109., 29336.,
      30740., 32144., 33548., 48987., 51129., 33332., 34784., 50769., 52983.,
      34520., 36020., 37520., 39020., 10874., 11366., 22080., 23080., 24080.,
      25080., 36634., 38158., 24872., 25904., 37822., 39394., 25664., 26728.,
      27792., 28856., 16603., 17389., 33704., 35300., 36896., 38492., 56115.,
      58545., 38084., 39728., 57897., 60399., 39272., 40964., 42656., 44348.,
      12330., 12886., 24992., 26120., 27248., 28376., 41386., 43102., 28040.,
      29200., 42574., 44338., 28832., 30024., 31216., 32408., 17890., 18446.,
      36272., 37400., 38528., 39656., 58546., 60262., 39640., 40800., 60214.,
      61978., 40752., 41944., 43136., 44328., 4157.,  4483.,  8400.,  9060.,
      9720.,  10380., 14717., 15719., 9956.,  10632., 15071., 16097., 10192.,
      10884., 11576., 12268., 8402.,  9086.,  16976., 18360., 19744., 21128.,
      29890., 31990., 20216., 21632., 30598., 32746., 20688., 22136., 23584.,
      25032., 15242., 15926., 30816., 32200., 33584., 34968., 50890., 52990.,
      34376., 35792., 52078., 54226., 35168., 36616., 38064., 39512., 23155.,
      24229., 46808., 48980., 51152., 53324., 77499., 80793., 52340., 54560.,
      79281., 82647., 53528., 55796., 58064., 60332., 16698., 17446., 33728.,
      35240., 36752., 38264., 55642., 57934., 37544., 39088., 56830., 59170.,
      38336., 39912., 41488., 43064., 25339., 26509., 51176., 53540., 55904.,
      58268., 84627., 88209., 57092., 59504., 86409., 90063., 58280., 60740.,
      63200., 65660., 18154., 18966., 36640., 38280., 39920., 41560., 60394.,
      62878., 40712., 42384., 61582., 64114., 41504., 43208., 44912., 46616.,
      27523., 28789., 55544., 58100., 60656., 63212., 91755., 95625., 61844.,
      64448., 93537., 97479., 63032., 65684., 68336., 70988., 19610., 20486.,
      39552., 41320., 43088., 44856., 65146., 67822., 43880., 45680., 66334.,
      69058., 44672., 46504., 48336., 50168., 28370., 29246., 57232., 59000.,
      60768., 62536., 91906., 94582., 61880., 63680., 93574., 96298., 62992.,
      64824., 66656., 68488.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   95.,    109.,   123.,   137.,   0.,     0.,     65.,    71.,
      77.,    83.,    240.,   260.,   280.,   300.,   320.,   340.,   235.,
      249.,   263.,   277.,   0.,     0.,     142.,   170.,   198.,   226.,
      568.,   640.,   712.,   784.,   856.,   928.,   578.,   622.,   666.,
      710.,   0.,     0.,     422.,   450.,   478.,   506.,   1288.,  1360.,
      1432.,  1504.,  1576.,  1648.,  1018.,  1062.,  1106.,  1150.,  0.,
      0.,     731.,   797.,   863.,   929.,   2224.,  2380.,  2536.,  2692.,
      2848.,  3004.,  1769.,  1859.,  1949.,  2039.,  0.,     0.,     1086.,
      1146.,  1206.,  1266.,  2744.,  2880.,  3016.,  3152.,  3288.,  3424.,
      1874.,  1950.,  2026.,  2102.,  0.,     0.,     1686.,  1746.,  1806.,
      1866.,  4104.,  4240.,  4376.,  4512.,  4648.,  4784.,  2634.,  2710.,
      2786.,  2862.,  0.,     0.,     1169.,  1207.,  1245.,  1283.,  2736.,
      2820.,  2904.,  2988.,  3072.,  3156.,  1691.,  1737.,  1783.,  1829.,
      0.,     0.,     1549.,  1587.,  1625.,  1663.,  3576.,  3660.,  3744.,
      3828.,  3912.,  3996.,  2151.,  2197.,  2243.,  2289.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     41.,    95.,
      149.,   203.,   304.,   420.,   536.,   652.,   768.,   884.,   419.,
      481.,   543.,   605.,   0.,     0.,     581.,   635.,   689.,   743.,
      1464.,  1580.,  1696.,  1812.,  1928.,  2044.,  1039.,  1101.,  1163.,
      1225.,  0.,     0.,     1174.,  1298.,  1422.,  1546.,  3016.,  3280.,
      3544.,  3808.,  4072.,  4336.,  2186.,  2326.,  2466.,  2606.,  0.,
      0.,     2414.,  2538.,  2662.,  2786.,  5656.,  5920.,  6184.,  6448.,
      6712.,  6976.,  3586.,  3726.,  3866.,  4006.,  0.,     0.,     3719.,
      3929.,  4139.,  4349.,  8776.,  9220.,  9664.,  10108., 10552., 10996.,
      5621.,  5855.,  6089.,  6323.,  0.,     0.,     3078.,  3234.,  3390.,
      3546.,  7112.,  7440.,  7768.,  8096.,  8424.,  8752.,  4442.,  4614.,
      4786.,  4958.,  0.,     0.,     4638.,  4794.,  4950.,  5106.,  10392.,
      10720., 11048., 11376., 11704., 12032., 6162.,  6334.,  6506.,  6678.,
      0.,     0.,     2645.,  2731.,  2817.,  2903.,  5880.,  6060.,  6240.,
      6420.,  6600.,  6780.,  3455.,  3549.,  3643.,  3737.,  0.,     0.,
      3505.,  3591.,  3677.,  3763.,  7680.,  7860.,  8040.,  8220.,  8400.,
      8580.,  4395.,  4489.,  4583.,  4677.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     77.,    179.,   281.,   383.,
      568.,   780.,   992.,   1204.,  1416.,  1628.,  743.,   853.,   963.,
      1073.,  0.,     0.,     1097.,  1199.,  1301.,  1403.,  2688.,  2900.,
      3112.,  3324.,  3536.,  3748.,  1843.,  1953.,  2063.,  2173.,  0.,
      0.,     2206.,  2426.,  2646.,  2866.,  5464.,  5920.,  6376.,  6832.,
      7288.,  7744.,  3794.,  4030.,  4266.,  4502.,  0.,     0.,     4406.,
      4626.,  4846.,  5066.,  10024., 10480., 10936., 11392., 11848., 12304.,
      6154.,  6390.,  6626.,  6862.,  0.,     0.,     6707.,  7061.,  7415.,
      7769.,  15328., 16060., 16792., 17524., 18256., 18988., 9473.,  9851.,
      10229., 10607., 0.,     0.,     5070.,  5322.,  5574.,  5826.,  11480.,
      12000., 12520., 13040., 13560., 14080., 7010.,  7278.,  7546.,  7814.,
      0.,     0.,     7590.,  7842.,  8094.,  8346.,  16680., 17200., 17720.,
      18240., 18760., 19280., 9690.,  9958.,  10226., 10494., 0.,     0.,
      4121.,  4255.,  4389.,  4523.,  9024.,  9300.,  9576.,  9852.,  10128.,
      10404., 5219.,  5361.,  5503.,  5645.,  0.,     0.,     5461.,  5595.,
      5729.,  5863.,  11784., 12060., 12336., 12612., 12888., 13164., 6639.,
      6781.,  6923.,  7065.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   6532.,   6932.,
      1692.,   2028.,   4744.,   5544.,   6344.,   7144.,   11684.,  13076.,
      10088.,  11144.,  17300.,  19076.,  13832.,  15144.,  16456.,  17768.,
      5052.,   5388.,   12744.,  13544.,  14344.,  15144.,  25604.,  26996.,
      20648.,  21704.,  35060.,  36836.,  26952.,  28264.,  29576.,  30888.,
      9866.,   10754.,  23692.,  25660.,  27628.,  29596.,  47574.,  50814.,
      37084.,  39436.,  61758.,  65574.,  46540.,  49276.,  52012.,  54748.,
      16636.,  17484.,  35912.,  37736.,  39560.,  41384.,  63428.,  66356.,
      45864.,  47944.,  72884.,  76196.,  52168.,  54504.,  56840.,  59176.,
      27242.,  28898.,  58444.,  61948.,  65452.,  68956.,  104310., 109854.,
      74908.,  78796.,  118494., 124614., 84364.,  88636.,  92908.,  97180.,
      28220.,  29580.,  59080.,  61928.,  64776.,  67624.,  101252., 105716.,
      71080.,  74184.,  110708., 115556., 77384.,  80744.,  84104.,  87464.,
      44618.,  47042.,  93196.,  98236.,  103276., 108316., 161046., 168894.,
      112732., 118156., 175230., 183654., 122188., 127996., 133804., 139612.,
      39804.,  41676.,  82248.,  86120.,  89992.,  93864.,  139076., 145076.,
      96296.,  100424., 148532., 154916., 102600., 106984., 111368., 115752.,
      58524.,  60396.,  120968., 124840., 128712., 132584., 199076., 205076.,
      137576., 141704., 212372., 218756., 146440., 150824., 155208., 159592.,
      16670.,  17990.,  34020.,  36724.,  39428.,  42132.,  60226.,  64378.,
      41300.,  44132.,  63034.,  67378.,  43172.,  46132.,  49092.,  52052.,
      34012.,  36908.,  69384.,  75304.,  81224.,  87144.,  124004., 133076.,
      84968.,  91144.,  129620., 139076., 88712.,  95144.,  101576., 108008.,
      62972.,  65868.,  128584., 134504., 140424., 146344., 214724., 223796.,
      146728., 152904., 224180., 233636., 153032., 159464., 165896., 172328.,
      96746.,  101474., 197452., 207100., 216748., 226396., 331254., 346014.,
      226204., 236236., 345438., 360774., 235660., 246076., 256492., 266908.,
      74556.,  77964.,  151752., 158696., 165640., 172584., 252548., 263156.,
      171944., 179144., 262004., 272996., 178248., 185704., 193160., 200616.,
      114122., 119618., 232204., 243388., 254572., 265756., 387990., 405054.,
      264028., 275596., 402174., 419814., 273484., 285436., 297388., 309340.,
      86140.,  90060.,  174920., 182888., 190856., 198824., 290372., 302516.,
      197160., 205384., 299828., 312356., 203464., 211944., 220424., 228904.,
      131498., 137762., 266956., 279676., 292396., 305116., 444726., 464094.,
      301852., 314956., 458910., 478854., 311308., 324796., 338284., 351772.,
      97724.,  102156., 198088., 207080., 216072., 225064., 328196., 341876.,
      222376., 231624., 337652., 351716., 228680., 238184., 247688., 257192.,
      142044., 146476., 288008., 297000., 305992., 314984., 464996., 478676.,
      314856., 324104., 478292., 492356., 323720., 333224., 342728., 352232.,
      32830.,  35430.,  66340.,  71604.,  76868.,  82132.,  116386., 124378.,
      78740.,  84132.,  119194., 127378., 80612.,  86132.,  91652.,  97172.,
      66332.,  71788.,  134024., 145064., 156104., 167144., 236324., 253076.,
      159848., 171144., 241940., 259076., 163592., 175144., 186696., 198248.,
      120892., 126348., 244424., 255464., 266504., 277544., 403844., 420596.,
      272808., 284104., 413300., 430436., 279112., 290664., 302216., 313768.,
      183626., 192194., 371212., 388540., 405868., 423196., 614934., 641214.,
      415324., 433036., 629118., 655974., 424780., 442876., 460972., 479068.,
      132476., 138444., 267592., 279656., 291720., 303784., 441668., 459956.,
      298024., 310344., 451124., 469796., 304328., 316904., 329480., 342056.,
      201002., 210338., 405964., 424828., 443692., 462556., 671670., 700254.,
      453148., 472396., 685854., 715014., 462604., 482236., 501868., 521500.,
      144060., 150540., 290760., 303848., 316936., 330024., 479492., 499316.,
      323240., 336584., 488948., 509156., 329544., 343144., 356744., 370344.,
      218378., 228482., 440716., 461116., 481516., 501916., 728406., 759294.,
      490972., 511756., 742590., 774054., 500428., 521596., 542764., 563932.,
      155644., 162636., 313928., 328040., 342152., 356264., 517316., 538676.,
      348456., 362824., 526772., 548516., 354760., 369384., 384008., 398632.,
      225564., 232556., 455048., 469160., 483272., 497384., 730916., 752276.,
      492136., 506504., 744212., 765956., 501000., 515624., 530248., 544872.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,   150.,   260.,    404.,    548.,    692.,
      836.,    980.,    694.,   798.,   902.,    1006.,   0.,      0.,
      430.,    470.,    510.,   550.,   1700.,   1844.,   1988.,   2132.,
      2276.,   2420.,   1734.,  1838.,  1942.,   2046.,   0.,      0.,
      940.,    1148.,   1356.,  1564.,  4072.,   4616.,   5160.,   5704.,
      6248.,   6792.,   4316.,  4652.,  4988.,   5324.,   0.,      0.,
      3020.,   3228.,   3436.,  3644.,  9512.,   10056.,  10600.,  11144.,
      11688.,  12232.,  7676.,  8012.,  8348.,   8684.,   0.,      0.,
      5290.,   5794.,   6298.,  6802.,  16556.,  17756.,  18956.,  20156.,
      21356.,  22556.,  13426., 14122., 14818.,  15514.,  0.,      0.,
      8300.,   8764.,   9228.,  9692.,  21096.,  22152.,  23208.,  24264.,
      25320.,  26376.,  14492., 15084., 15676.,  16268.,  0.,      0.,
      12940.,  13404.,  13868., 14332., 31656.,  32712.,  33768.,  34824.,
      35880.,  36936.,  20412., 21004., 21596.,  22188.,  0.,      0.,
      9070.,   9366.,   9662.,  9958.,  21284.,  21940.,  22596.,  23252.,
      23908.,  24564.,  13190., 13550., 13910.,  14270.,  0.,      0.,
      12030.,  12326.,  12622., 12918., 27844.,  28500.,  29156.,  29812.,
      30468.,  31124.,  16790., 17150., 17510.,  17870.,  0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,
      270.,    694.,    1118.,  1542.,  2276.,   3188.,   4100.,   5012.,
      5924.,   6836.,   3238.,  3726.,  4214.,   4702.,   0.,      0.,
      4510.,   4934.,   5358.,  5782.,  11396.,  12308.,  13220.,  14132.,
      15044.,  15956.,  8118.,  8606.,  9094.,   9582.,   0.,      0.,
      9100.,   10076.,  11052., 12028., 23464.,  25544.,  27624.,  29704.,
      31784.,  33864.,  17084., 18188., 19292.,  20396.,  0.,      0.,
      18860.,  19836.,  20812., 21788., 44264.,  46344.,  48424.,  50504.,
      52584.,  54664.,  28124., 29228., 30332.,  31436.,  0.,      0.,
      29050.,  30706.,  32362., 34018., 68684.,  72188.,  75692.,  79196.,
      82700.,  86204.,  44098., 45946., 47794.,  49642.,  0.,      0.,
      24140.,  25372.,  26604., 27836., 55848.,  58440.,  61032.,  63624.,
      66216.,  68808.,  34940., 36300., 37660.,  39020.,  0.,      0.,
      36460.,  37692.,  38924., 40156., 81768.,  84360.,  86952.,  89544.,
      92136.,  94728.,  48540., 49900., 51260.,  52620.,  0.,      0.,
      20830.,  21510.,  22190., 22870., 46340.,  47764.,  49188.,  50612.,
      52036.,  53460.,  27254., 27998., 28742.,  29486.,  0.,      0.,
      27630.,  28310.,  28990., 29670., 60580.,  62004.,  63428.,  64852.,
      66276.,  67700.,  34694., 35438., 36182.,  36926.,  0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,  2934.,  4292.,   5972.,   7652.,   9332.,
      11012.,  12692.,  5782.,  6654.,  7526.,   8398.,   0.,      0.,
      8590.,   9398.,   10206., 11014., 21092.,  22772.,  24452.,  26132.,
      27812.,  29492.,  14502., 15374., 16246.,  17118.,  0.,      0.,
      17260.,  19004.,  20748., 22492., 42856.,  46472.,  50088.,  53704.,
      57320.,  60936.,  29852., 31724., 33596.,  35468.,  0.,      0.,
      34700.,  36444.,  38188., 39932., 79016.,  82632.,  86248.,  89864.,
      93480.,  97096.,  48572., 50444., 52316.,  54188.,  0.,      0.,
      52810.,  55618.,  58426., 61234., 120812., 126620., 132428., 138236.,
      144044., 149852., 74770., 77770., 80770.,  83770.,  0.,      0.,
      39980.,  41980.,  43980., 45980., 90600.,  94728.,  98856.,  102984.,
      107112., 111240., 55388., 57516., 59644.,  61772.,  0.,      0.,
      59980.,  61980.,  63980., 65980., 131880., 136008., 140136., 144264.,
      148392., 152520., 76668., 78796., 80924.,  83052.,  0.,      0.,
      32590.,  33654.,  34718., 35782., 71396.,  73588.,  75780.,  77972.,
      80164.,  82356.,  41318., 42446., 43574.,  44702.,  0.,      0.,
      43230.,  44294.,  45358., 46422., 93316.,  95508.,  97700.,  99892.,
      102084., 104276., 52598., 53726., 54854.,  55982.,  0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,     0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,
      86.,    89.,    92.,    158.,   164.,   170.,   176.,   141.,   146.,
      151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,
      220.,   227.,   234.,   241.,   248.,   70.,    76.,    82.,    88.,
      182.,   196.,   210.,   224.,   238.,   252.,   266.,   280.,   424.,
      448.,   472.,   496.,   354.,   372.,   390.,   408.,   598.,   628.,
      658.,   688.,   470.,   492.,   514.,   536.,   558.,   580.,   602.,
      624.,   190.,   196.,   202.,   208.,   462.,   476.,   490.,   504.,
      518.,   532.,   546.,   560.,   904.,   928.,   952.,   976.,   714.,
      732.,   750.,   768.,   1198.,  1228.,  1258.,  1288.,  910.,   932.,
      954.,   976.,   998.,   1020.,  1042.,  1064.,  355.,   370.,   385.,
      400.,   833.,   866.,   899.,   932.,   965.,   998.,   1031.,  1064.,
      1638.,  1692.,  1746.,  1800.,  1259.,  1298.,  1337.,  1376.,  2079.,
      2142.,  2205.,  2268.,  1553.,  1598.,  1643.,  1688.,  1733.,  1778.,
      1823.,  1868.,  550.,   564.,   578.,   592.,   1182.,  1212.,  1242.,
      1272.,  1302.,  1332.,  1362.,  1392.,  2080.,  2128.,  2176.,  2224.,
      1498.,  1532.,  1566.,  1600.,  2374.,  2428.,  2482.,  2536.,  1694.,
      1732.,  1770.,  1808.,  1846.,  1884.,  1922.,  1960.,  895.,   922.,
      949.,   976.,   1913.,  1970.,  2027.,  2084.,  2141.,  2198.,  2255.,
      2312.,  3402.,  3492.,  3582.,  3672.,  2435.,  2498.,  2561.,  2624.,
      3843.,  3942.,  4041.,  4140.,  2729.,  2798.,  2867.,  2936.,  3005.,
      3074.,  3143.,  3212.,  910.,   932.,   954.,   976.,   1902.,  1948.,
      1994.,  2040.,  2086.,  2132.,  2178.,  2224.,  3256.,  3328.,  3400.,
      3472.,  2282.,  2332.,  2382.,  2432.,  3550.,  3628.,  3706.,  3784.,
      2478.,  2532.,  2586.,  2640.,  2694.,  2748.,  2802.,  2856.,  1435.,
      1474.,  1513.,  1552.,  2993.,  3074.,  3155.,  3236.,  3317.,  3398.,
      3479.,  3560.,  5166.,  5292.,  5418.,  5544.,  3611.,  3698.,  3785.,
      3872.,  5607.,  5742.,  5877.,  6012.,  3905.,  3998.,  4091.,  4184.,
      4277.,  4370.,  4463.,  4556.,  1270.,  1300.,  1330.,  1360.,  2622.,
      2684.,  2746.,  2808.,  2870.,  2932.,  2994.,  3056.,  4432.,  4528.,
      4624.,  4720.,  3066.,  3132.,  3198.,  3264.,  4726.,  4828.,  4930.,
      5032.,  3262.,  3332.,  3402.,  3472.,  3542.,  3612.,  3682.,  3752.,
      1870.,  1900.,  1930.,  1960.,  3862.,  3924.,  3986.,  4048.,  4110.,
      4172.,  4234.,  4296.,  6352.,  6448.,  6544.,  6640.,  4386.,  4452.,
      4518.,  4584.,  6766.,  6868.,  6970.,  7072.,  4662.,  4732.,  4802.,
      4872.,  4942.,  5012.,  5082.,  5152.,  525.,   546.,   567.,   588.,
      1071.,  1114.,  1157.,  1200.,  1243.,  1286.,  1329.,  1372.,  1898.,
      1964.,  2030.,  2096.,  1301.,  1346.,  1391.,  1436.,  1985.,  2054.,
      2123.,  2192.,  1359.,  1406.,  1453.,  1500.,  1547.,  1594.,  1641.,
      1688.,  1070.,  1116.,  1162.,  1208.,  2182.,  2276.,  2370.,  2464.,
      2558.,  2652.,  2746.,  2840.,  3904.,  4048.,  4192.,  4336.,  2674.,
      2772.,  2870.,  2968.,  4078.,  4228.,  4378.,  4528.,  2790.,  2892.,
      2994.,  3096.,  3198.,  3300.,  3402.,  3504.,  1990.,  2036.,  2082.,
      2128.,  4062.,  4156.,  4250.,  4344.,  4438.,  4532.,  4626.,  4720.,
      6784.,  6928.,  7072.,  7216.,  4634.,  4732.,  4830.,  4928.,  7078.,
      7228.,  7378.,  7528.,  4830.,  4932.,  5034.,  5136.,  5238.,  5340.,
      5442.,  5544.,  3055.,  3130.,  3205.,  3280.,  6233.,  6386.,  6539.,
      6692.,  6845.,  6998.,  7151.,  7304.,  10458., 10692., 10926., 11160.,
      7139.,  7298.,  7457.,  7616.,  10899., 11142., 11385., 11628., 7433.,
      7598.,  7763.,  7928.,  8093.,  8258.,  8423.,  8588.,  2350.,  2404.,
      2458.,  2512.,  4782.,  4892.,  5002.,  5112.,  5222.,  5332.,  5442.,
      5552.,  7960.,  8128.,  8296.,  8464.,  5418.,  5532.,  5646.,  5760.,
      8254.,  8428.,  8602.,  8776.,  5614.,  5732.,  5850.,  5968.,  6086.,
      6204.,  6322.,  6440.,  3595.,  3682.,  3769.,  3856.,  7313.,  7490.,
      7667.,  7844.,  8021.,  8198.,  8375.,  8552.,  12222., 12492., 12762.,
      13032., 8315.,  8498.,  8681.,  8864.,  12663., 12942., 13221., 13500.,
      8609.,  8798.,  8987.,  9176.,  9365.,  9554.,  9743.,  9932.,  2710.,
      2772.,  2834.,  2896.,  5502.,  5628.,  5754.,  5880.,  6006.,  6132.,
      6258.,  6384.,  9136.,  9328.,  9520.,  9712.,  6202.,  6332.,  6462.,
      6592.,  9430.,  9628.,  9826.,  10024., 6398.,  6532.,  6666.,  6800.,
      6934.,  7068.,  7202.,  7336.,  4135.,  4234.,  4333.,  4432.,  8393.,
      8594.,  8795.,  8996.,  9197.,  9398.,  9599.,  9800.,  13986., 14292.,
      14598., 14904., 9491.,  9698.,  9905.,  10112., 14427., 14742., 15057.,
      15372., 9785.,  9998.,  10211., 10424., 10637., 10850., 11063., 11276.,
      3070.,  3140.,  3210.,  3280.,  6222.,  6364.,  6506.,  6648.,  6790.,
      6932.,  7074.,  7216.,  10312., 10528., 10744., 10960., 6986.,  7132.,
      7278.,  7424.,  10606., 10828., 11050., 11272., 7182.,  7332.,  7482.,
      7632.,  7782.,  7932.,  8082.,  8232.,  4470.,  4540.,  4610.,  4680.,
      9062.,  9204.,  9346.,  9488.,  9630.,  9772.,  9914.,  10056., 14632.,
      14848., 15064., 15280., 9906.,  10052., 10198., 10344., 15046., 15268.,
      15490., 15712., 10182., 10332., 10482., 10632., 10782., 10932., 11082.,
      11232., 1025.,  1066.,  1107.,  1148.,  2071.,  2154.,  2237.,  2320.,
      2403.,  2486.,  2569.,  2652.,  3638.,  3764.,  3890.,  4016.,  2461.,
      2546.,  2631.,  2716.,  3725.,  3854.,  3983.,  4112.,  2519.,  2606.,
      2693.,  2780.,  2867.,  2954.,  3041.,  3128.,  2070.,  2156.,  2242.,
      2328.,  4182.,  4356.,  4530.,  4704.,  4878.,  5052.,  5226.,  5400.,
      7384.,  7648.,  7912.,  8176.,  4994.,  5172.,  5350.,  5528.,  7558.,
      7828.,  8098.,  8368.,  5110.,  5292.,  5474.,  5656.,  5838.,  6020.,
      6202.,  6384.,  3790.,  3876.,  3962.,  4048.,  7662.,  7836.,  8010.,
      8184.,  8358.,  8532.,  8706.,  8880.,  12664., 12928., 13192., 13456.,
      8554.,  8732.,  8910.,  9088.,  12958., 13228., 13498., 13768., 8750.,
      8932.,  9114.,  9296.,  9478.,  9660.,  9842.,  10024., 5755.,  5890.,
      6025.,  6160.,  11633., 11906., 12179., 12452., 12725., 12998., 13271.,
      13544., 19278., 19692., 20106., 20520., 13019., 13298., 13577., 13856.,
      19719., 20142., 20565., 20988., 13313., 13598., 13883., 14168., 14453.,
      14738., 15023., 15308., 4150.,  4244.,  4338.,  4432.,  8382.,  8572.,
      8762.,  8952.,  9142.,  9332.,  9522.,  9712.,  13840., 14128., 14416.,
      14704., 9338.,  9532.,  9726.,  9920.,  14134., 14428., 14722., 15016.,
      9534.,  9732.,  9930.,  10128., 10326., 10524., 10722., 10920., 6295.,
      6442.,  6589.,  6736.,  12713., 13010., 13307., 13604., 13901., 14198.,
      14495., 14792., 21042., 21492., 21942., 22392., 14195., 14498., 14801.,
      15104., 21483., 21942., 22401., 22860., 14489., 14798., 15107., 15416.,
      15725., 16034., 16343., 16652., 4510.,  4612.,  4714.,  4816.,  9102.,
      9308.,  9514.,  9720.,  9926.,  10132., 10338., 10544., 15016., 15328.,
      15640., 15952., 10122., 10332., 10542., 10752., 15310., 15628., 15946.,
      16264., 10318., 10532., 10746., 10960., 11174., 11388., 11602., 11816.,
      6835.,  6994.,  7153.,  7312.,  13793., 14114., 14435., 14756., 15077.,
      15398., 15719., 16040., 22806., 23292., 23778., 24264., 15371., 15698.,
      16025., 16352., 23247., 23742., 24237., 24732., 15665., 15998., 16331.,
      16664., 16997., 17330., 17663., 17996., 4870.,  4980.,  5090.,  5200.,
      9822.,  10044., 10266., 10488., 10710., 10932., 11154., 11376., 16192.,
      16528., 16864., 17200., 10906., 11132., 11358., 11584., 16486., 16828.,
      17170., 17512., 11102., 11332., 11562., 11792., 12022., 12252., 12482.,
      12712., 7070.,  7180.,  7290.,  7400.,  14262., 14484., 14706., 14928.,
      15150., 15372., 15594., 15816., 22912., 23248., 23584., 23920., 15426.,
      15652., 15878., 16104., 23326., 23668., 24010., 24352., 15702., 15932.,
      16162., 16392., 16622., 16852., 17082., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,    11.,   14.,
      17.,   20.,   23.,   26.,   29.,   32.,   35.,   38.,   41.,   44.,
      26.,   28.,   30.,   32.,   34.,   36.,   38.,   40.,   0.,    0.,
      0.,    0.,    21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,
      71.,   74.,   77.,   80.,   83.,   86.,   89.,   92.,   95.,   98.,
      101.,  104.,  66.,   68.,   70.,   72.,   74.,   76.,   78.,   80.,
      0.,    0.,    0.,    0.,    44.,   48.,   52.,   56.,   60.,   64.,
      68.,   72.,   162.,  172.,  182.,  192.,  202.,  212.,  222.,  232.,
      242.,  252.,  262.,  272.,  158.,  164.,  170.,  176.,  182.,  188.,
      194.,  200.,  0.,    0.,    0.,    0.,    124.,  128.,  132.,  136.,
      140.,  144.,  148.,  152.,  362.,  372.,  382.,  392.,  402.,  412.,
      422.,  432.,  442.,  452.,  462.,  472.,  278.,  284.,  290.,  296.,
      302.,  308.,  314.,  320.,  0.,    0.,    0.,    0.,    209.,  218.,
      227.,  236.,  245.,  254.,  263.,  272.,  613.,  634.,  655.,  676.,
      697.,  718.,  739.,  760.,  781.,  802.,  823.,  844.,  476.,  488.,
      500.,  512.,  524.,  536.,  548.,  560.,  0.,    0.,    0.,    0.,
      288.,  296.,  304.,  312.,  320.,  328.,  336.,  344.,  722.,  740.,
      758.,  776.,  794.,  812.,  830.,  848.,  866.,  884.,  902.,  920.,
      490.,  500.,  510.,  520.,  530.,  540.,  550.,  560.,  0.,    0.,
      0.,    0.,    448.,  456.,  464.,  472.,  480.,  488.,  496.,  504.,
      1082., 1100., 1118., 1136., 1154., 1172., 1190., 1208., 1226., 1244.,
      1262., 1280., 690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,
      0.,    0.,    0.,    0.,    305.,  310.,  315.,  320.,  325.,  330.,
      335.,  340.,  711.,  722.,  733.,  744.,  755.,  766.,  777.,  788.,
      799.,  810.,  821.,  832.,  438.,  444.,  450.,  456.,  462.,  468.,
      474.,  480.,  0.,    0.,    0.,    0.,    405.,  410.,  415.,  420.,
      425.,  430.,  435.,  440.,  931.,  942.,  953.,  964.,  975.,  986.,
      997.,  1008., 1019., 1030., 1041., 1052., 558.,  564.,  570.,  576.,
      582.,  588.,  594.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      7.,    14.,   21.,   28.,   35.,   42.,   49.,   56.,   71.,   86.,
      101.,  116.,  131.,  146.,  161.,  176.,  191.,  206.,  221.,  236.,
      104.,  112.,  120.,  128.,  136.,  144.,  152.,  160.,  0.,    0.,
      0.,    0.,    147.,  154.,  161.,  168.,  175.,  182.,  189.,  196.,
      371.,  386.,  401.,  416.,  431.,  446.,  461.,  476.,  491.,  506.,
      521.,  536.,  264.,  272.,  280.,  288.,  296.,  304.,  312.,  320.,
      0.,    0.,    0.,    0.,    296.,  312.,  328.,  344.,  360.,  376.,
      392.,  408.,  762.,  796.,  830.,  864.,  898.,  932.,  966.,  1000.,
      1034., 1068., 1102., 1136., 554.,  572.,  590.,  608.,  626.,  644.,
      662.,  680.,  0.,    0.,    0.,    0.,    616.,  632.,  648.,  664.,
      680.,  696.,  712.,  728.,  1442., 1476., 1510., 1544., 1578., 1612.,
      1646., 1680., 1714., 1748., 1782., 1816., 914.,  932.,  950.,  968.,
      986.,  1004., 1022., 1040., 0.,    0.,    0.,    0.,    947.,  974.,
      1001., 1028., 1055., 1082., 1109., 1136., 2233., 2290., 2347., 2404.,
      2461., 2518., 2575., 2632., 2689., 2746., 2803., 2860., 1430., 1460.,
      1490., 1520., 1550., 1580., 1610., 1640., 0.,    0.,    0.,    0.,
      780.,  800.,  820.,  840.,  860.,  880.,  900.,  920.,  1802., 1844.,
      1886., 1928., 1970., 2012., 2054., 2096., 2138., 2180., 2222., 2264.,
      1126., 1148., 1170., 1192., 1214., 1236., 1258., 1280., 0.,    0.,
      0.,    0.,    1180., 1200., 1220., 1240., 1260., 1280., 1300., 1320.,
      2642., 2684., 2726., 2768., 2810., 2852., 2894., 2936., 2978., 3020.,
      3062., 3104., 1566., 1588., 1610., 1632., 1654., 1676., 1698., 1720.,
      0.,    0.,    0.,    0.,    671.,  682.,  693.,  704.,  715.,  726.,
      737.,  748.,  1491., 1514., 1537., 1560., 1583., 1606., 1629., 1652.,
      1675., 1698., 1721., 1744., 876.,  888.,  900.,  912.,  924.,  936.,
      948.,  960.,  0.,    0.,    0.,    0.,    891.,  902.,  913.,  924.,
      935.,  946.,  957.,  968.,  1951., 1974., 1997., 2020., 2043., 2066.,
      2089., 2112., 2135., 2158., 2181., 2204., 1116., 1128., 1140., 1152.,
      1164., 1176., 1188., 1200., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   26.,   39.,   52.,   65.,   78.,   91.,   104.,  131.,  158.,
      185.,  212.,  239.,  266.,  293.,  320.,  347.,  374.,  401.,  428.,
      182.,  196.,  210.,  224.,  238.,  252.,  266.,  280.,  0.,    0.,
      0.,    0.,    273.,  286.,  299.,  312.,  325.,  338.,  351.,  364.,
      671.,  698.,  725.,  752.,  779.,  806.,  833.,  860.,  887.,  914.,
      941.,  968.,  462.,  476.,  490.,  504.,  518.,  532.,  546.,  560.,
      0.,    0.,    0.,    0.,    548.,  576.,  604.,  632.,  660.,  688.,
      716.,  744.,  1362., 1420., 1478., 1536., 1594., 1652., 1710., 1768.,
      1826., 1884., 1942., 2000., 950.,  980.,  1010., 1040., 1070., 1100.,
      1130., 1160., 0.,    0.,    0.,    0.,    1108., 1136., 1164., 1192.,
      1220., 1248., 1276., 1304., 2522., 2580., 2638., 2696., 2754., 2812.,
      2870., 2928., 2986., 3044., 3102., 3160., 1550., 1580., 1610., 1640.,
      1670., 1700., 1730., 1760., 0.,    0.,    0.,    0.,    1685., 1730.,
      1775., 1820., 1865., 1910., 1955., 2000., 3853., 3946., 4039., 4132.,
      4225., 4318., 4411., 4504., 4597., 4690., 4783., 4876., 2384., 2432.,
      2480., 2528., 2576., 2624., 2672., 2720., 0.,    0.,    0.,    0.,
      1272., 1304., 1336., 1368., 1400., 1432., 1464., 1496., 2882., 2948.,
      3014., 3080., 3146., 3212., 3278., 3344., 3410., 3476., 3542., 3608.,
      1762., 1796., 1830., 1864., 1898., 1932., 1966., 2000., 0.,    0.,
      0.,    0.,    1912., 1944., 1976., 2008., 2040., 2072., 2104., 2136.,
      4202., 4268., 4334., 4400., 4466., 4532., 4598., 4664., 4730., 4796.,
      4862., 4928., 2442., 2476., 2510., 2544., 2578., 2612., 2646., 2680.,
      0.,    0.,    0.,    0.,    1037., 1054., 1071., 1088., 1105., 1122.,
      1139., 1156., 2271., 2306., 2341., 2376., 2411., 2446., 2481., 2516.,
      2551., 2586., 2621., 2656., 1314., 1332., 1350., 1368., 1386., 1404.,
      1422., 1440., 0.,    0.,    0.,    0.,    1377., 1394., 1411., 1428.,
      1445., 1462., 1479., 1496., 2971., 3006., 3041., 3076., 3111., 3146.,
      3181., 3216., 3251., 3286., 3321., 3356., 1674., 1692., 1710., 1728.,
      1746., 1764., 1782., 1800., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    155.,    161.,    167.,    464.,    484.,    504.,    524.,
      544.,    564.,    584.,    604.,    1081.,   1123.,   1165.,   1207.,
      1004.,   1040.,   1076.,   1112.,   1771.,   1837.,   1903.,   1969.,
      1464.,   1516.,   1568.,   1620.,   1672.,   1724.,   1776.,   1828.,
      450.,    494.,    538.,    582.,    1232.,   1336.,   1440.,   1544.,
      1648.,   1752.,   1856.,   1960.,   3002.,   3182.,   3362.,   3542.,
      2568.,   2704.,   2840.,   2976.,   4382.,   4610.,   4838.,   5066.,
      3488.,   3656.,   3824.,   3992.,   4160.,   4328.,   4496.,   4664.,
      1330.,   1374.,   1418.,   1462.,   3312.,   3416.,   3520.,   3624.,
      3728.,   3832.,   3936.,   4040.,   6602.,   6782.,   6962.,   7142.,
      5288.,   5424.,   5560.,   5696.,   8942.,   9170.,   9398.,   9626.,
      6848.,   7016.,   7184.,   7352.,   7520.,   7688.,   7856.,   8024.,
      2543.,   2657.,   2771.,   2885.,   6064.,   6316.,   6568.,   6820.,
      7072.,   7324.,   7576.,   7828.,   12123.,  12537.,  12951.,  13365.,
      9412.,   9712.,   10012.,  10312.,  15633.,  16119.,  16605.,  17091.,
      11752.,  12100.,  12448.,  12796.,  13144.,  13492.,  13840.,  14188.,
      4194.,   4302.,   4410.,   4518.,   9040.,   9272.,   9504.,   9736.,
      9968.,   10200.,  10432.,  10664.,  15962.,  16334.,  16706.,  17078.,
      11528.,  11792.,  12056.,  12320.,  18302.,  18722.,  19142.,  19562.,
      13088.,  13384.,  13680.,  13976.,  14272.,  14568.,  14864.,  15160.,
      6839.,   7049.,   7259.,   7469.,   14656.,  15100.,  15544.,  15988.,
      16432.,  16876.,  17320.,  17764.,  26163.,  26865.,  27567.,  28269.,
      18772.,  19264.,  19756.,  20248.,  29673.,  30447.,  31221.,  31995.,
      21112.,  21652.,  22192.,  22732.,  23272.,  23812.,  24352.,  24892.,
      7058.,   7230.,   7402.,   7574.,   14768.,  15128.,  15488.,  15848.,
      16208.,  16568.,  16928.,  17288.,  25322.,  25886.,  26450.,  27014.,
      17768.,  18160.,  18552.,  18944.,  27662.,  28274.,  28886.,  29498.,
      19328.,  19752.,  20176.,  20600.,  21024.,  21448.,  21872.,  22296.,
      11135.,  11441.,  11747.,  12053.,  23248.,  23884.,  24520.,  25156.,
      25792.,  26428.,  27064.,  27700.,  40203.,  41193.,  42183.,  43173.,
      28132.,  28816.,  29500.,  30184.,  43713.,  44775.,  45837.,  46899.,
      30472.,  31204.,  31936.,  32668.,  33400.,  34132.,  34864.,  35596.,
      9922.,   10158.,  10394.,  10630.,  20496.,  20984.,  21472.,  21960.,
      22448.,  22936.,  23424.,  23912.,  34682.,  35438.,  36194.,  36950.,
      24008.,  24528.,  25048.,  25568.,  37022.,  37826.,  38630.,  39434.,
      25568.,  26120.,  26672.,  27224.,  27776.,  28328.,  28880.,  29432.,
      14642.,  14878.,  15114.,  15350.,  30256.,  30744.,  31232.,  31720.,
      32208.,  32696.,  33184.,  33672.,  49802.,  50558.,  51314.,  52070.,
      34408.,  34928.,  35448.,  35968.,  53102.,  53906.,  54710.,  55514.,
      36608.,  37160.,  37712.,  38264.,  38816.,  39368.,  39920.,  40472.,
      4109.,   4275.,   4441.,   4607.,   8384.,   8724.,   9064.,   9404.,
      9744.,   10084.,  10424.,  10764.,  14881.,  15403.,  15925.,  16447.,
      10204.,  10560.,  10916.,  11272.,  15571.,  16117.,  16663.,  17209.,
      10664.,  11036.,  11408.,  11780.,  12152.,  12524.,  12896.,  13268.,
      8370.,   8734.,   9098.,   9462.,   17072.,  17816.,  18560.,  19304.,
      20048.,  20792.,  21536.,  22280.,  30602.,  31742.,  32882.,  34022.,
      20968.,  21744.,  22520.,  23296.,  31982.,  33170.,  34358.,  35546.,
      21888.,  22696.,  23504.,  24312.,  25120.,  25928.,  26736.,  27544.,
      15650.,  16014.,  16378.,  16742.,  31952.,  32696.,  33440.,  34184.,
      34928.,  35672.,  36416.,  37160.,  53402.,  54542.,  55682.,  56822.,
      36488.,  37264.,  38040.,  38816.,  55742.,  56930.,  58118.,  59306.,
      38048.,  38856.,  39664.,  40472.,  41280.,  42088.,  42896.,  43704.,
      24023.,  24617.,  25211.,  25805.,  49024.,  50236.,  51448.,  52660.,
      53872.,  55084.,  56296.,  57508.,  82323.,  84177.,  86031.,  87885.,
      56212.,  57472.,  58732.,  59992.,  85833.,  87759.,  89685.,  91611.,
      58552.,  59860.,  61168.,  62476.,  63784.,  65092.,  66400.,  67708.,
      18514.,  18942.,  19370.,  19798.,  37680.,  38552.,  39424.,  40296.,
      41168.,  42040.,  42912.,  43784.,  62762.,  64094.,  65426.,  66758.,
      42728.,  43632.,  44536.,  45440.,  65102.,  66482.,  67862.,  69242.,
      44288.,  45224.,  46160.,  47096.,  48032.,  48968.,  49904.,  50840.,
      28319.,  29009.,  29699.,  30389.,  57616.,  59020.,  60424.,  61828.,
      63232.,  64636.,  66040.,  67444.,  96363.,  98505.,  100647., 102789.,
      65572.,  67024.,  68476.,  69928.,  99873.,  102087., 104301., 106515.,
      67912.,  69412.,  70912.,  72412.,  73912.,  75412.,  76912.,  78412.,
      21378.,  21870.,  22362.,  22854.,  43408.,  44408.,  45408.,  46408.,
      47408.,  48408.,  49408.,  50408.,  72122.,  73646.,  75170.,  76694.,
      48968.,  50000.,  51032.,  52064.,  74462.,  76034.,  77606.,  79178.,
      50528.,  51592.,  52656.,  53720.,  54784.,  55848.,  56912.,  57976.,
      32615.,  33401.,  34187.,  34973.,  66208.,  67804.,  69400.,  70996.,
      72592.,  74188.,  75784.,  77380.,  110403., 112833., 115263., 117693.,
      74932.,  76576.,  78220.,  79864.,  113913., 116415., 118917., 121419.,
      77272.,  78964.,  80656.,  82348.,  84040.,  85732.,  87424.,  89116.,
      24242.,  24798.,  25354.,  25910.,  49136.,  50264.,  51392.,  52520.,
      53648.,  54776.,  55904.,  57032.,  81482.,  83198.,  84914.,  86630.,
      55208.,  56368.,  57528.,  58688.,  83822.,  85586.,  87350.,  89114.,
      56768.,  57960.,  59152.,  60344.,  61536.,  62728.,  63920.,  65112.,
      35362.,  35918.,  36474.,  37030.,  71696.,  72824.,  73952.,  75080.,
      76208.,  77336.,  78464.,  79592.,  115802., 117518., 119234., 120950.,
      78408.,  79568.,  80728.,  81888.,  119102., 120866., 122630., 124394.,
      80608.,  81800.,  82992.,  84184.,  85376.,  86568.,  87760.,  88952.,
      8069.,   8395.,   8721.,   9047.,   16304.,  16964.,  17624.,  18284.,
      18944.,  19604.,  20264.,  20924.,  28681.,  29683.,  30685.,  31687.,
      19404.,  20080.,  20756.,  21432.,  29371.,  30397.,  31423.,  32449.,
      19864.,  20556.,  21248.,  21940.,  22632.,  23324.,  24016.,  24708.,
      16290.,  16974.,  17658.,  18342.,  32912.,  34296.,  35680.,  37064.,
      38448.,  39832.,  41216.,  42600.,  58202.,  60302.,  62402.,  64502.,
      39368.,  40784.,  42200.,  43616.,  59582.,  61730.,  63878.,  66026.,
      40288.,  41736.,  43184.,  44632.,  46080.,  47528.,  48976.,  50424.,
      29970.,  30654.,  31338.,  32022.,  60592.,  61976.,  63360.,  64744.,
      66128.,  67512.,  68896.,  70280.,  100202., 102302., 104402., 106502.,
      67688.,  69104.,  70520.,  71936.,  102542., 104690., 106838., 108986.,
      69248.,  70696.,  72144.,  73592.,  75040.,  76488.,  77936.,  79384.,
      45503.,  46577.,  47651.,  48725.,  91984.,  94156.,  96328.,  98500.,
      100672., 102844., 105016., 107188., 152523., 155817., 159111., 162405.,
      103012., 105232., 107452., 109672., 156033., 159399., 162765., 166131.,
      105352., 107620., 109888., 112156., 114424., 116692., 118960., 121228.,
      32834.,  33582.,  34330.,  35078.,  66320.,  67832.,  69344.,  70856.,
      72368.,  73880.,  75392.,  76904.,  109562., 111854., 114146., 116438.,
      73928.,  75472.,  77016.,  78560.,  111902., 114242., 116582., 118922.,
      75488.,  77064.,  78640.,  80216.,  81792.,  83368.,  84944.,  86520.,
      49799.,  50969.,  52139.,  53309.,  100576., 102940., 105304., 107668.,
      110032., 112396., 114760., 117124., 166563., 170145., 173727., 177309.,
      112372., 114784., 117196., 119608., 170073., 173727., 177381., 181035.,
      114712., 117172., 119632., 122092., 124552., 127012., 129472., 131932.,
      35698.,  36510.,  37322.,  38134.,  72048.,  73688.,  75328.,  76968.,
      78608.,  80248.,  81888.,  83528.,  118922., 121406., 123890., 126374.,
      80168.,  81840.,  83512.,  85184.,  121262., 123794., 126326., 128858.,
      81728.,  83432.,  85136.,  86840.,  88544.,  90248.,  91952.,  93656.,
      54095.,  55361.,  56627.,  57893.,  109168., 111724., 114280., 116836.,
      119392., 121948., 124504., 127060., 180603., 184473., 188343., 192213.,
      121732., 124336., 126940., 129544., 184113., 188055., 191997., 195939.,
      124072., 126724., 129376., 132028., 134680., 137332., 139984., 142636.,
      38562.,  39438.,  40314.,  41190.,  77776.,  79544.,  81312.,  83080.,
      84848.,  86616.,  88384.,  90152.,  128282., 130958., 133634., 136310.,
      86408.,  88208.,  90008.,  91808.,  130622., 133346., 136070., 138794.,
      87968.,  89800.,  91632.,  93464.,  95296.,  97128.,  98960.,  100792.,
      56082.,  56958.,  57834.,  58710.,  113136., 114904., 116672., 118440.,
      120208., 121976., 123744., 125512., 181802., 184478., 187154., 189830.,
      122408., 124208., 126008., 127808., 185102., 187826., 190550., 193274.,
      124608., 126440., 128272., 130104., 131936., 133768., 135600., 137432.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   224.,   244.,
      264.,   284.,   179.,   193.,   207.,   221.,   235.,   249.,   263.,
      277.,   0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,
      149.,   155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,
      564.,   584.,   604.,   624.,   644.,   664.,   684.,   459.,   473.,
      487.,   501.,   515.,   529.,   543.,   557.,   0.,     0.,     0.,
      0.,     262.,   290.,   318.,   346.,   374.,   402.,   430.,   458.,
      1080.,  1152.,  1224.,  1296.,  1368.,  1440.,  1512.,  1584.,  1656.,
      1728.,  1800.,  1872.,  1122.,  1166.,  1210.,  1254.,  1298.,  1342.,
      1386.,  1430.,  0.,     0.,     0.,     0.,     822.,   850.,   878.,
      906.,   934.,   962.,   990.,   1018.,  2520.,  2592.,  2664.,  2736.,
      2808.,  2880.,  2952.,  3024.,  3096.,  3168.,  3240.,  3312.,  2002.,
      2046.,  2090.,  2134.,  2178.,  2222.,  2266.,  2310.,  0.,     0.,
      0.,     0.,     1411.,  1477.,  1543.,  1609.,  1675.,  1741.,  1807.,
      1873.,  4328.,  4484.,  4640.,  4796.,  4952.,  5108.,  5264.,  5420.,
      5576.,  5732.,  5888.,  6044.,  3469.,  3559.,  3649.,  3739.,  3829.,
      3919.,  4009.,  4099.,  0.,     0.,     0.,     0.,     2126.,  2186.,
      2246.,  2306.,  2366.,  2426.,  2486.,  2546.,  5384.,  5520.,  5656.,
      5792.,  5928.,  6064.,  6200.,  6336.,  6472.,  6608.,  6744.,  6880.,
      3690.,  3766.,  3842.,  3918.,  3994.,  4070.,  4146.,  4222.,  0.,
      0.,     0.,     0.,     3326.,  3386.,  3446.,  3506.,  3566.,  3626.,
      3686.,  3746.,  8104.,  8240.,  8376.,  8512.,  8648.,  8784.,  8920.,
      9056.,  9192.,  9328.,  9464.,  9600.,  5210.,  5286.,  5362.,  5438.,
      5514.,  5590.,  5666.,  5742.,  0.,     0.,     0.,     0.,     2309.,
      2347.,  2385.,  2423.,  2461.,  2499.,  2537.,  2575.,  5408.,  5492.,
      5576.,  5660.,  5744.,  5828.,  5912.,  5996.,  6080.,  6164.,  6248.,
      6332.,  3347.,  3393.,  3439.,  3485.,  3531.,  3577.,  3623.,  3669.,
      0.,     0.,     0.,     0.,     3069.,  3107.,  3145.,  3183.,  3221.,
      3259.,  3297.,  3335.,  7088.,  7172.,  7256.,  7340.,  7424.,  7508.,
      7592.,  7676.,  7760.,  7844.,  7928.,  8012.,  4267.,  4313.,  4359.,
      4405.,  4451.,  4497.,  4543.,  4589.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     41.,    95.,    149.,   203.,
      257.,   311.,   365.,   419.,   520.,   636.,   752.,   868.,   984.,
      1100.,  1216.,  1332.,  1448.,  1564.,  1680.,  1796.,  791.,   853.,
      915.,   977.,   1039.,  1101.,  1163.,  1225.,  0.,     0.,     0.,
      0.,     1121.,  1175.,  1229.,  1283.,  1337.,  1391.,  1445.,  1499.,
      2840.,  2956.,  3072.,  3188.,  3304.,  3420.,  3536.,  3652.,  3768.,
      3884.,  4000.,  4116.,  2031.,  2093.,  2155.,  2217.,  2279.,  2341.,
      2403.,  2465.,  0.,     0.,     0.,     0.,     2254.,  2378.,  2502.,
      2626.,  2750.,  2874.,  2998.,  3122.,  5832.,  6096.,  6360.,  6624.,
      6888.,  7152.,  7416.,  7680.,  7944.,  8208.,  8472.,  8736.,  4266.,
      4406.,  4546.,  4686.,  4826.,  4966.,  5106.,  5246.,  0.,     0.,
      0.,     0.,     4734.,  4858.,  4982.,  5106.,  5230.,  5354.,  5478.,
      5602.,  11112., 11376., 11640., 11904., 12168., 12432., 12696., 12960.,
      13224., 13488., 13752., 14016., 7066.,  7206.,  7346.,  7486.,  7626.,
      7766.,  7906.,  8046.,  0.,     0.,     0.,     0.,     7279.,  7489.,
      7699.,  7909.,  8119.,  8329.,  8539.,  8749.,  17216., 17660., 18104.,
      18548., 18992., 19436., 19880., 20324., 20768., 21212., 21656., 22100.,
      11065., 11299., 11533., 11767., 12001., 12235., 12469., 12703., 0.,
      0.,     0.,     0.,     6038.,  6194.,  6350.,  6506.,  6662.,  6818.,
      6974.,  7130.,  13976., 14304., 14632., 14960., 15288., 15616., 15944.,
      16272., 16600., 16928., 17256., 17584., 8754.,  8926.,  9098.,  9270.,
      9442.,  9614.,  9786.,  9958.,  0.,     0.,     0.,     0.,     9158.,
      9314.,  9470.,  9626.,  9782.,  9938.,  10094., 10250., 20536., 20864.,
      21192., 21520., 21848., 22176., 22504., 22832., 23160., 23488., 23816.,
      24144., 12194., 12366., 12538., 12710., 12882., 13054., 13226., 13398.,
      0.,     0.,     0.,     0.,     5225.,  5311.,  5397.,  5483.,  5569.,
      5655.,  5741.,  5827.,  11624., 11804., 11984., 12164., 12344., 12524.,
      12704., 12884., 13064., 13244., 13424., 13604., 6839.,  6933.,  7027.,
      7121.,  7215.,  7309.,  7403.,  7497.,  0.,     0.,     0.,     0.,
      6945.,  7031.,  7117.,  7203.,  7289.,  7375.,  7461.,  7547.,  15224.,
      15404., 15584., 15764., 15944., 16124., 16304., 16484., 16664., 16844.,
      17024., 17204., 8719.,  8813.,  8907.,  9001.,  9095.,  9189.,  9283.,
      9377.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     77.,    179.,   281.,   383.,   485.,   587.,   689.,   791.,
      976.,   1188.,  1400.,  1612.,  1824.,  2036.,  2248.,  2460.,  2672.,
      2884.,  3096.,  3308.,  1403.,  1513.,  1623.,  1733.,  1843.,  1953.,
      2063.,  2173.,  0.,     0.,     0.,     0.,     2117.,  2219.,  2321.,
      2423.,  2525.,  2627.,  2729.,  2831.,  5216.,  5428.,  5640.,  5852.,
      6064.,  6276.,  6488.,  6700.,  6912.,  7124.,  7336.,  7548.,  3603.,
      3713.,  3823.,  3933.,  4043.,  4153.,  4263.,  4373.,  0.,     0.,
      0.,     0.,     4246.,  4466.,  4686.,  4906.,  5126.,  5346.,  5566.,
      5786.,  10584., 11040., 11496., 11952., 12408., 12864., 13320., 13776.,
      14232., 14688., 15144., 15600., 7410.,  7646.,  7882.,  8118.,  8354.,
      8590.,  8826.,  9062.,  0.,     0.,     0.,     0.,     8646.,  8866.,
      9086.,  9306.,  9526.,  9746.,  9966.,  10186., 19704., 20160., 20616.,
      21072., 21528., 21984., 22440., 22896., 23352., 23808., 24264., 24720.,
      12130., 12366., 12602., 12838., 13074., 13310., 13546., 13782., 0.,
      0.,     0.,     0.,     13147., 13501., 13855., 14209., 14563., 14917.,
      15271., 15625., 30104., 30836., 31568., 32300., 33032., 33764., 34496.,
      35228., 35960., 36692., 37424., 38156., 18661., 19039., 19417., 19795.,
      20173., 20551., 20929., 21307., 0.,     0.,     0.,     0.,     9950.,
      10202., 10454., 10706., 10958., 11210., 11462., 11714., 22568., 23088.,
      23608., 24128., 24648., 25168., 25688., 26208., 26728., 27248., 27768.,
      28288., 13818., 14086., 14354., 14622., 14890., 15158., 15426., 15694.,
      0.,     0.,     0.,     0.,     14990., 15242., 15494., 15746., 15998.,
      16250., 16502., 16754., 32968., 33488., 34008., 34528., 35048., 35568.,
      36088., 36608., 37128., 37648., 38168., 38688., 19178., 19446., 19714.,
      19982., 20250., 20518., 20786., 21054., 0.,     0.,     0.,     0.,
      8141.,  8275.,  8409.,  8543.,  8677.,  8811.,  8945.,  9079.,  17840.,
      18116., 18392., 18668., 18944., 19220., 19496., 19772., 20048., 20324.,
      20600., 20876., 10331., 10473., 10615., 10757., 10899., 11041., 11183.,
      11325., 0.,     0.,     0.,     0.,     10821., 10955., 11089., 11223.,
      11357., 11491., 11625., 11759., 23360., 23636., 23912., 24188., 24464.,
      24740., 25016., 25292., 25568., 25844., 26120., 26396., 13171., 13313.,
      13455., 13597., 13739., 13881., 14023., 14165., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     1030.,    1070.,    1110.,    3300.,    3444.,    3588.,
      3732.,    3876.,    4020.,    4164.,    4308.,    7922.,    8234.,
      8546.,    8858.,    7540.,    7812.,    8084.,    8356.,    13418.,
      13922.,   14426.,   14930.,   11204.,   11604.,   12004.,   12404.,
      12804.,   13204.,   13604.,   14004.,   3164.,    3500.,    3836.,
      4172.,    8968.,    9768.,    10568.,   11368.,   12168.,   12968.,
      13768.,   14568.,   22468.,   23860.,   25252.,   26644.,   19496.,
      20552.,   21608.,   22664.,   33460.,   35236.,   37012.,   38788.,
      26824.,   28136.,   29448.,   30760.,   32072.,   33384.,   34696.,
      36008.,   9884.,    10220.,   10556.,   10892.,   24968.,   25768.,
      26568.,   27368.,   28168.,   28968.,   29768.,   30568.,   50308.,
      51700.,   53092.,   54484.,   40616.,   41672.,   42728.,   43784.,
      68980.,   70756.,   72532.,   74308.,   53064.,   54376.,   55688.,
      57000.,   58312.,   59624.,   60936.,   62248.,   19162.,   20050.,
      20938.,   21826.,   46124.,   48092.,   50060.,   52028.,   53996.,
      55964.,   57932.,   59900.,   93078.,   96318.,   99558.,   102798.,
      72668.,   75020.,   77372.,   79724.,   121086.,  124902.,  128718.,
      132534.,  91340.,   94076.,   96812.,   99548.,   102284.,  105020.,
      107756.,  110492.,  32732.,   33580.,   34428.,   35276.,   70664.,
      72488.,   74312.,   76136.,   77960.,   79784.,   81608.,   83432.,
      124996.,  127924.,  130852.,  133780.,  90408.,   92488.,   94568.,
      96648.,   143668.,  146980.,  150292.,  153604.,  102856.,  105192.,
      107528.,  109864.,  112200.,  114536.,  116872.,  119208.,  53434.,
      55090.,   56746.,   58402.,   114668.,  118172.,  121676.,  125180.,
      128684.,  132188.,  135692.,  139196.,  205110.,  210654.,  216198.,
      221742.,  147356.,  151244.,  155132.,  159020.,  233118.,  239238.,
      245358.,  251478.,  166028.,  170300.,  174572.,  178844.,  183116.,
      187388.,  191660.,  195932.,  55580.,   56940.,   58300.,   59660.,
      116360.,  119208.,  122056.,  124904.,  127752.,  130600.,  133448.,
      136296.,  199684.,  204148.,  208612.,  213076.,  140200.,  143304.,
      146408.,  149512.,  218356.,  223204.,  228052.,  232900.,  152648.,
      156008.,  159368.,  162728.,  166088.,  169448.,  172808.,  176168.,
      87706.,   90130.,   92554.,   94978.,   183212.,  188252.,  193292.,
      198332.,  203372.,  208412.,  213452.,  218492.,  317142.,  324990.,
      332838.,  340686.,  222044.,  227468.,  232892.,  238316.,  345150.,
      353574.,  361998.,  370422.,  240716.,  246524.,  252332.,  258140.,
      263948.,  269756.,  275564.,  281372.,  78428.,   80300.,   82172.,
      84044.,   162056.,  165928.,  169800.,  173672.,  177544.,  181416.,
      185288.,  189160.,  274372.,  280372.,  286372.,  292372.,  189992.,
      194120.,  198248.,  202376.,  293044.,  299428.,  305812.,  312196.,
      202440.,  206824.,  211208.,  215592.,  219976.,  224360.,  228744.,
      233128.,  115868.,  117740.,  119612.,  121484.,  239496.,  243368.,
      247240.,  251112.,  254984.,  258856.,  262728.,  266600.,  394372.,
      400372.,  406372.,  412372.,  272552.,  276680.,  280808.,  284936.,
      420724.,  427108.,  433492.,  439876.,  290120.,  294504.,  298888.,
      303272.,  307656.,  312040.,  316424.,  320808.,  32510.,   33830.,
      35150.,   36470.,   66340.,   69044.,   71748.,   74452.,   77156.,
      79860.,   82564.,   85268.,   117842.,  121994.,  126146.,  130298.,
      80820.,   83652.,   86484.,   89316.,   123338.,  127682.,  132026.,
      136370.,  84484.,   87444.,   90404.,   93364.,   96324.,   99284.,
      102244.,  105204.,  66204.,   69100.,   71996.,   74892.,   135048.,
      140968.,  146888.,  152808.,  158728.,  164648.,  170568.,  176488.,
      242308.,  251380.,  260452.,  269524.,  166056.,  172232.,  178408.,
      184584.,  253300.,  262756.,  272212.,  281668.,  173384.,  179816.,
      186248.,  192680.,  199112.,  205544.,  211976.,  218408.,  124124.,
      127020.,  129916.,  132812.,  253448.,  259368.,  265288.,  271208.,
      277128.,  283048.,  288968.,  294888.,  423748.,  432820.,  441892.,
      450964.,  289576.,  295752.,  301928.,  308104.,  442420.,  451876.,
      461332.,  470788.,  302024.,  308456.,  314888.,  321320.,  327752.,
      334184.,  340616.,  347048.,  190522.,  195250.,  199978.,  204706.,
      388844.,  398492.,  408140.,  417788.,  427436.,  437084.,  446732.,
      456380.,  653238.,  667998.,  682758.,  697518.,  446108.,  456140.,
      466172.,  476204.,  681246.,  696582.,  711918.,  727254.,  464780.,
      475196.,  485612.,  496028.,  506444.,  516860.,  527276.,  537692.,
      146972.,  150380.,  153788.,  157196.,  299144.,  306088.,  313032.,
      319976.,  326920.,  333864.,  340808.,  347752.,  498436.,  509044.,
      519652.,  530260.,  339368.,  346568.,  353768.,  360968.,  517108.,
      528100.,  539092.,  550084.,  351816.,  359272.,  366728.,  374184.,
      381640.,  389096.,  396552.,  404008.,  224794.,  230290.,  235786.,
      241282.,  457388.,  468572.,  479756.,  490940.,  502124.,  513308.,
      524492.,  535676.,  765270.,  782334.,  799398.,  816462.,  520796.,
      532364.,  543932.,  555500.,  793278.,  810918.,  828558.,  846198.,
      539468.,  551420.,  563372.,  575324.,  587276.,  599228.,  611180.,
      623132.,  169820.,  173740.,  177660.,  181580.,  344840.,  352808.,
      360776.,  368744.,  376712.,  384680.,  392648.,  400616.,  573124.,
      585268.,  597412.,  609556.,  389160.,  397384.,  405608.,  413832.,
      591796.,  604324.,  616852.,  629380.,  401608.,  410088.,  418568.,
      427048.,  435528.,  444008.,  452488.,  460968.,  259066.,  265330.,
      271594.,  277858.,  525932.,  538652.,  551372.,  564092.,  576812.,
      589532.,  602252.,  614972.,  877302.,  896670.,  916038.,  935406.,
      595484.,  608588.,  621692.,  634796.,  905310.,  925254.,  945198.,
      965142.,  614156.,  627644.,  641132.,  654620.,  668108.,  681596.,
      695084.,  708572.,  192668.,  197100.,  201532.,  205964.,  390536.,
      399528.,  408520.,  417512.,  426504.,  435496.,  444488.,  453480.,
      647812.,  661492.,  675172.,  688852.,  438952.,  448200.,  457448.,
      466696.,  666484.,  680548.,  694612.,  708676.,  451400.,  460904.,
      470408.,  479912.,  489416.,  498920.,  508424.,  517928.,  281308.,
      285740.,  290172.,  294604.,  570376.,  579368.,  588360.,  597352.,
      606344.,  615336.,  624328.,  633320.,  921412.,  935092.,  948772.,
      962452.,  623912.,  633160.,  642408.,  651656.,  947764.,  961828.,
      975892.,  989956.,  641480.,  650984.,  660488.,  669992.,  679496.,
      689000.,  698504.,  708008.,  64030.,   66630.,   69230.,   71830.,
      129380.,  134644.,  139908.,  145172.,  150436.,  155700.,  160964.,
      166228.,  227762.,  235754.,  243746.,  251738.,  154100.,  159492.,
      164884.,  170276.,  233258.,  241442.,  249626.,  257810.,  157764.,
      163284.,  168804.,  174324.,  179844.,  185364.,  190884.,  196404.,
      129244.,  134700.,  140156.,  145612.,  261128.,  272168.,  283208.,
      294248.,  305288.,  316328.,  327368.,  338408.,  462148.,  478900.,
      495652.,  512404.,  312616.,  323912.,  335208.,  346504.,  473140.,
      490276.,  507412.,  524548.,  319944.,  331496.,  343048.,  354600.,
      366152.,  377704.,  389256.,  400808.,  238364.,  243820.,  249276.,
      254732.,  481928.,  492968.,  504008.,  515048.,  526088.,  537128.,
      548168.,  559208.,  797188.,  813940.,  830692.,  847444.,  538536.,
      549832.,  561128.,  572424.,  815860.,  832996.,  850132.,  867268.,
      550984.,  562536.,  574088.,  585640.,  597192.,  608744.,  620296.,
      631848.,  361882.,  370450.,  379018.,  387586.,  731564.,  748892.,
      766220.,  783548.,  800876.,  818204.,  835532.,  852860.,  1213398.,
      1239678., 1265958., 1292238., 819548.,  837260.,  854972.,  872684.,
      1241406., 1268262., 1295118., 1321974., 838220.,  856316.,  874412.,
      892508.,  910604.,  928700.,  946796.,  964892.,  261212.,  267180.,
      273148.,  279116.,  527624.,  539688.,  551752.,  563816.,  575880.,
      587944.,  600008.,  612072.,  871876.,  890164.,  908452.,  926740.,
      588328.,  600648.,  612968.,  625288.,  890548.,  909220.,  927892.,
      946564.,  600776.,  613352.,  625928.,  638504.,  651080.,  663656.,
      676232.,  688808.,  396154.,  405490.,  414826.,  424162.,  800108.,
      818972.,  837836.,  856700.,  875564.,  894428.,  913292.,  932156.,
      1325430., 1354014., 1382598., 1411182., 894236.,  913484.,  932732.,
      951980.,  1353438., 1382598., 1411758., 1440918., 912908.,  932540.,
      952172.,  971804.,  991436.,  1011068., 1030700., 1050332., 284060.,
      290540.,  297020.,  303500.,  573320.,  586408.,  599496.,  612584.,
      625672.,  638760.,  651848.,  664936.,  946564.,  966388.,  986212.,
      1006036., 638120.,  651464.,  664808.,  678152.,  965236.,  985444.,
      1005652., 1025860., 650568.,  664168.,  677768.,  691368.,  704968.,
      718568.,  732168.,  745768.,  430426.,  440530.,  450634.,  460738.,
      868652.,  889052.,  909452.,  929852.,  950252.,  970652.,  991052.,
      1011452., 1437462., 1468350., 1499238., 1530126., 968924.,  989708.,
      1010492., 1031276., 1465470., 1496934., 1528398., 1559862., 987596.,
      1008764., 1029932., 1051100., 1072268., 1093436., 1114604., 1135772.,
      306908.,  313900.,  320892.,  327884.,  619016.,  633128.,  647240.,
      661352.,  675464.,  689576.,  703688.,  717800.,  1021252., 1042612.,
      1063972., 1085332., 687912.,  702280.,  716648.,  731016.,  1039924.,
      1061668., 1083412., 1105156., 700360.,  714984.,  729608.,  744232.,
      758856.,  773480.,  788104.,  802728.,  446748.,  453740.,  460732.,
      467724.,  901256.,  915368.,  929480.,  943592.,  957704.,  971816.,
      985928.,  1000040., 1448452., 1469812., 1491172., 1512532., 975272.,
      989640.,  1004008., 1018376., 1474804., 1496548., 1518292., 1540036.,
      992840.,  1007464., 1022088., 1036712., 1051336., 1065960., 1080584.,
      1095208.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1572.,   1716.,   1860.,   2004.,   1318.,   1422.,   1526.,   1630.,
      1734.,   1838.,   1942.,   2046.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      4452.,   4596.,   4740.,   4884.,   3398.,   3502.,   3606.,   3710.,
      3814.,   3918.,   4022.,   4126.,   0.,      0.,      0.,      0.,
      1740.,   1948.,   2156.,   2364.,   2572.,   2780.,   2988.,   3196.,
      7784.,   8328.,   8872.,   9416.,   9960.,   10504.,  11048.,  11592.,
      12136.,  12680.,  13224.,  13768.,  8412.,   8748.,   9084.,   9420.,
      9756.,   10092.,  10428.,  10764.,  0.,      0.,      0.,      0.,
      5900.,   6108.,   6316.,   6524.,   6732.,   6940.,   7148.,   7356.,
      18664.,  19208.,  19752.,  20296.,  20840.,  21384.,  21928.,  22472.,
      23016.,  23560.,  24104.,  24648.,  15132.,  15468.,  15804.,  16140.,
      16476.,  16812.,  17148.,  17484.,  0.,      0.,      0.,      0.,
      10250.,  10754.,  11258.,  11762.,  12266.,  12770.,  13274.,  13778.,
      32332.,  33532.,  34732.,  35932.,  37132.,  38332.,  39532.,  40732.,
      41932.,  43132.,  44332.,  45532.,  26402.,  27098.,  27794.,  28490.,
      29186.,  29882.,  30578.,  31274.,  0.,      0.,      0.,      0.,
      16300.,  16764.,  17228.,  17692.,  18156.,  18620.,  19084.,  19548.,
      41512.,  42568.,  43624.,  44680.,  45736.,  46792.,  47848.,  48904.,
      49960.,  51016.,  52072.,  53128.,  28604.,  29196.,  29788.,  30380.,
      30972.,  31564.,  32156.,  32748.,  0.,      0.,      0.,      0.,
      25580.,  26044.,  26508.,  26972.,  27436.,  27900.,  28364.,  28828.,
      62632.,  63688.,  64744.,  65800.,  66856.,  67912.,  68968.,  70024.,
      71080.,  72136.,  73192.,  74248.,  40444.,  41036.,  41628.,  42220.,
      42812.,  43404.,  43996.,  44588.,  0.,      0.,      0.,      0.,
      17950.,  18246.,  18542.,  18838.,  19134.,  19430.,  19726.,  20022.,
      42148.,  42804.,  43460.,  44116.,  44772.,  45428.,  46084.,  46740.,
      47396.,  48052.,  48708.,  49364.,  26150.,  26510.,  26870.,  27230.,
      27590.,  27950.,  28310.,  28670.,  0.,      0.,      0.,      0.,
      23870.,  24166.,  24462.,  24758.,  25054.,  25350.,  25646.,  25942.,
      55268.,  55924.,  56580.,  57236.,  57892.,  58548.,  59204.,  59860.,
      60516.,  61172.,  61828.,  62484.,  33350.,  33710.,  34070.,  34430.,
      34790.,  35150.,  35510.,  35870.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      270.,    694.,    1118.,   1542.,   1966.,   2390.,   2814.,   3238.,
      3972.,   4884.,   5796.,   6708.,   7620.,   8532.,   9444.,   10356.,
      11268.,  12180.,  13092.,  14004.,  6166.,   6654.,   7142.,   7630.,
      8118.,   8606.,   9094.,   9582.,   0.,      0.,      0.,      0.,
      8750.,   9174.,   9598.,   10022.,  10446.,  10870.,  11294.,  11718.,
      22212.,  23124.,  24036.,  24948.,  25860.,  26772.,  27684.,  28596.,
      29508.,  30420.,  31332.,  32244.,  15926.,  16414.,  16902.,  17390.,
      17878.,  18366.,  18854.,  19342.,  0.,      0.,      0.,      0.,
      17580.,  18556.,  19532.,  20508.,  21484.,  22460.,  23436.,  24412.,
      45608.,  47688.,  49768.,  51848.,  53928.,  56008.,  58088.,  60168.,
      62248.,  64328.,  66408.,  68488.,  33468.,  34572.,  35676.,  36780.,
      37884.,  38988.,  40092.,  41196.,  0.,      0.,      0.,      0.,
      37100.,  38076.,  39052.,  40028.,  41004.,  41980.,  42956.,  43932.,
      87208.,  89288.,  91368.,  93448.,  95528.,  97608.,  99688.,  101768.,
      103848., 105928., 108008., 110088., 55548.,  56652.,  57756.,  58860.,
      59964.,  61068.,  62172.,  63276.,  0.,      0.,      0.,      0.,
      57050.,  58706.,  60362.,  62018.,  63674.,  65330.,  66986.,  68642.,
      135148., 138652., 142156., 145660., 149164., 152668., 156172., 159676.,
      163180., 166684., 170188., 173692., 87026.,  88874.,  90722.,  92570.,
      94418.,  96266.,  98114.,  99962.,  0.,      0.,      0.,      0.,
      47500.,  48732.,  49964.,  51196.,  52428.,  53660.,  54892.,  56124.,
      110056., 112648., 115240., 117832., 120424., 123016., 125608., 128200.,
      130792., 133384., 135976., 138568., 69020.,  70380.,  71740.,  73100.,
      74460.,  75820.,  77180.,  78540.,  0.,      0.,      0.,      0.,
      72140.,  73372.,  74604.,  75836.,  77068.,  78300.,  79532.,  80764.,
      161896., 164488., 167080., 169672., 172264., 174856., 177448., 180040.,
      182632., 185224., 187816., 190408., 96220.,  97580.,  98940.,  100300.,
      101660., 103020., 104380., 105740., 0.,      0.,      0.,      0.,
      41230.,  41910.,  42590.,  43270.,  43950.,  44630.,  45310.,  45990.,
      91780.,  93204.,  94628.,  96052.,  97476.,  98900.,  100324., 101748.,
      103172., 104596., 106020., 107444., 54038.,  54782.,  55526.,  56270.,
      57014.,  57758.,  58502.,  59246.,  0.,      0.,      0.,      0.,
      54830.,  55510.,  56190.,  56870.,  57550.,  58230.,  58910.,  59590.,
      120260., 121684., 123108., 124532., 125956., 127380., 128804., 130228.,
      131652., 133076., 134500., 135924., 68918.,  69662.,  70406.,  71150.,
      71894.,  72638.,  73382.,  74126.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1318.,   2126.,   2934.,   3742.,   4550.,   5358.,   6166.,
      7524.,   9204.,   10884.,  12564.,  14244.,  15924.,  17604.,  19284.,
      20964.,  22644.,  24324.,  26004.,  11014.,  11886.,  12758.,  13630.,
      14502.,  15374.,  16246.,  17118.,  0.,      0.,      0.,      0.,
      16670.,  17478.,  18286.,  19094.,  19902.,  20710.,  21518.,  22326.,
      41124.,  42804.,  44484.,  46164.,  47844.,  49524.,  51204.,  52884.,
      54564.,  56244.,  57924.,  59604.,  28454.,  29326.,  30198.,  31070.,
      31942.,  32814.,  33686.,  34558.,  0.,      0.,      0.,      0.,
      33420.,  35164.,  36908.,  38652.,  40396.,  42140.,  43884.,  45628.,
      83432.,  87048.,  90664.,  94280.,  97896.,  101512., 105128., 108744.,
      112360., 115976., 119592., 123208., 58524.,  60396.,  62268.,  64140.,
      66012.,  67884.,  69756.,  71628.,  0.,      0.,      0.,      0.,
      68300.,  70044.,  71788.,  73532.,  75276.,  77020.,  78764.,  80508.,
      155752., 159368., 162984., 166600., 170216., 173832., 177448., 181064.,
      184680., 188296., 191912., 195528., 95964.,  97836.,  99708.,  101580.,
      103452., 105324., 107196., 109068., 0.,      0.,      0.,      0.,
      103850., 106658., 109466., 112274., 115082., 117890., 120698., 123506.,
      237964., 243772., 249580., 255388., 261196., 267004., 272812., 278620.,
      284428., 290236., 296044., 301852., 147650., 150650., 153650., 156650.,
      159650., 162650., 165650., 168650., 0.,      0.,      0.,      0.,
      78700.,  80700.,  82700.,  84700.,  86700.,  88700.,  90700.,  92700.,
      178600., 182728., 186856., 190984., 195112., 199240., 203368., 207496.,
      211624., 215752., 219880., 224008., 109436., 111564., 113692., 115820.,
      117948., 120076., 122204., 124332., 0.,      0.,      0.,      0.,
      118700., 120700., 122700., 124700., 126700., 128700., 130700., 132700.,
      261160., 265288., 269416., 273544., 277672., 281800., 285928., 290056.,
      294184., 298312., 302440., 306568., 151996., 154124., 156252., 158380.,
      160508., 162636., 164764., 166892., 0.,      0.,      0.,      0.,
      64510.,  65574.,  66638.,  67702.,  68766.,  69830.,  70894.,  71958.,
      141412., 143604., 145796., 147988., 150180., 152372., 154564., 156756.,
      158948., 161140., 163332., 165524., 81926.,  83054.,  84182.,  85310.,
      86438.,  87566.,  88694.,  89822.,  0.,      0.,      0.,      0.,
      85790.,  86854.,  87918.,  88982.,  90046.,  91110.,  92174.,  93238.,
      185252., 187444., 189636., 191828., 194020., 196212., 198404., 200596.,
      202788., 204980., 207172., 209364., 104486., 105614., 106742., 107870.,
      108998., 110126., 111254., 112382., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476.,  985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419.,  860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604.,  1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.,
      182.,  370.,  423.,  644.,  439.,  668.,  455.,  692.,  471.,  530.,
      374.,  760.,  876.,  1333., 908.,  1381., 940.,  1429., 972.,  1100.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1196., 2425., 2644., 4017., 2722., 4134., 2800., 4251., 2878., 3115.,
      899.,  1820., 1976., 2998., 2028., 3076., 2080., 3154., 2132., 2300.,
      1376., 2785., 3034., 4602., 3112., 4719., 3190., 4836., 3268., 3535.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1454., 2940., 3116., 4723., 3188., 4831., 3260., 4939., 3332., 3520.,
      357.,  720.,  823.,  1244., 839.,  1268., 855.,  1292., 871.,  980.,
      724.,  1460., 1676., 2533., 1708., 2581., 1740., 2629., 1772., 2000.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1916., 3865., 4204., 6357., 4282., 6474., 4360., 6591., 4438., 4795.,
      1379., 2780., 3016., 4558., 3068., 4636., 3120., 4714., 3172., 3420.,
      2096., 4225., 4594., 6942., 4672., 7059., 4750., 7176., 4828., 5215.,
      1499., 3020., 3276., 4948., 3328., 5026., 3380., 5104., 3432., 3700.,
      2276., 4585., 4984., 7527., 5062., 7644., 5140., 7761., 5218., 5635.,
      1619., 3260., 3536., 5338., 3588., 5416., 3640., 5494., 3692., 3980.,
      2304., 4640., 4916., 7423., 4988., 7531., 5060., 7639., 5132., 5420.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,    8.,    14.,   14.,   19.,   12.,  15.,   0.,
      6.,   7.,   20.,   23.,   44.,   39.,   44.,   27.,  30.,   0.,
      15.,  20.,  52.,   64.,   115.,  96.,   112.,  66.,  75.,   0.,
      40.,  45.,  112.,  124.,  220.,  176.,  192.,  111., 120.,  0.,
      72.,  84.,  201.,  228.,  393.,  306.,  339.,  192., 210.,  0.,
      106., 117., 256.,  280.,  454.,  332.,  360.,  195., 210.,  0.,
      161., 172., 376.,  400.,  649.,  472.,  500.,  270., 285.,  0.,
      112., 119., 254.,  269.,  428.,  305.,  322.,  171., 180.,  0.,
      147., 154., 329.,  344.,  548.,  390.,  407.,  216., 225.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      10.,  20.,  41.,   62.,   95.,   68.,   91.,   48.,  60.,   0.,
      60.,  70.,  146.,  167.,  260.,  183.,  206.,  108., 120.,  0.,
      123., 146., 304.,  352.,  547.,  384.,  436.,  228., 255.,  0.,
      238., 261., 544.,  592.,  922.,  644.,  696.,  363., 390.,  0.,
      369., 408., 849.,  930.,  1446., 1008., 1095., 570., 615.,  0.,
      304., 333., 688.,  748.,  1156., 800.,  864.,  447., 480.,  0.,
      449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,  0.,
      256., 272., 560.,  593.,  914.,  629.,  664.,  342., 360.,  0.,
      336., 352., 725.,  758.,  1169., 804.,  839.,  432., 450.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      19.,  38.,  77.,   116.,  176.,  122.,  163.,  84.,  105.,  0.,
      114., 133., 272.,  311.,  476.,  327.,  368.,  189., 210.,  0.,
      231., 272., 556.,  640.,  979.,  672.,  760.,  390., 435.,  0.,
      436., 477., 976.,  1060., 1624., 1112., 1200., 615., 660.,  0.,
      666., 732., 1497., 1632., 2499., 1710., 1851., 948., 1020., 0.,
      502., 549., 1120., 1216., 1858., 1268., 1368., 699., 750.,  0.,
      737., 784., 1600., 1696., 2593., 1768., 1868., 954., 1005., 0.,
      400., 425., 866.,  917.,  1400., 953.,  1006., 513., 540.,  0.,
      525., 550., 1121., 1172., 1790., 1218., 1271., 648., 675.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324.,  12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636.,  7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692.,  9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636., 1391.,  2828.,  3248.,  4945.,  3372.,  5131.,  3496.,  5317.,
      3620.,  4088.,  2852.,  5796.,  6716.,  10220., 6964.,  10592., 7212.,
      10964., 7460.,  8476.,  5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 9283.,  18824., 20564.,
      31245., 21176., 32163., 21788., 33081., 22400., 24284., 6992.,  14156.,
      15396., 23360., 15804., 23972., 16212., 24584., 16620., 17956., 10693.,
      21644., 23624., 35835., 24236., 36753., 24848., 37671., 25460., 27584.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 11392., 23036., 24436., 37040., 25004., 37892., 25572., 38744.,
      26140., 27636., 2741.,  5528.,  6348.,  9595.,  6472.,  9781.,  6596.,
      9967.,  6720.,  7588.,  5552.,  11196., 12916., 19520., 13164., 19892.,
      13412., 20264., 13660., 15476., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14923., 30104., 32804., 49605.,
      33416., 50523., 34028., 51441., 34640., 37484., 10752., 21676., 23556.,
      35600., 23964., 36212., 24372., 36824., 24780., 26756., 16333., 32924.,
      35864., 54195., 36476., 55113., 37088., 56031., 37700., 40784., 11692.,
      23556., 25596., 38660., 26004., 39272., 26412., 39884., 26820., 28956.,
      17743., 35744., 38924., 58785., 39536., 59703., 40148., 60621., 40760.,
      44084., 12632., 25436., 27636., 41720., 28044., 42332., 28452., 42944.,
      28860., 31156., 18092., 36436., 38636., 58340., 39204., 59192., 39772.,
      60044., 40340., 42636.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,    48.,    85.,    92.,    128.,   83.,   105.,  0.,
      35.,   41.,   128.,   148.,   295.,   272.,   308.,   193.,  215.,  0.,
      88.,   124.,  340.,   428.,   788.,   676.,   796.,   476.,  544.,  0.,
      268.,  304.,  780.,   868.,   1568.,  1276.,  1396.,  816.,  884.,  0.,
      489.,  579.,  1416.,  1620.,  2829.,  2232.,  2484.,  1419., 1557., 0.,
      784.,  868.,  1908.,  2092.,  3404.,  2500.,  2716.,  1476., 1592., 0.,
      1204., 1288., 2828.,  3012.,  4904.,  3580.,  3796.,  2056., 2172., 0.,
      851.,  905.,  1936.,  2052.,  3271.,  2336.,  2468.,  1313., 1383., 0.,
      1121., 1175., 2516.,  2632.,  4201.,  2996.,  3128.,  1663., 1733., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      59.,   137.,  280.,   444.,   679.,   488.,   668.,   353.,  447.,  0.,
      449.,  527.,  1100.,  1264.,  1969.,  1388.,  1568.,  823.,  917.,  0.,
      916.,  1096., 2284.,  2660.,  4136.,  2908.,  3316.,  1736., 1948., 0.,
      1816., 1996., 4164.,  4540.,  7076.,  4948.,  5356.,  2796., 3008., 0.,
      2811., 3117., 6492.,  7128.,  11091., 7740.,  8424.,  4389., 4743., 0.,
      2332., 2560., 5292.,  5764.,  8912.,  6172.,  6676.,  3456., 3716., 0.,
      3472., 3700., 7652.,  8124.,  12572., 8692.,  9196.,  4756., 5016., 0.,
      1985., 2111., 4348.,  4608.,  7105.,  4892.,  5168.,  2663., 2805., 0.,
      2615., 2741., 5648.,  5908.,  9115.,  6272.,  6548.,  3373., 3515., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      113.,  263.,  532.,   840.,   1273.,  884.,   1208.,  623.,  789.,  0.,
      863.,  1013., 2072.,  2380.,  3643.,  2504.,  2828.,  1453., 1619., 0.,
      1744., 2068., 4228.,  4892.,  7484.,  5140.,  5836.,  2996., 3352., 0.,
      3364., 3688., 7548.,  8212.,  12584., 8620.,  9316.,  4776., 5132., 0.,
      5133., 5655., 11568., 12636., 19353., 13248., 14364., 7359., 7929., 0.,
      3880., 4252., 8676.,  9436.,  14420., 9844.,  10636., 5436., 5840., 0.,
      5740., 6112., 12476., 13236., 20240., 13804., 14596., 7456., 7860., 0.,
      3119., 3317., 6760.,  7164.,  10939., 7448.,  7868.,  4013., 4227., 0.,
      4109., 4307., 8780.,  9184.,  14029., 9548.,  9968.,  5083., 5297., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   5066.,
      3972.,   4500.,   1060.,   2840.,   3768.,   6796.,   5720.,   9724.,
      7672.,   12652.,  9624.,   11320.,  3060.,   7480.,   8408.,   14716.,
      11640.,  19564.,  14872.,  24412.,  18104.,  19800.,  6170.,   14380.,
      16732.,  28254.,  21580.,  35526.,  26428.,  42798.,  31276.,  34780.,
      10500.,  22360.,  24568.,  38956.,  27800.,  43804.,  31032.,  48652.,
      34264.,  37240.,  17330.,  36700.,  40972.,  64614.,  45820.,  71886.,
      50668.,  79158.,  55516.,  60940.,  17940.,  37240.,  40728.,  63196.,
      43960.,  68044.,  47192.,  72892.,  50424.,  54680.,  28490.,  59020.,
      65212.,  100974., 70060.,  108246., 74908.,  115518., 79756.,  87100.,
      25380.,  52120.,  56888.,  87436.,  60120.,  92284.,  63352.,  97132.,
      66584.,  72120.,  36980.,  75960.,  80728.,  124156., 85240.,  130924.,
      89752.,  137692., 94264.,  99800.,  10870.,  22100.,  25444.,  38738.,
      26420.,  40202.,  27396.,  41666.,  28372.,  32100.,  22260.,  45240.,
      52568.,  79996.,  54520.,  82924.,  56472.,  85852.,  58424.,  66520.,
      40260.,  81880.,  89208.,  135916., 92440.,  140764., 95672.,  145612.,
      98904.,  107000., 61970.,  125980., 137932., 210054., 142780., 217326.,
      147628., 224598., 152476., 165580., 47700.,  96760.,  105368., 160156.,
      108600., 165004., 111832., 169852., 115064., 124440., 73130.,  148300.,
      162172., 246414., 167020., 253686., 171868., 260958., 176716., 191740.,
      55140.,  111640., 121528., 184396., 124760., 189244., 127992., 194092.,
      131224., 141880., 84290.,  170620., 186412., 282774., 191260., 290046.,
      196108., 297318., 200956., 217900., 62580.,  126520., 137688., 208636.,
      140920., 213484., 144152., 218332., 147384., 159320., 90180.,  182360.,
      193528., 293356., 198040., 300124., 202552., 306892., 207064., 219000.,
      21470.,  43300.,  49844.,  75338.,  50820.,  76802.,  51796.,  78266.,
      52772.,  59700.,  43460.,  87640.,  101368., 153196., 103320., 156124.,
      105272., 159052., 107224., 121720., 77460.,  156280., 170008., 257116.,
      173240., 261964., 176472., 266812., 179704., 194200., 117770., 237580.,
      259132., 391854., 263980., 399126., 268828., 406398., 273676., 296380.,
      84900.,  171160., 186168., 281356., 189400., 286204., 192632., 291052.,
      195864., 211640., 128930., 259900., 283372., 428214., 288220., 435486.,
      293068., 442758., 297916., 322540., 92340.,  186040., 202328., 305596.,
      205560., 310444., 208792., 315292., 212024., 229080., 140090., 282220.,
      307612., 464574., 312460., 471846., 317308., 479118., 322156., 348700.,
      99780.,  200920., 218488., 329836., 221720., 334684., 224952., 339532.,
      228184., 246520., 143380., 288760., 306328., 462556., 310840., 469324.,
      315352., 476092., 319864., 338200.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,   578.,    660.,    932.,    614.,
      782.,    0.,      230.,    270.,   900.,    1044.,   2138.,   2020.,
      2292.,   1454.,   1622.,   0.,     580.,    852.,    2424.,   3096.,
      5788.,   5048.,   5976.,   3604.,  4132.,   0.,      1940.,   2212.,
      5784.,   6456.,   11788.,  9688.,  10616.,  6244.,   6772.,   0.,
      3570.,   4266.,   10572.,  12156., 21390.,  17004.,  18972.,  10890.,
      11970.,  0.,      6020.,   6676.,  14712.,  16152.,  26332.,  19384.,
      21080.,  11476.,  12388.,  0.,     9300.,   9956.,   21912.,  23352.,
      38092.,  27864.,  29560.,  16036., 16948.,  0.,      6630.,   7054.,
      15108.,  16020.,  25562.,  18276., 19316.,  10286.,  10838.,  0.,
      8750.,   9174.,   19668.,  20580., 32882.,  23476.,  24516.,  13046.,
      13598.,  0.,      0.,      0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,     390.,    1006.,   2052.,   3348.,
      5114.,   3684.,   5108.,   2702.,  3446.,   0.,      3470.,   4086.,
      8532.,   9828.,   15314.,  10804., 12228.,  6422.,   7166.,   0.,
      7060.,   8484.,   17688.,  20664., 32140.,  22616.,  25848.,  13540.,
      15220.,  0.,      14180.,  15604., 32568.,  35544.,  55420.,  38776.,
      42008.,  21940.,  23620.,  0.,     21930.,  24354.,  50748.,  55788.,
      86838.,  60636.,  66060.,  34434., 37242.,  0.,      18260.,  20068.,
      41496.,  45240.,  69964.,  48472., 52472.,  27172.,  29236.,  0.,
      27300.,  29108.,  60216.,  63960., 99004.,  68472.,  72472.,  37492.,
      39556.,  0.,      15630.,  16630., 34260.,  36324.,  56018.,  38580.,
      40772.,  21014.,  22142.,  0.,     20630.,  21630.,  44580.,  46644.,
      71978.,  49540.,  51732.,  26654., 27782.,  0.,      0.,      0.,
      0.,      0.,      0.,      0.,     0.,      0.,      0.,      0.,
      750.,    1942.,   3924.,   6372.,  9650.,   6708.,   9284.,   4790.,
      6110.,   0.,      6710.,   7902.,  16164.,  18612.,  28490.,  19588.,
      22164.,  11390.,  12710.,  0.,     13540.,  16116.,  32952.,  38232.,
      58492.,  40184.,  45720.,  23476., 26308.,  0.,      26420.,  28996.,
      59352.,  64632.,  99052.,  67864., 73400.,  37636.,  40468.,  0.,
      40290.,  44442.,  90924.,  99420., 152286., 104268., 113148., 57978.,
      62514.,  0.,      30500.,  33460., 68280.,  74328.,  113596., 77560.,
      83864.,  42868.,  46084.,  0.,     45300.,  48260.,  98520.,  104568.,
      159916., 109080., 115384., 58948., 62164.,  0.,      24630.,  26206.,
      53412.,  56628.,  86474.,  58884., 62228.,  31742.,  33446.,  0.,
      32510.,  34086.,  69492.,  72708., 111074., 75604.,  78948.,  40262.,
      41966.,  0.,      0.,      0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    14.,    37.,    40.,    43.,    46.,    82.,    88.,    73.,
      78.,    127.,   136.,   103.,   110.,   172.,   184.,   133.,   142.,
      151.,   160.,   41.,    48.,    104.,   120.,   136.,   152.,   239.,
      266.,   196.,   216.,   329.,   362.,   256.,   280.,   419.,   458.,
      316.,   344.,   372.,   400.,   111.,   118.,   264.,   280.,   296.,
      312.,   509.,   536.,   396.,   416.,   659.,   692.,   496.,   520.,
      809.,   848.,   596.,   624.,   652.,   680.,   214.,   232.,   491.,
      530.,   569.,   608.,   951.,   1014.,  719.,   764.,   1176.,  1248.,
      869.,   920.,   1401.,  1482.,  1019.,  1076.,  1133.,  1190.,  341.,
      358.,   724.,   760.,   796.,   832.,   1259.,  1316.,  896.,   936.,
      1409.,  1472.,  996.,   1040.,  1559.,  1628.,  1096.,  1144.,  1192.,
      1240.,  559.,   592.,   1181.,  1250.,  1319.,  1388.,  2076.,  2184.,
      1469.,  1544.,  2301.,  2418.,  1619.,  1700.,  2526.,  2652.,  1769.,
      1856.,  1943.,  2030.,  571.,   598.,   1184.,  1240.,  1296.,  1352.,
      2009.,  2096.,  1396.,  1456.,  2159.,  2252.,  1496.,  1560.,  2309.,
      2408.,  1596.,  1664.,  1732.,  1800.,  904.,   952.,   1871.,  1970.,
      2069.,  2168.,  3201.,  3354.,  2219.,  2324.,  3426.,  3588.,  2369.,
      2480.,  3651.,  3822.,  2519.,  2636.,  2753.,  2870.,  801.,   838.,
      1644.,  1720.,  1796.,  1872.,  2759.,  2876.,  1896.,  1976.,  2909.,
      3032.,  1996.,  2080.,  3059.,  3188.,  2096.,  2184.,  2272.,  2360.,
      1171.,  1208.,  2404.,  2480.,  2556.,  2632.,  3929.,  4046.,  2696.,
      2776.,  4139.,  4262.,  2836.,  2920.,  4349.,  4478.,  2976.,  3064.,
      3152.,  3240.,  338.,   364.,   687.,   740.,   793.,   846.,   1207.,
      1288.,  823.,   878.,   1252.,  1336.,  853.,   910.,   1297.,  1384.,
      883.,   942.,   1001.,  1060.,  691.,   748.,   1404.,  1520.,  1636.,
      1752.,  2489.,  2666.,  1696.,  1816.,  2579.,  2762.,  1756.,  1880.,
      2669.,  2858.,  1816.,  1944.,  2072.,  2200.,  1261.,  1318.,  2564.,
      2680.,  2796.,  2912.,  4259.,  4436.,  2896.,  3016.,  4409.,  4592.,
      2996.,  3120.,  4559.,  4748.,  3096.,  3224.,  3352.,  3480.,  1939.,
      2032.,  3941.,  4130.,  4319.,  4508.,  6576.,  6864.,  4469.,  4664.,
      6801.,  7098.,  4619.,  4820.,  7026.,  7332.,  4769.,  4976.,  5183.,
      5390.,  1491.,  1558.,  3024.,  3160.,  3296.,  3432.,  5009.,  5216.,
      3396.,  3536.,  5159.,  5372.,  3496.,  3640.,  5309.,  5528.,  3596.,
      3744.,  3892.,  4040.,  2284.,  2392.,  4631.,  4850.,  5069.,  5288.,
      7701.,  8034.,  5219.,  5444.,  7926.,  8268.,  5369.,  5600.,  8151.,
      8502.,  5519.,  5756.,  5993.,  6230.,  1721.,  1798.,  3484.,  3640.,
      3796.,  3952.,  5759.,  5996.,  3896.,  4056.,  5909.,  6152.,  3996.,
      4160.,  6059.,  6308.,  4096.,  4264.,  4432.,  4600.,  2629.,  2752.,
      5321.,  5570.,  5819.,  6068.,  8826.,  9204.,  5969.,  6224.,  9051.,
      9438.,  6119.,  6380.,  9276.,  9672.,  6269.,  6536.,  6803.,  7070.,
      1951.,  2038.,  3944.,  4120.,  4296.,  4472.,  6509.,  6776.,  4396.,
      4576.,  6659.,  6932.,  4496.,  4680.,  6809.,  7088.,  4596.,  4784.,
      4972.,  5160.,  2821.,  2908.,  5704.,  5880.,  6056.,  6232.,  9179.,
      9446.,  6196.,  6376.,  9389.,  9662.,  6336.,  6520.,  9599.,  9878.,
      6476.,  6664.,  6852.,  7040.,  663.,   714.,   1337.,  1440.,  1543.,
      1646.,  2332.,  2488.,  1573.,  1678.,  2377.,  2536.,  1603.,  1710.,
      2422.,  2584.,  1633.,  1742.,  1851.,  1960.,  1341.,  1448.,  2704.,
      2920.,  3136.,  3352.,  4739.,  5066.,  3196.,  3416.,  4829.,  5162.,
      3256.,  3480.,  4919.,  5258.,  3316.,  3544.,  3772.,  4000.,  2411.,
      2518.,  4864.,  5080.,  5296.,  5512.,  8009.,  8336.,  5396.,  5616.,
      8159.,  8492.,  5496.,  5720.,  8309.,  8648.,  5596.,  5824.,  6052.,
      6280.,  3664.,  3832.,  7391.,  7730.,  8069.,  8408.,  12201., 12714.,
      8219.,  8564.,  12426., 12948., 8369.,  8720.,  12651., 13182., 8519.,
      8876.,  9233.,  9590.,  2641.,  2758.,  5324.,  5560.,  5796.,  6032.,
      8759.,  9116.,  5896.,  6136.,  8909.,  9272.,  5996.,  6240.,  9059.,
      9428.,  6096.,  6344.,  6592.,  6840.,  4009.,  4192.,  8081.,  8450.,
      8819.,  9188.,  13326., 13884., 8969.,  9344.,  13551., 14118., 9119.,
      9500.,  13776., 14352., 9269.,  9656.,  10043., 10430., 2871.,  2998.,
      5784.,  6040.,  6296.,  6552.,  9509.,  9896.,  6396.,  6656.,  9659.,
      10052., 6496.,  6760.,  9809.,  10208., 6596.,  6864.,  7132.,  7400.,
      4354.,  4552.,  8771.,  9170.,  9569.,  9968.,  14451., 15054., 9719.,
      10124., 14676., 15288., 9869.,  10280., 14901., 15522., 10019., 10436.,
      10853., 11270., 3101.,  3238.,  6244.,  6520.,  6796.,  7072.,  10259.,
      10676., 6896.,  7176.,  10409., 10832., 6996.,  7280.,  10559., 10988.,
      7096.,  7384.,  7672.,  7960.,  4471.,  4608.,  9004.,  9280.,  9556.,
      9832.,  14429., 14846., 9696.,  9976.,  14639., 15062., 9836.,  10120.,
      14849., 15278., 9976.,  10264., 10552., 10840.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      23.,   28.,   33.,   38.,   21.,   24.,   27.,   30.,   0.,    0.,
      11.,   12.,   13.,   14.,   37.,   40.,   43.,   46.,   82.,   88.,
      73.,   78.,   83.,   88.,   51.,   54.,   57.,   60.,   0.,    0.,
      25.,   30.,   35.,   40.,   92.,   104.,  116.,  128.,  209.,  230.,
      176.,  192.,  208.,  224.,  123.,  132.,  141.,  150.,  0.,    0.,
      75.,   80.,   85.,   90.,   212.,  224.,  236.,  248.,  419.,  440.,
      336.,  352.,  368.,  384.,  213.,  222.,  231.,  240.,  0.,    0.,
      132.,  144.,  156.,  168.,  375.,  402.,  429.,  456.,  741.,  786.,
      579.,  612.,  645.,  678.,  366.,  384.,  402.,  420.,  0.,    0.,
      201.,  212.,  223.,  234.,  488.,  512.,  536.,  560.,  869.,  908.,
      636.,  664.,  692.,  720.,  375.,  390.,  405.,  420.,  0.,    0.,
      311.,  322.,  333.,  344.,  728.,  752.,  776.,  800.,  1259., 1298.,
      916.,  944.,  972.,  1000., 525.,  540.,  555.,  570.,  0.,    0.,
      217.,  224.,  231.,  238.,  493.,  508.,  523.,  538.,  832.,  856.,
      593.,  610.,  627.,  644.,  333.,  342.,  351.,  360.,  0.,    0.,
      287.,  294.,  301.,  308.,  643.,  658.,  673.,  688.,  1072., 1096.,
      763.,  780.,  797.,  814.,  423.,  432.,  441.,  450.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      10.,   20.,   30.,   40.,   61.,   82.,   103.,  124.,  157.,  190.,
      113.,  136.,  159.,  182.,  84.,   96.,   108.,  120.,  0.,    0.,
      110.,  120.,  130.,  140.,  271.,  292.,  313.,  334.,  487.,  520.,
      343.,  366.,  389.,  412.,  204.,  216.,  228.,  240.,  0.,    0.,
      223.,  246.,  269.,  292.,  560.,  608.,  656.,  704.,  1019., 1094.,
      716.,  768.,  820.,  872.,  429.,  456.,  483.,  510.,  0.,    0.,
      453.,  476.,  499.,  522.,  1040., 1088., 1136., 1184., 1769., 1844.,
      1236., 1288., 1340., 1392., 699.,  726.,  753.,  780.,  0.,    0.,
      699.,  738.,  777.,  816.,  1617., 1698., 1779., 1860., 2766., 2892.,
      1929., 2016., 2103., 2190., 1095., 1140., 1185., 1230., 0.,    0.,
      579.,  608.,  637.,  666.,  1316., 1376., 1436., 1496., 2219., 2312.,
      1536., 1600., 1664., 1728., 861.,  894.,  927.,  960.,  0.,    0.,
      869.,  898.,  927.,  956.,  1916., 1976., 2036., 2096., 3149., 3242.,
      2176., 2240., 2304., 2368., 1191., 1224., 1257., 1290., 0.,    0.,
      496.,  512.,  528.,  544.,  1087., 1120., 1153., 1186., 1777., 1828.,
      1223., 1258., 1293., 1328., 666.,  684.,  702.,  720.,  0.,    0.,
      656.,  672.,  688.,  704.,  1417., 1450., 1483., 1516., 2287., 2338.,
      1573., 1608., 1643., 1678., 846.,  864.,  882.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      19.,   38.,   57.,   76.,   115.,  154.,  193.,  232.,  292.,  352.,
      203.,  244.,  285.,  326.,  147.,  168.,  189.,  210.,  0.,    0.,
      209.,  228.,  247.,  266.,  505.,  544.,  583.,  622.,  892.,  952.,
      613.,  654.,  695.,  736.,  357.,  378.,  399.,  420.,  0.,    0.,
      421.,  462.,  503.,  544.,  1028., 1112., 1196., 1280., 1829., 1958.,
      1256., 1344., 1432., 1520., 735.,  780.,  825.,  870.,  0.,    0.,
      831.,  872.,  913.,  954.,  1868., 1952., 2036., 2120., 3119., 3248.,
      2136., 2224., 2312., 2400., 1185., 1230., 1275., 1320., 0.,    0.,
      1266., 1332., 1398., 1464., 2859., 2994., 3129., 3264., 4791., 4998.,
      3279., 3420., 3561., 3702., 1824., 1896., 1968., 2040., 0.,    0.,
      957.,  1004., 1051., 1098., 2144., 2240., 2336., 2432., 3569., 3716.,
      2436., 2536., 2636., 2736., 1347., 1398., 1449., 1500., 0.,    0.,
      1427., 1474., 1521., 1568., 3104., 3200., 3296., 3392., 5039., 5186.,
      3436., 3536., 3636., 3736., 1857., 1908., 1959., 2010., 0.,    0.,
      775.,  800.,  825.,  850.,  1681., 1732., 1783., 1834., 2722., 2800.,
      1853., 1906., 1959., 2012., 999.,  1026., 1053., 1080., 0.,    0.,
      1025., 1050., 1075., 1100., 2191., 2242., 2293., 2344., 3502., 3580.,
      2383., 2436., 2489., 2542., 1269., 1296., 1323., 1350., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    83.,    240.,    260.,    280.,   300.,   557.,    599.,
      516.,   552.,   911.,    977.,    752.,   804.,   1265.,   1355.,
      988.,   1056.,  1124.,   1192.,   264.,   316.,   700.,    820.,
      940.,   1060.,  1684.,   1888.,   1412.,  1564.,  2392.,   2644.,
      1884.,  2068.,  3100.,   3400.,   2356.,  2572.,  2788.,   3004.,
      784.,   836.,   1900.,   2020.,   2140.,  2260.,  3724.,   3928.,
      2932.,  3084.,  4912.,   5164.,   3724.,  3908.,  6100.,   6400.,
      4516.,  4732.,  4948.,   5164.,   1541.,  1679.,  3580.,   3880.,
      4180.,  4480.,  7041.,   7527.,   5368.,  5716.,  8823.,   9381.,
      6556.,  6952.,  10605.,  11235.,  7744.,  8188.,  8632.,   9076.,
      2604.,  2736.,  5540.,   5820.,   6100.,  6380.,  9664.,   10108.,
      6892.,  7204.,  10852.,  11344.,  7684.,  8028.,  12040.,  12580.,
      8476.,  8852.,  9228.,   9604.,   4271.,  4529.,  9040.,   9580.,
      10120., 10660., 15951.,  16797.,  11308., 11896., 17733.,  18651.,
      12496., 13132., 19515.,  20505.,  13684., 14368., 15052.,  15736.,
      4424.,  4636.,  9180.,   9620.,   10060., 10500., 15604.,  16288.,
      10852., 11324., 16792.,  17524.,  11644., 12148., 17980.,  18760.,
      12436., 12972., 13508.,  14044.,  7001.,  7379.,  14500.,  15280.,
      16060., 16840., 24861.,  26067.,  17248., 18076., 26643.,  27921.,
      18436., 19312., 28425.,  29775.,  19624., 20548., 21472.,  22396.,
      6244.,  6536.,  12820.,  13420.,  14020., 14620., 21544.,  22468.,
      14812., 15444., 22732.,  23704.,  15604., 16268., 23920.,  24940.,
      16396., 17092., 17788.,  18484.,  9164.,  9456.,  18820.,  19420.,
      20020., 20620., 30784.,  31708.,  21132., 21764., 32452.,  33424.,
      22244., 22908., 34120.,  35140.,  23356., 24052., 24748.,  25444.,
      2627.,  2833.,  5340.,   5760.,   6180.,  6600.,  9407.,   10049.,
      6416.,  6852.,  9761.,   10427.,  6652.,  7104.,  10115.,  10805.,
      6888.,  7356.,  7824.,   8292.,   5364.,  5816.,  10900.,  11820.,
      12740., 13660., 19384.,  20788.,  13212., 14164., 20092.,  21544.,
      13684., 14668., 20800.,  22300.,  14156., 15172., 16188.,  17204.,
      9884.,  10336., 20100.,  21020.,  21940., 22860., 33424.,  34828.,
      22732., 23684., 34612.,  36064.,  23524., 24508., 35800.,  37300.,
      24316., 25332., 26348.,  27364.,  15191., 15929., 30880.,  32380.,
      33880., 35380., 51591.,  53877.,  35068., 36616., 53373.,  55731.,
      36256., 37852., 55155.,  57585.,  37444., 39088., 40732.,  42376.,
      11704., 12236., 23740.,  24820.,  25900., 26980., 39364.,  41008.,
      26692., 27804., 40552.,  42244.,  27484., 28628., 41740.,  43480.,
      28276., 29452., 30628.,  31804.,  17921., 18779., 36340.,  38080.,
      39820., 41560., 60501.,  63147.,  41008., 42796., 62283.,  65001.,
      42196., 44032., 64065.,  66855.,  43384., 45268., 47152.,  49036.,
      13524., 14136., 27380.,  28620.,  29860., 31100., 45304.,  47188.,
      30652., 31924., 46492.,  48424.,  31444., 32748., 47680.,  49660.,
      32236., 33572., 34908.,  36244.,  20651., 21629., 41800.,  43780.,
      45760., 47740., 69411.,  72417.,  46948., 48976., 71193.,  74271.,
      48136., 50212., 72975.,  76125.,  49324., 51448., 53572.,  55696.,
      15344., 16036., 31020.,  32420.,  33820., 35220., 51244.,  53368.,
      34612., 36044., 52432.,  54604.,  35404., 36868., 53620.,  55840.,
      36196., 37692., 39188.,  40684.,  22264., 22956., 45020.,  46420.,
      47820., 49220., 72484.,  74608.,  48932., 50364., 74152.,  76324.,
      50044., 51508., 75820.,  78040.,  51156., 52652., 54148.,  55644.,
      5177.,  5583.,  10440.,  11260.,  12080., 12900., 18257.,  19499.,
      12316., 13152., 18611.,  19877.,  12552., 13404., 18965.,  20255.,
      12788., 13656., 14524.,  15392.,  10464., 11316., 21100.,  22820.,
      24540., 26260., 37084.,  39688.,  25012., 26764., 37792.,  40444.,
      25484., 27268., 38500.,  41200.,  25956., 27772., 29588.,  31404.,
      18984., 19836., 38300.,  40020.,  41740., 43460., 63124.,  65728.,
      42532., 44284., 64312.,  66964.,  43324., 45108., 65500.,  68200.,
      44116., 45932., 47748.,  49564.,  28841., 30179., 58180.,  60880.,
      63580., 66280., 96141.,  100227., 64768., 67516., 97923.,  102081.,
      65956., 68752., 99705.,  103935., 67144., 69988., 72832.,  75676.,
      20804., 21736., 41940.,  43820.,  45700., 47580., 69064.,  71908.,
      46492., 48404., 70252.,  73144.,  47284., 49228., 71440.,  74380.,
      48076., 50052., 52028.,  54004.,  31571., 33029., 63640.,  66580.,
      69520., 72460., 105051., 109497., 70708., 73696., 106833., 111351.,
      71896., 74932., 108615., 113205., 73084., 76168., 79252.,  82336.,
      22624., 23636., 45580.,  47620.,  49660., 51700., 75004.,  78088.,
      50452., 52524., 76192.,  79324.,  51244., 53348., 77380.,  80560.,
      52036., 54172., 56308.,  58444.,  34301., 35879., 69100.,  72280.,
      75460., 78640., 113961., 118767., 76648., 79876., 115743., 120621.,
      77836., 81112., 117525., 122475., 79024., 82348., 85672.,  88996.,
      24444., 25536., 49220.,  51420.,  53620., 55820., 80944.,  84268.,
      54412., 56644., 82132.,  85504.,  55204., 57468., 83320.,  86740.,
      55996., 58292., 60588.,  62884.,  35364., 36456., 71220.,  73420.,
      75620., 77820., 114184., 117508., 76732., 78964., 115852., 119224.,
      77844., 80108., 117520., 120940., 78956., 81252., 83548.,  85844.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   156.,   192.,   228.,   264.,   149.,   171.,   193.,   215.,
      0.,     0.,     65.,    71.,    77.,    83.,    240.,   260.,   280.,
      300.,   557.,   599.,   516.,   552.,   588.,   624.,   369.,   391.,
      413.,   435.,   0.,     0.,     148.,   184.,   220.,   256.,   612.,
      700.,   788.,   876.,   1456.,  1612.,  1260.,  1380.,  1500.,  1620.,
      900.,   968.,   1036.,  1104.,  0.,     0.,     508.,   544.,   580.,
      616.,   1492.,  1580.,  1668.,  1756.,  3016.,  3172.,  2460.,  2580.,
      2700.,  2820.,  1580.,  1648.,  1716.,  1784.,  0.,     0.,     909.,
      999.,   1089.,  1179.,  2676.,  2880.,  3084.,  3288.,  5397.,  5739.,
      4272.,  4524.,  4776.,  5028.,  2733.,  2871.,  3009.,  3147.,  0.,
      0.,     1504.,  1588.,  1672.,  1756.,  3676.,  3860.,  4044.,  4228.,
      6580.,  6880.,  4836.,  5052.,  5268.,  5484.,  2864.,  2980.,  3096.,
      3212.,  0.,     0.,     2344.,  2428.,  2512.,  2596.,  5516.,  5700.,
      5884.,  6068.,  9580.,  9880.,  6996.,  7212.,  7428.,  7644.,  4024.,
      4140.,  4256.,  4372.,  0.,     0.,     1661.,  1715.,  1769.,  1823.,
      3784.,  3900.,  4016.,  4132.,  6401.,  6587.,  4572.,  4704.,  4836.,
      4968.,  2573.,  2643.,  2713.,  2783.,  0.,     0.,     2201.,  2255.,
      2309.,  2363.,  4944.,  5060.,  5176.,  5292.,  8261.,  8447.,  5892.,
      6024.,  6156.,  6288.,  3273.,  3343.,  3413.,  3483.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     59.,    137.,   215.,   293.,   436.,   600.,   764.,
      928.,   1163.,  1421.,  840.,   1020.,  1200.,  1380.,  635.,   729.,
      823.,   917.,   0.,     0.,     839.,   917.,   995.,   1073.,  2076.,
      2240.,  2404.,  2568.,  3743.,  4001.,  2640.,  2820.,  3000.,  3180.,
      1575.,  1669.,  1763.,  1857.,  0.,     0.,     1696.,  1876.,  2056.,
      2236.,  4284.,  4660.,  5036.,  5412.,  7828.,  8416.,  5508.,  5916.,
      6324.,  6732.,  3312.,  3524.,  3736.,  3948.,  0.,     0.,     3496.,
      3676.,  3856.,  4036.,  8044.,  8420.,  8796.,  9172.,  13708., 14296.,
      9588.,  9996.,  10404., 10812., 5432.,  5644.,  5856.,  6068.,  0.,
      0.,     5391.,  5697.,  6003.,  6309.,  12504., 13140., 13776., 14412.,
      21435., 22425., 14964., 15648., 16332., 17016., 8511.,  8865.,  9219.,
      9573.,  0.,     0.,     4492.,  4720.,  4948.,  5176.,  10228., 10700.,
      11172., 11644., 17272., 18004., 11964., 12468., 12972., 13476., 6716.,
      6976.,  7236.,  7496.,  0.,     0.,     6772.,  7000.,  7228.,  7456.,
      14948., 15420., 15892., 16364., 24592., 25324., 17004., 17508., 18012.,
      18516., 9316.,  9576.,  9836.,  10096., 0.,     0.,     3875.,  4001.,
      4127.,  4253.,  8500.,  8760.,  9020.,  9280.,  13907., 14309., 9576.,
      9852.,  10128., 10404., 5219.,  5361.,  5503.,  5645.,  0.,     0.,
      5135.,  5261.,  5387.,  5513.,  11100., 11360., 11620., 11880., 17927.,
      18329., 12336., 12612., 12888., 13164., 6639.,  6781.,  6923.,  7065.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     113.,   263.,   413.,   563.,   832.,
      1140.,  1448.,  1756.,  2189.,  2663.,  1524.,  1848.,  2172.,  2496.,
      1121.,  1287.,  1453.,  1619.,  0.,     0.,     1613.,  1763.,  1913.,
      2063.,  3912.,  4220.,  4528.,  4836.,  6929.,  7403.,  4764.,  5088.,
      5412.,  5736.,  2781.,  2947.,  3113.,  3279.,  0.,     0.,     3244.,
      3568.,  3892.,  4216.,  7956.,  8620.,  9284.,  9948.,  14200., 15220.,
      9756.,  10452., 11148., 11844., 5724.,  6080.,  6436.,  6792.,  0.,
      0.,     6484.,  6808.,  7132.,  7456.,  14596., 15260., 15924., 16588.,
      24400., 25420., 16716., 17412., 18108., 18804., 9284.,  9640.,  9996.,
      10352., 0.,     0.,     9873.,  10395., 10917., 11439., 22332., 23400.,
      24468., 25536., 37473., 39111., 25656., 26772., 27888., 29004., 14289.,
      14859., 15429., 15999., 0.,     0.,     7480.,  7852.,  8224.,  8596.,
      16780., 17540., 18300., 19060., 27964., 29128., 19092., 19884., 20676.,
      21468., 10568., 10972., 11376., 11780., 0.,     0.,     11200., 11572.,
      11944., 12316., 24380., 25140., 25900., 26660., 39604., 40768., 27012.,
      27804., 28596., 29388., 14608., 15012., 15416., 15820., 0.,     0.,
      6089.,  6287.,  6485.,  6683.,  13216., 13620., 14024., 14428., 21413.,
      22031., 14580., 15000., 15420., 15840., 7865.,  8079.,  8293.,  8507.,
      0.,     0.,     8069.,  8267.,  8465.,  8663.,  17256., 17660., 18064.,
      18468., 27593., 28211., 18780., 19200., 19620., 20040., 10005., 10219.,
      10433., 10647., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    550.,    1700.,   1844.,   1988.,   2132.,   4066.,   4378.,
      3860.,   4132.,   6874.,   7378.,   5732.,   6132.,   9682.,   10378.,
      7604.,   8132.,   8660.,   9188.,   1860.,   2260.,   5080.,   6008.,
      6936.,   7864.,   12572.,  14156.,  10680.,  11864.,  18188.,  20156.,
      14424.,  15864.,  23804.,  26156.,  18168.,  19864.,  21560.,  23256.,
      5860.,   6260.,   14360.,  15288.,  16216.,  17144.,  28412.,  29996.,
      22520.,  23704.,  37868.,  39836.,  28824.,  30264.,  47324.,  49676.,
      35128.,  36824.,  38520.,  40216.,  11650.,  12730.,  27260.,  29612.,
      31964.,  34316.,  54078.,  57894.,  41420.,  44156.,  68262.,  72654.,
      50876.,  53996.,  82446.,  87414.,  60332.,  63836.,  67340.,  70844.,
      20340.,  21380.,  43320.,  45528.,  47736.,  49944.,  75692.,  79196.,
      54040.,  56504.,  85148.,  89036.,  60344.,  63064.,  94604.,  98876.,
      66648.,  69624.,  72600.,  75576.,  33370.,  35410.,  70700.,  74972.,
      79244.,  83516.,  124998., 131694., 88700.,  93356.,  139182., 146454.,
      98156.,  103196., 153366., 161214., 107612., 113036., 118460., 123884.,
      34820.,  36500.,  72280.,  75768.,  79256.,  82744.,  122972., 128396.,
      85560.,  89304.,  132428., 138236., 91864.,  95864.,  141884., 148076.,
      98168.,  102424., 106680., 110936., 55090.,  58090.,  114140., 120332.,
      126524., 132716., 195918., 205494., 135980., 142556., 210102., 220254.,
      145436., 152396., 224286., 235014., 154892., 162236., 169580., 176924.,
      49300.,  51620.,  101240., 106008., 110776., 115544., 170252., 177596.,
      117080., 122104., 179708., 187436., 123384., 128664., 189164., 197276.,
      129688., 135224., 140760., 146296., 72500.,  74820.,  148920., 153688.,
      158456., 163224., 243692., 251036., 167320., 172344., 256988., 264716.,
      176184., 181464., 270284., 278396., 185048., 190584., 196120., 201656.,
      20710.,  22350.,  42100.,  45444.,  48788.,  52132.,  74266.,  79378.,
      50660.,  54132.,  77074.,  82378.,  52532.,  56132.,  79882.,  85378.,
      54404.,  58132.,  61860.,  65588.,  42260.,  45860.,  85880.,  93208.,
      100536., 107864., 152972., 164156., 104280., 111864., 158588., 170156.,
      108024., 115864., 164204., 176156., 111768., 119864., 127960., 136056.,
      78260.,  81860.,  159160., 166488., 173816., 181144., 264812., 275996.,
      180120., 187704., 274268., 285836., 186424., 194264., 283724., 295676.,
      192728., 200824., 208920., 217016., 120250., 126130., 244460., 256412.,
      268364., 280316., 408678., 426894., 277820., 290156., 422862., 441654.,
      287276., 299996., 437046., 456414., 296732., 309836., 322940., 336044.,
      92740.,  96980.,  188120., 196728., 205336., 213944., 312092., 325196.,
      211640., 220504., 321548., 335036., 217944., 227064., 331004., 344876.,
      224248., 233624., 243000., 252376., 141970., 148810., 287900., 301772.,
      315644., 329516., 479598., 500694., 325100., 339356., 493782., 515454.,
      334556., 349196., 507966., 530214., 344012., 359036., 374060., 389084.,
      107220., 112100., 217080., 226968., 236856., 246744., 359372., 374396.,
      243160., 253304., 368828., 384236., 249464., 259864., 378284., 394076.,
      255768., 266424., 277080., 287736., 163690., 171490., 331340., 347132.,
      362924., 378716., 550518., 574494., 372380., 388556., 564702., 589254.,
      381836., 398396., 578886., 604014., 391292., 408236., 425180., 442124.,
      121700., 127220., 246040., 257208., 268376., 279544., 406652., 423596.,
      274680., 286104., 416108., 433436., 280984., 292664., 425564., 443276.,
      287288., 299224., 311160., 323096., 176900., 182420., 357720., 368888.,
      380056., 391224., 576092., 593036., 388920., 400344., 589388., 606716.,
      397784., 409464., 602684., 620396., 406648., 418584., 430520., 442456.,
      40910.,  44150.,  82500.,  89044.,  95588.,  102132., 144466., 154378.,
      97460.,  104132., 147274., 157378., 99332.,  106132., 150082., 160378.,
      101204., 108132., 115060., 121988., 82660.,  89460.,  166680., 180408.,
      194136., 207864., 293372., 314156., 197880., 211864., 298988., 320156.,
      201624., 215864., 304604., 326156., 205368., 219864., 234360., 248856.,
      150660., 157460., 303960., 317688., 331416., 345144., 501212., 521996.,
      337720., 351704., 510668., 531836., 344024., 358264., 520124., 541676.,
      350328., 364824., 379320., 393816., 228850., 239530., 461660., 483212.,
      504764., 526316., 763278., 795894., 514220., 536156., 777462., 810654.,
      523676., 545996., 791646., 825414., 533132., 555836., 578540., 601244.,
      165140., 172580., 332920., 347928., 362936., 377944., 548492., 571196.,
      369240., 384504., 557948., 581036., 375544., 391064., 567404., 590876.,
      381848., 397624., 413400., 429176., 250570., 262210., 505100., 528572.,
      552044., 575516., 834198., 869694., 561500., 585356., 848382., 884454.,
      570956., 595196., 862566., 899214., 580412., 605036., 629660., 654284.,
      179620., 187700., 361880., 378168., 394456., 410744., 595772., 620396.,
      400760., 417304., 605228., 630236., 407064., 423864., 614684., 640076.,
      413368., 430424., 447480., 464536., 272290., 284890., 548540., 573932.,
      599324., 624716., 905118., 943494., 608780., 634556., 919302., 958254.,
      618236., 644396., 933486., 973014., 627692., 654236., 680780., 707324.,
      194100., 202820., 390840., 408408., 425976., 443544., 643052., 669596.,
      432280., 450104., 652508., 679436., 438584., 456664., 661964., 689276.,
      444888., 463224., 481560., 499896., 281300., 290020., 566520., 584088.,
      601656., 619224., 908492., 935036., 610520., 628344., 921788., 948716.,
      619384., 637464., 935084., 962396., 628248., 646584., 664920., 683256.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1140.,   1412.,   1684.,   1956.,   1118.,   1286.,
      1454.,   1622.,   0.,      0.,      430.,    470.,    510.,    550.,
      1700.,   1844.,   1988.,   2132.,   4066.,   4378.,   3860.,   4132.,
      4404.,   4676.,   2798.,   2966.,   3134.,   3302.,   0.,      0.,
      980.,    1252.,   1524.,   1796.,   4408.,   5080.,   5752.,   6424.,
      10796.,  11996.,  9496.,   10424.,  11352.,  12280.,  6868.,   7396.,
      7924.,   8452.,   0.,      0.,      3700.,   3972.,   4244.,   4516.,
      11128.,  11800.,  12472.,  13144.,  22796.,  23996.,  18776.,  19704.,
      20632.,  21560.,  12148.,  12676.,  13204.,  13732.,  0.,      0.,
      6690.,   7386.,   8082.,   8778.,   20124.,  21708.,  23292.,  24876.,
      41070.,  43734.,  32748.,  34716.,  36684.,  38652.,  21090.,  22170.,
      23250.,  24330.,  0.,      0.,      11620.,  12276.,  12932.,  13588.,
      28504.,  29944.,  31384.,  32824.,  51164.,  53516.,  37688.,  39384.,
      41080.,  42776.,  22372.,  23284.,  24196.,  25108.,  0.,      0.,
      18180.,  18836.,  19492.,  20148.,  42904.,  44344.,  45784.,  47224.,
      74684.,  77036.,  54648.,  56344.,  58040.,  59736.,  31492.,  32404.,
      33316.,  34228.,  0.,      0.,      12990.,  13414.,  13838.,  14262.,
      29636.,  30548.,  31460.,  32372.,  50194.,  51658.,  35892.,  36932.,
      37972.,  39012.,  20222.,  20774.,  21326.,  21878.,  0.,      0.,
      17230.,  17654.,  18078.,  18502.,  38756.,  39668.,  40580.,  41492.,
      64834.,  66298.,  46292.,  47332.,  48372.,  49412.,  25742.,  26294.,
      26846.,  27398.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      390.,    1006.,   1622.,   2238.,   3284.,   4580.,   5876.,   7172.,
      8938.,   10978.,  6468.,   7892.,   9316.,   10740.,  4934.,   5678.,
      6422.,   7166.,   0.,      0.,      6550.,   7166.,   7782.,   8398.,
      16244.,  17540.,  18836.,  20132.,  29338.,  31378.,  20708.,  22132.,
      23556.,  24980.,  12374.,  13118.,  13862.,  14606.,  0.,      0.,
      13220.,  14644.,  16068.,  17492.,  33496.,  36472.,  39448.,  42424.,
      61340.,  65996.,  43192.,  46424.,  49656.,  52888.,  26020.,  27700.,
      29380.,  31060.,  0.,      0.,      27460.,  28884.,  30308.,  31732.,
      63256.,  66232.,  69208.,  72184.,  107900., 112556., 75512.,  78744.,
      81976.,  85208.,  42820.,  44500.,  46180.,  47860.,  0.,      0.,
      42330.,  44754.,  47178.,  49602.,  98316.,  103356., 108396., 113436.,
      168726., 176574., 117852., 123276., 128700., 134124., 67098.,  69906.,
      72714.,  75522.,  0.,      0.,      35380.,  37188.,  38996.,  40804.,
      80632.,  84376.,  88120.,  91864.,  136268., 142076., 94424.,  98424.,
      102424., 106424., 53044.,  55108.,  57172.,  59236.,  0.,      0.,
      53460.,  55268.,  57076.,  58884.,  118072., 121816., 125560., 129304.,
      194348., 200156., 134424., 138424., 142424., 146424., 73684.,  75748.,
      77812.,  79876.,  0.,      0.,      30630.,  31630.,  32630.,  33630.,
      67220.,  69284.,  71348.,  73412.,  110026., 113218., 75780.,  77972.,
      80164.,  82356.,  41318.,  42446.,  43574.,  44702.,  0.,      0.,
      40630.,  41630.,  42630.,  43630.,  87860.,  89924.,  91988.,  94052.,
      141946., 145138., 97700.,  99892.,  102084., 104276., 52598.,  53726.,
      54854.,  55982.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      750.,    1942.,   3134.,   4326.,   6308.,   8756.,   11204.,  13652.,
      16930.,  20698.,  11796.,  14372.,  16948.,  19524.,  8750.,   10070.,
      11390.,  12710.,  0.,      0.,      12670.,  13862.,  15054.,  16246.,
      30788.,  33236.,  35684.,  38132.,  54610.,  58378.,  37556.,  40132.,
      42708.,  45284.,  21950.,  23270.,  24590.,  25910.,  0.,      0.,
      25460.,  28036.,  30612.,  33188.,  62584.,  67864.,  73144.,  78424.,
      111884., 119996., 76888.,  82424.,  87960.,  93496.,  45172.,  48004.,
      50836.,  53668.,  0.,      0.,      51220.,  53796.,  56372.,  58948.,
      115384., 120664., 125944., 131224., 193004., 201116., 132248., 137784.,
      143320., 148856., 73492.,  76324.,  79156.,  81988.,  0.,      0.,
      77970.,  82122.,  86274.,  90426.,  176508., 185004., 193500., 201996.,
      296382., 309414., 202956., 211836., 220716., 229596., 113106., 117642.,
      122178., 126714., 0.,      0.,      59140.,  62100.,  65060.,  68020.,
      132760., 138808., 144856., 150904., 221372., 230636., 151160., 157464.,
      163768., 170072., 83716.,  86932.,  90148.,  93364.,  0.,      0.,
      88740.,  91700.,  94660.,  97620.,  193240., 199288., 205336., 211384.,
      314012., 323276., 214200., 220504., 226808., 233112., 115876., 119092.,
      122308., 125524., 0.,      0.,      48270.,  49846.,  51422.,  52998.,
      104804., 108020., 111236., 114452., 169858., 174778., 115668., 119012.,
      122356., 125700., 62414.,  64118.,  65822.,  67526.,  0.,      0.,
      64030.,  65606.,  67182.,  68758.,  136964., 140180., 143396., 146612.,
      219058., 223978., 149108., 152452., 155796., 159140., 79454.,  81158.,
      82862.,  84566.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    26.,    27.,    28.,    71.,    74.,    77.,    80.,    83.,
      86.,    89.,    92.,    158.,   164.,   170.,   176.,   141.,   146.,
      151.,   156.,   245.,   254.,   263.,   272.,   199.,   206.,   213.,
      220.,   332.,   344.,   356.,   368.,   257.,   266.,   275.,   284.,
      293.,   302.,   311.,   320.,   75.,    82.,    89.,    96.,    192.,
      208.,   224.,   240.,   256.,   272.,   288.,   304.,   451.,   478.,
      505.,   532.,   372.,   392.,   412.,   432.,   625.,   658.,   691.,
      724.,   488.,   512.,   536.,   560.,   799.,   838.,   877.,   916.,
      604.,   632.,   660.,   688.,   716.,   744.,   772.,   800.,   215.,
      222.,   229.,   236.,   512.,   528.,   544.,   560.,   576.,   592.,
      608.,   624.,   991.,   1018.,  1045.,  1072.,  772.,   792.,   812.,
      832.,   1285.,  1318.,  1351.,  1384.,  968.,   992.,   1016.,  1040.,
      1579.,  1618.,  1657.,  1696.,  1164.,  1192.,  1220.,  1248.,  1276.,
      1304.,  1332.,  1360.,  410.,   428.,   446.,   464.,   943.,   982.,
      1021.,  1060.,  1099.,  1138.,  1177.,  1216.,  1839.,  1902.,  1965.,
      2028.,  1393.,  1438.,  1483.,  1528.,  2280.,  2352.,  2424.,  2496.,
      1687.,  1738.,  1789.,  1840.,  2721.,  2802.,  2883.,  2964.,  1981.,
      2038.,  2095.,  2152.,  2209.,  2266.,  2323.,  2380.,  665.,   682.,
      699.,   716.,   1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,
      1664.,  2461.,  2518.,  2575.,  2632.,  1752.,  1792.,  1832.,  1872.,
      2755.,  2818.,  2881.,  2944.,  1948.,  1992.,  2036.,  2080.,  3049.,
      3118.,  3187.,  3256.,  2144.,  2192.,  2240.,  2288.,  2336.,  2384.,
      2432.,  2480.,  1085.,  1118.,  1151.,  1184.,  2293.,  2362.,  2431.,
      2500.,  2569.,  2638.,  2707.,  2776.,  4044.,  4152.,  4260.,  4368.,
      2863.,  2938.,  3013.,  3088.,  4485.,  4602.,  4719.,  4836.,  3157.,
      3238.,  3319.,  3400.,  4926.,  5052.,  5178.,  5304.,  3451.,  3538.,
      3625.,  3712.,  3799.,  3886.,  3973.,  4060.,  1115.,  1142.,  1169.,
      1196.,  2312.,  2368.,  2424.,  2480.,  2536.,  2592.,  2648.,  2704.,
      3931.,  4018.,  4105.,  4192.,  2732.,  2792.,  2852.,  2912.,  4225.,
      4318.,  4411.,  4504.,  2928.,  2992.,  3056.,  3120.,  4519.,  4618.,
      4717.,  4816.,  3124.,  3192.,  3260.,  3328.,  3396.,  3464.,  3532.,
      3600.,  1760.,  1808.,  1856.,  1904.,  3643.,  3742.,  3841.,  3940.,
      4039.,  4138.,  4237.,  4336.,  6249.,  6402.,  6555.,  6708.,  4333.,
      4438.,  4543.,  4648.,  6690.,  6852.,  7014.,  7176.,  4627.,  4738.,
      4849.,  4960.,  7131.,  7302.,  7473.,  7644.,  4921.,  5038.,  5155.,
      5272.,  5389.,  5506.,  5623.,  5740.,  1565.,  1602.,  1639.,  1676.,
      3212.,  3288.,  3364.,  3440.,  3516.,  3592.,  3668.,  3744.,  5401.,
      5518.,  5635.,  5752.,  3712.,  3792.,  3872.,  3952.,  5695.,  5818.,
      5941.,  6064.,  3908.,  3992.,  4076.,  4160.,  5989.,  6118.,  6247.,
      6376.,  4104.,  4192.,  4280.,  4368.,  4456.,  4544.,  4632.,  4720.,
      2305.,  2342.,  2379.,  2416.,  4732.,  4808.,  4884.,  4960.,  5036.,
      5112.,  5188.,  5264.,  7741.,  7858.,  7975.,  8092.,  5312.,  5392.,
      5472.,  5552.,  8155.,  8278.,  8401.,  8524.,  5588.,  5672.,  5756.,
      5840.,  8569.,  8698.,  8827.,  8956.,  5864.,  5952.,  6040.,  6128.,
      6216.,  6304.,  6392.,  6480.,  650.,   676.,   702.,   728.,   1321.,
      1374.,  1427.,  1480.,  1533.,  1586.,  1639.,  1692.,  2333.,  2414.,
      2495.,  2576.,  1591.,  1646.,  1701.,  1756.,  2420.,  2504.,  2588.,
      2672.,  1649.,  1706.,  1763.,  1820.,  2507.,  2594.,  2681.,  2768.,
      1707.,  1766.,  1825.,  1884.,  1943.,  2002.,  2061.,  2120.,  1325.,
      1382.,  1439.,  1496.,  2692.,  2808.,  2924.,  3040.,  3156.,  3272.,
      3388.,  3504.,  4801.,  4978.,  5155.,  5332.,  3272.,  3392.,  3512.,
      3632.,  4975.,  5158.,  5341.,  5524.,  3388.,  3512.,  3636.,  3760.,
      5149.,  5338.,  5527.,  5716.,  3504.,  3632.,  3760.,  3888.,  4016.,
      4144.,  4272.,  4400.,  2465.,  2522.,  2579.,  2636.,  5012.,  5128.,
      5244.,  5360.,  5476.,  5592.,  5708.,  5824.,  8341.,  8518.,  8695.,
      8872.,  5672.,  5792.,  5912.,  6032.,  8635.,  8818.,  9001.,  9184.,
      5868.,  5992.,  6116.,  6240.,  8929.,  9118.,  9307.,  9496.,  6064.,
      6192.,  6320.,  6448.,  6576.,  6704.,  6832.,  6960.,  3785.,  3878.,
      3971.,  4064.,  7693.,  7882.,  8071.,  8260.,  8449.,  8638.,  8827.,
      9016.,  12864., 13152., 13440., 13728., 8743.,  8938.,  9133.,  9328.,
      13305., 13602., 13899., 14196., 9037.,  9238.,  9439.,  9640.,  13746.,
      14052., 14358., 14664., 9331.,  9538.,  9745.,  9952.,  10159., 10366.,
      10573., 10780., 2915.,  2982.,  3049.,  3116.,  5912.,  6048.,  6184.,
      6320.,  6456.,  6592.,  6728.,  6864.,  9811.,  10018., 10225., 10432.,
      6652.,  6792.,  6932.,  7072.,  10105., 10318., 10531., 10744., 6848.,
      6992.,  7136.,  7280.,  10399., 10618., 10837., 11056., 7044.,  7192.,
      7340.,  7488.,  7636.,  7784.,  7932.,  8080.,  4460.,  4568.,  4676.,
      4784.,  9043.,  9262.,  9481.,  9700.,  9919.,  10138., 10357., 10576.,
      15069., 15402., 15735., 16068., 10213., 10438., 10663., 10888., 15510.,
      15852., 16194., 16536., 10507., 10738., 10969., 11200., 15951., 16302.,
      16653., 17004., 10801., 11038., 11275., 11512., 11749., 11986., 12223.,
      12460., 3365.,  3442.,  3519.,  3596.,  6812.,  6968.,  7124.,  7280.,
      7436.,  7592.,  7748.,  7904.,  11281., 11518., 11755., 11992., 7632.,
      7792.,  7952.,  8112.,  11575., 11818., 12061., 12304., 7828.,  7992.,
      8156.,  8320.,  11869., 12118., 12367., 12616., 8024.,  8192.,  8360.,
      8528.,  8696.,  8864.,  9032.,  9200.,  5135.,  5258.,  5381.,  5504.,
      10393., 10642., 10891., 11140., 11389., 11638., 11887., 12136., 17274.,
      17652., 18030., 18408., 11683., 11938., 12193., 12448., 17715., 18102.,
      18489., 18876., 11977., 12238., 12499., 12760., 18156., 18552., 18948.,
      19344., 12271., 12538., 12805., 13072., 13339., 13606., 13873., 14140.,
      3815.,  3902.,  3989.,  4076.,  7712.,  7888.,  8064.,  8240.,  8416.,
      8592.,  8768.,  8944.,  12751., 13018., 13285., 13552., 8612.,  8792.,
      8972.,  9152.,  13045., 13318., 13591., 13864., 8808.,  8992.,  9176.,
      9360.,  13339., 13618., 13897., 14176., 9004.,  9192.,  9380.,  9568.,
      9756.,  9944.,  10132., 10320., 5555.,  5642.,  5729.,  5816.,  11232.,
      11408., 11584., 11760., 11936., 12112., 12288., 12464., 18091., 18358.,
      18625., 18892., 12212., 12392., 12572., 12752., 18505., 18778., 19051.,
      19324., 12488., 12672., 12856., 13040., 18919., 19198., 19477., 19756.,
      12764., 12952., 13140., 13328., 13516., 13704., 13892., 14080., 1275.,
      1326.,  1377.,  1428.,  2571.,  2674.,  2777.,  2880.,  2983.,  3086.,
      3189.,  3292.,  4508.,  4664.,  4820.,  4976.,  3041.,  3146.,  3251.,
      3356.,  4595.,  4754.,  4913.,  5072.,  3099.,  3206.,  3313.,  3420.,
      4682.,  4844.,  5006.,  5168.,  3157.,  3266.,  3375.,  3484.,  3593.,
      3702.,  3811.,  3920.,  2575.,  2682.,  2789.,  2896.,  5192.,  5408.,
      5624.,  5840.,  6056.,  6272.,  6488.,  6704.,  9151.,  9478.,  9805.,
      10132., 6172.,  6392.,  6612.,  6832.,  9325.,  9658.,  9991.,  10324.,
      6288.,  6512.,  6736.,  6960.,  9499.,  9838.,  10177., 10516., 6404.,
      6632.,  6860.,  7088.,  7316.,  7544.,  7772.,  8000.,  4715.,  4822.,
      4929.,  5036.,  9512.,  9728.,  9944.,  10160., 10376., 10592., 10808.,
      11024., 15691., 16018., 16345., 16672., 10572., 10792., 11012., 11232.,
      15985., 16318., 16651., 16984., 10768., 10992., 11216., 11440., 16279.,
      16618., 16957., 17296., 10964., 11192., 11420., 11648., 11876., 12104.,
      12332., 12560., 7160.,  7328.,  7496.,  7664.,  14443., 14782., 15121.,
      15460., 15799., 16138., 16477., 16816., 23889., 24402., 24915., 25428.,
      16093., 16438., 16783., 17128., 24330., 24852., 25374., 25896., 16387.,
      16738., 17089., 17440., 24771., 25302., 25833., 26364., 16681., 17038.,
      17395., 17752., 18109., 18466., 18823., 19180., 5165.,  5282.,  5399.,
      5516.,  10412., 10648., 10884., 11120., 11356., 11592., 11828., 12064.,
      17161., 17518., 17875., 18232., 11552., 11792., 12032., 12272., 17455.,
      17818., 18181., 18544., 11748., 11992., 12236., 12480., 17749., 18118.,
      18487., 18856., 11944., 12192., 12440., 12688., 12936., 13184., 13432.,
      13680., 7835.,  8018.,  8201.,  8384.,  15793., 16162., 16531., 16900.,
      17269., 17638., 18007., 18376., 26094., 26652., 27210., 27768., 17563.,
      17938., 18313., 18688., 26535., 27102., 27669., 28236., 17857., 18238.,
      18619., 19000., 26976., 27552., 28128., 28704., 18151., 18538., 18925.,
      19312., 19699., 20086., 20473., 20860., 5615.,  5742.,  5869.,  5996.,
      11312., 11568., 11824., 12080., 12336., 12592., 12848., 13104., 18631.,
      19018., 19405., 19792., 12532., 12792., 13052., 13312., 18925., 19318.,
      19711., 20104., 12728., 12992., 13256., 13520., 19219., 19618., 20017.,
      20416., 12924., 13192., 13460., 13728., 13996., 14264., 14532., 14800.,
      8510.,  8708.,  8906.,  9104.,  17143., 17542., 17941., 18340., 18739.,
      19138., 19537., 19936., 28299., 28902., 29505., 30108., 19033., 19438.,
      19843., 20248., 28740., 29352., 29964., 30576., 19327., 19738., 20149.,
      20560., 29181., 29802., 30423., 31044., 19621., 20038., 20455., 20872.,
      21289., 21706., 22123., 22540., 6065.,  6202.,  6339.,  6476.,  12212.,
      12488., 12764., 13040., 13316., 13592., 13868., 14144., 20101., 20518.,
      20935., 21352., 13512., 13792., 14072., 14352., 20395., 20818., 21241.,
      21664., 13708., 13992., 14276., 14560., 20689., 21118., 21547., 21976.,
      13904., 14192., 14480., 14768., 15056., 15344., 15632., 15920., 8805.,
      8942.,  9079.,  9216.,  17732., 18008., 18284., 18560., 18836., 19112.,
      19388., 19664., 28441., 28858., 29275., 29692., 19112., 19392., 19672.,
      19952., 28855., 29278., 29701., 30124., 19388., 19672., 19956., 20240.,
      29269., 29698., 30127., 30556., 19664., 19952., 20240., 20528., 20816.,
      21104., 21392., 21680.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    5.,    6.,    7.,    8.,     11.,    14.,
      17.,   20.,   23.,   26.,   29.,   32.,   38.,   44.,    50.,    56.,
      41.,   46.,   51.,   56.,   61.,   66.,   71.,   76.,    39.,    42.,
      45.,   48.,   51.,   54.,   57.,   60.,   0.,    0.,     0.,     0.,
      21.,   22.,   23.,   24.,   25.,   26.,   27.,   28.,    71.,    74.,
      77.,   80.,   83.,   86.,   89.,   92.,   158.,  164.,   170.,   176.,
      141.,  146.,  151.,  156.,  161.,  166.,  171.,  176.,   99.,    102.,
      105.,  108.,  111.,  114.,  117.,  120.,  0.,    0.,     0.,     0.,
      45.,   50.,   55.,   60.,   65.,   70.,   75.,   80.,    172.,   184.,
      196.,  208.,  220.,  232.,  244.,  256.,  397.,  418.,   439.,   460.,
      336.,  352.,  368.,  384.,  400.,  416.,  432.,  448.,   237.,   246.,
      255.,  264.,  273.,  282.,  291.,  300.,  0.,    0.,     0.,     0.,
      145.,  150.,  155.,  160.,  165.,  170.,  175.,  180.,   412.,   424.,
      436.,  448.,  460.,  472.,  484.,  496.,  817.,  838.,   859.,   880.,
      656.,  672.,  688.,  704.,  720.,  736.,  752.,  768.,   417.,   426.,
      435.,  444.,  453.,  462.,  471.,  480.,  0.,    0.,     0.,     0.,
      252.,  264.,  276.,  288.,  300.,  312.,  324.,  336.,   723.,   750.,
      777.,  804.,  831.,  858.,  885.,  912.,  1437., 1482.,  1527.,  1572.,
      1125., 1158., 1191., 1224., 1257., 1290., 1323., 1356.,  714.,   732.,
      750.,  768.,  786.,  804.,  822.,  840.,  0.,    0.,     0.,     0.,
      391.,  402.,  413.,  424.,  435.,  446.,  457.,  468.,   952.,   976.,
      1000., 1024., 1048., 1072., 1096., 1120., 1699., 1738.,  1777.,  1816.,
      1244., 1272., 1300., 1328., 1356., 1384., 1412., 1440.,  735.,   750.,
      765.,  780.,  795.,  810.,  825.,  840.,  0.,    0.,     0.,     0.,
      611.,  622.,  633.,  644.,  655.,  666.,  677.,  688.,   1432.,  1456.,
      1480., 1504., 1528., 1552., 1576., 1600., 2479., 2518.,  2557.,  2596.,
      1804., 1832., 1860., 1888., 1916., 1944., 1972., 2000.,  1035.,  1050.,
      1065., 1080., 1095., 1110., 1125., 1140., 0.,    0.,     0.,     0.,
      427.,  434.,  441.,  448.,  455.,  462.,  469.,  476.,   971.,   986.,
      1001., 1016., 1031., 1046., 1061., 1076., 1640., 1664.,  1688.,  1712.,
      1169., 1186., 1203., 1220., 1237., 1254., 1271., 1288.,  657.,   666.,
      675.,  684.,  693.,  702.,  711.,  720.,  0.,    0.,     0.,     0.,
      567.,  574.,  581.,  588.,  595.,  602.,  609.,  616.,   1271.,  1286.,
      1301., 1316., 1331., 1346., 1361., 1376., 2120., 2144.,  2168.,  2192.,
      1509., 1526., 1543., 1560., 1577., 1594., 1611., 1628.,  837.,   846.,
      855.,  864.,  873.,  882.,  891.,  900.,  0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      10.,   20.,   30.,   40.,   50.,   60.,   70.,   80.,    101.,   122.,
      143.,  164.,  185.,  206.,  227.,  248.,  281.,  314.,   347.,   380.,
      203.,  226.,  249.,  272.,  295.,  318.,  341.,  364.,   156.,   168.,
      180.,  192.,  204.,  216.,  228.,  240.,  0.,    0.,     0.,     0.,
      210.,  220.,  230.,  240.,  250.,  260.,  270.,  280.,   521.,   542.,
      563.,  584.,  605.,  626.,  647.,  668.,  941.,  974.,   1007.,  1040.,
      663.,  686.,  709.,  732.,  755.,  778.,  801.,  824.,   396.,   408.,
      420.,  432.,  444.,  456.,  468.,  480.,  0.,    0.,     0.,     0.,
      423.,  446.,  469.,  492.,  515.,  538.,  561.,  584.,   1072.,  1120.,
      1168., 1216., 1264., 1312., 1360., 1408., 1963., 2038.,  2113.,  2188.,
      1380., 1432., 1484., 1536., 1588., 1640., 1692., 1744.,  831.,   858.,
      885.,  912.,  939.,  966.,  993.,  1020., 0.,    0.,     0.,     0.,
      883.,  906.,  929.,  952.,  975.,  998.,  1021., 1044.,  2032.,  2080.,
      2128., 2176., 2224., 2272., 2320., 2368., 3463., 3538.,  3613.,  3688.,
      2420., 2472., 2524., 2576., 2628., 2680., 2732., 2784.,  1371.,  1398.,
      1425., 1452., 1479., 1506., 1533., 1560., 0.,    0.,     0.,     0.,
      1359., 1398., 1437., 1476., 1515., 1554., 1593., 1632.,  3153.,  3234.,
      3315., 3396., 3477., 3558., 3639., 3720., 5406., 5532.,  5658.,  5784.,
      3771., 3858., 3945., 4032., 4119., 4206., 4293., 4380.,  2145.,  2190.,
      2235., 2280., 2325., 2370., 2415., 2460., 0.,    0.,     0.,     0.,
      1129., 1158., 1187., 1216., 1245., 1274., 1303., 1332.,  2572.,  2632.,
      2692., 2752., 2812., 2872., 2932., 2992., 4345., 4438.,  4531.,  4624.,
      3008., 3072., 3136., 3200., 3264., 3328., 3392., 3456.,  1689.,  1722.,
      1755., 1788., 1821., 1854., 1887., 1920., 0.,    0.,     0.,     0.,
      1709., 1738., 1767., 1796., 1825., 1854., 1883., 1912.,  3772.,  3832.,
      3892., 3952., 4012., 4072., 4132., 4192., 6205., 6298.,  6391.,  6484.,
      4288., 4352., 4416., 4480., 4544., 4608., 4672., 4736.,  2349.,  2382.,
      2415., 2448., 2481., 2514., 2547., 2580., 0.,    0.,     0.,     0.,
      976.,  992.,  1008., 1024., 1040., 1056., 1072., 1088.,  2141.,  2174.,
      2207., 2240., 2273., 2306., 2339., 2372., 3503., 3554.,  3605.,  3656.,
      2411., 2446., 2481., 2516., 2551., 2586., 2621., 2656.,  1314.,  1332.,
      1350., 1368., 1386., 1404., 1422., 1440., 0.,    0.,     0.,     0.,
      1296., 1312., 1328., 1344., 1360., 1376., 1392., 1408.,  2801.,  2834.,
      2867., 2900., 2933., 2966., 2999., 3032., 4523., 4574.,  4625.,  4676.,
      3111., 3146., 3181., 3216., 3251., 3286., 3321., 3356.,  1674.,  1692.,
      1710., 1728., 1746., 1764., 1782., 1800., 0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      19.,   38.,   57.,   76.,   95.,   114.,  133.,  152.,   191.,   230.,
      269.,  308.,  347.,  386.,  425.,  464.,  524.,  584.,   644.,   704.,
      365.,  406.,  447.,  488.,  529.,  570.,  611.,  652.,   273.,   294.,
      315.,  336.,  357.,  378.,  399.,  420.,  0.,    0.,     0.,     0.,
      399.,  418.,  437.,  456.,  475.,  494.,  513.,  532.,   971.,   1010.,
      1049., 1088., 1127., 1166., 1205., 1244., 1724., 1784.,  1844.,  1904.,
      1185., 1226., 1267., 1308., 1349., 1390., 1431., 1472.,  693.,   714.,
      735.,  756.,  777.,  798.,  819.,  840.,  0.,    0.,     0.,     0.,
      801.,  842.,  883.,  924.,  965.,  1006., 1047., 1088.,  1972.,  2056.,
      2140., 2224., 2308., 2392., 2476., 2560., 3529., 3658.,  3787.,  3916.,
      2424., 2512., 2600., 2688., 2776., 2864., 2952., 3040.,  1425.,  1470.,
      1515., 1560., 1605., 1650., 1695., 1740., 0.,    0.,     0.,     0.,
      1621., 1662., 1703., 1744., 1785., 1826., 1867., 1908.,  3652.,  3736.,
      3820., 3904., 3988., 4072., 4156., 4240., 6109., 6238.,  6367.,  6496.,
      4184., 4272., 4360., 4448., 4536., 4624., 4712., 4800.,  2325.,  2370.,
      2415., 2460., 2505., 2550., 2595., 2640., 0.,    0.,     0.,     0.,
      2466., 2532., 2598., 2664., 2730., 2796., 2862., 2928.,  5583.,  5718.,
      5853., 5988., 6123., 6258., 6393., 6528., 9375., 9582.,  9789.,  9996.,
      6417., 6558., 6699., 6840., 6981., 7122., 7263., 7404.,  3576.,  3648.,
      3720., 3792., 3864., 3936., 4008., 4080., 0.,    0.,     0.,     0.,
      1867., 1914., 1961., 2008., 2055., 2102., 2149., 2196.,  4192.,  4288.,
      4384., 4480., 4576., 4672., 4768., 4864., 6991., 7138.,  7285.,  7432.,
      4772., 4872., 4972., 5072., 5172., 5272., 5372., 5472.,  2643.,  2694.,
      2745., 2796., 2847., 2898., 2949., 3000., 0.,    0.,     0.,     0.,
      2807., 2854., 2901., 2948., 2995., 3042., 3089., 3136.,  6112.,  6208.,
      6304., 6400., 6496., 6592., 6688., 6784., 9931., 10078., 10225., 10372.,
      6772., 6872., 6972., 7072., 7172., 7272., 7372., 7472.,  3663.,  3714.,
      3765., 3816., 3867., 3918., 3969., 4020., 0.,    0.,     0.,     0.,
      1525., 1550., 1575., 1600., 1625., 1650., 1675., 1700.,  3311.,  3362.,
      3413., 3464., 3515., 3566., 3617., 3668., 5366., 5444.,  5522.,  5600.,
      3653., 3706., 3759., 3812., 3865., 3918., 3971., 4024.,  1971.,  1998.,
      2025., 2052., 2079., 2106., 2133., 2160., 0.,    0.,     0.,     0.,
      2025., 2050., 2075., 2100., 2125., 2150., 2175., 2200.,  4331.,  4382.,
      4433., 4484., 4535., 4586., 4637., 4688., 6926., 7004.,  7082.,  7160.,
      4713., 4766., 4819., 4872., 4925., 4978., 5031., 5084.,  2511.,  2538.,
      2565., 2592., 2619., 2646., 2673., 2700., 0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    155.,    161.,    167.,    464.,    484.,    504.,    524.,
      544.,    564.,    584.,    604.,    1081.,   1123.,   1165.,   1207.,
      1004.,   1040.,   1076.,   1112.,   1771.,   1837.,   1903.,   1969.,
      1464.,   1516.,   1568.,   1620.,   2461.,   2551.,   2641.,   2731.,
      1924.,   1992.,   2060.,   2128.,   2196.,   2264.,   2332.,   2400.,
      488.,    540.,    592.,    644.,    1308.,   1428.,   1548.,   1668.,
      1788.,   1908.,   2028.,   2148.,   3212.,   3416.,   3620.,   3824.,
      2708.,   2860.,   3012.,   3164.,   4592.,   4844.,   5096.,   5348.,
      3628.,   3812.,   3996.,   4180.,   5972.,   6272.,   6572.,   6872.,
      4548.,   4764.,   4980.,   5196.,   5412.,   5628.,   5844.,   6060.,
      1528.,   1580.,   1632.,   1684.,   3708.,   3828.,   3948.,   4068.,
      4188.,   4308.,   4428.,   4548.,   7292.,   7496.,   7700.,   7904.,
      5748.,   5900.,   6052.,   6204.,   9632.,   9884.,   10136.,  10388.,
      7308.,   7492.,   7676.,   7860.,   11972.,  12272.,  12572.,  12872.,
      8868.,   9084.,   9300.,   9516.,   9732.,   9948.,   10164.,  10380.,
      2977.,   3115.,   3253.,   3391.,   6932.,   7232.,   7532.,   7832.,
      8132.,   8432.,   8732.,   9032.,   13713.,  14199.,  14685.,  15171.,
      10472.,  10820.,  11168.,  11516.,  17223.,  17781.,  18339.,  18897.,
      12812.,  13208.,  13604.,  14000.,  20733.,  21363.,  21993.,  22623.,
      15152.,  15596.,  16040.,  16484.,  16928.,  17372.,  17816.,  18260.,
      5108.,   5240.,   5372.,   5504.,   10868.,  11148.,  11428.,  11708.,
      11988.,  12268.,  12548.,  12828.,  18992.,  19436.,  19880.,  20324.,
      13548.,  13860.,  14172.,  14484.,  21332.,  21824.,  22316.,  22808.,
      15108.,  15452.,  15796.,  16140.,  23672.,  24212.,  24752.,  25292.,
      16668.,  17044.,  17420.,  17796.,  18172.,  18548.,  18924.,  19300.,
      8347.,   8605.,   8863.,   9121.,   17672.,  18212.,  18752.,  19292.,
      19832.,  20372.,  20912.,  21452.,  31263.,  32109.,  32955.,  33801.,
      22172.,  22760.,  23348.,  23936.,  34773.,  35691.,  36609.,  37527.,
      24512.,  25148.,  25784.,  26420.,  38283.,  39273.,  40263.,  41253.,
      26852.,  27536.,  28220.,  28904.,  29588.,  30272.,  30956.,  31640.,
      8688.,   8900.,   9112.,   9324.,   18028.,  18468.,  18908.,  19348.,
      19788.,  20228.,  20668.,  21108.,  30692.,  31376.,  32060.,  32744.,
      21348.,  21820.,  22292.,  22764.,  33032.,  33764.,  34496.,  35228.,
      22908.,  23412.,  23916.,  24420.,  35372.,  36152.,  36932.,  37712.,
      24468.,  25004.,  25540.,  26076.,  26612.,  27148.,  27684.,  28220.,
      13717.,  14095.,  14473.,  14851.,  28412.,  29192.,  29972.,  30752.,
      31532.,  32312.,  33092.,  33872.,  48813.,  50019.,  51225.,  52431.,
      33872.,  34700.,  35528.,  36356.,  52323.,  53601.,  54879.,  56157.,
      36212.,  37088.,  37964.,  38840.,  55833.,  57183.,  58533.,  59883.,
      38552.,  39476.,  40400.,  41324.,  42248.,  43172.,  44096.,  45020.,
      12268.,  12560.,  12852.,  13144.,  25188.,  25788.,  26388.,  26988.,
      27588.,  28188.,  28788.,  29388.,  42392.,  43316.,  44240.,  45164.,
      29148.,  29780.,  30412.,  31044.,  44732.,  45704.,  46676.,  47648.,
      30708.,  31372.,  32036.,  32700.,  47072.,  48092.,  49112.,  50132.,
      32268.,  32964.,  33660.,  34356.,  35052.,  35748.,  36444.,  37140.,
      18108.,  18400.,  18692.,  18984.,  37188.,  37788.,  38388.,  38988.,
      39588.,  40188.,  40788.,  41388.,  60872.,  61796.,  62720.,  63644.,
      41788.,  42420.,  43052.,  43684.,  64172.,  65144.,  66116.,  67088.,
      43988.,  44652.,  45316.,  45980.,  67472.,  68492.,  69512.,  70532.,
      46188.,  46884.,  47580.,  48276.,  48972.,  49668.,  50364.,  51060.,
      5099.,   5305.,   5511.,   5717.,   10364.,  10784.,  11204.,  11624.,
      12044.,  12464.,  12884.,  13304.,  18331.,  18973.,  19615.,  20257.,
      12504.,  12940.,  13376.,  13812.,  19021.,  19687.,  20353.,  21019.,
      12964.,  13416.,  13868.,  14320.,  19711.,  20401.,  21091.,  21781.,
      13424.,  13892.,  14360.,  14828.,  15296.,  15764.,  16232.,  16700.,
      10388.,  10840.,  11292.,  11744.,  21108.,  22028.,  22948.,  23868.,
      24788.,  25708.,  26628.,  27548.,  37712.,  39116.,  40520.,  41924.,
      25708.,  26660.,  27612.,  28564.,  39092.,  40544.,  41996.,  43448.,
      26628.,  27612.,  28596.,  29580.,  40472.,  41972.,  43472.,  44972.,
      27548.,  28564.,  29580.,  30596.,  31612.,  32628.,  33644.,  34660.,
      19428.,  19880.,  20332.,  20784.,  39508.,  40428.,  41348.,  42268.,
      43188.,  44108.,  45028.,  45948.,  65792.,  67196.,  68600.,  70004.,
      44748.,  45700.,  46652.,  47604.,  68132.,  69584.,  71036.,  72488.,
      46308.,  47292.,  48276.,  49260.,  70472.,  71972.,  73472.,  74972.,
      47868.,  48884.,  49900.,  50916.,  51932.,  52948.,  53964.,  54980.,
      29827.,  30565.,  31303.,  32041.,  60632.,  62132.,  63632.,  65132.,
      66632.,  68132.,  69632.,  71132.,  101463., 103749., 106035., 108321.,
      68972.,  70520.,  72068.,  73616.,  104973., 107331., 109689., 112047.,
      71312.,  72908.,  74504.,  76100.,  108483., 110913., 113343., 115773.,
      73652.,  75296.,  76940.,  78584.,  80228.,  81872.,  83516.,  85160.,
      23008.,  23540.,  24072.,  24604.,  46668.,  47748.,  48828.,  49908.,
      50988.,  52068.,  53148.,  54228.,  77492.,  79136.,  80780.,  82424.,
      52548.,  53660.,  54772.,  55884.,  79832.,  81524.,  83216.,  84908.,
      54108.,  55252.,  56396.,  57540.,  82172.,  83912.,  85652.,  87392.,
      55668.,  56844.,  58020.,  59196.,  60372.,  61548.,  62724.,  63900.,
      35197.,  36055.,  36913.,  37771.,  71372.,  73112.,  74852.,  76592.,
      78332.,  80072.,  81812.,  83552.,  119013., 121659., 124305., 126951.,
      80672.,  82460.,  84248.,  86036.,  122523., 125241., 127959., 130677.,
      83012.,  84848.,  86684.,  88520.,  126033., 128823., 131613., 134403.,
      85352.,  87236.,  89120.,  91004.,  92888.,  94772.,  96656.,  98540.,
      26588.,  27200.,  27812.,  28424.,  53828.,  55068.,  56308.,  57548.,
      58788.,  60028.,  61268.,  62508.,  89192.,  91076.,  92960.,  94844.,
      60348.,  61620.,  62892.,  64164.,  91532.,  93464.,  95396.,  97328.,
      61908.,  63212.,  64516.,  65820.,  93872.,  95852.,  97832.,  99812.,
      63468.,  64804.,  66140.,  67476.,  68812.,  70148.,  71484.,  72820.,
      40567.,  41545.,  42523.,  43501.,  82112.,  84092.,  86072.,  88052.,
      90032.,  92012.,  93992.,  95972.,  136563., 139569., 142575., 145581.,
      92372.,  94400.,  96428.,  98456.,  140073., 143151., 146229., 149307.,
      94712.,  96788.,  98864.,  100940., 143583., 146733., 149883., 153033.,
      97052.,  99176.,  101300., 103424., 105548., 107672., 109796., 111920.,
      30168.,  30860.,  31552.,  32244.,  60988.,  62388.,  63788.,  65188.,
      66588.,  67988.,  69388.,  70788.,  100892., 103016., 105140., 107264.,
      68148.,  69580.,  71012.,  72444.,  103232., 105404., 107576., 109748.,
      69708.,  71172.,  72636.,  74100.,  105572., 107792., 110012., 112232.,
      71268.,  72764.,  74260.,  75756.,  77252.,  78748.,  80244.,  81740.,
      44008.,  44700.,  45392.,  46084.,  88988.,  90388.,  91788.,  93188.,
      94588.,  95988.,  97388.,  98788.,  143372., 145496., 147620., 149744.,
      96788.,  98220.,  99652.,  101084., 146672., 148844., 151016., 153188.,
      98988.,  100452., 101916., 103380., 149972., 152192., 154412., 156632.,
      101188., 102684., 104180., 105676., 107172., 108668., 110164., 111660.,
      10049.,  10455.,  10861.,  11267.,  20264.,  21084.,  21904.,  22724.,
      23544.,  24364.,  25184.,  26004.,  35581.,  36823.,  38065.,  39307.,
      24004.,  24840.,  25676.,  26512.,  36271.,  37537.,  38803.,  40069.,
      24464.,  25316.,  26168.,  27020.,  36961.,  38251.,  39541.,  40831.,
      24924.,  25792.,  26660.,  27528.,  28396.,  29264.,  30132.,  31000.,
      20288.,  21140.,  21992.,  22844.,  40908.,  42628.,  44348.,  46068.,
      47788.,  49508.,  51228.,  52948.,  72212.,  74816.,  77420.,  80024.,
      48708.,  50460.,  52212.,  53964.,  73592.,  76244.,  78896.,  81548.,
      49628.,  51412.,  53196.,  54980.,  74972.,  77672.,  80372.,  83072.,
      50548.,  52364.,  54180.,  55996.,  57812.,  59628.,  61444.,  63260.,
      37328.,  38180.,  39032.,  39884.,  75308.,  77028.,  78748.,  80468.,
      82188.,  83908.,  85628.,  87348.,  124292., 126896., 129500., 132104.,
      83748.,  85500.,  87252.,  89004.,  126632., 129284., 131936., 134588.,
      85308.,  87092.,  88876.,  90660.,  128972., 131672., 134372., 137072.,
      86868.,  88684.,  90500.,  92316.,  94132.,  95948.,  97764.,  99580.,
      56677.,  58015.,  59353.,  60691.,  114332., 117032., 119732., 122432.,
      125132., 127832., 130532., 133232., 189213., 193299., 197385., 201471.,
      127472., 130220., 132968., 135716., 192723., 196881., 201039., 205197.,
      129812., 132608., 135404., 138200., 196233., 200463., 204693., 208923.,
      132152., 134996., 137840., 140684., 143528., 146372., 149216., 152060.,
      40908.,  41840.,  42772.,  43704.,  82468.,  84348.,  86228.,  88108.,
      89988.,  91868.,  93748.,  95628.,  135992., 138836., 141680., 144524.,
      91548.,  93460.,  95372.,  97284.,  138332., 141224., 144116., 147008.,
      93108.,  95052.,  96996.,  98940.,  140672., 143612., 146552., 149492.,
      94668.,  96644.,  98620.,  100596., 102572., 104548., 106524., 108500.,
      62047.,  63505.,  64963.,  66421.,  125072., 128012., 130952., 133892.,
      136832., 139772., 142712., 145652., 206763., 211209., 215655., 220101.,
      139172., 142160., 145148., 148136., 210273., 214791., 219309., 223827.,
      141512., 144548., 147584., 150620., 213783., 218373., 222963., 227553.,
      143852., 146936., 150020., 153104., 156188., 159272., 162356., 165440.,
      44488.,  45500.,  46512.,  47524.,  89628.,  91668.,  93708.,  95748.,
      97788.,  99828.,  101868., 103908., 147692., 150776., 153860., 156944.,
      99348.,  101420., 103492., 105564., 150032., 153164., 156296., 159428.,
      100908., 103012., 105116., 107220., 152372., 155552., 158732., 161912.,
      102468., 104604., 106740., 108876., 111012., 113148., 115284., 117420.,
      67417.,  68995.,  70573.,  72151.,  135812., 138992., 142172., 145352.,
      148532., 151712., 154892., 158072., 224313., 229119., 233925., 238731.,
      150872., 154100., 157328., 160556., 227823., 232701., 237579., 242457.,
      153212., 156488., 159764., 163040., 231333., 236283., 241233., 246183.,
      155552., 158876., 162200., 165524., 168848., 172172., 175496., 178820.,
      48068.,  49160.,  50252.,  51344.,  96788.,  98988.,  101188., 103388.,
      105588., 107788., 109988., 112188., 159392., 162716., 166040., 169364.,
      107148., 109380., 111612., 113844., 161732., 165104., 168476., 171848.,
      108708., 110972., 113236., 115500., 164072., 167492., 170912., 174332.,
      110268., 112564., 114860., 117156., 119452., 121748., 124044., 126340.,
      69908.,  71000.,  72092.,  73184.,  140788., 142988., 145188., 147388.,
      149588., 151788., 153988., 156188., 225872., 229196., 232520., 235844.,
      151788., 154020., 156252., 158484., 229172., 232544., 235916., 239288.,
      153988., 156252., 158516., 160780., 232472., 235892., 239312., 242732.,
      156188., 158484., 160780., 163076., 165372., 167668., 169964., 172260.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    29.,    35.,    41.,    47.,    64.,
      84.,    104.,   124.,   144.,   164.,   184.,   204.,   241.,   283.,
      325.,   367.,   284.,   320.,   356.,   392.,   428.,   464.,   500.,
      536.,   281.,   303.,   325.,   347.,   369.,   391.,   413.,   435.,
      0.,     0.,     0.,     0.,     125.,   131.,   137.,   143.,   149.,
      155.,   161.,   167.,   464.,   484.,   504.,   524.,   544.,   564.,
      584.,   604.,   1081.,  1123.,  1165.,  1207.,  1004.,  1040.,  1076.,
      1112.,  1148.,  1184.,  1220.,  1256.,  721.,   743.,   765.,   787.,
      809.,   831.,   853.,   875.,   0.,     0.,     0.,     0.,     268.,
      304.,   340.,   376.,   412.,   448.,   484.,   520.,   1156.,  1244.,
      1332.,  1420.,  1508.,  1596.,  1684.,  1772.,  2792.,  2948.,  3104.,
      3260.,  2428.,  2548.,  2668.,  2788.,  2908.,  3028.,  3148.,  3268.,
      1748.,  1816.,  1884.,  1952.,  2020.,  2088.,  2156.,  2224.,  0.,
      0.,     0.,     0.,     988.,   1024.,  1060.,  1096.,  1132.,  1168.,
      1204.,  1240.,  2916.,  3004.,  3092.,  3180.,  3268.,  3356.,  3444.,
      3532.,  5912.,  6068.,  6224.,  6380.,  4828.,  4948.,  5068.,  5188.,
      5308.,  5428.,  5548.,  5668.,  3108.,  3176.,  3244.,  3312.,  3380.,
      3448.,  3516.,  3584.,  0.,     0.,     0.,     0.,     1749.,  1839.,
      1929.,  2019.,  2109.,  2199.,  2289.,  2379.,  5196.,  5400.,  5604.,
      5808.,  6012.,  6216.,  6420.,  6624.,  10533., 10875., 11217., 11559.,
      8352.,  8604.,  8856.,  9108.,  9360.,  9612.,  9864.,  10116., 5361.,
      5499.,  5637.,  5775.,  5913.,  6051.,  6189.,  6327.,  0.,     0.,
      0.,     0.,     2944.,  3028.,  3112.,  3196.,  3280.,  3364.,  3448.,
      3532.,  7212.,  7396.,  7580.,  7764.,  7948.,  8132.,  8316.,  8500.,
      12932., 13232., 13532., 13832., 9508.,  9724.,  9940.,  10156., 10372.,
      10588., 10804., 11020., 5640.,  5756.,  5872.,  5988.,  6104.,  6220.,
      6336.,  6452.,  0.,     0.,     0.,     0.,     4624.,  4708.,  4792.,
      4876.,  4960.,  5044.,  5128.,  5212.,  10892., 11076., 11260., 11444.,
      11628., 11812., 11996., 12180., 18932., 19232., 19532., 19832., 13828.,
      14044., 14260., 14476., 14692., 14908., 15124., 15340., 7960.,  8076.,
      8192.,  8308.,  8424.,  8540.,  8656.,  8772.,  0.,     0.,     0.,
      0.,     3281.,  3335.,  3389.,  3443.,  3497.,  3551.,  3605.,  3659.,
      7480.,  7596.,  7712.,  7828.,  7944.,  8060.,  8176.,  8292.,  12661.,
      12847., 13033., 13219., 9044.,  9176.,  9308.,  9440.,  9572.,  9704.,
      9836.,  9968.,  5093.,  5163.,  5233.,  5303.,  5373.,  5443.,  5513.,
      5583.,  0.,     0.,     0.,     0.,     4361.,  4415.,  4469.,  4523.,
      4577.,  4631.,  4685.,  4739.,  9800.,  9916.,  10032., 10148., 10264.,
      10380., 10496., 10612., 16381., 16567., 16753., 16939., 11684., 11816.,
      11948., 12080., 12212., 12344., 12476., 12608., 6493.,  6563.,  6633.,
      6703.,  6773.,  6843.,  6913.,  6983.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     59.,    137.,   215.,   293.,   371.,
      449.,   527.,   605.,   748.,   912.,   1076.,  1240.,  1404.,  1568.,
      1732.,  1896.,  2131.,  2389.,  2647.,  2905.,  1544.,  1724.,  1904.,
      2084.,  2264.,  2444.,  2624.,  2804.,  1199.,  1293.,  1387.,  1481.,
      1575.,  1669.,  1763.,  1857.,  0.,     0.,     0.,     0.,     1619.,
      1697.,  1775.,  1853.,  1931.,  2009.,  2087.,  2165.,  4028.,  4192.,
      4356.,  4520.,  4684.,  4848.,  5012.,  5176.,  7291.,  7549.,  7807.,
      8065.,  5144.,  5324.,  5504.,  5684.,  5864.,  6044.,  6224.,  6404.,
      3079.,  3173.,  3267.,  3361.,  3455.,  3549.,  3643.,  3737.,  0.,
      0.,     0.,     0.,     3256.,  3436.,  3616.,  3796.,  3976.,  4156.,
      4336.,  4516.,  8284.,  8660.,  9036.,  9412.,  9788.,  10164., 10540.,
      10916., 15212., 15800., 16388., 16976., 10708., 11116., 11524., 11932.,
      12340., 12748., 13156., 13564., 6464.,  6676.,  6888.,  7100.,  7312.,
      7524.,  7736.,  7948.,  0.,     0.,     0.,     0.,     6856.,  7036.,
      7216.,  7396.,  7576.,  7756.,  7936.,  8116.,  15804., 16180., 16556.,
      16932., 17308., 17684., 18060., 18436., 26972., 27560., 28148., 28736.,
      18868., 19276., 19684., 20092., 20500., 20908., 21316., 21724., 10704.,
      10916., 11128., 11340., 11552., 11764., 11976., 12188., 0.,     0.,
      0.,     0.,     10551., 10857., 11163., 11469., 11775., 12081., 12387.,
      12693., 24528., 25164., 25800., 26436., 27072., 27708., 28344., 28980.,
      42123., 43113., 44103., 45093., 29412., 30096., 30780., 31464., 32148.,
      32832., 33516., 34200., 16755., 17109., 17463., 17817., 18171., 18525.,
      18879., 19233., 0.,     0.,     0.,     0.,     8812.,  9040.,  9268.,
      9496.,  9724.,  9952.,  10180., 10408., 20100., 20572., 21044., 21516.,
      21988., 22460., 22932., 23404., 33992., 34724., 35456., 36188., 23548.,
      24052., 24556., 25060., 25564., 26068., 26572., 27076., 13236., 13496.,
      13756., 14016., 14276., 14536., 14796., 15056., 0.,     0.,     0.,
      0.,     13372., 13600., 13828., 14056., 14284., 14512., 14740., 14968.,
      29540., 30012., 30484., 30956., 31428., 31900., 32372., 32844., 48632.,
      49364., 50096., 50828., 33628., 34132., 34636., 35140., 35644., 36148.,
      36652., 37156., 18436., 18696., 18956., 19216., 19476., 19736., 19996.,
      20256., 0.,     0.,     0.,     0.,     7655.,  7781.,  7907.,  8033.,
      8159.,  8285.,  8411.,  8537.,  16804., 17064., 17324., 17584., 17844.,
      18104., 18364., 18624., 27511., 27913., 28315., 28717., 18944., 19220.,
      19496., 19772., 20048., 20324., 20600., 20876., 10331., 10473., 10615.,
      10757., 10899., 11041., 11183., 11325., 0.,     0.,     0.,     0.,
      10175., 10301., 10427., 10553., 10679., 10805., 10931., 11057., 22004.,
      22264., 22524., 22784., 23044., 23304., 23564., 23824., 35551., 35953.,
      36355., 36757., 24464., 24740., 25016., 25292., 25568., 25844., 26120.,
      26396., 13171., 13313., 13455., 13597., 13739., 13881., 14023., 14165.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     113.,
      263.,   413.,   563.,   713.,   863.,   1013.,  1163.,  1432.,  1740.,
      2048.,  2356.,  2664.,  2972.,  3280.,  3588.,  4021.,  4495.,  4969.,
      5443.,  2804.,  3128.,  3452.,  3776.,  4100.,  4424.,  4748.,  5072.,
      2117.,  2283.,  2449.,  2615.,  2781.,  2947.,  3113.,  3279.,  0.,
      0.,     0.,     0.,     3113.,  3263.,  3413.,  3563.,  3713.,  3863.,
      4013.,  4163.,  7592.,  7900.,  8208.,  8516.,  8824.,  9132.,  9440.,
      9748.,  13501., 13975., 14449., 14923., 9284.,  9608.,  9932.,  10256.,
      10580., 10904., 11228., 11552., 5437.,  5603.,  5769.,  5935.,  6101.,
      6267.,  6433.,  6599.,  0.,     0.,     0.,     0.,     6244.,  6568.,
      6892.,  7216.,  7540.,  7864.,  8188.,  8512.,  15412., 16076., 16740.,
      17404., 18068., 18732., 19396., 20060., 27632., 28652., 29672., 30692.,
      18988., 19684., 20380., 21076., 21772., 22468., 23164., 23860., 11180.,
      11536., 11892., 12248., 12604., 12960., 13316., 13672., 0.,     0.,
      0.,     0.,     12724., 13048., 13372., 13696., 14020., 14344., 14668.,
      14992., 28692., 29356., 30020., 30684., 31348., 32012., 32676., 33340.,
      48032., 49052., 50072., 51092., 32908., 33604., 34300., 34996., 35692.,
      36388., 37084., 37780., 18300., 18656., 19012., 19368., 19724., 20080.,
      20436., 20792., 0.,     0.,     0.,     0.,     19353., 19875., 20397.,
      20919., 21441., 21963., 22485., 23007., 43860., 44928., 45996., 47064.,
      48132., 49200., 50268., 51336., 73713., 75351., 76989., 78627., 50472.,
      51588., 52704., 53820., 54936., 56052., 57168., 58284., 28149., 28719.,
      29289., 29859., 30429., 30999., 31569., 32139., 0.,     0.,     0.,
      0.,     14680., 15052., 15424., 15796., 16168., 16540., 16912., 17284.,
      32988., 33748., 34508., 35268., 36028., 36788., 37548., 38308., 55052.,
      56216., 57380., 58544., 37588., 38380., 39172., 39964., 40756., 41548.,
      42340., 43132., 20832., 21236., 21640., 22044., 22448., 22852., 23256.,
      23660., 0.,     0.,     0.,     0.,     22120., 22492., 22864., 23236.,
      23608., 23980., 24352., 24724., 48188., 48948., 49708., 50468., 51228.,
      51988., 52748., 53508., 78332., 79496., 80660., 81824., 53428., 54220.,
      55012., 55804., 56596., 57388., 58180., 58972., 28912., 29316., 29720.,
      30124., 30528., 30932., 31336., 31740., 0.,     0.,     0.,     0.,
      12029., 12227., 12425., 12623., 12821., 13019., 13217., 13415., 26128.,
      26532., 26936., 27340., 27744., 28148., 28552., 28956., 42361., 42979.,
      43597., 44215., 28844., 29264., 29684., 30104., 30524., 30944., 31364.,
      31784., 15569., 15783., 15997., 16211., 16425., 16639., 16853., 17067.,
      0.,     0.,     0.,     0.,     15989., 16187., 16385., 16583., 16781.,
      16979., 17177., 17375., 34208., 34612., 35016., 35420., 35824., 36228.,
      36632., 37036., 54721., 55339., 55957., 56575., 37244., 37664., 38084.,
      38504., 38924., 39344., 39764., 40184., 19849., 20063., 20277., 20491.,
      20705., 20919., 21133., 21347., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     1030.,    1070.,    1110.,    3300.,    3444.,    3588.,
      3732.,    3876.,    4020.,    4164.,    4308.,    7922.,    8234.,
      8546.,    8858.,    7540.,    7812.,    8084.,    8356.,    13418.,
      13922.,   14426.,   14930.,   11204.,   11604.,   12004.,   12404.,
      18914.,   19610.,   20306.,   21002.,   14868.,   15396.,   15924.,
      16452.,   16980.,   17508.,   18036.,   18564.,   3460.,    3860.,
      4260.,    4660.,    9560.,    10488.,   11416.,   12344.,   13272.,
      14200.,   15128.,   16056.,   24124.,   25708.,   27292.,   28876.,
      20600.,   21784.,   22968.,   24152.,   35116.,   37084.,   39052.,
      41020.,   27928.,   29368.,   30808.,   32248.,   46108.,   48460.,
      50812.,   53164.,   35256.,   36952.,   38648.,   40344.,   42040.,
      43736.,   45432.,   47128.,   11460.,   11860.,   12260.,   12660.,
      28120.,   29048.,   29976.,   30904.,   31832.,   32760.,   33688.,
      34616.,   55804.,   57388.,   58972.,   60556.,   44280.,   45464.,
      46648.,   47832.,   74476.,   76444.,   78412.,   80380.,   56728.,
      58168.,   59608.,   61048.,   93148.,   95500.,   97852.,   100204.,
      69176.,   70872.,   72568.,   74264.,   75960.,   77656.,   79352.,
      81048.,   22610.,   23690.,   24770.,   25850.,   53020.,   55372.,
      57724.,   60076.,   62428.,   64780.,   67132.,   69484.,   105726.,
      109542.,  113358.,  117174.,  81100.,   83836.,   86572.,   89308.,
      133734.,  138126.,  142518.,  146910.,  99772.,   102892.,  106012.,
      109132.,  161742.,  166710.,  171678.,  176646.,  118444.,  121948.,
      125452.,  128956.,  132460.,  135964.,  139468.,  142972.,  40020.,
      41060.,   42100.,   43140.,   85240.,   87448.,   89656.,   91864.,
      94072.,   96280.,   98488.,   100696.,  149164.,  152668.,  156172.,
      159676.,  106520.,  108984.,  111448.,  113912.,  167836.,  171724.,
      175612.,  179500.,  118968.,  121688.,  124408.,  127128.,  186508.,
      190780.,  195052.,  199324.,  131416.,  134392.,  137368.,  140344.,
      143320.,  146296.,  149272.,  152248.,  65450.,   67490.,   69530.,
      71570.,   138700.,  142972.,  147244.,  151516.,  155788.,  160060.,
      164332.,  168604.,  245766.,  252462.,  259158.,  265854.,  174460.,
      179116.,  183772.,  188428.,  273774.,  281046.,  288318.,  295590.,
      193132.,  198172.,  203212.,  208252.,  301782.,  309630.,  317478.,
      325326.,  211804.,  217228.,  222652.,  228076.,  233500.,  238924.,
      244348.,  249772.,  68580.,   70260.,   71940.,   73620.,   142360.,
      145848.,  149336.,  152824.,  156312.,  159800.,  163288.,  166776.,
      242524.,  247948.,  253372.,  258796.,  168760.,  172504.,  176248.,
      179992.,  261196.,  267004.,  272812.,  278620.,  181208.,  185208.,
      189208.,  193208.,  279868.,  286060.,  292252.,  298444.,  193656.,
      197912.,  202168.,  206424.,  210680.,  214936.,  219192.,  223448.,
      108290.,  111290.,  114290.,  117290.,  224380.,  230572.,  236764.,
      242956.,  249148.,  255340.,  261532.,  267724.,  385806.,  395382.,
      404958.,  414534.,  267820.,  274396.,  280972.,  287548.,  413814.,
      423966.,  434118.,  444270.,  286492.,  293452.,  300412.,  307372.,
      441822.,  452550.,  463278.,  474006.,  305164.,  312508.,  319852.,
      327196.,  334540.,  341884.,  349228.,  356572.,  97140.,   99460.,
      101780.,  104100.,  199480.,  204248.,  209016.,  213784.,  218552.,
      223320.,  228088.,  232856.,  335884.,  343228.,  350572.,  357916.,
      231000.,  236024.,  241048.,  246072.,  354556.,  362284.,  370012.,
      377740.,  243448.,  248728.,  254008.,  259288.,  373228.,  381340.,
      389452.,  397564.,  255896.,  261432.,  266968.,  272504.,  278040.,
      283576.,  289112.,  294648.,  143540.,  145860.,  148180.,  150500.,
      294840.,  299608.,  304376.,  309144.,  313912.,  318680.,  323448.,
      328216.,  482764.,  490108.,  497452.,  504796.,  331480.,  336504.,
      341528.,  346552.,  509116.,  516844.,  524572.,  532300.,  349048.,
      354328.,  359608.,  364888.,  535468.,  543580.,  551692.,  559804.,
      366616.,  372152.,  377688.,  383224.,  388760.,  394296.,  399832.,
      405368.,  40390.,   42030.,   43670.,   45310.,   82100.,   85444.,
      88788.,   92132.,   95476.,   98820.,   102164.,  105508.,  145322.,
      150434.,  155546.,  160658.,  99140.,   102612.,  106084.,  109556.,
      150818.,  156122.,  161426.,  166730.,  102804.,  106404.,  110004.,
      113604.,  156314.,  161810.,  167306.,  172802.,  106468.,  110196.,
      113924.,  117652.,  121380.,  125108.,  128836.,  132564.,  82260.,
      85860.,   89460.,   93060.,   167160.,  174488.,  181816.,  189144.,
      196472.,  203800.,  211128.,  218456.,  298924.,  310108.,  321292.,
      332476.,  203800.,  211384.,  218968.,  226552.,  309916.,  321484.,
      333052.,  344620.,  211128.,  218968.,  226808.,  234648.,  320908.,
      332860.,  344812.,  356764.,  218456.,  226552.,  234648.,  242744.,
      250840.,  258936.,  267032.,  275128.,  154260.,  157860.,  161460.,
      165060.,  313720.,  321048.,  328376.,  335704.,  343032.,  350360.,
      357688.,  365016.,  522604.,  533788.,  544972.,  556156.,  355480.,
      363064.,  370648.,  378232.,  541276.,  552844.,  564412.,  575980.,
      367928.,  375768.,  383608.,  391448.,  559948.,  571900.,  583852.,
      595804.,  380376.,  388472.,  396568.,  404664.,  412760.,  420856.,
      428952.,  437048.,  236810.,  242690.,  248570.,  254450.,  481420.,
      493372.,  505324.,  517276.,  529228.,  541180.,  553132.,  565084.,
      805926.,  824142.,  842358.,  860574.,  547900.,  560236.,  572572.,
      584908.,  833934.,  852726.,  871518.,  890310.,  566572.,  579292.,
      592012.,  604732.,  861942.,  881310.,  900678.,  920046.,  585244.,
      598348.,  611452.,  624556.,  637660.,  650764.,  663868.,  676972.,
      182820.,  187060.,  191300.,  195540.,  370840.,  379448.,  388056.,
      396664.,  405272.,  413880.,  422488.,  431096.,  615964.,  629068.,
      642172.,  655276.,  417720.,  426584.,  435448.,  444312.,  634636.,
      648124.,  661612.,  675100.,  430168.,  439288.,  448408.,  457528.,
      653308.,  667180.,  681052.,  694924.,  442616.,  451992.,  461368.,
      470744.,  480120.,  489496.,  498872.,  508248.,  279650.,  286490.,
      293330.,  300170.,  567100.,  580972.,  594844.,  608716.,  622588.,
      636460.,  650332.,  664204.,  945966.,  967062.,  988158.,  1009254.,
      641260.,  655516.,  669772.,  684028.,  973974.,  995646.,  1017318.,
      1038990., 659932.,  674572.,  689212.,  703852.,  1001982., 1024230.,
      1046478., 1068726., 678604.,  693628.,  708652.,  723676.,  738700.,
      753724.,  768748.,  783772.,  211380.,  216260.,  221140.,  226020.,
      427960.,  437848.,  447736.,  457624.,  467512.,  477400.,  487288.,
      497176.,  709324.,  724348.,  739372.,  754396.,  479960.,  490104.,
      500248.,  510392.,  727996.,  743404.,  758812.,  774220.,  492408.,
      502808.,  513208.,  523608.,  746668.,  762460.,  778252.,  794044.,
      504856.,  515512.,  526168.,  536824.,  547480.,  558136.,  568792.,
      579448.,  322490.,  330290.,  338090.,  345890.,  652780.,  668572.,
      684364.,  700156.,  715948.,  731740.,  747532.,  763324.,  1086006.,
      1109982., 1133958., 1157934., 734620.,  750796.,  766972.,  783148.,
      1114014., 1138566., 1163118., 1187670., 753292.,  769852.,  786412.,
      802972.,  1142022., 1167150., 1192278., 1217406., 771964.,  788908.,
      805852.,  822796.,  839740.,  856684.,  873628.,  890572.,  239940.,
      245460.,  250980.,  256500.,  485080.,  496248.,  507416.,  518584.,
      529752.,  540920.,  552088.,  563256.,  802684.,  819628.,  836572.,
      853516.,  542200.,  553624.,  565048.,  576472.,  821356.,  838684.,
      856012.,  873340.,  554648.,  566328.,  578008.,  589688.,  840028.,
      857740.,  875452.,  893164.,  567096.,  579032.,  590968.,  602904.,
      614840.,  626776.,  638712.,  650648.,  350340.,  355860.,  361380.,
      366900.,  708440.,  719608.,  730776.,  741944.,  753112.,  764280.,
      775448.,  786616.,  1141564., 1158508., 1175452., 1192396., 770680.,
      782104.,  793528.,  804952.,  1167916., 1185244., 1202572., 1219900.,
      788248.,  799928.,  811608.,  823288.,  1194268., 1211980., 1229692.,
      1247404., 805816.,  817752.,  829688.,  841624.,  853560.,  865496.,
      877432.,  889368.,  79790.,   83030.,   86270.,   89510.,   160900.,
      167444.,  173988.,  180532.,  187076.,  193620.,  200164.,  206708.,
      282722.,  292634.,  302546.,  312458.,  190740.,  197412.,  204084.,
      210756.,  288218.,  298322.,  308426.,  318530.,  194404.,  201204.,
      208004.,  214804.,  293714.,  304010.,  314306.,  324602.,  198068.,
      204996.,  211924.,  218852.,  225780.,  232708.,  239636.,  246564.,
      161060.,  167860.,  174660.,  181460.,  324760.,  338488.,  352216.,
      365944.,  379672.,  393400.,  407128.,  420856.,  573724.,  594508.,
      615292.,  636076.,  387000.,  400984.,  414968.,  428952.,  584716.,
      605884.,  627052.,  648220.,  394328.,  408568.,  422808.,  437048.,
      595708.,  617260.,  638812.,  660364.,  401656.,  416152.,  430648.,
      445144.,  459640.,  474136.,  488632.,  503128.,  297060.,  303860.,
      310660.,  317460.,  599320.,  613048.,  626776.,  640504.,  654232.,
      667960.,  681688.,  695416.,  989404.,  1010188., 1030972., 1051756.,
      666680.,  680664.,  694648.,  708632.,  1008076., 1029244., 1050412.,
      1071580., 679128.,  693368.,  707608.,  721848.,  1026748., 1048300.,
      1069852., 1091404., 691576.,  706072.,  720568.,  735064.,  749560.,
      764056.,  778552.,  793048.,  451010.,  461690.,  472370.,  483050.,
      909820.,  931372.,  952924.,  974476.,  996028.,  1017580., 1039132.,
      1060684., 1506126., 1538742., 1571358., 1603974., 1014700., 1036636.,
      1058572., 1080508., 1534134., 1567326., 1600518., 1633710., 1033372.,
      1055692., 1078012., 1100332., 1562142., 1595910., 1629678., 1663446.,
      1052044., 1074748., 1097452., 1120156., 1142860., 1165564., 1188268.,
      1210972., 325620.,  333060.,  340500.,  347940.,  656440.,  671448.,
      686456.,  701464.,  716472.,  731480.,  746488.,  761496.,  1082764.,
      1105468., 1128172., 1150876., 728920.,  744184.,  759448.,  774712.,
      1101436., 1124524., 1147612., 1170700., 741368.,  756888.,  772408.,
      787928.,  1120108., 1143580., 1167052., 1190524., 753816.,  769592.,
      785368.,  801144.,  816920.,  832696.,  848472.,  864248.,  493850.,
      505490.,  517130.,  528770.,  995500.,  1018972., 1042444., 1065916.,
      1089388., 1112860., 1136332., 1159804., 1646166., 1681662., 1717158.,
      1752654., 1108060., 1131916., 1155772., 1179628., 1674174., 1710246.,
      1746318., 1782390., 1126732., 1150972., 1175212., 1199452., 1702182.,
      1738830., 1775478., 1812126., 1145404., 1170028., 1194652., 1219276.,
      1243900., 1268524., 1293148., 1317772., 354180.,  362260.,  370340.,
      378420.,  713560.,  729848.,  746136.,  762424.,  778712.,  795000.,
      811288.,  827576.,  1176124., 1200748., 1225372., 1249996., 791160.,
      807704.,  824248.,  840792.,  1194796., 1219804., 1244812., 1269820.,
      803608.,  820408.,  837208.,  854008.,  1213468., 1238860., 1264252.,
      1289644., 816056.,  833112.,  850168.,  867224.,  884280.,  901336.,
      918392.,  935448.,  536690.,  549290.,  561890.,  574490.,  1081180.,
      1106572., 1131964., 1157356., 1182748., 1208140., 1233532., 1258924.,
      1786206., 1824582., 1862958., 1901334., 1201420., 1227196., 1252972.,
      1278748., 1814214., 1853166., 1892118., 1931070., 1220092., 1246252.,
      1272412., 1298572., 1842222., 1881750., 1921278., 1960806., 1238764.,
      1265308., 1291852., 1318396., 1344940., 1371484., 1398028., 1424572.,
      382740.,  391460.,  400180.,  408900.,  770680.,  788248.,  805816.,
      823384.,  840952.,  858520.,  876088.,  893656.,  1269484., 1296028.,
      1322572., 1349116., 853400.,  871224.,  889048.,  906872.,  1288156.,
      1315084., 1342012., 1368940., 865848.,  883928.,  902008.,  920088.,
      1306828., 1334140., 1361452., 1388764., 878296.,  896632.,  914968.,
      933304.,  951640.,  969976.,  988312.,  1006648., 557140.,  565860.,
      574580.,  583300.,  1122040., 1139608., 1157176., 1174744., 1192312.,
      1209880., 1227448., 1245016., 1800364., 1826908., 1853452., 1879996.,
      1209880., 1227704., 1245528., 1263352., 1826716., 1853644., 1880572.,
      1907500., 1227448., 1245528., 1263608., 1281688., 1853068., 1880380.,
      1907692., 1935004., 1245016., 1263352., 1281688., 1300024., 1318360.,
      1336696., 1355032., 1373368.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    190.,    230.,    270.,    310.,
      420.,    564.,    708.,    852.,    996.,    1140.,   1284.,   1428.,
      1682.,   1994.,   2306.,   2618.,   2100.,   2372.,   2644.,   2916.,
      3188.,   3460.,   3732.,   4004.,   2126.,   2294.,   2462.,   2630.,
      2798.,   2966.,   3134.,   3302.,   0.,      0.,      0.,      0.,
      830.,    870.,    910.,    950.,    990.,    1030.,   1070.,   1110.,
      3300.,   3444.,   3588.,   3732.,   3876.,   4020.,   4164.,   4308.,
      7922.,   8234.,   8546.,   8858.,   7540.,   7812.,   8084.,   8356.,
      8628.,   8900.,   9172.,   9444.,   5486.,   5654.,   5822.,   5990.,
      6158.,   6326.,   6494.,   6662.,   0.,      0.,      0.,      0.,
      1780.,   2052.,   2324.,   2596.,   2868.,   3140.,   3412.,   3684.,
      8376.,   9048.,   9720.,   10392.,  11064.,  11736.,  12408.,  13080.,
      20812.,  22012.,  23212.,  24412.,  18392.,  19320.,  20248.,  21176.,
      22104.,  23032.,  23960.,  24888.,  13396.,  13924.,  14452.,  14980.,
      15508.,  16036.,  16564.,  17092.,  0.,      0.,      0.,      0.,
      7220.,   7492.,   7764.,   8036.,   8308.,   8580.,   8852.,   9124.,
      21816.,  22488.,  23160.,  23832.,  24504.,  25176.,  25848.,  26520.,
      44812.,  46012.,  47212.,  48412.,  36952.,  37880.,  38808.,  39736.,
      40664.,  41592.,  42520.,  43448.,  23956.,  24484.,  25012.,  25540.,
      26068.,  26596.,  27124.,  27652.,  0.,      0.,      0.,      0.,
      12930.,  13626.,  14322.,  15018.,  15714.,  16410.,  17106.,  17802.,
      39228.,  40812.,  42396.,  43980.,  45564.,  47148.,  48732.,  50316.,
      80430.,  83094.,  85758.,  88422.,  64236.,  66204.,  68172.,  70140.,
      72108.,  74076.,  76044.,  78012.,  41490.,  42570.,  43650.,  44730.,
      45810.,  46890.,  47970.,  49050.,  0.,      0.,      0.,      0.,
      22820.,  23476.,  24132.,  24788.,  25444.,  26100.,  26756.,  27412.,
      56088.,  57528.,  58968.,  60408.,  61848.,  63288.,  64728.,  66168.,
      100828., 103180., 105532., 107884., 74296.,  75992.,  77688.,  79384.,
      81080.,  82776.,  84472.,  86168.,  44164.,  45076.,  45988.,  46900.,
      47812.,  48724.,  49636.,  50548.,  0.,      0.,      0.,      0.,
      35940.,  36596.,  37252.,  37908.,  38564.,  39220.,  39876.,  40532.,
      84888.,  86328.,  87768.,  89208.,  90648.,  92088.,  93528.,  94968.,
      147868., 150220., 152572., 154924., 108216., 109912., 111608., 113304.,
      115000., 116696., 118392., 120088., 62404.,  63316.,  64228.,  65140.,
      66052.,  66964.,  67876.,  68788.,  0.,      0.,      0.,      0.,
      25710.,  26134.,  26558.,  26982.,  27406.,  27830.,  28254.,  28678.,
      58692.,  59604.,  60516.,  61428.,  62340.,  63252.,  64164.,  65076.,
      99458.,  100922., 102386., 103850., 71124.,  72164.,  73204.,  74244.,
      75284.,  76324.,  77364.,  78404.,  40094.,  40646.,  41198.,  41750.,
      42302.,  42854.,  43406.,  43958.,  0.,      0.,      0.,      0.,
      34190.,  34614.,  35038.,  35462.,  35886.,  36310.,  36734.,  37158.,
      76932.,  77844.,  78756.,  79668.,  80580.,  81492.,  82404.,  83316.,
      128738., 130202., 131666., 133130., 91924.,  92964.,  94004.,  95044.,
      96084.,  97124.,  98164.,  99204.,  51134.,  51686.,  52238.,  52790.,
      53342.,  53894.,  54446.,  54998.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      390.,    1006.,   1622.,   2238.,   2854.,   3470.,   4086.,   4702.,
      5748.,   7044.,   8340.,   9636.,   10932.,  12228.,  13524.,  14820.,
      16586.,  18626.,  20666.,  22706.,  12036.,  13460.,  14884.,  16308.,
      17732.,  19156.,  20580.,  22004.,  9398.,   10142.,  10886.,  11630.,
      12374.,  13118.,  13862.,  14606.,  0.,      0.,      0.,      0.,
      12710.,  13326.,  13942.,  14558.,  15174.,  15790.,  16406.,  17022.,
      31668.,  32964.,  34260.,  35556.,  36852.,  38148.,  39444.,  40740.,
      57386.,  59426.,  61466.,  63506.,  40516.,  41940.,  43364.,  44788.,
      46212.,  47636.,  49060.,  50484.,  24278.,  25022.,  25766.,  26510.,
      27254.,  27998.,  28742.,  29486.,  0.,      0.,      0.,      0.,
      25540.,  26964.,  28388.,  29812.,  31236.,  32660.,  34084.,  35508.,
      65112.,  68088.,  71064.,  74040.,  77016.,  79992.,  82968.,  85944.,
      119740., 124396., 129052., 133708., 84344.,  87576.,  90808.,  94040.,
      97272.,  100504., 103736., 106968., 50980.,  52660.,  54340.,  56020.,
      57700.,  59380.,  61060.,  62740.,  0.,      0.,      0.,      0.,
      54020.,  55444.,  56868.,  58292.,  59716.,  61140.,  62564.,  63988.,
      124632., 127608., 130584., 133560., 136536., 139512., 142488., 145464.,
      212860., 217516., 222172., 226828., 148984., 152216., 155448., 158680.,
      161912., 165144., 168376., 171608., 84580.,  86260.,  87940.,  89620.,
      91300.,  92980.,  94660.,  96340.,  0.,      0.,      0.,      0.,
      83130.,  85554.,  87978.,  90402.,  92826.,  95250.,  97674.,  100098.,
      193452., 198492., 203532., 208572., 213612., 218652., 223692., 228732.,
      332502., 340350., 348198., 356046., 232284., 237708., 243132., 248556.,
      253980., 259404., 264828., 270252., 132426., 135234., 138042., 140850.,
      143658., 146466., 149274., 152082., 0.,      0.,      0.,      0.,
      69620.,  71428.,  73236.,  75044.,  76852.,  78660.,  80468.,  82276.,
      158904., 162648., 166392., 170136., 173880., 177624., 181368., 185112.,
      268876., 274684., 280492., 286300., 186328., 190328., 194328., 198328.,
      202328., 206328., 210328., 214328., 104788., 106852., 108916., 110980.,
      113044., 115108., 117172., 119236., 0.,      0.,      0.,      0.,
      105780., 107588., 109396., 111204., 113012., 114820., 116628., 118436.,
      233784., 237528., 241272., 245016., 248760., 252504., 256248., 259992.,
      385036., 390844., 396652., 402460., 266328., 270328., 274328., 278328.,
      282328., 286328., 290328., 294328., 146068., 148132., 150196., 152260.,
      154324., 156388., 158452., 160516., 0.,      0.,      0.,      0.,
      60630.,  61630.,  62630.,  63630.,  64630.,  65630.,  66630.,  67630.,
      133140., 135204., 137268., 139332., 141396., 143460., 145524., 147588.,
      218042., 221234., 224426., 227618., 150180., 152372., 154564., 156756.,
      158948., 161140., 163332., 165524., 81926.,  83054.,  84182.,  85310.,
      86438.,  87566.,  88694.,  89822.,  0.,      0.,      0.,      0.,
      80630.,  81630.,  82630.,  83630.,  84630.,  85630.,  86630.,  87630.,
      174420., 176484., 178548., 180612., 182676., 184740., 186804., 188868.,
      281882., 285074., 288266., 291458., 194020., 196212., 198404., 200596.,
      202788., 204980., 207172., 209364., 104486., 105614., 106742., 107870.,
      108998., 110126., 111254., 112382., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      750.,    1942.,   3134.,   4326.,   5518.,   6710.,   7902.,   9094.,
      11076.,  13524.,  15972.,  18420.,  20868.,  23316.,  25764.,  28212.,
      31490.,  35258.,  39026.,  42794.,  21972.,  24548.,  27124.,  29700.,
      32276.,  34852.,  37428.,  40004.,  16670.,  17990.,  19310.,  20630.,
      21950.,  23270.,  24590.,  25910.,  0.,      0.,      0.,      0.,
      24590.,  25782.,  26974.,  28166.,  29358.,  30550.,  31742.,  32934.,
      60036.,  62484.,  64932.,  67380.,  69828.,  72276.,  74724.,  77172.,
      106850., 110618., 114386., 118154., 73492.,  76068.,  78644.,  81220.,
      83796.,  86372.,  88948.,  91524.,  43070.,  44390.,  45710.,  47030.,
      48350.,  49670.,  50990.,  52310.,  0.,      0.,      0.,      0.,
      49300.,  51876.,  54452.,  57028.,  59604.,  62180.,  64756.,  67332.,
      121848., 127128., 132408., 137688., 142968., 148248., 153528., 158808.,
      218668., 226780., 234892., 243004., 150296., 155832., 161368., 166904.,
      172440., 177976., 183512., 189048., 88564.,  91396.,  94228.,  97060.,
      99892.,  102724., 105556., 108388., 0.,      0.,      0.,      0.,
      100820., 103396., 105972., 108548., 111124., 113700., 116276., 118852.,
      227448., 232728., 238008., 243288., 248568., 253848., 259128., 264408.,
      380908., 389020., 397132., 405244., 261016., 266552., 272088., 277624.,
      283160., 288696., 294232., 299768., 145204., 148036., 150868., 153700.,
      156532., 159364., 162196., 165028., 0.,      0.,      0.,      0.,
      153330., 157482., 161634., 165786., 169938., 174090., 178242., 182394.,
      347676., 356172., 364668., 373164., 381660., 390156., 398652., 407148.,
      584574., 597606., 610638., 623670., 400332., 409212., 418092., 426972.,
      435852., 444732., 453612., 462492., 223362., 227898., 232434., 236970.,
      241506., 246042., 250578., 255114., 0.,      0.,      0.,      0.,
      116420., 119380., 122340., 125300., 128260., 131220., 134180., 137140.,
      261720., 267768., 273816., 279864., 285912., 291960., 298008., 304056.,
      436924., 446188., 455452., 464716., 298360., 304664., 310968., 317272.,
      323576., 329880., 336184., 342488., 165412., 168628., 171844., 175060.,
      178276., 181492., 184708., 187924., 0.,      0.,      0.,      0.,
      175620., 178580., 181540., 184500., 187460., 190420., 193380., 196340.,
      382680., 388728., 394776., 400824., 406872., 412920., 418968., 425016.,
      622204., 631468., 640732., 649996., 424440., 430744., 437048., 443352.,
      449656., 455960., 462264., 468568., 229732., 232948., 236164., 239380.,
      242596., 245812., 249028., 252244., 0.,      0.,      0.,      0.,
      95550.,  97126.,  98702.,  100278., 101854., 103430., 105006., 106582.,
      207588., 210804., 214020., 217236., 220452., 223668., 226884., 230100.,
      336626., 341546., 346466., 351386., 229236., 232580., 235924., 239268.,
      242612., 245956., 249300., 252644., 123758., 125462., 127166., 128870.,
      130574., 132278., 133982., 135686., 0.,      0.,      0.,      0.,
      127070., 128646., 130222., 131798., 133374., 134950., 136526., 138102.,
      271908., 275124., 278340., 281556., 284772., 287988., 291204., 294420.,
      435026., 439946., 444866., 449786., 296116., 299460., 302804., 306148.,
      309492., 312836., 316180., 319524., 157838., 159542., 161246., 162950.,
      164654., 166358., 168062., 169766., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
