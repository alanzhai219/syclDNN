/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow5Stride1Groups3 = GroupWindowStrideTest<Triple, 5, 1, 3>;
TYPED_TEST_SUITE(ForwardWindow5Stride1Groups3, GTestTypeTriples);
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {125., 100., 125., 125., 100., 125.,
                                         125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x6x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {125., 100., 125., 125., 100., 125.,
                                         125., 100., 125., 125., 100., 125.,
                                         125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14.,
      28., 13., 26., 13., 26., 14., 28., 14., 28.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x6x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35.,
      40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70.,
      80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40.,
      35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80.,
      70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x6x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x7x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {125., 100., 125., 125., 100., 125.,
                                         125., 100., 125., 125., 100., 125.,
                                         125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x7x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37.,
      38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74.,
      76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38.,
      37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76.,
      74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38.,
      37., 74., 76., 74., 37., 38., 37., 74., 76., 74.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28., 14., 28., 13.,
      26., 13., 26.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x7x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x7x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x8x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35.,
      40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70.,
      80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40.,
      35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80.,
      70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x8x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED1x8x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED1x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED1x8x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED1x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x6x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x6x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100.,
      125., 125., 100., 125., 125., 100., 125., 125., 100., 125., 125.,
      100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100.,
      125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14.,
      28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28., 14., 28., 13.,
      26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 14., 28., 14., 28., 13., 26., 13., 26., 14.,
      28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x6x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x6x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x6x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x6x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x7x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100.,
      125., 125., 100., 125., 125., 100., 125., 125., 100., 125., 125.,
      100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100.,
      125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21.,
      42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42.,
      21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x7x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x7x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28., 14., 28., 13.,
      26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14.,
      28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13.,
      26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x7x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x7x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x7x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21.,
      42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42.,
      21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21.,
      42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42.,
      21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30.,
      16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x7x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x8x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x6x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20.,
      40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30.,
      15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16., 32., 16., 32.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24.,
      48., 24., 48., 24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32.,
      16., 32., 20., 40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x8x6x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x8x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37.,
      74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76.,
      38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37.,
      74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.,
      37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74., 38., 37., 38.,
      76., 74., 76., 38., 37., 38., 76., 74., 76., 37., 38., 37., 74., 76., 74.,
      37., 38., 37., 74., 76., 74., 38., 37., 38., 76., 74., 76., 38., 37., 38.,
      76., 74., 76., 37., 38., 37., 74., 76., 74., 37., 38., 37., 74., 76., 74.,
      38., 37., 38., 76., 74., 76., 38., 37., 38., 76., 74., 76.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x7x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13.,
      26., 14., 28., 14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23.,
      46., 22., 44., 22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      14., 28., 14., 28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22.,
      44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14.,
      28., 13., 26., 13., 26., 14., 28., 14., 28., 13., 26., 13., 26., 14., 28.,
      14., 28., 13., 26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18.,
      36., 18., 36., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 13., 26., 13., 26., 14., 28., 14., 28., 13.,
      26., 13., 26., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76., 38., 76., 37.,
      74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22., 44., 23., 46.,
      23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37.,
      74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74.,
      37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46.,
      22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 37., 74., 37., 74., 38., 76.,
      38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38.,
      76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 22., 44., 22.,
      44., 23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44.,
      22., 44., 23., 46., 23., 46., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38., 76.,
      37., 74., 37., 74., 38., 76., 38., 76., 37., 74., 37., 74., 38., 76., 38.,
      76., 37., 74., 37., 74., 38., 76., 38., 76., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14.,
      28., 13., 26., 13., 26., 14., 28., 14., 28., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 23., 46., 23., 46., 22., 44., 22., 44., 23.,
      46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 22., 44., 22., 44.,
      23., 46., 23., 46., 22., 44., 22., 44., 23., 46., 23., 46., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 14., 28., 14., 28., 13., 26.,
      13., 26., 14., 28., 14., 28.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x8x7x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,
      80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100., 100., 80.,  100.,
      80.,  64.,  80.,  60.,  48.,  60.,  75.,  60.,  75.,  100., 80.,  100.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 100., 80.,  100.,
      75.,  60.,  75.,  75.,  60.,  75.,  100., 80.,  100., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,  75.,  60.,  75.,
      100., 80.,  100., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      100., 80.,  100., 75.,  60.,  75.,  60.,  48.,  60.,  80.,  64.,  80.,
      100., 80.,  100., 100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,
      60.,  48.,  60.,  45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDHWCFINTERLEAVED3x8x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35.,
      70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80.,
      35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40.,
      80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35., 70., 80., 70.,
      35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80., 40., 35., 40.,
      80., 70., 80., 35., 40., 35., 70., 80., 70., 35., 40., 35., 70., 80., 70.,
      40., 35., 40., 80., 70., 80., 40., 35., 40., 80., 70., 80., 35., 40., 35.,
      70., 80., 70., 35., 40., 35., 70., 80., 70., 40., 35., 40., 80., 70., 80.,
      40., 35., 40., 80., 70., 80.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, VALIDFHWCSTRIDED3x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 125., 100., 125., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFSTRIDED3x8x8x3x12) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40., 20., 40., 16.,
      32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64.,
      32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32.,
      64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48., 24., 48.,
      20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40., 12., 24., 12.,
      24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18., 36., 18., 36.,
      18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24., 12., 24., 15.,
      30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21.,
      42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42.,
      21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20.,
      40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60.,
      30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25.,
      50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16., 32., 20., 40.,
      20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56.,
      32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28.,
      56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64., 28., 56.,
      28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48., 24., 48., 24.,
      48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20., 40., 20., 40.,
      12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42.,
      24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 18., 36., 18.,
      36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15., 30., 12., 24.,
      12., 24., 15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 12.,
      24., 12., 24., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24.,
      48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48.,
      24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24.,
      48., 24., 48., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36.,
      15., 30., 15., 30., 12., 24., 12., 24., 15., 30., 15., 30., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35.,
      70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80.,
      30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25.,
      50., 20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50.,
      25., 50., 20., 40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35.,
      70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70.,
      35., 70., 40., 80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30.,
      60., 30., 60., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50.,
      20., 40., 20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70.,
      40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 30., 60., 30.,
      60., 30., 60., 30., 60., 30., 60., 30., 60., 25., 50., 25., 50., 20., 40.,
      20., 40., 25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 20.,
      40., 20., 40., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80., 40.,
      80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40., 80.,
      40., 80., 35., 70., 35., 70., 40., 80., 40., 80., 35., 70., 35., 70., 40.,
      80., 40., 80., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60., 30., 60.,
      25., 50., 25., 50., 20., 40., 20., 40., 25., 50., 25., 50., 16., 32., 16.,
      32., 20., 40., 20., 40., 16., 32., 16., 32., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 28., 56., 28., 56., 32., 64., 32., 64., 28.,
      56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32., 64.,
      28., 56., 28., 56., 32., 64., 32., 64., 28., 56., 28., 56., 32., 64., 32.,
      64., 28., 56., 28., 56., 32., 64., 32., 64., 24., 48., 24., 48., 24., 48.,
      24., 48., 24., 48., 24., 48., 20., 40., 20., 40., 16., 32., 16., 32., 20.,
      40., 20., 40., 12., 24., 12., 24., 15., 30., 15., 30., 12., 24., 12., 24.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 21., 42., 21.,
      42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21., 42.,
      21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48., 21.,
      42., 21., 42., 24., 48., 24., 48., 21., 42., 21., 42., 24., 48., 24., 48.,
      18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 18., 36., 15., 30., 15.,
      30., 12., 24., 12., 24., 15., 30., 15., 30.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 3}};
  const int features = 12;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1Groups3, SAMEHWCFINTERLEAVED3x8x8x6x3) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      75.,  60.,  75.,  100., 80.,  100., 125., 100., 125., 125., 100., 125.,
      125., 100., 125., 125., 100., 125., 100., 80.,  100., 75.,  60.,  75.,
      60.,  48.,  60.,  80.,  64.,  80.,  100., 80.,  100., 100., 80.,  100.,
      100., 80.,  100., 100., 80.,  100., 80.,  64.,  80.,  60.,  48.,  60.,
      45.,  36.,  45.,  60.,  48.,  60.,  75.,  60.,  75.,  75.,  60.,  75.,
      75.,  60.,  75.,  75.,  60.,  75.,  60.,  48.,  60.,  45.,  36.,  45.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 6}};
  const int features = 3;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
