/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow11Stride4Groups7 = GroupWindowStrideTest<Triple, 11, 4, 7>;
TYPED_TEST_SUITE(ForwardWindow11Stride4Groups7, GTestTypeTriples);
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x15x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x15x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x15x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x15x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x16x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x16x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      320., 256., 320., 256., 320., 256., 320., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      320., 256., 320., 256., 320., 256., 320., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x16x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 400., 320., 400.,
      320., 400., 320., 400., 240., 192., 240., 192., 240., 192., 240., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x16x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 400., 320., 400.,
      320., 400., 320., 400., 240., 192., 240., 192., 240., 192., 240., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x18x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      350., 280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      350., 280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x18x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      400., 320., 400., 320., 400., 320., 400., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 240., 192., 240., 192., 240., 192., 240., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      400., 320., 400., 320., 400., 320., 400., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 240., 192., 240., 192., 240., 192., 240., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{1, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED1x18x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 350., 280., 350.,
      280., 350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550.,
      440., 550., 440., 550., 440., 550., 500., 400., 500., 400., 500., 400.,
      500., 300., 240., 300., 240., 300., 240., 300., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 300., 240., 300., 240., 300., 240., 300.,
      180., 144., 180., 144., 180., 144., 180.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED1x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED1x18x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED1x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 350., 280., 350.,
      280., 350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550.,
      440., 550., 440., 550., 440., 550., 500., 400., 500., 400., 500., 400.,
      500., 300., 240., 300., 240., 300., 240., 300., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 300., 240., 300., 240., 300., 240., 300.,
      180., 144., 180., 144., 180., 144., 180.};
  const std::array<int, 4> in_shape = {{1, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x15x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 182., 181., 182., 181., 182., 181., 182., 364.,
      362., 364., 362., 364., 362., 364., 182., 181., 182., 181., 182., 181.,
      182., 364., 362., 364., 362., 364., 362., 364., 182., 181., 182., 181.,
      182., 181., 182., 364., 362., 364., 362., 364., 362., 364., 182., 181.,
      182., 181., 182., 181., 182., 364., 362., 364., 362., 364., 362., 364.,
      182., 181., 182., 181., 182., 181., 182., 364., 362., 364., 362., 364.,
      362., 364., 182., 181., 182., 181., 182., 181., 182., 364., 362., 364.,
      362., 364., 362., 364., 182., 181., 182., 181., 182., 181., 182., 364.,
      362., 364., 362., 364., 362., 364., 182., 181., 182., 181., 182., 181.,
      182., 364., 362., 364., 362., 364., 362., 364., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x15x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 15, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x15x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x15x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 15, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x15x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350.,
      210., 168., 210., 168., 210., 168., 210., 385., 308., 385., 308., 385.,
      308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330.,
      264., 330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385.,
      308., 385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210.,
      168., 210., 168., 210., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210., 168.,
      210., 168., 210., 385., 308., 385., 308., 385., 308., 385., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.,
      550., 440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330.,
      264., 330., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550.,
      440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264.,
      330., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280.,
      350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x15x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x15x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350.,
      210., 168., 210., 168., 210., 168., 210., 385., 308., 385., 308., 385.,
      308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330.,
      264., 330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385.,
      308., 385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210.,
      168., 210., 168., 210., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210., 168.,
      210., 168., 210., 385., 308., 385., 308., 385., 308., 385., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.,
      550., 440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330.,
      264., 330., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550.,
      440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264.,
      330., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280.,
      350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 15, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x16x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 280., 224., 280., 224., 280., 224., 280., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 280., 224., 280., 224.,
      280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 280., 224., 280., 224., 280., 224., 280.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x16x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 280., 224., 280., 224., 280., 224., 280., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 280., 224., 280., 224.,
      280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 280., 224., 280., 224., 280., 224., 280.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 16, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x16x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      320., 256., 320., 256., 320., 256., 320., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 320., 256., 320., 256., 320., 256., 320., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 320., 256., 320., 256.,
      320., 256., 320., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 280., 224., 280., 224., 280., 224., 280.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x16x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      320., 256., 320., 256., 320., 256., 320., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 280., 224., 280.,
      224., 280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 320., 256., 320., 256., 320., 256., 320., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 320., 256., 320., 256.,
      320., 256., 320., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 280., 224., 280., 224., 280., 224., 280.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 16, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x16x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 400., 320., 400.,
      320., 400., 320., 400., 240., 192., 240., 192., 240., 192., 240., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210., 280., 224., 280., 224.,
      280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 400., 320., 400., 320., 400., 320., 400.,
      240., 192., 240., 192., 240., 192., 240., 385., 308., 385., 308., 385.,
      308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330.,
      264., 330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385.,
      308., 385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210.,
      168., 210., 168., 210., 280., 224., 280., 224., 280., 224., 280., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 400., 320., 400., 320., 400., 320., 400., 240., 192., 240., 192.,
      240., 192., 240., 385., 308., 385., 308., 385., 308., 385., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.,
      550., 440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330.,
      264., 330., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550.,
      440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264.,
      330., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280.,
      350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x16x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 80.,  160., 80.,  160., 88.,  176., 88.,  176.,
      80.,  160., 80.,  160., 88.,  176., 88.,  176., 80.,  160., 80.,  160.,
      88.,  176., 88.,  176., 80.,  160., 80.,  160., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      128., 256., 128., 256., 136., 272., 136., 272., 128., 256., 128., 256.,
      136., 272., 136., 272., 128., 256., 128., 256., 136., 272., 136., 272.,
      128., 256., 128., 256., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x16x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 440., 352., 440., 352., 440.,
      352., 440., 440., 352., 440., 352., 440., 352., 440., 400., 320., 400.,
      320., 400., 320., 400., 240., 192., 240., 192., 240., 192., 240., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385.,
      308., 385., 308., 385., 308., 385., 350., 280., 350., 280., 350., 280.,
      350., 210., 168., 210., 168., 210., 168., 210., 280., 224., 280., 224.,
      280., 224., 280., 440., 352., 440., 352., 440., 352., 440., 440., 352.,
      440., 352., 440., 352., 440., 400., 320., 400., 320., 400., 320., 400.,
      240., 192., 240., 192., 240., 192., 240., 385., 308., 385., 308., 385.,
      308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330.,
      264., 330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385.,
      308., 385., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210.,
      168., 210., 168., 210., 280., 224., 280., 224., 280., 224., 280., 440.,
      352., 440., 352., 440., 352., 440., 440., 352., 440., 352., 440., 352.,
      440., 400., 320., 400., 320., 400., 320., 400., 240., 192., 240., 192.,
      240., 192., 240., 385., 308., 385., 308., 385., 308., 385., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.,
      550., 440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330.,
      264., 330., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550.,
      440., 550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264.,
      330., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280.,
      350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 16, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x18x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.,
      181., 182., 181., 182., 181., 182., 181., 362., 364., 362., 364., 362.,
      364., 362., 181., 182., 181., 182., 181., 182., 181., 362., 364., 362.,
      364., 362., 364., 362., 181., 182., 181., 182., 181., 182., 181., 362.,
      364., 362., 364., 362., 364., 362., 181., 182., 181., 182., 181., 182.,
      181., 362., 364., 362., 364., 362., 364., 362., 181., 182., 181., 182.,
      181., 182., 181., 362., 364., 362., 364., 362., 364., 362., 181., 182.,
      181., 182., 181., 182., 181., 362., 364., 362., 364., 362., 364., 362.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      350., 280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350., 280.,
      350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550., 440.,
      550., 440., 550., 440., 550., 350., 280., 350., 280., 350., 280., 350.,
      210., 168., 210., 168., 210., 168., 210., 330., 264., 330., 264., 330.,
      264., 330., 330., 264., 330., 264., 330., 264., 330., 210., 168., 210.,
      168., 210., 168., 210., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x15x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 73.,  146., 73.,  146., 74.,  148., 74.,  148.,
      73.,  146., 73.,  146., 74.,  148., 74.,  148., 73.,  146., 73.,  146.,
      74.,  148., 74.,  148., 73.,  146., 73.,  146., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 181., 362., 181., 362.,
      182., 364., 182., 364., 181., 362., 181., 362., 182., 364., 182., 364.,
      181., 362., 181., 362., 182., 364., 182., 364., 181., 362., 181., 362.,
      115., 230., 115., 230., 116., 232., 116., 232., 115., 230., 115., 230.,
      116., 232., 116., 232., 115., 230., 115., 230., 116., 232., 116., 232.,
      115., 230., 115., 230., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x18x15x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      350., 280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350., 280.,
      350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550., 440.,
      550., 440., 550., 440., 550., 350., 280., 350., 280., 350., 280., 350.,
      210., 168., 210., 168., 210., 168., 210., 330., 264., 330., 264., 330.,
      264., 330., 330., 264., 330., 264., 330., 264., 330., 210., 168., 210.,
      168., 210., 168., 210., 245., 196., 245., 196., 245., 196., 245., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308.,
      385., 308., 385., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 350., 280., 350., 280., 350., 280., 350., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 18, 15, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x18x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      400., 320., 400., 320., 400., 320., 400., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 240., 192., 240., 192., 240., 192., 240., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 400., 320., 400., 320.,
      400., 320., 400., 550., 440., 550., 440., 550., 440., 550., 550., 440.,
      550., 440., 550., 440., 550., 350., 280., 350., 280., 350., 280., 350.,
      240., 192., 240., 192., 240., 192., 240., 330., 264., 330., 264., 330.,
      264., 330., 330., 264., 330., 264., 330., 264., 330., 210., 168., 210.,
      168., 210., 168., 210., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 400., 320., 400., 320., 400., 320., 400., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 350., 280., 350., 280., 350., 280., 350., 240., 192., 240., 192.,
      240., 192., 240., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x16x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168., 84.,  168.,
      84.,  168., 84.,  168., 84.,  168., 84.,  168., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 132., 264., 132., 264., 132., 264., 132., 264.,
      132., 264., 132., 264., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 120., 240., 120., 240.,
      120., 240., 120., 240., 120., 240., 120., 240., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144., 72.,  144.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x18x16x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      280., 224., 280., 224., 280., 224., 280., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 245., 196., 245.,
      196., 245., 196., 245., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      400., 320., 400., 320., 400., 320., 400., 550., 440., 550., 440., 550.,
      440., 550., 550., 440., 550., 440., 550., 440., 550., 350., 280., 350.,
      280., 350., 280., 350., 240., 192., 240., 192., 240., 192., 240., 330.,
      264., 330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264.,
      330., 210., 168., 210., 168., 210., 168., 210., 280., 224., 280., 224.,
      280., 224., 280., 385., 308., 385., 308., 385., 308., 385., 385., 308.,
      385., 308., 385., 308., 385., 245., 196., 245., 196., 245., 196., 245.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 440., 352., 440., 352., 440., 352., 440., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 385., 308., 385., 308., 385., 308., 385., 400., 320., 400., 320.,
      400., 320., 400., 550., 440., 550., 440., 550., 440., 550., 550., 440.,
      550., 440., 550., 440., 550., 350., 280., 350., 280., 350., 280., 350.,
      240., 192., 240., 192., 240., 192., 240., 330., 264., 330., 264., 330.,
      264., 330., 330., 264., 330., 264., 330., 264., 330., 210., 168., 210.,
      168., 210., 168., 210., 280., 224., 280., 224., 280., 224., 280., 385.,
      308., 385., 308., 385., 308., 385., 385., 308., 385., 308., 385., 308.,
      385., 245., 196., 245., 196., 245., 196., 245., 440., 352., 440., 352.,
      440., 352., 440., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 385., 308., 385., 308., 385., 308., 385.,
      440., 352., 440., 352., 440., 352., 440., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 385., 308., 385.,
      308., 385., 308., 385., 400., 320., 400., 320., 400., 320., 400., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 350., 280., 350., 280., 350., 280., 350., 240., 192., 240., 192.,
      240., 192., 240., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 210., 168., 210., 168., 210., 168., 210.};
  const std::array<int, 4> in_shape = {{3, 18, 16, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDHWCFINTERLEAVED3x18x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.,
      176., 187., 176., 187., 176., 187., 176., 352., 374., 352., 374., 352.,
      374., 352., 176., 187., 176., 187., 176., 187., 176., 352., 374., 352.,
      374., 352., 374., 352., 176., 187., 176., 187., 176., 187., 176., 352.,
      374., 352., 374., 352., 374., 352., 176., 187., 176., 187., 176., 187.,
      176., 352., 374., 352., 374., 352., 374., 352., 176., 187., 176., 187.,
      176., 187., 176., 352., 374., 352., 374., 352., 374., 352., 176., 187.,
      176., 187., 176., 187., 176., 352., 374., 352., 374., 352., 374., 352.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 350., 280., 350.,
      280., 350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550.,
      440., 550., 440., 550., 440., 550., 500., 400., 500., 400., 500., 400.,
      500., 300., 240., 300., 240., 300., 240., 300., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 300., 240., 300., 240., 300., 240., 300.,
      180., 144., 180., 144., 180., 144., 180., 245., 196., 245., 196., 245.,
      196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385.,
      308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350., 210.,
      168., 210., 168., 210., 168., 210., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308., 385.,
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264., 330.,
      264., 330., 264., 330., 350., 280., 350., 280., 350., 280., 350., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 500., 400., 500., 400., 500., 400., 500., 300., 240., 300., 240.,
      300., 240., 300., 210., 168., 210., 168., 210., 168., 210., 330., 264.,
      330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264., 330.,
      300., 240., 300., 240., 300., 240., 300., 180., 144., 180., 144., 180.,
      144., 180., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350.,
      280., 350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168.,
      210., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550., 440.,
      550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264., 330.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550.,
      440., 550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 350.,
      280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550., 440.,
      550., 550., 440., 550., 440., 550., 440., 550., 500., 400., 500., 400.,
      500., 400., 500., 300., 240., 300., 240., 300., 240., 300., 210., 168.,
      210., 168., 210., 168., 210., 330., 264., 330., 264., 330., 264., 330.,
      330., 264., 330., 264., 330., 264., 330., 300., 240., 300., 240., 300.,
      240., 300., 180., 144., 180., 144., 180., 144., 180.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, VALIDFHWCSTRIDED3x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605.,
      484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605.,
      484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 605., 484.,
      605., 484., 605., 484., 605., 605., 484., 605., 484., 605., 484., 605.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFSTRIDED3x18x18x7x28) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 70.,  140., 70.,  140.,
      77.,  154., 77.,  154., 70.,  140., 70.,  140., 77.,  154., 77.,  154.,
      70.,  140., 70.,  140., 77.,  154., 77.,  154., 70.,  140., 70.,  140.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 112., 224., 112., 224., 119., 238., 119., 238.,
      112., 224., 112., 224., 119., 238., 119., 238., 112., 224., 112., 224.,
      119., 238., 119., 238., 112., 224., 112., 224., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      105., 210., 105., 210., 105., 210., 105., 210., 105., 210., 105., 210.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126., 63.,  126.,
      63.,  126., 63.,  126., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      110., 220., 110., 220., 121., 242., 121., 242., 110., 220., 110., 220.,
      121., 242., 121., 242., 110., 220., 110., 220., 121., 242., 121., 242.,
      110., 220., 110., 220., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 176., 352., 176., 352.,
      187., 374., 187., 374., 176., 352., 176., 352., 187., 374., 187., 374.,
      176., 352., 176., 352., 187., 374., 187., 374., 176., 352., 176., 352.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 165., 330., 165., 330., 165., 330., 165., 330.,
      165., 330., 165., 330., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198., 99.,  198.,
      99.,  198., 99.,  198., 99.,  198., 99.,  198., 100., 200., 100., 200.,
      110., 220., 110., 220., 100., 200., 100., 200., 110., 220., 110., 220.,
      100., 200., 100., 200., 110., 220., 110., 220., 100., 200., 100., 200.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 160., 320., 160., 320., 170., 340., 170., 340.,
      160., 320., 160., 320., 170., 340., 170., 340., 160., 320., 160., 320.,
      170., 340., 170., 340., 160., 320., 160., 320., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      150., 300., 150., 300., 150., 300., 150., 300., 150., 300., 150., 300.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 60.,  120., 60.,  120., 66.,  132., 66.,  132.,
      60.,  120., 60.,  120., 66.,  132., 66.,  132., 60.,  120., 60.,  120.,
      66.,  132., 66.,  132., 60.,  120., 60.,  120., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      96.,  192., 96.,  192., 102., 204., 102., 204., 96.,  192., 96.,  192.,
      102., 204., 102., 204., 96.,  192., 96.,  192., 102., 204., 102., 204.,
      96.,  192., 96.,  192., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180., 90.,  180.,
      90.,  180., 90.,  180., 90.,  180., 90.,  180., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.,
      54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108., 54.,  108.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 7}};
  const int features = 28;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow11Stride4Groups7, SAMEHWCFINTERLEAVED3x18x18x14x7) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 196., 245., 385., 308., 385., 308., 385.,
      308., 385., 385., 308., 385., 308., 385., 308., 385., 350., 280., 350.,
      280., 350., 280., 350., 210., 168., 210., 168., 210., 168., 210., 385.,
      308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484.,
      605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440.,
      550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 385., 308.,
      385., 308., 385., 308., 385., 605., 484., 605., 484., 605., 484., 605.,
      605., 484., 605., 484., 605., 484., 605., 550., 440., 550., 440., 550.,
      440., 550., 330., 264., 330., 264., 330., 264., 330., 350., 280., 350.,
      280., 350., 280., 350., 550., 440., 550., 440., 550., 440., 550., 550.,
      440., 550., 440., 550., 440., 550., 500., 400., 500., 400., 500., 400.,
      500., 300., 240., 300., 240., 300., 240., 300., 210., 168., 210., 168.,
      210., 168., 210., 330., 264., 330., 264., 330., 264., 330., 330., 264.,
      330., 264., 330., 264., 330., 300., 240., 300., 240., 300., 240., 300.,
      180., 144., 180., 144., 180., 144., 180., 245., 196., 245., 196., 245.,
      196., 245., 385., 308., 385., 308., 385., 308., 385., 385., 308., 385.,
      308., 385., 308., 385., 350., 280., 350., 280., 350., 280., 350., 210.,
      168., 210., 168., 210., 168., 210., 385., 308., 385., 308., 385., 308.,
      385., 605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484.,
      605., 484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264.,
      330., 264., 330., 264., 330., 385., 308., 385., 308., 385., 308., 385.,
      605., 484., 605., 484., 605., 484., 605., 605., 484., 605., 484., 605.,
      484., 605., 550., 440., 550., 440., 550., 440., 550., 330., 264., 330.,
      264., 330., 264., 330., 350., 280., 350., 280., 350., 280., 350., 550.,
      440., 550., 440., 550., 440., 550., 550., 440., 550., 440., 550., 440.,
      550., 500., 400., 500., 400., 500., 400., 500., 300., 240., 300., 240.,
      300., 240., 300., 210., 168., 210., 168., 210., 168., 210., 330., 264.,
      330., 264., 330., 264., 330., 330., 264., 330., 264., 330., 264., 330.,
      300., 240., 300., 240., 300., 240., 300., 180., 144., 180., 144., 180.,
      144., 180., 245., 196., 245., 196., 245., 196., 245., 385., 308., 385.,
      308., 385., 308., 385., 385., 308., 385., 308., 385., 308., 385., 350.,
      280., 350., 280., 350., 280., 350., 210., 168., 210., 168., 210., 168.,
      210., 385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484.,
      605., 484., 605., 605., 484., 605., 484., 605., 484., 605., 550., 440.,
      550., 440., 550., 440., 550., 330., 264., 330., 264., 330., 264., 330.,
      385., 308., 385., 308., 385., 308., 385., 605., 484., 605., 484., 605.,
      484., 605., 605., 484., 605., 484., 605., 484., 605., 550., 440., 550.,
      440., 550., 440., 550., 330., 264., 330., 264., 330., 264., 330., 350.,
      280., 350., 280., 350., 280., 350., 550., 440., 550., 440., 550., 440.,
      550., 550., 440., 550., 440., 550., 440., 550., 500., 400., 500., 400.,
      500., 400., 500., 300., 240., 300., 240., 300., 240., 300., 210., 168.,
      210., 168., 210., 168., 210., 330., 264., 330., 264., 330., 264., 330.,
      330., 264., 330., 264., 330., 264., 330., 300., 240., 300., 240., 300.,
      240., 300., 180., 144., 180., 144., 180., 144., 180.};
  const std::array<int, 4> in_shape = {{3, 18, 18, 14}};
  const int features = 7;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
