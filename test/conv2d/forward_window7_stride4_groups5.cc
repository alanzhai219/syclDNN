/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_grouped_conv2d_tests.py.
// Results calculated using Tensorflow v2.8.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_triple.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/group_convolution_fixture.h"
#include "test/conv2d/selector_list.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using TestTriples = sycldnn::types::NestedPairsToTriple<BackendTypePairs>::type;

using GTestTypeTriples = sycldnn::types::ToGTestTypes<TestTriples>::type;

template <typename Triple>
using ForwardWindow7Stride4Groups5 = GroupWindowStrideTest<Triple, 7, 4, 5>;
TYPED_TEST_SUITE(ForwardWindow7Stride4Groups5, GTestTypeTriples);
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x11x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x11x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x11x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x11x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x12x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 74., 148., 74., 148.,
      73., 146., 73., 146., 74., 148., 74., 148., 73., 146., 73., 146.,
      74., 148., 74., 148., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x12x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180., 144., 180., 144., 180., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54., 108., 54., 108., 54., 108., 54., 108., 54., 108., 54., 108.,
      54., 108., 54., 108., 54., 108., 54., 108., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      66., 132., 66., 132., 48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  48., 96.,  48., 96.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180., 144., 180., 144., 180., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125.};
  const std::array<int, 4> in_shape = {{1, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x12x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x12x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42., 84.,  42., 84.,  48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  60., 120., 60., 120.,
      66., 132., 66., 132., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x14x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x14x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  32., 64.,  32., 64.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{1, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED1x14x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      100., 80.,  100., 80.,  100., 140., 112., 140., 112., 140., 140., 112.,
      140., 112., 140., 80.,  64.,  80.,  64.,  80.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED1x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.,
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED1x14x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  56., 112., 56., 112., 49., 98.,  49., 98.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      28., 56.,  28., 56.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED1x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      100., 80.,  100., 80.,  100., 140., 112., 140., 112., 140., 140., 112.,
      140., 112., 140., 80.,  64.,  80.,  64.,  80.};
  const std::array<int, 4> in_shape = {{1, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x11x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 74.,  73.,  74.,  73.,
      74.,  148., 146., 148., 146., 148., 74.,  73.,  74.,  73.,  74.,  148.,
      146., 148., 146., 148., 74.,  73.,  74.,  73.,  74.,  148., 146., 148.,
      146., 148., 74.,  73.,  74.,  73.,  74.,  148., 146., 148., 146., 148.,
      74.,  73.,  74.,  73.,  74.,  148., 146., 148., 146., 148., 74.,  73.,
      74.,  73.,  74.,  148., 146., 148., 146., 148., 74.,  73.,  74.,  73.,
      74.,  148., 146., 148., 146., 148., 74.,  73.,  74.,  73.,  74.,  148.,
      146., 148., 146., 148., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 125., 100., 125.,
      100., 125., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 74., 148., 74., 148.,
      73., 146., 73., 146., 74., 148., 74., 148., 73., 146., 73., 146.,
      74., 148., 74., 148., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x11x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 125., 100., 125.,
      100., 125., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 11, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x11x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 150., 120., 150.,
      120., 150., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125.,
      210., 168., 210., 168., 210., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 150., 120., 150., 120., 150., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 210., 168., 210.,
      168., 210., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x11x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 150., 120., 150.,
      120., 150., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125.,
      210., 168., 210., 168., 210., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 150., 120., 150., 120., 150., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 210., 168., 210.,
      168., 210., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 11, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x11x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x11x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x11x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 11, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x12x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 150., 120., 150.,
      120., 150., 210., 168., 210., 168., 210., 150., 120., 150., 120., 150.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 150., 120., 150., 120., 150., 210.,
      168., 210., 168., 210., 150., 120., 150., 120., 150., 175., 140., 175.,
      140., 175., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 74., 148., 74., 148.,
      73., 146., 73., 146., 74., 148., 74., 148., 73., 146., 73., 146.,
      74., 148., 74., 148., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 74., 148., 74., 148.,
      73., 146., 73., 146., 74., 148., 74., 148., 73., 146., 73., 146.,
      74., 148., 74., 148., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 74., 148., 74., 148.,
      73., 146., 73., 146., 74., 148., 74., 148., 73., 146., 73., 146.,
      74., 148., 74., 148., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  38., 76.,  38., 76.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x12x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 125., 100., 125., 100., 125., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 150., 120., 150.,
      120., 150., 210., 168., 210., 168., 210., 150., 120., 150., 120., 150.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 125., 100., 125., 100., 125., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 150., 120., 150., 120., 150., 210.,
      168., 210., 168., 210., 150., 120., 150., 120., 150., 175., 140., 175.,
      140., 175., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 12, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x12x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180., 144., 180., 144., 180., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 180., 144., 180.,
      144., 180., 210., 168., 210., 168., 210., 150., 120., 150., 120., 150.,
      210., 168., 210., 168., 210., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 150., 120., 150., 120., 150., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 180., 144., 180., 144., 180., 210.,
      168., 210., 168., 210., 150., 120., 150., 120., 150., 210., 168., 210.,
      168., 210., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54., 108., 54., 108., 54., 108., 54., 108., 54., 108., 54., 108.,
      54., 108., 54., 108., 54., 108., 54., 108., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      66., 132., 66., 132., 48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  48., 96.,  48., 96.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      54., 108., 54., 108., 54., 108., 54., 108., 54., 108., 54., 108.,
      54., 108., 54., 108., 54., 108., 54., 108., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      66., 132., 66., 132., 48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  48., 96.,  48., 96.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      54., 108., 54., 108., 54., 108., 54., 108., 54., 108., 54., 108.,
      54., 108., 54., 108., 54., 108., 54., 108., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      66., 132., 66., 132., 48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  48., 96.,  48., 96.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x12x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      180., 144., 180., 144., 180., 210., 168., 210., 168., 210., 150., 120.,
      150., 120., 150., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 150., 120., 150., 120., 150., 175.,
      140., 175., 140., 175., 125., 100., 125., 100., 125., 180., 144., 180.,
      144., 180., 210., 168., 210., 168., 210., 150., 120., 150., 120., 150.,
      210., 168., 210., 168., 210., 245., 196., 245., 196., 245., 175., 140.,
      175., 140., 175., 150., 120., 150., 120., 150., 175., 140., 175., 140.,
      175., 125., 100., 125., 100., 125., 180., 144., 180., 144., 180., 210.,
      168., 210., 168., 210., 150., 120., 150., 120., 150., 210., 168., 210.,
      168., 210., 245., 196., 245., 196., 245., 175., 140., 175., 140., 175.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125.};
  const std::array<int, 4> in_shape = {{3, 12, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x12x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x12x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      42., 84.,  42., 84.,  48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  60., 120., 60., 120.,
      66., 132., 66., 132., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      42., 84.,  42., 84.,  48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  60., 120., 60., 120.,
      66., 132., 66., 132., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      42., 84.,  42., 84.,  48., 96.,  48., 96.,  42., 84.,  42., 84.,
      48., 96.,  48., 96.,  42., 84.,  42., 84.,  60., 120., 60., 120.,
      66., 132., 66., 132., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 60., 120., 60., 120., 66., 132., 66., 132.,
      60., 120., 60., 120., 66., 132., 66., 132., 60., 120., 60., 120.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x12x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 210., 168., 210., 168., 210., 210., 168.,
      210., 168., 210., 120., 96.,  120., 96.,  120., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 12, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x14x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.,
      73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,
      73.,  74.,  73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,
      73.,  146., 148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146.,
      148., 146., 148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146.,
      148., 146., 73.,  74.,  73.,  74.,  73.,  146., 148., 146., 148., 146.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x11x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      38., 76.,  38., 76.,  37., 74.,  37., 74.,  52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 37., 74.,  37., 74.,  38., 76.,  38., 76.,
      37., 74.,  37., 74.,  38., 76.,  38., 76.,  37., 74.,  37., 74.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      53., 106., 53., 106., 52., 104., 52., 104., 73., 146., 73., 146.,
      74., 148., 74., 148., 73., 146., 73., 146., 74., 148., 74., 148.,
      73., 146., 73., 146., 52., 104., 52., 104., 53., 106., 53., 106.,
      52., 104., 52., 104., 53., 106., 53., 106., 52., 104., 52., 104.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x14x11x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 175., 140., 175., 140., 175., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 100., 80.,  100.,
      80.,  100., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 14, 11, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x14x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x12x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  32., 64.,  32., 64.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  32., 64.,  32., 64.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,  45., 90.,
      45., 90.,  45., 90.,  45., 90.,  45., 90.,  55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      63., 126., 63., 126., 63., 126., 63., 126., 63., 126., 63., 126.,
      63., 126., 63., 126., 63., 126., 63., 126., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,  36., 72.,
      36., 72.,  36., 72.,  36., 72.,  36., 72.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  32., 64.,  32., 64.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x14x12x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.,
      150., 120., 150., 120., 150., 175., 140., 175., 140., 175., 125., 100.,
      125., 100., 125., 210., 168., 210., 168., 210., 245., 196., 245., 196.,
      245., 175., 140., 175., 140., 175., 210., 168., 210., 168., 210., 245.,
      196., 245., 196., 245., 175., 140., 175., 140., 175., 120., 96.,  120.,
      96.,  120., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,  100.};
  const std::array<int, 4> in_shape = {{3, 14, 12, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDHWCFINTERLEAVED3x14x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.,
      70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,
      70.,  77.,  70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,
      70.,  140., 154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140.,
      154., 140., 154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140.,
      154., 140., 70.,  77.,  70.,  77.,  70.,  140., 154., 140., 154., 140.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      100., 80.,  100., 80.,  100., 140., 112., 140., 112., 140., 140., 112.,
      140., 112., 140., 80.,  64.,  80.,  64.,  80.,  125., 100., 125., 100.,
      125., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 100.,
      80.,  100., 80.,  100., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,
      100., 140., 112., 140., 112., 140., 140., 112., 140., 112., 140., 80.,
      64.,  80.,  64.,  80.,  125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 140., 112., 140., 112., 140., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 100., 80.,  100., 80.,  100., 140., 112., 140.,
      112., 140., 140., 112., 140., 112., 140., 80.,  64.,  80.,  64.,  80.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, VALIDFHWCSTRIDED3x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196.,
      245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 245.,
      196., 245., 196., 245., 245., 196., 245., 196., 245., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::VALID;
  const auto filter_format = sycldnn::FilterFormat::FHWC;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFSTRIDED3x14x14x5x20) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  56., 112., 56., 112., 49., 98.,  49., 98.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      28., 56.,  28., 56.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.,  35., 70.,  35., 70.,
      40., 80.,  40., 80.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  56., 112., 56., 112., 49., 98.,  49., 98.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      49., 98.,  49., 98.,  56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  28., 56.,  28., 56.,
      32., 64.,  32., 64.,  28., 56.,  28., 56.,  32., 64.,  32., 64.,
      28., 56.,  28., 56.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  40., 80.,  40., 80.,  24., 48.,  24., 48.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,
      24., 48.,  24., 48.,  35., 70.,  35., 70.,  40., 80.,  40., 80.,
      35., 70.,  35., 70.,  40., 80.,  40., 80.,  35., 70.,  35., 70.,
      50., 100., 50., 100., 55., 110., 55., 110., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 50., 100., 50., 100.,
      55., 110., 55., 110., 50., 100., 50., 100., 55., 110., 55., 110.,
      50., 100., 50., 100., 30., 60.,  30., 60.,  30., 60.,  30., 60.,
      30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,  30., 60.,
      49., 98.,  49., 98.,  56., 112., 56., 112., 49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  49., 98.,  49., 98.,
      56., 112., 56., 112., 49., 98.,  49., 98.,  56., 112., 56., 112.,
      49., 98.,  49., 98.,  70., 140., 70., 140., 77., 154., 77., 154.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      70., 140., 70., 140., 77., 154., 77., 154., 70., 140., 70., 140.,
      77., 154., 77., 154., 70., 140., 70., 140., 42., 84.,  42., 84.,
      42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,  42., 84.,
      42., 84.,  42., 84.,  28., 56.,  28., 56.,  32., 64.,  32., 64.,
      28., 56.,  28., 56.,  32., 64.,  32., 64.,  28., 56.,  28., 56.,
      40., 80.,  40., 80.,  44., 88.,  44., 88.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  40., 80.,  40., 80.,  40., 80.,  40., 80.,
      44., 88.,  44., 88.,  40., 80.,  40., 80.,  44., 88.,  44., 88.,
      40., 80.,  40., 80.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,
      24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.,  24., 48.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 5}};
  const int features = 20;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::STRIDED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
TYPED_TEST(ForwardWindow7Stride4Groups5, SAMEHWCFINTERLEAVED3x14x14x10x5) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      125., 100., 125., 100., 125., 175., 140., 175., 140., 175., 175., 140.,
      175., 140., 175., 100., 80.,  100., 80.,  100., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      100., 80.,  100., 80.,  100., 140., 112., 140., 112., 140., 140., 112.,
      140., 112., 140., 80.,  64.,  80.,  64.,  80.,  125., 100., 125., 100.,
      125., 175., 140., 175., 140., 175., 175., 140., 175., 140., 175., 100.,
      80.,  100., 80.,  100., 175., 140., 175., 140., 175., 245., 196., 245.,
      196., 245., 245., 196., 245., 196., 245., 140., 112., 140., 112., 140.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 140., 112., 140., 112., 140., 100., 80.,  100., 80.,
      100., 140., 112., 140., 112., 140., 140., 112., 140., 112., 140., 80.,
      64.,  80.,  64.,  80.,  125., 100., 125., 100., 125., 175., 140., 175.,
      140., 175., 175., 140., 175., 140., 175., 100., 80.,  100., 80.,  100.,
      175., 140., 175., 140., 175., 245., 196., 245., 196., 245., 245., 196.,
      245., 196., 245., 140., 112., 140., 112., 140., 175., 140., 175., 140.,
      175., 245., 196., 245., 196., 245., 245., 196., 245., 196., 245., 140.,
      112., 140., 112., 140., 100., 80.,  100., 80.,  100., 140., 112., 140.,
      112., 140., 140., 112., 140., 112., 140., 80.,  64.,  80.,  64.,  80.};
  const std::array<int, 4> in_shape = {{3, 14, 14, 10}};
  const int features = 5;
  const auto padding = sycldnn::PaddingMode::SAME;
  const auto filter_format = sycldnn::FilterFormat::HWCF;
  const auto group_format = sycldnn::BatchFormat::INTERLEAVED;
  const DataType max_input_val = 2.0;
  this->run_forward_test(exp_out, in_shape, features, padding, filter_format,
                         group_format, max_input_val);
}
