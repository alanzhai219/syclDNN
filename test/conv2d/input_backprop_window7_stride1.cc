/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_conv2d_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/data_format_types.h"
#include "test/types/kernel_data_types.h"
#include "test/types/nested_pairs_to_tuple4.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/conv2d/selector_list.h"
#include "test/conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Selectors = sycldnn::types::SelectorList;
using Backends = sycldnn::types::AllMatmulBackendTypes;
using DataFormats = sycldnn::types::DataFormatTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<Selectors, DataTypeList>::type;
using BackendTypePairs =
    sycldnn::types::CartesianProduct<SNNTypePairs, Backends>::type;
using DataFormatBackendTypePairs =
    sycldnn::types::CartesianProduct<BackendTypePairs, DataFormats>::type;
using TestTuple4 =
    sycldnn::types::NestedPairsToTuple4<DataFormatBackendTypePairs>::type;

using GTestTypeTuple4s = sycldnn::types::ToGTestTypes<TestTuple4>::type;

template <typename Tuple>
using InputBackpropWindow7Stride1 = WindowStrideTest<Tuple, 7, 1>;
TYPED_TEST_SUITE(InputBackpropWindow7Stride1, GTestTypeTuple4s);
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,
      3840.,  5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,
      6850.,  9185.,  11781., 14644., 15547., 14211., 12590., 10678.,
      11130., 14770., 18767., 23128., 24353., 22064., 19390., 16324.,
      16394., 21490., 26999., 32928., 34153., 30632., 26670., 22260.,
      20998., 27215., 33831., 40852., 42049., 37341., 32210., 26650.,
      23660., 30475., 37660., 45220., 46340., 40915., 35100., 28890.,
      24156., 30990., 38150., 45640., 46634., 41018., 35060., 28756.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,
      55.,  65.,  75.,  85.,  56.,  39.,  105., 115., 125., 135., 145.,
      155., 98.,  67.,  175., 185., 195., 205., 215., 225., 140., 95.,
      245., 255., 265., 275., 285., 295., 182., 123., 315., 325., 335.,
      345., 355., 365., 224., 151., 385., 395., 405., 415., 425., 435.,
      266., 129., 304., 311., 318., 325., 332., 339., 196.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,  19760.,  26272.,  33712.,  36904.,  34864.,  31800.,  27680.,
      29340.,  40025.,  52130.,  65695.,  70665.,  65510.,  58775.,  50420.,
      52784.,  70900.,  91080.,  113372., 120512., 110304., 97840.,  83072.,
      86268.,  114625., 145810., 179879., 189581., 171934., 151235., 127428.,
      127932., 167825., 210994., 257495., 267197., 239806., 208915., 174468.,
      164864., 213760., 265824., 321104., 330596., 293688., 253420., 209744.,
      186380., 240125., 296810., 356475., 365365., 322670., 276875., 227940.,
      190688., 244680., 301264., 360472., 368368., 324064., 277040., 227264.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,   224.,
      296.,  368.,  440.,  512.,  584.,  396.,  260.,  728.,  800.,  872.,
      944.,  1016., 1088., 704.,  456.,  1232., 1304., 1376., 1448., 1520.,
      1592., 1012., 652.,  1736., 1808., 1880., 1952., 2024., 2096., 1320.,
      848.,  2240., 2312., 2384., 2456., 2528., 2600., 1628., 1044., 2744.,
      2816., 2888., 2960., 3032., 3104., 1936., 941.,  2246., 2298., 2350.,
      2402., 2454., 2506., 1463.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,  153640.,  204656.,  263032.,  288344.,  272816.,  249160.,
      217120.,  229240.,  313150.,  408340.,  515130.,  554610.,  514660.,
      462150.,  396760.,  414256.,  556940.,  716040.,  891940.,  948724.,
      868968.,  771260.,  655216.,  679112.,  902930.,  1149260., 1418550.,
      1495774., 1357244., 1194410., 1006824., 1010632., 1326290., 1668044.,
      2036342., 2113566., 1897532., 1653610., 1381352., 1306480., 1694300.,
      2107368., 2546068., 2621668., 2329416., 2010380., 1664176., 1479480.,
      1906350., 2356660., 2830730., 2901570., 2562820., 2199350., 1810840.,
      1515296., 1944520., 2394416., 2865240., 2928184., 2576240., 2202600.,
      1807008.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   284.,   428.,   572.,   716.,   860.,   694.,
      420.,  1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,
      1876., 5384.,  5928.,  6472.,  7016.,  7560.,  8104.,  5316.,
      3332., 9192.,  9736.,  10280., 10824., 11368., 11912., 7668.,
      4788., 13000., 13544., 14088., 14632., 15176., 15720., 10020.,
      6244., 16808., 17352., 17896., 18440., 18984., 19528., 12372.,
      7700., 20616., 21160., 21704., 22248., 22792., 23336., 14724.,
      7166., 17228., 17628., 18028., 18428., 18828., 19228., 11286.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,  3752.,  4920.,  5220.,  6544.,  6916.,  8400.,  8848.,  9184.,
      9660.,  8680.,  9100.,  7920.,  8280.,  6896.,  7192.,  7310.,  7680.,
      9975.,  10450., 12995., 13580., 16380., 17080., 17605., 18340., 16325.,
      16970., 14650., 15200., 12570., 13020., 13160., 13700., 17680., 18370.,
      22716., 23562., 28280., 29288., 30044., 31094., 27504., 28422., 24400.,
      25180., 20720., 21356., 21518., 22260., 28595., 29540., 36379., 37534.,
      44884., 46256., 47285., 48706., 42889., 44128., 37730., 38780., 31794.,
      32648., 31822., 32788., 41755., 42980., 52507., 53998., 64092., 65856.,
      66493., 68306., 59689., 61264., 52010., 53340., 43442., 44520., 41072.,
      41996., 53260., 54430., 66240., 67662., 80024., 81704., 82376., 84098.,
      73188., 74682., 63160., 64420., 52280., 53300., 46470., 47320., 59875.,
      60950., 74015., 75320., 88900., 90440., 91105., 92680., 80465., 81830.,
      69050., 70200., 56850., 57780., 47568., 48312., 61040., 61980., 75160.,
      76300., 89936., 91280., 91896., 93268., 80848., 82036., 69120., 70120.,
      56704., 57512.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  14.,  17.,  20.,  23.,  26.,  29.,  32.,
      35.,  38.,  26.,  28.,  18.,  22.,  60.,  70.,  80.,  90.,  100., 110.,
      120., 130., 140., 150., 160., 170., 106., 112., 74.,  78.,  200., 210.,
      220., 230., 240., 250., 260., 270., 280., 290., 300., 310., 190., 196.,
      130., 134., 340., 350., 360., 370., 380., 390., 400., 410., 420., 430.,
      440., 450., 274., 280., 186., 190., 480., 490., 500., 510., 520., 530.,
      540., 550., 560., 570., 580., 590., 358., 364., 242., 246., 620., 630.,
      640., 650., 660., 670., 680., 690., 700., 710., 720., 730., 442., 448.,
      298., 302., 760., 770., 780., 790., 800., 810., 820., 830., 840., 850.,
      860., 870., 526., 532., 255., 258., 601., 608., 615., 622., 629., 636.,
      643., 650., 657., 664., 671., 678., 388., 392.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,  28736.,  37740.,  40100.,  50336.,  53264.,  64764.,  68292.,
      70980.,  74732.,  67232.,  70544.,  61460.,  64300.,  53600.,  55936.,
      56480.,  59400.,  77225.,  80975.,  100780., 105400., 127225., 132755.,
      136955., 142765., 127180., 132280., 114275., 118625., 98160.,  101720.,
      102352., 106624., 137690., 143150., 177120., 183816., 220738., 228718.,
      234766., 243082., 215136., 222408., 191030., 197210., 162352., 167392.,
      168112., 173992., 223615., 231105., 284732., 293888., 351575., 362453.,
      370685., 381955., 336476., 346304., 296205., 304535., 249760., 256536.,
      250096., 257768., 328335., 338065., 413084., 424928., 504455., 518469.,
      523565., 537971., 470204., 482720., 409885., 420455., 342496., 351064.,
      324208., 331552., 420530., 429830., 523152., 534456., 632170., 645526.,
      650902., 664594., 578448., 590328., 499310., 509330., 413392., 421504.,
      367680., 374440., 473825., 482375., 585820., 596200., 703745., 715995.,
      721315., 733845., 637180., 648040., 546875., 556025., 450320., 457720.,
      376928., 382848., 483740., 491220., 595712., 604784., 712908., 723604.,
      728532., 739452., 641024., 650480., 548100., 556060., 449696., 456128.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   88.,   108.,  128.,  148.,  168.,
      188.,  208.,  228.,  248.,  179.,  193.,  106.,  134.,  392.,  464.,
      536.,  608.,  680.,  752.,  824.,  896.,  968.,  1040., 1112., 1184.,
      758.,  802.,  498.,  526.,  1400., 1472., 1544., 1616., 1688., 1760.,
      1832., 1904., 1976., 2048., 2120., 2192., 1374., 1418., 890.,  918.,
      2408., 2480., 2552., 2624., 2696., 2768., 2840., 2912., 2984., 3056.,
      3128., 3200., 1990., 2034., 1282., 1310., 3416., 3488., 3560., 3632.,
      3704., 3776., 3848., 3920., 3992., 4064., 4136., 4208., 2606., 2650.,
      1674., 1702., 4424., 4496., 4568., 4640., 4712., 4784., 4856., 4928.,
      5000., 5072., 5144., 5216., 3222., 3266., 2066., 2094., 5432., 5504.,
      5576., 5648., 5720., 5792., 5864., 5936., 6008., 6080., 6152., 6224.,
      3838., 3882., 1865., 1887., 4452., 4504., 4556., 4608., 4660., 4712.,
      4764., 4816., 4868., 4920., 4972., 5024., 2903., 2933.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,  224800.,  295480.,  314200.,  394672.,  417904.,  508424.,
      536424.,  557928.,  587720.,  529072.,  555376.,  484120.,  506680.,
      422560.,  441120.,  443880.,  467080.,  607550.,  637350.,  793580.,
      830300.,  1002610., 1046570., 1080170., 1126370., 1003820., 1044380.,
      902550.,  937150.,  775720.,  804040.,  807152.,  841136.,  1086580.,
      1130020., 1398600., 1451880., 1743980., 1807484., 1855868., 1922060.,
      1701576., 1759464., 1511620., 1560820., 1285232., 1325360., 1328824.,
      1375640., 1768410., 1828050., 2252740., 2325652., 2782710., 2869342.,
      2935198., 3024966., 2665348., 2743636., 2347170., 2413530., 1979768.,
      2033752., 1982904., 2044056., 2603930., 2681490., 3276868., 3371284.,
      4002614., 4114334., 4155102., 4269958., 3732484., 3832276., 3254370.,
      3338650., 2719864., 2788184., 2576240., 2634800., 3342100., 3416260.,
      4158216., 4248360., 5025356., 5131868., 5174876., 5284076., 4599432.,
      4694184., 3970660., 4050580., 3287792., 3352496., 2925160., 2979080.,
      3769950., 3838150., 4661420., 4744220., 5600210., 5697930., 5740490.,
      5840450., 5071340., 5157980., 4352950., 4425950., 3584680., 3643720.,
      3000992., 3048224., 3851640., 3911320., 4743472., 4815856., 5677000.,
      5762344., 5801768., 5888904., 5105200., 5180656., 4365400., 4428920.,
      3581856., 3633184.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   612.,   756.,   900.,   1044.,
      1188.,  1332.,  1476.,  1620.,  1764.,  1318.,  1422.,  700.,   908.,
      2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  7144.,
      7688.,  8232.,  8776.,  5708.,  6044.,  3612.,  3820.,  10408., 10952.,
      11496., 12040., 12584., 13128., 13672., 14216., 14760., 15304., 15848.,
      16392., 10412., 10748., 6524.,  6732.,  18024., 18568., 19112., 19656.,
      20200., 20744., 21288., 21832., 22376., 22920., 23464., 24008., 15116.,
      15452., 9436.,  9644.,  25640., 26184., 26728., 27272., 27816., 28360.,
      28904., 29448., 29992., 30536., 31080., 31624., 19820., 20156., 12348.,
      12556., 33256., 33800., 34344., 34888., 35432., 35976., 36520., 37064.,
      37608., 38152., 38696., 39240., 24524., 24860., 15260., 15468., 40872.,
      41416., 41960., 42504., 43048., 43592., 44136., 44680., 45224., 45768.,
      46312., 46856., 29228., 29564., 14222., 14390., 34196., 34596., 34996.,
      35396., 35796., 36196., 36596., 36996., 37396., 37796., 38196., 38596.,
      22422., 22654.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,   7504.,   9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,  13832.,  16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,  19320.,  16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,  16560.,  13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,  15360.,  19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,  27160.,  32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,  36680.,  32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,  30400.,  24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,  27400.,  34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,  47124.,  55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,  62188.,  54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,  50360.,  40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,  44520.,  56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,  75068.,  88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,  97412.,  84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,  77560.,  62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,  65576.,  82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505., 107996., 126420., 128184., 129948., 131712.,
      131173., 132986., 134799., 136612., 117803., 119378., 120953., 122528.,
      102690., 104020., 105350., 106680., 85806.,  86884.,  87962.,  89040.,
      81220.,  82144.,  83068.,  83992.,  105350., 106520., 107690., 108860.,
      131058., 132480., 133902., 135324., 158368., 160048., 161728., 163408.,
      163030., 164752., 166474., 168196., 144882., 146376., 147870., 149364.,
      125060., 126320., 127580., 128840., 103540., 104560., 105580., 106600.,
      92090.,  92940.,  93790.,  94640.,  118675., 119750., 120825., 121900.,
      146725., 148030., 149335., 150640., 176260., 177800., 179340., 180880.,
      180635., 182210., 183785., 185360., 159565., 160930., 162295., 163660.,
      136950., 138100., 139250., 140400., 112770., 113700., 114630., 115560.,
      94392.,  95136.,  95880.,  96624.,  121140., 122080., 123020., 123960.,
      149180., 150320., 151460., 152600., 178528., 179872., 181216., 182560.,
      182420., 183792., 185164., 186536., 160508., 161696., 162884., 164072.,
      137240., 138240., 139240., 140240., 112600., 113408., 114216., 115024.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,
      55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,
      54.,   56.,   32.,   36.,   40.,   44.,   110.,  120.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,
      250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,
      206.,  212.,  218.,  224.,  144.,  148.,  152.,  156.,  390.,  400.,
      410.,  420.,  430.,  440.,  450.,  460.,  470.,  480.,  490.,  500.,
      510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,
      610.,  620.,  374.,  380.,  386.,  392.,  256.,  260.,  264.,  268.,
      670.,  680.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,
      770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,
      870.,  880.,  890.,  900.,  542.,  548.,  554.,  560.,  368.,  372.,
      376.,  380.,  950.,  960.,  970.,  980.,  990.,  1000., 1010., 1020.,
      1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120.,
      1130., 1140., 1150., 1160., 1170., 1180., 710.,  716.,  722.,  728.,
      480.,  484.,  488.,  492.,  1230., 1240., 1250., 1260., 1270., 1280.,
      1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380.,
      1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460., 878.,  884.,
      890.,  896.,  592.,  596.,  600.,  604.,  1510., 1520., 1530., 1540.,
      1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640.,
      1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740.,
      1046., 1052., 1058., 1064., 507.,  510.,  513.,  516.,  1195., 1202.,
      1209., 1216., 1223., 1230., 1237., 1244., 1251., 1258., 1265., 1272.,
      1279., 1286., 1293., 1300., 1307., 1314., 1321., 1328., 1335., 1342.,
      1349., 1356., 772.,  776.,  780.,  784.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  642896.,
      650240.,  657584.,  664928.,  834070.,  843370.,  852670.,  861970.,
      1037808., 1049112., 1060416., 1071720., 1254302., 1267658., 1281014.,
      1294370., 1291514., 1305206., 1318898., 1332590., 1147968., 1159848.,
      1171728., 1183608., 991090.,  1001110., 1011130., 1021150., 820688.,
      828800.,  836912.,  845024.,  730280.,  737040.,  743800.,  750560.,
      941225.,  949775.,  958325.,  966875.,  1163840., 1174220., 1184600.,
      1194980., 1398285., 1410535., 1422785., 1435035., 1433215., 1445745.,
      1458275., 1470805., 1266200., 1277060., 1287920., 1298780., 1086875.,
      1096025., 1105175., 1114325., 895080.,  902480.,  909880.,  917280.,
      749408.,  755328.,  761248.,  767168.,  961860.,  969340.,  976820.,
      984300.,  1184608., 1193680., 1202752., 1211824., 1417780., 1428476.,
      1439172., 1449868., 1448860., 1459780., 1470700., 1481620., 1274944.,
      1284400., 1293856., 1303312., 1090220., 1098180., 1106140., 1114100.,
      894560.,  900992.,  907424.,  913856.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,
      320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,
      500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,
      728.,   800.,   872.,   944.,   1016.,  1088.,  1160.,  1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,
      2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,
      1614.,  974.,   1002.,  1030.,  1058.,  2744.,  2816.,  2888.,  2960.,
      3032.,  3104.,  3176.,  3248.,  3320.,  3392.,  3464.,  3536.,  3608.,
      3680.,  3752.,  3824.,  3896.,  3968.,  4040.,  4112.,  4184.,  4256.,
      4328.,  4400.,  2714.,  2758.,  2802.,  2846.,  1758.,  1786.,  1814.,
      1842.,  4760.,  4832.,  4904.,  4976.,  5048.,  5120.,  5192.,  5264.,
      5336.,  5408.,  5480.,  5552.,  5624.,  5696.,  5768.,  5840.,  5912.,
      5984.,  6056.,  6128.,  6200.,  6272.,  6344.,  6416.,  3946.,  3990.,
      4034.,  4078.,  2542.,  2570.,  2598.,  2626.,  6776.,  6848.,  6920.,
      6992.,  7064.,  7136.,  7208.,  7280.,  7352.,  7424.,  7496.,  7568.,
      7640.,  7712.,  7784.,  7856.,  7928.,  8000.,  8072.,  8144.,  8216.,
      8288.,  8360.,  8432.,  5178.,  5222.,  5266.,  5310.,  3326.,  3354.,
      3382.,  3410.,  8792.,  8864.,  8936.,  9008.,  9080.,  9152.,  9224.,
      9296.,  9368.,  9440.,  9512.,  9584.,  9656.,  9728.,  9800.,  9872.,
      9944.,  10016., 10088., 10160., 10232., 10304., 10376., 10448., 6410.,
      6454.,  6498.,  6542.,  4110.,  4138.,  4166.,  4194.,  10808., 10880.,
      10952., 11024., 11096., 11168., 11240., 11312., 11384., 11456., 11528.,
      11600., 11672., 11744., 11816., 11888., 11960., 12032., 12104., 12176.,
      12248., 12320., 12392., 12464., 7642.,  7686.,  7730.,  7774.,  3713.,
      3735.,  3757.,  3779.,  8864.,  8916.,  8968.,  9020.,  9072.,  9124.,
      9176.,  9228.,  9280.,  9332.,  9384.,  9436.,  9488.,  9540.,  9592.,
      9644.,  9696.,  9748.,  9800.,  9852.,  9904.,  9956.,  10008., 10060.,
      5783.,  5813.,  5843.,  5873.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      411552.,   426016.,   440480.,   454944.,   579160.,   597880.,
      616600.,   635320.,   774704.,   797936.,   821168.,   844400.,
      999208.,   1027208.,  1055208.,  1083208.,  1097096.,  1126888.,
      1156680.,  1186472.,  1041584.,  1067888.,  1094192.,  1120496.,
      954040.,   976600.,   999160.,   1021720.,  833440.,   852000.,
      870560.,   889120.,   873160.,   896360.,   919560.,   942760.,
      1196350.,  1226150.,  1255950.,  1285750.,  1564060.,  1600780.,
      1637500.,  1674220.,  1977570.,  2021530.,  2065490.,  2109450.,
      2131290.,  2177490.,  2223690.,  2269890.,  1982140.,  2022700.,
      2063260.,  2103820.,  1783350.,  1817950.,  1852550.,  1887150.,
      1533640.,  1561960.,  1590280.,  1618600.,  1592944.,  1626928.,
      1660912.,  1694896.,  2145860.,  2189300.,  2232740.,  2276180.,
      2763720.,  2817000.,  2870280.,  2923560.,  3448060.,  3511564.,
      3575068.,  3638572.,  3670156.,  3736348.,  3802540.,  3868732.,
      3366792.,  3424680.,  3482568.,  3540456.,  2992340.,  3041540.,
      3090740.,  3139940.,  2545264.,  2585392.,  2625520.,  2665648.,
      2628248.,  2675064.,  2721880.,  2768696.,  3499370.,  3559010.,
      3618650.,  3678290.,  4459700.,  4532612.,  4605524.,  4678436.,
      5511030.,  5597662.,  5684294.,  5770926.,  5814046.,  5903814.,
      5993582.,  6083350.,  5281556.,  5359844.,  5438132.,  5516420.,
      4652690.,  4719050.,  4785410.,  4851770.,  3925656.,  3979640.,
      4033624.,  4087608.,  3927448.,  3988600.,  4049752.,  4110904.,
      5159210.,  5236770.,  5314330.,  5391890.,  6494516.,  6588932.,
      6683348.,  6777764.,  7935158.,  8046878.,  8158598.,  8270318.,
      8238174.,  8353030.,  8467886.,  8582742.,  7402388.,  7502180.,
      7601972.,  7701764.,  6455890.,  6540170.,  6624450.,  6708730.,
      5396888.,  5465208.,  5533528.,  5601848.,  5115760.,  5174320.,
      5232880.,  5291440.,  6637700.,  6711860.,  6786020.,  6860180.,
      8259912.,  8350056.,  8440200.,  8530344.,  9983932.,  10090444.,
      10196956., 10303468., 10281292., 10390492., 10499692., 10608892.,
      9139464.,  9234216.,  9328968.,  9423720.,  7891220.,  7971140.,
      8051060.,  8130980.,  6535024.,  6599728.,  6664432.,  6729136.,
      5816520.,  5870440.,  5924360.,  5978280.,  7497150.,  7565350.,
      7633550.,  7701750.,  9270940.,  9353740.,  9436540.,  9519340.,
      11139170., 11236890., 11334610., 11432330., 11418330., 11518290.,
      11618250., 11718210., 10088380., 10175020., 10261660., 10348300.,
      8660150.,  8733150.,  8806150.,  8879150.,  7132360.,  7191400.,
      7250440.,  7309480.,  5972384.,  6019616.,  6066848.,  6114080.,
      7665880.,  7725560.,  7785240.,  7844920.,  9441584.,  9513968.,
      9586352.,  9658736.,  11300520., 11385864., 11471208., 11556552.,
      11548936., 11636072., 11723208., 11810344., 10163120., 10238576.,
      10314032., 10389488., 8691000.,  8754520.,  8818040.,  8881560.,
      7131552.,  7182880.,  7234208.,  7285536.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    110.,   150.,   260.,   404.,   548.,   692.,   836.,
      980.,   1124.,  1268.,  1412.,  1556.,  1700.,  1844.,  1988.,  2132.,
      2276.,  2420.,  2564.,  2708.,  2852.,  2996.,  3140.,  3284.,  3428.,
      3572.,  2566.,  2670.,  2774.,  2878.,  1260.,  1468.,  1676.,  1884.,
      5224.,  5768.,  6312.,  6856.,  7400.,  7944.,  8488.,  9032.,  9576.,
      10120., 10664., 11208., 11752., 12296., 12840., 13384., 13928., 14472.,
      15016., 15560., 16104., 16648., 17192., 17736., 11196., 11532., 11868.,
      12204., 7084.,  7292.,  7500.,  7708.,  20456., 21000., 21544., 22088.,
      22632., 23176., 23720., 24264., 24808., 25352., 25896., 26440., 26984.,
      27528., 28072., 28616., 29160., 29704., 30248., 30792., 31336., 31880.,
      32424., 32968., 20604., 20940., 21276., 21612., 12908., 13116., 13324.,
      13532., 35688., 36232., 36776., 37320., 37864., 38408., 38952., 39496.,
      40040., 40584., 41128., 41672., 42216., 42760., 43304., 43848., 44392.,
      44936., 45480., 46024., 46568., 47112., 47656., 48200., 30012., 30348.,
      30684., 31020., 18732., 18940., 19148., 19356., 50920., 51464., 52008.,
      52552., 53096., 53640., 54184., 54728., 55272., 55816., 56360., 56904.,
      57448., 57992., 58536., 59080., 59624., 60168., 60712., 61256., 61800.,
      62344., 62888., 63432., 39420., 39756., 40092., 40428., 24556., 24764.,
      24972., 25180., 66152., 66696., 67240., 67784., 68328., 68872., 69416.,
      69960., 70504., 71048., 71592., 72136., 72680., 73224., 73768., 74312.,
      74856., 75400., 75944., 76488., 77032., 77576., 78120., 78664., 48828.,
      49164., 49500., 49836., 30380., 30588., 30796., 31004., 81384., 81928.,
      82472., 83016., 83560., 84104., 84648., 85192., 85736., 86280., 86824.,
      87368., 87912., 88456., 89000., 89544., 90088., 90632., 91176., 91720.,
      92264., 92808., 93352., 93896., 58236., 58572., 58908., 59244., 28334.,
      28502., 28670., 28838., 68132., 68532., 68932., 69332., 69732., 70132.,
      70532., 70932., 71332., 71732., 72132., 72532., 72932., 73332., 73732.,
      74132., 74532., 74932., 75332., 75732., 76132., 76532., 76932., 77332.,
      44694., 44926., 45158., 45390.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      18242., 23870., 29939., 36456., 37681., 38906., 34811., 30240., 25186.,
      23424., 30315., 37632., 45381., 46578., 47775., 42348., 36465., 30120.,
      26430., 34000., 41965., 50330., 51450., 52570., 46345., 39700., 32630.,
      27008., 34610., 42560., 50862., 51856., 52850., 46424., 39630., 32464.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  16.,  22.,  28.,  34.,  32.,  21.,  12.,  38.,  80.,
      101., 122., 143., 164., 138., 84.,  47.,  122., 227., 248., 269., 290.,
      311., 250., 147., 82.,  206., 374., 395., 416., 437., 458., 362., 210.,
      117., 290., 521., 542., 563., 584., 605., 474., 273., 152., 374., 668.,
      689., 710., 731., 752., 586., 336., 187., 458., 815., 836., 857., 878.,
      899., 698., 399., 172., 391., 658., 673., 688., 703., 718., 533., 294.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,  21540.,  28552.,  36540.,  39732.,  42924.,  40264.,  36500.,
      31600.,  32300.,  43925.,  57050.,  71715.,  76685.,  81655.,  75290.,
      67225.,  57420.,  58344.,  78150.,  100140., 124362., 131502., 138642.,
      126348., 111630., 94440.,  95620.,  126735., 160846., 198009., 207711.,
      217413., 196462., 172235., 144676., 142492., 186585., 234178., 285327.,
      295029., 304731., 272818., 237125., 197596., 184056., 238290., 295908.,
      356958., 366450., 375942., 333348., 287130., 237240., 208340., 268075.,
      330950., 397005., 405895., 414785., 365750., 313375., 257620., 213328.,
      273420., 336280., 401940., 409836., 417732., 367000., 313340., 256720.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   101.,  143.,  185.,  227.,  222.,  149.,
      70.,   244.,  538.,  694.,  850.,  1006., 1162., 996.,  614.,
      322.,  860.,  1630., 1786., 1942., 2098., 2254., 1836., 1090.,
      574.,  1476., 2722., 2878., 3034., 3190., 3346., 2676., 1566.,
      826.,  2092., 3814., 3970., 4126., 4282., 4438., 3516., 2042.,
      1078., 2708., 4906., 5062., 5218., 5374., 5530., 4356., 2518.,
      1330., 3324., 5998., 6154., 6310., 6466., 6622., 5196., 2994.,
      1283., 2938., 4973., 5087., 5201., 5315., 5429., 4050., 2243.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,  167640.,  222608.,  285320.,  310632.,  335944.,  315536.,
      286360.,  248160.,  252600.,  343950.,  447220.,  562730.,  602210.,
      641690.,  592180.,  529150.,  452280.,  458256.,  614340.,  787800.,
      979020.,  1035804., 1092588., 996312.,  880740.,  745488.,  753256.,
      998970.,  1268540., 1562414., 1639638., 1716862., 1552124., 1361290.,
      1143912., 1126216., 1475250., 1852172., 2257430., 2334654., 2411878.,
      2159948., 1877890., 1565256., 1459152., 1889460., 2346744., 2831388.,
      2906988., 2982588., 2645112., 2278740., 1883088., 1654360., 2128950.,
      2628580., 3153570., 3224410., 3295250., 2906020., 2490150., 2047320.,
      1695712., 2173560., 2673488., 3195752., 3258696., 3321640., 2918480.,
      2491960., 2041824.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   140.,   394.,   706.,   1018.,  1330.,  1642.,  1644.,  1118.,
      460.,  1720.,  3908.,  5108.,  6308.,  7508.,  8708.,  7544.,  4684.,
      2364., 6424.,  12308., 13508., 14708., 15908., 17108., 14040., 8380.,
      4268., 11128., 20708., 21908., 23108., 24308., 25508., 20536., 12076.,
      6172., 15832., 29108., 30308., 31508., 32708., 33908., 27032., 15772.,
      8076., 20536., 37508., 38708., 39908., 41108., 42308., 33528., 19468.,
      9980., 25240., 45908., 47108., 48308., 49508., 50708., 40024., 23164.,
      9894., 22748., 38626., 39514., 40402., 41290., 42178., 31548., 17510.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,  5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654., 11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,  8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075., 19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290., 14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975., 32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795., 28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075., 41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937., 50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375., 47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754., 77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  45816., 46848.,  59325.,  60630.,  73680.,  75264.,
      88893.,  90762.,  91245., 93156.,  93597.,  95550.,  83004.,  84696.,
      71505.,  72930.,  59088., 60240.,  51910.,  52860.,  66800.,  68000.,
      82475.,  83930.,  98945., 100660., 101150., 102900., 103355., 105140.,
      91145.,  92690.,  78100., 79400.,  64210.,  65260.,  53184.,  54016.,
      68170.,  69220.,  83848., 85120.,  100226., 101724., 102186., 103712.,
      104146., 105700., 91504., 92848.,  78130.,  79260.,  64016.,  64928.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   26.,   32.,   38.,   44.,
      50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,
      64.,   76.,   139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,
      307.,  328.,  260.,  276.,  159.,  168.,  89.,   94.,   232.,  244.,
      433.,  454.,  475.,  496.,  517.,  538.,  559.,  580.,  601.,  622.,
      484.,  500.,  285.,  294.,  159.,  164.,  400.,  412.,  727.,  748.,
      769.,  790.,  811.,  832.,  853.,  874.,  895.,  916.,  708.,  724.,
      411.,  420.,  229.,  234.,  568.,  580.,  1021., 1042., 1063., 1084.,
      1105., 1126., 1147., 1168., 1189., 1210., 932.,  948.,  537.,  546.,
      299.,  304.,  736.,  748.,  1315., 1336., 1357., 1378., 1399., 1420.,
      1441., 1462., 1483., 1504., 1156., 1172., 663.,  672.,  369.,  374.,
      904.,  916.,  1609., 1630., 1651., 1672., 1693., 1714., 1735., 1756.,
      1777., 1798., 1380., 1396., 789.,  798.,  340.,  344.,  773.,  782.,
      1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,
      1055., 1066., 582.,  588.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,  31440.,  41120.,  43720.,  54680.,  57896.,  70168.,  74032.,
      76384.,  80472.,  82600.,  86912.,  77672.,  81464.,  70560.,  73800.,
      61200.,  63856.,  62160.,  65400.,  84725.,  88875.,  110260., 115360.,
      138845., 144935., 148575., 154945., 158305., 164955., 146200., 152020.,
      130725., 135675., 111800., 115840., 113112., 117864., 151740., 157800.,
      194700., 202116., 242088., 250908., 256116., 265272., 270144., 279636.,
      246468., 254748., 217980., 225000., 184584., 190296., 186312., 192864.,
      247205., 255535., 314048., 324212., 386953., 399007., 406063., 418509.,
      425173., 438011., 384524., 395696., 337365., 346815., 283584., 291256.,
      278544., 287112., 365015., 375865., 458444., 471632., 558943., 574525.,
      578053., 594027., 597163., 613529., 534968., 549164., 465255., 477225.,
      387912., 397600., 361944., 370152., 468780., 479160., 582348., 594948.,
      702744., 717612., 721476., 736680., 740208., 755748., 656580., 670044.,
      565740., 577080., 467592., 476760., 411000., 418560., 528975., 538525.,
      653200., 664780., 783755., 797405., 801325., 815255., 818895., 833105.,
      722260., 734560., 618975., 629325., 508960., 517320., 421680., 428304.,
      540560., 548920., 664952., 675080., 794920., 806848., 810544., 822696.,
      826168., 838544., 725960., 736664., 619920., 628920., 507984., 515248.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   169.,   211.,   253.,
      295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,
      112.,   148.,   420.,   508.,   956.,   1112.,  1268.,  1424.,  1580.,
      1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,
      616.,   652.,   1652.,  1740.,  3140.,  3296.,  3452.,  3608.,  3764.,
      3920.,  4076.,  4232.,  4388.,  4544.,  3580.,  3700.,  2128.,  2196.,
      1120.,  1156.,  2884.,  2972.,  5324.,  5480.,  5636.,  5792.,  5948.,
      6104.,  6260.,  6416.,  6572.,  6728.,  5260.,  5380.,  3080.,  3148.,
      1624.,  1660.,  4116.,  4204.,  7508.,  7664.,  7820.,  7976.,  8132.,
      8288.,  8444.,  8600.,  8756.,  8912.,  6940.,  7060.,  4032.,  4100.,
      2128.,  2164.,  5348.,  5436.,  9692.,  9848.,  10004., 10160., 10316.,
      10472., 10628., 10784., 10940., 11096., 8620.,  8740.,  4984.,  5052.,
      2632.,  2668.,  6580.,  6668.,  11876., 12032., 12188., 12344., 12500.,
      12656., 12812., 12968., 13124., 13280., 10300., 10420., 5936.,  6004.,
      2543.,  2573.,  5824.,  5892.,  9859.,  9973.,  10087., 10201., 10315.,
      10429., 10543., 10657., 10771., 10885., 8036.,  8120.,  4451.,  4497.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,  246240.,  322280.,  342920.,  429136.,  454672.,  551320.,
      582008.,  600824.,  633304.,  650328.,  684600.,  612112.,  642256.,
      556520.,  582280.,  483040.,  504160.,  489000.,  514760.,  667150.,
      700150.,  868940.,  909500.,  1095010., 1143450., 1172570., 1223250.,
      1250130., 1303050., 1155260., 1201580., 1033550., 1072950., 884360.,
      916520.,  892752.,  930576.,  1198380., 1246620., 1538520., 1597560.,
      1913940., 1984164., 2025828., 2098740., 2137716., 2213316., 1951224.,
      2017176., 1726380., 1782300., 1462416., 1507920., 1473752., 1525944.,
      1956290., 2022650., 2486260., 2567236., 3064558., 3160598., 3217046.,
      3316222., 3369534., 3471846., 3048388., 3137428., 2675330., 2750650.,
      2249464., 2310616., 2209592., 2277912., 2896250., 2982770., 3638404.,
      3743572., 4436950., 4561214., 4589438., 4716838., 4741926., 4872462.,
      4248916., 4362148., 3695930., 3791410., 3082072., 3159352., 2877264.,
      2942736., 3727020., 3809820., 4630488., 4731000., 5588436., 5707044.,
      5737956., 5859252., 5887476., 6011460., 5222904., 5330328., 4500780.,
      4591260., 3720336., 3793488., 3270920., 3331240., 4210150., 4286350.,
      5199260., 5291660., 6238890., 6347810., 6379170., 6490330., 6519450.,
      6632850., 5750540., 5848700., 4928550., 5011150., 4052840., 4119560.,
      3358304., 3411168., 4305320., 4372040., 5296336., 5377168., 6331864.,
      6427064., 6456632., 6553624., 6581400., 6680184., 5783440., 5868880.,
      4938920., 5010760., 4047328., 4105312.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,    578.,    890.,   1202.,  1514.,  1826.,
      2138.,  2450.,  2762.,  3074.,   3386.,   3108.,  3380.,  2126.,  2294.,
      740.,   1012.,  3000.,  3672.,   7036.,   8236.,  9436.,  10636., 11836.,
      13036., 14236., 15436., 16636.,  17836.,  14488., 15416., 9028.,  9556.,
      4548.,  4820.,  12408., 13080.,  23836.,  25036., 26236., 27436., 28636.,
      29836., 31036., 32236., 33436.,  34636.,  27480., 28408., 16420., 16948.,
      8356.,  8628.,  21816., 22488.,  40636.,  41836., 43036., 44236., 45436.,
      46636., 47836., 49036., 50236.,  51436.,  40472., 41400., 23812., 24340.,
      12164., 12436., 31224., 31896.,  57436.,  58636., 59836., 61036., 62236.,
      63436., 64636., 65836., 67036.,  68236.,  53464., 54392., 31204., 31732.,
      15972., 16244., 40632., 41304.,  74236.,  75436., 76636., 77836., 79036.,
      80236., 81436., 82636., 83836.,  85036.,  66456., 67384., 38596., 39124.,
      19780., 20052., 50040., 50712.,  91036.,  92236., 93436., 94636., 95836.,
      97036., 98236., 99436., 100636., 101836., 79448., 80376., 45988., 46516.,
      19638., 19870., 45156., 45684.,  76682.,  77570., 78458., 79346., 80234.,
      81122., 82010., 82898., 83786.,  84674.,  62676., 63332., 34790., 35150.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,   7680.,   7936.,   8192.,   10370.,  10700.,  11030.,  11360.,
      13784.,  14192.,  14600.,  15008.,  17682.,  18172.,  18662.,  19152.,
      19222.,  19740.,  20258.,  20776.,  20762.,  21308.,  21854.,  22400.,
      19520.,  20000.,  20480.,  20960.,  17730.,  18140.,  18550.,  18960.,
      15376.,  15712.,  16048.,  16384.,  15650.,  16060.,  16470.,  16880.,
      21325.,  21850.,  22375.,  22900.,  27745.,  28390.,  29035.,  29680.,
      34930.,  35700.,  36470.,  37240.,  37345.,  38150.,  38955.,  39760.,
      39760.,  40600.,  41440.,  42280.,  36715.,  37450.,  38185.,  38920.,
      32825.,  33450.,  34075.,  34700.,  28070.,  28580.,  29090.,  29600.,
      28440.,  29040.,  29640.,  30240.,  38145.,  38910.,  39675.,  40440.,
      48936.,  49872.,  50808.,  51744.,  60837.,  61950.,  63063.,  64176.,
      64323.,  65478.,  66633.,  67788.,  67809.,  69006.,  70203.,  71400.,
      61860.,  62904.,  63948.,  64992.,  54705.,  55590.,  56475.,  57360.,
      46320.,  47040.,  47760.,  48480.,  46802.,  47628.,  48454.,  49280.,
      62090.,  63140.,  64190.,  65240.,  78869.,  80150.,  81431.,  82712.,
      97167.,  98686.,  100205., 101724., 101920., 103488., 105056., 106624.,
      106673., 108290., 109907., 111524., 96467.,  97874.,  99281.,  100688.,
      84630.,  85820.,  87010.,  88200.,  71134.,  72100.,  73066.,  74032.,
      69734.,  70812.,  71890.,  72968.,  91385.,  92750.,  94115.,  95480.,
      114779., 116438., 118097., 119756., 139944., 141904., 143864., 145824.,
      144697., 146706., 148715., 150724., 149450., 151508., 153566., 155624.,
      133889., 135674., 137459., 139244., 116445., 117950., 119455., 120960.,
      97090.,  98308.,  99526.,  100744., 90600.,  91632.,  92664.,  93696.,
      117345., 118650., 119955., 121260., 145776., 147360., 148944., 150528.,
      175917., 177786., 179655., 181524., 180579., 182490., 184401., 186312.,
      185241., 187194., 189147., 191100., 164316., 166008., 167700., 169392.,
      141585., 143010., 144435., 145860., 117024., 118176., 119328., 120480.,
      102870., 103820., 104770., 105720., 132400., 133600., 134800., 136000.,
      163495., 164950., 166405., 167860., 196175., 197890., 199605., 201320.,
      200550., 202300., 204050., 205800., 204925., 206710., 208495., 210280.,
      180745., 182290., 183835., 185380., 154900., 156200., 157500., 158800.,
      127370., 128420., 129470., 130520., 105536., 106368., 107200., 108032.,
      135290., 136340., 137390., 138440., 166424., 167696., 168968., 170240.,
      198954., 200452., 201950., 203448., 202846., 204372., 205898., 207424.,
      206738., 208292., 209846., 211400., 181664., 183008., 184352., 185696.,
      155130., 156260., 157390., 158520., 127120., 128032., 128944., 129856.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,
      94.,   100.,  106.,  112.,  118.,  124.,  130.,  136.,  113.,  118.,
      123.,  128.,  75.,   78.,   81.,   84.,   33.,   38.,   43.,   48.,
      116.,  128.,  140.,  152.,  257.,  278.,  299.,  320.,  341.,  362.,
      383.,  404.,  425.,  446.,  467.,  488.,  509.,  530.,  551.,  572.,
      593.,  614.,  635.,  656.,  504.,  520.,  536.,  552.,  309.,  318.,
      327.,  336.,  173.,  178.,  183.,  188.,  452.,  464.,  476.,  488.,
      845.,  866.,  887.,  908.,  929.,  950.,  971.,  992.,  1013., 1034.,
      1055., 1076., 1097., 1118., 1139., 1160., 1181., 1202., 1223., 1244.,
      952.,  968.,  984.,  1000., 561.,  570.,  579.,  588.,  313.,  318.,
      323.,  328.,  788.,  800.,  812.,  824.,  1433., 1454., 1475., 1496.,
      1517., 1538., 1559., 1580., 1601., 1622., 1643., 1664., 1685., 1706.,
      1727., 1748., 1769., 1790., 1811., 1832., 1400., 1416., 1432., 1448.,
      813.,  822.,  831.,  840.,  453.,  458.,  463.,  468.,  1124., 1136.,
      1148., 1160., 2021., 2042., 2063., 2084., 2105., 2126., 2147., 2168.,
      2189., 2210., 2231., 2252., 2273., 2294., 2315., 2336., 2357., 2378.,
      2399., 2420., 1848., 1864., 1880., 1896., 1065., 1074., 1083., 1092.,
      593.,  598.,  603.,  608.,  1460., 1472., 1484., 1496., 2609., 2630.,
      2651., 2672., 2693., 2714., 2735., 2756., 2777., 2798., 2819., 2840.,
      2861., 2882., 2903., 2924., 2945., 2966., 2987., 3008., 2296., 2312.,
      2328., 2344., 1317., 1326., 1335., 1344., 733.,  738.,  743.,  748.,
      1796., 1808., 1820., 1832., 3197., 3218., 3239., 3260., 3281., 3302.,
      3323., 3344., 3365., 3386., 3407., 3428., 3449., 3470., 3491., 3512.,
      3533., 3554., 3575., 3596., 2744., 2760., 2776., 2792., 1569., 1578.,
      1587., 1596., 676.,  680.,  684.,  688.,  1537., 1546., 1555., 1564.,
      2587., 2602., 2617., 2632., 2647., 2662., 2677., 2692., 2707., 2722.,
      2737., 2752., 2767., 2782., 2797., 2812., 2827., 2842., 2857., 2872.,
      2099., 2110., 2121., 2132., 1158., 1164., 1170., 1176.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  717720.,  725928.,
      734136.,  742344.,  929760.,  940140.,  950520.,  960900.,  1155228.,
      1167828., 1180428., 1193028., 1394316., 1409184., 1424052., 1438920.,
      1431528., 1446732., 1461936., 1477140., 1468740., 1484280., 1499820.,
      1515360., 1303044., 1316508., 1329972., 1343436., 1122960., 1134300.,
      1145640., 1156980., 928296.,  937464.,  946632.,  955800.,  816320.,
      823880.,  831440.,  839000.,  1050775., 1060325., 1069875., 1079425.,
      1297700., 1309280., 1320860., 1332440., 1557255., 1570905., 1584555.,
      1598205., 1592185., 1606115., 1620045., 1633975., 1627115., 1641325.,
      1655535., 1669745., 1435280., 1447580., 1459880., 1472180., 1230175.,
      1240525., 1250875., 1261225., 1011640., 1020000., 1028360., 1036720.,
      838384.,  845008.,  851632.,  858256.,  1074840., 1083200., 1091560.,
      1099920., 1322296., 1332424., 1342552., 1352680., 1580880., 1592808.,
      1604736., 1616664., 1611960., 1624112., 1636264., 1648416., 1643040.,
      1655416., 1667792., 1680168., 1443880., 1454584., 1465288., 1475992.,
      1233080., 1242080., 1251080., 1260080., 1010512., 1017776., 1025040.,
      1032304.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,
      557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,
      935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,
      196.,   232.,   268.,   304.,   772.,   860.,   948.,   1036.,  1792.,
      1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,
      3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,
      4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,
      1204.,  1240.,  1276.,  1312.,  3236.,  3324.,  3412.,  3500.,  6160.,
      6316.,  6472.,  6628.,  6784.,  6940.,  7096.,  7252.,  7408.,  7564.,
      7720.,  7876.,  8032.,  8188.,  8344.,  8500.,  8656.,  8812.,  8968.,
      9124.,  7068.,  7188.,  7308.,  7428.,  4204.,  4272.,  4340.,  4408.,
      2212.,  2248.,  2284.,  2320.,  5700.,  5788.,  5876.,  5964.,  10528.,
      10684., 10840., 10996., 11152., 11308., 11464., 11620., 11776., 11932.,
      12088., 12244., 12400., 12556., 12712., 12868., 13024., 13180., 13336.,
      13492., 10428., 10548., 10668., 10788., 6108.,  6176.,  6244.,  6312.,
      3220.,  3256.,  3292.,  3328.,  8164.,  8252.,  8340.,  8428.,  14896.,
      15052., 15208., 15364., 15520., 15676., 15832., 15988., 16144., 16300.,
      16456., 16612., 16768., 16924., 17080., 17236., 17392., 17548., 17704.,
      17860., 13788., 13908., 14028., 14148., 8012.,  8080.,  8148.,  8216.,
      4228.,  4264.,  4300.,  4336.,  10628., 10716., 10804., 10892., 19264.,
      19420., 19576., 19732., 19888., 20044., 20200., 20356., 20512., 20668.,
      20824., 20980., 21136., 21292., 21448., 21604., 21760., 21916., 22072.,
      22228., 17148., 17268., 17388., 17508., 9916.,  9984.,  10052., 10120.,
      5236.,  5272.,  5308.,  5344.,  13092., 13180., 13268., 13356., 23632.,
      23788., 23944., 24100., 24256., 24412., 24568., 24724., 24880., 25036.,
      25192., 25348., 25504., 25660., 25816., 25972., 26128., 26284., 26440.,
      26596., 20508., 20628., 20748., 20868., 11820., 11888., 11956., 12024.,
      5063.,  5093.,  5123.,  5153.,  11596., 11664., 11732., 11800., 19631.,
      19745., 19859., 19973., 20087., 20201., 20315., 20429., 20543., 20657.,
      20771., 20885., 20999., 21113., 21227., 21341., 21455., 21569., 21683.,
      21797., 16008., 16092., 16176., 16260., 8867.,  8913.,  8959.,  9005.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450400.,   466400.,   482400.,   498400.,   631560.,   652200.,
      672840.,   693480.,   842192.,   867728.,   893264.,   918800.,
      1083320.,  1114008.,  1144696.,  1175384.,  1181208.,  1213688.,
      1246168.,  1278648.,  1279096.,  1313368.,  1347640.,  1381912.,
      1205264.,  1235408.,  1265552.,  1295696.,  1096840.,  1122600.,
      1148360.,  1174120.,  952800.,   973920.,   995040.,   1016160.,
      961800.,   987560.,   1013320.,  1039080.,  1313550.,  1346550.,
      1379550.,  1412550.,  1712380.,  1752940.,  1793500.,  1834060.,
      2159570.,  2208010.,  2256450.,  2304890.,  2313290.,  2363970.,
      2414650.,  2465330.,  2467010.,  2519930.,  2572850.,  2625770.,
      2281420.,  2327740.,  2374060.,  2420380.,  2042350.,  2081750.,
      2121150.,  2160550.,  1748520.,  1780680.,  1812840.,  1845000.,
      1761744.,  1799568.,  1837392.,  1875216.,  2366460.,  2414700.,
      2462940.,  2511180.,  3039960.,  3099000.,  3158040.,  3217080.,
      3783780.,  3854004.,  3924228.,  3994452.,  4005876.,  4078788.,
      4151700.,  4224612.,  4227972.,  4303572.,  4379172.,  4454772.,
      3861048.,  3927000.,  3992952.,  4058904.,  3417660.,  3473580.,
      3529500.,  3585420.,  2896272.,  2941776.,  2987280.,  3032784.,
      2914744.,  2966936.,  3019128.,  3071320.,  3870930.,  3937290.,
      4003650.,  4070010.,  4921700.,  5002676.,  5083652.,  5164628.,
      6068846.,  6164886.,  6260926.,  6356966.,  6371862.,  6471038.,
      6570214.,  6669390.,  6674878.,  6777190.,  6879502.,  6981814.,
      6040916.,  6129956.,  6218996.,  6308036.,  5303410.,  5378730.,
      5454050.,  5529370.,  4460568.,  4521720.,  4582872.,  4644024.,
      4376344.,  4444664.,  4512984.,  4581304.,  5738250.,  5824770.,
      5911290.,  5997810.,  7210868.,  7316036.,  7421204.,  7526372.,
      8795990.,  8920254.,  9044518.,  9168782.,  9099006.,  9226406.,
      9353806.,  9481206.,  9402022.,  9532558.,  9663094.,  9793630.,
      8426852.,  8540084.,  8653316.,  8766548.,  7332010.,  7427490.,
      7522970.,  7618450.,  6115704.,  6192984.,  6270264.,  6347544.,
      5713488.,  5778960.,  5844432.,  5909904.,  7402140.,  7484940.,
      7567740.,  7650540.,  9197976.,  9298488.,  9399000.,  9499512.,
      11102532., 11221140., 11339748., 11458356., 11399892., 11521188.,
      11642484., 11763780., 11697252., 11821236., 11945220., 12069204.,
      10378488., 10485912., 10593336., 10700760., 8944860.,  9035340.,
      9125820.,  9216300.,  7394832.,  7467984.,  7541136.,  7614288.,
      6504040.,  6564360.,  6624680.,  6685000.,  8372550.,  8448750.,
      8524950.,  8601150.,  10340620., 10433020., 10525420., 10617820.,
      12409530., 12518450., 12627370., 12736290., 12688690., 12799850.,
      12911010., 13022170., 12967850., 13081250., 13194650., 13308050.,
      11439580., 11537740., 11635900., 11734060., 9805350.,  9887950.,
      9970550.,  10053150., 8063880.,  8130600.,  8197320.,  8264040.,
      6683488.,  6736352.,  6789216.,  6842080.,  8568840.,  8635560.,
      8702280.,  8769000.,  10542032., 10622864., 10703696., 10784528.,
      12604088., 12699288., 12794488., 12889688., 12852504., 12949496.,
      13046488., 13143480., 13100920., 13199704., 13298488., 13397272.,
      11513360., 11598800., 11684240., 11769680., 9832840.,  9904680.,
      9976520.,  10048360., 8058336.,  8116320.,  8174304.,  8232288.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1570.,   1882.,   2194.,   2506.,   2818.,   3130.,
      3442.,   3754.,   4066.,   4378.,   4690.,   5002.,   5314.,   5626.,
      5938.,   6250.,   6562.,   6874.,   6036.,   6308.,   6580.,   6852.,
      4142.,   4310.,   4478.,   4646.,   1300.,   1572.,   1844.,   2116.,
      5560.,   6232.,   6904.,   7576.,   13292.,  14492.,  15692.,  16892.,
      18092.,  19292.,  20492.,  21692.,  22892.,  24092.,  25292.,  26492.,
      27692.,  28892.,  30092.,  31292.,  32492.,  33692.,  34892.,  36092.,
      28376.,  29304.,  30232.,  31160.,  17716.,  18244.,  18772.,  19300.,
      8916.,   9188.,   9460.,   9732.,   24376.,  25048.,  25720.,  26392.,
      46892.,  48092.,  49292.,  50492.,  51692.,  52892.,  54092.,  55292.,
      56492.,  57692.,  58892.,  60092.,  61292.,  62492.,  63692.,  64892.,
      66092.,  67292.,  68492.,  69692.,  54360.,  55288.,  56216.,  57144.,
      32500.,  33028.,  33556.,  34084.,  16532.,  16804.,  17076.,  17348.,
      43192.,  43864.,  44536.,  45208.,  80492.,  81692.,  82892.,  84092.,
      85292.,  86492.,  87692.,  88892.,  90092.,  91292.,  92492.,  93692.,
      94892.,  96092.,  97292.,  98492.,  99692.,  100892., 102092., 103292.,
      80344.,  81272.,  82200.,  83128.,  47284.,  47812.,  48340.,  48868.,
      24148.,  24420.,  24692.,  24964.,  62008.,  62680.,  63352.,  64024.,
      114092., 115292., 116492., 117692., 118892., 120092., 121292., 122492.,
      123692., 124892., 126092., 127292., 128492., 129692., 130892., 132092.,
      133292., 134492., 135692., 136892., 106328., 107256., 108184., 109112.,
      62068.,  62596.,  63124.,  63652.,  31764.,  32036.,  32308.,  32580.,
      80824.,  81496.,  82168.,  82840.,  147692., 148892., 150092., 151292.,
      152492., 153692., 154892., 156092., 157292., 158492., 159692., 160892.,
      162092., 163292., 164492., 165692., 166892., 168092., 169292., 170492.,
      132312., 133240., 134168., 135096., 76852.,  77380.,  77908.,  78436.,
      39380.,  39652.,  39924.,  40196.,  99640.,  100312., 100984., 101656.,
      181292., 182492., 183692., 184892., 186092., 187292., 188492., 189692.,
      190892., 192092., 193292., 194492., 195692., 196892., 198092., 199292.,
      200492., 201692., 202892., 204092., 158296., 159224., 160152., 161080.,
      91636.,  92164.,  92692.,  93220.,  39126.,  39358.,  39590.,  39822.,
      89972.,  90500.,  91028.,  91556.,  152794., 153682., 154570., 155458.,
      156346., 157234., 158122., 159010., 159898., 160786., 161674., 162562.,
      163450., 164338., 165226., 166114., 167002., 167890., 168778., 169666.,
      124932., 125588., 126244., 126900., 69350.,  69710.,  70070.,  70430.};
  const std::array<int, 4> in_shape = {{1, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17850., 22589., 27734., 28959., 30184.,
      31409., 28280., 24710., 20692., 20090., 26250., 32879., 39984., 41209.,
      42434., 43659., 38990., 33810., 28112., 25850., 33415., 41433., 49910.,
      51107., 52304., 53501., 47355., 40720., 33590., 29200., 37525., 46270.,
      55440., 56560., 57680., 58800., 51775., 44300., 36370., 29860., 38230.,
      46970., 56084., 57078., 58072., 59066., 51830., 44200., 36172.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,  20.,   30.,   40.,   50.,   52.,   45.,  28.,
      13.,  41.,  86.,  150.,  186.,  222.,  258.,  239.,  191., 112.,
      55.,  139., 254., 402.,  438.,  474.,  510.,  449.,  345., 196.,
      97.,  237., 422., 654.,  690.,  726.,  762.,  659.,  499., 280.,
      139., 335., 590., 906.,  942.,  978.,  1014., 869.,  653., 364.,
      181., 433., 758., 1158., 1194., 1230., 1266., 1079., 807., 448.,
      223., 531., 926., 1410., 1446., 1482., 1518., 1289., 961., 532.,
      215., 478., 790., 1152., 1178., 1204., 1230., 1006., 727., 392.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,  23320.,  30832.,  39368.,  42560.,  45752.,  48944.,  45664.,
      41200.,  35520.,  35260.,  47825.,  61970.,  77735.,  82705.,  87675.,
      92645.,  85070.,  75675.,  64420.,  63904.,  85400.,  109200., 135352.,
      142492., 149632., 156772., 142392., 125420., 105808., 104972., 138845.,
      175882., 216139., 225841., 235543., 245245., 220990., 193235., 161924.,
      157052., 205345., 257362., 313159., 322861., 332563., 342265., 305830.,
      265335., 220724., 203248., 262820., 325992., 392812., 402304., 411796.,
      421288., 373008., 320840., 264736., 230300., 296025., 365090., 437535.,
      446425., 455315., 464205., 408830., 349875., 287300., 235968., 302160.,
      371296., 443408., 451304., 459200., 467096., 409936., 349640., 286176.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,   124.,   196.,   268.,   340.,   365.,  322.,  203.,
      76.,   264.,  580.,  1040.,  1312.,  1584.,  1856.,  1744., 1408., 832.,
      384.,  992.,  1840., 2944.,  3216.,  3488.,  3760.,  3340., 2584., 1476.,
      692.,  1720., 3100., 4848.,  5120.,  5392.,  5664.,  4936., 3760., 2120.,
      1000., 2448., 4360., 6752.,  7024.,  7296.,  7568.,  6532., 4936., 2764.,
      1308., 3176., 5620., 8656.,  8928.,  9200.,  9472.,  8128., 6112., 3408.,
      1616., 3904., 6880., 10560., 10832., 11104., 11376., 9724., 7288., 4052.,
      1625., 3630., 6023., 8812.,  9012.,  9212.,  9412.,  7721., 5594., 3023.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,  181640.,  240560.,  307608.,  332920.,  358232.,  383544.,
      358256.,  323560.,  279200.,  275960.,  374750.,  486100.,  610330.,
      649810.,  689290.,  728770.,  669700.,  596150.,  507800.,  502256.,
      671740.,  859560.,  1066100., 1122884., 1179668., 1236452., 1123656.,
      990220.,  835760.,  827400.,  1095010., 1387820., 1706278., 1783502.,
      1860726., 1937950., 1747004., 1528170., 1281000., 1241800., 1624210.,
      2036300., 2478518., 2555742., 2632966., 2710190., 2422364., 2102170.,
      1749160., 1611824., 2084620., 2586120., 3116708., 3192308., 3267908.,
      3343508., 2960808., 2547100., 2102000., 1829240., 2351550., 2900500.,
      3476410., 3547250., 3618090., 3688930., 3249220., 2780950., 2283800.,
      1876128., 2402600., 2952560., 3526264., 3589208., 3652152., 3715096.,
      3260720., 2781320., 2276640.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   856.,   1400.,  1944.,  2488.,  2722.,  2428.,
      1542.,  500.,   1864.,  4220.,  7696.,  9808.,  11920., 14032., 13292.,
      10792., 6404.,  2852.,  7464.,  13964., 22480., 24592., 26704., 28816.,
      25724., 19976., 11444., 5204.,  13064., 23708., 37264., 39376., 41488.,
      43600., 38156., 29160., 16484., 7556.,  18664., 33452., 52048., 54160.,
      56272., 58384., 50588., 38344., 21524., 9908.,  24264., 43196., 66832.,
      68944., 71056., 73168., 63020., 47528., 26564., 12260., 29864., 52940.,
      81616., 83728., 85840., 87952., 75452., 56712., 31604., 12622., 28268.,
      47002., 68888., 70456., 72024., 73592., 60466., 43868., 23734.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  50560.,  51700.,  65390.,  66830.,
      81120.,  82866.,  97762.,  99820.,  100114., 102214., 102466., 104608.,
      104818., 107002., 92820.,  94710.,  79850.,  81440.,  65896.,  67180.,
      57350.,  58400.,  73725.,  75050.,  90935.,  92540.,  108990., 110880.,
      111195., 113120., 113400., 115360., 115605., 117600., 101825., 103550.,
      87150.,  88600.,  71570.,  72740.,  58800.,  59720.,  75300.,  76460.,
      92536.,  93940.,  110516., 112168., 112476., 114156., 114436., 116144.,
      116396., 118132., 102160., 103660., 87140.,  88400.,  71328.,  72344.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   30.,   40.,   50.,   60.,
      70.,   80.,   90.,   100.,  95.,   104.,  83.,   90.,   52.,   56.,
      20.,   26.,   68.,   82.,   148.,  172.,  264.,  300.,  336.,  372.,
      408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,
      104.,  110.,  264.,  278.,  484.,  508.,  768.,  804.,  840.,  876.,
      912.,  948.,  984.,  1020., 868.,  898.,  668.,  690.,  380.,  392.,
      188.,  194.,  460.,  474.,  820.,  844.,  1272., 1308., 1344., 1380.,
      1416., 1452., 1488., 1524., 1288., 1318., 976.,  998.,  548.,  560.,
      272.,  278.,  656.,  670.,  1156., 1180., 1776., 1812., 1848., 1884.,
      1920., 1956., 1992., 2028., 1708., 1738., 1284., 1306., 716.,  728.,
      356.,  362.,  852.,  866.,  1492., 1516., 2280., 2316., 2352., 2388.,
      2424., 2460., 2496., 2532., 2128., 2158., 1592., 1614., 884.,  896.,
      440.,  446.,  1048., 1062., 1828., 1852., 2784., 2820., 2856., 2892.,
      2928., 2964., 3000., 3036., 2548., 2578., 1900., 1922., 1052., 1064.,
      425.,  430.,  945.,  956.,  1562., 1580., 2278., 2304., 2330., 2356.,
      2382., 2408., 2434., 2460., 1991., 2012., 1439., 1454., 776.,  784.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,  34144.,  44500.,  47340.,  59024.,  62528.,  75572.,  79772.,
      81788.,  86212.,  88004.,  92652.,  94220.,  99092.,  88112.,  92384.,
      79660.,  83300.,  68800.,  71776.,  67840.,  71400.,  92225.,  96775.,
      119740., 125320., 150465., 157115., 160195., 167125., 169925., 177135.,
      179655., 187145., 165220., 171760., 147175., 152725., 125440., 129960.,
      123872., 129104., 165790., 172450., 212280., 220416., 263438., 273098.,
      277466., 287462., 291494., 301826., 305522., 316190., 277800., 287088.,
      244930., 252790., 206816., 213200., 204512., 211736., 270795., 279965.,
      343364., 354536., 422331., 435561., 441441., 455063., 460551., 474565.,
      479661., 494067., 432572., 445088., 378525., 389095., 317408., 325976.,
      306992., 316456., 401695., 413665., 503804., 518336., 613431., 630581.,
      632541., 650083., 651651., 669585., 670761., 689087., 599732., 615608.,
      520625., 533995., 433328., 444136., 399680., 408752., 517030., 528490.,
      641544., 655440., 773318., 789698., 792050., 808766., 810782., 827834.,
      829514., 846902., 734712., 749760., 632170., 644830., 521792., 532016.,
      454320., 462680., 584125., 594675., 720580., 733360., 863765., 878815.,
      881335., 896665., 898905., 914515., 916475., 932365., 807340., 821080.,
      691075., 702625., 567600., 576920., 466432., 473760., 597380., 606620.,
      734192., 745376., 876932., 890092., 892556., 905940., 908180., 921788.,
      923804., 937636., 810896., 822848., 691740., 701780., 566272., 574368.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   192.,   264.,   336.,
      408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,
      383.,   413.,   118.,   162.,   448.,   552.,   1022.,  1202.,  1872.,
      2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,
      2688.,  2856.,  1594.,  1686.,  734.,   778.,   1904.,  2008.,  3542.,
      3722.,  5680.,  5952.,  6224.,  6496.,  6768.,  7040.,  7312.,  7584.,
      6506.,  6734.,  5040.,  5208.,  2882.,  2974.,  1350.,  1394.,  3360.,
      3464.,  6062.,  6242.,  9488.,  9760.,  10032., 10304., 10576., 10848.,
      11120., 11392., 9698.,  9926.,  7392.,  7560.,  4170.,  4262.,  1966.,
      2010.,  4816.,  4920.,  8582.,  8762.,  13296., 13568., 13840., 14112.,
      14384., 14656., 14928., 15200., 12890., 13118., 9744.,  9912.,  5458.,
      5550.,  2582.,  2626.,  6272.,  6376.,  11102., 11282., 17104., 17376.,
      17648., 17920., 18192., 18464., 18736., 19008., 16082., 16310., 12096.,
      12264., 6746.,  6838.,  3198.,  3242.,  7728.,  7832.,  13622., 13802.,
      20912., 21184., 21456., 21728., 22000., 22272., 22544., 22816., 19274.,
      19502., 14448., 14616., 8034.,  8126.,  3221.,  3259.,  7196.,  7280.,
      11941., 12079., 17472., 17672., 17872., 18072., 18272., 18472., 18672.,
      18872., 15319., 15481., 11100., 11216., 5999.,  6061.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,  267680.,  349080.,  371640.,  463600.,  491440.,  594216.,
      627592.,  643720.,  678888.,  693224.,  730184.,  742728.,  781480.,
      695152.,  729136.,  628920.,  657880.,  543520.,  567200.,  534120.,
      562440.,  726750.,  762950.,  944300.,  988700.,  1187410., 1240330.,
      1264970., 1320130., 1342530., 1399930., 1420090., 1479730., 1306700.,
      1358780., 1164550., 1208750., 993000.,  1029000., 978352.,  1020016.,
      1310180., 1363220., 1678440., 1743240., 2083900., 2160844., 2195788.,
      2275420., 2307676., 2389996., 2419564., 2504572., 2200872., 2274888.,
      1941140., 2003780., 1639600., 1690480., 1618680., 1676248., 2144170.,
      2217250., 2719780., 2808820., 3346406., 3451854., 3498894., 3607478.,
      3651382., 3763102., 3803870., 3918726., 3431428., 3531220., 3003490.,
      3087770., 2519160., 2587480., 2436280., 2511768., 3188570., 3284050.,
      3999940., 4115860., 4871286., 5008094., 5023774., 5163718., 5176262.,
      5319342., 5328750., 5474966., 4765348., 4892020., 4137490., 4244170.,
      3444280., 3530520., 3178288., 3250672., 4111940., 4203380., 5102760.,
      5213640., 6151516., 6282220., 6301036., 6434428., 6450556., 6586636.,
      6600076., 6738844., 5846376., 5966472., 5030900., 5131940., 4152880.,
      4234480., 3616680., 3683400., 4650350., 4734550., 5737100., 5839100.,
      6877570., 6997690., 7017850., 7140210., 7158130., 7282730., 7298410.,
      7425250., 6429740., 6539420., 5504150., 5596350., 4521000., 4595400.,
      3715616., 3774112., 4759000., 4832760., 5849200., 5938480., 6986728.,
      7091784., 7111496., 7218344., 7236264., 7344904., 7361032., 7471464.,
      6461680., 6557104., 5512440., 5592600., 4512800., 4577440.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1352.,   1896.,
      2440.,   2984.,   3528.,   4072.,   4616.,   5160.,   5114.,   5618.,
      4596.,   4996.,   2934.,   3166.,   780.,    1116.,   3208.,   4008.,
      7540.,   8932.,   14032.,  16144.,  18256.,  20368.,  22480.,  24592.,
      26704.,  28816.,  25444.,  27220.,  20744.,  22056.,  12348.,  13068.,
      5484.,   5820.,   14408.,  15208.,  27028.,  28420.,  43600.,  45712.,
      47824.,  49936.,  52048.,  54160.,  56272.,  58384.,  50308.,  52084.,
      39112.,  40424.,  22428.,  23148.,  10188.,  10524.,  25608.,  26408.,
      46516.,  47908.,  73168.,  75280.,  77392.,  79504.,  81616.,  83728.,
      85840.,  87952.,  75172.,  76948.,  57480.,  58792.,  32508.,  33228.,
      14892.,  15228.,  36808.,  37608.,  66004.,  67396.,  102736., 104848.,
      106960., 109072., 111184., 113296., 115408., 117520., 100036., 101812.,
      75848.,  77160.,  42588.,  43308.,  19596.,  19932.,  48008.,  48808.,
      85492.,  86884.,  132304., 134416., 136528., 138640., 140752., 142864.,
      144976., 147088., 124900., 126676., 94216.,  95528.,  52668.,  53388.,
      24300.,  24636.,  59208.,  60008.,  104980., 106372., 161872., 163984.,
      166096., 168208., 170320., 172432., 174544., 176656., 149764., 151540.,
      112584., 113896., 62748.,  63468.,  25054.,  25350.,  56116.,  56772.,
      93314.,  94394.,  136776., 138344., 139912., 141480., 143048., 144616.,
      146184., 147752., 120122., 121394., 87156.,  88068.,  47158.,  47646.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,   8320.,   8600.,   8880.,   11200.,  11560.,  11920.,  12280.,
      14852.,  15296.,  15740.,  16184.,  19012.,  19544.,  20076.,  20608.,
      20552.,  21112.,  21672.,  22232.,  22092.,  22680.,  23268.,  23856.,
      23632.,  24248.,  24864.,  25480.,  22100.,  22640.,  23180.,  23720.,
      19980.,  20440.,  20900.,  21360.,  17256.,  17632.,  18008.,  18384.,
      17050.,  17500.,  17950.,  18400.,  23175.,  23750.,  24325.,  24900.,
      30085.,  30790.,  31495.,  32200.,  37800.,  38640.,  39480.,  40320.,
      40215.,  41090.,  41965.,  42840.,  42630.,  43540.,  44450.,  45360.,
      45045.,  45990.,  46935.,  47880.,  41425.,  42250.,  43075.,  43900.,
      36900.,  37600.,  38300.,  39000.,  31450.,  32020.,  32590.,  33160.,
      31100.,  31760.,  32420.,  33080.,  41620.,  42460.,  43300.,  44140.,
      53286.,  54312.,  55338.,  56364.,  66122.,  67340.,  68558.,  69776.,
      69608.,  70868.,  72128.,  73388.,  73094.,  74396.,  75698.,  77000.,
      76580.,  77924.,  79268.,  80612.,  69630.,  70800.,  71970.,  73140.,
      61390.,  62380.,  63370.,  64360.,  51836.,  52640.,  53444.,  54248.,
      51310.,  52220.,  53130.,  54040.,  67935.,  69090.,  70245.,  71400.,
      86135.,  87542.,  88949.,  90356.,  105938., 107604., 109270., 110936.,
      110691., 112406., 114121., 115836., 115444., 117208., 118972., 120736.,
      120197., 122010., 123823., 125636., 108395., 109970., 111545., 113120.,
      94850.,  96180.,  97510.,  98840.,  79534.,  80612.,  81690.,  82768.,
      76790.,  77980.,  79170.,  80360.,  100485., 101990., 103495., 105000.,
      126035., 127862., 129689., 131516., 153468., 155624., 157780., 159936.,
      158221., 160426., 162631., 164836., 162974., 165228., 167482., 169736.,
      167727., 170030., 172333., 174636., 149975., 151970., 153965., 155960.,
      130200., 131880., 133560., 135240., 108374., 109732., 111090., 112448.,
      99980.,  101120., 102260., 103400., 129340., 130780., 132220., 133660.,
      160494., 162240., 163986., 165732., 193466., 195524., 197582., 199640.,
      198128., 200228., 202328., 204428., 202790., 204932., 207074., 209216.,
      207452., 209636., 211820., 214004., 183750., 185640., 187530., 189420.,
      158110., 159700., 161290., 162880., 130508., 131792., 133076., 134360.,
      113650., 114700., 115750., 116800., 146125., 147450., 148775., 150100.,
      180265., 181870., 183475., 185080., 216090., 217980., 219870., 221760.,
      220465., 222390., 224315., 226240., 224840., 226800., 228760., 230720.,
      229215., 231210., 233205., 235200., 201925., 203650., 205375., 207100.,
      172850., 174300., 175750., 177200., 141970., 143140., 144310., 145480.,
      116680., 117600., 118520., 119440., 149440., 150600., 151760., 152920.,
      183668., 185072., 186476., 187880., 219380., 221032., 222684., 224336.,
      223272., 224952., 226632., 228312., 227164., 228872., 230580., 232288.,
      231056., 232792., 234528., 236264., 202820., 204320., 205820., 207320.,
      173020., 174280., 175540., 176800., 141640., 142656., 143672., 144688.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      34.,   40.,   50.,   60.,   70.,   80.,   90.,   100.,  110.,  120.,
      130.,  140.,  150.,  160.,  170.,  180.,  190.,  200.,  181.,  190.,
      199.,  208.,  159.,  166.,  173.,  180.,  100.,  104.,  108.,  112.,
      34.,   40.,   46.,   52.,   122.,  136.,  150.,  164.,  272.,  296.,
      320.,  344.,  492.,  528.,  564.,  600.,  636.,  672.,  708.,  744.,
      780.,  816.,  852.,  888.,  924.,  960.,  996.,  1032., 866.,  896.,
      926.,  956.,  698.,  720.,  742.,  764.,  412.,  424.,  436.,  448.,
      202.,  208.,  214.,  220.,  514.,  528.,  542.,  556.,  944.,  968.,
      992.,  1016., 1500., 1536., 1572., 1608., 1644., 1680., 1716., 1752.,
      1788., 1824., 1860., 1896., 1932., 1968., 2004., 2040., 1706., 1736.,
      1766., 1796., 1314., 1336., 1358., 1380., 748.,  760.,  772.,  784.,
      370.,  376.,  382.,  388.,  906.,  920.,  934.,  948.,  1616., 1640.,
      1664., 1688., 2508., 2544., 2580., 2616., 2652., 2688., 2724., 2760.,
      2796., 2832., 2868., 2904., 2940., 2976., 3012., 3048., 2546., 2576.,
      2606., 2636., 1930., 1952., 1974., 1996., 1084., 1096., 1108., 1120.,
      538.,  544.,  550.,  556.,  1298., 1312., 1326., 1340., 2288., 2312.,
      2336., 2360., 3516., 3552., 3588., 3624., 3660., 3696., 3732., 3768.,
      3804., 3840., 3876., 3912., 3948., 3984., 4020., 4056., 3386., 3416.,
      3446., 3476., 2546., 2568., 2590., 2612., 1420., 1432., 1444., 1456.,
      706.,  712.,  718.,  724.,  1690., 1704., 1718., 1732., 2960., 2984.,
      3008., 3032., 4524., 4560., 4596., 4632., 4668., 4704., 4740., 4776.,
      4812., 4848., 4884., 4920., 4956., 4992., 5028., 5064., 4226., 4256.,
      4286., 4316., 3162., 3184., 3206., 3228., 1756., 1768., 1780., 1792.,
      874.,  880.,  886.,  892.,  2082., 2096., 2110., 2124., 3632., 3656.,
      3680., 3704., 5532., 5568., 5604., 5640., 5676., 5712., 5748., 5784.,
      5820., 5856., 5892., 5928., 5964., 6000., 6036., 6072., 5066., 5096.,
      5126., 5156., 3778., 3800., 3822., 3844., 2092., 2104., 2116., 2128.,
      845.,  850.,  855.,  860.,  1879., 1890., 1901., 1912., 3106., 3124.,
      3142., 3160., 4530., 4556., 4582., 4608., 4634., 4660., 4686., 4712.,
      4738., 4764., 4790., 4816., 4842., 4868., 4894., 4920., 3961., 3982.,
      4003., 4024., 2863., 2878., 2893., 2908., 1544., 1552., 1560., 1568.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,   64416.,   66624.,   68832.,   86860.,   89700.,   92540.,
      95380.,   115408.,  118912.,  122416.,  125920.,  147980.,  152180.,
      156380.,  160580.,  160244.,  164668.,  169092.,  173516.,  172508.,
      177156.,  181804.,  186452.,  184772.,  189644.,  194516.,  199388.,
      173008.,  177280.,  181552.,  185824.,  156580.,  160220.,  163860.,
      167500.,  135360.,  138336.,  141312.,  144288.,  133000.,  136560.,
      140120.,  143680.,  181025.,  185575.,  190125.,  194675.,  235280.,
      240860.,  246440.,  252020.,  295925.,  302575.,  309225.,  315875.,
      315175.,  322105.,  329035.,  335965.,  334425.,  341635.,  348845.,
      356055.,  353675.,  361165.,  368655.,  376145.,  325520.,  332060.,
      338600.,  345140.,  290175.,  295725.,  301275.,  306825.,  247480.,
      252000.,  256520.,  261040.,  243808.,  249040.,  254272.,  259504.,
      326570.,  333230.,  339890.,  346550.,  418440.,  426576.,  434712.,
      442848.,  519610.,  529270.,  538930.,  548590.,  547414.,  557410.,
      567406.,  577402.,  575218.,  585550.,  595882.,  606214.,  603022.,
      613690.,  624358.,  635026.,  548616.,  557904.,  567192.,  576480.,
      483950.,  491810.,  499670.,  507530.,  408832.,  415216.,  421600.,
      427984.,  403592.,  410816.,  418040.,  425264.,  534695.,  543865.,
      553035.,  562205.,  678328.,  689500.,  700672.,  711844.,  834715.,
      847945.,  861175.,  874405.,  872641.,  886263.,  899885.,  913507.,
      910567.,  924581.,  938595.,  952609.,  948493.,  962899.,  977305.,
      991711.,  855736.,  868252.,  880768.,  893284.,  749105.,  759675.,
      770245.,  780815.,  628376.,  636944.,  645512.,  654080.,  606872.,
      616336.,  625800.,  635264.,  794395.,  806365.,  818335.,  830305.,
      996688.,  1011220., 1025752., 1040284., 1213975., 1231125., 1248275.,
      1265425., 1251901., 1269443., 1286985., 1304527., 1289827., 1307761.,
      1325695., 1343629., 1327753., 1346079., 1364405., 1382731., 1187536.,
      1203412., 1219288., 1235164., 1031205., 1044575., 1057945., 1071315.,
      858536.,  869344.,  880152.,  890960.,  792544.,  801616.,  810688.,
      819760.,  1025450., 1036910., 1048370., 1059830., 1272648., 1286544.,
      1300440., 1314336., 1534330., 1550710., 1567090., 1583470., 1571542.,
      1588258., 1604974., 1621690., 1608754., 1625806., 1642858., 1659910.,
      1645966., 1663354., 1680742., 1698130., 1458120., 1473168., 1488216.,
      1503264., 1254830., 1267490., 1280150., 1292810., 1035904., 1046128.,
      1056352., 1066576., 902360.,  910720.,  919080.,  927440.,  1160325.,
      1170875., 1181425., 1191975., 1431560., 1444340., 1457120., 1469900.,
      1716225., 1731275., 1746325., 1761375., 1751155., 1766485., 1781815.,
      1797145., 1786085., 1801695., 1817305., 1832915., 1821015., 1836905.,
      1852795., 1868685., 1604360., 1618100., 1631840., 1645580., 1373475.,
      1385025., 1396575., 1408125., 1128200., 1137520., 1146840., 1156160.,
      927360.,  934688.,  942016.,  949344.,  1187820., 1197060., 1206300.,
      1215540., 1459984., 1471168., 1482352., 1493536., 1743980., 1757140.,
      1770300., 1783460., 1775060., 1788444., 1801828., 1815212., 1806140.,
      1819748., 1833356., 1846964., 1837220., 1851052., 1864884., 1878716.,
      1612816., 1624768., 1636720., 1648672., 1375940., 1385980., 1396020.,
      1406060., 1126464., 1134560., 1142656., 1150752.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,
      760.,   832.,   904.,   976.,   1048.,  1120.,  1192.,  1264.,  1336.,
      1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,
      743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   816.,
      920.,   1024.,  1128.,  1906.,  2086.,  2266.,  2446.,  3536.,  3808.,
      4080.,  4352.,  4624.,  4896.,  5168.,  5440.,  5712.,  5984.,  6256.,
      6528.,  6800.,  7072.,  7344.,  7616.,  6454.,  6682.,  6910.,  7138.,
      5248.,  5416.,  5584.,  5752.,  3118.,  3210.,  3302.,  3394.,  1434.,
      1478.,  1522.,  1566.,  3728.,  3832.,  3936.,  4040.,  6946.,  7126.,
      7306.,  7486.,  11152., 11424., 11696., 11968., 12240., 12512., 12784.,
      13056., 13328., 13600., 13872., 14144., 14416., 14688., 14960., 15232.,
      12838., 13066., 13294., 13522., 9952.,  10120., 10288., 10456., 5694.,
      5786.,  5878.,  5970.,  2666.,  2710.,  2754.,  2798.,  6640.,  6744.,
      6848.,  6952.,  11986., 12166., 12346., 12526., 18768., 19040., 19312.,
      19584., 19856., 20128., 20400., 20672., 20944., 21216., 21488., 21760.,
      22032., 22304., 22576., 22848., 19222., 19450., 19678., 19906., 14656.,
      14824., 14992., 15160., 8270.,  8362.,  8454.,  8546.,  3898.,  3942.,
      3986.,  4030.,  9552.,  9656.,  9760.,  9864.,  17026., 17206., 17386.,
      17566., 26384., 26656., 26928., 27200., 27472., 27744., 28016., 28288.,
      28560., 28832., 29104., 29376., 29648., 29920., 30192., 30464., 25606.,
      25834., 26062., 26290., 19360., 19528., 19696., 19864., 10846., 10938.,
      11030., 11122., 5130.,  5174.,  5218.,  5262.,  12464., 12568., 12672.,
      12776., 22066., 22246., 22426., 22606., 34000., 34272., 34544., 34816.,
      35088., 35360., 35632., 35904., 36176., 36448., 36720., 36992., 37264.,
      37536., 37808., 38080., 31990., 32218., 32446., 32674., 24064., 24232.,
      24400., 24568., 13422., 13514., 13606., 13698., 6362.,  6406.,  6450.,
      6494.,  15376., 15480., 15584., 15688., 27106., 27286., 27466., 27646.,
      41616., 41888., 42160., 42432., 42704., 42976., 43248., 43520., 43792.,
      44064., 44336., 44608., 44880., 45152., 45424., 45696., 38374., 38602.,
      38830., 39058., 28768., 28936., 29104., 29272., 15998., 16090., 16182.,
      16274., 6413.,  6451.,  6489.,  6527.,  14328., 14412., 14496., 14580.,
      23777., 23915., 24053., 24191., 34792., 34992., 35192., 35392., 35592.,
      35792., 35992., 36192., 36392., 36592., 36792., 36992., 37192., 37392.,
      37592., 37792., 30515., 30677., 30839., 31001., 22112., 22228., 22344.,
      22460., 11951., 12013., 12075., 12137.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1430750.,  1466950.,  1503150.,  1539350.,
      1860700.,  1905100.,  1949500.,  1993900.,  2341570.,  2394490.,
      2447410.,  2500330.,  2495290.,  2550450.,  2605610.,  2660770.,
      2649010.,  2706410.,  2763810.,  2821210.,  2802730.,  2862370.,
      2922010.,  2981650.,  2580700.,  2632780.,  2684860.,  2736940.,
      2301350.,  2345550.,  2389750.,  2433950.,  1963400.,  1999400.,
      2035400.,  2071400.,  1930544.,  1972208.,  2013872.,  2055536.,
      2587060.,  2640100.,  2693140.,  2746180.,  3316200.,  3381000.,
      3445800.,  3510600.,  4119500.,  4196444.,  4273388.,  4350332.,
      4341596.,  4421228.,  4500860.,  4580492.,  4563692.,  4646012.,
      4728332.,  4810652.,  4785788.,  4870796.,  4955804.,  5040812.,
      4355304.,  4429320.,  4503336.,  4577352.,  3842980.,  3905620.,
      3968260.,  4030900.,  3247280.,  3298160.,  3349040.,  3399920.,
      3201240.,  3258808.,  3316376.,  3373944.,  4242490.,  4315570.,
      4388650.,  4461730.,  5383700.,  5472740.,  5561780.,  5650820.,
      6626662.,  6732110.,  6837558.,  6943006.,  6929678.,  7038262.,
      7146846.,  7255430.,  7232694.,  7344414.,  7456134.,  7567854.,
      7535710.,  7650566.,  7765422.,  7880278.,  6800276.,  6900068.,
      6999860.,  7099652.,  5954130.,  6038410.,  6122690.,  6206970.,
      4995480.,  5063800.,  5132120.,  5200440.,  4825240.,  4900728.,
      4976216.,  5051704.,  6317290.,  6412770.,  6508250.,  6603730.,
      7927220.,  8043140.,  8159060.,  8274980.,  9656822.,  9793630.,
      9930438.,  10067246., 9959838.,  10099782., 10239726., 10379670.,
      10262854., 10405934., 10549014., 10692094., 10565870., 10712086.,
      10858302., 11004518., 9451316.,  9577988.,  9704660.,  9831332.,
      8208130.,  8314810.,  8421490.,  8528170.,  6834520.,  6920760.,
      7007000.,  7093240.,  6311216.,  6383600.,  6455984.,  6528368.,
      8166580.,  8258020.,  8349460.,  8440900.,  10136040., 10246920.,
      10357800., 10468680., 12221132., 12351836., 12482540., 12613244.,
      12518492., 12651884., 12785276., 12918668., 12815852., 12951932.,
      13088012., 13224092., 13113212., 13251980., 13390748., 13529516.,
      11617512., 11737608., 11857704., 11977800., 9998500.,  10099540.,
      10200580., 10301620., 8254640.,  8336240.,  8417840.,  8499440.,
      7191560.,  7258280.,  7325000.,  7391720.,  9247950.,  9332150.,
      9416350.,  9500550.,  11410300., 11512300., 11614300., 11716300.,
      13679890., 13800010., 13920130., 14040250., 13959050., 14081410.,
      14203770., 14326130., 14238210., 14362810., 14487410., 14612010.,
      14517370., 14644210., 14771050., 14897890., 12790780., 12900460.,
      13010140., 13119820., 10950550., 11042750., 11134950., 11227150.,
      8995400.,  9069800.,  9144200.,  9218600.,  7394592.,  7453088.,
      7511584.,  7570080.,  9471800.,  9545560.,  9619320.,  9693080.,
      11642480., 11731760., 11821040., 11910320., 13907656., 14012712.,
      14117768., 14222824., 14156072., 14262920., 14369768., 14476616.,
      14404488., 14513128., 14621768., 14730408., 14652904., 14763336.,
      14873768., 14984200., 12863600., 12959024., 13054448., 13149872.,
      10974680., 11054840., 11135000., 11215160., 8985120.,  9049760.,
      9114400.,  9179040.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1570.,   1882.,   2344.,   2888.,   3432.,   3976.,
      4520.,   5064.,   5608.,   6152.,   6696.,   7240.,   7784.,   8328.,
      8872.,   9416.,   9960.,   10504.,  9898.,   10402.,  10906.,  11410.,
      8932.,   9332.,   9732.,   10132.,  5718.,   5950.,   6182.,   6414.,
      1340.,   1676.,   2012.,   2348.,   5896.,   6696.,   7496.,   8296.,
      14180.,  15572.,  16964.,  18356.,  26704.,  28816.,  30928.,  33040.,
      35152.,  37264.,  39376.,  41488.,  43600.,  45712.,  47824.,  49936.,
      52048.,  54160.,  56272.,  58384.,  49748.,  51524.,  53300.,  55076.,
      40648.,  41960.,  43272.,  44584.,  24236.,  24956.,  25676.,  26396.,
      10748.,  11084.,  11420.,  11756.,  28296.,  29096.,  29896.,  30696.,
      53156.,  54548.,  55940.,  57332.,  85840.,  87952.,  90064.,  92176.,
      94288.,  96400.,  98512.,  100624., 102736., 104848., 106960., 109072.,
      111184., 113296., 115408., 117520., 99476.,  101252., 103028., 104804.,
      77384.,  78696.,  80008.,  81320.,  44396.,  45116.,  45836.,  46556.,
      20156.,  20492.,  20828.,  21164.,  50696.,  51496.,  52296.,  53096.,
      92132.,  93524.,  94916.,  96308.,  144976., 147088., 149200., 151312.,
      153424., 155536., 157648., 159760., 161872., 163984., 166096., 168208.,
      170320., 172432., 174544., 176656., 149204., 150980., 152756., 154532.,
      114120., 115432., 116744., 118056., 64556.,  65276.,  65996.,  66716.,
      29564.,  29900.,  30236.,  30572.,  73096.,  73896.,  74696.,  75496.,
      131108., 132500., 133892., 135284., 204112., 206224., 208336., 210448.,
      212560., 214672., 216784., 218896., 221008., 223120., 225232., 227344.,
      229456., 231568., 233680., 235792., 198932., 200708., 202484., 204260.,
      150856., 152168., 153480., 154792., 84716.,  85436.,  86156.,  86876.,
      38972.,  39308.,  39644.,  39980.,  95496.,  96296.,  97096.,  97896.,
      170084., 171476., 172868., 174260., 263248., 265360., 267472., 269584.,
      271696., 273808., 275920., 278032., 280144., 282256., 284368., 286480.,
      288592., 290704., 292816., 294928., 248660., 250436., 252212., 253988.,
      187592., 188904., 190216., 191528., 104876., 105596., 106316., 107036.,
      48380.,  48716.,  49052.,  49388.,  117896., 118696., 119496., 120296.,
      209060., 210452., 211844., 213236., 322384., 324496., 326608., 328720.,
      330832., 332944., 335056., 337168., 339280., 341392., 343504., 345616.,
      347728., 349840., 351952., 354064., 298388., 300164., 301940., 303716.,
      224328., 225640., 226952., 228264., 125036., 125756., 126476., 127196.,
      49918.,  50214.,  50510.,  50806.,  111812., 112468., 113124., 113780.,
      185938., 187018., 188098., 189178., 272552., 274120., 275688., 277256.,
      278824., 280392., 281960., 283528., 285096., 286664., 288232., 289800.,
      291368., 292936., 294504., 296072., 239434., 240706., 241978., 243250.,
      173732., 174644., 175556., 176468., 94006.,  94494.,  94982.,  95470.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21658., 28210., 35231., 42728., 43953.,
      39200., 33950., 28196., 26182., 33815., 41895., 50428., 51625., 45693.,
      39290., 32410., 28540., 36675., 45220., 54180., 55300., 48715., 41700.,
      34250., 28508., 36510., 44870., 53592., 54586., 47930., 40900., 33492.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   7.,   10.,  13.,  16.,  19.,  14.,  11.,  35.,  45.,  55.,
      65.,  75.,  85.,  56.,  44.,  121., 142., 163., 184., 205., 226., 140.,
      107., 268., 289., 310., 331., 352., 373., 224., 170., 415., 436., 457.,
      478., 499., 520., 308., 233., 562., 583., 604., 625., 646., 667., 392.,
      296., 709., 730., 751., 772., 793., 814., 476., 309., 705., 723., 741.,
      759., 777., 795., 448., 215., 478., 489., 500., 511., 522., 533., 294.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,  19760.,  26272.,  33712.,  36904.,  34864.,  31800.,  27680.,
      29340.,  40025.,  52130.,  65695.,  70665.,  65510.,  58775.,  50420.,
      52784.,  70900.,  91080.,  113372., 120512., 110304., 97840.,  83072.,
      86268.,  114625., 145810., 179879., 189581., 171934., 151235., 127428.,
      127932., 167825., 210994., 257495., 267197., 239806., 208915., 174468.,
      169596., 221025., 276178., 335111., 344813., 307678., 266595., 221508.,
      205952., 266080., 329760., 397040., 406532., 359928., 309580., 255440.,
      225100., 289325., 356810., 427595., 436485., 384590., 329275., 270500.,
      225248., 288520., 354640., 423640., 431536., 378976., 323440., 264896.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,
      224.,  296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,
      986.,  1142., 1298., 1454., 1610., 1015., 751.,  1922., 2078.,
      2234., 2390., 2546., 2702., 1645., 1213., 3014., 3170., 3326.,
      3482., 3638., 3794., 2275., 1675., 4106., 4262., 4418., 4574.,
      4730., 4886., 2905., 2137., 5198., 5354., 5510., 5666., 5822.,
      5978., 3535., 2300., 5288., 5424., 5560., 5696., 5832., 5968.,
      3384., 1625., 3630., 3714., 3798., 3882., 3966., 4050., 2243.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,  153640.,  204656.,  263032.,  288344.,  272816.,  249160.,
      217120.,  229240.,  313150.,  408340.,  515130.,  554610.,  514660.,
      462150.,  396760.,  414256.,  556940.,  716040.,  891940.,  948724.,
      868968.,  771260.,  655216.,  679112.,  902930.,  1149260., 1418550.,
      1495774., 1357244., 1194410., 1006824., 1010632., 1326290., 1668044.,
      2036342., 2113566., 1897532., 1653610., 1381352., 1342152., 1749650.,
      2186828., 2654134., 2731358., 2437820., 2112810., 1755880., 1633648.,
      2110940., 2616552., 3150868., 3226468., 2857032., 2457740., 2028208.,
      1787960., 2298350., 2834740., 3397450., 3468290., 3056260., 2616950.,
      2150040., 1790752., 2293960., 2819888., 3368792., 3431736., 3014000.,
      2572520., 2107040.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      7300.,  8500.,  9700.,  10900., 12100., 7706.,  5594.,  14500., 15700.,
      16900., 18100., 19300., 20500., 12578., 9122.,  22900., 24100., 25300.,
      26500., 27700., 28900., 17450., 12650., 31300., 32500., 33700., 34900.,
      36100., 37300., 22322., 16178., 39700., 40900., 42100., 43300., 44500.,
      45700., 27194., 17716., 40904., 41960., 43016., 44072., 45128., 46184.,
      26276., 12622., 28268., 28924., 29580., 30236., 30892., 31548., 17510.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,   3752.,   4920.,  5220.,  6544.,  6916.,  8400.,   8848.,
      9184.,   9660.,   8680.,  9100.,  7920.,  8280.,  6896.,   7192.,
      7310.,   7680.,   9975.,  10450., 12995., 13580., 16380.,  17080.,
      17605.,  18340.,  16325., 16970., 14650., 15200., 12570.,  13020.,
      13160.,  13700.,  17680., 18370., 22716., 23562., 28280.,  29288.,
      30044.,  31094.,  27504., 28422., 24400., 25180., 20720.,  21356.,
      21518.,  22260.,  28595., 29540., 36379., 37534., 44884.,  46256.,
      47285.,  48706.,  42889., 44128., 37730., 38780., 31794.,  32648.,
      31822.,  32788.,  41755., 42980., 52507., 53998., 64092.,  65856.,
      66493.,  68306.,  59689., 61264., 52010., 53340., 43442.,  44520.,
      42126.,  43316.,  54915., 56420., 68635., 70462., 83300.,  85456.,
      85701.,  87906.,  76489., 78400., 66290., 67900., 55090.,  56392.,
      51248.,  52364.,  66220., 67630., 82080., 83790., 98840.,  100856.,
      101192., 103250., 89604., 91386., 77080., 78580., 63608.,  64820.,
      56070.,  57080.,  72075., 73350., 88895., 90440., 106540., 108360.,
      108745., 110600., 95825., 97430., 82050., 83400., 67410.,  68500.,
      56144.,  57016.,  71920., 73020., 88408., 89740., 105616., 107184.,
      107576., 109172., 94480., 95860., 80640., 81800., 66048.,  66984.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    11.,   14.,   17.,   20.,   23.,   26.,
      29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,
      80.,   90.,   100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,
      106.,  112.,  79.,   88.,   221.,  242.,  263.,  284.,  305.,  326.,
      347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  205.,  214.,
      515.,  536.,  557.,  578.,  599.,  620.,  641.,  662.,  683.,  704.,
      725.,  746.,  436.,  448.,  331.,  340.,  809.,  830.,  851.,  872.,
      893.,  914.,  935.,  956.,  977.,  998.,  1019., 1040., 604.,  616.,
      457.,  466.,  1103., 1124., 1145., 1166., 1187., 1208., 1229., 1250.,
      1271., 1292., 1313., 1334., 772.,  784.,  583.,  592.,  1397., 1418.,
      1439., 1460., 1481., 1502., 1523., 1544., 1565., 1586., 1607., 1628.,
      940.,  952.,  610.,  618.,  1392., 1410., 1428., 1446., 1464., 1482.,
      1500., 1518., 1536., 1554., 1572., 1590., 886.,  896.,  425.,  430.,
      945.,  956.,  967.,  978.,  989.,  1000., 1011., 1022., 1033., 1044.,
      1055., 1066., 582.,  588.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,  28736.,  37740.,  40100.,  50336.,  53264.,  64764.,  68292.,
      70980.,  74732.,  67232.,  70544.,  61460.,  64300.,  53600.,  55936.,
      56480.,  59400.,  77225.,  80975.,  100780., 105400., 127225., 132755.,
      136955., 142765., 127180., 132280., 114275., 118625., 98160.,  101720.,
      102352., 106624., 137690., 143150., 177120., 183816., 220738., 228718.,
      234766., 243082., 215136., 222408., 191030., 197210., 162352., 167392.,
      168112., 173992., 223615., 231105., 284732., 293888., 351575., 362453.,
      370685., 381955., 336476., 346304., 296205., 304535., 249760., 256536.,
      250096., 257768., 328335., 338065., 413084., 424928., 504455., 518469.,
      523565., 537971., 470204., 482720., 409885., 420455., 342496., 351064.,
      332080., 341544., 433055., 445025., 541436., 555968., 657335., 674485.,
      676445., 693987., 603932., 619136., 523565., 536375., 435232., 445592.,
      405232., 414112., 523730., 534950., 649296., 662904., 782026., 798070.,
      800758., 817138., 709200., 723384., 610190., 622130., 503632., 513280.,
      444160., 452200., 571025., 581175., 704380., 716680., 844305., 858795.,
      861875., 876645., 759580., 772360., 650475., 661225., 534480., 543160.,
      445280., 452224., 570460., 579220., 701312., 711920., 837900., 850388.,
      853524., 866236., 749696., 760688., 639940., 649180., 524192., 531648.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    68.,    88.,    108.,   128.,   148.,
      168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,
      392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,
      1040.,  1112.,  1184.,  758.,   802.,   527.,   593.,   1540.,  1696.,
      1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,
      3256.,  1961.,  2051.,  1451.,  1517.,  3724.,  3880.,  4036.,  4192.,
      4348.,  4504.,  4660.,  4816.,  4972.,  5128.,  5284.,  5440.,  3221.,
      3311.,  2375.,  2441.,  5908.,  6064.,  6220.,  6376.,  6532.,  6688.,
      6844.,  7000.,  7156.,  7312.,  7468.,  7624.,  4481.,  4571.,  3299.,
      3365.,  8092.,  8248.,  8404.,  8560.,  8716.,  8872.,  9028.,  9184.,
      9340.,  9496.,  9652.,  9808.,  5741.,  5831.,  4223.,  4289.,  10276.,
      10432., 10588., 10744., 10900., 11056., 11212., 11368., 11524., 11680.,
      11836., 11992., 7001.,  7091.,  4554.,  4614.,  10472., 10608., 10744.,
      10880., 11016., 11152., 11288., 11424., 11560., 11696., 11832., 11968.,
      6710.,  6786.,  3221.,  3259.,  7196.,  7280.,  7364.,  7448.,  7532.,
      7616.,  7700.,  7784.,  7868.,  7952.,  8036.,  8120.,  4451.,  4497.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,  224800.,  295480.,  314200.,  394672.,  417904.,  508424.,
      536424.,  557928.,  587720.,  529072.,  555376.,  484120.,  506680.,
      422560.,  441120.,  443880.,  467080.,  607550.,  637350.,  793580.,
      830300.,  1002610., 1046570., 1080170., 1126370., 1003820., 1044380.,
      902550.,  937150.,  775720.,  804040.,  807152.,  841136.,  1086580.,
      1130020., 1398600., 1451880., 1743980., 1807484., 1855868., 1922060.,
      1701576., 1759464., 1511620., 1560820., 1285232., 1325360., 1328824.,
      1375640., 1768410., 1828050., 2252740., 2325652., 2782710., 2869342.,
      2935198., 3024966., 2665348., 2743636., 2347170., 2413530., 1979768.,
      2033752., 1982904., 2044056., 2603930., 2681490., 3276868., 3371284.,
      4002614., 4114334., 4155102., 4269958., 3732484., 3832276., 3254370.,
      3338650., 2719864., 2788184., 2636984., 2712472., 3439450., 3534930.,
      4300996., 4416916., 5222518., 5359326., 5375006., 5514950., 4799620.,
      4920916., 4161570., 4263770., 3459960., 3542616., 3222896., 3293744.,
      4165780., 4255300., 5165064., 5273640., 6221516., 6349532., 6371036.,
      6501740., 5643144., 5756328., 4855780., 4951060., 4008176., 4085168.,
      3535720., 3599880., 4545950., 4626950., 5607980., 5706140., 6722450.,
      6838090., 6862730., 6980610., 6048620., 6150620., 5180150., 5265950.,
      4256680., 4325960., 3546784., 3602208., 4544120., 4614040., 5586736.,
      5671408., 6675144., 6774824., 6799912., 6901384., 5973040., 6060784.,
      5098840., 5172600., 4176800., 4236320.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   612.,   756.,   900.,   1044.,
      1188.,  1332.,  1476.,  1620.,  1764.,  1318.,  1422.,  700.,   908.,
      2792.,  3336.,  3880.,  4424.,  4968.,  5512.,  6056.,  6600.,  7144.,
      7688.,  8232.,  8776.,  5708.,  6044.,  3802.,  4306.,  11420., 12620.,
      13820., 15020., 16220., 17420., 18620., 19820., 21020., 22220., 23420.,
      24620., 14962., 15658., 10858., 11362., 28220., 29420., 30620., 31820.,
      33020., 34220., 35420., 36620., 37820., 39020., 40220., 41420., 24706.,
      25402., 17914., 18418., 45020., 46220., 47420., 48620., 49820., 51020.,
      52220., 53420., 54620., 55820., 57020., 58220., 34450., 35146., 24970.,
      25474., 61820., 63020., 64220., 65420., 66620., 67820., 69020., 70220.,
      71420., 72620., 73820., 75020., 44194., 44890., 32026., 32530., 78620.,
      79820., 81020., 82220., 83420., 84620., 85820., 87020., 88220., 89420.,
      90620., 91820., 53938., 54634., 35132., 35596., 81128., 82184., 83240.,
      84296., 85352., 86408., 87464., 88520., 89576., 90632., 91688., 92744.,
      52172., 52764., 25054., 25350., 56116., 56772., 57428., 58084., 58740.,
      59396., 60052., 60708., 61364., 62020., 62676., 63332., 34790., 35150.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,   7504.,   9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,  13832.,  16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,  19320.,  16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,  16560.,  13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,  15360.,  19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,  27160.,  32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,  36680.,  32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,  30400.,  24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,  27400.,  34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,  47124.,  55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,  62188.,  54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,  50360.,  40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,  44520.,  56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,  75068.,  88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,  97412.,  84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,  77560.,  62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,  65576.,  82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505., 107996., 126420., 128184., 129948., 131712.,
      131173., 132986., 134799., 136612., 117803., 119378., 120953., 122528.,
      102690., 104020., 105350., 106680., 85806.,  86884.,  87962.,  89040.,
      83062.,  84252.,  85442.,  86632.,  108325., 109830., 111335., 112840.,
      135443., 137270., 139097., 140924., 164444., 166600., 168756., 170912.,
      169197., 171402., 173607., 175812., 151067., 152978., 154889., 156800.,
      130970., 132580., 134190., 135800., 108878., 110180., 111482., 112784.,
      101380., 102496., 103612., 104728., 131030., 132440., 133850., 135260.,
      162450., 164160., 165870., 167580., 195664., 197680., 199696., 201712.,
      200326., 202384., 204442., 206500., 177426., 179208., 180990., 182772.,
      152660., 154160., 155660., 157160., 126004., 127216., 128428., 129640.,
      111130., 112140., 113150., 114160., 142875., 144150., 145425., 146700.,
      176245., 177790., 179335., 180880., 211260., 213080., 214900., 216720.,
      215635., 217490., 219345., 221200., 190045., 191650., 193255., 194860.,
      162750., 164100., 165450., 166800., 133730., 134820., 135910., 137000.,
      111416., 112288., 113160., 114032., 142740., 143840., 144940., 146040.,
      175484., 176816., 178148., 179480., 209664., 211232., 212800., 214368.,
      213556., 215152., 216748., 218344., 187580., 188960., 190340., 191720.,
      160120., 161280., 162440., 163600., 131160., 132096., 133032., 133968.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,
      55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,
      54.,   56.,   32.,   36.,   40.,   44.,   110.,  120.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,
      250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,
      206.,  212.,  218.,  224.,  149.,  158.,  167.,  176.,  421.,  442.,
      463.,  484.,  505.,  526.,  547.,  568.,  589.,  610.,  631.,  652.,
      673.,  694.,  715.,  736.,  757.,  778.,  799.,  820.,  841.,  862.,
      883.,  904.,  524.,  536.,  548.,  560.,  401.,  410.,  419.,  428.,
      1009., 1030., 1051., 1072., 1093., 1114., 1135., 1156., 1177., 1198.,
      1219., 1240., 1261., 1282., 1303., 1324., 1345., 1366., 1387., 1408.,
      1429., 1450., 1471., 1492., 860.,  872.,  884.,  896.,  653.,  662.,
      671.,  680.,  1597., 1618., 1639., 1660., 1681., 1702., 1723., 1744.,
      1765., 1786., 1807., 1828., 1849., 1870., 1891., 1912., 1933., 1954.,
      1975., 1996., 2017., 2038., 2059., 2080., 1196., 1208., 1220., 1232.,
      905.,  914.,  923.,  932.,  2185., 2206., 2227., 2248., 2269., 2290.,
      2311., 2332., 2353., 2374., 2395., 2416., 2437., 2458., 2479., 2500.,
      2521., 2542., 2563., 2584., 2605., 2626., 2647., 2668., 1532., 1544.,
      1556., 1568., 1157., 1166., 1175., 1184., 2773., 2794., 2815., 2836.,
      2857., 2878., 2899., 2920., 2941., 2962., 2983., 3004., 3025., 3046.,
      3067., 3088., 3109., 3130., 3151., 3172., 3193., 3214., 3235., 3256.,
      1868., 1880., 1892., 1904., 1212., 1220., 1228., 1236., 2766., 2784.,
      2802., 2820., 2838., 2856., 2874., 2892., 2910., 2928., 2946., 2964.,
      2982., 3000., 3018., 3036., 3054., 3072., 3090., 3108., 3126., 3144.,
      3162., 3180., 1762., 1772., 1782., 1792., 845.,  850.,  855.,  860.,
      1879., 1890., 1901., 1912., 1923., 1934., 1945., 1956., 1967., 1978.,
      1989., 2000., 2011., 2022., 2033., 2044., 2055., 2066., 2077., 2088.,
      2099., 2110., 2121., 2132., 1158., 1164., 1170., 1176.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  657048.,
      666512.,  675976.,  685440.,  857115.,  869085.,  881055.,  893025.,
      1071952., 1086484., 1101016., 1115548., 1301783., 1318933., 1336083.,
      1353233., 1339709., 1357251., 1374793., 1392335., 1196440., 1211644.,
      1226848., 1242052., 1037505., 1050315., 1063125., 1075935., 862680.,
      873040.,  883400.,  893760.,  803792.,  812672.,  821552.,  830432.,
      1039030., 1050250., 1061470., 1072690., 1288368., 1301976., 1315584.,
      1329192., 1551998., 1568042., 1584086., 1600130., 1589210., 1605590.,
      1621970., 1638350., 1407744., 1421928., 1436112., 1450296., 1211410.,
      1223350., 1235290., 1247230., 1000016., 1009664., 1019312., 1028960.,
      882280.,  890320.,  898360.,  906400.,  1134425., 1144575., 1154725.,
      1164875., 1399520., 1411820., 1424120., 1436420., 1677725., 1692215.,
      1706705., 1721195., 1712655., 1727425., 1742195., 1756965., 1509560.,
      1522340., 1535120., 1547900., 1292875., 1303625., 1314375., 1325125.,
      1062440., 1071120., 1079800., 1088480., 885344.,  892288.,  899232.,
      906176.,  1134340., 1143100., 1151860., 1160620., 1394656., 1405264.,
      1415872., 1426480., 1666420., 1678908., 1691396., 1703884., 1697500.,
      1710212., 1722924., 1735636., 1491136., 1502128., 1513120., 1524112.,
      1272940., 1282180., 1291420., 1300660., 1042784., 1050240., 1057696.,
      1065152.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,
      320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,
      500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,
      728.,   800.,   872.,   944.,   1016.,  1088.,  1160.,  1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,
      2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,
      1614.,  1003.,  1069.,  1135.,  1201.,  2960.,  3116.,  3272.,  3428.,
      3584.,  3740.,  3896.,  4052.,  4208.,  4364.,  4520.,  4676.,  4832.,
      4988.,  5144.,  5300.,  5456.,  5612.,  5768.,  5924.,  6080.,  6236.,
      6392.,  6548.,  3853.,  3943.,  4033.,  4123.,  2851.,  2917.,  2983.,
      3049.,  7328.,  7484.,  7640.,  7796.,  7952.,  8108.,  8264.,  8420.,
      8576.,  8732.,  8888.,  9044.,  9200.,  9356.,  9512.,  9668.,  9824.,
      9980.,  10136., 10292., 10448., 10604., 10760., 10916., 6373.,  6463.,
      6553.,  6643.,  4699.,  4765.,  4831.,  4897.,  11696., 11852., 12008.,
      12164., 12320., 12476., 12632., 12788., 12944., 13100., 13256., 13412.,
      13568., 13724., 13880., 14036., 14192., 14348., 14504., 14660., 14816.,
      14972., 15128., 15284., 8893.,  8983.,  9073.,  9163.,  6547.,  6613.,
      6679.,  6745.,  16064., 16220., 16376., 16532., 16688., 16844., 17000.,
      17156., 17312., 17468., 17624., 17780., 17936., 18092., 18248., 18404.,
      18560., 18716., 18872., 19028., 19184., 19340., 19496., 19652., 11413.,
      11503., 11593., 11683., 8395.,  8461.,  8527.,  8593.,  20432., 20588.,
      20744., 20900., 21056., 21212., 21368., 21524., 21680., 21836., 21992.,
      22148., 22304., 22460., 22616., 22772., 22928., 23084., 23240., 23396.,
      23552., 23708., 23864., 24020., 13933., 14023., 14113., 14203., 9062.,
      9122.,  9182.,  9242.,  20840., 20976., 21112., 21248., 21384., 21520.,
      21656., 21792., 21928., 22064., 22200., 22336., 22472., 22608., 22744.,
      22880., 23016., 23152., 23288., 23424., 23560., 23696., 23832., 23968.,
      13362., 13438., 13514., 13590., 6413.,  6451.,  6489.,  6527.,  14328.,
      14412., 14496., 14580., 14664., 14748., 14832., 14916., 15000., 15084.,
      15168., 15252., 15336., 15420., 15504., 15588., 15672., 15756., 15840.,
      15924., 16008., 16092., 16176., 16260., 8867.,  8913.,  8959.,  9005.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      411552.,   426016.,   440480.,   454944.,   579160.,   597880.,
      616600.,   635320.,   774704.,   797936.,   821168.,   844400.,
      999208.,   1027208.,  1055208.,  1083208.,  1097096.,  1126888.,
      1156680.,  1186472.,  1041584.,  1067888.,  1094192.,  1120496.,
      954040.,   976600.,   999160.,   1021720.,  833440.,   852000.,
      870560.,   889120.,   873160.,   896360.,   919560.,   942760.,
      1196350.,  1226150.,  1255950.,  1285750.,  1564060.,  1600780.,
      1637500.,  1674220.,  1977570.,  2021530.,  2065490.,  2109450.,
      2131290.,  2177490.,  2223690.,  2269890.,  1982140.,  2022700.,
      2063260.,  2103820.,  1783350.,  1817950.,  1852550.,  1887150.,
      1533640.,  1561960.,  1590280.,  1618600.,  1592944.,  1626928.,
      1660912.,  1694896.,  2145860.,  2189300.,  2232740.,  2276180.,
      2763720.,  2817000.,  2870280.,  2923560.,  3448060.,  3511564.,
      3575068.,  3638572.,  3670156.,  3736348.,  3802540.,  3868732.,
      3366792.,  3424680.,  3482568.,  3540456.,  2992340.,  3041540.,
      3090740.,  3139940.,  2545264.,  2585392.,  2625520.,  2665648.,
      2628248.,  2675064.,  2721880.,  2768696.,  3499370.,  3559010.,
      3618650.,  3678290.,  4459700.,  4532612.,  4605524.,  4678436.,
      5511030.,  5597662.,  5684294.,  5770926.,  5814046.,  5903814.,
      5993582.,  6083350.,  5281556.,  5359844.,  5438132.,  5516420.,
      4652690.,  4719050.,  4785410.,  4851770.,  3925656.,  3979640.,
      4033624.,  4087608.,  3927448.,  3988600.,  4049752.,  4110904.,
      5159210.,  5236770.,  5314330.,  5391890.,  6494516.,  6588932.,
      6683348.,  6777764.,  7935158.,  8046878.,  8158598.,  8270318.,
      8238174.,  8353030.,  8467886.,  8582742.,  7402388.,  7502180.,
      7601972.,  7701764.,  6455890.,  6540170.,  6624450.,  6708730.,
      5396888.,  5465208.,  5533528.,  5601848.,  5226648.,  5302136.,
      5377624.,  5453112.,  6819050.,  6914530.,  7010010.,  7105490.,
      8529332.,  8645252.,  8761172.,  8877092.,  10359286., 10496094.,
      10632902., 10769710., 10662302., 10802246., 10942190., 11082134.,
      9523220.,  9644516.,  9765812.,  9887108.,  8259090.,  8361290.,
      8463490.,  8565690.,  6868120.,  6950776.,  7033432.,  7116088.,
      6401392.,  6472240.,  6543088.,  6613936.,  8275460.,  8364980.,
      8454500.,  8544020.,  10262088., 10370664., 10479240., 10587816.,
      12362812., 12490828., 12618844., 12746860., 12660172., 12790876.,
      12921580., 13052284., 11215368., 11328552., 11441736., 11554920.,
      9651860.,  9747140.,  9842420.,  9937700.,  7968112.,  8045104.,
      8122096.,  8199088.,  7031240.,  7095400.,  7159560.,  7223720.,
      9041150.,  9122150.,  9203150.,  9284150.,  11154460., 11252620.,
      11350780., 11448940., 13372450., 13488090., 13603730., 13719370.,
      13651610., 13769490., 13887370., 14005250., 12033340., 12135340.,
      12237340., 12339340., 10306550., 10392350., 10478150., 10563950.,
      8469960.,  8539240.,  8608520.,  8677800.,  7058848.,  7114272.,
      7169696.,  7225120.,  9044440.,  9114360.,  9184280.,  9254200.,
      11120432., 11205104., 11289776., 11374448., 13287848., 13387528.,
      13487208., 13586888., 13536264., 13637736., 13739208., 13840680.,
      11891120., 11978864., 12066608., 12154352., 10151480., 10225240.,
      10299000., 10372760., 8316320.,  8375840.,  8435360.,  8494880.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      836.,    980.,    1124.,   1268.,   1412.,   1556.,   1700.,   1844.,
      1988.,   2132.,   2276.,   2420.,   2564.,   2708.,   2852.,   2996.,
      3140.,   3284.,   3428.,   3572.,   2566.,   2670.,   2774.,   2878.,
      1260.,   1468.,   1676.,   1884.,   5224.,   5768.,   6312.,   6856.,
      7400.,   7944.,   8488.,   9032.,   9576.,   10120.,  10664.,  11208.,
      11752.,  12296.,  12840.,  13384.,  13928.,  14472.,  15016.,  15560.,
      16104.,  16648.,  17192.,  17736.,  11196.,  11532.,  11868.,  12204.,
      7274.,   7778.,   8282.,   8786.,   22060.,  23260.,  24460.,  25660.,
      26860.,  28060.,  29260.,  30460.,  31660.,  32860.,  34060.,  35260.,
      36460.,  37660.,  38860.,  40060.,  41260.,  42460.,  43660.,  44860.,
      46060.,  47260.,  48460.,  49660.,  29474.,  30170.,  30866.,  31562.,
      21386.,  21890.,  22394.,  22898.,  55660.,  56860.,  58060.,  59260.,
      60460.,  61660.,  62860.,  64060.,  65260.,  66460.,  67660.,  68860.,
      70060.,  71260.,  72460.,  73660.,  74860.,  76060.,  77260.,  78460.,
      79660.,  80860.,  82060.,  83260.,  48962.,  49658.,  50354.,  51050.,
      35498.,  36002.,  36506.,  37010.,  89260.,  90460.,  91660.,  92860.,
      94060.,  95260.,  96460.,  97660.,  98860.,  100060., 101260., 102460.,
      103660., 104860., 106060., 107260., 108460., 109660., 110860., 112060.,
      113260., 114460., 115660., 116860., 68450.,  69146.,  69842.,  70538.,
      49610.,  50114.,  50618.,  51122.,  122860., 124060., 125260., 126460.,
      127660., 128860., 130060., 131260., 132460., 133660., 134860., 136060.,
      137260., 138460., 139660., 140860., 142060., 143260., 144460., 145660.,
      146860., 148060., 149260., 150460., 87938.,  88634.,  89330.,  90026.,
      63722.,  64226.,  64730.,  65234.,  156460., 157660., 158860., 160060.,
      161260., 162460., 163660., 164860., 166060., 167260., 168460., 169660.,
      170860., 172060., 173260., 174460., 175660., 176860., 178060., 179260.,
      180460., 181660., 182860., 184060., 107426., 108122., 108818., 109514.,
      69964.,  70428.,  70892.,  71356.,  161576., 162632., 163688., 164744.,
      165800., 166856., 167912., 168968., 170024., 171080., 172136., 173192.,
      174248., 175304., 176360., 177416., 178472., 179528., 180584., 181640.,
      182696., 183752., 184808., 185864., 103964., 104556., 105148., 105740.,
      49918.,  50214.,  50510.,  50806.,  111812., 112468., 113124., 113780.,
      114436., 115092., 115748., 116404., 117060., 117716., 118372., 119028.,
      119684., 120340., 120996., 121652., 122308., 122964., 123620., 124276.,
      124932., 125588., 126244., 126900., 69350.,  69710.,  70070.,  70430.};
  const std::array<int, 4> in_shape = {{1, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      18242., 23870., 29939., 36456., 37681., 38906., 34811., 30240., 25186.,
      24164., 31430., 39200., 47481., 48706., 49931., 44450., 38430., 31864.,
      29256., 37740., 46704., 56154., 57351., 58548., 51744., 44430., 36600.,
      31920., 40975., 50470., 60410., 61530., 62650., 55120., 47125., 38660.,
      31904., 40820., 50120., 59808., 60802., 61796., 54200., 46200., 37792.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   10.,   16.,   22.,   28.,   34.,   32.,   21.,
      12.,  38.,  80.,   101.,  122.,  143.,  164.,  138.,  84.,
      54.,  144., 273.,  318.,  363.,  408.,  453.,  360.,  210.,
      138., 333., 588.,  633.,  678.,  723.,  768.,  591.,  336.,
      222., 522., 903.,  948.,  993.,  1038., 1083., 822.,  462.,
      306., 711., 1218., 1263., 1308., 1353., 1398., 1053., 588.,
      390., 900., 1533., 1578., 1623., 1668., 1713., 1284., 714.,
      424., 938., 1544., 1583., 1622., 1661., 1700., 1238., 672.,
      301., 652., 1054., 1078., 1102., 1126., 1150., 824.,  441.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,  21540.,  28552.,  36540.,  39732.,  42924.,  40264.,  36500.,
      31600.,  32300.,  43925.,  57050.,  71715.,  76685.,  81655.,  75290.,
      67225.,  57420.,  58344.,  78150.,  100140., 124362., 131502., 138642.,
      126348., 111630., 94440.,  95620.,  126735., 160846., 198009., 207711.,
      217413., 196462., 172235., 144676., 142492., 186585., 234178., 285327.,
      295029., 304731., 272818., 237125., 197596., 189364., 246435., 307510.,
      372645., 382347., 392049., 349174., 302015., 250516., 230280., 297150.,
      367836., 442386., 451878., 461370., 407868., 350310., 288648., 251900.,
      323425., 398450., 477015., 485905., 494795., 435410., 372325., 305500.,
      252208., 322740., 396328., 473004., 480900., 488796., 428776., 365540.,
      299056.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   59.,    101.,   143.,   185.,   227.,   222.,  149.,
      70.,   244.,  538.,   694.,   850.,   1006.,  1162.,  996.,  614.,
      363.,  1002., 1941.,  2283.,  2625.,  2967.,  3309.,  2658., 1563.,
      993.,  2430., 4335.,  4677.,  5019.,  5361.,  5703.,  4422., 2529.,
      1623., 3858., 6729.,  7071.,  7413.,  7755.,  8097.,  6186., 3495.,
      2253., 5286., 9123.,  9465.,  9807.,  10149., 10491., 7950., 4461.,
      2883., 6714., 11517., 11859., 12201., 12543., 12885., 9714., 5427.,
      3214., 7140., 11794., 12094., 12394., 12694., 12994., 9492., 5166.,
      2309., 5014., 8123.,  8309.,  8495.,  8681.,  8867.,  6366., 3413.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,  167640.,  222608.,  285320.,  310632.,  335944.,  315536.,
      286360.,  248160.,  252600.,  343950.,  447220.,  562730.,  602210.,
      641690.,  592180.,  529150.,  452280.,  458256.,  614340.,  787800.,
      979020.,  1035804., 1092588., 996312.,  880740.,  745488.,  753256.,
      998970.,  1268540., 1562414., 1639638., 1716862., 1552124., 1361290.,
      1143912., 1126216., 1475250., 1852172., 2257430., 2334654., 2411878.,
      2159948., 1877890., 1565256., 1499176., 1951530., 2435804., 2952446.,
      3029670., 3106894., 2767772., 2394490., 1986600., 1827216., 2358180.,
      2919576., 3511788., 3587388., 3662988., 3238680., 2782020., 2292624.,
      2001400., 2569950., 3166420., 3791130., 3861970., 3932810., 3461140.,
      2959950., 2428920., 2005600., 2566680., 3152144., 3762248., 3825192.,
      3888136., 3410960., 2908120., 2379360.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   394.,   706.,   1018.,  1330.,  1642.,   1644.,  1118.,
      460.,   1720.,  3908.,  5108.,  6308.,  7508.,  8708.,   7544.,  4684.,
      2634.,  7428.,  14574., 17238., 19902., 22566., 25230.,  20388., 12042.,
      7506.,  18516., 33222., 35886., 38550., 41214., 43878.,  34164., 19602.,
      12378., 29604., 51870., 54534., 57198., 59862., 62526.,  47940., 27162.,
      17250., 40692., 70518., 73182., 75846., 78510., 81174.,  61716., 34722.,
      22122., 51780., 89166., 91830., 94494., 97158., 99822.,  75492., 42282.,
      25004., 55672., 92132., 94484., 96836., 99188., 101540., 74296., 40492.,
      18078., 39308., 63754., 65218., 66682., 68146., 69610.,  50028., 26846.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,   5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654.,  11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,   8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075.,  19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290.,  14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975.,  32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795.,  28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075.,  41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937.,  50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375.,  47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754.,  77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  46998.,  48328.,  61180.,  62860.,  76363.,  78400.,
      92561.,  94962.,  94962.,  97412.,  97363.,  99862.,  86737.,  88900.,
      75040.,  76860.,  62258.,  63728.,  57264.,  58512.,  73905.,  75480.,
      91500.,  93408.,  110061., 112308., 112413., 114702., 114765., 117096.,
      101472., 103488., 87165.,  88860.,  71832.,  73200.,  62710.,  63840.,
      80525.,  81950.,  99215.,  100940., 118790., 120820., 120995., 123060.,
      123200., 125300., 108425., 110240., 92725.,  94250.,  76090.,  77320.,
      62832.,  63808.,  80410.,  81640.,  98752.,  100240., 117866., 119616.,
      119826., 121604., 121786., 123592., 106840., 108400., 91090.,  92400.,
      74528.,  75584.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   26.,   32.,   38.,   44.,
      50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,
      64.,   76.,   139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,
      307.,  328.,  260.,  276.,  159.,  168.,  96.,   108.,  261.,  288.,
      501.,  546.,  591.,  636.,  681.,  726.,  771.,  816.,  861.,  906.,
      687.,  720.,  402.,  420.,  264.,  276.,  639.,  666.,  1131., 1176.,
      1221., 1266., 1311., 1356., 1401., 1446., 1491., 1536., 1149., 1182.,
      654.,  672.,  432.,  444.,  1017., 1044., 1761., 1806., 1851., 1896.,
      1941., 1986., 2031., 2076., 2121., 2166., 1611., 1644., 906.,  924.,
      600.,  612.,  1395., 1422., 2391., 2436., 2481., 2526., 2571., 2616.,
      2661., 2706., 2751., 2796., 2073., 2106., 1158., 1176., 768.,  780.,
      1773., 1800., 3021., 3066., 3111., 3156., 3201., 3246., 3291., 3336.,
      3381., 3426., 2535., 2568., 1410., 1428., 837.,  848.,  1852., 1876.,
      3049., 3088., 3127., 3166., 3205., 3244., 3283., 3322., 3361., 3400.,
      2448., 2476., 1329., 1344., 595.,  602.,  1289., 1304., 2084., 2108.,
      2132., 2156., 2180., 2204., 2228., 2252., 2276., 2300., 1631., 1648.,
      873.,  882.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,  31440.,  41120.,  43720.,  54680.,  57896.,  70168.,  74032.,
      76384.,  80472.,  82600.,  86912.,  77672.,  81464.,  70560.,  73800.,
      61200.,  63856.,  62160.,  65400.,  84725.,  88875.,  110260., 115360.,
      138845., 144935., 148575., 154945., 158305., 164955., 146200., 152020.,
      130725., 135675., 111800., 115840., 113112., 117864., 151740., 157800.,
      194700., 202116., 242088., 250908., 256116., 265272., 270144., 279636.,
      246468., 254748., 217980., 225000., 184584., 190296., 186312., 192864.,
      247205., 255535., 314048., 324212., 386953., 399007., 406063., 418509.,
      425173., 438011., 384524., 395696., 337365., 346815., 283584., 291256.,
      278544., 287112., 365015., 375865., 458444., 471632., 558943., 574525.,
      578053., 594027., 597163., 613529., 534968., 549164., 465255., 477225.,
      387912., 397600., 370776., 381360., 482825., 496195., 602840., 619052.,
      730933., 750043., 750043., 769545., 769153., 789047., 685412., 702632.,
      593145., 607635., 492240., 503944., 453096., 463032., 584880., 597420.,
      724260., 739452., 871332., 889224., 890064., 908292., 908796., 927360.,
      803676., 819732., 690480., 703980., 569112., 580008., 497040., 506040.,
      638325., 649675., 786580., 800320., 941885., 958055., 959455., 975905.,
      977025., 993755., 859960., 874420., 735525., 747675., 603640., 613440.,
      498576., 506352., 638120., 647920., 783752., 795608., 935536., 949480.,
      951160., 965328., 966784., 981176., 848216., 860648., 723240., 733680.,
      591792., 600208.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   169.,   211.,   253.,
      295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,
      112.,   148.,   420.,   508.,   956.,   1112.,  1268.,  1424.,  1580.,
      1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,
      657.,   747.,   1848.,  2052.,  3621.,  3963.,  4305.,  4647.,  4989.,
      5331.,  5673.,  6015.,  6357.,  6699.,  5124.,  5376.,  3021.,  3159.,
      1917.,  2007.,  4704.,  4908.,  8409.,  8751.,  9093.,  9435.,  9777.,
      10119., 10461., 10803., 11145., 11487., 8652.,  8904.,  4953.,  5091.,
      3177.,  3267.,  7560.,  7764.,  13197., 13539., 13881., 14223., 14565.,
      14907., 15249., 15591., 15933., 16275., 12180., 12432., 6885.,  7023.,
      4437.,  4527.,  10416., 10620., 17985., 18327., 18669., 19011., 19353.,
      19695., 20037., 20379., 20721., 21063., 15708., 15960., 8817.,  8955.,
      5697.,  5787.,  13272., 13476., 22773., 23115., 23457., 23799., 24141.,
      24483., 24825., 25167., 25509., 25851., 19236., 19488., 10749., 10887.,
      6364.,  6448.,  14140., 14324., 23360., 23660., 23960., 24260., 24560.,
      24860., 25160., 25460., 25760., 26060., 18820., 19036., 10244., 10360.,
      4577.,  4631.,  9940.,  10056., 16105., 16291., 16477., 16663., 16849.,
      17035., 17221., 17407., 17593., 17779., 12632., 12764., 6773.,  6843.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,  246240.,  322280.,  342920.,  429136.,  454672.,  551320.,
      582008.,  600824.,  633304.,  650328.,  684600.,  612112.,  642256.,
      556520.,  582280.,  483040.,  504160.,  489000.,  514760.,  667150.,
      700150.,  868940.,  909500.,  1095010., 1143450., 1172570., 1223250.,
      1250130., 1303050., 1155260., 1201580., 1033550., 1072950., 884360.,
      916520.,  892752.,  930576.,  1198380., 1246620., 1538520., 1597560.,
      1913940., 1984164., 2025828., 2098740., 2137716., 2213316., 1951224.,
      2017176., 1726380., 1782300., 1462416., 1507920., 1473752., 1525944.,
      1956290., 2022650., 2486260., 2567236., 3064558., 3160598., 3217046.,
      3316222., 3369534., 3471846., 3048388., 3137428., 2675330., 2750650.,
      2249464., 2310616., 2209592., 2277912., 2896250., 2982770., 3638404.,
      3743572., 4436950., 4561214., 4589438., 4716838., 4741926., 4872462.,
      4248916., 4362148., 3695930., 3791410., 3082072., 3159352., 2945432.,
      3029880., 3836210., 3942890., 4790548., 4919908., 5809342., 5961830.,
      5961830., 6117454., 6114318., 6273078., 5449444., 5586868., 4716530.,
      4832170., 3914680., 4008088., 3604752., 3684048., 4653660., 4753740.,
      5763192., 5884440., 6934116., 7076916., 7083636., 7229124., 7233156.,
      7381332., 6397080., 6525240., 5496540., 5604300., 4530768., 4617744.,
      3957800., 4029640., 5083150., 5173750., 6264140., 6373820., 7501410.,
      7630490., 7641690., 7773010., 7781970., 7915530., 6849980., 6965420.,
      5859150., 5956150., 4808840., 4887080., 3972320., 4034400., 5084360.,
      5162600., 6245008., 6339664., 7454776., 7566104., 7579544., 7692664.,
      7704312., 7819224., 6759760., 6859024., 5764040., 5847400., 4716640.,
      4783840.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1202.,   1514.,
      1826.,   2138.,   2450.,   2762.,   3074.,   3386.,   3108.,   3380.,
      2126.,   2294.,   740.,    1012.,   3000.,   3672.,   7036.,   8236.,
      9436.,   10636.,  11836.,  13036.,  14236.,  15436.,  16636.,  17836.,
      14488.,  15416.,  9028.,   9556.,   4818.,   5514.,   13836.,  15420.,
      27438.,  30102.,  32766.,  35430.,  38094.,  40758.,  43422.,  46086.,
      48750.,  51414.,  39516.,  41484.,  23394.,  24474.,  14562.,  15258.,
      36012.,  37596.,  64734.,  67398.,  70062.,  72726.,  75390.,  78054.,
      80718.,  83382.,  86046.,  88710.,  67068.,  69036.,  38514.,  39594.,
      24306.,  25002.,  58188.,  59772.,  102030., 104694., 107358., 110022.,
      112686., 115350., 118014., 120678., 123342., 126006., 94620.,  96588.,
      53634.,  54714.,  34050.,  34746.,  80364.,  81948.,  139326., 141990.,
      144654., 147318., 149982., 152646., 155310., 157974., 160638., 163302.,
      122172., 124140., 68754.,  69834.,  43794.,  44490.,  102540., 104124.,
      176622., 179286., 181950., 184614., 187278., 189942., 192606., 195270.,
      197934., 200598., 149724., 151692., 83874.,  84954.,  49588.,  50244.,
      110424., 111864., 182764., 185116., 187468., 189820., 192172., 194524.,
      196876., 199228., 201580., 203932., 147512., 149208., 80404.,  81316.,
      35886.,  36310.,  78036.,  78948.,  126578., 128042., 129506., 130970.,
      132434., 133898., 135362., 136826., 138290., 139754., 99396.,  100436.,
      53342.,  53894.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,   7680.,   7936.,   8192.,   10370.,  10700.,  11030.,  11360.,
      13784.,  14192.,  14600.,  15008.,  17682.,  18172.,  18662.,  19152.,
      19222.,  19740.,  20258.,  20776.,  20762.,  21308.,  21854.,  22400.,
      19520.,  20000.,  20480.,  20960.,  17730.,  18140.,  18550.,  18960.,
      15376.,  15712.,  16048.,  16384.,  15650.,  16060.,  16470.,  16880.,
      21325.,  21850.,  22375.,  22900.,  27745.,  28390.,  29035.,  29680.,
      34930.,  35700.,  36470.,  37240.,  37345.,  38150.,  38955.,  39760.,
      39760.,  40600.,  41440.,  42280.,  36715.,  37450.,  38185.,  38920.,
      32825.,  33450.,  34075.,  34700.,  28070.,  28580.,  29090.,  29600.,
      28440.,  29040.,  29640.,  30240.,  38145.,  38910.,  39675.,  40440.,
      48936.,  49872.,  50808.,  51744.,  60837.,  61950.,  63063.,  64176.,
      64323.,  65478.,  66633.,  67788.,  67809.,  69006.,  70203.,  71400.,
      61860.,  62904.,  63948.,  64992.,  54705.,  55590.,  56475.,  57360.,
      46320.,  47040.,  47760.,  48480.,  46802.,  47628.,  48454.,  49280.,
      62090.,  63140.,  64190.,  65240.,  78869.,  80150.,  81431.,  82712.,
      97167.,  98686.,  100205., 101724., 101920., 103488., 105056., 106624.,
      106673., 108290., 109907., 111524., 96467.,  97874.,  99281.,  100688.,
      84630.,  85820.,  87010.,  88200.,  71134.,  72100.,  73066.,  74032.,
      69734.,  70812.,  71890.,  72968.,  91385.,  92750.,  94115.,  95480.,
      114779., 116438., 118097., 119756., 139944., 141904., 143864., 145824.,
      144697., 146706., 148715., 150724., 149450., 151508., 153566., 155624.,
      133889., 135674., 137459., 139244., 116445., 117950., 119455., 120960.,
      97090.,  98308.,  99526.,  100744., 92666.,  93996.,  95326.,  96656.,
      120680., 122360., 124040., 125720., 150689., 152726., 154763., 156800.,
      182721., 185122., 187523., 189924., 187474., 189924., 192374., 194824.,
      192227., 194726., 197225., 199724., 171311., 173474., 175637., 177800.,
      148260., 150080., 151900., 153720., 123046., 124516., 125986., 127456.,
      113280., 114528., 115776., 117024., 146235., 147810., 149385., 150960.,
      181092., 183000., 184908., 186816., 217875., 220122., 222369., 224616.,
      222537., 224826., 227115., 229404., 227199., 229530., 231861., 234192.,
      200928., 202944., 204960., 206976., 172635., 174330., 176025., 177720.,
      142296., 143664., 145032., 146400., 124290., 125420., 126550., 127680.,
      159625., 161050., 162475., 163900., 196705., 198430., 200155., 201880.,
      235550., 237580., 239610., 241640., 239925., 241990., 244055., 246120.,
      244300., 246400., 248500., 250600., 215035., 216850., 218665., 220480.,
      183925., 185450., 186975., 188500., 150950., 152180., 153410., 154640.,
      124688., 125664., 126640., 127616., 159590., 160820., 162050., 163280.,
      196016., 197504., 198992., 200480., 233982., 235732., 237482., 239232.,
      237874., 239652., 241430., 243208., 241766., 243572., 245378., 247184.,
      212120., 213680., 215240., 216800., 180870., 182180., 183490., 184800.,
      148000., 149056., 150112., 151168.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   22.,   28.,
      34.,   40.,   46.,   52.,   58.,   64.,   70.,   76.,   82.,   88.,
      94.,   100.,  106.,  112.,  118.,  124.,  130.,  136.,  113.,  118.,
      123.,  128.,  75.,   78.,   81.,   84.,   33.,   38.,   43.,   48.,
      116.,  128.,  140.,  152.,  257.,  278.,  299.,  320.,  341.,  362.,
      383.,  404.,  425.,  446.,  467.,  488.,  509.,  530.,  551.,  572.,
      593.,  614.,  635.,  656.,  504.,  520.,  536.,  552.,  309.,  318.,
      327.,  336.,  180.,  192.,  204.,  216.,  495.,  522.,  549.,  576.,
      957.,  1002., 1047., 1092., 1137., 1182., 1227., 1272., 1317., 1362.,
      1407., 1452., 1497., 1542., 1587., 1632., 1677., 1722., 1767., 1812.,
      1341., 1374., 1407., 1440., 786.,  804.,  822.,  840.,  516.,  528.,
      540.,  552.,  1251., 1278., 1305., 1332., 2217., 2262., 2307., 2352.,
      2397., 2442., 2487., 2532., 2577., 2622., 2667., 2712., 2757., 2802.,
      2847., 2892., 2937., 2982., 3027., 3072., 2265., 2298., 2331., 2364.,
      1290., 1308., 1326., 1344., 852.,  864.,  876.,  888.,  2007., 2034.,
      2061., 2088., 3477., 3522., 3567., 3612., 3657., 3702., 3747., 3792.,
      3837., 3882., 3927., 3972., 4017., 4062., 4107., 4152., 4197., 4242.,
      4287., 4332., 3189., 3222., 3255., 3288., 1794., 1812., 1830., 1848.,
      1188., 1200., 1212., 1224., 2763., 2790., 2817., 2844., 4737., 4782.,
      4827., 4872., 4917., 4962., 5007., 5052., 5097., 5142., 5187., 5232.,
      5277., 5322., 5367., 5412., 5457., 5502., 5547., 5592., 4113., 4146.,
      4179., 4212., 2298., 2316., 2334., 2352., 1524., 1536., 1548., 1560.,
      3519., 3546., 3573., 3600., 5997., 6042., 6087., 6132., 6177., 6222.,
      6267., 6312., 6357., 6402., 6447., 6492., 6537., 6582., 6627., 6672.,
      6717., 6762., 6807., 6852., 5037., 5070., 5103., 5136., 2802., 2820.,
      2838., 2856., 1663., 1674., 1685., 1696., 3680., 3704., 3728., 3752.,
      6059., 6098., 6137., 6176., 6215., 6254., 6293., 6332., 6371., 6410.,
      6449., 6488., 6527., 6566., 6605., 6644., 6683., 6722., 6761., 6800.,
      4868., 4896., 4924., 4952., 2643., 2658., 2673., 2688., 1183., 1190.,
      1197., 1204., 2563., 2578., 2593., 2608., 4144., 4168., 4192., 4216.,
      4240., 4264., 4288., 4312., 4336., 4360., 4384., 4408., 4432., 4456.,
      4480., 4504., 4528., 4552., 4576., 4600., 3245., 3262., 3279., 3296.,
      1737., 1746., 1755., 1764.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  733600.,  744184.,
      754768.,  765352.,  955605.,  968975.,  982345.,  995715.,  1193500.,
      1209712., 1225924., 1242136., 1447509., 1466619., 1485729., 1504839.,
      1485435., 1504937., 1524439., 1543941., 1523361., 1543255., 1563149.,
      1583043., 1357888., 1375108., 1392328., 1409548., 1175405., 1189895.,
      1204385., 1218875., 975688.,  987392.,  999096.,  1010800., 898728.,
      908664.,  918600.,  928536.,  1160340., 1172880., 1185420., 1197960.,
      1437108., 1452300., 1467492., 1482684., 1729224., 1747116., 1765008.,
      1782900., 1766436., 1784664., 1802892., 1821120., 1803648., 1822212.,
      1840776., 1859340., 1595292., 1611348., 1627404., 1643460., 1370820.,
      1384320., 1397820., 1411320., 1130040., 1140936., 1151832., 1162728.,
      987320.,  996320.,  1005320., 1014320., 1268125., 1279475., 1290825.,
      1302175., 1562840., 1576580., 1590320., 1604060., 1871625., 1887795.,
      1903965., 1920135., 1906555., 1923005., 1939455., 1955905., 1941485.,
      1958215., 1974945., 1991675., 1709060., 1723520., 1737980., 1752440.,
      1461925., 1474075., 1486225., 1498375., 1199920., 1209720., 1219520.,
      1229320., 991312.,  999088.,  1006864., 1014640., 1268880., 1278680.,
      1288480., 1298280., 1558600., 1570456., 1582312., 1594168., 1860600.,
      1874544., 1888488., 1902432., 1891680., 1905848., 1920016., 1934184.,
      1922760., 1937152., 1951544., 1965936., 1687096., 1699528., 1711960.,
      1724392., 1438640., 1449080., 1459520., 1469960., 1177264., 1185680.,
      1194096., 1202512.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,
      557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,
      935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,
      196.,   232.,   268.,   304.,   772.,   860.,   948.,   1036.,  1792.,
      1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,
      3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,
      4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,
      1245.,  1335.,  1425.,  1515.,  3540.,  3744.,  3948.,  4152.,  6981.,
      7323.,  7665.,  8007.,  8349.,  8691.,  9033.,  9375.,  9717.,  10059.,
      10401., 10743., 11085., 11427., 11769., 12111., 12453., 12795., 13137.,
      13479., 10056., 10308., 10560., 10812., 5937.,  6075.,  6213.,  6351.,
      3765.,  3855.,  3945.,  4035.,  9252.,  9456.,  9660.,  9864.,  16557.,
      16899., 17241., 17583., 17925., 18267., 18609., 18951., 19293., 19635.,
      19977., 20319., 20661., 21003., 21345., 21687., 22029., 22371., 22713.,
      23055., 17112., 17364., 17616., 17868., 9801.,  9939.,  10077., 10215.,
      6285.,  6375.,  6465.,  6555.,  14964., 15168., 15372., 15576., 26133.,
      26475., 26817., 27159., 27501., 27843., 28185., 28527., 28869., 29211.,
      29553., 29895., 30237., 30579., 30921., 31263., 31605., 31947., 32289.,
      32631., 24168., 24420., 24672., 24924., 13665., 13803., 13941., 14079.,
      8805.,  8895.,  8985.,  9075.,  20676., 20880., 21084., 21288., 35709.,
      36051., 36393., 36735., 37077., 37419., 37761., 38103., 38445., 38787.,
      39129., 39471., 39813., 40155., 40497., 40839., 41181., 41523., 41865.,
      42207., 31224., 31476., 31728., 31980., 17529., 17667., 17805., 17943.,
      11325., 11415., 11505., 11595., 26388., 26592., 26796., 27000., 45285.,
      45627., 45969., 46311., 46653., 46995., 47337., 47679., 48021., 48363.,
      48705., 49047., 49389., 49731., 50073., 50415., 50757., 51099., 51441.,
      51783., 38280., 38532., 38784., 39036., 21393., 21531., 21669., 21807.,
      12664., 12748., 12832., 12916., 28140., 28324., 28508., 28692., 46492.,
      46792., 47092., 47392., 47692., 47992., 48292., 48592., 48892., 49192.,
      49492., 49792., 50092., 50392., 50692., 50992., 51292., 51592., 51892.,
      52192., 37476., 37692., 37908., 38124., 20400., 20516., 20632., 20748.,
      9113.,  9167.,  9221.,  9275.,  19792., 19908., 20024., 20140., 32069.,
      32255., 32441., 32627., 32813., 32999., 33185., 33371., 33557., 33743.,
      33929., 34115., 34301., 34487., 34673., 34859., 35045., 35231., 35417.,
      35603., 25164., 25296., 25428., 25560., 13493., 13563., 13633., 13703.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450400.,   466400.,   482400.,   498400.,   631560.,   652200.,
      672840.,   693480.,   842192.,   867728.,   893264.,   918800.,
      1083320.,  1114008.,  1144696.,  1175384.,  1181208.,  1213688.,
      1246168.,  1278648.,  1279096.,  1313368.,  1347640.,  1381912.,
      1205264.,  1235408.,  1265552.,  1295696.,  1096840.,  1122600.,
      1148360.,  1174120.,  952800.,   973920.,   995040.,   1016160.,
      961800.,   987560.,   1013320.,  1039080.,  1313550.,  1346550.,
      1379550.,  1412550.,  1712380.,  1752940.,  1793500.,  1834060.,
      2159570.,  2208010.,  2256450.,  2304890.,  2313290.,  2363970.,
      2414650.,  2465330.,  2467010.,  2519930.,  2572850.,  2625770.,
      2281420.,  2327740.,  2374060.,  2420380.,  2042350.,  2081750.,
      2121150.,  2160550.,  1748520.,  1780680.,  1812840.,  1845000.,
      1761744.,  1799568.,  1837392.,  1875216.,  2366460.,  2414700.,
      2462940.,  2511180.,  3039960.,  3099000.,  3158040.,  3217080.,
      3783780.,  3854004.,  3924228.,  3994452.,  4005876.,  4078788.,
      4151700.,  4224612.,  4227972.,  4303572.,  4379172.,  4454772.,
      3861048.,  3927000.,  3992952.,  4058904.,  3417660.,  3473580.,
      3529500.,  3585420.,  2896272.,  2941776.,  2987280.,  3032784.,
      2914744.,  2966936.,  3019128.,  3071320.,  3870930.,  3937290.,
      4003650.,  4070010.,  4921700.,  5002676.,  5083652.,  5164628.,
      6068846.,  6164886.,  6260926.,  6356966.,  6371862.,  6471038.,
      6570214.,  6669390.,  6674878.,  6777190.,  6879502.,  6981814.,
      6040916.,  6129956.,  6218996.,  6308036.,  5303410.,  5378730.,
      5454050.,  5529370.,  4460568.,  4521720.,  4582872.,  4644024.,
      4376344.,  4444664.,  4512984.,  4581304.,  5738250.,  5824770.,
      5911290.,  5997810.,  7210868.,  7316036.,  7421204.,  7526372.,
      8795990.,  8920254.,  9044518.,  9168782.,  9099006.,  9226406.,
      9353806.,  9481206.,  9402022.,  9532558.,  9663094.,  9793630.,
      8426852.,  8540084.,  8653316.,  8766548.,  7332010.,  7427490.,
      7522970.,  7618450.,  6115704.,  6192984.,  6270264.,  6347544.,
      5837944.,  5922392.,  6006840.,  6091288.,  7605570.,  7712250.,
      7818930.,  7925610.,  9500036.,  9629396.,  9758756.,  9888116.,
      11523134., 11675622., 11828110., 11980598., 11826150., 11981774.,
      12137398., 12293022., 12129166., 12287926., 12446686., 12605446.,
      10812788., 10950212., 11087636., 11225060., 9360610.,  9476250.,
      9591890.,  9707530.,  7770840.,  7864248.,  7957656.,  8051064.,
      7159824.,  7239120.,  7318416.,  7397712.,  9244620.,  9344700.,
      9444780.,  9544860.,  11450424., 11571672., 11692920., 11814168.,
      13778772., 13921572., 14064372., 14207172., 14076132., 14221620.,
      14367108., 14512596., 14373492., 14521668., 14669844., 14818020.,
      12713880., 12842040., 12970200., 13098360., 10925580., 11033340.,
      11141100., 11248860., 9007056.,  9094032.,  9181008.,  9267984.,
      7870600.,  7942440.,  8014280.,  8086120.,  10109550., 10200150.,
      10290750., 10381350., 12459580., 12569260., 12678940., 12788620.,
      14921970., 15051050., 15180130., 15309210., 15201130., 15332450.,
      15463770., 15595090., 15480290., 15613850., 15747410., 15880970.,
      13627660., 13743100., 13858540., 13973980., 11657550., 11754550.,
      11851550., 11948550., 9568680.,  9646920.,  9725160.,  9803400.,
      7905760.,  7967840.,  8029920.,  8092000.,  10119720., 10197960.,
      10276200., 10354440., 12430736., 12525392., 12620048., 12714704.,
      14839832., 14951160., 15062488., 15173816., 15088248., 15201368.,
      15314488., 15427608., 15336664., 15451576., 15566488., 15681400.,
      13457360., 13556624., 13655888., 13755152., 11475880., 11559240.,
      11642600., 11725960., 9391200.,  9458400.,  9525600.,  9592800.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1570.,   1882.,   2194.,   2506.,   2818.,   3130.,
      3442.,   3754.,   4066.,   4378.,   4690.,   5002.,   5314.,   5626.,
      5938.,   6250.,   6562.,   6874.,   6036.,   6308.,   6580.,   6852.,
      4142.,   4310.,   4478.,   4646.,   1300.,   1572.,   1844.,   2116.,
      5560.,   6232.,   6904.,   7576.,   13292.,  14492.,  15692.,  16892.,
      18092.,  19292.,  20492.,  21692.,  22892.,  24092.,  25292.,  26492.,
      27692.,  28892.,  30092.,  31292.,  32492.,  33692.,  34892.,  36092.,
      28376.,  29304.,  30232.,  31160.,  17716.,  18244.,  18772.,  19300.,
      9186.,   9882.,   10578.,  11274.,  26652.,  28236.,  29820.,  31404.,
      53166.,  55830.,  58494.,  61158.,  63822.,  66486.,  69150.,  71814.,
      74478.,  77142.,  79806.,  82470.,  85134.,  87798.,  90462.,  93126.,
      95790.,  98454.,  101118., 103782., 77772.,  79740.,  81708.,  83676.,
      46098.,  47178.,  48258.,  49338.,  28674.,  29370.,  30066.,  30762.,
      71004.,  72588.,  74172.,  75756.,  127758., 130422., 133086., 135750.,
      138414., 141078., 143742., 146406., 149070., 151734., 154398., 157062.,
      159726., 162390., 165054., 167718., 170382., 173046., 175710., 178374.,
      132876., 134844., 136812., 138780., 76338.,  77418.,  78498.,  79578.,
      48162.,  48858.,  49554.,  50250.,  115356., 116940., 118524., 120108.,
      202350., 205014., 207678., 210342., 213006., 215670., 218334., 220998.,
      223662., 226326., 228990., 231654., 234318., 236982., 239646., 242310.,
      244974., 247638., 250302., 252966., 187980., 189948., 191916., 193884.,
      106578., 107658., 108738., 109818., 67650.,  68346.,  69042.,  69738.,
      159708., 161292., 162876., 164460., 276942., 279606., 282270., 284934.,
      287598., 290262., 292926., 295590., 298254., 300918., 303582., 306246.,
      308910., 311574., 314238., 316902., 319566., 322230., 324894., 327558.,
      243084., 245052., 247020., 248988., 136818., 137898., 138978., 140058.,
      87138.,  87834.,  88530.,  89226.,  204060., 205644., 207228., 208812.,
      351534., 354198., 356862., 359526., 362190., 364854., 367518., 370182.,
      372846., 375510., 378174., 380838., 383502., 386166., 388830., 391494.,
      394158., 396822., 399486., 402150., 298188., 300156., 302124., 304092.,
      167058., 168138., 169218., 170298., 98756.,  99412.,  100068., 100724.,
      219928., 221368., 222808., 224248., 364028., 366380., 368732., 371084.,
      373436., 375788., 378140., 380492., 382844., 385196., 387548., 389900.,
      392252., 394604., 396956., 399308., 401660., 404012., 406364., 408716.,
      293944., 295640., 297336., 299032., 160228., 161140., 162052., 162964.,
      71502.,  71926.,  72350.,  72774.,  155492., 156404., 157316., 158228.,
      252226., 253690., 255154., 256618., 258082., 259546., 261010., 262474.,
      263938., 265402., 266866., 268330., 269794., 271258., 272722., 274186.,
      275650., 277114., 278578., 280042., 198132., 199172., 200212., 201252.,
      106334., 106886., 107438., 107990.};
  const std::array<int, 4> in_shape = {{1, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17850., 22589., 27734., 28959., 30184.,
      31409., 28280., 24710., 20692., 20090., 26250., 32879., 39984., 41209.,
      42434., 43659., 38990., 33810., 28112., 26670., 34650., 43169., 52234.,
      53459., 54684., 55909., 49700., 42910., 35532., 32330., 41665., 51513.,
      61880., 63077., 64274., 65471., 57795., 49570., 40790., 35300., 45275.,
      55720., 66640., 67760., 68880., 70000., 61525., 52550., 43070., 35300.,
      45130., 55370., 66024., 67018., 68012., 69006., 60470., 51500., 42092.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,  41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,
      169., 398.,  690.,  1048., 1126., 1204., 1282., 1086., 809.,  448.,
      274., 629.,  1068., 1594., 1672., 1750., 1828., 1527., 1124., 616.,
      379., 860.,  1446., 2140., 2218., 2296., 2374., 1968., 1439., 784.,
      484., 1091., 1824., 2686., 2764., 2842., 2920., 2409., 1754., 952.,
      539., 1171., 1898., 2722., 2790., 2858., 2926., 2357., 1681., 896.,
      387., 826.,  1318., 1864., 1906., 1948., 1990., 1582., 1115., 588.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,  23320.,  30832.,  39368.,  42560.,  45752.,  48944.,  45664.,
      41200.,  35520.,  35260.,  47825.,  61970.,  77735.,  82705.,  87675.,
      92645.,  85070.,  75675.,  64420.,  63904.,  85400.,  109200., 135352.,
      142492., 149632., 156772., 142392., 125420., 105808., 104972., 138845.,
      175882., 216139., 225841., 235543., 245245., 220990., 193235., 161924.,
      157052., 205345., 257362., 313159., 322861., 332563., 342265., 305830.,
      265335., 220724., 209132., 271845., 338842., 410179., 419881., 429583.,
      439285., 390670., 337435., 279524., 254608., 328220., 405912., 487732.,
      497224., 506716., 516208., 455808., 391040., 321856., 278700., 357525.,
      440090., 526435., 535325., 544215., 553105., 486230., 415375., 340500.,
      279168., 356960., 438016., 522368., 530264., 538160., 546056., 478576.,
      407640., 333216.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1235.,  2938.,  5133.,  7844.,  8444.,  9044.,
      9644.,  8211.,  6142.,  3413.,  2033.,  4702.,  8031.,  12044., 12644.,
      13244., 13844., 11613., 8578.,  4715.,  2831.,  6466.,  10929., 16244.,
      16844., 17444., 18044., 15015., 11014., 6017.,  3629.,  8230.,  13827.,
      20444., 21044., 21644., 22244., 18417., 13450., 7319.,  4128.,  8992.,
      14608., 20992., 21520., 22048., 22576., 18220., 13016., 6948.,  2993.,
      6398.,  10223., 14476., 14804., 15132., 15460., 12305., 8682.,  4583.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,  181640.,  240560.,  307608.,  332920.,  358232.,  383544.,
      358256.,  323560.,  279200.,  275960.,  374750.,  486100.,  610330.,
      649810.,  689290.,  728770.,  669700.,  596150.,  507800.,  502256.,
      671740.,  859560.,  1066100., 1122884., 1179668., 1236452., 1123656.,
      990220.,  835760.,  827400.,  1095010., 1387820., 1706278., 1783502.,
      1860726., 1937950., 1747004., 1528170., 1281000., 1241800., 1624210.,
      2036300., 2478518., 2555742., 2632966., 2710190., 2422364., 2102170.,
      1749160., 1656200., 2153410., 2684780., 3250758., 3327982., 3405206.,
      3482430., 3097724., 2676170., 2217320., 2020784., 2605420., 3222600.,
      3872708., 3948308., 4023908., 4099508., 3620328., 3106300., 2557040.,
      2214840., 2841550., 3498100., 4184810., 4255650., 4326490., 4397330.,
      3866020., 3302950., 2707800., 2220448., 2839400., 3484400., 4155704.,
      4218648., 4281592., 4344536., 3807920., 3243720., 2651680.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    856.,    1400.,   1944.,   2488.,   2722.,
      2428.,   1542.,   500.,    1864.,   4220.,   7696.,   9808.,   11920.,
      14032.,  13292.,  10792.,  6404.,   3202.,   8756.,   16854.,  27688.,
      32392.,  37096.,  41800.,  37086.,  28676.,  16378.,  9418.,   22532.,
      39534.,  60616.,  65320.,  70024.,  74728.,  63798.,  47828.,  26626.,
      15634.,  36308.,  62214.,  93544.,  98248.,  102952., 107656., 90510.,
      66980.,  36874.,  21850.,  50084.,  84894.,  126472., 131176., 135880.,
      140584., 117222., 86132.,  47122.,  28066.,  63860.,  107574., 159400.,
      164104., 168808., 173512., 143934., 105284., 57370.,  32292.,  70440.,
      114572., 164816., 168976., 173136., 177296., 143228., 102408., 54708.,
      23534.,  50348.,  80506.,  114072., 116664., 119256., 121848., 97042.,
      68508.,  36182.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  51870.,  53340.,  67445.,  69300.,
      84091.,  86338.,  101822., 104468., 104223., 106918., 106624., 109368.,
      109025., 111818., 96985.,  99400.,  83790.,  85820.,  69426.,  71064.,
      63280.,  64660.,  81590.,  83330.,  100920., 103026., 121282., 123760.,
      123634., 126154., 125986., 128548., 128338., 130942., 113340., 115590.,
      97250.,  99140.,  80056.,  81580.,  69350.,  70600.,  88975.,  90550.,
      109535., 111440., 131040., 133280., 133245., 135520., 135450., 137760.,
      137655., 140000., 121025., 123050., 103400., 105100., 84770.,  86140.,
      69520.,  70600.,  88900.,  90260.,  109096., 110740., 130116., 132048.,
      132076., 134036., 134036., 136024., 135996., 138012., 119200., 120940.,
      101540., 103000., 83008.,  84184.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   30.,   40.,   50.,   60.,
      70.,   80.,   90.,   100.,  95.,   104.,  83.,   90.,   52.,   56.,
      20.,   26.,   68.,   82.,   148.,  172.,  264.,  300.,  336.,  372.,
      408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,
      113.,  128.,  301.,  334.,  570.,  624.,  926.,  1004., 1082., 1160.,
      1238., 1316., 1394., 1472., 1227., 1290., 943.,  988.,  536.,  560.,
      323.,  338.,  763.,  796.,  1326., 1380., 2018., 2096., 2174., 2252.,
      2330., 2408., 2486., 2564., 2109., 2172., 1573., 1618., 872.,  896.,
      533.,  548.,  1225., 1258., 2082., 2136., 3110., 3188., 3266., 3344.,
      3422., 3500., 3578., 3656., 2991., 3054., 2203., 2248., 1208., 1232.,
      743.,  758.,  1687., 1720., 2838., 2892., 4202., 4280., 4358., 4436.,
      4514., 4592., 4670., 4748., 3873., 3936., 2833., 2878., 1544., 1568.,
      953.,  968.,  2149., 2182., 3594., 3648., 5294., 5372., 5450., 5528.,
      5606., 5684., 5762., 5840., 4755., 4818., 3463., 3508., 1880., 1904.,
      1064., 1078., 2312., 2342., 3748., 3796., 5376., 5444., 5512., 5580.,
      5648., 5716., 5784., 5852., 4660., 4714., 3324., 3362., 1772., 1792.,
      765.,  774.,  1633., 1652., 2606., 2636., 3686., 3728., 3770., 3812.,
      3854., 3896., 3938., 3980., 3131., 3164., 2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,   34144.,   44500.,   47340.,   59024.,   62528.,   75572.,
      79772.,   81788.,   86212.,   88004.,   92652.,   94220.,   99092.,
      88112.,   92384.,   79660.,   83300.,   68800.,   71776.,   67840.,
      71400.,   92225.,   96775.,   119740.,  125320.,  150465.,  157115.,
      160195.,  167125.,  169925.,  177135.,  179655.,  187145.,  165220.,
      171760.,  147175.,  152725.,  125440.,  129960.,  123872.,  129104.,
      165790.,  172450.,  212280.,  220416.,  263438.,  273098.,  277466.,
      287462.,  291494.,  301826.,  305522.,  316190.,  277800.,  287088.,
      244930.,  252790.,  206816.,  213200.,  204512.,  211736.,  270795.,
      279965.,  343364.,  354536.,  422331.,  435561.,  441441.,  455063.,
      460551.,  474565.,  479661.,  494067.,  432572.,  445088.,  378525.,
      389095.,  317408.,  325976.,  306992.,  316456.,  401695.,  413665.,
      503804.,  518336.,  613431.,  630581.,  632541.,  650083.,  651651.,
      669585.,  670761.,  689087.,  599732.,  615608.,  520625.,  533995.,
      433328.,  444136.,  409472.,  421176.,  532595.,  547365.,  664244.,
      682136.,  804531.,  825601.,  823641.,  845103.,  842751.,  864605.,
      861861.,  884107.,  766892.,  786128.,  662725.,  678895.,  549248.,
      562296.,  500960.,  511952.,  646030.,  659890.,  799224.,  816000.,
      960638.,  980378.,  979370.,  999446.,  998102.,  1018514., 1016834.,
      1037582., 898152.,  916080.,  770770.,  785830.,  634592.,  646736.,
      549920.,  559880.,  705625.,  718175.,  868780.,  883960.,  1039465.,
      1057315., 1057035., 1075165., 1074605., 1093015., 1092175., 1110865.,
      960340.,  976480.,  820575.,  834125.,  672800.,  683720.,  551872.,
      560480.,  705780.,  716620.,  866192.,  879296.,  1033172., 1048572.,
      1048796., 1064420., 1064420., 1080268., 1080044., 1096116., 946736.,
      960608.,  806540.,  818180.,  659392.,  668768.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   192.,   264.,   336.,
      408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,
      383.,   413.,   118.,   162.,   448.,   552.,   1022.,  1202.,  1872.,
      2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,
      2688.,  2856.,  1594.,  1686.,  787.,   901.,   2156.,  2408.,  4155.,
      4569.,  6832.,  7432.,  8032.,  8632.,  9232.,  9832.,  10432., 11032.,
      9249.,  9735.,  7148.,  7496.,  4081.,  4267.,  2383.,  2497.,  5684.,
      5936.,  9951.,  10365., 15232., 15832., 16432., 17032., 17632., 18232.,
      18832., 19432., 16053., 16539., 12020., 12368., 6685.,  6871.,  3979.,
      4093.,  9212.,  9464.,  15747., 16161., 23632., 24232., 24832., 25432.,
      26032., 26632., 27232., 27832., 22857., 23343., 16892., 17240., 9289.,
      9475.,  5575.,  5689.,  12740., 12992., 21543., 21957., 32032., 32632.,
      33232., 33832., 34432., 35032., 35632., 36232., 29661., 30147., 21764.,
      22112., 11893., 12079., 7171.,  7285.,  16268., 16520., 27339., 27753.,
      40432., 41032., 41632., 42232., 42832., 43432., 44032., 44632., 36465.,
      36951., 26636., 26984., 14497., 14683., 8174.,  8282.,  17808., 18040.,
      28934., 29306., 41584., 42112., 42640., 43168., 43696., 44224., 44752.,
      45280., 36122., 36542., 25808., 26104., 13778., 13934., 5933.,  6003.,
      12684., 12832., 20269., 20503., 28704., 29032., 29360., 29688., 30016.,
      30344., 30672., 31000., 24415., 24673., 17228., 17408., 9095.,  9189.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,  267680.,  349080.,  371640.,  463600.,  491440.,  594216.,
      627592.,  643720.,  678888.,  693224.,  730184.,  742728.,  781480.,
      695152.,  729136.,  628920.,  657880.,  543520.,  567200.,  534120.,
      562440.,  726750.,  762950.,  944300.,  988700.,  1187410., 1240330.,
      1264970., 1320130., 1342530., 1399930., 1420090., 1479730., 1306700.,
      1358780., 1164550., 1208750., 993000.,  1029000., 978352.,  1020016.,
      1310180., 1363220., 1678440., 1743240., 2083900., 2160844., 2195788.,
      2275420., 2307676., 2389996., 2419564., 2504572., 2200872., 2274888.,
      1941140., 2003780., 1639600., 1690480., 1618680., 1676248., 2144170.,
      2217250., 2719780., 2808820., 3346406., 3451854., 3498894., 3607478.,
      3651382., 3763102., 3803870., 3918726., 3431428., 3531220., 3003490.,
      3087770., 2519160., 2587480., 2436280., 2511768., 3188570., 3284050.,
      3999940., 4115860., 4871286., 5008094., 5023774., 5163718., 5176262.,
      5319342., 5328750., 5474966., 4765348., 4892020., 4137490., 4244170.,
      3444280., 3530520., 3253880., 3347288., 4232970., 4350850., 5280100.,
      5422900., 6396166., 6564334., 6548654., 6719958., 6701142., 6875582.,
      6853630., 7031206., 6099268., 6252820., 5271490., 5400570., 4369400.,
      4473560., 3986608., 4074352., 5141540., 5252180., 6361320., 6495240.,
      7646716., 7804300., 7796236., 7956508., 7945756., 8108716., 8095276.,
      8260924., 7151016., 7294152., 6137300., 6257540., 5053360., 5150320.,
      4379880., 4459400., 5620350., 5720550., 6920300., 7041500., 8280370.,
      8422890., 8420650., 8565410., 8560930., 8707930., 8701210., 8850450.,
      7651340., 7780220., 6538150., 6646350., 5361000., 5448200., 4397856.,
      4466592., 5624600., 5711160., 6903280., 7007920., 8234408., 8357384.,
      8359176., 8483944., 8483944., 8610504., 8608712., 8737064., 7546480.,
      7657264., 6429240., 6522200., 5256480., 5331360.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1352.,   1896.,
      2440.,   2984.,   3528.,   4072.,   4616.,   5160.,   5114.,   5618.,
      4596.,   4996.,   2934.,   3166.,   780.,    1116.,   3208.,   4008.,
      7540.,   8932.,   14032.,  16144.,  18256.,  20368.,  22480.,  24592.,
      26704.,  28816.,  25444.,  27220.,  20744.,  22056.,  12348.,  13068.,
      5834.,   6722.,   16252.,  18220.,  31638.,  34878.,  52376.,  57080.,
      61784.,  66488.,  71192.,  75896.,  80600.,  85304.,  71742.,  75558.,
      55612.,  58348.,  31826.,  33290.,  18266.,  19154.,  43804.,  45772.,
      76998.,  80238.,  118232., 122936., 127640., 132344., 137048., 141752.,
      146456., 151160., 125166., 128982., 93916.,  96652.,  52322.,  53786.,
      30698.,  31586.,  71356.,  73324.,  122358., 125598., 184088., 188792.,
      193496., 198200., 202904., 207608., 212312., 217016., 178590., 182406.,
      132220., 134956., 72818.,  74282.,  43130.,  44018.,  98908.,  100876.,
      167718., 170958., 249944., 254648., 259352., 264056., 268760., 273464.,
      278168., 282872., 232014., 235830., 170524., 173260., 93314.,  94778.,
      55562.,  56450.,  126460., 128428., 213078., 216318., 315800., 320504.,
      325208., 329912., 334616., 339320., 344024., 348728., 285438., 289254.,
      208828., 211564., 113810., 115274., 64044.,  64892.,  139720., 141544.,
      227284., 230212., 326992., 331152., 335312., 339472., 343632., 347792.,
      351952., 356112., 284356., 287668., 203336., 205672., 108636., 109868.,
      46718.,  47270.,  99956.,  101124., 159842., 161690., 226504., 229096.,
      231688., 234280., 236872., 239464., 242056., 244648., 192794., 194834.,
      136116., 137540., 71894.,  72638.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,   8320.,   8600.,   8880.,   11200.,  11560.,  11920.,  12280.,
      14852.,  15296.,  15740.,  16184.,  19012.,  19544.,  20076.,  20608.,
      20552.,  21112.,  21672.,  22232.,  22092.,  22680.,  23268.,  23856.,
      23632.,  24248.,  24864.,  25480.,  22100.,  22640.,  23180.,  23720.,
      19980.,  20440.,  20900.,  21360.,  17256.,  17632.,  18008.,  18384.,
      17050.,  17500.,  17950.,  18400.,  23175.,  23750.,  24325.,  24900.,
      30085.,  30790.,  31495.,  32200.,  37800.,  38640.,  39480.,  40320.,
      40215.,  41090.,  41965.,  42840.,  42630.,  43540.,  44450.,  45360.,
      45045.,  45990.,  46935.,  47880.,  41425.,  42250.,  43075.,  43900.,
      36900.,  37600.,  38300.,  39000.,  31450.,  32020.,  32590.,  33160.,
      31100.,  31760.,  32420.,  33080.,  41620.,  42460.,  43300.,  44140.,
      53286.,  54312.,  55338.,  56364.,  66122.,  67340.,  68558.,  69776.,
      69608.,  70868.,  72128.,  73388.,  73094.,  74396.,  75698.,  77000.,
      76580.,  77924.,  79268.,  80612.,  69630.,  70800.,  71970.,  73140.,
      61390.,  62380.,  63370.,  64360.,  51836.,  52640.,  53444.,  54248.,
      51310.,  52220.,  53130.,  54040.,  67935.,  69090.,  70245.,  71400.,
      86135.,  87542.,  88949.,  90356.,  105938., 107604., 109270., 110936.,
      110691., 112406., 114121., 115836., 115444., 117208., 118972., 120736.,
      120197., 122010., 123823., 125636., 108395., 109970., 111545., 113120.,
      94850.,  96180.,  97510.,  98840.,  79534.,  80612.,  81690.,  82768.,
      76790.,  77980.,  79170.,  80360.,  100485., 101990., 103495., 105000.,
      126035., 127862., 129689., 131516., 153468., 155624., 157780., 159936.,
      158221., 160426., 162631., 164836., 162974., 165228., 167482., 169736.,
      167727., 170030., 172333., 174636., 149975., 151970., 153965., 155960.,
      130200., 131880., 133560., 135240., 108374., 109732., 111090., 112448.,
      102270., 103740., 105210., 106680., 133035., 134890., 136745., 138600.,
      165935., 168182., 170429., 172676., 200998., 203644., 206290., 208936.,
      205751., 208446., 211141., 213836., 210504., 213248., 215992., 218736.,
      215257., 218050., 220843., 223636., 191555., 193970., 196385., 198800.,
      165550., 167580., 169610., 171640., 137214., 138852., 140490., 142128.,
      125180., 126560., 127940., 129320., 161440., 163180., 164920., 166660.,
      199734., 201840., 203946., 206052., 240086., 242564., 245042., 247520.,
      244748., 247268., 249788., 252308., 249410., 251972., 254534., 257096.,
      254072., 256676., 259280., 261884., 224430., 226680., 228930., 231180.,
      192610., 194500., 196390., 198280., 158588., 160112., 161636., 163160.,
      137450., 138700., 139950., 141200., 176375., 177950., 179525., 181100.,
      217165., 219070., 220975., 222880., 259840., 262080., 264320., 266560.,
      264215., 266490., 268765., 271040., 268590., 270900., 273210., 275520.,
      272965., 275310., 277655., 280000., 240025., 242050., 244075., 246100.,
      205100., 206800., 208500., 210200., 168170., 169540., 170910., 172280.,
      137960., 139040., 140120., 141200., 176440., 177800., 179160., 180520.,
      216548., 218192., 219836., 221480., 258300., 260232., 262164., 264096.,
      262192., 264152., 266112., 268072., 266084., 268072., 270060., 272048.,
      269976., 271992., 274008., 276024., 236660., 238400., 240140., 241880.,
      201620., 203080., 204540., 206000., 164840., 166016., 167192., 168368.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,    100.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,
      100.,   104.,   108.,   112.,   34.,    40.,    46.,    52.,    122.,
      136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,
      564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,
      888.,   924.,   960.,   996.,   1032.,  866.,   896.,   926.,   956.,
      698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,
      226.,   241.,   256.,   569.,   602.,   635.,   668.,   1086.,  1140.,
      1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,
      2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,
      2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,
      1072.,  1096.,  1120.,  631.,   646.,   661.,   676.,   1493.,  1526.,
      1559.,  1592.,  2598.,  2652.,  2706.,  2760.,  3958.,  4036.,  4114.,
      4192.,  4270.,  4348.,  4426.,  4504.,  4582.,  4660.,  4738.,  4816.,
      4894.,  4972.,  5050.,  5128.,  4155.,  4218.,  4281.,  4344.,  3101.,
      3146.,  3191.,  3236.,  1720.,  1744.,  1768.,  1792.,  1051.,  1066.,
      1081.,  1096.,  2417.,  2450.,  2483.,  2516.,  4110.,  4164.,  4218.,
      4272.,  6142.,  6220.,  6298.,  6376.,  6454.,  6532.,  6610.,  6688.,
      6766.,  6844.,  6922.,  7000.,  7078.,  7156.,  7234.,  7312.,  5919.,
      5982.,  6045.,  6108.,  4361.,  4406.,  4451.,  4496.,  2392.,  2416.,
      2440.,  2464.,  1471.,  1486.,  1501.,  1516.,  3341.,  3374.,  3407.,
      3440.,  5622.,  5676.,  5730.,  5784.,  8326.,  8404.,  8482.,  8560.,
      8638.,  8716.,  8794.,  8872.,  8950.,  9028.,  9106.,  9184.,  9262.,
      9340.,  9418.,  9496.,  7683.,  7746.,  7809.,  7872.,  5621.,  5666.,
      5711.,  5756.,  3064.,  3088.,  3112.,  3136.,  1891.,  1906.,  1921.,
      1936.,  4265.,  4298.,  4331.,  4364.,  7134.,  7188.,  7242.,  7296.,
      10510., 10588., 10666., 10744., 10822., 10900., 10978., 11056., 11134.,
      11212., 11290., 11368., 11446., 11524., 11602., 11680., 9447.,  9510.,
      9573.,  9636.,  6881.,  6926.,  6971.,  7016.,  3736.,  3760.,  3784.,
      3808.,  2114.,  2128.,  2142.,  2156.,  4594.,  4624.,  4654.,  4684.,
      7448.,  7496.,  7544.,  7592.,  10684., 10752., 10820., 10888., 10956.,
      11024., 11092., 11160., 11228., 11296., 11364., 11432., 11500., 11568.,
      11636., 11704., 9266.,  9320.,  9374.,  9428.,  6610.,  6648.,  6686.,
      6724.,  3524.,  3544.,  3564.,  3584.,  1521.,  1530.,  1539.,  1548.,
      3247.,  3266.,  3285.,  3304.,  5182.,  5212.,  5242.,  5272.,  7330.,
      7372.,  7414.,  7456.,  7498.,  7540.,  7582.,  7624.,  7666.,  7708.,
      7750.,  7792.,  7834.,  7876.,  7918.,  7960.,  6229.,  6262.,  6295.,
      6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,   64416.,   66624.,   68832.,   86860.,   89700.,   92540.,
      95380.,   115408.,  118912.,  122416.,  125920.,  147980.,  152180.,
      156380.,  160580.,  160244.,  164668.,  169092.,  173516.,  172508.,
      177156.,  181804.,  186452.,  184772.,  189644.,  194516.,  199388.,
      173008.,  177280.,  181552.,  185824.,  156580.,  160220.,  163860.,
      167500.,  135360.,  138336.,  141312.,  144288.,  133000.,  136560.,
      140120.,  143680.,  181025.,  185575.,  190125.,  194675.,  235280.,
      240860.,  246440.,  252020.,  295925.,  302575.,  309225.,  315875.,
      315175.,  322105.,  329035.,  335965.,  334425.,  341635.,  348845.,
      356055.,  353675.,  361165.,  368655.,  376145.,  325520.,  332060.,
      338600.,  345140.,  290175.,  295725.,  301275.,  306825.,  247480.,
      252000.,  256520.,  261040.,  243808.,  249040.,  254272.,  259504.,
      326570.,  333230.,  339890.,  346550.,  418440.,  426576.,  434712.,
      442848.,  519610.,  529270.,  538930.,  548590.,  547414.,  557410.,
      567406.,  577402.,  575218.,  585550.,  595882.,  606214.,  603022.,
      613690.,  624358.,  635026.,  548616.,  557904.,  567192.,  576480.,
      483950.,  491810.,  499670.,  507530.,  408832.,  415216.,  421600.,
      427984.,  403592.,  410816.,  418040.,  425264.,  534695.,  543865.,
      553035.,  562205.,  678328.,  689500.,  700672.,  711844.,  834715.,
      847945.,  861175.,  874405.,  872641.,  886263.,  899885.,  913507.,
      910567.,  924581.,  938595.,  952609.,  948493.,  962899.,  977305.,
      991711.,  855736.,  868252.,  880768.,  893284.,  749105.,  759675.,
      770245.,  780815.,  628376.,  636944.,  645512.,  654080.,  606872.,
      616336.,  625800.,  635264.,  794395.,  806365.,  818335.,  830305.,
      996688.,  1011220., 1025752., 1040284., 1213975., 1231125., 1248275.,
      1265425., 1251901., 1269443., 1286985., 1304527., 1289827., 1307761.,
      1325695., 1343629., 1327753., 1346079., 1364405., 1382731., 1187536.,
      1203412., 1219288., 1235164., 1031205., 1044575., 1057945., 1071315.,
      858536.,  869344.,  880152.,  890960.,  810152.,  821856.,  833560.,
      845264.,  1054095., 1068865., 1083635., 1098405., 1315048., 1332940.,
      1350832., 1368724., 1593235., 1614305., 1635375., 1656445., 1631161.,
      1652623., 1674085., 1695547., 1669087., 1690941., 1712795., 1734649.,
      1707013., 1729259., 1751505., 1773751., 1519336., 1538572., 1557808.,
      1577044., 1313305., 1329475., 1345645., 1361815., 1088696., 1101744.,
      1114792., 1127840., 993664.,  1004656., 1015648., 1026640., 1281650.,
      1295510., 1309370., 1323230., 1585848., 1602624., 1619400., 1636176.,
      1906450., 1926190., 1945930., 1965670., 1943662., 1963738., 1983814.,
      2003890., 1980874., 2001286., 2021698., 2042110., 2018086., 2038834.,
      2059582., 2080330., 1782840., 1800768., 1818696., 1836624., 1530230.,
      1545290., 1560350., 1575410., 1260064., 1272208., 1284352., 1296496.,
      1092360., 1102320., 1112280., 1122240., 1401825., 1414375., 1426925.,
      1439475., 1726160., 1741340., 1756520., 1771700., 2065525., 2083375.,
      2101225., 2119075., 2100455., 2118585., 2136715., 2154845., 2135385.,
      2153795., 2172205., 2190615., 2170315., 2189005., 2207695., 2226385.,
      1908560., 1924700., 1940840., 1956980., 1630975., 1644525., 1658075.,
      1671625., 1337400., 1348320., 1359240., 1370160., 1097280., 1105888.,
      1114496., 1123104., 1403420., 1414260., 1425100., 1435940., 1722544.,
      1735648., 1748752., 1761856., 2054780., 2070180., 2085580., 2100980.,
      2085860., 2101484., 2117108., 2132732., 2116940., 2132788., 2148636.,
      2164484., 2148020., 2164092., 2180164., 2196236., 1883056., 1896928.,
      1910800., 1924672., 1604340., 1615980., 1627620., 1639260., 1311744.,
      1321120., 1330496., 1339872.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   221.,   263.,   328.,   400.,   472.,   544.,   616.,   688.,
      760.,   832.,   904.,   976.,   1048.,  1120.,  1192.,  1264.,  1336.,
      1408.,  1307.,  1373.,  1439.,  1505.,  1168.,  1220.,  1272.,  1324.,
      743.,   773.,   803.,   833.,   202.,   246.,   290.,   334.,   816.,
      920.,   1024.,  1128.,  1906.,  2086.,  2266.,  2446.,  3536.,  3808.,
      4080.,  4352.,  4624.,  4896.,  5168.,  5440.,  5712.,  5984.,  6256.,
      6528.,  6800.,  7072.,  7344.,  7616.,  6454.,  6682.,  6910.,  7138.,
      5248.,  5416.,  5584.,  5752.,  3118.,  3210.,  3302.,  3394.,  1487.,
      1601.,  1715.,  1829.,  4120.,  4372.,  4624.,  4876.,  7995.,  8409.,
      8823.,  9237.,  13208., 13808., 14408., 15008., 15608., 16208., 16808.,
      17408., 18008., 18608., 19208., 19808., 20408., 21008., 21608., 22208.,
      18129., 18615., 19101., 19587., 14032., 14380., 14728., 15076., 8021.,
      8207.,  8393.,  8579.,  4679.,  4793.,  4907.,  5021.,  11176., 11428.,
      11680., 11932., 19587., 20001., 20415., 20829., 30008., 30608., 31208.,
      31808., 32408., 33008., 33608., 34208., 34808., 35408., 36008., 36608.,
      37208., 37808., 38408., 39008., 31737., 32223., 32709., 33195., 23776.,
      24124., 24472., 24820., 13229., 13415., 13601., 13787., 7871.,  7985.,
      8099.,  8213.,  18232., 18484., 18736., 18988., 31179., 31593., 32007.,
      32421., 46808., 47408., 48008., 48608., 49208., 49808., 50408., 51008.,
      51608., 52208., 52808., 53408., 54008., 54608., 55208., 55808., 45345.,
      45831., 46317., 46803., 33520., 33868., 34216., 34564., 18437., 18623.,
      18809., 18995., 11063., 11177., 11291., 11405., 25288., 25540., 25792.,
      26044., 42771., 43185., 43599., 44013., 63608., 64208., 64808., 65408.,
      66008., 66608., 67208., 67808., 68408., 69008., 69608., 70208., 70808.,
      71408., 72008., 72608., 58953., 59439., 59925., 60411., 43264., 43612.,
      43960., 44308., 23645., 23831., 24017., 24203., 14255., 14369., 14483.,
      14597., 32344., 32596., 32848., 33100., 54363., 54777., 55191., 55605.,
      80408., 81008., 81608., 82208., 82808., 83408., 84008., 84608., 85208.,
      85808., 86408., 87008., 87608., 88208., 88808., 89408., 72561., 73047.,
      73533., 74019., 53008., 53356., 53704., 54052., 28853., 29039., 29225.,
      29411., 16266., 16374., 16482., 16590., 35440., 35672., 35904., 36136.,
      57586., 57958., 58330., 58702., 82768., 83296., 83824., 84352., 84880.,
      85408., 85936., 86464., 86992., 87520., 88048., 88576., 89104., 89632.,
      90160., 90688., 71926., 72346., 72766., 73186., 51392., 51688., 51984.,
      52280., 27438., 27594., 27750., 27906., 11813., 11883., 11953., 12023.,
      25256., 25404., 25552., 25700., 40361., 40595., 40829., 41063., 57160.,
      57488., 57816., 58144., 58472., 58800., 59128., 59456., 59784., 60112.,
      60440., 60768., 61096., 61424., 61752., 62080., 48635., 48893., 49151.,
      49409., 34320., 34500., 34680., 34860., 18119., 18213., 18307., 18401.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1425630.,  1461830.,  1498030.,  1534230.,
      1842268.,  1886668.,  1931068.,  1975468.,  2301634.,  2354554.,
      2407474.,  2460394.,  2430778.,  2485938.,  2541098.,  2596258.,
      2559922.,  2617322.,  2674722.,  2732122.,  2689066.,  2748706.,
      2808346.,  2867986.,  2442460.,  2494540.,  2546620.,  2598700.,
      2138534.,  2182734.,  2226934.,  2271134.,  1776008.,  1812008.,
      1848008.,  1884008.,  1860912.,  1902576.,  1944240.,  1985904.,
      2392500.,  2445540.,  2498580.,  2551620.,  2980328.,  3045128.,
      3109928.,  3174728.,  3625932.,  3702876.,  3779820.,  3856764.,
      3766108.,  3845740.,  3925372.,  4005004.,  3906284.,  3988604.,
      4070924.,  4153244.,  4046460.,  4131468.,  4216476.,  4301484.,
      3621096.,  3695112.,  3769128.,  3843144.,  3122084.,  3184724.,
      3247364.,  3310004.,  2547888.,  2598768.,  2649648.,  2700528.,
      2734296.,  2791864.,  2849432.,  2907000.,  3448890.,  3521970.,
      3595050.,  3668130.,  4238868.,  4327908.,  4416948.,  4505988.,
      5106022.,  5211470.,  5316918.,  5422366.,  5269774.,  5378358.,
      5486942.,  5595526.,  5433526.,  5545246.,  5656966.,  5768686.,
      5597278.,  5712134.,  5826990.,  5941846.,  4978580.,  5078372.,
      5178164.,  5277956.,  4265554.,  4349834.,  4434114.,  4518394.,
      3456408.,  3524728.,  3593048.,  3661368.,  3702936.,  3778424.,
      3853912.,  3929400.,  4622570.,  4718050.,  4813530.,  4909010.,
      5635508.,  5751428.,  5867348.,  5983268.,  6743542.,  6880350.,
      7017158.,  7153966.,  6907294.,  7047238.,  7187182.,  7327126.,
      7071046.,  7214126.,  7357206.,  7500286.,  7234798.,  7381014.,
      7527230.,  7673446.,  6400820.,  6527492.,  6654164.,  6780836.,
      5454594.,  5561274.,  5667954.,  5774634.,  4394328.,  4480568.,
      4566808.,  4653048.,  4671576.,  4764984.,  4858392.,  4951800.,
      5796250.,  5914130.,  6032010.,  6149890.,  7032148.,  7174948.,
      7317748.,  7460548.,  8381062.,  8549230.,  8717398.,  8885566.,
      8544814.,  8716118.,  8887422.,  9058726.,  8708566.,  8883006.,
      9057446.,  9231886.,  8872318.,  9049894.,  9227470.,  9405046.,
      7823060.,  7976612.,  8130164.,  8283716.,  6643634.,  6772714.,
      6901794.,  7030874.,  5332248.,  5436408.,  5540568.,  5644728.,
      5485232.,  5572976.,  5660720.,  5748464.,  6716820.,  6827460.,
      6938100.,  7048740.,  8053288.,  8187208.,  8321128.,  8455048.,
      9496172.,  9653756.,  9811340.,  9968924.,  9654268.,  9814540.,
      9974812.,  10135084., 9812364.,  9975324.,  10138284., 10301244.,
      9970460.,  10136108., 10301756., 10467404., 8704296.,  8847432.,
      8990568.,  9133704.,  7315844.,  7436084.,  7556324.,  7676564.,
      5803568.,  5900528.,  5997488.,  6094448.,  5621576.,  5701096.,
      5780616.,  5860136.,  6779870.,  6880070.,  6980270.,  7080470.,
      8032348.,  8153548.,  8274748.,  8395948.,  9380290.,  9522810.,
      9665330.,  9807850.,  9520186.,  9664946.,  9809706.,  9954466.,
      9660082.,  9807082.,  9954082.,  10101082., 9799978.,  9949218.,
      10098458., 10247698., 8485084.,  8613964.,  8742844.,  8871724.,
      7060134.,  7168334.,  7276534.,  7384734.,  5523848.,  5611048.,
      5698248.,  5785448.,  5008928.,  5077664.,  5146400.,  5215136.,
      5895800.,  5982360.,  6068920.,  6155480.,  6861808.,  6966448.,
      7071088.,  7175728.,  7907976.,  8030952.,  8153928.,  8276904.,
      8017128.,  8141896.,  8266664.,  8391432.,  8126280.,  8252840.,
      8379400.,  8505960.,  8235432.,  8363784.,  8492136.,  8620488.,
      7057904.,  7168688.,  7279472.,  7390256.,  5786904.,  5879864.,
      5972824.,  6065784.,  4421408.,  4496288.,  4571168.,  4646048.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1570.,   1882.,   2344.,   2888.,   3432.,   3976.,
      4520.,   5064.,   5608.,   6152.,   6696.,   7240.,   7784.,   8328.,
      8872.,   9416.,   9960.,   10504.,  9898.,   10402.,  10906.,  11410.,
      8932.,   9332.,   9732.,   10132.,  5718.,   5950.,   6182.,   6414.,
      1340.,   1676.,   2012.,   2348.,   5896.,   6696.,   7496.,   8296.,
      14180.,  15572.,  16964.,  18356.,  26704.,  28816.,  30928.,  33040.,
      35152.,  37264.,  39376.,  41488.,  43600.,  45712.,  47824.,  49936.,
      52048.,  54160.,  56272.,  58384.,  49748.,  51524.,  53300.,  55076.,
      40648.,  41960.,  43272.,  44584.,  24236.,  24956.,  25676.,  26396.,
      11098.,  11986.,  12874.,  13762.,  31244.,  33212.,  35180.,  37148.,
      61206.,  64446.,  67686.,  70926.,  101752., 106456., 111160., 115864.,
      120568., 125272., 129976., 134680., 139384., 144088., 148792., 153496.,
      158200., 162904., 167608., 172312., 141054., 144870., 148686., 152502.,
      109484., 112220., 114956., 117692., 62722.,  64186.,  65650.,  67114.,
      35962.,  36850.,  37738.,  38626.,  86348.,  88316.,  90284.,  92252.,
      151926., 155166., 158406., 161646., 233464., 238168., 242872., 247576.,
      252280., 256984., 261688., 266392., 271096., 275800., 280504., 285208.,
      289912., 294616., 299320., 304024., 247902., 251718., 255534., 259350.,
      186092., 188828., 191564., 194300., 103714., 105178., 106642., 108106.,
      60826.,  61714.,  62602.,  63490.,  141452., 143420., 145388., 147356.,
      242646., 245886., 249126., 252366., 365176., 369880., 374584., 379288.,
      383992., 388696., 393400., 398104., 402808., 407512., 412216., 416920.,
      421624., 426328., 431032., 435736., 354750., 358566., 362382., 366198.,
      262700., 265436., 268172., 270908., 144706., 146170., 147634., 149098.,
      85690.,  86578.,  87466.,  88354.,  196556., 198524., 200492., 202460.,
      333366., 336606., 339846., 343086., 496888., 501592., 506296., 511000.,
      515704., 520408., 525112., 529816., 534520., 539224., 543928., 548632.,
      553336., 558040., 562744., 567448., 461598., 465414., 469230., 473046.,
      339308., 342044., 344780., 347516., 185698., 187162., 188626., 190090.,
      110554., 111442., 112330., 113218., 251660., 253628., 255596., 257564.,
      424086., 427326., 430566., 433806., 628600., 633304., 638008., 642712.,
      647416., 652120., 656824., 661528., 666232., 670936., 675640., 680344.,
      685048., 689752., 694456., 699160., 568446., 572262., 576078., 579894.,
      415916., 418652., 421388., 424124., 226690., 228154., 229618., 231082.,
      127548., 128396., 129244., 130092., 278280., 280104., 281928., 283752.,
      452708., 455636., 458564., 461492., 651344., 655504., 659664., 663824.,
      667984., 672144., 676304., 680464., 684624., 688784., 692944., 697104.,
      701264., 705424., 709584., 713744., 566612., 569924., 573236., 576548.,
      405192., 407528., 409864., 412200., 216492., 217724., 218956., 220188.,
      93086.,  93638.,  94190.,  94742.,  199172., 200340., 201508., 202676.,
      318514., 320362., 322210., 324058., 451368., 453960., 456552., 459144.,
      461736., 464328., 466920., 469512., 472104., 474696., 477288., 479880.,
      482472., 485064., 487656., 490248., 384298., 386338., 388378., 390418.,
      271332., 272756., 274180., 275604., 143318., 144062., 144806., 145550.};
  const std::array<int, 4> in_shape = {{1, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,  2610.,  3458.,  4424.,  4830.,  4550.,  4140.,  3596.,  3840.,
      5225.,  6790.,  8540.,  9170.,  8485.,  7600.,  6510.,  6850.,  9185.,
      11781., 14644., 15547., 14211., 12590., 10678., 11130., 14770., 18767.,
      23128., 24353., 22064., 19390., 16324., 16394., 21490., 26999., 32928.,
      34153., 30632., 26670., 22260., 21658., 28210., 35231., 42728., 43953.,
      39200., 33950., 28196., 26922., 34930., 43463., 52528., 53753., 47768.,
      41230., 34132., 31366., 40415., 49959., 60004., 61201., 54045., 46370.,
      38170., 33420., 42875., 52780., 63140., 64260., 56515., 48300., 39610.,
      32860., 42030., 51590., 61544., 62538., 54842., 46740., 38228.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,
      470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,
      338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450.,  1046.,
      1082., 1118., 1154., 1190., 1226., 700.,  512.,  1147., 1180., 1213.,
      1246., 1279., 1312., 728.,  467.,  1025., 1051., 1077., 1103., 1129.,
      1155., 630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,  19760.,  26272.,  33712.,  36904.,  34864.,  31800.,  27680.,
      29340.,  40025.,  52130.,  65695.,  70665.,  65510.,  58775.,  50420.,
      52784.,  70900.,  91080.,  113372., 120512., 110304., 97840.,  83072.,
      86268.,  114625., 145810., 179879., 189581., 171934., 151235., 127428.,
      127932., 167825., 210994., 257495., 267197., 239806., 208915., 174468.,
      169596., 221025., 276178., 335111., 344813., 307678., 266595., 221508.,
      211260., 274225., 341362., 412727., 422429., 375550., 324275., 268548.,
      247040., 318400., 393696., 472976., 482468., 426168., 365740., 301136.,
      263820., 338525., 416810., 498715., 507605., 446510., 381675., 313060.,
      259808., 332360., 408016., 486808., 494704., 433888., 369840., 302528.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,   42.,   62.,   82.,   102.,  122.,  95.,   64.,   224.,
      296.,  368.,  440.,  512.,  584.,  396.,  289.,  830.,  986.,  1142.,
      1298., 1454., 1610., 1015., 792.,  2064., 2336., 2608., 2880., 3152.,
      3424., 2064., 1632., 3968., 4240., 4512., 4784., 5056., 5328., 3128.,
      2472., 5872., 6144., 6416., 6688., 6960., 7232., 4192., 3312., 7776.,
      8048., 8320., 8592., 8864., 9136., 5256., 3853., 8678., 8930., 9182.,
      9434., 9686., 9938., 5539., 3556., 7832., 8032., 8232., 8432., 8632.,
      8832., 4832., 2309., 5014., 5130., 5246., 5362., 5478., 5594., 3023.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,  153640.,  204656.,  263032.,  288344.,  272816.,  249160.,
      217120.,  229240.,  313150.,  408340.,  515130.,  554610.,  514660.,
      462150.,  396760.,  414256.,  556940.,  716040.,  891940.,  948724.,
      868968.,  771260.,  655216.,  679112.,  902930.,  1149260., 1418550.,
      1495774., 1357244., 1194410., 1006824., 1010632., 1326290., 1668044.,
      2036342., 2113566., 1897532., 1653610., 1381352., 1342152., 1749650.,
      2186828., 2654134., 2731358., 2437820., 2112810., 1755880., 1673672.,
      2173010., 2705612., 3271926., 3349150., 2978108., 2572010., 2130408.,
      1960816., 2527580., 3125736., 3755668., 3831268., 3384648., 2905100.,
      2392240., 2096440., 2690350., 3312820., 3964170., 4035010., 3549700.,
      3034550., 2489240., 2066208., 2643400., 3245360., 3872344., 3935288.,
      3451760., 2942440., 2407072.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,   284.,   428.,   572.,   716.,   860.,   694.,   420.,
      1576.,  2120.,  2664.,  3208.,  3752.,  4296.,  2964.,  2066.,  6100.,
      7300.,  8500.,  9700.,  10900., 12100., 7706.,  5864.,  15504., 17616.,
      19728., 21840., 23952., 26064., 15816., 12360., 30288., 32400., 34512.,
      36624., 38736., 40848., 24104., 18856., 45072., 47184., 49296., 51408.,
      53520., 55632., 32392., 25352., 59856., 61968., 64080., 66192., 68304.,
      70416., 40680., 29858., 67444., 69412., 71380., 73348., 75316., 77284.,
      43178., 27732., 61192., 62760., 64328., 65896., 67464., 69032., 37828.,
      18078., 39308., 40220., 41132., 42044., 42956., 43868., 23734.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,   3752.,   4920.,   5220.,   6544.,   6916.,   8400.,   8848.,
      9184.,   9660.,   8680.,   9100.,   7920.,   8280.,   6896.,   7192.,
      7310.,   7680.,   9975.,   10450.,  12995.,  13580.,  16380.,  17080.,
      17605.,  18340.,  16325.,  16970.,  14650.,  15200.,  12570.,  13020.,
      13160.,  13700.,  17680.,  18370.,  22716.,  23562.,  28280.,  29288.,
      30044.,  31094.,  27504.,  28422.,  24400.,  25180.,  20720.,  21356.,
      21518.,  22260.,  28595.,  29540.,  36379.,  37534.,  44884.,  46256.,
      47285.,  48706.,  42889.,  44128.,  37730.,  38780.,  31794.,  32648.,
      31822.,  32788.,  41755.,  42980.,  52507.,  53998.,  64092.,  65856.,
      66493.,  68306.,  59689.,  61264.,  52010.,  53340.,  43442.,  44520.,
      42126.,  43316.,  54915.,  56420.,  68635.,  70462.,  83300.,  85456.,
      85701.,  87906.,  76489.,  78400.,  66290.,  67900.,  55090.,  56392.,
      52430.,  53844.,  68075.,  69860.,  84763.,  86926.,  102508., 105056.,
      104909., 107506., 93289.,  95536.,  80570.,  82460.,  66738.,  68264.,
      61424.,  62732.,  79180.,  80830.,  97920.,  99918.,  117656., 120008.,
      120008., 122402., 106020., 108090., 91000.,  92740.,  74936.,  76340.,
      65670.,  66840.,  84275.,  85750.,  103775., 105560., 124180., 126280.,
      126385., 128520., 111185., 113030., 95050.,  96600.,  77970.,  79220.,
      64720.,  65720.,  82800.,  84060.,  101656., 103180., 121296., 123088.,
      123256., 125076., 108112., 109684., 92160.,  93480.,  75392.,  76456.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    11.,   14.,   17.,   20.,   23.,   26.,
      29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,
      80.,   90.,   100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,
      106.,  112.,  79.,   88.,   221.,  242.,  263.,  284.,  305.,  326.,
      347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  212.,  228.,
      544.,  580.,  616.,  652.,  688.,  724.,  760.,  796.,  832.,  868.,
      904.,  940.,  540.,  560.,  436.,  452.,  1048., 1084., 1120., 1156.,
      1192., 1228., 1264., 1300., 1336., 1372., 1408., 1444., 820.,  840.,
      660.,  676.,  1552., 1588., 1624., 1660., 1696., 1732., 1768., 1804.,
      1840., 1876., 1912., 1948., 1100., 1120., 884.,  900.,  2056., 2092.,
      2128., 2164., 2200., 2236., 2272., 2308., 2344., 2380., 2416., 2452.,
      1380., 1400., 1009., 1024., 2261., 2294., 2327., 2360., 2393., 2426.,
      2459., 2492., 2525., 2558., 2591., 2624., 1438., 1456., 922.,  934.,
      2024., 2050., 2076., 2102., 2128., 2154., 2180., 2206., 2232., 2258.,
      2284., 2310., 1246., 1260., 595.,  602.,  1289., 1304., 1319., 1334.,
      1349., 1364., 1379., 1394., 1409., 1424., 1439., 1454., 776.,  784.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,   28736.,   37740.,  40100.,  50336.,  53264.,  64764.,  68292.,
      70980.,   74732.,   67232.,  70544.,  61460.,  64300.,  53600.,  55936.,
      56480.,   59400.,   77225.,  80975.,  100780., 105400., 127225., 132755.,
      136955.,  142765.,  127180., 132280., 114275., 118625., 98160.,  101720.,
      102352.,  106624.,  137690., 143150., 177120., 183816., 220738., 228718.,
      234766.,  243082.,  215136., 222408., 191030., 197210., 162352., 167392.,
      168112.,  173992.,  223615., 231105., 284732., 293888., 351575., 362453.,
      370685.,  381955.,  336476., 346304., 296205., 304535., 249760., 256536.,
      250096.,  257768.,  328335., 338065., 413084., 424928., 504455., 518469.,
      523565.,  537971.,  470204., 482720., 409885., 420455., 342496., 351064.,
      332080.,  341544.,  433055., 445025., 541436., 555968., 657335., 674485.,
      676445.,  693987.,  603932., 619136., 523565., 536375., 435232., 445592.,
      414064.,  425320.,  537775., 551985., 669788., 687008., 810215., 830501.,
      829325.,  850003.,  737660., 755552., 637245., 652295., 527968., 540120.,
      486256.,  496672.,  626930., 640070., 775440., 791352., 931882., 950614.,
      950614.,  969682.,  839952., 856440., 721070., 734930., 593872., 605056.,
      520640.,  529960.,  668225., 679975., 822940., 837160., 984865., 1001595.,
      1002435., 1019445., 881980., 896680., 754075., 766425., 618640., 628600.,
      513632.,  521600.,  657180., 667220., 806912., 819056., 962892., 977172.,
      978516.,  993020.,  858368., 870896., 731780., 742300., 598688., 607168.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    68.,    88.,    108.,   128.,   148.,
      168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,
      392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,
      1040.,  1112.,  1184.,  758.,   802.,   527.,   593.,   1540.,  1696.,
      1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,
      3256.,  1961.,  2051.,  1492.,  1612.,  3920.,  4192.,  4464.,  4736.,
      5008.,  5280.,  5552.,  5824.,  6096.,  6368.,  6640.,  6912.,  4012.,
      4164.,  3172.,  3292.,  7728.,  8000.,  8272.,  8544.,  8816.,  9088.,
      9360.,  9632.,  9904.,  10176., 10448., 10720., 6140.,  6292.,  4852.,
      4972.,  11536., 11808., 12080., 12352., 12624., 12896., 13168., 13440.,
      13712., 13984., 14256., 14528., 8268.,  8420.,  6532.,  6652.,  15344.,
      15616., 15888., 16160., 16432., 16704., 16976., 17248., 17520., 17792.,
      18064., 18336., 10396., 10548., 7619.,  7733.,  17164., 17416., 17668.,
      17920., 18172., 18424., 18676., 18928., 19180., 19432., 19684., 19936.,
      10973., 11111., 7042.,  7134.,  15512., 15712., 15912., 16112., 16312.,
      16512., 16712., 16912., 17112., 17312., 17512., 17712., 9582.,  9690.,
      4577.,  4631.,  9940.,  10056., 10172., 10288., 10404., 10520., 10636.,
      10752., 10868., 10984., 11100., 11216., 5999.,  6061.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,  224800.,  295480.,  314200.,  394672.,  417904.,  508424.,
      536424.,  557928.,  587720.,  529072.,  555376.,  484120.,  506680.,
      422560.,  441120.,  443880.,  467080.,  607550.,  637350.,  793580.,
      830300.,  1002610., 1046570., 1080170., 1126370., 1003820., 1044380.,
      902550.,  937150.,  775720.,  804040.,  807152.,  841136.,  1086580.,
      1130020., 1398600., 1451880., 1743980., 1807484., 1855868., 1922060.,
      1701576., 1759464., 1511620., 1560820., 1285232., 1325360., 1328824.,
      1375640., 1768410., 1828050., 2252740., 2325652., 2782710., 2869342.,
      2935198., 3024966., 2665348., 2743636., 2347170., 2413530., 1979768.,
      2033752., 1982904., 2044056., 2603930., 2681490., 3276868., 3371284.,
      4002614., 4114334., 4155102., 4269958., 3732484., 3832276., 3254370.,
      3338650., 2719864., 2788184., 2636984., 2712472., 3439450., 3534930.,
      4300996., 4416916., 5222518., 5359326., 5375006., 5514950., 4799620.,
      4920916., 4161570., 4263770., 3459960., 3542616., 3291064., 3380888.,
      4274970., 4388370., 5325124., 5462548., 6442422., 6604318., 6594910.,
      6759942., 5866756., 6009556., 5068770., 5188890., 4200056., 4297048.,
      3869552., 3952688., 4989460., 5094340., 6171912., 6298920., 7417676.,
      7567196., 7567196., 7719404., 6686856., 6818472., 5740900., 5851540.,
      4728560., 4817840., 4146280., 4220680., 5321950., 5415750., 6554540.,
      6668060., 7844690., 7978250., 7984970., 8120770., 7025900., 7143260.,
      6007350., 6105950., 4928680., 5008200., 4092576., 4156192., 5236600.,
      5316760., 6430000., 6526960., 7673288., 7787304., 7798056., 7913864.,
      6840880., 6940912., 5832280., 5916280., 4771744., 4839456.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    468.,    612.,    756.,    900.,
      1044.,   1188.,   1332.,   1476.,   1620.,   1764.,   1318.,   1422.,
      700.,    908.,    2792.,   3336.,   3880.,   4424.,   4968.,   5512.,
      6056.,   6600.,   7144.,   7688.,   8232.,   8776.,   5708.,   6044.,
      3802.,   4306.,   11420.,  12620.,  13820.,  15020.,  16220.,  17420.,
      18620.,  19820.,  21020.,  22220.,  23420.,  24620.,  14962.,  15658.,
      11128.,  12056.,  29648.,  31760.,  33872.,  35984.,  38096.,  40208.,
      42320.,  44432.,  46544.,  48656.,  50768.,  52880.,  30872.,  32056.,
      24120.,  25048.,  59216.,  61328.,  63440.,  65552.,  67664.,  69776.,
      71888.,  74000.,  76112.,  78224.,  80336.,  82448.,  47448.,  48632.,
      37112.,  38040.,  88784.,  90896.,  93008.,  95120.,  97232.,  99344.,
      101456., 103568., 105680., 107792., 109904., 112016., 64024.,  65208.,
      50104.,  51032.,  118352., 120464., 122576., 124688., 126800., 128912.,
      131024., 133136., 135248., 137360., 139472., 141584., 80600.,  81784.,
      59146.,  60034.,  133628., 135596., 137564., 139532., 141500., 143468.,
      145436., 147404., 149372., 151340., 153308., 155276., 85666.,  86746.,
      55004.,  55724.,  121384., 122952., 124520., 126088., 127656., 129224.,
      130792., 132360., 133928., 135496., 137064., 138632., 75116.,  75964.,
      35886.,  36310.,  78036.,  78948.,  79860.,  80772.,  81684.,  82596.,
      83508.,  84420.,  85332.,  86244.,  87156.,  88068.,  47158.,  47646.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,   7504.,   9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,  13832.,  16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,  19320.,  16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,  16560.,  13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,  15360.,  19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,  27160.,  32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,  36680.,  32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,  30400.,  24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,  27400.,  34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,  47124.,  55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,  62188.,  54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,  50360.,  40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,  44520.,  56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,  75068.,  88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,  97412.,  84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,  77560.,  62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,  65576.,  82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505., 107996., 126420., 128184., 129948., 131712.,
      131173., 132986., 134799., 136612., 117803., 119378., 120953., 122528.,
      102690., 104020., 105350., 106680., 85806.,  86884.,  87962.,  89040.,
      83062.,  84252.,  85442.,  86632.,  108325., 109830., 111335., 112840.,
      135443., 137270., 139097., 140924., 164444., 166600., 168756., 170912.,
      169197., 171402., 173607., 175812., 151067., 152978., 154889., 156800.,
      130970., 132580., 134190., 135800., 108878., 110180., 111482., 112784.,
      103446., 104860., 106274., 107688., 134365., 136150., 137935., 139720.,
      167363., 169526., 171689., 173852., 202468., 205016., 207564., 210112.,
      207221., 209818., 212415., 215012., 184331., 186578., 188825., 191072.,
      159250., 161140., 163030., 164920., 131950., 133476., 135002., 136528.,
      121540., 122848., 124156., 125464., 156710., 158360., 160010., 161660.,
      193842., 195840., 197838., 199836., 232960., 235312., 237664., 240016.,
      237622., 240016., 242410., 244804., 209970., 212040., 214110., 216180.,
      180260., 182000., 183740., 185480., 148468., 149872., 151276., 152680.,
      130170., 131340., 132510., 133680., 167075., 168550., 170025., 171500.,
      205765., 207550., 209335., 211120., 246260., 248360., 250460., 252560.,
      250635., 252770., 254905., 257040., 220525., 222370., 224215., 226060.,
      188550., 190100., 191650., 193200., 154690., 155940., 157190., 158440.,
      128440., 129440., 130440., 131440., 164340., 165600., 166860., 168120.,
      201788., 203312., 204836., 206360., 240800., 242592., 244384., 246176.,
      244692., 246512., 248332., 250152., 214652., 216224., 217796., 219368.,
      183000., 184320., 185640., 186960., 149720., 150784., 151848., 152912.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,
      55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,
      54.,   56.,   32.,   36.,   40.,   44.,   110.,  120.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,
      250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,
      206.,  212.,  218.,  224.,  149.,  158.,  167.,  176.,  421.,  442.,
      463.,  484.,  505.,  526.,  547.,  568.,  589.,  610.,  631.,  652.,
      673.,  694.,  715.,  736.,  757.,  778.,  799.,  820.,  841.,  862.,
      883.,  904.,  524.,  536.,  548.,  560.,  408.,  424.,  440.,  456.,
      1052., 1088., 1124., 1160., 1196., 1232., 1268., 1304., 1340., 1376.,
      1412., 1448., 1484., 1520., 1556., 1592., 1628., 1664., 1700., 1736.,
      1772., 1808., 1844., 1880., 1060., 1080., 1100., 1120., 856.,  872.,
      888.,  904.,  2060., 2096., 2132., 2168., 2204., 2240., 2276., 2312.,
      2348., 2384., 2420., 2456., 2492., 2528., 2564., 2600., 2636., 2672.,
      2708., 2744., 2780., 2816., 2852., 2888., 1620., 1640., 1660., 1680.,
      1304., 1320., 1336., 1352., 3068., 3104., 3140., 3176., 3212., 3248.,
      3284., 3320., 3356., 3392., 3428., 3464., 3500., 3536., 3572., 3608.,
      3644., 3680., 3716., 3752., 3788., 3824., 3860., 3896., 2180., 2200.,
      2220., 2240., 1752., 1768., 1784., 1800., 4076., 4112., 4148., 4184.,
      4220., 4256., 4292., 4328., 4364., 4400., 4436., 4472., 4508., 4544.,
      4580., 4616., 4652., 4688., 4724., 4760., 4796., 4832., 4868., 4904.,
      2740., 2760., 2780., 2800., 2003., 2018., 2033., 2048., 4489., 4522.,
      4555., 4588., 4621., 4654., 4687., 4720., 4753., 4786., 4819., 4852.,
      4885., 4918., 4951., 4984., 5017., 5050., 5083., 5116., 5149., 5182.,
      5215., 5248., 2858., 2876., 2894., 2912., 1832., 1844., 1856., 1868.,
      4022., 4048., 4074., 4100., 4126., 4152., 4178., 4204., 4230., 4256.,
      4282., 4308., 4334., 4360., 4386., 4412., 4438., 4464., 4490., 4516.,
      4542., 4568., 4594., 4620., 2478., 2492., 2506., 2520., 1183., 1190.,
      1197., 1204., 2563., 2578., 2593., 2608., 2623., 2638., 2653., 2668.,
      2683., 2698., 2713., 2728., 2743., 2758., 2773., 2788., 2803., 2818.,
      2833., 2848., 2863., 2878., 2893., 2908., 1544., 1552., 1560., 1568.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  657048.,
      666512.,  675976.,  685440.,  857115.,  869085.,  881055.,  893025.,
      1071952., 1086484., 1101016., 1115548., 1301783., 1318933., 1336083.,
      1353233., 1339709., 1357251., 1374793., 1392335., 1196440., 1211644.,
      1226848., 1242052., 1037505., 1050315., 1063125., 1075935., 862680.,
      873040.,  883400.,  893760.,  819672.,  830928.,  842184.,  853440.,
      1064875., 1079085., 1093295., 1107505., 1326640., 1343860., 1361080.,
      1378300., 1605191., 1625477., 1645763., 1666049., 1643117., 1663795.,
      1684473., 1705151., 1461880., 1479772., 1497664., 1515556., 1263185.,
      1278235., 1293285., 1308335., 1046808., 1058960., 1071112., 1083264.,
      964688.,  975104.,  985520.,  995936.,  1243990., 1257130., 1270270.,
      1283410., 1538928., 1554840., 1570752., 1586664., 1849694., 1868426.,
      1887158., 1905890., 1886906., 1905974., 1925042., 1944110., 1667520.,
      1684008., 1700496., 1716984., 1431730., 1445590., 1459450., 1473310.,
      1179344., 1190528., 1201712., 1212896., 1034280., 1043600., 1052920.,
      1062240., 1327625., 1339375., 1351125., 1362875., 1635200., 1649420.,
      1663640., 1677860., 1957165., 1973895., 1990625., 2007355., 1992095.,
      2009105., 2026115., 2043125., 1752920., 1767620., 1782320., 1797020.,
      1498875., 1511225., 1523575., 1535925., 1229800., 1239760., 1249720.,
      1259680., 1021280., 1029248., 1037216., 1045184., 1306820., 1316860.,
      1326900., 1336940., 1604704., 1616848., 1628992., 1641136., 1915060.,
      1929340., 1943620., 1957900., 1946140., 1960644., 1975148., 1989652.,
      1707328., 1719856., 1732384., 1744912., 1455660., 1466180., 1476700.,
      1487220., 1191008., 1199488., 1207968., 1216448.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,
      320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,
      500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,
      728.,   800.,   872.,   944.,   1016.,  1088.,  1160.,  1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,
      2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,
      1614.,  1003.,  1069.,  1135.,  1201.,  2960.,  3116.,  3272.,  3428.,
      3584.,  3740.,  3896.,  4052.,  4208.,  4364.,  4520.,  4676.,  4832.,
      4988.,  5144.,  5300.,  5456.,  5612.,  5768.,  5924.,  6080.,  6236.,
      6392.,  6548.,  3853.,  3943.,  4033.,  4123.,  2892.,  3012.,  3132.,
      3252.,  7632.,  7904.,  8176.,  8448.,  8720.,  8992.,  9264.,  9536.,
      9808.,  10080., 10352., 10624., 10896., 11168., 11440., 11712., 11984.,
      12256., 12528., 12800., 13072., 13344., 13616., 13888., 7908.,  8060.,
      8212.,  8364.,  6252.,  6372.,  6492.,  6612.,  15248., 15520., 15792.,
      16064., 16336., 16608., 16880., 17152., 17424., 17696., 17968., 18240.,
      18512., 18784., 19056., 19328., 19600., 19872., 20144., 20416., 20688.,
      20960., 21232., 21504., 12164., 12316., 12468., 12620., 9612.,  9732.,
      9852.,  9972.,  22864., 23136., 23408., 23680., 23952., 24224., 24496.,
      24768., 25040., 25312., 25584., 25856., 26128., 26400., 26672., 26944.,
      27216., 27488., 27760., 28032., 28304., 28576., 28848., 29120., 16420.,
      16572., 16724., 16876., 12972., 13092., 13212., 13332., 30480., 30752.,
      31024., 31296., 31568., 31840., 32112., 32384., 32656., 32928., 33200.,
      33472., 33744., 34016., 34288., 34560., 34832., 35104., 35376., 35648.,
      35920., 36192., 36464., 36736., 20676., 20828., 20980., 21132., 15151.,
      15265., 15379., 15493., 34136., 34388., 34640., 34892., 35144., 35396.,
      35648., 35900., 36152., 36404., 36656., 36908., 37160., 37412., 37664.,
      37916., 38168., 38420., 38672., 38924., 39176., 39428., 39680., 39932.,
      21841., 21979., 22117., 22255., 14014., 14106., 14198., 14290., 30872.,
      31072., 31272., 31472., 31672., 31872., 32072., 32272., 32472., 32672.,
      32872., 33072., 33272., 33472., 33672., 33872., 34072., 34272., 34472.,
      34672., 34872., 35072., 35272., 35472., 19082., 19190., 19298., 19406.,
      9113.,  9167.,  9221.,  9275.,  19792., 19908., 20024., 20140., 20256.,
      20372., 20488., 20604., 20720., 20836., 20952., 21068., 21184., 21300.,
      21416., 21532., 21648., 21764., 21880., 21996., 22112., 22228., 22344.,
      22460., 11951., 12013., 12075., 12137.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      411552.,   426016.,   440480.,   454944.,   579160.,   597880.,
      616600.,   635320.,   774704.,   797936.,   821168.,   844400.,
      999208.,   1027208.,  1055208.,  1083208.,  1097096.,  1126888.,
      1156680.,  1186472.,  1041584.,  1067888.,  1094192.,  1120496.,
      954040.,   976600.,   999160.,   1021720.,  833440.,   852000.,
      870560.,   889120.,   873160.,   896360.,   919560.,   942760.,
      1196350.,  1226150.,  1255950.,  1285750.,  1564060.,  1600780.,
      1637500.,  1674220.,  1977570.,  2021530.,  2065490.,  2109450.,
      2131290.,  2177490.,  2223690.,  2269890.,  1982140.,  2022700.,
      2063260.,  2103820.,  1783350.,  1817950.,  1852550.,  1887150.,
      1533640.,  1561960.,  1590280.,  1618600.,  1592944.,  1626928.,
      1660912.,  1694896.,  2145860.,  2189300.,  2232740.,  2276180.,
      2763720.,  2817000.,  2870280.,  2923560.,  3448060.,  3511564.,
      3575068.,  3638572.,  3670156.,  3736348.,  3802540.,  3868732.,
      3366792.,  3424680.,  3482568.,  3540456.,  2992340.,  3041540.,
      3090740.,  3139940.,  2545264.,  2585392.,  2625520.,  2665648.,
      2628248.,  2675064.,  2721880.,  2768696.,  3499370.,  3559010.,
      3618650.,  3678290.,  4459700.,  4532612.,  4605524.,  4678436.,
      5511030.,  5597662.,  5684294.,  5770926.,  5814046.,  5903814.,
      5993582.,  6083350.,  5281556.,  5359844.,  5438132.,  5516420.,
      4652690.,  4719050.,  4785410.,  4851770.,  3925656.,  3979640.,
      4033624.,  4087608.,  3927448.,  3988600.,  4049752.,  4110904.,
      5159210.,  5236770.,  5314330.,  5391890.,  6494516.,  6588932.,
      6683348.,  6777764.,  7935158.,  8046878.,  8158598.,  8270318.,
      8238174.,  8353030.,  8467886.,  8582742.,  7402388.,  7502180.,
      7601972.,  7701764.,  6455890.,  6540170.,  6624450.,  6708730.,
      5396888.,  5465208.,  5533528.,  5601848.,  5226648.,  5302136.,
      5377624.,  5453112.,  6819050.,  6914530.,  7010010.,  7105490.,
      8529332.,  8645252.,  8761172.,  8877092.,  10359286., 10496094.,
      10632902., 10769710., 10662302., 10802246., 10942190., 11082134.,
      9523220.,  9644516.,  9765812.,  9887108.,  8259090.,  8361290.,
      8463490.,  8565690.,  6868120.,  6950776.,  7033432.,  7116088.,
      6525848.,  6615672.,  6705496.,  6795320.,  8478890.,  8592290.,
      8705690.,  8819090.,  10564148., 10701572., 10838996., 10976420.,
      12783414., 12945310., 13107206., 13269102., 13086430., 13251462.,
      13416494., 13581526., 11644052., 11786852., 11929652., 12072452.,
      10062290., 10182410., 10302530., 10422650., 8339352.,  8436344.,
      8533336.,  8630328.,  7687024.,  7770160.,  7853296.,  7936432.,
      9913220.,  10018100., 10122980., 10227860., 12264264., 12391272.,
      12518280., 12645288., 14741692., 14891212., 15040732., 15190252.,
      15039052., 15191260., 15343468., 15495676., 13291272., 13422888.,
      13554504., 13686120., 11412500., 11523140., 11633780., 11744420.,
      9401200.,  9490480.,  9579760.,  9669040.,  8245960.,  8320360.,
      8394760.,  8469160.,  10585150., 10678950., 10772750., 10866550.,
      13037980., 13151500., 13265020., 13378540., 15605730., 15739290.,
      15872850., 16006410., 15884890., 16020690., 16156490., 16292290.,
      13978300., 14095660., 14213020., 14330380., 11952950., 12051550.,
      12150150., 12248750., 9807560.,  9887080.,  9966600.,  10046120.,
      8145312.,  8208928.,  8272544.,  8336160.,  10423000., 10503160.,
      10583320., 10663480., 12799280., 12896240., 12993200., 13090160.,
      15275176., 15389192., 15503208., 15617224., 15523592., 15639400.,
      15755208., 15871016., 13619120., 13719152., 13819184., 13919216.,
      11611960., 11695960., 11779960., 11863960., 9501088.,  9568800.,
      9636512.,  9704224.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      836.,    980.,    1124.,   1268.,   1412.,   1556.,   1700.,   1844.,
      1988.,   2132.,   2276.,   2420.,   2564.,   2708.,   2852.,   2996.,
      3140.,   3284.,   3428.,   3572.,   2566.,   2670.,   2774.,   2878.,
      1260.,   1468.,   1676.,   1884.,   5224.,   5768.,   6312.,   6856.,
      7400.,   7944.,   8488.,   9032.,   9576.,   10120.,  10664.,  11208.,
      11752.,  12296.,  12840.,  13384.,  13928.,  14472.,  15016.,  15560.,
      16104.,  16648.,  17192.,  17736.,  11196.,  11532.,  11868.,  12204.,
      7274.,   7778.,   8282.,   8786.,   22060.,  23260.,  24460.,  25660.,
      26860.,  28060.,  29260.,  30460.,  31660.,  32860.,  34060.,  35260.,
      36460.,  37660.,  38860.,  40060.,  41260.,  42460.,  43660.,  44860.,
      46060.,  47260.,  48460.,  49660.,  29474.,  30170.,  30866.,  31562.,
      21656.,  22584.,  23512.,  24440.,  57936.,  60048.,  62160.,  64272.,
      66384.,  68496.,  70608.,  72720.,  74832.,  76944.,  79056.,  81168.,
      83280.,  85392.,  87504.,  89616.,  91728.,  93840.,  95952.,  98064.,
      100176., 102288., 104400., 106512., 60984.,  62168.,  63352.,  64536.,
      47640.,  48568.,  49496.,  50424.,  117072., 119184., 121296., 123408.,
      125520., 127632., 129744., 131856., 133968., 136080., 138192., 140304.,
      142416., 144528., 146640., 148752., 150864., 152976., 155088., 157200.,
      159312., 161424., 163536., 165648., 94136.,  95320.,  96504.,  97688.,
      73624.,  74552.,  75480.,  76408.,  176208., 178320., 180432., 182544.,
      184656., 186768., 188880., 190992., 193104., 195216., 197328., 199440.,
      201552., 203664., 205776., 207888., 210000., 212112., 214224., 216336.,
      218448., 220560., 222672., 224784., 127288., 128472., 129656., 130840.,
      99608.,  100536., 101464., 102392., 235344., 237456., 239568., 241680.,
      243792., 245904., 248016., 250128., 252240., 254352., 256464., 258576.,
      260688., 262800., 264912., 267024., 269136., 271248., 273360., 275472.,
      277584., 279696., 281808., 283920., 160440., 161624., 162808., 163992.,
      117722., 118610., 119498., 120386., 265996., 267964., 269932., 271900.,
      273868., 275836., 277804., 279772., 281740., 283708., 285676., 287644.,
      289612., 291580., 293548., 295516., 297484., 299452., 301420., 303388.,
      305356., 307324., 309292., 311260., 170642., 171722., 172802., 173882.,
      109548., 110268., 110988., 111708., 241768., 243336., 244904., 246472.,
      248040., 249608., 251176., 252744., 254312., 255880., 257448., 259016.,
      260584., 262152., 263720., 265288., 266856., 268424., 269992., 271560.,
      273128., 274696., 276264., 277832., 149692., 150540., 151388., 152236.,
      71502.,  71926.,  72350.,  72774.,  155492., 156404., 157316., 158228.,
      159140., 160052., 160964., 161876., 162788., 163700., 164612., 165524.,
      166436., 167348., 168260., 169172., 170084., 170996., 171908., 172820.,
      173732., 174644., 175556., 176468., 94006.,  94494.,  94982.,  95470.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,  2840.,  3752.,  4788.,  5194.,  5600.,  5240.,  4740.,  4096.,
      4220.,  5725.,  7420.,  9310.,  9940.,  10570., 9730.,  8675.,  7400.,
      7560.,  10110., 12936., 16044., 16947., 17850., 16248., 14340., 12120.,
      12320., 16310., 20678., 25431., 26656., 27881., 25172., 22050., 18508.,
      18242., 23870., 29939., 36456., 37681., 38906., 34811., 30240., 25186.,
      24164., 31430., 39200., 47481., 48706., 49931., 44450., 38430., 31864.,
      30086., 38990., 48461., 58506., 59731., 60956., 54089., 46620., 38542.,
      35088., 45165., 55776., 66927., 68124., 69321., 61140., 52395., 43080.,
      37410., 47950., 58975., 70490., 71610., 72730., 63895., 54550., 44690.,
      36800., 47030., 57680., 68754., 69748., 70742., 61976., 52770., 43120.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   54.,   144.,
      273.,  318.,  363.,  408.,  453.,  360.,  210.,  148.,  364.,  652.,
      730.,  808.,  886.,  964.,  740.,  420.,  302.,  700.,  1198., 1276.,
      1354., 1432., 1510., 1132., 630.,  456.,  1036., 1744., 1822., 1900.,
      1978., 2056., 1524., 840.,  610.,  1372., 2290., 2368., 2446., 2524.,
      2602., 1916., 1050., 714.,  1557., 2532., 2604., 2676., 2748., 2820.,
      2031., 1092., 661.,  1418., 2273., 2330., 2387., 2444., 2501., 1778.,
      945.,  430.,  913.,  1450., 1483., 1516., 1549., 1582., 1115., 588.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,  21540.,  28552.,  36540.,  39732.,  42924.,  40264.,  36500.,
      31600.,  32300.,  43925.,  57050.,  71715.,  76685.,  81655.,  75290.,
      67225.,  57420.,  58344.,  78150.,  100140., 124362., 131502., 138642.,
      126348., 111630., 94440.,  95620.,  126735., 160846., 198009., 207711.,
      217413., 196462., 172235., 144676., 142492., 186585., 234178., 285327.,
      295029., 304731., 272818., 237125., 197596., 189364., 246435., 307510.,
      372645., 382347., 392049., 349174., 302015., 250516., 236236., 306285.,
      380842., 459963., 469665., 479367., 425530., 366905., 303436., 276504.,
      356010., 439764., 527814., 537306., 546798., 482388., 413490., 340056.,
      295460., 378775., 465950., 557025., 565915., 574805., 505070., 431275.,
      353380., 291088., 372060., 456376., 544068., 551964., 559860., 490552.,
      417740., 341392.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,   244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      363.,  1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,
      1052., 2632.,  4772.,  5372.,  5972.,  6572.,  7172.,  5544.,  3164.,
      2228., 5208.,  8972.,  9572.,  10172., 10772., 11372., 8568.,  4788.,
      3404., 7784.,  13172., 13772., 14372., 14972., 15572., 11592., 6412.,
      4580., 10360., 17372., 17972., 18572., 19172., 19772., 14616., 8036.,
      5457., 11934., 19455., 20013., 20571., 21129., 21687., 15654., 8433.,
      5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788., 7338.,
      3335., 7090.,  11273., 11531., 11789., 12047., 12305., 8682.,  4583.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,  167640.,  222608.,  285320.,  310632.,  335944.,  315536.,
      286360.,  248160.,  252600.,  343950.,  447220.,  562730.,  602210.,
      641690.,  592180.,  529150.,  452280.,  458256.,  614340.,  787800.,
      979020.,  1035804., 1092588., 996312.,  880740.,  745488.,  753256.,
      998970.,  1268540., 1562414., 1639638., 1716862., 1552124., 1361290.,
      1143912., 1126216., 1475250., 1852172., 2257430., 2334654., 2411878.,
      2159948., 1877890., 1565256., 1499176., 1951530., 2435804., 2952446.,
      3029670., 3106894., 2767772., 2394490., 1986600., 1872136., 2427810.,
      3019436., 3647462., 3724686., 3801910., 3375596., 2911090., 2407944.,
      2195280., 2826900., 3492408., 4192188., 4267788., 4343388., 3832248.,
      3285300., 2702160., 2348440., 3010950., 3704260., 4428690., 4499530.,
      4570370., 4016260., 3429750., 2810520., 2315488., 2959800., 3630800.,
      4328744., 4391688., 4454632., 3903440., 3324280., 2716896.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    706.,    1018.,   1330.,   1642.,   1644.,
      1118.,   460.,    1720.,   3908.,   5108.,   6308.,   7508.,   8708.,
      7544.,   4684.,   2634.,   7428.,   14574.,  17238.,  19902.,  22566.,
      25230.,  20388.,  12042.,  7896.,   19952.,  36424.,  41128.,  45832.,
      50536.,  55240.,  42864.,  24536.,  17080.,  40112.,  69352.,  74056.,
      78760.,  83464.,  88168.,  66608.,  37304.,  26264.,  60272.,  102280.,
      106984., 111688., 116392., 121096., 90352.,  50072.,  35448.,  80432.,
      135208., 139912., 144616., 149320., 154024., 114096., 62840.,  42642.,
      93396.,  152454., 156846., 161238., 165630., 170022., 122868., 66258.,
      40028.,  86104.,  138356., 141860., 145364., 148868., 152372., 108568.,
      57820.,  26262.,  55868.,  88882.,  90922.,  92962.,  95002.,  97042.,
      68508.,  36182.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,   5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654.,  11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,   8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075.,  19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290.,  14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975.,  32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795.,  28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075.,  41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937.,  50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375.,  47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754.,  77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  46998.,  48328.,  61180.,  62860.,  76363.,  78400.,
      92561.,  94962.,  94962.,  97412.,  97363.,  99862.,  86737.,  88900.,
      75040.,  76860.,  62258.,  63728.,  58590.,  60172.,  75985.,  77980.,
      94507.,  96922.,  114170., 117012., 116571., 119462., 118972., 121912.,
      105637., 108178., 91105.,  93240.,  75362.,  77084.,  68712.,  70176.,
      88485.,  90330.,  109320., 111552., 131229., 133854., 133581., 136248.,
      135933., 138642., 119940., 122280., 102825., 104790., 84576.,  86160.,
      73510.,  74820.,  94250.,  95900.,  115955., 117950., 138635., 140980.,
      140840., 143220., 143045., 145460., 125705., 127790., 107350., 109100.,
      87970.,  89380.,  72480.,  73600.,  92650.,  94060.,  113656., 115360.,
      135506., 137508., 137466., 139496., 139426., 141484., 122176., 123952.,
      104050., 105540., 85040.,  86240.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   26.,   32.,   38.,   44.,
      50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,
      64.,   76.,   139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,
      307.,  328.,  260.,  276.,  159.,  168.,  96.,   108.,  261.,  288.,
      501.,  546.,  591.,  636.,  681.,  726.,  771.,  816.,  861.,  906.,
      687.,  720.,  402.,  420.,  274.,  296.,  680.,  728.,  1226., 1304.,
      1382., 1460., 1538., 1616., 1694., 1772., 1850., 1928., 1424., 1480.,
      810.,  840.,  582.,  604.,  1352., 1400., 2318., 2396., 2474., 2552.,
      2630., 2708., 2786., 2864., 2942., 3020., 2208., 2264., 1230., 1260.,
      890.,  912.,  2024., 2072., 3410., 3488., 3566., 3644., 3722., 3800.,
      3878., 3956., 4034., 4112., 2992., 3048., 1650., 1680., 1198., 1220.,
      2696., 2744., 4502., 4580., 4658., 4736., 4814., 4892., 4970., 5048.,
      5126., 5204., 3776., 3832., 2070., 2100., 1407., 1428., 3069., 3114.,
      4992., 5064., 5136., 5208., 5280., 5352., 5424., 5496., 5568., 5640.,
      4011., 4062., 2157., 2184., 1305., 1322., 2800., 2836., 4489., 4546.,
      4603., 4660., 4717., 4774., 4831., 4888., 4945., 5002., 3516., 3556.,
      1869., 1890., 850.,  860.,  1805., 1826., 2867., 2900., 2933., 2966.,
      2999., 3032., 3065., 3098., 3131., 3164., 2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,   31440.,   41120.,   43720.,   54680.,   57896.,   70168.,
      74032.,   76384.,   80472.,   82600.,   86912.,   77672.,   81464.,
      70560.,   73800.,   61200.,   63856.,   62160.,   65400.,   84725.,
      88875.,   110260.,  115360.,  138845.,  144935.,  148575.,  154945.,
      158305.,  164955.,  146200.,  152020.,  130725.,  135675.,  111800.,
      115840.,  113112.,  117864.,  151740.,  157800.,  194700.,  202116.,
      242088.,  250908.,  256116.,  265272.,  270144.,  279636.,  246468.,
      254748.,  217980.,  225000.,  184584.,  190296.,  186312.,  192864.,
      247205.,  255535.,  314048.,  324212.,  386953.,  399007.,  406063.,
      418509.,  425173.,  438011.,  384524.,  395696.,  337365.,  346815.,
      283584.,  291256.,  278544.,  287112.,  365015.,  375865.,  458444.,
      471632.,  558943.,  574525.,  578053.,  594027.,  597163.,  613529.,
      534968.,  549164.,  465255.,  477225.,  387912.,  397600.,  370776.,
      381360.,  482825.,  496195.,  602840.,  619052.,  730933.,  750043.,
      750043.,  769545.,  769153.,  789047.,  685412.,  702632.,  593145.,
      607635.,  492240.,  503944.,  463008.,  475608.,  600635.,  616525.,
      747236.,  766472.,  902923.,  925561.,  922033.,  945063.,  941143.,
      964565.,  835856.,  856100.,  721035.,  738045.,  596568.,  610288.,
      544248.,  555912.,  700980.,  715680.,  866172.,  883956.,  1039920.,
      1060836., 1058652., 1079904., 1077384., 1098972., 950772.,  969420.,
      815220.,  830880.,  670632.,  683256.,  583080.,  593520.,  747675.,
      760825.,  919960.,  935860.,  1100015., 1118705., 1117585., 1136555.,
      1135155., 1154405., 997660.,  1014280., 852075.,  866025.,  698320.,
      709560.,  575472.,  584400.,  735680.,  746920.,  902552.,  916136.,
      1076152., 1092112., 1091776., 1107960., 1107400., 1123808., 970472.,
      984632.,  826560.,  838440.,  675600.,  685168.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   169.,   211.,   253.,
      295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,
      112.,   148.,   420.,   508.,   956.,   1112.,  1268.,  1424.,  1580.,
      1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,
      657.,   747.,   1848.,  2052.,  3621.,  3963.,  4305.,  4647.,  4989.,
      5331.,  5673.,  6015.,  6357.,  6699.,  5124.,  5376.,  3021.,  3159.,
      1976.,  2144.,  4984.,  5352.,  9088.,  9688.,  10288., 10888., 11488.,
      12088., 12688., 13288., 13888., 14488., 10760., 11192., 6152.,  6384.,
      4328.,  4496.,  10136., 10504., 17488., 18088., 18688., 19288., 19888.,
      20488., 21088., 21688., 22288., 22888., 16808., 17240., 9400.,  9632.,
      6680.,  6848.,  15288., 15656., 25888., 26488., 27088., 27688., 28288.,
      28888., 29488., 30088., 30688., 31288., 22856., 23288., 12648., 12880.,
      9032.,  9200.,  20440., 20808., 34288., 34888., 35488., 36088., 36688.,
      37288., 37888., 38488., 39088., 39688., 28904., 29336., 15896., 16128.,
      10791., 10953., 23604., 23952., 38487., 39045., 39603., 40161., 40719.,
      41277., 41835., 42393., 42951., 43509., 31008., 31404., 16707., 16917.,
      10096., 10228., 21700., 21980., 34844., 35288., 35732., 36176., 36620.,
      37064., 37508., 37952., 38396., 38840., 27340., 27652., 14552., 14716.,
      6611.,  6689.,  14056., 14220., 22351., 22609., 22867., 23125., 23383.,
      23641., 23899., 24157., 24415., 24673., 17228., 17408., 9095.,  9189.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,  246240.,  322280.,  342920.,  429136.,  454672.,  551320.,
      582008.,  600824.,  633304.,  650328.,  684600.,  612112.,  642256.,
      556520.,  582280.,  483040.,  504160.,  489000.,  514760.,  667150.,
      700150.,  868940.,  909500.,  1095010., 1143450., 1172570., 1223250.,
      1250130., 1303050., 1155260., 1201580., 1033550., 1072950., 884360.,
      916520.,  892752.,  930576.,  1198380., 1246620., 1538520., 1597560.,
      1913940., 1984164., 2025828., 2098740., 2137716., 2213316., 1951224.,
      2017176., 1726380., 1782300., 1462416., 1507920., 1473752., 1525944.,
      1956290., 2022650., 2486260., 2567236., 3064558., 3160598., 3217046.,
      3316222., 3369534., 3471846., 3048388., 3137428., 2675330., 2750650.,
      2249464., 2310616., 2209592., 2277912., 2896250., 2982770., 3638404.,
      3743572., 4436950., 4561214., 4589438., 4716838., 4741926., 4872462.,
      4248916., 4362148., 3695930., 3791410., 3082072., 3159352., 2945432.,
      3029880., 3836210., 3942890., 4790548., 4919908., 5809342., 5961830.,
      5961830., 6117454., 6114318., 6273078., 5449444., 5586868., 4716530.,
      4832170., 3914680., 4008088., 3681272., 3781848., 4776170., 4903010.,
      5942692., 6096244., 7181734., 7362446., 7334222., 7518070., 7486710.,
      7673694., 6649972., 6811588., 5737130., 5872930., 4747288., 4856824.,
      4332240., 4425360., 5580300., 5697660., 6895896., 7037880., 8279796.,
      8446788., 8429316., 8598996., 8578836., 8751204., 7571256., 7720152.,
      6492300., 6617340., 5341200., 5442000., 4644680., 4728040., 5956150.,
      6061150., 7329020., 7455980., 8763930., 8913170., 8904210., 9055690.,
      9044490., 9198210., 7949420., 8082140., 6789750., 6901150., 5564840.,
      5654600., 4586336., 4657632., 5863400., 5953160., 7193680., 7302160.,
      8577688., 8705144., 8702456., 8831704., 8827224., 8958264., 7736080.,
      7849168., 6589160., 6684040., 5385952., 5462368.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1202.,   1514.,
      1826.,   2138.,   2450.,   2762.,   3074.,   3386.,   3108.,   3380.,
      2126.,   2294.,   740.,    1012.,   3000.,   3672.,   7036.,   8236.,
      9436.,   10636.,  11836.,  13036.,  14236.,  15436.,  16636.,  17836.,
      14488.,  15416.,  9028.,   9556.,   4818.,   5514.,   13836.,  15420.,
      27438.,  30102.,  32766.,  35430.,  38094.,  40758.,  43422.,  46086.,
      48750.,  51414.,  39516.,  41484.,  23394.,  24474.,  14952.,  16264.,
      38064.,  40944.,  69848.,  74552.,  79256.,  83960.,  88664.,  93368.,
      98072.,  102776., 107480., 112184., 83568.,  86960.,  47912.,  49736.,
      33320.,  34632.,  78384.,  81264.,  135704., 140408., 145112., 149816.,
      154520., 159224., 163928., 168632., 173336., 178040., 131056., 134448.,
      73448.,  75272.,  51688.,  53000.,  118704., 121584., 201560., 206264.,
      210968., 215672., 220376., 225080., 229784., 234488., 239192., 243896.,
      178544., 181936., 98984.,  100808., 70056.,  71368.,  159024., 161904.,
      267416., 272120., 276824., 281528., 286232., 290936., 295640., 300344.,
      305048., 309752., 226032., 229424., 124520., 126344., 84474.,  85746.,
      185052., 187788., 302118., 306510., 310902., 315294., 319686., 324078.,
      328470., 332862., 337254., 341646., 243756., 246876., 131466., 133122.,
      79396.,  80436.,  170808., 173016., 274492., 277996., 281500., 285004.,
      288508., 292012., 295516., 299020., 302524., 306028., 215576., 218040.,
      114820., 116116., 52134.,  52750.,  110916., 112212., 176474., 178514.,
      180554., 182594., 184634., 186674., 188714., 190754., 192794., 194834.,
      136116., 137540., 71894.,  72638.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,   7680.,   7936.,   8192.,   10370.,  10700.,  11030.,  11360.,
      13784.,  14192.,  14600.,  15008.,  17682.,  18172.,  18662.,  19152.,
      19222.,  19740.,  20258.,  20776.,  20762.,  21308.,  21854.,  22400.,
      19520.,  20000.,  20480.,  20960.,  17730.,  18140.,  18550.,  18960.,
      15376.,  15712.,  16048.,  16384.,  15650.,  16060.,  16470.,  16880.,
      21325.,  21850.,  22375.,  22900.,  27745.,  28390.,  29035.,  29680.,
      34930.,  35700.,  36470.,  37240.,  37345.,  38150.,  38955.,  39760.,
      39760.,  40600.,  41440.,  42280.,  36715.,  37450.,  38185.,  38920.,
      32825.,  33450.,  34075.,  34700.,  28070.,  28580.,  29090.,  29600.,
      28440.,  29040.,  29640.,  30240.,  38145.,  38910.,  39675.,  40440.,
      48936.,  49872.,  50808.,  51744.,  60837.,  61950.,  63063.,  64176.,
      64323.,  65478.,  66633.,  67788.,  67809.,  69006.,  70203.,  71400.,
      61860.,  62904.,  63948.,  64992.,  54705.,  55590.,  56475.,  57360.,
      46320.,  47040.,  47760.,  48480.,  46802.,  47628.,  48454.,  49280.,
      62090.,  63140.,  64190.,  65240.,  78869.,  80150.,  81431.,  82712.,
      97167.,  98686.,  100205., 101724., 101920., 103488., 105056., 106624.,
      106673., 108290., 109907., 111524., 96467.,  97874.,  99281.,  100688.,
      84630.,  85820.,  87010.,  88200.,  71134.,  72100.,  73066.,  74032.,
      69734.,  70812.,  71890.,  72968.,  91385.,  92750.,  94115.,  95480.,
      114779., 116438., 118097., 119756., 139944., 141904., 143864., 145824.,
      144697., 146706., 148715., 150724., 149450., 151508., 153566., 155624.,
      133889., 135674., 137459., 139244., 116445., 117950., 119455., 120960.,
      97090.,  98308.,  99526.,  100744., 92666.,  93996.,  95326.,  96656.,
      120680., 122360., 124040., 125720., 150689., 152726., 154763., 156800.,
      182721., 185122., 187523., 189924., 187474., 189924., 192374., 194824.,
      192227., 194726., 197225., 199724., 171311., 173474., 175637., 177800.,
      148260., 150080., 151900., 153720., 123046., 124516., 125986., 127456.,
      115598., 117180., 118762., 120344., 149975., 151970., 153965., 155960.,
      186599., 189014., 191429., 193844., 225498., 228340., 231182., 234024.,
      230251., 233142., 236033., 238924., 235004., 237944., 240884., 243824.,
      208733., 211274., 213815., 216356., 180075., 182210., 184345., 186480.,
      149002., 150724., 152446., 154168., 135960., 137424., 138888., 140352.,
      175125., 176970., 178815., 180660., 216408., 218640., 220872., 223104.,
      259833., 262458., 265083., 267708., 264495., 267162., 269829., 272496.,
      269157., 271866., 274575., 277284., 237540., 239880., 242220., 244560.,
      203685., 205650., 207615., 209580., 167568., 169152., 170736., 172320.,
      145710., 147020., 148330., 149640., 186850., 188500., 190150., 191800.,
      229915., 231910., 233905., 235900., 274925., 277270., 279615., 281960.,
      279300., 281680., 284060., 286440., 283675., 286090., 288505., 290920.,
      249325., 251410., 253495., 255580., 212950., 214700., 216450., 218200.,
      174530., 175940., 177350., 178760., 143840., 144960., 146080., 147200.,
      183890., 185300., 186710., 188120., 225608., 227312., 229016., 230720.,
      269010., 271012., 273014., 275016., 272902., 274932., 276962., 278992.,
      276794., 278852., 280910., 282968., 242576., 244352., 246128., 247904.,
      206610., 208100., 209590., 211080., 168880., 170080., 171280., 172480.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,
      82.,    88.,    94.,    100.,   106.,   112.,   118.,   124.,   130.,
      136.,   113.,   118.,   123.,   128.,   75.,    78.,    81.,    84.,
      33.,    38.,    43.,    48.,    116.,   128.,   140.,   152.,   257.,
      278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,
      467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,
      656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,
      180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,
      1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,
      1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,
      1812.,  1341.,  1374.,  1407.,  1440.,  786.,   804.,   822.,   840.,
      526.,   548.,   570.,   592.,   1312.,  1360.,  1408.,  1456.,  2374.,
      2452.,  2530.,  2608.,  2686.,  2764.,  2842.,  2920.,  2998.,  3076.,
      3154.,  3232.,  3310.,  3388.,  3466.,  3544.,  3622.,  3700.,  3778.,
      3856.,  2792.,  2848.,  2904.,  2960.,  1590.,  1620.,  1650.,  1680.,
      1142.,  1164.,  1186.,  1208.,  2656.,  2704.,  2752.,  2800.,  4558.,
      4636.,  4714.,  4792.,  4870.,  4948.,  5026.,  5104.,  5182.,  5260.,
      5338.,  5416.,  5494.,  5572.,  5650.,  5728.,  5806.,  5884.,  5962.,
      6040.,  4360.,  4416.,  4472.,  4528.,  2430.,  2460.,  2490.,  2520.,
      1758.,  1780.,  1802.,  1824.,  4000.,  4048.,  4096.,  4144.,  6742.,
      6820.,  6898.,  6976.,  7054.,  7132.,  7210.,  7288.,  7366.,  7444.,
      7522.,  7600.,  7678.,  7756.,  7834.,  7912.,  7990.,  8068.,  8146.,
      8224.,  5928.,  5984.,  6040.,  6096.,  3270.,  3300.,  3330.,  3360.,
      2374.,  2396.,  2418.,  2440.,  5344.,  5392.,  5440.,  5488.,  8926.,
      9004.,  9082.,  9160.,  9238.,  9316.,  9394.,  9472.,  9550.,  9628.,
      9706.,  9784.,  9862.,  9940.,  10018., 10096., 10174., 10252., 10330.,
      10408., 7496.,  7552.,  7608.,  7664.,  4110.,  4140.,  4170.,  4200.,
      2793.,  2814.,  2835.,  2856.,  6093.,  6138.,  6183.,  6228.,  9912.,
      9984.,  10056., 10128., 10200., 10272., 10344., 10416., 10488., 10560.,
      10632., 10704., 10776., 10848., 10920., 10992., 11064., 11136., 11208.,
      11280., 7971.,  8022.,  8073.,  8124.,  4287.,  4314.,  4341.,  4368.,
      2593.,  2610.,  2627.,  2644.,  5564.,  5600.,  5636.,  5672.,  8921.,
      8978.,  9035.,  9092.,  9149.,  9206.,  9263.,  9320.,  9377.,  9434.,
      9491.,  9548.,  9605.,  9662.,  9719.,  9776.,  9833.,  9890.,  9947.,
      10004., 6992.,  7032.,  7072.,  7112.,  3717.,  3738.,  3759.,  3780.,
      1690.,  1700.,  1710.,  1720.,  3589.,  3610.,  3631.,  3652.,  5701.,
      5734.,  5767.,  5800.,  5833.,  5866.,  5899.,  5932.,  5965.,  5998.,
      6031.,  6064.,  6097.,  6130.,  6163.,  6196.,  6229.,  6262.,  6295.,
      6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  733600.,  744184.,
      754768.,  765352.,  955605.,  968975.,  982345.,  995715.,  1193500.,
      1209712., 1225924., 1242136., 1447509., 1466619., 1485729., 1504839.,
      1485435., 1504937., 1524439., 1543941., 1523361., 1543255., 1563149.,
      1583043., 1357888., 1375108., 1392328., 1409548., 1175405., 1189895.,
      1204385., 1218875., 975688.,  987392.,  999096.,  1010800., 916552.,
      929152.,  941752.,  954352.,  1189335., 1205225., 1221115., 1237005.,
      1480024., 1499260., 1518496., 1537732., 1788843., 1811481., 1834119.,
      1856757., 1826769., 1849799., 1872829., 1895859., 1864695., 1888117.,
      1911539., 1934961., 1656508., 1676752., 1696996., 1717240., 1429295.,
      1446305., 1463315., 1480325., 1182832., 1196552., 1210272., 1223992.,
      1079736., 1091400., 1103064., 1114728., 1390920., 1405620., 1420320.,
      1435020., 1718988., 1736772., 1754556., 1772340., 2064132., 2085048.,
      2105964., 2126880., 2101344., 2122596., 2143848., 2165100., 2138556.,
      2160144., 2181732., 2203320., 1887540., 1906188., 1924836., 1943484.,
      1618680., 1634340., 1650000., 1665660., 1331784., 1344408., 1357032.,
      1369656., 1158320., 1168760., 1179200., 1189640., 1485475., 1498625.,
      1511775., 1524925., 1827980., 1843880., 1859780., 1875680., 2185995.,
      2204685., 2223375., 2242065., 2220925., 2239895., 2258865., 2277835.,
      2255855., 2275105., 2294355., 2313605., 1982840., 1999460., 2016080.,
      2032700., 1693675., 1707625., 1721575., 1735525., 1388200., 1399440.,
      1410680., 1421920., 1144240., 1153168., 1162096., 1171024., 1462920.,
      1474160., 1485400., 1496640., 1794904., 1808488., 1822072., 1835656.,
      2140320., 2156280., 2172240., 2188200., 2171400., 2187584., 2203768.,
      2219952., 2202480., 2218888., 2235296., 2251704., 1930312., 1944472.,
      1958632., 1972792., 1644200., 1656080., 1667960., 1679840., 1344016.,
      1353584., 1363152., 1372720.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   137.,
      179.,   221.,   263.,   305.,   347.,   389.,   431.,   473.,   515.,
      557.,   599.,   641.,   683.,   725.,   767.,   809.,   851.,   893.,
      935.,   804.,   840.,   876.,   912.,   545.,   567.,   589.,   611.,
      196.,   232.,   268.,   304.,   772.,   860.,   948.,   1036.,  1792.,
      1948.,  2104.,  2260.,  2416.,  2572.,  2728.,  2884.,  3040.,  3196.,
      3352.,  3508.,  3664.,  3820.,  3976.,  4132.,  4288.,  4444.,  4600.,
      4756.,  3708.,  3828.,  3948.,  4068.,  2300.,  2368.,  2436.,  2504.,
      1245.,  1335.,  1425.,  1515.,  3540.,  3744.,  3948.,  4152.,  6981.,
      7323.,  7665.,  8007.,  8349.,  8691.,  9033.,  9375.,  9717.,  10059.,
      10401., 10743., 11085., 11427., 11769., 12111., 12453., 12795., 13137.,
      13479., 10056., 10308., 10560., 10812., 5937.,  6075.,  6213.,  6351.,
      3824.,  3992.,  4160.,  4328.,  9688.,  10056., 10424., 10792., 17720.,
      18320., 18920., 19520., 20120., 20720., 21320., 21920., 22520., 23120.,
      23720., 24320., 24920., 25520., 26120., 26720., 27320., 27920., 28520.,
      29120., 21192., 21624., 22056., 22488., 12128., 12360., 12592., 12824.,
      8528.,  8696.,  8864.,  9032.,  19992., 20360., 20728., 21096., 34520.,
      35120., 35720., 36320., 36920., 37520., 38120., 38720., 39320., 39920.,
      40520., 41120., 41720., 42320., 42920., 43520., 44120., 44720., 45320.,
      45920., 33288., 33720., 34152., 34584., 18624., 18856., 19088., 19320.,
      13232., 13400., 13568., 13736., 30296., 30664., 31032., 31400., 51320.,
      51920., 52520., 53120., 53720., 54320., 54920., 55520., 56120., 56720.,
      57320., 57920., 58520., 59120., 59720., 60320., 60920., 61520., 62120.,
      62720., 45384., 45816., 46248., 46680., 25120., 25352., 25584., 25816.,
      17936., 18104., 18272., 18440., 40600., 40968., 41336., 41704., 68120.,
      68720., 69320., 69920., 70520., 71120., 71720., 72320., 72920., 73520.,
      74120., 74720., 75320., 75920., 76520., 77120., 77720., 78320., 78920.,
      79520., 57480., 57912., 58344., 58776., 31616., 31848., 32080., 32312.,
      21459., 21621., 21783., 21945., 46944., 47292., 47640., 47988., 76551.,
      77109., 77667., 78225., 78783., 79341., 79899., 80457., 81015., 81573.,
      82131., 82689., 83247., 83805., 84363., 84921., 85479., 86037., 86595.,
      87153., 61716., 62112., 62508., 62904., 33255., 33465., 33675., 33885.,
      20092., 20224., 20356., 20488., 43188., 43468., 43748., 44028., 69352.,
      69796., 70240., 70684., 71128., 71572., 72016., 72460., 72904., 73348.,
      73792., 74236., 74680., 75124., 75568., 76012., 76456., 76900., 77344.,
      77788., 54444., 54756., 55068., 55380., 28980., 29144., 29308., 29472.,
      13163., 13241., 13319., 13397., 27988., 28152., 28316., 28480., 44507.,
      44765., 45023., 45281., 45539., 45797., 46055., 46313., 46571., 46829.,
      47087., 47345., 47603., 47861., 48119., 48377., 48635., 48893., 49151.,
      49409., 34320., 34500., 34680., 34860., 18119., 18213., 18307., 18401.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450400.,   466400.,   482400.,   498400.,   631560.,   652200.,
      672840.,   693480.,   842192.,   867728.,   893264.,   918800.,
      1083320.,  1114008.,  1144696.,  1175384.,  1181208.,  1213688.,
      1246168.,  1278648.,  1279096.,  1313368.,  1347640.,  1381912.,
      1205264.,  1235408.,  1265552.,  1295696.,  1096840.,  1122600.,
      1148360.,  1174120.,  952800.,   973920.,   995040.,   1016160.,
      961800.,   987560.,   1013320.,  1039080.,  1308430.,  1341430.,
      1374430.,  1407430.,  1693948.,  1734508.,  1775068.,  1815628.,
      2119634.,  2168074.,  2216514.,  2264954.,  2248778.,  2299458.,
      2350138.,  2400818.,  2377922.,  2430842.,  2483762.,  2536682.,
      2167756.,  2214076.,  2260396.,  2306716.,  1904110.,  1943510.,
      1982910.,  2022310.,  1585704.,  1617864.,  1650024.,  1682184.,
      1692112.,  1729936.,  1767760.,  1805584.,  2180092.,  2228332.,
      2276572.,  2324812.,  2720472.,  2779512.,  2838552.,  2897592.,
      3314788.,  3385012.,  3455236.,  3525460.,  3454964.,  3527876.,
      3600788.,  3673700.,  3595140.,  3670740.,  3746340.,  3821940.,
      3225144.,  3291096.,  3357048.,  3423000.,  2786876.,  2842796.,
      2898716.,  2954636.,  2278800.,  2324304.,  2369808.,  2415312.,
      2480568.,  2532760.,  2584952.,  2637144.,  3134674.,  3201034.,
      3267394.,  3333754.,  3858788.,  3939764.,  4020740.,  4101716.,
      4654702.,  4750742.,  4846782.,  4942822.,  4818454.,  4917630.,
      5016806.,  5115982.,  4982206.,  5084518.,  5186830.,  5289142.,
      4440404.,  4529444.,  4618484.,  4707524.,  3811442.,  3886762.,
      3962082.,  4037402.,  3093528.,  3154680.,  3215832.,  3276984.,
      3352344.,  3420664.,  3488984.,  3557304.,  4190986.,  4277506.,
      4364026.,  4450546.,  5115764.,  5220932.,  5326100.,  5431268.,
      6128470.,  6252734.,  6376998.,  6501262.,  6292222.,  6419622.,
      6547022.,  6674422.,  6455974.,  6586510.,  6717046.,  6847582.,
      5720420.,  5833652.,  5946884.,  6060116.,  4881578.,  4977058.,
      5072538.,  5168018.,  3937656.,  4014936.,  4092216.,  4169496.,
      4224120.,  4308568.,  4393016.,  4477464.,  5247298.,  5353978.,
      5460658.,  5567338.,  6372740.,  6502100.,  6631460.,  6760820.,
      7602238.,  7754726.,  7907214.,  8059702.,  7765990.,  7921614.,
      8077238.,  8232862.,  7929742.,  8088502.,  8247262.,  8406022.,
      7000436.,  7137860.,  7275284.,  7412708.,  5951714.,  6067354.,
      6182994.,  6298634.,  4781784.,  4875192.,  4968600.,  5062008.,
      5095896.,  5196472.,  5297048.,  5397624.,  6303610.,  6430450.,
      6557290.,  6684130.,  7629716.,  7783268.,  7936820.,  8090372.,
      9076006.,  9256718.,  9437430.,  9618142.,  9239758.,  9423606.,
      9607454.,  9791302.,  9403510.,  9590494.,  9777478.,  9964462.,
      8280452.,  8442068.,  8603684.,  8765300.,  7021850.,  7157650.,
      7293450.,  7429250.,  5625912.,  5735448.,  5844984.,  5954520.,
      5812688.,  5905808.,  5998928.,  6092048.,  7106812.,  7224172.,
      7341532.,  7458892.,  8511192.,  8653176.,  8795160.,  8937144.,
      10027364., 10194356., 10361348., 10528340., 10185460., 10355140.,
      10524820., 10694500., 10343556., 10515924., 10688292., 10860660.,
      9025080.,  9173976.,  9322872.,  9471768.,  7580476.,  7705516.,
      7830556.,  7955596.,  6008208.,  6109008.,  6209808.,  6310608.,
      5853864.,  5937224.,  6020584.,  6103944.,  7055254.,  7160254.,
      7265254.,  7370254.,  8354668.,  8481628.,  8608588.,  8735548.,
      9753386.,  9902626.,  10051866., 10201106., 9893282.,  10044762.,
      10196242., 10347722., 10033178., 10186898., 10340618., 10494338.,
      8685628.,  8818348.,  8951068.,  9083788.,  7225462.,  7336862.,
      7448262.,  7559662.,  5651400.,  5741160.,  5830920.,  5920680.,
      5154912.,  5226208.,  5297504.,  5368800.,  6068296.,  6158056.,
      6247816.,  6337576.,  7063376.,  7171856.,  7280336.,  7388816.,
      8141176.,  8268632.,  8396088.,  8523544.,  8250328.,  8379576.,
      8508824.,  8638072.,  8359480.,  8490520.,  8621560.,  8752600.,
      7165328.,  7278416.,  7391504.,  7504592.,  5876168.,  5971048.,
      6065928.,  6160808.,  4490976.,  4567392.,  4643808.,  4720224.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      946.,    1258.,   1570.,   1882.,   2194.,   2506.,   2818.,   3130.,
      3442.,   3754.,   4066.,   4378.,   4690.,   5002.,   5314.,   5626.,
      5938.,   6250.,   6562.,   6874.,   6036.,   6308.,   6580.,   6852.,
      4142.,   4310.,   4478.,   4646.,   1300.,   1572.,   1844.,   2116.,
      5560.,   6232.,   6904.,   7576.,   13292.,  14492.,  15692.,  16892.,
      18092.,  19292.,  20492.,  21692.,  22892.,  24092.,  25292.,  26492.,
      27692.,  28892.,  30092.,  31292.,  32492.,  33692.,  34892.,  36092.,
      28376.,  29304.,  30232.,  31160.,  17716.,  18244.,  18772.,  19300.,
      9186.,   9882.,   10578.,  11274.,  26652.,  28236.,  29820.,  31404.,
      53166.,  55830.,  58494.,  61158.,  63822.,  66486.,  69150.,  71814.,
      74478.,  77142.,  79806.,  82470.,  85134.,  87798.,  90462.,  93126.,
      95790.,  98454.,  101118., 103782., 77772.,  79740.,  81708.,  83676.,
      46098.,  47178.,  48258.,  49338.,  29064.,  30376.,  31688.,  33000.,
      74288.,  77168.,  80048.,  82928.,  136696., 141400., 146104., 150808.,
      155512., 160216., 164920., 169624., 174328., 179032., 183736., 188440.,
      193144., 197848., 202552., 207256., 211960., 216664., 221368., 226072.,
      164976., 168368., 171760., 175152., 94664.,  96488.,  98312.,  100136.,
      65800.,  67112.,  68424.,  69736.,  154928., 157808., 160688., 163568.,
      268408., 273112., 277816., 282520., 287224., 291928., 296632., 301336.,
      306040., 310744., 315448., 320152., 324856., 329560., 334264., 338968.,
      343672., 348376., 353080., 357784., 259952., 263344., 266736., 270128.,
      145736., 147560., 149384., 151208., 102536., 103848., 105160., 106472.,
      235568., 238448., 241328., 244208., 400120., 404824., 409528., 414232.,
      418936., 423640., 428344., 433048., 437752., 442456., 447160., 451864.,
      456568., 461272., 465976., 470680., 475384., 480088., 484792., 489496.,
      354928., 358320., 361712., 365104., 196808., 198632., 200456., 202280.,
      139272., 140584., 141896., 143208., 316208., 319088., 321968., 324848.,
      531832., 536536., 541240., 545944., 550648., 555352., 560056., 564760.,
      569464., 574168., 578872., 583576., 588280., 592984., 597688., 602392.,
      607096., 611800., 616504., 621208., 449904., 453296., 456688., 460080.,
      247880., 249704., 251528., 253352., 168138., 169410., 170682., 171954.,
      368364., 371100., 373836., 376572., 601446., 605838., 610230., 614622.,
      619014., 623406., 627798., 632190., 636582., 640974., 645366., 649758.,
      654150., 658542., 662934., 667326., 671718., 676110., 680502., 684894.,
      485532., 488652., 491772., 494892., 261882., 263538., 265194., 266850.,
      158132., 159172., 160212., 161252., 340216., 342424., 344632., 346840.,
      546764., 550268., 553772., 557276., 560780., 564284., 567788., 571292.,
      574796., 578300., 581804., 585308., 588812., 592316., 595820., 599324.,
      602828., 606332., 609836., 613340., 429592., 432056., 434520., 436984.,
      228820., 230116., 231412., 232708., 103878., 104494., 105110., 105726.,
      221012., 222308., 223604., 224900., 351658., 353698., 355738., 357778.,
      359818., 361858., 363898., 365938., 367978., 370018., 372058., 374098.,
      376138., 378178., 380218., 382258., 384298., 386338., 388378., 390418.,
      271332., 272756., 274180., 275604., 143318., 144062., 144806., 145550.};
  const std::array<int, 4> in_shape = {{1, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,  3070.,  4046.,  5152.,  5558.,  5964.,  6370.,  5930.,  5340.,
      4596.,  4600.,  6225.,  8050.,  10080., 10710., 11340., 11970., 10975.,
      9750.,  8290.,  8270.,  11035., 14091., 17444., 18347., 19250., 20153.,
      18285., 16090., 13562., 13510., 17850., 22589., 27734., 28959., 30184.,
      31409., 28280., 24710., 20692., 20090., 26250., 32879., 39984., 41209.,
      42434., 43659., 38990., 33810., 28112., 26670., 34650., 43169., 52234.,
      53459., 54684., 55909., 49700., 42910., 35532., 33250., 43050., 53459.,
      64484., 65709., 66934., 68159., 60410., 52010., 42952., 38810., 49915.,
      61593., 73850., 75047., 76244., 77441., 68235., 58420., 47990., 41400.,
      53025., 65170., 77840., 78960., 80080., 81200., 71275., 60800., 49770.,
      40740., 52030., 63770., 75964., 76958., 77952., 78946., 69110., 58800.,
      48012.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,  41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      64.,  167.,  312.,  502.,  580.,  658.,  736.,  645.,  494.,  280.,
      182., 438.,  772.,  1188., 1324., 1460., 1596., 1354., 1010., 560.,
      378., 858.,  1444., 2140., 2276., 2412., 2548., 2110., 1542., 840.,
      574., 1278., 2116., 3092., 3228., 3364., 3500., 2866., 2074., 1120.,
      770., 1698., 2788., 4044., 4180., 4316., 4452., 3622., 2606., 1400.,
      916., 1967., 3156., 4486., 4612., 4738., 4864., 3885., 2750., 1456.,
      855., 1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,
      559., 1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503., 784.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,  23320.,  30832.,  39368.,  42560.,  45752.,  48944.,  45664.,
      41200.,  35520.,  35260.,  47825.,  61970.,  77735.,  82705.,  87675.,
      92645.,  85070.,  75675.,  64420.,  63904.,  85400.,  109200., 135352.,
      142492., 149632., 156772., 142392., 125420., 105808., 104972., 138845.,
      175882., 216139., 225841., 235543., 245245., 220990., 193235., 161924.,
      157052., 205345., 257362., 313159., 322861., 332563., 342265., 305830.,
      265335., 220724., 209132., 271845., 338842., 410179., 419881., 429583.,
      439285., 390670., 337435., 279524., 261212., 338345., 420322., 507199.,
      516901., 526603., 536305., 475510., 409535., 338324., 305968., 393620.,
      485832., 582652., 592144., 601636., 611128., 538608., 461240., 378976.,
      327100., 419025., 515090., 615335., 624225., 633115., 642005., 563630.,
      480875., 393700., 322368., 411760., 504736., 601328., 609224., 617120.,
      625016., 547216., 465640., 380256.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   437.,   1174.,  2235.,  3644.,  4244.,  4844.,  5444.,
      4809.,  3706.,  2111.,  1312.,  3200.,  5696.,  8832.,  9888.,  10944.,
      12000., 10232., 7664.,  4264.,  2824.,  6448.,  10904., 16224., 17280.,
      18336., 19392., 16112., 11808., 6448.,  4336.,  9696.,  16112., 23616.,
      24672., 25728., 26784., 21992., 15952., 8632.,  5848.,  12944., 21320.,
      31008., 32064., 33120., 34176., 27872., 20096., 10816., 7061.,  15190.,
      24411., 34748., 35732., 36716., 37700., 30153., 21370., 11327., 6640.,
      14080., 22336., 31424., 32208., 32992., 33776., 26716., 18744., 9844.,
      4361.,  9166.,  14423., 20140., 20596., 21052., 21508., 16889., 11770.,
      6143.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,  181640.,  240560.,  307608.,  332920.,  358232.,  383544.,
      358256.,  323560.,  279200.,  275960.,  374750.,  486100.,  610330.,
      649810.,  689290.,  728770.,  669700.,  596150.,  507800.,  502256.,
      671740.,  859560.,  1066100., 1122884., 1179668., 1236452., 1123656.,
      990220.,  835760.,  827400.,  1095010., 1387820., 1706278., 1783502.,
      1860726., 1937950., 1747004., 1528170., 1281000., 1241800., 1624210.,
      2036300., 2478518., 2555742., 2632966., 2710190., 2422364., 2102170.,
      1749160., 1656200., 2153410., 2684780., 3250758., 3327982., 3405206.,
      3482430., 3097724., 2676170., 2217320., 2070600., 2682610., 3333260.,
      4022998., 4100222., 4177446., 4254670., 3773084., 3250170., 2685480.,
      2429744., 3126220., 3859080., 4628708., 4704308., 4779908., 4855508.,
      4279848., 3665500., 3012080., 2600440., 3331550., 4095700., 4893210.,
      4964050., 5034890., 5105730., 4482820., 3824950., 3131800., 2564768.,
      3276200., 4016240., 4785144., 4848088., 4911032., 4973976., 4355120.,
      3706120., 3026720.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    856.,    1400.,   1944.,   2488.,   2722.,
      2428.,   1542.,   500.,    1864.,   4220.,   7696.,   9808.,   11920.,
      14032.,  13292.,  10792.,  6404.,   3202.,   8756.,   16854.,  27688.,
      32392.,  37096.,  41800.,  37086.,  28676.,  16378.,  9928.,   24400.,
      43672.,  68000.,  76320.,  84640.,  92960.,  79480.,  59664.,  33256.,
      21800.,  49936.,  84664.,  126240., 134560., 142880., 151200., 125848.,
      92368.,  50504.,  33672.,  75472.,  125656., 184480., 192800., 201120.,
      209440., 172216., 125072., 67752.,  45544.,  101008., 166648., 242720.,
      251040., 259360., 267680., 218584., 157776., 85000.,  55426.,  119348.,
      191958., 273448., 281224., 289000., 296776., 237534., 168452., 89338.,
      52324.,  111016., 176204., 248016., 254224., 260432., 266640., 211004.,
      148104., 77812.,  34446.,  72428.,  114010., 159256., 162872., 166488.,
      170104., 133618., 93148.,  48630.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  51870.,  53340.,  67445.,  69300.,
      84091.,  86338.,  101822., 104468., 104223., 106918., 106624., 109368.,
      109025., 111818., 96985.,  99400.,  83790.,  85820.,  69426.,  71064.,
      64750.,  66500.,  83895.,  86100.,  104251., 106918., 125832., 128968.,
      128233., 131418., 130634., 133868., 133035., 136318., 117985., 120820.,
      101640., 104020., 83986.,  85904.,  76000.,  77620.,  97790.,  99830.,
      120720., 123186., 144802., 147700., 147154., 150094., 149506., 152488.,
      151858., 154882., 133860., 136470., 114650., 116840., 94216.,  95980.,
      81350.,  82800.,  104225., 106050., 128135., 130340., 153090., 155680.,
      155295., 157920., 157500., 160160., 159705., 162400., 140225., 142550.,
      119650., 121600., 97970.,  99540.,  80240.,  81480.,  102500., 104060.,
      125656., 127540., 149716., 151928., 151676., 153916., 153636., 155904.,
      155596., 157892., 136240., 138220., 115940., 117600., 94688.,  96024.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   30.,   40.,   50.,   60.,
      70.,   80.,   90.,   100.,  95.,   104.,  83.,   90.,   52.,   56.,
      20.,   26.,   68.,   82.,   148.,  172.,  264.,  300.,  336.,  372.,
      408.,  444.,  480.,  516.,  448.,  478.,  360.,  382.,  212.,  224.,
      113.,  128.,  301.,  334.,  570.,  624.,  926.,  1004., 1082., 1160.,
      1238., 1316., 1394., 1472., 1227., 1290., 943.,  988.,  536.,  560.,
      336.,  364.,  816.,  876.,  1448., 1544., 2240., 2376., 2512., 2648.,
      2784., 2920., 3056., 3192., 2600., 2708., 1944., 2020., 1080., 1120.,
      728.,  756.,  1656., 1716., 2792., 2888., 4144., 4280., 4416., 4552.,
      4688., 4824., 4960., 5096., 4112., 4220., 3008., 3084., 1640., 1680.,
      1120., 1148., 2496., 2556., 4136., 4232., 6048., 6184., 6320., 6456.,
      6592., 6728., 6864., 7000., 5624., 5732., 4072., 4148., 2200., 2240.,
      1512., 1540., 3336., 3396., 5480., 5576., 7952., 8088., 8224., 8360.,
      8496., 8632., 8768., 8904., 7136., 7244., 5136., 5212., 2760., 2800.,
      1805., 1832., 3877., 3934., 6222., 6312., 8846., 8972., 9098., 9224.,
      9350., 9476., 9602., 9728., 7671., 7770., 5431., 5500., 2876., 2912.,
      1688., 1710., 3576., 3622., 5668., 5740., 7968., 8068., 8168., 8268.,
      8368., 8468., 8568., 8668., 6772., 6850., 4748., 4802., 2492., 2520.,
      1105., 1118., 2321., 2348., 3650., 3692., 5094., 5152., 5210., 5268.,
      5326., 5384., 5442., 5500., 4271., 4316., 2975., 3006., 1552., 1568.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,   34144.,   44500.,   47340.,   59024.,   62528.,   75572.,
      79772.,   81788.,   86212.,   88004.,   92652.,   94220.,   99092.,
      88112.,   92384.,   79660.,   83300.,   68800.,   71776.,   67840.,
      71400.,   92225.,   96775.,   119740.,  125320.,  150465.,  157115.,
      160195.,  167125.,  169925.,  177135.,  179655.,  187145.,  165220.,
      171760.,  147175.,  152725.,  125440.,  129960.,  123872.,  129104.,
      165790.,  172450.,  212280.,  220416.,  263438.,  273098.,  277466.,
      287462.,  291494.,  301826.,  305522.,  316190.,  277800.,  287088.,
      244930.,  252790.,  206816.,  213200.,  204512.,  211736.,  270795.,
      279965.,  343364.,  354536.,  422331.,  435561.,  441441.,  455063.,
      460551.,  474565.,  479661.,  494067.,  432572.,  445088.,  378525.,
      389095.,  317408.,  325976.,  306992.,  316456.,  401695.,  413665.,
      503804.,  518336.,  613431.,  630581.,  632541.,  650083.,  651651.,
      669585.,  670761.,  689087.,  599732.,  615608.,  520625.,  533995.,
      433328.,  444136.,  409472.,  421176.,  532595.,  547365.,  664244.,
      682136.,  804531.,  825601.,  823641.,  845103.,  842751.,  864605.,
      861861.,  884107.,  766892.,  786128.,  662725.,  678895.,  549248.,
      562296.,  511952.,  525896.,  663495.,  681065.,  824684.,  845936.,
      995631.,  1020621., 1014741., 1040123., 1033851., 1059625., 1052961.,
      1079127., 934052.,  956648.,  804825.,  823795.,  665168.,  680456.,
      602240.,  615152.,  775030.,  791290.,  956904.,  976560.,  1147958.,
      1171058., 1166690., 1190126., 1185422., 1209194., 1204154., 1228262.,
      1061592., 1082400., 909370.,  926830.,  747392.,  761456.,  645520.,
      657080.,  827125.,  841675.,  1016980., 1034560., 1215165., 1235815.,
      1232735., 1253665., 1250305., 1271515., 1267875., 1289365., 1113340.,
      1131880., 950075.,  965625.,  778000.,  790520.,  637312.,  647200.,
      814180.,  826620.,  998192.,  1013216., 1189412., 1207052., 1205036.,
      1222900., 1220660., 1238748., 1236284., 1254596., 1082576., 1098368.,
      921340.,  934580.,  752512.,  763168.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   192.,   264.,   336.,
      408.,   480.,   552.,   624.,   696.,   679.,   745.,   604.,   656.,
      383.,   413.,   118.,   162.,   448.,   552.,   1022.,  1202.,  1872.,
      2144.,  2416.,  2688.,  2960.,  3232.,  3504.,  3776.,  3314.,  3542.,
      2688.,  2856.,  1594.,  1686.,  787.,   901.,   2156.,  2408.,  4155.,
      4569.,  6832.,  7432.,  8032.,  8632.,  9232.,  9832.,  10432., 11032.,
      9249.,  9735.,  7148.,  7496.,  4081.,  4267.,  2460.,  2676.,  6048.,
      6512.,  10828., 11572., 16864., 17920., 18976., 20032., 21088., 22144.,
      23200., 24256., 19828., 20668., 14880., 15472., 8292.,  8604.,  5484.,
      5700.,  12544., 13008., 21244., 21988., 31648., 32704., 33760., 34816.,
      35872., 36928., 37984., 39040., 31588., 32428., 23168., 23760., 12660.,
      12972., 8508.,  8724.,  19040., 19504., 31660., 32404., 46432., 47488.,
      48544., 49600., 50656., 51712., 52768., 53824., 43348., 44188., 31456.,
      32048., 17028., 17340., 11532., 11748., 25536., 26000., 42076., 42820.,
      61216., 62272., 63328., 64384., 65440., 66496., 67552., 68608., 55108.,
      55948., 39744., 40336., 21396., 21708., 13963., 14173., 30044., 30488.,
      48291., 48993., 68752., 69736., 70720., 71704., 72688., 73672., 74656.,
      75640., 59721., 60495., 42332., 42872., 22441., 22723., 13150., 13322.,
      27888., 28248., 44246., 44810., 62256., 63040., 63824., 64608., 65392.,
      66176., 66960., 67744., 52970., 53582., 37168., 37592., 19522., 19742.,
      8645.,  8747.,  18172., 18384., 28597., 28927., 39936., 40392., 40848.,
      41304., 41760., 42216., 42672., 43128., 33511., 33865., 23356., 23600.,
      12191., 12317.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,  267680.,  349080.,  371640.,   463600.,   491440.,   594216.,
      627592.,  643720.,  678888.,  693224.,   730184.,   742728.,   781480.,
      695152.,  729136.,  628920.,  657880.,   543520.,   567200.,   534120.,
      562440.,  726750.,  762950.,  944300.,   988700.,   1187410.,  1240330.,
      1264970., 1320130., 1342530., 1399930.,  1420090.,  1479730.,  1306700.,
      1358780., 1164550., 1208750., 993000.,   1029000.,  978352.,   1020016.,
      1310180., 1363220., 1678440., 1743240.,  2083900.,  2160844.,  2195788.,
      2275420., 2307676., 2389996., 2419564.,  2504572.,  2200872.,  2274888.,
      1941140., 2003780., 1639600., 1690480.,  1618680.,  1676248.,  2144170.,
      2217250., 2719780., 2808820., 3346406.,  3451854.,  3498894.,  3607478.,
      3651382., 3763102., 3803870., 3918726.,  3431428.,  3531220.,  3003490.,
      3087770., 2519160., 2587480., 2436280.,  2511768.,  3188570.,  3284050.,
      3999940., 4115860., 4871286., 5008094.,  5023774.,  5163718.,  5176262.,
      5319342., 5328750., 5474966., 4765348.,  4892020.,  4137490.,  4244170.,
      3444280., 3530520., 3253880., 3347288.,  4232970.,  4350850.,  5280100.,
      5422900., 6396166., 6564334., 6548654.,  6719958.,  6701142.,  6875582.,
      6853630., 7031206., 6099268., 6252820.,  5271490.,  5400570.,  4369400.,
      4473560., 4071480., 4182808., 5277370.,  5417650.,  6560260.,  6729940.,
      7921046., 8120574., 8073534., 8276198.,  8226022.,  8431822.,  8378510.,
      8587446., 7433188., 7613620., 6405490.,  6556970.,  5294520.,  5416600.,
      4794928., 4898032., 6171140., 6300980.,  7619880.,  7776840.,  9141916.,
      9326380., 9291436., 9478588., 9440956.,  9630796.,  9590476.,  9783004.,
      8455656., 8621832., 7243700., 7383140.,  5953840.,  6066160.,  5143080.,
      5235400., 6590350., 6706550., 8103500.,  8243900.,  9683170.,  9848090.,
      9823450., 9990610., 9963730., 10133130., 10104010., 10275650., 8872940.,
      9021020., 7572150., 7696350., 6201000.,  6301000.,  5080096.,  5159072.,
      6490200., 6589560., 7957360., 8077360.,  9482088.,  9622984.,  9606856.,
      9749544., 9731624., 9876104., 9856392.,  10002664., 8631280.,  8757424.,
      7346040., 7451800., 6000160., 6085280.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1352.,   1896.,
      2440.,   2984.,   3528.,   4072.,   4616.,   5160.,   5114.,   5618.,
      4596.,   4996.,   2934.,   3166.,   780.,    1116.,   3208.,   4008.,
      7540.,   8932.,   14032.,  16144.,  18256.,  20368.,  22480.,  24592.,
      26704.,  28816.,  25444.,  27220.,  20744.,  22056.,  12348.,  13068.,
      5834.,   6722.,   16252.,  18220.,  31638.,  34878.,  52376.,  57080.,
      61784.,  66488.,  71192.,  75896.,  80600.,  85304.,  71742.,  75558.,
      55612.,  58348.,  31826.,  33290.,  18776.,  20472.,  46480.,  50128.,
      83624.,  89480.,  130720., 139040., 147360., 155680., 164000., 172320.,
      180640., 188960., 154760., 161384., 116368., 121040., 64952.,  67416.,
      42520.,  44216.,  97552.,  101200., 165608., 171464., 247200., 255520.,
      263840., 272160., 280480., 288800., 297120., 305440., 247496., 254120.,
      181776., 186448., 99448.,  101912., 66264.,  67960.,  148624., 152272.,
      247592., 253448., 363680., 372000., 380320., 388640., 396960., 405280.,
      413600., 421920., 340232., 346856., 247184., 251856., 133944., 136408.,
      90008.,  91704.,  199696., 203344., 329576., 335432., 480160., 488480.,
      496800., 505120., 513440., 521760., 530080., 538400., 432968., 439592.,
      312592., 317264., 168440., 170904., 109802., 111458., 236476., 239980.,
      380406., 385950., 541976., 549752., 557528., 565304., 573080., 580856.,
      588632., 596408., 471198., 477318., 334204., 338476., 177266., 179498.,
      103788., 105148., 220232., 223080., 349588., 354052., 492112., 498320.,
      504528., 510736., 516944., 523152., 529360., 535568., 418948., 423796.,
      294088., 297448., 154524., 156268., 68382.,  69190.,  143796., 145476.,
      226370., 228986., 316232., 319848., 323464., 327080., 330696., 334312.,
      337928., 341544., 265466., 268274., 185076., 187012., 96630.,  97630.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,   8320.,   8600.,   8880.,   11200.,  11560.,  11920.,  12280.,
      14852.,  15296.,  15740.,  16184.,  19012.,  19544.,  20076.,  20608.,
      20552.,  21112.,  21672.,  22232.,  22092.,  22680.,  23268.,  23856.,
      23632.,  24248.,  24864.,  25480.,  22100.,  22640.,  23180.,  23720.,
      19980.,  20440.,  20900.,  21360.,  17256.,  17632.,  18008.,  18384.,
      17050.,  17500.,  17950.,  18400.,  23175.,  23750.,  24325.,  24900.,
      30085.,  30790.,  31495.,  32200.,  37800.,  38640.,  39480.,  40320.,
      40215.,  41090.,  41965.,  42840.,  42630.,  43540.,  44450.,  45360.,
      45045.,  45990.,  46935.,  47880.,  41425.,  42250.,  43075.,  43900.,
      36900.,  37600.,  38300.,  39000.,  31450.,  32020.,  32590.,  33160.,
      31100.,  31760.,  32420.,  33080.,  41620.,  42460.,  43300.,  44140.,
      53286.,  54312.,  55338.,  56364.,  66122.,  67340.,  68558.,  69776.,
      69608.,  70868.,  72128.,  73388.,  73094.,  74396.,  75698.,  77000.,
      76580.,  77924.,  79268.,  80612.,  69630.,  70800.,  71970.,  73140.,
      61390.,  62380.,  63370.,  64360.,  51836.,  52640.,  53444.,  54248.,
      51310.,  52220.,  53130.,  54040.,  67935.,  69090.,  70245.,  71400.,
      86135.,  87542.,  88949.,  90356.,  105938., 107604., 109270., 110936.,
      110691., 112406., 114121., 115836., 115444., 117208., 118972., 120736.,
      120197., 122010., 123823., 125636., 108395., 109970., 111545., 113120.,
      94850.,  96180.,  97510.,  98840.,  79534.,  80612.,  81690.,  82768.,
      76790.,  77980.,  79170.,  80360.,  100485., 101990., 103495., 105000.,
      126035., 127862., 129689., 131516., 153468., 155624., 157780., 159936.,
      158221., 160426., 162631., 164836., 162974., 165228., 167482., 169736.,
      167727., 170030., 172333., 174636., 149975., 151970., 153965., 155960.,
      130200., 131880., 133560., 135240., 108374., 109732., 111090., 112448.,
      102270., 103740., 105210., 106680., 133035., 134890., 136745., 138600.,
      165935., 168182., 170429., 172676., 200998., 203644., 206290., 208936.,
      205751., 208446., 211141., 213836., 210504., 213248., 215992., 218736.,
      215257., 218050., 220843., 223636., 191555., 193970., 196385., 198800.,
      165550., 167580., 169610., 171640., 137214., 138852., 140490., 142128.,
      127750., 129500., 131250., 133000., 165585., 167790., 169995., 172200.,
      205835., 208502., 211169., 213836., 248528., 251664., 254800., 257936.,
      253281., 256466., 259651., 262836., 258034., 261268., 264502., 267736.,
      262787., 266070., 269353., 272636., 233135., 235970., 238805., 241640.,
      200900., 203280., 205660., 208040., 166054., 167972., 169890., 171808.,
      150380., 152000., 153620., 155240., 193540., 195580., 197620., 199660.,
      238974., 241440., 243906., 246372., 286706., 289604., 292502., 295400.,
      291368., 294308., 297248., 300188., 296030., 299012., 301994., 304976.,
      300692., 303716., 306740., 309764., 265110., 267720., 270330., 272940.,
      227110., 229300., 231490., 233680., 186668., 188432., 190196., 191960.,
      161250., 162700., 164150., 165600., 206625., 208450., 210275., 212100.,
      254065., 256270., 258475., 260680., 303590., 306180., 308770., 311360.,
      307965., 310590., 313215., 315840., 312340., 315000., 317660., 320320.,
      316715., 319410., 322105., 324800., 278125., 280450., 282775., 285100.,
      237350., 239300., 241250., 243200., 194370., 195940., 197510., 199080.,
      159240., 160480., 161720., 162960., 203440., 205000., 206560., 208120.,
      249428., 251312., 253196., 255080., 297220., 299432., 301644., 303856.,
      301112., 303352., 305592., 307832., 305004., 307272., 309540., 311808.,
      308896., 311192., 313488., 315784., 270500., 272480., 274460., 276440.,
      230220., 231880., 233540., 235200., 188040., 189376., 190712., 192048.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,    100.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,
      100.,   104.,   108.,   112.,   34.,    40.,    46.,    52.,    122.,
      136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,
      564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,
      888.,   924.,   960.,   996.,   1032.,  866.,   896.,   926.,   956.,
      698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,
      226.,   241.,   256.,   569.,   602.,   635.,   668.,   1086.,  1140.,
      1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,
      2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,
      2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,
      1072.,  1096.,  1120.,  644.,   672.,   700.,   728.,   1572.,  1632.,
      1692.,  1752.,  2800.,  2896.,  2992.,  3088.,  4344.,  4480.,  4616.,
      4752.,  4888.,  5024.,  5160.,  5296.,  5432.,  5568.,  5704.,  5840.,
      5976.,  6112.,  6248.,  6384.,  5092.,  5200.,  5308.,  5416.,  3812.,
      3888.,  3964.,  4040.,  2120.,  2160.,  2200.,  2240.,  1428.,  1456.,
      1484.,  1512.,  3252.,  3312.,  3372.,  3432.,  5488.,  5584.,  5680.,
      5776.,  8152.,  8288.,  8424.,  8560.,  8696.,  8832.,  8968.,  9104.,
      9240.,  9376.,  9512.,  9648.,  9784.,  9920.,  10056., 10192., 8116.,
      8224.,  8332.,  8440.,  5940.,  6016.,  6092.,  6168.,  3240.,  3280.,
      3320.,  3360.,  2212.,  2240.,  2268.,  2296.,  4932.,  4992.,  5052.,
      5112.,  8176.,  8272.,  8368.,  8464.,  11960., 12096., 12232., 12368.,
      12504., 12640., 12776., 12912., 13048., 13184., 13320., 13456., 13592.,
      13728., 13864., 14000., 11140., 11248., 11356., 11464., 8068.,  8144.,
      8220.,  8296.,  4360.,  4400.,  4440.,  4480.,  2996.,  3024.,  3052.,
      3080.,  6612.,  6672.,  6732.,  6792.,  10864., 10960., 11056., 11152.,
      15768., 15904., 16040., 16176., 16312., 16448., 16584., 16720., 16856.,
      16992., 17128., 17264., 17400., 17536., 17672., 17808., 14164., 14272.,
      14380., 14488., 10196., 10272., 10348., 10424., 5480.,  5520.,  5560.,
      5600.,  3583.,  3610.,  3637.,  3664.,  7697.,  7754.,  7811.,  7868.,
      12354., 12444., 12534., 12624., 17566., 17692., 17818., 17944., 18070.,
      18196., 18322., 18448., 18574., 18700., 18826., 18952., 19078., 19204.,
      19330., 19456., 15243., 15342., 15441., 15540., 10793., 10862., 10931.,
      11000., 5716.,  5752.,  5788.,  5824.,  3354.,  3376.,  3398.,  3420.,
      7106.,  7152.,  7198.,  7244.,  11264., 11336., 11408., 11480., 15836.,
      15936., 16036., 16136., 16236., 16336., 16436., 16536., 16636., 16736.,
      16836., 16936., 17036., 17136., 17236., 17336., 13466., 13544., 13622.,
      13700., 9442.,  9496.,  9550.,  9604.,  4956.,  4984.,  5012.,  5040.,
      2197.,  2210.,  2223.,  2236.,  4615.,  4642.,  4669.,  4696.,  7258.,
      7300.,  7342.,  7384.,  10130., 10188., 10246., 10304., 10362., 10420.,
      10478., 10536., 10594., 10652., 10710., 10768., 10826., 10884., 10942.,
      11000., 8497.,  8542.,  8587.,  8632.,  5919.,  5950.,  5981.,  6012.,
      3088.,  3104.,  3120.,  3136.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,   64416.,   66624.,   68832.,   86860.,   89700.,   92540.,
      95380.,   115408.,  118912.,  122416.,  125920.,  147980.,  152180.,
      156380.,  160580.,  160244.,  164668.,  169092.,  173516.,  172508.,
      177156.,  181804.,  186452.,  184772.,  189644.,  194516.,  199388.,
      173008.,  177280.,  181552.,  185824.,  156580.,  160220.,  163860.,
      167500.,  135360.,  138336.,  141312.,  144288.,  133000.,  136560.,
      140120.,  143680.,  181025.,  185575.,  190125.,  194675.,  235280.,
      240860.,  246440.,  252020.,  295925.,  302575.,  309225.,  315875.,
      315175.,  322105.,  329035.,  335965.,  334425.,  341635.,  348845.,
      356055.,  353675.,  361165.,  368655.,  376145.,  325520.,  332060.,
      338600.,  345140.,  290175.,  295725.,  301275.,  306825.,  247480.,
      252000.,  256520.,  261040.,  243808.,  249040.,  254272.,  259504.,
      326570.,  333230.,  339890.,  346550.,  418440.,  426576.,  434712.,
      442848.,  519610.,  529270.,  538930.,  548590.,  547414.,  557410.,
      567406.,  577402.,  575218.,  585550.,  595882.,  606214.,  603022.,
      613690.,  624358.,  635026.,  548616.,  557904.,  567192.,  576480.,
      483950.,  491810.,  499670.,  507530.,  408832.,  415216.,  421600.,
      427984.,  403592.,  410816.,  418040.,  425264.,  534695.,  543865.,
      553035.,  562205.,  678328.,  689500.,  700672.,  711844.,  834715.,
      847945.,  861175.,  874405.,  872641.,  886263.,  899885.,  913507.,
      910567.,  924581.,  938595.,  952609.,  948493.,  962899.,  977305.,
      991711.,  855736.,  868252.,  880768.,  893284.,  749105.,  759675.,
      770245.,  780815.,  628376.,  636944.,  645512.,  654080.,  606872.,
      616336.,  625800.,  635264.,  794395.,  806365.,  818335.,  830305.,
      996688.,  1011220., 1025752., 1040284., 1213975., 1231125., 1248275.,
      1265425., 1251901., 1269443., 1286985., 1304527., 1289827., 1307761.,
      1325695., 1343629., 1327753., 1346079., 1364405., 1382731., 1187536.,
      1203412., 1219288., 1235164., 1031205., 1044575., 1057945., 1071315.,
      858536.,  869344.,  880152.,  890960.,  810152.,  821856.,  833560.,
      845264.,  1054095., 1068865., 1083635., 1098405., 1315048., 1332940.,
      1350832., 1368724., 1593235., 1614305., 1635375., 1656445., 1631161.,
      1652623., 1674085., 1695547., 1669087., 1690941., 1712795., 1734649.,
      1707013., 1729259., 1751505., 1773751., 1519336., 1538572., 1557808.,
      1577044., 1313305., 1329475., 1345645., 1361815., 1088696., 1101744.,
      1114792., 1127840., 1013432., 1027376., 1041320., 1055264., 1313795.,
      1331365., 1348935., 1366505., 1633408., 1654660., 1675912., 1697164.,
      1972495., 1997485., 2022475., 2047465., 2010421., 2035803., 2061185.,
      2086567., 2048347., 2074121., 2099895., 2125669., 2086273., 2112439.,
      2138605., 2164771., 1851136., 1873732., 1896328., 1918924., 1595405.,
      1614375., 1633345., 1652315., 1318856., 1334144., 1349432., 1364720.,
      1194784., 1207696., 1220608., 1233520., 1537850., 1554110., 1570370.,
      1586630., 1899048., 1918704., 1938360., 1958016., 2278570., 2301670.,
      2324770., 2347870., 2315782., 2339218., 2362654., 2386090., 2352994.,
      2376766., 2400538., 2424310., 2390206., 2414314., 2438422., 2462530.,
      2107560., 2128368., 2149176., 2169984., 1805630., 1823090., 1840550.,
      1858010., 1484224., 1498288., 1512352., 1526416., 1282360., 1293920.,
      1305480., 1317040., 1643325., 1657875., 1672425., 1686975., 2020760.,
      2038340., 2055920., 2073500., 2414825., 2435475., 2456125., 2476775.,
      2449755., 2470685., 2491615., 2512545., 2484685., 2505895., 2527105.,
      2548315., 2519615., 2541105., 2562595., 2584085., 2212760., 2231300.,
      2249840., 2268380., 1888475., 1904025., 1919575., 1935125., 1546600.,
      1559120., 1571640., 1584160., 1267200., 1277088., 1286976., 1296864.,
      1619020., 1631460., 1643900., 1656340., 1985104., 2000128., 2015152.,
      2030176., 2365580., 2383220., 2400860., 2418500., 2396660., 2414524.,
      2432388., 2450252., 2427740., 2445828., 2463916., 2482004., 2458820.,
      2477132., 2495444., 2513756., 2153296., 2169088., 2184880., 2200672.,
      1832740., 1845980., 1859220., 1872460., 1497024., 1507680., 1518336.,
      1528992.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    328.,    400.,    472.,    544.,
      616.,    688.,    760.,    832.,    904.,    976.,    1048.,   1120.,
      1192.,   1264.,   1336.,   1408.,   1307.,   1373.,   1439.,   1505.,
      1168.,   1220.,   1272.,   1324.,   743.,    773.,    803.,    833.,
      202.,    246.,    290.,    334.,    816.,    920.,    1024.,   1128.,
      1906.,   2086.,   2266.,   2446.,   3536.,   3808.,   4080.,   4352.,
      4624.,   4896.,   5168.,   5440.,   5712.,   5984.,   6256.,   6528.,
      6800.,   7072.,   7344.,   7616.,   6454.,   6682.,   6910.,   7138.,
      5248.,   5416.,   5584.,   5752.,   3118.,   3210.,   3302.,   3394.,
      1487.,   1601.,   1715.,   1829.,   4120.,   4372.,   4624.,   4876.,
      7995.,   8409.,   8823.,   9237.,   13208.,  13808.,  14408.,  15008.,
      15608.,  16208.,  16808.,  17408.,  18008.,  18608.,  19208.,  19808.,
      20408.,  21008.,  21608.,  22208.,  18129.,  18615.,  19101.,  19587.,
      14032.,  14380.,  14728.,  15076.,  8021.,   8207.,   8393.,   8579.,
      4756.,   4972.,   5188.,   5404.,   11744.,  12208.,  12672.,  13136.,
      21092.,  21836.,  22580.,  23324.,  32928.,  33984.,  35040.,  36096.,
      37152.,  38208.,  39264.,  40320.,  41376.,  42432.,  43488.,  44544.,
      45600.,  46656.,  47712.,  48768.,  39020.,  39860.,  40700.,  41540.,
      29312.,  29904.,  30496.,  31088.,  16348.,  16660.,  16972.,  17284.,
      10804.,  11020.,  11236.,  11452.,  24736.,  25200.,  25664.,  26128.,
      41924.,  42668.,  43412.,  44156.,  62496.,  63552.,  64608.,  65664.,
      66720.,  67776.,  68832.,  69888.,  70944.,  72000.,  73056.,  74112.,
      75168.,  76224.,  77280.,  78336.,  62540.,  63380.,  64220.,  65060.,
      45888.,  46480.,  47072.,  47664.,  25084.,  25396.,  25708.,  26020.,
      16852.,  17068.,  17284.,  17500.,  37728.,  38192.,  38656.,  39120.,
      62756.,  63500.,  64244.,  64988.,  92064.,  93120.,  94176.,  95232.,
      96288.,  97344.,  98400.,  99456.,  100512., 101568., 102624., 103680.,
      104736., 105792., 106848., 107904., 86060.,  86900.,  87740.,  88580.,
      62464.,  63056.,  63648.,  64240.,  33820.,  34132.,  34444.,  34756.,
      22900.,  23116.,  23332.,  23548.,  50720.,  51184.,  51648.,  52112.,
      83588.,  84332.,  85076.,  85820.,  121632., 122688., 123744., 124800.,
      125856., 126912., 127968., 129024., 130080., 131136., 132192., 133248.,
      134304., 135360., 136416., 137472., 109580., 110420., 111260., 112100.,
      79040.,  79632.,  80224.,  80816.,  42556.,  42868.,  43180.,  43492.,
      27767.,  27977.,  28187.,  28397.,  59752.,  60196.,  60640.,  61084.,
      96051.,  96753.,  97455.,  98157.,  136760., 137744., 138728., 139712.,
      140696., 141680., 142664., 143648., 144632., 145616., 146600., 147584.,
      148568., 149552., 150536., 151520., 118857., 119631., 120405., 121179.,
      84256.,  84796.,  85336.,  85876.,  44669.,  44951.,  45233.,  45515.,
      26170.,  26342.,  26514.,  26686.,  55504.,  55864.,  56224.,  56584.,
      88066.,  88630.,  89194.,  89758.,  123920., 124704., 125488., 126272.,
      127056., 127840., 128624., 129408., 130192., 130976., 131760., 132544.,
      133328., 134112., 134896., 135680., 105478., 106090., 106702., 107314.,
      74016.,  74440.,  74864.,  75288.,  38878.,  39098.,  39318.,  39538.,
      17213.,  17315.,  17417.,  17519.,  36184.,  36396.,  36608.,  36820.,
      56945.,  57275.,  57605.,  57935.,  79528.,  79984.,  80440.,  80896.,
      81352.,  81808.,  82264.,  82720.,  83176.,  83632.,  84088.,  84544.,
      85000.,  85456.,  85912.,  86368.,  66755.,  67109.,  67463.,  67817.,
      46528.,  46772.,  47016.,  47260.,  24287.,  24413.,  24539.,  24665.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1425630.,  1461830.,  1498030.,  1534230.,
      1842268.,  1886668.,  1931068.,  1975468.,  2301634.,  2354554.,
      2407474.,  2460394.,  2430778.,  2485938.,  2541098.,  2596258.,
      2559922.,  2617322.,  2674722.,  2732122.,  2689066.,  2748706.,
      2808346.,  2867986.,  2442460.,  2494540.,  2546620.,  2598700.,
      2138534.,  2182734.,  2226934.,  2271134.,  1776008.,  1812008.,
      1848008.,  1884008.,  1860912.,  1902576.,  1944240.,  1985904.,
      2392500.,  2445540.,  2498580.,  2551620.,  2980328.,  3045128.,
      3109928.,  3174728.,  3625932.,  3702876.,  3779820.,  3856764.,
      3766108.,  3845740.,  3925372.,  4005004.,  3906284.,  3988604.,
      4070924.,  4153244.,  4046460.,  4131468.,  4216476.,  4301484.,
      3621096.,  3695112.,  3769128.,  3843144.,  3122084.,  3184724.,
      3247364.,  3310004.,  2547888.,  2598768.,  2649648.,  2700528.,
      2734296.,  2791864.,  2849432.,  2907000.,  3448890.,  3521970.,
      3595050.,  3668130.,  4238868.,  4327908.,  4416948.,  4505988.,
      5106022.,  5211470.,  5316918.,  5422366.,  5269774.,  5378358.,
      5486942.,  5595526.,  5433526.,  5545246.,  5656966.,  5768686.,
      5597278.,  5712134.,  5826990.,  5941846.,  4978580.,  5078372.,
      5178164.,  5277956.,  4265554.,  4349834.,  4434114.,  4518394.,
      3456408.,  3524728.,  3593048.,  3661368.,  3702936.,  3778424.,
      3853912.,  3929400.,  4622570.,  4718050.,  4813530.,  4909010.,
      5635508.,  5751428.,  5867348.,  5983268.,  6743542.,  6880350.,
      7017158.,  7153966.,  6907294.,  7047238.,  7187182.,  7327126.,
      7071046.,  7214126.,  7357206.,  7500286.,  7234798.,  7381014.,
      7527230.,  7673446.,  6400820.,  6527492.,  6654164.,  6780836.,
      5454594.,  5561274.,  5667954.,  5774634.,  4394328.,  4480568.,
      4566808.,  4653048.,  4671576.,  4764984.,  4858392.,  4951800.,
      5796250.,  5914130.,  6032010.,  6149890.,  7032148.,  7174948.,
      7317748.,  7460548.,  8381062.,  8549230.,  8717398.,  8885566.,
      8544814.,  8716118.,  8887422.,  9058726.,  8708566.,  8883006.,
      9057446.,  9231886.,  8872318.,  9049894.,  9227470.,  9405046.,
      7823060.,  7976612.,  8130164.,  8283716.,  6643634.,  6772714.,
      6901794.,  7030874.,  5332248.,  5436408.,  5540568.,  5644728.,
      5640216.,  5751544.,  5862872.,  5974200.,  6969930.,  7110210.,
      7250490.,  7390770.,  8428788.,  8598468.,  8768148.,  8937828.,
      10018582., 10218110., 10417638., 10617166., 10182334., 10384998.,
      10587662., 10790326., 10346086., 10551886., 10757686., 10963486.,
      10509838., 10718774., 10927710., 11136646., 9245300.,  9425732.,
      9606164.,  9786596.,  7832674.,  7984154.,  8135634.,  8287114.,
      6270168.,  6392248.,  6514328.,  6636408.,  6436912.,  6540016.,
      6643120.,  6746224.,  7862900.,  7992740.,  8122580.,  8252420.,
      9409128.,  9566088.,  9723048.,  9880008.,  11077132., 11261596.,
      11446060., 11630524., 11235228., 11422380., 11609532., 11796684.,
      11393324., 11583164., 11773004., 11962844., 11551420., 11743948.,
      11936476., 12129004., 10070376., 10236552., 10402728., 10568904.,
      8451684.,  8591124.,  8730564.,  8870004.,  6693808.,  6806128.,
      6918448.,  7030768.,  6484616.,  6576936.,  6669256.,  6761576.,
      7808750.,  7924950.,  8041150.,  8157350.,  9239868.,  9380268.,
      9520668.,  9661068.,  10779250., 10944170., 11109090., 11274010.,
      10919146., 11086306., 11253466., 11420626., 11059042., 11228442.,
      11397842., 11567242., 11198938., 11370578., 11542218., 11713858.,
      9687484.,  9835564.,  9983644.,  10131724., 8053174.,  8177374.,
      8301574.,  8425774.,  6294728.,  6394728.,  6494728.,  6594728.,
      5711648.,  5790624.,  5869600.,  5948576.,  6717880.,  6817240.,
      6916600.,  7015960.,  7813488.,  7933488.,  8053488.,  8173488.,
      8999496.,  9140392.,  9281288.,  9422184.,  9108648.,  9251336.,
      9394024.,  9536712.,  9217800.,  9362280.,  9506760.,  9651240.,
      9326952.,  9473224.,  9619496.,  9765768.,  7989104.,  8115248.,
      8241392.,  8367536.,  6547544.,  6653304.,  6759064.,  6864824.,
      5001248.,  5086368.,  5171488.,  5256608.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2344.,    2888.,
      3432.,    3976.,    4520.,    5064.,    5608.,    6152.,    6696.,
      7240.,    7784.,    8328.,    8872.,    9416.,    9960.,    10504.,
      9898.,    10402.,   10906.,   11410.,   8932.,    9332.,    9732.,
      10132.,   5718.,    5950.,    6182.,    6414.,    1340.,    1676.,
      2012.,    2348.,    5896.,    6696.,    7496.,    8296.,    14180.,
      15572.,   16964.,   18356.,   26704.,   28816.,   30928.,   33040.,
      35152.,   37264.,   39376.,   41488.,   43600.,   45712.,   47824.,
      49936.,   52048.,   54160.,   56272.,   58384.,   49748.,   51524.,
      53300.,   55076.,   40648.,   41960.,   43272.,   44584.,   24236.,
      24956.,   25676.,   26396.,   11098.,   11986.,   12874.,   13762.,
      31244.,   33212.,   35180.,   37148.,   61206.,   64446.,   67686.,
      70926.,   101752.,  106456.,  111160.,  115864.,  120568.,  125272.,
      129976.,  134680.,  139384.,  144088.,  148792.,  153496.,  158200.,
      162904.,  167608.,  172312.,  141054.,  144870.,  148686.,  152502.,
      109484.,  112220.,  114956.,  117692.,  62722.,   64186.,   65650.,
      67114.,   36472.,   38168.,   39864.,   41560.,   90640.,   94288.,
      97936.,   101584.,  163528.,  169384.,  175240.,  181096.,  256160.,
      264480.,  272800.,  281120.,  289440.,  297760.,  306080.,  314400.,
      322720.,  331040.,  339360.,  347680.,  356000.,  364320.,  372640.,
      380960.,  305320.,  311944.,  318568.,  325192.,  229776.,  234448.,
      239120.,  243792.,  128344.,  130808.,  133272.,  135736.,  83960.,
      85656.,   87352.,   89048.,   192784.,  196432.,  200080.,  203728.,
      327496.,  333352.,  339208.,  345064.,  489120.,  497440.,  505760.,
      514080.,  522400.,  530720.,  539040.,  547360.,  555680.,  564000.,
      572320.,  580640.,  588960.,  597280.,  605600.,  613920.,  490792.,
      497416.,  504040.,  510664.,  360592.,  365264.,  369936.,  374608.,
      197336.,  199800.,  202264.,  204728.,  131448.,  133144.,  134840.,
      136536.,  294928.,  298576.,  302224.,  305872.,  491464.,  497320.,
      503176.,  509032.,  722080.,  730400.,  738720.,  747040.,  755360.,
      763680.,  772000.,  780320.,  788640.,  796960.,  805280.,  813600.,
      821920.,  830240.,  838560.,  846880.,  676264.,  682888.,  689512.,
      696136.,  491408.,  496080.,  500752.,  505424.,  266328.,  268792.,
      271256.,  273720.,  178936.,  180632.,  182328.,  184024.,  397072.,
      400720.,  404368.,  408016.,  655432.,  661288.,  667144.,  673000.,
      955040.,  963360.,  971680.,  980000.,  988320.,  996640.,  1004960.,
      1013280., 1021600., 1029920., 1038240., 1046560., 1054880., 1063200.,
      1071520., 1079840., 861736.,  868360.,  874984.,  881608.,  622224.,
      626896.,  631568.,  636240.,  335320.,  337784.,  340248.,  342712.,
      218554.,  220210.,  221866.,  223522.,  470732.,  474236.,  477740.,
      481244.,  757302.,  762846.,  768390.,  773934.,  1079032., 1086808.,
      1094584., 1102360., 1110136., 1117912., 1125688., 1133464., 1141240.,
      1149016., 1156792., 1164568., 1172344., 1180120., 1187896., 1195672.,
      938526.,  944646.,  950766.,  956886.,  665708.,  669980.,  674252.,
      678524.,  353122.,  355354.,  357586.,  359818.,  206716.,  208076.,
      209436.,  210796.,  438664.,  441512.,  444360.,  447208.,  696356.,
      700820.,  705284.,  709748.,  980304.,  986512.,  992720.,  998928.,
      1005136., 1011344., 1017552., 1023760., 1029968., 1036176., 1042384.,
      1048592., 1054800., 1061008., 1067216., 1073424., 834836.,  839684.,
      844532.,  849380.,  586056.,  589416.,  592776.,  596136.,  307948.,
      309692.,  311436.,  313180.,  136254.,  137062.,  137870.,  138678.,
      286532.,  288212.,  289892.,  291572.,  451090.,  453706.,  456322.,
      458938.,  630184.,  633800.,  637416.,  641032.,  644648.,  648264.,
      651880.,  655496.,  659112.,  662728.,  666344.,  669960.,  673576.,
      677192.,  680808.,  684424.,  529162.,  531970.,  534778.,  537586.,
      368932.,  370868.,  372804.,  374740.,  192630.,  193630.,  194630.,
      195630.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,   2610.,   3458.,   4424.,   4830.,   4550.,   4140.,   3596.,
      3840.,   5225.,   6790.,   8540.,   9170.,   8485.,   7600.,   6510.,
      6850.,   9185.,   11781.,  14644.,  15547.,  14211.,  12590.,  10678.,
      11130.,  14770.,  18767.,  23128.,  24353.,  22064.,  19390.,  16324.,
      16394.,  21490.,  26999.,  32928.,  34153.,  30632.,  26670.,  22260.,
      20998.,  27215.,  33831.,  40852.,  42049.,  37341.,  32210.,  26650.,
      23660.,  30475.,  37660.,  45220.,  46340.,  40915.,  35100.,  28890.,
      24156.,  30990.,  38150.,  45640.,  46634.,  41018.,  35060.,  28756.,
      15188.,  19890.,  24962.,  30408.,  30814.,  27590.,  23980.,  19980.,
      24960.,  32425.,  40390.,  48860.,  49490.,  44005.,  38000.,  31470.,
      37570.,  48545.,  60165.,  72436.,  73339.,  64899.,  55790.,  46006.,
      53242.,  68530.,  84623.,  101528., 102753., 90608.,  77630.,  63812.,
      58506.,  75250.,  92855.,  111328., 112553., 99176.,  84910.,  69748.,
      62470.,  80015.,  98343.,  117460., 118657., 104157., 88850.,  72730.,
      62700.,  80075.,  98140.,  116900., 118020., 103315., 87900.,  71770.,
      58972.,  75150.,  91910.,  109256., 110250., 96314.,  81780.,  66644.,
      28500.,  37170.,  46466.,  56392.,  56798.,  50630.,  43820.,  36364.,
      46080.,  59625.,  73990.,  89180.,  89810.,  79525.,  68400.,  56430.,
      68290.,  87905.,  108549., 130228., 131131., 115587., 98990.,  81334.,
      95354.,  122290., 150479., 179928., 181153., 159152., 135870., 111300.,
      100618., 129010., 158711., 189728., 190953., 167720., 143150., 117236.,
      103942., 132815., 162855., 194068., 195265., 170973., 145490., 118810.,
      101740., 129675., 158620., 188580., 189700., 165715., 140700., 114650.,
      93788.,  119310., 145670., 172872., 173866., 151610., 128500., 104532.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   39.,   105.,  115.,  125.,
      135.,  145.,  155.,  98.,   67.,   175.,  185.,  195.,  205.,  215.,
      225.,  140.,  95.,   245.,  255.,  265.,  275.,  285.,  295.,  182.,
      123.,  315.,  325.,  335.,  345.,  355.,  365.,  224.,  151.,  385.,
      395.,  405.,  415.,  425.,  435.,  266.,  129.,  304.,  311.,  318.,
      325.,  332.,  339.,  196.,  5.,    16.,   27.,   38.,   49.,   60.,
      71.,   42.,   47.,   115.,  141.,  167.,  193.,  219.,  245.,  140.,
      131.,  297.,  323.,  349.,  375.,  401.,  427.,  238.,  215.,  479.,
      505.,  531.,  557.,  583.,  609.,  336.,  299.,  661.,  687.,  713.,
      739.,  765.,  791.,  434.,  383.,  843.,  869.,  895.,  921.,  947.,
      973.,  532.,  467.,  1025., 1051., 1077., 1103., 1129., 1155., 630.,
      301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,  9.,    28.,
      47.,   66.,   85.,   104.,  123.,  70.,   83.,   195.,  237.,  279.,
      321.,  363.,  405.,  224.,  223.,  489.,  531.,  573.,  615.,  657.,
      699.,  378.,  363.,  783.,  825.,  867.,  909.,  951.,  993.,  532.,
      503.,  1077., 1119., 1161., 1203., 1245., 1287., 686.,  643.,  1371.,
      1413., 1455., 1497., 1539., 1581., 840.,  783.,  1665., 1707., 1749.,
      1791., 1833., 1875., 994.,  473.,  1000., 1023., 1046., 1069., 1092.,
      1115., 588.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,   19760.,   26272.,   33712.,   36904.,   34864.,   31800.,
      27680.,   29340.,   40025.,   52130.,   65695.,   70665.,   65510.,
      58775.,   50420.,   52784.,   70900.,   91080.,   113372.,  120512.,
      110304.,  97840.,   83072.,   86268.,   114625.,  145810.,  179879.,
      189581.,  171934.,  151235.,  127428.,  127932.,  167825.,  210994.,
      257495.,  267197.,  239806.,  208915.,  174468.,  164864.,  213760.,
      265824.,  321104.,  330596.,  293688.,  253420.,  209744.,  186380.,
      240125.,  296810.,  356475.,  365365.,  322670.,  276875.,  227940.,
      190688.,  244680.,  301264.,  360472.,  368368.,  324064.,  277040.,
      227264.,  118592.,  155440.,  195232.,  238000.,  241192.,  216112.,
      187960.,  156704.,  195740.,  254425.,  317090.,  383775.,  388745.,
      345830.,  298775.,  247540.,  295472.,  381940.,  473544.,  570332.,
      577472.,  511200.,  439600.,  362624.,  419580.,  540225.,  667282.,
      800807.,  810509.,  714910.,  612675.,  503748.,  461244.,  593425.,
      732466.,  878423.,  888125.,  782782.,  670355.,  550788.,  493568.,
      632320.,  777312.,  928592.,  938084.,  823608.,  702700.,  575312.,
      496140.,  633725.,  776810.,  925435.,  934325.,  818030.,  696075.,
      568420.,  467168.,  595400.,  728272.,  865816.,  873712.,  763360.,
      648240.,  528320.,  223040.,  291120.,  364192.,  442288.,  445480.,
      397360.,  344120.,  285728.,  362140.,  468825.,  582050.,  701855.,
      706825.,  626150.,  538775.,  444660.,  538160.,  692980.,  856008.,
      1027292., 1034432., 912096.,  781360.,  642176.,  752892.,  965825.,
      1188754., 1421735., 1431437., 1257886., 1074115., 880068.,  794556.,
      1019025., 1253938., 1499351., 1509053., 1325758., 1131795., 927108.,
      822272.,  1050880., 1288800., 1536080., 1545572., 1353528., 1151980.,
      940880.,  805900.,  1027325., 1256810., 1494395., 1503285., 1313390.,
      1115275., 908900.,  743648.,  946120.,  1155280., 1371160., 1379056.,
      1202656., 1019440., 829376.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,   102.,  122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,  584.,  396.,   260.,   728.,
      800.,   872.,   944.,   1016.,  1088., 704.,  456.,   1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1012., 652.,  1736.,  1808.,  1880.,
      1952.,  2024.,  2096.,  1320.,  848.,  2240., 2312.,  2384.,  2456.,
      2528.,  2600.,  1628.,  1044.,  2744., 2816., 2888.,  2960.,  3032.,
      3104.,  1936.,  941.,   2246.,  2298., 2350., 2402.,  2454.,  2506.,
      1463.,  29.,    102.,   186.,   270.,  354.,  438.,   522.,   311.,
      336.,   832.,   1032.,  1232.,  1432., 1632., 1832.,  1052.,  980.,
      2232.,  2432.,  2632.,  2832.,  3032., 3232., 1808.,  1624.,  3632.,
      3832.,  4032.,  4232.,  4432.,  4632., 2564., 2268.,  5032.,  5232.,
      5432.,  5632.,  5832.,  6032.,  3320., 2912., 6432.,  6632.,  6832.,
      7032.,  7232.,  7432.,  4076.,  3556., 7832., 8032.,  8232.,  8432.,
      8632.,  8832.,  4832.,  2309.,  5014., 5130., 5246.,  5362.,  5478.,
      5594.,  3023.,  53.,    182.,   330.,  478.,  626.,   774.,   922.,
      527.,   608.,   1440.,  1768.,  2096., 2424., 2752.,  3080.,  1708.,
      1700.,  3736.,  4064.,  4392.,  4720., 5048., 5376.,  2912.,  2792.,
      6032.,  6360.,  6688.,  7016.,  7344., 7672., 4116.,  3884.,  8328.,
      8656.,  8984.,  9312.,  9640.,  9968., 5320., 4976.,  10624., 10952.,
      11280., 11608., 11936., 12264., 6524., 6068., 12920., 13248., 13576.,
      13904., 14232., 14560., 7728.,  3677., 7782., 7962.,  8142.,  8322.,
      8502.,  8682.,  4583.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,   153640.,   204656.,   263032.,   288344.,   272816.,
      249160.,   217120.,   229240.,   313150.,   408340.,   515130.,
      554610.,   514660.,   462150.,   396760.,   414256.,   556940.,
      716040.,   891940.,   948724.,   868968.,   771260.,   655216.,
      679112.,   902930.,   1149260.,  1418550.,  1495774.,  1357244.,
      1194410.,  1006824.,  1010632.,  1326290.,  1668044.,  2036342.,
      2113566.,  1897532.,  1653610.,  1381352.,  1306480.,  1694300.,
      2107368.,  2546068.,  2621668.,  2329416.,  2010380.,  1664176.,
      1479480.,  1906350.,  2356660.,  2830730.,  2901570.,  2562820.,
      2199350.,  1810840.,  1515296.,  1944520.,  2394416.,  2865240.,
      2928184.,  2576240.,  2202600.,  1807008.,  937120.,   1228840.,
      1544048.,  1883000.,  1908312.,  1710512.,  1488200.,  1241120.,
      1550200.,  2015550.,  2512660.,  3041850.,  3081330.,  2741860.,
      2369350.,  1963480.,  2343472.,  3029900.,  3757320.,  4526116.,
      4582900.,  4057704.,  3489980.,  2879344.,  3331272.,  4289810.,
      5299532.,  6360886.,  6438110.,  5679548.,  4868010.,  4003048.,
      3662792.,  4713170.,  5818316.,  6978678.,  7055902.,  6219836.,
      5327210.,  4377576.,  3923824.,  5027420.,  6180840.,  7384468.,
      7460068.,  6550344.,  5589260.,  4576432.,  3947320.,  5042350.,
      6181300.,  7364490.,  7435330.,  6510340.,  5540150.,  4524440.,
      3718944.,  4740040.,  5798192.,  6893656.,  6956600.,  6078320.,
      5161960.,  4207264.,  1764512.,  2304040.,  2883440.,  3502968.,
      3528280.,  3148208.,  2727240.,  2265120.,  2871160.,  3717950.,
      4616980.,  5568570.,  5608050.,  4969060.,  4276550.,  3530200.,
      4272688.,  5502860.,  6798600.,  8160292.,  8217076.,  7246440.,
      6208700.,  5103472.,  5983432.,  7676690.,  9449804.,  11303222.,
      11380446., 10001852., 8541610.,  6999272.,  6314952.,  8100050.,
      9968588.,  11921014., 11998238., 10542140., 9000810.,  7373800.,
      6541168.,  8360540.,  10254312., 12222868., 12298468., 10771272.,
      9168140.,  7488688.,  6415160.,  8178350.,  10005940., 11898250.,
      11969090., 10457860., 8880950.,  7238040.,  5922592.,  7535560.,
      9201968.,  10922072., 10985016., 9580400.,  8121320.,  6607520.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,    284.,    428.,    572.,    716.,    860.,    694.,
      420.,   1576.,   2120.,   2664.,   3208.,   3752.,   4296.,   2964.,
      1876.,  5384.,   5928.,   6472.,   7016.,   7560.,   8104.,   5316.,
      3332.,  9192.,   9736.,   10280.,  10824.,  11368.,  11912.,  7668.,
      4788.,  13000.,  13544.,  14088.,  14632.,  15176.,  15720.,  10020.,
      6244.,  16808.,  17352.,  17896.,  18440.,  18984.,  19528.,  12372.,
      7700.,  20616.,  21160.,  21704.,  22248.,  22792.,  23336.,  14724.,
      7166.,  17228.,  17628.,  18028.,  18428.,  18828.,  19228.,  11286.,
      190.,   716.,    1372.,   2028.,   2684.,   3340.,   3996.,   2390.,
      2532.,  6312.,   7880.,   9448.,   11016.,  12584.,  14152.,  8148.,
      7572.,  17288.,  18856.,  20424.,  21992.,  23560.,  25128.,  14084.,
      12612., 28264.,  29832.,  31400.,  32968.,  34536.,  36104.,  20020.,
      17652., 39240.,  40808.,  42376.,  43944.,  45512.,  47080.,  25956.,
      22692., 50216.,  51784.,  53352.,  54920.,  56488.,  58056.,  31892.,
      27732., 61192.,  62760.,  64328.,  65896.,  67464.,  69032.,  37828.,
      18078., 39308.,  40220.,  41132.,  42044.,  42956.,  43868.,  23734.,
      350.,   1292.,   2460.,   3628.,   4796.,   5964.,   7132.,   4086.,
      4644.,  11048.,  13640.,  16232.,  18824.,  21416.,  24008.,  13332.,
      13268., 29192.,  31784.,  34376.,  36968.,  39560.,  42152.,  22852.,
      21892., 47336.,  49928.,  52520.,  55112.,  57704.,  60296.,  32372.,
      30516., 65480.,  68072.,  70664.,  73256.,  75848.,  78440.,  41892.,
      39140., 83624.,  86216.,  88808.,  91400.,  93992.,  96584.,  51412.,
      47764., 101768., 104360., 106952., 109544., 112136., 114728., 60932.,
      28990., 61388.,  62812.,  64236.,  65660.,  67084.,  68508.,  36182.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,   3752.,   4920.,   5220.,   6544.,   6916.,   8400.,   8848.,
      9184.,   9660.,   8680.,   9100.,   7920.,   8280.,   6896.,   7192.,
      7310.,   7680.,   9975.,   10450.,  12995.,  13580.,  16380.,  17080.,
      17605.,  18340.,  16325.,  16970.,  14650.,  15200.,  12570.,  13020.,
      13160.,  13700.,  17680.,  18370.,  22716.,  23562.,  28280.,  29288.,
      30044.,  31094.,  27504.,  28422.,  24400.,  25180.,  20720.,  21356.,
      21518.,  22260.,  28595.,  29540.,  36379.,  37534.,  44884.,  46256.,
      47285.,  48706.,  42889.,  44128.,  37730.,  38780.,  31794.,  32648.,
      31822.,  32788.,  41755.,  42980.,  52507.,  53998.,  64092.,  65856.,
      66493.,  68306.,  59689.,  61264.,  52010.,  53340.,  43442.,  44520.,
      41072.,  41996.,  53260.,  54430.,  66240.,  67662.,  80024.,  81704.,
      82376.,  84098.,  73188.,  74682.,  63160.,  64420.,  52280.,  53300.,
      46470.,  47320.,  59875.,  60950.,  74015.,  75320.,  88900.,  90440.,
      91105.,  92680.,  80465.,  81830.,  69050.,  70200.,  56850.,  57780.,
      47568.,  48312.,  61040.,  61980.,  75160.,  76300.,  89936.,  91280.,
      91896.,  93268.,  80848.,  82036.,  69120.,  70120.,  56704.,  57512.,
      29120.,  30376.,  38200.,  39780.,  48016.,  49924.,  58576.,  60816.,
      59360.,  61628.,  53224.,  55180.,  46320.,  47960.,  38640.,  39960.,
      48270.,  49920.,  62775.,  64850.,  78275.,  80780.,  94780.,  97720.,
      96005.,  98980.,  85445.,  88010.,  73850.,  76000.,  61210.,  62940.,
      73064.,  75140.,  94480.,  97090.,  117180., 120330., 141176., 144872.,
      142940., 146678., 126576., 129798., 108880., 111580., 89840.,  92012.,
      103950., 106484., 133875., 137060., 165403., 169246., 198548., 203056.,
      200949., 205506., 177289., 181216., 151970., 155260., 124978., 127624.,
      114254., 117012., 147035., 150500., 181531., 185710., 217756., 222656.,
      220157., 225106., 194089., 198352., 166250., 169820., 136626., 139496.,
      122480., 124940., 156940., 160030., 192960., 196686., 230552., 234920.,
      232904., 237314., 204516., 208314., 174520., 177700., 142904., 145460.,
      123270., 125400., 157475., 160150., 193055., 196280., 230020., 233800.,
      232225., 236040., 203345., 206630., 173050., 175800., 141330., 143540.,
      116176., 117944., 148080., 150300., 181144., 183820., 215376., 218512.,
      217336., 220500., 189904., 192628., 161280., 163560., 131456., 133288.,
      54720.,  57000.,  71480.,  74340.,  89488.,  92932.,  108752., 112784.,
      109536., 113596., 97768.,  101260., 84720.,  87640.,  70384.,  72728.,
      89230.,  92160.,  115575., 119250., 143555., 147980., 173180., 178360.,
      174405., 179620., 154565., 159050., 133050., 136800., 109850., 112860.,
      132968., 136580., 171280., 175810., 211644., 217098., 254072., 260456.,
      255836., 262262., 225648., 231174., 193360., 197980., 158960., 162668.,
      186382., 190708., 239155., 244580., 294427., 300958., 352212., 359856.,
      354613., 362306., 311689., 318304., 266210., 271740., 218162., 222600.,
      196686., 201236., 252315., 258020., 310555., 317422., 371420., 379456.,
      373821., 381906., 328489., 335440., 280490., 286300., 229810., 234472.,
      203888., 207884., 260620., 265630., 319680., 325710., 381080., 388136.,
      383432., 390530., 335844., 341946., 285880., 290980., 233528., 237620.,
      200070., 203480., 255075., 259350., 312095., 317240., 371140., 377160.,
      373345., 379400., 326225., 331430., 277050., 281400., 225810., 229300.,
      184784., 187576., 235120., 238620., 287128., 291340., 340816., 345744.,
      342776., 347732., 298960., 303220., 253440., 257000., 206208., 209064.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    11.,   14.,   17.,   20.,   23.,   26.,
      29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,
      80.,   90.,   100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,
      106.,  112.,  74.,   78.,   200.,  210.,  220.,  230.,  240.,  250.,
      260.,  270.,  280.,  290.,  300.,  310.,  190.,  196.,  130.,  134.,
      340.,  350.,  360.,  370.,  380.,  390.,  400.,  410.,  420.,  430.,
      440.,  450.,  274.,  280.,  186.,  190.,  480.,  490.,  500.,  510.,
      520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  358.,  364.,
      242.,  246.,  620.,  630.,  640.,  650.,  660.,  670.,  680.,  690.,
      700.,  710.,  720.,  730.,  442.,  448.,  298.,  302.,  760.,  770.,
      780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,  870.,
      526.,  532.,  255.,  258.,  601.,  608.,  615.,  622.,  629.,  636.,
      643.,  650.,  657.,  664.,  671.,  678.,  388.,  392.,  5.,    10.,
      21.,   32.,   43.,   54.,   65.,   76.,   87.,   98.,   109.,  120.,
      131.,  142.,  78.,   84.,   82.,   94.,   204.,  230.,  256.,  282.,
      308.,  334.,  360.,  386.,  412.,  438.,  464.,  490.,  266.,  280.,
      250.,  262.,  568.,  594.,  620.,  646.,  672.,  698.,  724.,  750.,
      776.,  802.,  828.,  854.,  462.,  476.,  418.,  430.,  932.,  958.,
      984.,  1010., 1036., 1062., 1088., 1114., 1140., 1166., 1192., 1218.,
      658.,  672.,  586.,  598.,  1296., 1322., 1348., 1374., 1400., 1426.,
      1452., 1478., 1504., 1530., 1556., 1582., 854.,  868.,  754.,  766.,
      1660., 1686., 1712., 1738., 1764., 1790., 1816., 1842., 1868., 1894.,
      1920., 1946., 1050., 1064., 922.,  934.,  2024., 2050., 2076., 2102.,
      2128., 2154., 2180., 2206., 2232., 2258., 2284., 2310., 1246., 1260.,
      595.,  602.,  1289., 1304., 1319., 1334., 1349., 1364., 1379., 1394.,
      1409., 1424., 1439., 1454., 776.,  784.,  9.,    18.,   37.,   56.,
      75.,   94.,   113.,  132.,  151.,  170.,  189.,  208.,  227.,  246.,
      130.,  140.,  146.,  166.,  348.,  390.,  432.,  474.,  516.,  558.,
      600.,  642.,  684.,  726.,  768.,  810.,  426.,  448.,  426.,  446.,
      936.,  978.,  1020., 1062., 1104., 1146., 1188., 1230., 1272., 1314.,
      1356., 1398., 734.,  756.,  706.,  726.,  1524., 1566., 1608., 1650.,
      1692., 1734., 1776., 1818., 1860., 1902., 1944., 1986., 1042., 1064.,
      986.,  1006., 2112., 2154., 2196., 2238., 2280., 2322., 2364., 2406.,
      2448., 2490., 2532., 2574., 1350., 1372., 1266., 1286., 2700., 2742.,
      2784., 2826., 2868., 2910., 2952., 2994., 3036., 3078., 3120., 3162.,
      1658., 1680., 1546., 1566., 3288., 3330., 3372., 3414., 3456., 3498.,
      3540., 3582., 3624., 3666., 3708., 3750., 1966., 1988., 935.,  946.,
      1977., 2000., 2023., 2046., 2069., 2092., 2115., 2138., 2161., 2184.,
      2207., 2230., 1164., 1176.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,   28736.,   37740.,   40100.,   50336.,   53264.,   64764.,
      68292.,   70980.,   74732.,   67232.,   70544.,   61460.,   64300.,
      53600.,   55936.,   56480.,   59400.,   77225.,   80975.,   100780.,
      105400.,  127225.,  132755.,  136955.,  142765.,  127180.,  132280.,
      114275.,  118625.,  98160.,   101720.,  102352.,  106624.,  137690.,
      143150.,  177120.,  183816.,  220738.,  228718.,  234766.,  243082.,
      215136.,  222408.,  191030.,  197210.,  162352.,  167392.,  168112.,
      173992.,  223615.,  231105.,  284732.,  293888.,  351575.,  362453.,
      370685.,  381955.,  336476.,  346304.,  296205.,  304535.,  249760.,
      256536.,  250096.,  257768.,  328335.,  338065.,  413084.,  424928.,
      504455.,  518469.,  523565.,  537971.,  470204.,  482720.,  409885.,
      420455.,  342496.,  351064.,  324208.,  331552.,  420530.,  429830.,
      523152.,  534456.,  632170.,  645526.,  650902.,  664594.,  578448.,
      590328.,  499310.,  509330.,  413392.,  421504.,  367680.,  374440.,
      473825.,  482375.,  585820.,  596200.,  703745.,  715995.,  721315.,
      733845.,  637180.,  648040.,  546875.,  556025.,  450320.,  457720.,
      376928.,  382848.,  483740.,  491220.,  595712.,  604784.,  712908.,
      723604.,  728532.,  739452.,  641024.,  650480.,  548100.,  556060.,
      449696.,  456128.,  229664.,  239680.,  301420.,  314020.,  379040.,
      394256.,  462588.,  480452.,  468804.,  486892.,  420512.,  436112.,
      366100.,  379180.,  305504.,  316032.,  381600.,  394760.,  496425.,
      512975.,  619180.,  639160.,  749945.,  773395.,  759675.,  783405.,
      676300.,  696760.,  584675.,  601825.,  484720.,  498520.,  578512.,
      595072.,  748250.,  769070.,  928224.,  953352.,  1118530., 1148014.,
      1132558., 1162378., 1003104., 1028808., 863030.,  884570.,  712240.,
      729568.,  823984.,  844200.,  1061375., 1086785., 1311548., 1342208.,
      1574615., 1610581., 1593725., 1630083., 1406300., 1437632., 1205645.,
      1231895., 991648.,  1012760., 905968.,  927976.,  1166095., 1193745.,
      1439900., 1473248., 1727495., 1766597., 1746605., 1786099., 1540028.,
      1574048., 1319325., 1347815., 1084384., 1107288., 972400.,  992032.,
      1246130., 1270790., 1532304., 1562040., 1831018., 1865878., 1849750.,
      1884946., 1624464., 1654776., 1386350., 1411730., 1135312., 1155712.,
      979520.,  996520.,  1251425., 1272775., 1534300., 1560040., 1828225.,
      1858395., 1845795., 1876245., 1616380., 1642600., 1375675., 1397625.,
      1123600., 1141240., 923744.,  937856.,  1177500., 1195220., 1440512.,
      1461872., 1712844., 1737876., 1728468., 1753724., 1510400., 1532144.,
      1282820., 1301020., 1045664., 1060288., 432416.,  450624.,  565100.,
      587940.,  707744.,  735248.,  860412.,  892612.,  866628.,  899052.,
      773792.,  801680.,  670740.,  694060.,  557408.,  576128.,  706720.,
      730120.,  915625.,  944975.,  1137580., 1172920., 1372665., 1414035.,
      1382395., 1424045., 1225420., 1261240., 1055075., 1085025., 871280.,
      895320.,  1054672., 1083520., 1358810., 1394990., 1679328., 1722888.,
      2016322., 2067310., 2030350., 2081674., 1791072., 1835208., 1535030.,
      1571930., 1262128., 1291744., 1479856., 1514408., 1899135., 1942465.,
      2338364., 2390528., 2797655., 2858709., 2816765., 2878211., 2476124.,
      2528960., 2115085., 2159255., 1733536., 1768984., 1561840., 1598184.,
      2003855., 2049425., 2466716., 2521568., 2950535., 3014725., 2969645.,
      3034227., 2609852., 2665376., 2228765., 2275175., 1826272., 1863512.,
      1620592., 1652512., 2071730., 2111750., 2541456., 2589624., 3029866.,
      3086230., 3048598., 3105298., 2670480., 2719224., 2273390., 2314130.,
      1857232., 1889920., 1591360., 1618600., 2029025., 2063175., 2482780.,
      2523880., 2952705., 3000795., 2970275., 3018645., 2595580., 2637160.,
      2204475., 2239225., 1796880., 1824760., 1470560., 1492864., 1871260.,
      1899220., 2285312., 2318960., 2712780., 2752148., 2728404., 2767996.,
      2379776., 2413808., 2017540., 2045980., 1641632., 1664448.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    68.,    88.,    108.,   128.,   148.,
      168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,
      392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,
      1040.,  1112.,  1184.,  758.,   802.,   498.,   526.,   1400.,  1472.,
      1544.,  1616.,  1688.,  1760.,  1832.,  1904.,  1976.,  2048.,  2120.,
      2192.,  1374.,  1418.,  890.,   918.,   2408.,  2480.,  2552.,  2624.,
      2696.,  2768.,  2840.,  2912.,  2984.,  3056.,  3128.,  3200.,  1990.,
      2034.,  1282.,  1310.,  3416.,  3488.,  3560.,  3632.,  3704.,  3776.,
      3848.,  3920.,  3992.,  4064.,  4136.,  4208.,  2606.,  2650.,  1674.,
      1702.,  4424.,  4496.,  4568.,  4640.,  4712.,  4784.,  4856.,  4928.,
      5000.,  5072.,  5144.,  5216.,  3222.,  3266.,  2066.,  2094.,  5432.,
      5504.,  5576.,  5648.,  5720.,  5792.,  5864.,  5936.,  6008.,  6080.,
      6152.,  6224.,  3838.,  3882.,  1865.,  1887.,  4452.,  4504.,  4556.,
      4608.,  4660.,  4712.,  4764.,  4816.,  4868.,  4920.,  4972.,  5024.,
      2903.,  2933.,  29.,    67.,    140.,   224.,   308.,   392.,   476.,
      560.,   644.,   728.,   812.,   896.,   980.,   1064.,  587.,   633.,
      602.,   694.,   1512.,  1712.,  1912.,  2112.,  2312.,  2512.,  2712.,
      2912.,  3112.,  3312.,  3512.,  3712.,  2022.,  2130.,  1890.,  1982.,
      4312.,  4512.,  4712.,  4912.,  5112.,  5312.,  5512.,  5712.,  5912.,
      6112.,  6312.,  6512.,  3534.,  3642.,  3178.,  3270.,  7112.,  7312.,
      7512.,  7712.,  7912.,  8112.,  8312.,  8512.,  8712.,  8912.,  9112.,
      9312.,  5046.,  5154.,  4466.,  4558.,  9912.,  10112., 10312., 10512.,
      10712., 10912., 11112., 11312., 11512., 11712., 11912., 12112., 6558.,
      6666.,  5754.,  5846.,  12712., 12912., 13112., 13312., 13512., 13712.,
      13912., 14112., 14312., 14512., 14712., 14912., 8070.,  8178.,  7042.,
      7134.,  15512., 15712., 15912., 16112., 16312., 16512., 16712., 16912.,
      17112., 17312., 17512., 17712., 9582.,  9690.,  4577.,  4631.,  9940.,
      10056., 10172., 10288., 10404., 10520., 10636., 10752., 10868., 10984.,
      11100., 11216., 5999.,  6061.,  53.,    123.,   252.,   400.,   548.,
      696.,   844.,   992.,   1140.,  1288.,  1436.,  1584.,  1732.,  1880.,
      995.,   1073.,  1098.,  1254.,  2632.,  2960.,  3288.,  3616.,  3944.,
      4272.,  4600.,  4928.,  5256.,  5584.,  5912.,  6240.,  3286.,  3458.,
      3282.,  3438.,  7224.,  7552.,  7880.,  8208.,  8536.,  8864.,  9192.,
      9520.,  9848.,  10176., 10504., 10832., 5694.,  5866.,  5466.,  5622.,
      11816., 12144., 12472., 12800., 13128., 13456., 13784., 14112., 14440.,
      14768., 15096., 15424., 8102.,  8274.,  7650.,  7806.,  16408., 16736.,
      17064., 17392., 17720., 18048., 18376., 18704., 19032., 19360., 19688.,
      20016., 10510., 10682., 9834.,  9990.,  21000., 21328., 21656., 21984.,
      22312., 22640., 22968., 23296., 23624., 23952., 24280., 24608., 12918.,
      13090., 12018., 12174., 25592., 25920., 26248., 26576., 26904., 27232.,
      27560., 27888., 28216., 28544., 28872., 29200., 15326., 15498., 7289.,
      7375.,  15428., 15608., 15788., 15968., 16148., 16328., 16508., 16688.,
      16868., 17048., 17228., 17408., 9095.,  9189.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,   224800.,   295480.,   314200.,   394672.,   417904.,
      508424.,   536424.,   557928.,   587720.,   529072.,   555376.,
      484120.,   506680.,   422560.,   441120.,   443880.,   467080.,
      607550.,   637350.,   793580.,   830300.,   1002610.,  1046570.,
      1080170.,  1126370.,  1003820.,  1044380.,  902550.,   937150.,
      775720.,   804040.,   807152.,   841136.,   1086580.,  1130020.,
      1398600.,  1451880.,  1743980.,  1807484.,  1855868.,  1922060.,
      1701576.,  1759464.,  1511620.,  1560820.,  1285232.,  1325360.,
      1328824.,  1375640.,  1768410.,  1828050.,  2252740.,  2325652.,
      2782710.,  2869342.,  2935198.,  3024966.,  2665348.,  2743636.,
      2347170.,  2413530.,  1979768.,  2033752.,  1982904.,  2044056.,
      2603930.,  2681490.,  3276868.,  3371284.,  4002614.,  4114334.,
      4155102.,  4269958.,  3732484.,  3832276.,  3254370.,  3338650.,
      2719864.,  2788184.,  2576240.,  2634800.,  3342100.,  3416260.,
      4158216.,  4248360.,  5025356.,  5131868.,  5174876.,  5284076.,
      4599432.,  4694184.,  3970660.,  4050580.,  3287792.,  3352496.,
      2925160.,  2979080.,  3769950.,  3838150.,  4661420.,  4744220.,
      5600210.,  5697930.,  5740490.,  5840450.,  5071340.,  5157980.,
      4352950.,  4425950.,  3584680.,  3643720.,  3000992.,  3048224.,
      3851640.,  3911320.,  4743472.,  4815856.,  5677000.,  5762344.,
      5801768.,  5888904.,  5105200.,  5180656.,  4365400.,  4428920.,
      3581856.,  3633184.,  1824160.,  1904160.,  2394680.,  2495320.,
      3012016.,  3133552.,  3676680.,  3819368.,  3726184.,  3870664.,
      3343024.,  3467632.,  2911000.,  3015480.,  2429600.,  2513696.,
      3034600.,  3139720.,  3948350.,  4080550.,  4925420.,  5085020.,
      5966450.,  6153770.,  6044010.,  6233570.,  5381420.,  5544860.,
      4652950.,  4789950.,  3857960.,  3968200.,  4604144.,  4736432.,
      5955700.,  6122020.,  7389000.,  7589736.,  8904812.,  9140348.,
      9016700.,  9254924.,  7986888.,  8192232.,  6872260.,  7044340.,
      5672048.,  5810480.,  6561464.,  6722968.,  8452570.,  8655570.,
      10445764., 10690708., 12541942., 12829278., 12694430., 12984902.,
      11202436., 11452756., 9604770.,  9814490.,  7900536.,  8069208.,
      7215544.,  7391384.,  9288090.,  9509010.,  11469892., 11736340.,
      13761846., 14074270., 13914334., 14229894., 12269572., 12541396.,
      10511970., 10739610., 8640632.,  8823640.,  7749488.,  7906352.,
      9931540.,  10128580., 12213000., 12450600., 14594636., 14873180.,
      14744156., 15025388., 12949128., 13191336., 11051620., 11254420.,
      9050864.,  9213872.,  7809640.,  7945480.,  9977950.,  10148550.,
      12233900., 12439580., 14578130., 14819210., 14718410., 14961730.,
      12889580., 13099100., 10970550., 11145950., 8960680.,  9101640.,
      7367328.,  7480096.,  9391480.,  9533080.,  11489584., 11660272.,
      13662152., 13862184., 13786920., 13988744., 12047920., 12221680.,
      10232920., 10378360., 8341408.,  8458272.,  210336.,   224800.,
      295480.,   314200.,   394672.,   417904.,   508424.,   536424.,
      557928.,   587720.,   529072.,   555376.,   484120.,   506680.,
      422560.,   441120.,   443880.,   467080.,   607550.,   637350.,
      793580.,   830300.,   1002610.,  1046570.,  1080170.,  1126370.,
      1003820.,  1044380.,  902550.,   937150.,   775720.,   804040.,
      807152.,   841136.,   1086580.,  1130020.,  1398600.,  1451880.,
      1743980.,  1807484.,  1855868.,  1922060.,  1701576.,  1759464.,
      1511620.,  1560820.,  1285232.,  1325360.,  1328824.,  1375640.,
      1768410.,  1828050.,  2252740.,  2325652.,  2782710.,  2869342.,
      2935198.,  3024966.,  2665348.,  2743636.,  2347170.,  2413530.,
      1979768.,  2033752.,  1982904.,  2044056.,  2603930.,  2681490.,
      3276868.,  3371284.,  4002614.,  4114334.,  4155102.,  4269958.,
      3732484.,  3832276.,  3254370.,  3338650.,  2719864.,  2788184.,
      2576240.,  2634800.,  3342100.,  3416260.,  4158216.,  4248360.,
      5025356.,  5131868.,  5174876.,  5284076.,  4599432.,  4694184.,
      3970660.,  4050580.,  3287792.,  3352496.,  2925160.,  2979080.,
      3769950.,  3838150.,  4661420.,  4744220.,  5600210.,  5697930.,
      5740490.,  5840450.,  5071340.,  5157980.,  4352950.,  4425950.,
      3584680.,  3643720.,  3000992.,  3048224.,  3851640.,  3911320.,
      4743472.,  4815856.,  5677000.,  5762344.,  5801768.,  5888904.,
      5105200.,  5180656.,  4365400.,  4428920.,  3581856.,  3633184.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    468.,    612.,    756.,    900.,
      1044.,   1188.,   1332.,   1476.,   1620.,   1764.,   1318.,   1422.,
      700.,    908.,    2792.,   3336.,   3880.,   4424.,   4968.,   5512.,
      6056.,   6600.,   7144.,   7688.,   8232.,   8776.,   5708.,   6044.,
      3612.,   3820.,   10408.,  10952.,  11496.,  12040.,  12584.,  13128.,
      13672.,  14216.,  14760.,  15304.,  15848.,  16392.,  10412.,  10748.,
      6524.,   6732.,   18024.,  18568.,  19112.,  19656.,  20200.,  20744.,
      21288.,  21832.,  22376.,  22920.,  23464.,  24008.,  15116.,  15452.,
      9436.,   9644.,   25640.,  26184.,  26728.,  27272.,  27816.,  28360.,
      28904.,  29448.,  29992.,  30536.,  31080.,  31624.,  19820.,  20156.,
      12348.,  12556.,  33256.,  33800.,  34344.,  34888.,  35432.,  35976.,
      36520.,  37064.,  37608.,  38152.,  38696.,  39240.,  24524.,  24860.,
      15260.,  15468.,  40872.,  41416.,  41960.,  42504.,  43048.,  43592.,
      44136.,  44680.,  45224.,  45768.,  46312.,  46856.,  29228.,  29564.,
      14222.,  14390.,  34196.,  34596.,  34996.,  35396.,  35796.,  36196.,
      36596.,  36996.,  37396.,  37796.,  38196.,  38596.,  22422.,  22654.,
      190.,    486.,    1012.,   1668.,   2324.,   2980.,   3636.,   4292.,
      4948.,   5604.,   6260.,   6916.,   7572.,   8228.,   4550.,   4910.,
      4604.,   5324.,   11624.,  13192.,  14760.,  16328.,  17896.,  19464.,
      21032.,  22600.,  24168.,  25736.,  27304.,  28872.,  15756.,  16604.,
      14684.,  15404.,  33576.,  35144.,  36712.,  38280.,  39848.,  41416.,
      42984.,  44552.,  46120.,  47688.,  49256.,  50824.,  27628.,  28476.,
      24764.,  25484.,  55528.,  57096.,  58664.,  60232.,  61800.,  63368.,
      64936.,  66504.,  68072.,  69640.,  71208.,  72776.,  39500.,  40348.,
      34844.,  35564.,  77480.,  79048.,  80616.,  82184.,  83752.,  85320.,
      86888.,  88456.,  90024.,  91592.,  93160.,  94728.,  51372.,  52220.,
      44924.,  45644.,  99432.,  101000., 102568., 104136., 105704., 107272.,
      108840., 110408., 111976., 113544., 115112., 116680., 63244.,  64092.,
      55004.,  55724.,  121384., 122952., 124520., 126088., 127656., 129224.,
      130792., 132360., 133928., 135496., 137064., 138632., 75116.,  75964.,
      35886.,  36310.,  78036.,  78948.,  79860.,  80772.,  81684.,  82596.,
      83508.,  84420.,  85332.,  86244.,  87156.,  88068.,  47158.,  47646.,
      350.,    902.,    1844.,   3012.,   4180.,   5348.,   6516.,   7684.,
      8852.,   10020.,  11188.,  12356.,  13524.,  14692.,  7782.,   8398.,
      8508.,   9740.,   20456.,  23048.,  25640.,  28232.,  30824.,  33416.,
      36008.,  38600.,  41192.,  43784.,  46376.,  48968.,  25804.,  27164.,
      25756.,  26988.,  56744.,  59336.,  61928.,  64520.,  67112.,  69704.,
      72296.,  74888.,  77480.,  80072.,  82664.,  85256.,  44844.,  46204.,
      43004.,  44236.,  93032.,  95624.,  98216.,  100808., 103400., 105992.,
      108584., 111176., 113768., 116360., 118952., 121544., 63884.,  65244.,
      60252.,  61484.,  129320., 131912., 134504., 137096., 139688., 142280.,
      144872., 147464., 150056., 152648., 155240., 157832., 82924.,  84284.,
      77500.,  78732.,  165608., 168200., 170792., 173384., 175976., 178568.,
      181160., 183752., 186344., 188936., 191528., 194120., 101964., 103324.,
      94748.,  95980.,  201896., 204488., 207080., 209672., 212264., 214856.,
      217448., 220040., 222632., 225224., 227816., 230408., 121004., 122364.,
      57550.,  58230.,  121876., 123300., 124724., 126148., 127572., 128996.,
      130420., 131844., 133268., 134692., 136116., 137540., 71894.,  72638.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,   7504.,   9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,  13832.,  16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,  19320.,  16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,  16560.,  13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,  15360.,  19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,  27160.,  32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,  36680.,  32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,  30400.,  24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,  27400.,  34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,  47124.,  55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,  62188.,  54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,  50360.,  40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,  44520.,  56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,  75068.,  88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,  97412.,  84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,  77560.,  62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,  65576.,  82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505., 107996., 126420., 128184., 129948., 131712.,
      131173., 132986., 134799., 136612., 117803., 119378., 120953., 122528.,
      102690., 104020., 105350., 106680., 85806.,  86884.,  87962.,  89040.,
      81220.,  82144.,  83068.,  83992.,  105350., 106520., 107690., 108860.,
      131058., 132480., 133902., 135324., 158368., 160048., 161728., 163408.,
      163030., 164752., 166474., 168196., 144882., 146376., 147870., 149364.,
      125060., 126320., 127580., 128840., 103540., 104560., 105580., 106600.,
      92090.,  92940.,  93790.,  94640.,  118675., 119750., 120825., 121900.,
      146725., 148030., 149335., 150640., 176260., 177800., 179340., 180880.,
      180635., 182210., 183785., 185360., 159565., 160930., 162295., 163660.,
      136950., 138100., 139250., 140400., 112770., 113700., 114630., 115560.,
      94392.,  95136.,  95880.,  96624.,  121140., 122080., 123020., 123960.,
      149180., 150320., 151460., 152600., 178528., 179872., 181216., 182560.,
      182420., 183792., 185164., 186536., 160508., 161696., 162884., 164072.,
      137240., 138240., 139240., 140240., 112600., 113408., 114216., 115024.,
      56984.,  58240.,  59496.,  60752.,  74820.,  76400.,  77980.,  79560.,
      94124.,  96032.,  97940.,  99848.,  114912., 117152., 119392., 121632.,
      116452., 118720., 120988., 123256., 104492., 106448., 108404., 110360.,
      91000.,  92640.,  94280.,  95920.,  75960.,  77280.,  78600.,  79920.,
      94890.,  96540.,  98190.,  99840.,  123475., 125550., 127625., 129700.,
      154045., 156550., 159055., 161560., 186620., 189560., 192500., 195440.,
      189035., 192010., 194985., 197960., 168325., 170890., 173455., 176020.,
      145550., 147700., 149850., 152000., 120690., 122420., 124150., 125880.,
      144052., 146128., 148204., 150280., 186350., 188960., 191570., 194180.,
      231210., 234360., 237510., 240660., 278656., 282352., 286048., 289744.,
      282142., 285880., 289618., 293356., 249930., 253152., 256374., 259596.,
      215060., 217760., 220460., 223160., 177508., 179680., 181852., 184024.,
      205366., 207900., 210434., 212968., 264565., 267750., 270935., 274120.,
      326963., 330806., 334649., 338492., 392588., 397096., 401604., 406112.,
      397341., 401898., 406455., 411012., 350651., 354578., 358505., 362432.,
      300650., 303940., 307230., 310520., 247310., 249956., 252602., 255248.,
      225750., 228508., 231266., 234024., 290605., 294070., 297535., 301000.,
      358883., 363062., 367241., 371420., 430612., 435512., 440412., 445312.,
      435365., 440314., 445263., 450212., 383915., 388178., 392441., 396704.,
      328930., 332500., 336070., 339640., 270382., 273252., 276122., 278992.,
      242500., 244960., 247420., 249880., 310790., 313880., 316970., 320060.,
      382194., 385920., 389646., 393372., 456736., 461104., 465472., 469840.,
      461398., 465808., 470218., 474628., 405234., 409032., 412830., 416628.,
      345860., 349040., 352220., 355400., 283252., 285808., 288364., 290920.,
      244410., 246540., 248670., 250800., 312275., 314950., 317625., 320300.,
      382885., 386110., 389335., 392560., 456260., 460040., 463820., 467600.,
      460635., 464450., 468265., 472080., 403405., 406690., 409975., 413260.,
      343350., 346100., 348850., 351600., 280450., 282660., 284870., 287080.,
      230584., 232352., 234120., 235888., 293940., 296160., 298380., 300600.,
      359612., 362288., 364964., 367640., 427616., 430752., 433888., 437024.,
      431508., 434672., 437836., 441000., 377084., 379808., 382532., 385256.,
      320280., 322560., 324840., 327120., 261080., 262912., 264744., 266576.,
      107160., 109440., 111720., 114000., 140100., 142960., 145820., 148680.,
      175532., 178976., 182420., 185864., 213472., 217504., 221536., 225568.,
      215012., 219072., 223132., 227192., 192044., 195536., 199028., 202520.,
      166520., 169440., 172360., 175280., 138424., 140768., 143112., 145456.,
      175530., 178460., 181390., 184320., 227475., 231150., 234825., 238500.,
      282685., 287110., 291535., 295960., 341180., 346360., 351540., 356720.,
      343595., 348810., 354025., 359240., 304645., 309130., 313615., 318100.,
      262350., 266100., 269850., 273600., 216690., 219700., 222710., 225720.,
      262324., 265936., 269548., 273160., 338030., 342560., 347090., 351620.,
      417834., 423288., 428742., 434196., 501760., 508144., 514528., 520912.,
      505246., 511672., 518098., 524524., 445770., 451296., 456822., 462348.,
      382100., 386720., 391340., 395960., 314212., 317920., 321628., 325336.,
      368438., 372764., 377090., 381416., 472885., 478310., 483735., 489160.,
      582323., 588854., 595385., 601916., 696780., 704424., 712068., 719712.,
      701533., 709226., 716919., 724612., 616763., 623378., 629993., 636608.,
      526890., 532420., 537950., 543480., 431886., 436324., 440762., 445200.,
      388822., 393372., 397922., 402472., 498925., 504630., 510335., 516040.,
      614243., 621110., 627977., 634844., 734804., 742840., 750876., 758912.,
      739557., 747642., 755727., 763812., 650027., 656978., 663929., 670880.,
      555170., 560980., 566790., 572600., 454958., 459620., 464282., 468944.,
      403780., 407776., 411772., 415768., 516230., 521240., 526250., 531260.,
      633330., 639360., 645390., 651420., 755104., 762160., 769216., 776272.,
      759766., 766864., 773962., 781060., 665586., 671688., 677790., 683892.,
      566660., 571760., 576860., 581960., 462964., 467056., 471148., 475240.,
      396730., 400140., 403550., 406960., 505875., 510150., 514425., 518700.,
      619045., 624190., 629335., 634480., 736260., 742280., 748300., 754320.,
      740635., 746690., 752745., 758800., 647245., 652450., 657655., 662860.,
      549750., 554100., 558450., 562800., 448130., 451620., 455110., 458600.,
      366776., 369568., 372360., 375152., 466740., 470240., 473740., 477240.,
      570044., 574256., 578468., 582680., 676704., 681632., 686560., 691488.,
      680596., 685552., 690508., 695464., 593660., 597920., 602180., 606440.,
      503320., 506880., 510440., 514000., 409560., 412416., 415272., 418128.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    3.,    4.,    7.,    10.,   13.,   16.,   19.,   22.,
      25.,   28.,   31.,   34.,   37.,   40.,   43.,   46.,   49.,   52.,
      55.,   58.,   61.,   64.,   67.,   70.,   73.,   76.,   50.,   52.,
      54.,   56.,   32.,   36.,   40.,   44.,   110.,  120.,  130.,  140.,
      150.,  160.,  170.,  180.,  190.,  200.,  210.,  220.,  230.,  240.,
      250.,  260.,  270.,  280.,  290.,  300.,  310.,  320.,  330.,  340.,
      206.,  212.,  218.,  224.,  144.,  148.,  152.,  156.,  390.,  400.,
      410.,  420.,  430.,  440.,  450.,  460.,  470.,  480.,  490.,  500.,
      510.,  520.,  530.,  540.,  550.,  560.,  570.,  580.,  590.,  600.,
      610.,  620.,  374.,  380.,  386.,  392.,  256.,  260.,  264.,  268.,
      670.,  680.,  690.,  700.,  710.,  720.,  730.,  740.,  750.,  760.,
      770.,  780.,  790.,  800.,  810.,  820.,  830.,  840.,  850.,  860.,
      870.,  880.,  890.,  900.,  542.,  548.,  554.,  560.,  368.,  372.,
      376.,  380.,  950.,  960.,  970.,  980.,  990.,  1000., 1010., 1020.,
      1030., 1040., 1050., 1060., 1070., 1080., 1090., 1100., 1110., 1120.,
      1130., 1140., 1150., 1160., 1170., 1180., 710.,  716.,  722.,  728.,
      480.,  484.,  488.,  492.,  1230., 1240., 1250., 1260., 1270., 1280.,
      1290., 1300., 1310., 1320., 1330., 1340., 1350., 1360., 1370., 1380.,
      1390., 1400., 1410., 1420., 1430., 1440., 1450., 1460., 878.,  884.,
      890.,  896.,  592.,  596.,  600.,  604.,  1510., 1520., 1530., 1540.,
      1550., 1560., 1570., 1580., 1590., 1600., 1610., 1620., 1630., 1640.,
      1650., 1660., 1670., 1680., 1690., 1700., 1710., 1720., 1730., 1740.,
      1046., 1052., 1058., 1064., 507.,  510.,  513.,  516.,  1195., 1202.,
      1209., 1216., 1223., 1230., 1237., 1244., 1251., 1258., 1265., 1272.,
      1279., 1286., 1293., 1300., 1307., 1314., 1321., 1328., 1335., 1342.,
      1349., 1356., 772.,  776.,  780.,  784.,  5.,    10.,   15.,   20.,
      31.,   42.,   53.,   64.,   75.,   86.,   97.,   108.,  119.,  130.,
      141.,  152.,  163.,  174.,  185.,  196.,  207.,  218.,  229.,  240.,
      251.,  262.,  273.,  284.,  150.,  156.,  162.,  168.,  152.,  164.,
      176.,  188.,  382.,  408.,  434.,  460.,  486.,  512.,  538.,  564.,
      590.,  616.,  642.,  668.,  694.,  720.,  746.,  772.,  798.,  824.,
      850.,  876.,  902.,  928.,  954.,  980.,  518.,  532.,  546.,  560.,
      488.,  500.,  512.,  524.,  1110., 1136., 1162., 1188., 1214., 1240.,
      1266., 1292., 1318., 1344., 1370., 1396., 1422., 1448., 1474., 1500.,
      1526., 1552., 1578., 1604., 1630., 1656., 1682., 1708., 910.,  924.,
      938.,  952.,  824.,  836.,  848.,  860.,  1838., 1864., 1890., 1916.,
      1942., 1968., 1994., 2020., 2046., 2072., 2098., 2124., 2150., 2176.,
      2202., 2228., 2254., 2280., 2306., 2332., 2358., 2384., 2410., 2436.,
      1302., 1316., 1330., 1344., 1160., 1172., 1184., 1196., 2566., 2592.,
      2618., 2644., 2670., 2696., 2722., 2748., 2774., 2800., 2826., 2852.,
      2878., 2904., 2930., 2956., 2982., 3008., 3034., 3060., 3086., 3112.,
      3138., 3164., 1694., 1708., 1722., 1736., 1496., 1508., 1520., 1532.,
      3294., 3320., 3346., 3372., 3398., 3424., 3450., 3476., 3502., 3528.,
      3554., 3580., 3606., 3632., 3658., 3684., 3710., 3736., 3762., 3788.,
      3814., 3840., 3866., 3892., 2086., 2100., 2114., 2128., 1832., 1844.,
      1856., 1868., 4022., 4048., 4074., 4100., 4126., 4152., 4178., 4204.,
      4230., 4256., 4282., 4308., 4334., 4360., 4386., 4412., 4438., 4464.,
      4490., 4516., 4542., 4568., 4594., 4620., 2478., 2492., 2506., 2520.,
      1183., 1190., 1197., 1204., 2563., 2578., 2593., 2608., 2623., 2638.,
      2653., 2668., 2683., 2698., 2713., 2728., 2743., 2758., 2773., 2788.,
      2803., 2818., 2833., 2848., 2863., 2878., 2893., 2908., 1544., 1552.,
      1560., 1568., 9.,    18.,   27.,   36.,   55.,   74.,   93.,   112.,
      131.,  150.,  169.,  188.,  207.,  226.,  245.,  264.,  283.,  302.,
      321.,  340.,  359.,  378.,  397.,  416.,  435.,  454.,  473.,  492.,
      250.,  260.,  270.,  280.,  272.,  292.,  312.,  332.,  654.,  696.,
      738.,  780.,  822.,  864.,  906.,  948.,  990.,  1032., 1074., 1116.,
      1158., 1200., 1242., 1284., 1326., 1368., 1410., 1452., 1494., 1536.,
      1578., 1620., 830.,  852.,  874.,  896.,  832.,  852.,  872.,  892.,
      1830., 1872., 1914., 1956., 1998., 2040., 2082., 2124., 2166., 2208.,
      2250., 2292., 2334., 2376., 2418., 2460., 2502., 2544., 2586., 2628.,
      2670., 2712., 2754., 2796., 1446., 1468., 1490., 1512., 1392., 1412.,
      1432., 1452., 3006., 3048., 3090., 3132., 3174., 3216., 3258., 3300.,
      3342., 3384., 3426., 3468., 3510., 3552., 3594., 3636., 3678., 3720.,
      3762., 3804., 3846., 3888., 3930., 3972., 2062., 2084., 2106., 2128.,
      1952., 1972., 1992., 2012., 4182., 4224., 4266., 4308., 4350., 4392.,
      4434., 4476., 4518., 4560., 4602., 4644., 4686., 4728., 4770., 4812.,
      4854., 4896., 4938., 4980., 5022., 5064., 5106., 5148., 2678., 2700.,
      2722., 2744., 2512., 2532., 2552., 2572., 5358., 5400., 5442., 5484.,
      5526., 5568., 5610., 5652., 5694., 5736., 5778., 5820., 5862., 5904.,
      5946., 5988., 6030., 6072., 6114., 6156., 6198., 6240., 6282., 6324.,
      3294., 3316., 3338., 3360., 3072., 3092., 3112., 3132., 6534., 6576.,
      6618., 6660., 6702., 6744., 6786., 6828., 6870., 6912., 6954., 6996.,
      7038., 7080., 7122., 7164., 7206., 7248., 7290., 7332., 7374., 7416.,
      7458., 7500., 3910., 3932., 3954., 3976., 1859., 1870., 1881., 1892.,
      3931., 3954., 3977., 4000., 4023., 4046., 4069., 4092., 4115., 4138.,
      4161., 4184., 4207., 4230., 4253., 4276., 4299., 4322., 4345., 4368.,
      4391., 4414., 4437., 4460., 2316., 2328., 2340., 2352.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  642896.,
      650240.,  657584.,  664928.,  834070.,  843370.,  852670.,  861970.,
      1037808., 1049112., 1060416., 1071720., 1254302., 1267658., 1281014.,
      1294370., 1291514., 1305206., 1318898., 1332590., 1147968., 1159848.,
      1171728., 1183608., 991090.,  1001110., 1011130., 1021150., 820688.,
      828800.,  836912.,  845024.,  730280.,  737040.,  743800.,  750560.,
      941225.,  949775.,  958325.,  966875.,  1163840., 1174220., 1184600.,
      1194980., 1398285., 1410535., 1422785., 1435035., 1433215., 1445745.,
      1458275., 1470805., 1266200., 1277060., 1287920., 1298780., 1086875.,
      1096025., 1105175., 1114325., 895080.,  902480.,  909880.,  917280.,
      749408.,  755328.,  761248.,  767168.,  961860.,  969340.,  976820.,
      984300.,  1184608., 1193680., 1202752., 1211824., 1417780., 1428476.,
      1439172., 1449868., 1448860., 1459780., 1470700., 1481620., 1274944.,
      1284400., 1293856., 1303312., 1090220., 1098180., 1106140., 1114100.,
      894560.,  900992.,  907424.,  913856.,  451808.,  461824.,  471840.,
      481856.,  593380.,  605980.,  618580.,  631180.,  746656.,  761872.,
      777088.,  792304.,  911764.,  929628.,  947492.,  965356.,  924028.,
      942116.,  960204.,  978292.,  829312.,  844912.,  860512.,  876112.,
      722380.,  735460.,  748540.,  761620.,  603104.,  613632.,  624160.,
      634688.,  753320.,  766480.,  779640.,  792800.,  980425.,  996975.,
      1013525., 1030075., 1223360., 1243340., 1263320., 1283300., 1482285.,
      1505735., 1529185., 1552635., 1501535., 1525265., 1548995., 1572725.,
      1337240., 1357700., 1378160., 1398620., 1156475., 1173625., 1190775.,
      1207925., 959080.,  972880.,  986680.,  1000480., 1144592., 1161152.,
      1177712., 1194272., 1480870., 1501690., 1522510., 1543330., 1837584.,
      1862712., 1887840., 1912968., 2214926., 2244410., 2273894., 2303378.,
      2242730., 2272550., 2302370., 2332190., 1986912., 2012616., 2038320.,
      2064024., 1709890., 1731430., 1752970., 1774510., 1411472., 1428800.,
      1446128., 1463456., 1632792., 1653008., 1673224., 1693440., 2103675.,
      2129085., 2154495., 2179905., 2600080., 2630740., 2661400., 2692060.,
      3122231., 3158197., 3194163., 3230129., 3160157., 3196515., 3232873.,
      3269231., 2789080., 2820412., 2851744., 2883076., 2391585., 2417835.,
      2444085., 2470335., 1967448., 1988560., 2009672., 2030784., 1795416.,
      1817424., 1839432., 1861440., 2311435., 2339085., 2366735., 2394385.,
      2854768., 2888116., 2921464., 2954812., 3425639., 3464741., 3503843.,
      3542945., 3463565., 3503059., 3542553., 3582047., 3054520., 3088540.,
      3122560., 3156580., 2617265., 2645755., 2674245., 2702735., 2151576.,
      2174480., 2197384., 2220288., 1930064., 1949696., 1969328., 1988960.,
      2473750., 2498410., 2523070., 2547730., 3042288., 3072024., 3101760.,
      3131496., 3635870., 3670730., 3705590., 3740450., 3673082., 3708278.,
      3743474., 3778670., 3226176., 3256488., 3286800., 3317112., 2753650.,
      2779030., 2804410., 2829790., 2255312., 2275712., 2296112., 2316512.,
      1946280., 1963280., 1980280., 1997280., 2486825., 2508175., 2529525.,
      2550875., 3049280., 3075020., 3100760., 3126500., 3633805., 3663975.,
      3694145., 3724315., 3668735., 3699185., 3729635., 3760085., 3213080.,
      3239300., 3265520., 3291740., 2734875., 2756825., 2778775., 2800725.,
      2233960., 2251600., 2269240., 2286880., 1836896., 1851008., 1865120.,
      1879232., 2341700., 2359420., 2377140., 2394860., 2864992., 2886352.,
      2907712., 2929072., 3406900., 3431932., 3456964., 3481996., 3437980.,
      3463236., 3488492., 3513748., 3004480., 3026224., 3047968., 3069712.,
      2551980., 2570180., 2588380., 2606580., 2080352., 2094976., 2109600.,
      2124224., 851168.,  869376.,  887584.,  905792.,  1113060., 1135900.,
      1158740., 1181580., 1394848., 1422352., 1449856., 1477360., 1696660.,
      1728860., 1761060., 1793260., 1708924., 1741348., 1773772., 1806196.,
      1526656., 1554544., 1582432., 1610320., 1323980., 1347300., 1370620.,
      1393940., 1100768., 1119488., 1138208., 1156928., 1395880., 1419280.,
      1442680., 1466080., 1809225., 1838575., 1867925., 1897275., 2248640.,
      2283980., 2319320., 2354660., 2714285., 2755655., 2797025., 2838395.,
      2733535., 2775185., 2816835., 2858485., 2423960., 2459780., 2495600.,
      2531420., 2087675., 2117625., 2147575., 2177525., 1724520., 1748560.,
      1772600., 1796640., 2087696., 2116544., 2145392., 2174240., 2690470.,
      2726650., 2762830., 2799010., 3325968., 3369528., 3413088., 3456648.,
      3994382., 4045370., 4096358., 4147346., 4022186., 4073510., 4124834.,
      4176158., 3549024., 3593160., 3637296., 3681432., 3042370., 3079270.,
      3116170., 3153070., 2502032., 2531648., 2561264., 2590880., 2933784.,
      2968336., 3002888., 3037440., 3765755., 3809085., 3852415., 3895745.,
      4637584., 4689748., 4741912., 4794076., 5549495., 5610549., 5671603.,
      5732657., 5587421., 5648867., 5710313., 5771759., 4912600., 4965436.,
      5018272., 5071108., 4197025., 4241195., 4285365., 4329535., 3440472.,
      3475920., 3511368., 3546816., 3096408., 3132752., 3169096., 3205440.,
      3973515., 4019085., 4064655., 4110225., 4892272., 4947124., 5001976.,
      5056828., 5852903., 5917093., 5981283., 6045473., 5890829., 5955411.,
      6019993., 6084575., 5178040., 5233564., 5289088., 5344612., 4422705.,
      4469115., 4515525., 4561935., 3624600., 3661840., 3699080., 3736320.,
      3217232., 3249152., 3281072., 3312992., 4113430., 4153450., 4193470.,
      4233490., 5046768., 5094936., 5143104., 5191272., 6017438., 6073802.,
      6130166., 6186530., 6054650., 6111350., 6168050., 6224750., 5304384.,
      5353128., 5401872., 5450616., 4516210., 4556950., 4597690., 4638430.,
      3689936., 3722624., 3755312., 3788000., 3162280., 3189520., 3216760.,
      3244000., 4032425., 4066575., 4100725., 4134875., 4934720., 4975820.,
      5016920., 5058020., 5869325., 5917415., 5965505., 6013595., 5904255.,
      5952625., 6000995., 6049365., 5159960., 5201540., 5243120., 5284700.,
      4382875., 4417625., 4452375., 4487125., 3572840., 3600720., 3628600.,
      3656480., 2924384., 2946688., 2968992., 2991296., 3721540., 3749500.,
      3777460., 3805420., 4545376., 4579024., 4612672., 4646320., 5396020.,
      5435388., 5474756., 5514124., 5427100., 5466692., 5506284., 5545876.,
      4734016., 4768048., 4802080., 4836112., 4013740., 4042180., 4070620.,
      4099060., 3266144., 3288960., 3311776., 3334592.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    17.,    23.,    40.,    60.,    80.,    100.,   120.,
      140.,   160.,   180.,   200.,   220.,   240.,   260.,   280.,   300.,
      320.,   340.,   360.,   380.,   400.,   420.,   440.,   460.,   480.,
      500.,   347.,   361.,   375.,   389.,   190.,   218.,   246.,   274.,
      728.,   800.,   872.,   944.,   1016.,  1088.,  1160.,  1232.,  1304.,
      1376.,  1448.,  1520.,  1592.,  1664.,  1736.,  1808.,  1880.,  1952.,
      2024.,  2096.,  2168.,  2240.,  2312.,  2384.,  1482.,  1526.,  1570.,
      1614.,  974.,   1002.,  1030.,  1058.,  2744.,  2816.,  2888.,  2960.,
      3032.,  3104.,  3176.,  3248.,  3320.,  3392.,  3464.,  3536.,  3608.,
      3680.,  3752.,  3824.,  3896.,  3968.,  4040.,  4112.,  4184.,  4256.,
      4328.,  4400.,  2714.,  2758.,  2802.,  2846.,  1758.,  1786.,  1814.,
      1842.,  4760.,  4832.,  4904.,  4976.,  5048.,  5120.,  5192.,  5264.,
      5336.,  5408.,  5480.,  5552.,  5624.,  5696.,  5768.,  5840.,  5912.,
      5984.,  6056.,  6128.,  6200.,  6272.,  6344.,  6416.,  3946.,  3990.,
      4034.,  4078.,  2542.,  2570.,  2598.,  2626.,  6776.,  6848.,  6920.,
      6992.,  7064.,  7136.,  7208.,  7280.,  7352.,  7424.,  7496.,  7568.,
      7640.,  7712.,  7784.,  7856.,  7928.,  8000.,  8072.,  8144.,  8216.,
      8288.,  8360.,  8432.,  5178.,  5222.,  5266.,  5310.,  3326.,  3354.,
      3382.,  3410.,  8792.,  8864.,  8936.,  9008.,  9080.,  9152.,  9224.,
      9296.,  9368.,  9440.,  9512.,  9584.,  9656.,  9728.,  9800.,  9872.,
      9944.,  10016., 10088., 10160., 10232., 10304., 10376., 10448., 6410.,
      6454.,  6498.,  6542.,  4110.,  4138.,  4166.,  4194.,  10808., 10880.,
      10952., 11024., 11096., 11168., 11240., 11312., 11384., 11456., 11528.,
      11600., 11672., 11744., 11816., 11888., 11960., 12032., 12104., 12176.,
      12248., 12320., 12392., 12464., 7642.,  7686.,  7730.,  7774.,  3713.,
      3735.,  3757.,  3779.,  8864.,  8916.,  8968.,  9020.,  9072.,  9124.,
      9176.,  9228.,  9280.,  9332.,  9384.,  9436.,  9488.,  9540.,  9592.,
      9644.,  9696.,  9748.,  9800.,  9852.,  9904.,  9956.,  10008., 10060.,
      5783.,  5813.,  5843.,  5873.,  29.,    67.,    105.,   143.,   216.,
      300.,   384.,   468.,   552.,   636.,   720.,   804.,   888.,   972.,
      1056.,  1140.,  1224.,  1308.,  1392.,  1476.,  1560.,  1644.,  1728.,
      1812.,  1896.,  1980.,  2064.,  2148.,  1139.,  1185.,  1231.,  1277.,
      1134.,  1226.,  1318.,  1410.,  2872.,  3072.,  3272.,  3472.,  3672.,
      3872.,  4072.,  4272.,  4472.,  4672.,  4872.,  5072.,  5272.,  5472.,
      5672.,  5872.,  6072.,  6272.,  6472.,  6672.,  6872.,  7072.,  7272.,
      7472.,  3962.,  4070.,  4178.,  4286.,  3710.,  3802.,  3894.,  3986.,
      8472.,  8672.,  8872.,  9072.,  9272.,  9472.,  9672.,  9872.,  10072.,
      10272., 10472., 10672., 10872., 11072., 11272., 11472., 11672., 11872.,
      12072., 12272., 12472., 12672., 12872., 13072., 6986.,  7094.,  7202.,
      7310.,  6286.,  6378.,  6470.,  6562.,  14072., 14272., 14472., 14672.,
      14872., 15072., 15272., 15472., 15672., 15872., 16072., 16272., 16472.,
      16672., 16872., 17072., 17272., 17472., 17672., 17872., 18072., 18272.,
      18472., 18672., 10010., 10118., 10226., 10334., 8862.,  8954.,  9046.,
      9138.,  19672., 19872., 20072., 20272., 20472., 20672., 20872., 21072.,
      21272., 21472., 21672., 21872., 22072., 22272., 22472., 22672., 22872.,
      23072., 23272., 23472., 23672., 23872., 24072., 24272., 13034., 13142.,
      13250., 13358., 11438., 11530., 11622., 11714., 25272., 25472., 25672.,
      25872., 26072., 26272., 26472., 26672., 26872., 27072., 27272., 27472.,
      27672., 27872., 28072., 28272., 28472., 28672., 28872., 29072., 29272.,
      29472., 29672., 29872., 16058., 16166., 16274., 16382., 14014., 14106.,
      14198., 14290., 30872., 31072., 31272., 31472., 31672., 31872., 32072.,
      32272., 32472., 32672., 32872., 33072., 33272., 33472., 33672., 33872.,
      34072., 34272., 34472., 34672., 34872., 35072., 35272., 35472., 19082.,
      19190., 19298., 19406., 9113.,  9167.,  9221.,  9275.,  19792., 19908.,
      20024., 20140., 20256., 20372., 20488., 20604., 20720., 20836., 20952.,
      21068., 21184., 21300., 21416., 21532., 21648., 21764., 21880., 21996.,
      22112., 22228., 22344., 22460., 11951., 12013., 12075., 12137., 53.,
      123.,   193.,   263.,   392.,   540.,   688.,   836.,   984.,   1132.,
      1280.,  1428.,  1576.,  1724.,  1872.,  2020.,  2168.,  2316.,  2464.,
      2612.,  2760.,  2908.,  3056.,  3204.,  3352.,  3500.,  3648.,  3796.,
      1931.,  2009.,  2087.,  2165.,  2078.,  2234.,  2390.,  2546.,  5016.,
      5344.,  5672.,  6000.,  6328.,  6656.,  6984.,  7312.,  7640.,  7968.,
      8296.,  8624.,  8952.,  9280.,  9608.,  9936.,  10264., 10592., 10920.,
      11248., 11576., 11904., 12232., 12560., 6442.,  6614.,  6786.,  6958.,
      6446.,  6602.,  6758.,  6914.,  14200., 14528., 14856., 15184., 15512.,
      15840., 16168., 16496., 16824., 17152., 17480., 17808., 18136., 18464.,
      18792., 19120., 19448., 19776., 20104., 20432., 20760., 21088., 21416.,
      21744., 11258., 11430., 11602., 11774., 10814., 10970., 11126., 11282.,
      23384., 23712., 24040., 24368., 24696., 25024., 25352., 25680., 26008.,
      26336., 26664., 26992., 27320., 27648., 27976., 28304., 28632., 28960.,
      29288., 29616., 29944., 30272., 30600., 30928., 16074., 16246., 16418.,
      16590., 15182., 15338., 15494., 15650., 32568., 32896., 33224., 33552.,
      33880., 34208., 34536., 34864., 35192., 35520., 35848., 36176., 36504.,
      36832., 37160., 37488., 37816., 38144., 38472., 38800., 39128., 39456.,
      39784., 40112., 20890., 21062., 21234., 21406., 19550., 19706., 19862.,
      20018., 41752., 42080., 42408., 42736., 43064., 43392., 43720., 44048.,
      44376., 44704., 45032., 45360., 45688., 46016., 46344., 46672., 47000.,
      47328., 47656., 47984., 48312., 48640., 48968., 49296., 25706., 25878.,
      26050., 26222., 23918., 24074., 24230., 24386., 50936., 51264., 51592.,
      51920., 52248., 52576., 52904., 53232., 53560., 53888., 54216., 54544.,
      54872., 55200., 55528., 55856., 56184., 56512., 56840., 57168., 57496.,
      57824., 58152., 58480., 30522., 30694., 30866., 31038., 14513., 14599.,
      14685., 14771., 30720., 30900., 31080., 31260., 31440., 31620., 31800.,
      31980., 32160., 32340., 32520., 32700., 32880., 33060., 33240., 33420.,
      33600., 33780., 33960., 34140., 34320., 34500., 34680., 34860., 18119.,
      18213., 18307., 18401.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      301984.,  316448.,  330912.,  345376.,  407128.,  425848.,  444568.,
      463288.,  532016.,  555248.,  578480.,  601712.,  677672.,  705672.,
      733672.,  761672.,  726408.,  756200.,  785992.,  815784.,  657072.,
      683376.,  709680.,  735984.,  559800.,  582360.,  604920.,  627480.,
      501664.,  520224.,  538784.,  557344.,  532168.,  555368.,  578568.,
      601768.,  705854.,  735654.,  765454.,  795254.,  907676.,  944396.,
      981116.,  1017836., 1138914., 1182874., 1226834., 1270794., 1202522.,
      1248722., 1294922., 1341122., 1066684., 1107244., 1147804., 1188364.,
      889398.,  923998.,  958598.,  993198.,  770248.,  798568.,  826888.,
      855208.,  854640.,  888624.,  922608.,  956592.,  1089092., 1132532.,
      1175972., 1219412., 1363912., 1417192., 1470472., 1523752., 1680636.,
      1744140., 1807644., 1871148., 1755276., 1821468., 1887660., 1953852.,
      1544072., 1601960., 1659848., 1717736., 1278164., 1327364., 1376564.,
      1425764., 1089648., 1129776., 1169904., 1210032., 1230488., 1277304.,
      1324120., 1370936., 1548650., 1608290., 1667930., 1727570., 1923252.,
      1996164., 2069076., 2141988., 2353526., 2440158., 2526790., 2613422.,
      2447646., 2537414., 2627182., 2716950., 2147604., 2225892., 2304180.,
      2382468., 1775762., 1842122., 1908482., 1974842., 1496728., 1550712.,
      1604696., 1658680., 1677720., 1738872., 1800024., 1861176., 2094378.,
      2171938., 2249498., 2327058., 2581812., 2676228., 2770644., 2865060.,
      3106486., 3218206., 3329926., 3441646., 3200606., 3315462., 3430318.,
      3545174., 2793876., 2893668., 2993460., 3093252., 2301010., 2385290.,
      2469570., 2553850., 1919384., 1987704., 2056024., 2124344., 2014064.,
      2072624., 2131184., 2189744., 2458756., 2532916., 2607076., 2681236.,
      2970952., 3061096., 3151240., 3241384., 3484092., 3590604., 3697116.,
      3803628., 3572556., 3681756., 3790956., 3900156., 3056392., 3151144.,
      3245896., 3340648., 2458388., 2538308., 2618228., 2698148., 2008944.,
      2073648., 2138352., 2203056., 1862856., 1916776., 1970696., 2024616.,
      2204094., 2272294., 2340494., 2408694., 2605724., 2688524., 2771324.,
      2854124., 2968162., 3065882., 3163602., 3261322., 3038426., 3138386.,
      3238346., 3338306., 2530748., 2617388., 2704028., 2790668., 1949366.,
      2022366., 2095366., 2168366., 1557704., 1616744., 1675784., 1734824.,
      1700256., 1747488., 1794720., 1841952., 2065112., 2124792., 2184472.,
      2244152., 2483504., 2555888., 2628272., 2700656., 2822824., 2908168.,
      2993512., 3078856., 2882824., 2969960., 3057096., 3144232., 2536368.,
      2611824., 2687280., 2762736., 2128184., 2191704., 2255224., 2318744.,
      1657248., 1708576., 1759904., 1811232., 301984.,  316448.,  330912.,
      345376.,  407128.,  425848.,  444568.,  463288.,  532016.,  555248.,
      578480.,  601712.,  677672.,  705672.,  733672.,  761672.,  726408.,
      756200.,  785992.,  815784.,  657072.,  683376.,  709680.,  735984.,
      559800.,  582360.,  604920.,  627480.,  501664.,  520224.,  538784.,
      557344.,  532168.,  555368.,  578568.,  601768.,  705854.,  735654.,
      765454.,  795254.,  907676.,  944396.,  981116.,  1017836., 1138914.,
      1182874., 1226834., 1270794., 1202522., 1248722., 1294922., 1341122.,
      1066684., 1107244., 1147804., 1188364., 889398.,  923998.,  958598.,
      993198.,  770248.,  798568.,  826888.,  855208.,  854640.,  888624.,
      922608.,  956592.,  1089092., 1132532., 1175972., 1219412., 1363912.,
      1417192., 1470472., 1523752., 1680636., 1744140., 1807644., 1871148.,
      1755276., 1821468., 1887660., 1953852., 1544072., 1601960., 1659848.,
      1717736., 1278164., 1327364., 1376564., 1425764., 1089648., 1129776.,
      1169904., 1210032., 1230488., 1277304., 1324120., 1370936., 1548650.,
      1608290., 1667930., 1727570., 1923252., 1996164., 2069076., 2141988.,
      2353526., 2440158., 2526790., 2613422., 2447646., 2537414., 2627182.,
      2716950., 2147604., 2225892., 2304180., 2382468., 1775762., 1842122.,
      1908482., 1974842., 1496728., 1550712., 1604696., 1658680., 1677720.,
      1738872., 1800024., 1861176., 2094378., 2171938., 2249498., 2327058.,
      2581812., 2676228., 2770644., 2865060., 3106486., 3218206., 3329926.,
      3441646., 3200606., 3315462., 3430318., 3545174., 2793876., 2893668.,
      2993460., 3093252., 2301010., 2385290., 2469570., 2553850., 1919384.,
      1987704., 2056024., 2124344., 2014064., 2072624., 2131184., 2189744.,
      2458756., 2532916., 2607076., 2681236., 2970952., 3061096., 3151240.,
      3241384., 3484092., 3590604., 3697116., 3803628., 3572556., 3681756.,
      3790956., 3900156., 3056392., 3151144., 3245896., 3340648., 2458388.,
      2538308., 2618228., 2698148., 2008944., 2073648., 2138352., 2203056.,
      1862856., 1916776., 1970696., 2024616., 2204094., 2272294., 2340494.,
      2408694., 2605724., 2688524., 2771324., 2854124., 2968162., 3065882.,
      3163602., 3261322., 3038426., 3138386., 3238346., 3338306., 2530748.,
      2617388., 2704028., 2790668., 1949366., 2022366., 2095366., 2168366.,
      1557704., 1616744., 1675784., 1734824., 1700256., 1747488., 1794720.,
      1841952., 2065112., 2124792., 2184472., 2244152., 2483504., 2555888.,
      2628272., 2700656., 2822824., 2908168., 2993512., 3078856., 2882824.,
      2969960., 3057096., 3144232., 2536368., 2611824., 2687280., 2762736.,
      2128184., 2191704., 2255224., 2318744., 1657248., 1708576., 1759904.,
      1811232., 301984.,  316448.,  330912.,  345376.,  407128.,  425848.,
      444568.,  463288.,  532016.,  555248.,  578480.,  601712.,  677672.,
      705672.,  733672.,  761672.,  726408.,  756200.,  785992.,  815784.,
      657072.,  683376.,  709680.,  735984.,  559800.,  582360.,  604920.,
      627480.,  501664.,  520224.,  538784.,  557344.,  532168.,  555368.,
      578568.,  601768.,  705854.,  735654.,  765454.,  795254.,  907676.,
      944396.,  981116.,  1017836., 1138914., 1182874., 1226834., 1270794.,
      1202522., 1248722., 1294922., 1341122., 1066684., 1107244., 1147804.,
      1188364., 889398.,  923998.,  958598.,  993198.,  770248.,  798568.,
      826888.,  855208.,  854640.,  888624.,  922608.,  956592.,  1089092.,
      1132532., 1175972., 1219412., 1363912., 1417192., 1470472., 1523752.,
      1680636., 1744140., 1807644., 1871148., 1755276., 1821468., 1887660.,
      1953852., 1544072., 1601960., 1659848., 1717736., 1278164., 1327364.,
      1376564., 1425764., 1089648., 1129776., 1169904., 1210032., 1230488.,
      1277304., 1324120., 1370936., 1548650., 1608290., 1667930., 1727570.,
      1923252., 1996164., 2069076., 2141988., 2353526., 2440158., 2526790.,
      2613422., 2447646., 2537414., 2627182., 2716950., 2147604., 2225892.,
      2304180., 2382468., 1775762., 1842122., 1908482., 1974842., 1496728.,
      1550712., 1604696., 1658680., 1677720., 1738872., 1800024., 1861176.,
      2094378., 2171938., 2249498., 2327058., 2581812., 2676228., 2770644.,
      2865060., 3106486., 3218206., 3329926., 3441646., 3200606., 3315462.,
      3430318., 3545174., 2793876., 2893668., 2993460., 3093252., 2301010.,
      2385290., 2469570., 2553850., 1919384., 1987704., 2056024., 2124344.,
      2014064., 2072624., 2131184., 2189744., 2458756., 2532916., 2607076.,
      2681236., 2970952., 3061096., 3151240., 3241384., 3484092., 3590604.,
      3697116., 3803628., 3572556., 3681756., 3790956., 3900156., 3056392.,
      3151144., 3245896., 3340648., 2458388., 2538308., 2618228., 2698148.,
      2008944., 2073648., 2138352., 2203056., 1862856., 1916776., 1970696.,
      2024616., 2204094., 2272294., 2340494., 2408694., 2605724., 2688524.,
      2771324., 2854124., 2968162., 3065882., 3163602., 3261322., 3038426.,
      3138386., 3238346., 3338306., 2530748., 2617388., 2704028., 2790668.,
      1949366., 2022366., 2095366., 2168366., 1557704., 1616744., 1675784.,
      1734824., 1700256., 1747488., 1794720., 1841952., 2065112., 2124792.,
      2184472., 2244152., 2483504., 2555888., 2628272., 2700656., 2822824.,
      2908168., 2993512., 3078856., 2882824., 2969960., 3057096., 3144232.,
      2536368., 2611824., 2687280., 2762736., 2128184., 2191704., 2255224.,
      2318744., 1657248., 1708576., 1759904., 1811232.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      836.,    980.,    1124.,   1268.,   1412.,   1556.,   1700.,   1844.,
      1988.,   2132.,   2276.,   2420.,   2564.,   2708.,   2852.,   2996.,
      3140.,   3284.,   3428.,   3572.,   2566.,   2670.,   2774.,   2878.,
      1260.,   1468.,   1676.,   1884.,   5224.,   5768.,   6312.,   6856.,
      7400.,   7944.,   8488.,   9032.,   9576.,   10120.,  10664.,  11208.,
      11752.,  12296.,  12840.,  13384.,  13928.,  14472.,  15016.,  15560.,
      16104.,  16648.,  17192.,  17736.,  11196.,  11532.,  11868.,  12204.,
      7084.,   7292.,   7500.,   7708.,   20456.,  21000.,  21544.,  22088.,
      22632.,  23176.,  23720.,  24264.,  24808.,  25352.,  25896.,  26440.,
      26984.,  27528.,  28072.,  28616.,  29160.,  29704.,  30248.,  30792.,
      31336.,  31880.,  32424.,  32968.,  20604.,  20940.,  21276.,  21612.,
      12908.,  13116.,  13324.,  13532.,  35688.,  36232.,  36776.,  37320.,
      37864.,  38408.,  38952.,  39496.,  40040.,  40584.,  41128.,  41672.,
      42216.,  42760.,  43304.,  43848.,  44392.,  44936.,  45480.,  46024.,
      46568.,  47112.,  47656.,  48200.,  30012.,  30348.,  30684.,  31020.,
      18732.,  18940.,  19148.,  19356.,  50920.,  51464.,  52008.,  52552.,
      53096.,  53640.,  54184.,  54728.,  55272.,  55816.,  56360.,  56904.,
      57448.,  57992.,  58536.,  59080.,  59624.,  60168.,  60712.,  61256.,
      61800.,  62344.,  62888.,  63432.,  39420.,  39756.,  40092.,  40428.,
      24556.,  24764.,  24972.,  25180.,  66152.,  66696.,  67240.,  67784.,
      68328.,  68872.,  69416.,  69960.,  70504.,  71048.,  71592.,  72136.,
      72680.,  73224.,  73768.,  74312.,  74856.,  75400.,  75944.,  76488.,
      77032.,  77576.,  78120.,  78664.,  48828.,  49164.,  49500.,  49836.,
      30380.,  30588.,  30796.,  31004.,  81384.,  81928.,  82472.,  83016.,
      83560.,  84104.,  84648.,  85192.,  85736.,  86280.,  86824.,  87368.,
      87912.,  88456.,  89000.,  89544.,  90088.,  90632.,  91176.,  91720.,
      92264.,  92808.,  93352.,  93896.,  58236.,  58572.,  58908.,  59244.,
      28334.,  28502.,  28670.,  28838.,  68132.,  68532.,  68932.,  69332.,
      69732.,  70132.,  70532.,  70932.,  71332.,  71732.,  72132.,  72532.,
      72932.,  73332.,  73732.,  74132.,  74532.,  74932.,  75332.,  75732.,
      76132.,  76532.,  76932.,  77332.,  44694.,  44926.,  45158.,  45390.,
      190.,    486.,    782.,    1078.,   1604.,   2260.,   2916.,   3572.,
      4228.,   4884.,   5540.,   6196.,   6852.,   7508.,   8164.,   8820.,
      9476.,   10132.,  10788.,  11444.,  12100.,  12756.,  13412.,  14068.,
      14724.,  15380.,  16036.,  16692.,  8870.,   9230.,   9590.,   9950.,
      8748.,   9468.,   10188.,  10908.,  22248.,  23816.,  25384.,  26952.,
      28520.,  30088.,  31656.,  33224.,  34792.,  36360.,  37928.,  39496.,
      41064.,  42632.,  44200.,  45768.,  47336.,  48904.,  50472.,  52040.,
      53608.,  55176.,  56744.,  58312.,  30972.,  31820.,  32668.,  33516.,
      28908.,  29628.,  30348.,  31068.,  66152.,  67720.,  69288.,  70856.,
      72424.,  73992.,  75560.,  77128.,  78696.,  80264.,  81832.,  83400.,
      84968.,  86536.,  88104.,  89672.,  91240.,  92808.,  94376.,  95944.,
      97512.,  99080.,  100648., 102216., 54716.,  55564.,  56412.,  57260.,
      49068.,  49788.,  50508.,  51228.,  110056., 111624., 113192., 114760.,
      116328., 117896., 119464., 121032., 122600., 124168., 125736., 127304.,
      128872., 130440., 132008., 133576., 135144., 136712., 138280., 139848.,
      141416., 142984., 144552., 146120., 78460.,  79308.,  80156.,  81004.,
      69228.,  69948.,  70668.,  71388.,  153960., 155528., 157096., 158664.,
      160232., 161800., 163368., 164936., 166504., 168072., 169640., 171208.,
      172776., 174344., 175912., 177480., 179048., 180616., 182184., 183752.,
      185320., 186888., 188456., 190024., 102204., 103052., 103900., 104748.,
      89388.,  90108.,  90828.,  91548.,  197864., 199432., 201000., 202568.,
      204136., 205704., 207272., 208840., 210408., 211976., 213544., 215112.,
      216680., 218248., 219816., 221384., 222952., 224520., 226088., 227656.,
      229224., 230792., 232360., 233928., 125948., 126796., 127644., 128492.,
      109548., 110268., 110988., 111708., 241768., 243336., 244904., 246472.,
      248040., 249608., 251176., 252744., 254312., 255880., 257448., 259016.,
      260584., 262152., 263720., 265288., 266856., 268424., 269992., 271560.,
      273128., 274696., 276264., 277832., 149692., 150540., 151388., 152236.,
      71502.,  71926.,  72350.,  72774.,  155492., 156404., 157316., 158228.,
      159140., 160052., 160964., 161876., 162788., 163700., 164612., 165524.,
      166436., 167348., 168260., 169172., 170084., 170996., 171908., 172820.,
      173732., 174644., 175556., 176468., 94006.,  94494.,  94982.,  95470.,
      350.,    902.,    1454.,   2006.,   2948.,   4116.,   5284.,   6452.,
      7620.,   8788.,   9956.,   11124.,  12292.,  13460.,  14628.,  15796.,
      16964.,  18132.,  19300.,  20468.,  21636.,  22804.,  23972.,  25140.,
      26308.,  27476.,  28644.,  29812.,  15174.,  15790.,  16406.,  17022.,
      16236.,  17468.,  18700.,  19932.,  39272.,  41864.,  44456.,  47048.,
      49640.,  52232.,  54824.,  57416.,  60008.,  62600.,  65192.,  67784.,
      70376.,  72968.,  75560.,  78152.,  80744.,  83336.,  85928.,  88520.,
      91112.,  93704.,  96296.,  98888.,  50748.,  52108.,  53468.,  54828.,
      50732.,  51964.,  53196.,  54428.,  111848., 114440., 117032., 119624.,
      122216., 124808., 127400., 129992., 132584., 135176., 137768., 140360.,
      142952., 145544., 148136., 150728., 153320., 155912., 158504., 161096.,
      163688., 166280., 168872., 171464., 88828.,  90188.,  91548.,  92908.,
      85228.,  86460.,  87692.,  88924.,  184424., 187016., 189608., 192200.,
      194792., 197384., 199976., 202568., 205160., 207752., 210344., 212936.,
      215528., 218120., 220712., 223304., 225896., 228488., 231080., 233672.,
      236264., 238856., 241448., 244040., 126908., 128268., 129628., 130988.,
      119724., 120956., 122188., 123420., 257000., 259592., 262184., 264776.,
      267368., 269960., 272552., 275144., 277736., 280328., 282920., 285512.,
      288104., 290696., 293288., 295880., 298472., 301064., 303656., 306248.,
      308840., 311432., 314024., 316616., 164988., 166348., 167708., 169068.,
      154220., 155452., 156684., 157916., 329576., 332168., 334760., 337352.,
      339944., 342536., 345128., 347720., 350312., 352904., 355496., 358088.,
      360680., 363272., 365864., 368456., 371048., 373640., 376232., 378824.,
      381416., 384008., 386600., 389192., 203068., 204428., 205788., 207148.,
      188716., 189948., 191180., 192412., 402152., 404744., 407336., 409928.,
      412520., 415112., 417704., 420296., 422888., 425480., 428072., 430664.,
      433256., 435848., 438440., 441032., 443624., 446216., 448808., 451400.,
      453992., 456584., 459176., 461768., 241148., 242508., 243868., 245228.,
      114670., 115350., 116030., 116710., 242852., 244276., 245700., 247124.,
      248548., 249972., 251396., 252820., 254244., 255668., 257092., 258516.,
      259940., 261364., 262788., 264212., 265636., 267060., 268484., 269908.,
      271332., 272756., 274180., 275604., 143318., 144062., 144806., 145550.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,   2840.,   3752.,   4788.,   5194.,   5600.,   5240.,   4740.,
      4096.,   4220.,   5725.,   7420.,   9310.,   9940.,   10570.,  9730.,
      8675.,   7400.,   7560.,   10110.,  12936.,  16044.,  16947.,  17850.,
      16248.,  14340.,  12120.,  12320.,  16310.,  20678.,  25431.,  26656.,
      27881.,  25172.,  22050.,  18508.,  18242.,  23870.,  29939.,  36456.,
      37681.,  38906.,  34811.,  30240.,  25186.,  23424.,  30315.,  37632.,
      45381.,  46578.,  47775.,  42348.,  36465.,  30120.,  26430.,  34000.,
      41965.,  50330.,  51450.,  52570.,  46345.,  39700.,  32630.,  27008.,
      34610.,  42560.,  50862.,  51856.,  52850.,  46424.,  39630.,  32464.,
      17024.,  22280.,  27944.,  34020.,  34426.,  34832.,  31160.,  27060.,
      22528.,  27980.,  36325.,  45220.,  54670.,  55300.,  55930.,  49690.,
      42875.,  35480.,  42120.,  54390.,  67368.,  81060.,  81963.,  82866.,
      73272.,  62940.,  51864.,  59696.,  76790.,  94766.,  113631., 114856.,
      116081., 102284., 87570.,  71932.,  65618.,  84350.,  104027., 124656.,
      125881., 127106., 111923., 95760.,  78610.,  70080.,  89715.,  110208.,
      131565., 132762., 133959., 117516., 100185., 81960.,  70350.,  89800.,
      110005., 130970., 132090., 133210., 116545., 99100.,  80870.,  66176.,
      84290.,  103040., 122430., 123424., 124418., 108632., 92190.,  75088.,
      32000.,  41720.,  52136.,  63252.,  63658.,  64064.,  57080.,  49380.,
      40960.,  51740.,  66925.,  83020.,  100030., 100660., 101290., 89650.,
      77075.,  63560.,  76680.,  98670.,  121800., 146076., 146979., 147882.,
      130296., 111540., 91608.,  107072., 137270., 168854., 201831., 203056.,
      204281., 179396., 153090., 125356., 112994., 144830., 178115., 212856.,
      214081., 215306., 189035., 161280., 132034., 116736., 149115., 182784.,
      217749., 218946., 220143., 192684., 163905., 133800., 114270., 145600.,
      178045., 211610., 212730., 213850., 186745., 158500., 129110., 105344.,
      133970., 163520., 193998., 194992., 195986., 170840., 144750., 117712.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   47.,   122.,
      227.,  248.,  269.,  290.,  311.,  250.,  147.,  82.,   206.,  374.,
      395.,  416.,  437.,  458.,  362.,  210.,  117.,  290.,  521.,  542.,
      563.,  584.,  605.,  474.,  273.,  152.,  374.,  668.,  689.,  710.,
      731.,  752.,  586.,  336.,  187.,  458.,  815.,  836.,  857.,  878.,
      899.,  698.,  399.,  172.,  391.,  658.,  673.,  688.,  703.,  718.,
      533.,  294.,  7.,    22.,   46.,   70.,   94.,   118.,  142.,  110.,
      63.,   66.,   158.,  278.,  335.,  392.,  449.,  506.,  378.,  210.,
      185.,  410.,  677.,  734.,  791.,  848.,  905.,  658.,  357.,  304.,
      662.,  1076., 1133., 1190., 1247., 1304., 938.,  504.,  423.,  914.,
      1475., 1532., 1589., 1646., 1703., 1218., 651.,  542.,  1166., 1874.,
      1931., 1988., 2045., 2102., 1498., 798.,  661.,  1418., 2273., 2330.,
      2387., 2444., 2501., 1778., 945.,  430.,  913.,  1450., 1483., 1516.,
      1549., 1582., 1115., 588.,  13.,   40.,   82.,   124.,  166.,  208.,
      250.,  188.,  105.,  120.,  278.,  476.,  569.,  662.,  755.,  848.,
      618.,  336.,  323.,  698.,  1127., 1220., 1313., 1406., 1499., 1066.,
      567.,  526.,  1118., 1778., 1871., 1964., 2057., 2150., 1514., 798.,
      729.,  1538., 2429., 2522., 2615., 2708., 2801., 1962., 1029., 932.,
      1958., 3080., 3173., 3266., 3359., 3452., 2410., 1260., 1135., 2378.,
      3731., 3824., 3917., 4010., 4103., 2858., 1491., 688.,  1435., 2242.,
      2293., 2344., 2395., 2446., 1697., 882.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,   21540.,   28552.,   36540.,   39732.,   42924.,   40264.,
      36500.,   31600.,   32300.,   43925.,   57050.,   71715.,   76685.,
      81655.,   75290.,   67225.,   57420.,   58344.,   78150.,   100140.,
      124362.,  131502.,  138642.,  126348.,  111630.,  94440.,   95620.,
      126735.,  160846.,  198009.,  207711.,  217413.,  196462.,  172235.,
      144676.,  142492.,  186585.,  234178.,  285327.,  295029.,  304731.,
      272818.,  237125.,  197596.,  184056.,  238290.,  295908.,  356958.,
      366450.,  375942.,  333348.,  287130.,  237240.,  208340.,  268075.,
      330950.,  397005.,  405895.,  414785.,  365750.,  313375.,  257620.,
      213328.,  273420.,  336280.,  401940.,  409836.,  417732.,  367000.,
      313340.,  256720.,  132976.,  174180.,  218632.,  266364.,  269556.,
      272748.,  244168.,  212180.,  176752.,  219500.,  285125.,  355130.,
      429555.,  434525.,  439495.,  390650.,  337225.,  279180.,  331368.,
      428070.,  530412.,  638442.,  645582.,  652722.,  577356.,  496110.,
      408936.,  470596.,  605535.,  747502.,  896553.,  906255.,  915957.,
      807310.,  691355.,  568036.,  517468.,  665385.,  820834.,  983871.,
      993573.,  1003275., 883666.,  756245.,  620956.,  553848.,  709170.,
      871332.,  1040382., 1049874., 1059366., 929508.,  792570.,  648504.,
      556820.,  710875.,  870950.,  1037085., 1045975., 1054865., 923030.,
      784975.,  640660.,  524368.,  667980.,  816664.,  970452.,  978348.,
      986244.,  861208.,  730940.,  595408.,  250480.,  326820.,  408712.,
      496188.,  499380.,  502572.,  448072.,  387860.,  321904.,  406700.,
      526325.,  653210.,  787395.,  792365.,  797335.,  706010.,  607225.,
      500940.,  604392.,  777990.,  960684.,  1152522., 1159662., 1166802.,
      1028364., 880590.,  723432.,  845572.,  1084335., 1334158., 1595097.,
      1604799., 1614501., 1418158., 1210475., 991396.,  892444.,  1144185.,
      1407490., 1682415., 1692117., 1701819., 1494514., 1275365., 1044316.,
      923640.,  1180050., 1446756., 1723806., 1733298., 1742790., 1525668.,
      1298010., 1059768., 905300.,  1153675., 1410950., 1677165., 1686055.,
      1694945., 1480310., 1256575., 1023700., 835408.,  1062540., 1297048.,
      1538964., 1546860., 1554756., 1355416., 1148540., 934096.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,   244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      322.,  860.,   1630.,  1786.,  1942.,  2098.,  2254.,  1836.,  1090.,
      574.,  1476.,  2722.,  2878.,  3034.,  3190.,  3346.,  2676.,  1566.,
      826.,  2092.,  3814.,  3970.,  4126.,  4282.,  4438.,  3516.,  2042.,
      1078., 2708.,  4906.,  5062.,  5218.,  5374.,  5530.,  4356.,  2518.,
      1330., 3324.,  5998.,  6154.,  6310.,  6466.,  6622.,  5196.,  2994.,
      1283., 2938.,  4973.,  5087.,  5201.,  5315.,  5429.,  4050.,  2243.,
      41.,   142.,   311.,   497.,   683.,   869.,   1055.,  822.,   473.,
      478.,  1156.,  2050.,  2494.,  2938.,  3382.,  3826.,  2868.,  1598.,
      1402., 3116.,  5158.,  5602.,  6046.,  6490.,  6934.,  5052.,  2746.,
      2326., 5076.,  8266.,  8710.,  9154.,  9598.,  10042., 7236.,  3894.,
      3250., 7036.,  11374., 11818., 12262., 12706., 13150., 9420.,  5042.,
      4174., 8996.,  14482., 14926., 15370., 15814., 16258., 11604., 6190.,
      5098., 10956., 17590., 18034., 18478., 18922., 19366., 13788., 7338.,
      3335., 7090.,  11273., 11531., 11789., 12047., 12305., 8682.,  4583.,
      77.,   262.,   563.,   893.,   1223.,  1553.,  1883.,  1422.,  797.,
      886.,  2068.,  3562.,  4294.,  5026.,  5758.,  6490.,  4740.,  2582.,
      2482., 5372.,  8686.,  9418.,  10150., 10882., 11614., 8268.,  4402.,
      4078., 8676.,  13810., 14542., 15274., 16006., 16738., 11796., 6222.,
      5674., 11980., 18934., 19666., 20398., 21130., 21862., 15324., 8042.,
      7270., 15284., 24058., 24790., 25522., 26254., 26986., 18852., 9862.,
      8866., 18588., 29182., 29914., 30646., 31378., 32110., 22380., 11682.,
      5387., 11242., 17573., 17975., 18377., 18779., 19181., 13314., 6923.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,   167640.,   222608.,   285320.,   310632.,   335944.,
      315536.,   286360.,   248160.,   252600.,   343950.,   447220.,
      562730.,   602210.,   641690.,   592180.,   529150.,   452280.,
      458256.,   614340.,   787800.,   979020.,   1035804.,  1092588.,
      996312.,   880740.,   745488.,   753256.,   998970.,   1268540.,
      1562414.,  1639638.,  1716862.,  1552124.,  1361290.,  1143912.,
      1126216.,  1475250.,  1852172.,  2257430.,  2334654.,  2411878.,
      2159948.,  1877890.,  1565256.,  1459152.,  1889460.,  2346744.,
      2831388.,  2906988.,  2982588.,  2645112.,  2278740.,  1883088.,
      1654360.,  2128950.,  2628580.,  3153570.,  3224410.,  3295250.,
      2906020.,  2490150.,  2047320.,  1695712.,  2173560.,  2673488.,
      3195752.,  3258696.,  3321640.,  2918480.,  2491960.,  2041824.,
      1050976.,  1377240.,  1729424.,  2107784.,  2133096.,  2158408.,
      1932944.,  1680280.,  1400160.,  1738680.,  2259150.,  2814580.,
      3405290.,  3444770.,  3484250.,  3097780.,  2674750.,  2214840.,
      2628624.,  3396420.,  4209240.,  5067468.,  5124252.,  5181036.,
      4583640.,  3939300.,  3247632.,  3736936.,  4809210.,  5937596.,
      7122542.,  7199766.,  7276990.,  6414716.,  5494090.,  4514664.,
      4109896.,  5285490.,  6521228.,  7817558.,  7894782.,  7972006.,
      7022540.,  6010690.,  4936008.,  4403664.,  5639220.,  6929400.,
      8274588.,  8350188.,  8425788.,  7393656.,  6304980.,  5159376.,
      4430680.,  5656950.,  6931300.,  8254050.,  8324890.,  8395730.,
      7346980.,  6248550.,  5100120.,  4174816.,  5318520.,  6502736.,
      7727720.,  7790664.,  7853608.,  6858320.,  5821240.,  4742112.,
      1981792.,  2586840.,  3236240.,  3930248.,  3955560.,  3980872.,
      3550352.,  3074200.,  2552160.,  3224760.,  4174350.,  5181940.,
      6247850.,  6287330.,  6326810.,  5603380.,  4820350.,  3977400.,
      4798992.,  6178500.,  7630680.,  9155916.,  9212700.,  9269484.,
      8170968.,  6997860.,  5749776.,  6720616.,  8619450.,  10606652.,
      12682670., 12759894., 12837118., 11277308., 9626890.,  7885416.,
      7093576.,  9095730.,  11190284., 13377686., 13454910., 13532134.,
      11885132., 10143490., 8306760.,  7348176.,  9388980.,  11512056.,
      13717788., 13793388., 13868988., 12142200., 10331220., 8435664.,
      7207000.,  9184950.,  11234020., 13354530., 13425370., 13496210.,
      11787940., 10006950., 8152920.,  6653920.,  8463480.,  10331984.,
      12259688., 12322632., 12385576., 10798160., 9150520.,  7442400.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    706.,    1018.,   1330.,   1642.,   1644.,
      1118.,   460.,    1720.,   3908.,   5108.,   6308.,   7508.,   8708.,
      7544.,   4684.,   2364.,   6424.,   12308.,  13508.,  14708.,  15908.,
      17108.,  14040.,  8380.,   4268.,   11128.,  20708.,  21908.,  23108.,
      24308.,  25508.,  20536.,  12076.,  6172.,   15832.,  29108.,  30308.,
      31508.,  32708.,  33908.,  27032.,  15772.,  8076.,   20536.,  37508.,
      38708.,  39908.,  41108.,  42308.,  33528.,  19468.,  9980.,   25240.,
      45908.,  47108.,  48308.,  49508.,  50708.,  40024.,  23164.,  9894.,
      22748.,  38626.,  39514.,  40402.,  41290.,  42178.,  31548.,  17510.,
      270.,    1004.,   2266.,   3730.,   5194.,   6658.,   8122.,   6348.,
      3662.,   3628.,   8824.,   15716.,  19220.,  22724.,  26228.,  29732.,
      22328.,  12460.,  10908.,  24280.,  40244.,  43748.,  47252.,  50756.,
      54260.,  39576.,  21532.,  18188.,  39736.,  64772.,  68276.,  71780.,
      75284.,  78788.,  56824.,  30604.,  25468.,  55192.,  89300.,  92804.,
      96308.,  99812.,  103316., 74072.,  39676.,  32748.,  70648.,  113828.,
      117332., 120836., 124340., 127844., 91320.,  48748.,  40028.,  86104.,
      138356., 141860., 145364., 148868., 152372., 108568., 57820.,  26262.,
      55868.,  88882.,  90922.,  92962.,  95002.,  97042.,  68508.,  36182.,
      510.,    1868.,   4138.,   6754.,   9370.,   11986.,  14602.,  11052.,
      6206.,   6796.,   15928.,  27524.,  33332.,  39140.,  44948.,  50756.,
      37112.,  20236.,  19452.,  42136.,  68180.,  73988.,  79796.,  85604.,
      91412.,  65112.,  34684.,  32108.,  68344.,  108836., 114644., 120452.,
      126260., 132068., 93112.,  49132.,  44764.,  94552.,  149492., 155300.,
      161108., 166916., 172724., 121112., 63580.,  57420.,  120760., 190148.,
      195956., 201764., 207572., 213380., 149112., 78028.,  70076.,  146968.,
      230804., 236612., 242420., 248228., 254036., 177112., 92476.,  42630.,
      88988.,  139138., 142330., 145522., 148714., 151906., 105468., 54854.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,   5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654.,  11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,   8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075.,  19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290.,  14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975.,  32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795.,  28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075.,  41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937.,  50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375.,  47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754.,  77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  45816.,  46848.,  59325.,  60630.,  73680.,  75264.,
      88893.,  90762.,  91245.,  93156.,  93597.,  95550.,  83004.,  84696.,
      71505.,  72930.,  59088.,  60240.,  51910.,  52860.,  66800.,  68000.,
      82475.,  83930.,  98945.,  100660., 101150., 102900., 103355., 105140.,
      91145.,  92690.,  78100.,  79400.,  64210.,  65260.,  53184.,  54016.,
      68170.,  69220.,  83848.,  85120.,  100226., 101724., 102186., 103712.,
      104146., 105700., 91504.,  92848.,  78130.,  79260.,  64016.,  64928.,
      32640.,  34048.,  42790.,  44560.,  53752.,  55888.,  65534.,  68040.,
      66318.,  68852.,  67102.,  69664.,  60112.,  62320.,  52270.,  54120.,
      43568.,  45056.,  54110.,  55960.,  70325.,  72650.,  87635.,  90440.,
      106050., 109340., 107275., 110600., 108500., 111860., 96485.,  99380.,
      83325.,  85750.,  69010.,  70960.,  81912.,  84240.,  105855., 108780.,
      131208., 134736., 157983., 162120., 159747., 163926., 161511., 165732.,
      142908., 146544., 122835., 125880., 101280., 103728., 116550., 119392.,
      150010., 153580., 185227., 189532., 222215., 227262., 224616., 229712.,
      227017., 232162., 200137., 204568., 171430., 175140., 140882., 143864.,
      128142., 131236., 164815., 168700., 203371., 208054., 243824., 249312.,
      246225., 251762., 248626., 254212., 219037., 223846., 187495., 191520.,
      153986., 157220., 137400., 140160., 175965., 179430., 216240., 220416.,
      258237., 263130., 260589., 265524., 262941., 267918., 230748., 235032.,
      196785., 200370., 161040., 163920., 138310., 140700., 176600., 179600.,
      216395., 220010., 257705., 261940., 259910., 264180., 262115., 266420.,
      229385., 233090., 195100., 198200., 159250., 161740., 130368., 132352.,
      166090., 168580., 203080., 206080., 241346., 244860., 243306., 246848.,
      245266., 248836., 214192., 217264., 181810., 184380., 148112., 150176.,
      61440.,  64000.,  80230.,  83440.,  100408., 104272., 121982., 126504.,
      122766., 127316., 123550., 128128., 110224., 114160., 95470.,  98760.,
      79280.,  81920.,  100190., 103480., 129725., 133850., 161075., 166040.,
      194250., 200060., 195475., 201320., 196700., 202580., 174245., 179300.,
      149925., 154150., 123730., 127120., 149304., 153360., 192255., 197340.,
      237480., 243600., 284991., 292152., 286755., 293958., 288519., 295764.,
      254364., 260592., 217875., 223080., 179040., 183216., 209286., 214144.,
      268450., 274540., 330379., 337708., 395087., 403662., 397488., 406112.,
      399889., 408562., 351337., 358792., 299950., 306180., 245714., 250712.,
      220878., 225988., 283255., 289660., 348523., 356230., 416696., 425712.,
      419097., 428162., 421498., 430612., 370237., 378070., 316015., 322560.,
      258818., 264068., 228984., 233472., 292605., 298230., 358800., 365568.,
      427581., 435498., 429933., 437892., 432285., 440286., 378492., 385368.,
      322065., 327810., 262992., 267600., 224710., 228540., 286400., 291200.,
      350315., 356090., 416465., 423220., 418670., 425460., 420875., 427700.,
      367625., 373490., 312100., 317000., 254290., 258220., 207552., 210688.,
      264010., 267940., 322312., 327040., 382466., 387996., 384426., 389984.,
      386386., 391972., 336880., 341680., 285490., 289500., 232208., 235424.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    14.,   20.,   26.,   32.,   38.,   44.,
      50.,   56.,   62.,   68.,   59.,   64.,   39.,   42.,   19.,   24.,
      64.,   76.,   139.,  160.,  181.,  202.,  223.,  244.,  265.,  286.,
      307.,  328.,  260.,  276.,  159.,  168.,  89.,   94.,   232.,  244.,
      433.,  454.,  475.,  496.,  517.,  538.,  559.,  580.,  601.,  622.,
      484.,  500.,  285.,  294.,  159.,  164.,  400.,  412.,  727.,  748.,
      769.,  790.,  811.,  832.,  853.,  874.,  895.,  916.,  708.,  724.,
      411.,  420.,  229.,  234.,  568.,  580.,  1021., 1042., 1063., 1084.,
      1105., 1126., 1147., 1168., 1189., 1210., 932.,  948.,  537.,  546.,
      299.,  304.,  736.,  748.,  1315., 1336., 1357., 1378., 1399., 1420.,
      1441., 1462., 1483., 1504., 1156., 1172., 663.,  672.,  369.,  374.,
      904.,  916.,  1609., 1630., 1651., 1672., 1693., 1714., 1735., 1756.,
      1777., 1798., 1380., 1396., 789.,  798.,  340.,  344.,  773.,  782.,
      1301., 1316., 1331., 1346., 1361., 1376., 1391., 1406., 1421., 1436.,
      1055., 1066., 582.,  588.,  7.,    14.,   29.,   44.,   68.,   92.,
      116.,  140.,  164.,  188.,  212.,  236.,  260.,  284.,  203.,  220.,
      117.,  126.,  115.,  132.,  280.,  316.,  499.,  556.,  613.,  670.,
      727.,  784.,  841.,  898.,  955.,  1012., 716.,  756.,  399.,  420.,
      353.,  370.,  784.,  820.,  1297., 1354., 1411., 1468., 1525., 1582.,
      1639., 1696., 1753., 1810., 1276., 1316., 693.,  714.,  591.,  608.,
      1288., 1324., 2095., 2152., 2209., 2266., 2323., 2380., 2437., 2494.,
      2551., 2608., 1836., 1876., 987.,  1008., 829.,  846.,  1792., 1828.,
      2893., 2950., 3007., 3064., 3121., 3178., 3235., 3292., 3349., 3406.,
      2396., 2436., 1281., 1302., 1067., 1084., 2296., 2332., 3691., 3748.,
      3805., 3862., 3919., 3976., 4033., 4090., 4147., 4204., 2956., 2996.,
      1575., 1596., 1305., 1322., 2800., 2836., 4489., 4546., 4603., 4660.,
      4717., 4774., 4831., 4888., 4945., 5002., 3516., 3556., 1869., 1890.,
      850.,  860.,  1805., 1826., 2867., 2900., 2933., 2966., 2999., 3032.,
      3065., 3098., 3131., 3164., 2207., 2230., 1164., 1176., 13.,   26.,
      53.,   80.,   122.,  164.,  206.,  248.,  290.,  332.,  374.,  416.,
      458.,  500.,  347.,  376.,  195.,  210.,  211.,  240.,  496.,  556.,
      859.,  952.,  1045., 1138., 1231., 1324., 1417., 1510., 1603., 1696.,
      1172., 1236., 639.,  672.,  617.,  646.,  1336., 1396., 2161., 2254.,
      2347., 2440., 2533., 2626., 2719., 2812., 2905., 2998., 2068., 2132.,
      1101., 1134., 1023., 1052., 2176., 2236., 3463., 3556., 3649., 3742.,
      3835., 3928., 4021., 4114., 4207., 4300., 2964., 3028., 1563., 1596.,
      1429., 1458., 3016., 3076., 4765., 4858., 4951., 5044., 5137., 5230.,
      5323., 5416., 5509., 5602., 3860., 3924., 2025., 2058., 1835., 1864.,
      3856., 3916., 6067., 6160., 6253., 6346., 6439., 6532., 6625., 6718.,
      6811., 6904., 4756., 4820., 2487., 2520., 2241., 2270., 4696., 4756.,
      7369., 7462., 7555., 7648., 7741., 7834., 7927., 8020., 8113., 8206.,
      5652., 5716., 2949., 2982., 1360., 1376., 2837., 2870., 4433., 4484.,
      4535., 4586., 4637., 4688., 4739., 4790., 4841., 4892., 3359., 3394.,
      1746., 1764.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,   31440.,   41120.,   43720.,   54680.,   57896.,   70168.,
      74032.,   76384.,   80472.,   82600.,   86912.,   77672.,   81464.,
      70560.,   73800.,   61200.,   63856.,   62160.,   65400.,   84725.,
      88875.,   110260.,  115360.,  138845.,  144935.,  148575.,  154945.,
      158305.,  164955.,  146200.,  152020.,  130725.,  135675.,  111800.,
      115840.,  113112.,  117864.,  151740.,  157800.,  194700.,  202116.,
      242088.,  250908.,  256116.,  265272.,  270144.,  279636.,  246468.,
      254748.,  217980.,  225000.,  184584.,  190296.,  186312.,  192864.,
      247205.,  255535.,  314048.,  324212.,  386953.,  399007.,  406063.,
      418509.,  425173.,  438011.,  384524.,  395696.,  337365.,  346815.,
      283584.,  291256.,  278544.,  287112.,  365015.,  375865.,  458444.,
      471632.,  558943.,  574525.,  578053.,  594027.,  597163.,  613529.,
      534968.,  549164.,  465255.,  477225.,  387912.,  397600.,  361944.,
      370152.,  468780.,  479160.,  582348.,  594948.,  702744.,  717612.,
      721476.,  736680.,  740208.,  755748.,  656580.,  670044.,  565740.,
      577080.,  467592.,  476760.,  411000.,  418560.,  528975.,  538525.,
      653200.,  664780.,  783755.,  797405.,  801325.,  815255.,  818895.,
      833105.,  722260.,  734560.,  618975.,  629325.,  508960.,  517320.,
      421680.,  428304.,  540560.,  548920.,  664952.,  675080.,  794920.,
      806848.,  810544.,  822696.,  826168.,  838544.,  725960.,  736664.,
      619920.,  628920.,  507984.,  515248.,  257520.,  268752.,  337760.,
      351880.,  424472.,  441512.,  517720.,  537712.,  523936.,  544152.,
      530152.,  550592.,  475112.,  492728.,  413280.,  428040.,  344592.,
      356464.,  427920.,  442680.,  556325.,  574875.,  693460.,  715840.,
      839405.,  865655.,  849135.,  875665.,  858865.,  885675.,  763960.,
      787060.,  659925.,  679275.,  546680.,  562240.,  648792.,  667368.,
      838620.,  861960.,  1039692., 1067844., 1252104., 1285116., 1266132.,
      1299480., 1280160., 1313844., 1132932., 1161948., 973980.,  998280.,
      803208.,  822744.,  924168.,  946848.,  1189685., 1218175., 1469216.,
      1503572., 1762873., 1803151., 1781983., 1822653., 1801093., 1842155.,
      1588076., 1623440., 1360485., 1390095., 1118208., 1142008., 1016400.,
      1041096., 1307495., 1338505., 1613612., 1650992., 1934863., 1978669.,
      1953973., 1998171., 1973083., 2017673., 1738520., 1776908., 1488375.,
      1520505., 1222536., 1248352., 1091160., 1113192., 1397580., 1425240.,
      1717644., 1750980., 2051448., 2090508., 2070180., 2109576., 2088912.,
      2128644., 1833348., 1867548., 1563660., 1592280., 1279752., 1302744.,
      1099320., 1118400., 1403775., 1427725., 1720240., 1749100., 2048795.,
      2082605., 2066365., 2100455., 2083935., 2118305., 1823860., 1853440.,
      1551375., 1576125., 1266400., 1286280., 1036848., 1052688., 1321040.,
      1340920., 1615352., 1639304., 1919848., 1947904., 1935472., 1963752.,
      1951096., 1979600., 1704008., 1728536., 1446480., 1467000., 1178448.,
      1194928., 485616.,  506064.,  634400.,  660040.,  794264.,  825128.,
      965272.,  1001392., 971488.,  1007832., 977704.,  1014272., 872552.,
      903992.,  756000.,  782280.,  627984.,  649072.,  793680.,  819960.,
      1027925., 1060875., 1276660., 1316320., 1539965., 1586375., 1549695.,
      1596385., 1559425., 1606395., 1381720., 1422100., 1189125., 1222875.,
      981560.,  1008640., 1184472., 1216872., 1525500., 1566120., 1884684.,
      1933572., 2262120., 2319324., 2276148., 2333688., 2290176., 2348052.,
      2019396., 2069148., 1729980., 1771560., 1421832., 1455192., 1662024.,
      1700832., 2132165., 2180815., 2624384., 2682932., 3138793., 3207295.,
      3157903., 3226797., 3177013., 3246299., 2791628., 2851184., 2383605.,
      2433375., 1952832., 1992760., 1754256., 1795080., 2249975., 2301145.,
      2768780., 2830352., 3310783., 3382813., 3329893., 3402315., 3349003.,
      3421817., 2942072., 3004652., 2511495., 2563785., 2057160., 2099104.,
      1820376., 1856232., 2326380., 2371320., 2852940., 2907012., 3400152.,
      3463404., 3418884., 3482472., 3437616., 3501540., 3010116., 3065052.,
      2561580., 2607480., 2091912., 2128728., 1787640., 1818240., 2278575.,
      2316925., 2787280., 2833420., 3313835., 3367805., 3331405., 3385655.,
      3348975., 3403505., 2925460., 2972320., 2483775., 2522925., 2023840.,
      2055240., 1652016., 1677072., 2101520., 2132920., 2565752., 2603528.,
      3044776., 3088960., 3060400., 3104808., 3076024., 3120656., 2682056.,
      2720408., 2273040., 2305080., 1848912., 1874608.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    85.,    127.,   169.,   211.,   253.,
      295.,   337.,   379.,   421.,   463.,   416.,   452.,   281.,   303.,
      112.,   148.,   420.,   508.,   956.,   1112.,  1268.,  1424.,  1580.,
      1736.,  1892.,  2048.,  2204.,  2360.,  1900.,  2020.,  1176.,  1244.,
      616.,   652.,   1652.,  1740.,  3140.,  3296.,  3452.,  3608.,  3764.,
      3920.,  4076.,  4232.,  4388.,  4544.,  3580.,  3700.,  2128.,  2196.,
      1120.,  1156.,  2884.,  2972.,  5324.,  5480.,  5636.,  5792.,  5948.,
      6104.,  6260.,  6416.,  6572.,  6728.,  5260.,  5380.,  3080.,  3148.,
      1624.,  1660.,  4116.,  4204.,  7508.,  7664.,  7820.,  7976.,  8132.,
      8288.,  8444.,  8600.,  8756.,  8912.,  6940.,  7060.,  4032.,  4100.,
      2128.,  2164.,  5348.,  5436.,  9692.,  9848.,  10004., 10160., 10316.,
      10472., 10628., 10784., 10940., 11096., 8620.,  8740.,  4984.,  5052.,
      2632.,  2668.,  6580.,  6668.,  11876., 12032., 12188., 12344., 12500.,
      12656., 12812., 12968., 13124., 13280., 10300., 10420., 5936.,  6004.,
      2543.,  2573.,  5824.,  5892.,  9859.,  9973.,  10087., 10201., 10315.,
      10429., 10543., 10657., 10771., 10885., 8036.,  8120.,  4451.,  4497.,
      41.,    95.,    196.,   312.,   481.,   667.,   853.,   1039.,  1225.,
      1411.,  1597.,  1783.,  1969.,  2155.,  1544.,  1676.,  893.,   963.,
      856.,   988.,   2100.,  2380.,  3764.,  4208.,  4652.,  5096.,  5540.,
      5984.,  6428.,  6872.,  7316.,  7760.,  5500.,  5812.,  3072.,  3236.,
      2704.,  2836.,  6020.,  6300.,  9980.,  10424., 10868., 11312., 11756.,
      12200., 12644., 13088., 13532., 13976., 9868.,  10180., 5368.,  5532.,
      4552.,  4684.,  9940.,  10220., 16196., 16640., 17084., 17528., 17972.,
      18416., 18860., 19304., 19748., 20192., 14236., 14548., 7664.,  7828.,
      6400.,  6532.,  13860., 14140., 22412., 22856., 23300., 23744., 24188.,
      24632., 25076., 25520., 25964., 26408., 18604., 18916., 9960.,  10124.,
      8248.,  8380.,  17780., 18060., 28628., 29072., 29516., 29960., 30404.,
      30848., 31292., 31736., 32180., 32624., 22972., 23284., 12256., 12420.,
      10096., 10228., 21700., 21980., 34844., 35288., 35732., 36176., 36620.,
      37064., 37508., 37952., 38396., 38840., 27340., 27652., 14552., 14716.,
      6611.,  6689.,  14056., 14220., 22351., 22609., 22867., 23125., 23383.,
      23641., 23899., 24157., 24415., 24673., 17228., 17408., 9095.,  9189.,
      77.,    179.,   364.,   576.,   877.,   1207.,  1537.,  1867.,  2197.,
      2527.,  2857.,  3187.,  3517.,  3847.,  2672.,  2900.,  1505.,  1623.,
      1600.,  1828.,  3780.,  4252.,  6572.,  7304.,  8036.,  8768.,  9500.,
      10232., 10964., 11696., 12428., 13160., 9100.,  9604.,  4968.,  5228.,
      4792.,  5020.,  10388., 10860., 16820., 17552., 18284., 19016., 19748.,
      20480., 21212., 21944., 22676., 23408., 16156., 16660., 8608.,  8868.,
      7984.,  8212.,  16996., 17468., 27068., 27800., 28532., 29264., 29996.,
      30728., 31460., 32192., 32924., 33656., 23212., 23716., 12248., 12508.,
      11176., 11404., 23604., 24076., 37316., 38048., 38780., 39512., 40244.,
      40976., 41708., 42440., 43172., 43904., 30268., 30772., 15888., 16148.,
      14368., 14596., 30212., 30684., 47564., 48296., 49028., 49760., 50492.,
      51224., 51956., 52688., 53420., 54152., 37324., 37828., 19528., 19788.,
      17560., 17788., 36820., 37292., 57812., 58544., 59276., 60008., 60740.,
      61472., 62204., 62936., 63668., 64400., 44380., 44884., 23168., 23428.,
      10679., 10805., 22288., 22548., 34843., 35245., 35647., 36049., 36451.,
      36853., 37255., 37657., 38059., 38461., 26420., 26696., 13739., 13881.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,   246240.,   322280.,   342920.,   429136.,   454672.,
      551320.,   582008.,   600824.,   633304.,   650328.,   684600.,
      612112.,   642256.,   556520.,   582280.,   483040.,   504160.,
      489000.,   514760.,   667150.,   700150.,   868940.,   909500.,
      1095010.,  1143450.,  1172570.,  1223250.,  1250130.,  1303050.,
      1155260.,  1201580.,  1033550.,  1072950.,  884360.,   916520.,
      892752.,   930576.,   1198380.,  1246620.,  1538520.,  1597560.,
      1913940.,  1984164.,  2025828.,  2098740.,  2137716.,  2213316.,
      1951224.,  2017176.,  1726380.,  1782300.,  1462416.,  1507920.,
      1473752.,  1525944.,  1956290.,  2022650.,  2486260.,  2567236.,
      3064558.,  3160598.,  3217046.,  3316222.,  3369534.,  3471846.,
      3048388.,  3137428.,  2675330.,  2750650.,  2249464.,  2310616.,
      2209592.,  2277912.,  2896250.,  2982770.,  3638404.,  3743572.,
      4436950.,  4561214.,  4589438.,  4716838.,  4741926.,  4872462.,
      4248916.,  4362148.,  3695930.,  3791410.,  3082072.,  3159352.,
      2877264.,  2942736.,  3727020.,  3809820.,  4630488.,  4731000.,
      5588436.,  5707044.,  5737956.,  5859252.,  5887476.,  6011460.,
      5222904.,  5330328.,  4500780.,  4591260.,  3720336.,  3793488.,
      3270920.,  3331240.,  4210150.,  4286350.,  5199260.,  5291660.,
      6238890.,  6347810.,  6379170.,  6490330.,  6519450.,  6632850.,
      5750540.,  5848700.,  4928550.,  5011150.,  4052840.,  4119560.,
      3358304.,  3411168.,  4305320.,  4372040.,  5296336.,  5377168.,
      6331864.,  6427064.,  6456632.,  6553624.,  6581400.,  6680184.,
      5783440.,  5868880.,  4938920.,  5010760.,  4047328.,  4105312.,
      2045792.,  2135520.,  2683880.,  2796680.,  3373648.,  3509776.,
      4115608.,  4275320.,  4165112.,  4326616.,  4214616.,  4377912.,
      3777808.,  3918544.,  3286760.,  3404680.,  2740960.,  2835808.,
      3403560.,  3521480.,  4425550.,  4573750.,  5517260.,  5696060.,
      6679330.,  6889050.,  6756890.,  6968850.,  6834450.,  7048650.,
      6080060.,  6264620.,  5252750.,  5407350.,  4351880.,  4476200.,
      5164368.,  5312784.,  6676140.,  6862620.,  8277720.,  8502648.,
      9969876.,  10233636., 10081764., 10348212., 10193652., 10462788.,
      9022200.,  9254040.,  7757100.,  7951260.,  6397584.,  6553680.,
      7333848.,  7498680.,  9411458.,  9614522.,  11584628., 11826372.,
      13854254., 14135126., 13919702., 14195518., 13968766., 14239526.,
      12277828., 12511252., 10486850., 10682490., 8594936.,  8752344.,
      7721528.,  7869720.,  9817914.,  10000178., 12001540., 12218324.,
      14273302., 14525054., 14224062., 14470758., 14158438., 14400078.,
      12415444., 12623908., 10580730., 10755570., 8653400.,  8794168.,
      7634256.,  7761168.,  9624620.,  9780124.,  11691224., 11875704.,
      13834836., 14048676., 13667940., 13876276., 13484660., 13687492.,
      11802360., 11977368., 10039980., 10186780., 8196752.,  8314960.,
      7014920.,  7118248.,  8761126.,  8886990.,  10570524., 10719244.,
      12443754., 12615650., 12152930., 12318874., 11845722., 12005714.,
      10355852., 10493948., 8799590.,  8915470.,  7176296.,  7269640.,
      5831264.,  5908704.,  7187112.,  7280456.,  8591056.,  8700560.,
      10043608., 10169528., 9622584.,  9742104.,  9185176.,  9298296.,
      8027536.,  8125264.,  6819240.,  6901320.,  5559776.,  5625952.,
      633696.,   666080.,   847080.,   888200.,   1083472.,  1133584.,
      1343384.,  1402744.,  1392888.,  1454040.,  1442392.,  1505336.,
      1315600.,  1370320.,  1163240.,  1209480.,  984800.,   1022304.,
      1136680.,  1182920.,  1502350.,  1560950.,  1901900.,  1973180.,
      2335970.,  2420250.,  2413530.,  2500050.,  2491090.,  2579850.,
      2249660.,  2326700.,  1971150.,  2036150.,  1654920.,  1707560.,
      1842000.,  1904400.,  2415660.,  2494620.,  3036120.,  3132024.,
      3704148.,  3817380.,  3816036.,  3931956.,  3927924.,  4046532.,
      3522552.,  3625368.,  3066540.,  3153180.,  2559120.,  2629200.,
      2781912.,  2862776.,  3627330.,  3729530.,  4534516.,  4658500.,
      5504366.,  5650582.,  5656854.,  5806206.,  5809342.,  5961830.,
      5182660.,  5314708.,  4489730.,  4600890.,  3729656.,  3819480.,
      3517752.,  3614744.,  4567290.,  4689650.,  5686660.,  5834836.,
      6876758.,  7051198.,  7029246.,  7206822.,  7181734.,  7362446.,
      6383188.,  6539428.,  5510330.,  5641650.,  4562264.,  4668216.,
      4170576.,  4260624.,  5374380.,  5487900.,  6644184.,  6781560.,
      7980756.,  8142372.,  8130276.,  8294580.,  8279796.,  8446788.,
      7310328.,  7454616.,  6271020.,  6392220.,  5161104.,  5258832.,
      4492040.,  4572840.,  5762150.,  5863950.,  7092380.,  7215500.,
      8483370.,  8628130.,  8623650.,  8770650.,  8763930.,  8913170.,
      7705100.,  7833980.,  6582950.,  6691150.,  5396840.,  5484040.,
      4449888.,  4519136.,  5690280.,  5777480.,  6982864.,  7088272.,
      8328152.,  8452024.,  8452920.,  8578584.,  8577688.,  8705144.,
      7519120.,  7629136.,  6405800.,  6498120.,  5237216.,  5311584.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1202.,   1514.,
      1826.,   2138.,   2450.,   2762.,   3074.,   3386.,   3108.,   3380.,
      2126.,   2294.,   740.,    1012.,   3000.,   3672.,   7036.,   8236.,
      9436.,   10636.,  11836.,  13036.,  14236.,  15436.,  16636.,  17836.,
      14488.,  15416.,  9028.,   9556.,   4548.,   4820.,   12408.,  13080.,
      23836.,  25036.,  26236.,  27436.,  28636.,  29836.,  31036.,  32236.,
      33436.,  34636.,  27480.,  28408.,  16420.,  16948.,  8356.,   8628.,
      21816.,  22488.,  40636.,  41836.,  43036.,  44236.,  45436.,  46636.,
      47836.,  49036.,  50236.,  51436.,  40472.,  41400.,  23812.,  24340.,
      12164.,  12436.,  31224.,  31896.,  57436.,  58636.,  59836.,  61036.,
      62236.,  63436.,  64636.,  65836.,  67036.,  68236.,  53464.,  54392.,
      31204.,  31732.,  15972.,  16244.,  40632.,  41304.,  74236.,  75436.,
      76636.,  77836.,  79036.,  80236.,  81436.,  82636.,  83836.,  85036.,
      66456.,  67384.,  38596.,  39124.,  19780.,  20052.,  50040.,  50712.,
      91036.,  92236.,  93436.,  94636.,  95836.,  97036.,  98236.,  99436.,
      100636., 101836., 79448.,  80376.,  45988.,  46516.,  19638.,  19870.,
      45156.,  45684.,  76682.,  77570.,  78458.,  79346.,  80234.,  81122.,
      82010.,  82898.,  83786.,  84674.,  62676.,  63332.,  34790.,  35150.,
      270.,    694.,    1428.,   2340.,   3602.,   5066.,   6530.,   7994.,
      9458.,   10922.,  12386.,  13850.,  15314.,  16778.,  12036.,  13076.,
      6974.,   7526.,   6596.,   7636.,   16248.,  18456.,  29212.,  32716.,
      36220.,  39724.,  43228.,  46732.,  50236.,  53740.,  57244.,  60748.,
      43096.,  45560.,  24100.,  25396.,  21156.,  22196.,  47160.,  49368.,
      78268.,  81772.,  85276.,  88780.,  92284.,  95788.,  99292.,  102796.,
      106300., 109804., 77592.,  80056.,  42244.,  43540.,  35716.,  36756.,
      78072.,  80280.,  127324., 130828., 134332., 137836., 141340., 144844.,
      148348., 151852., 155356., 158860., 112088., 114552., 60388.,  61684.,
      50276.,  51316.,  108984., 111192., 176380., 179884., 183388., 186892.,
      190396., 193900., 197404., 200908., 204412., 207916., 146584., 149048.,
      78532.,  79828.,  64836.,  65876.,  139896., 142104., 225436., 228940.,
      232444., 235948., 239452., 242956., 246460., 249964., 253468., 256972.,
      181080., 183544., 96676.,  97972.,  79396.,  80436.,  170808., 173016.,
      274492., 277996., 281500., 285004., 288508., 292012., 295516., 299020.,
      302524., 306028., 215576., 218040., 114820., 116116., 52134.,  52750.,
      110916., 112212., 176474., 178514., 180554., 182594., 184634., 186674.,
      188714., 190754., 192794., 194834., 136116., 137540., 71894.,  72638.,
      510.,    1318.,   2676.,   4356.,   6626.,   9242.,   11858.,  14474.,
      17090.,  19706.,  22322.,  24938.,  27554.,  30170.,  20964.,  22772.,
      11822.,  12758.,  12452.,  14260.,  29496.,  33240.,  51388.,  57196.,
      63004.,  68812.,  74620.,  80428.,  86236.,  92044.,  97852.,  103660.,
      71704.,  75704.,  39172.,  41236.,  37764.,  39572.,  81912.,  85656.,
      132700., 138508., 144316., 150124., 155932., 161740., 167548., 173356.,
      179164., 184972., 127704., 131704., 68068.,  70132.,  63076.,  64884.,
      134328., 138072., 214012., 219820., 225628., 231436., 237244., 243052.,
      248860., 254668., 260476., 266284., 183704., 187704., 96964.,  99028.,
      88388.,  90196.,  186744., 190488., 295324., 301132., 306940., 312748.,
      318556., 324364., 330172., 335980., 341788., 347596., 239704., 243704.,
      125860., 127924., 113700., 115508., 239160., 242904., 376636., 382444.,
      388252., 394060., 399868., 405676., 411484., 417292., 423100., 428908.,
      295704., 299704., 154756., 156820., 139012., 140820., 291576., 295320.,
      457948., 463756., 469564., 475372., 481180., 486988., 492796., 498604.,
      504412., 510220., 351704., 355704., 183652., 185716., 84630.,  85630.,
      176676., 178740., 276266., 279458., 282650., 285842., 289034., 292226.,
      295418., 298610., 301802., 304994., 209556., 211748., 108998., 110126.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,   7680.,   7936.,   8192.,   10370.,  10700.,  11030.,  11360.,
      13784.,  14192.,  14600.,  15008.,  17682.,  18172.,  18662.,  19152.,
      19222.,  19740.,  20258.,  20776.,  20762.,  21308.,  21854.,  22400.,
      19520.,  20000.,  20480.,  20960.,  17730.,  18140.,  18550.,  18960.,
      15376.,  15712.,  16048.,  16384.,  15650.,  16060.,  16470.,  16880.,
      21325.,  21850.,  22375.,  22900.,  27745.,  28390.,  29035.,  29680.,
      34930.,  35700.,  36470.,  37240.,  37345.,  38150.,  38955.,  39760.,
      39760.,  40600.,  41440.,  42280.,  36715.,  37450.,  38185.,  38920.,
      32825.,  33450.,  34075.,  34700.,  28070.,  28580.,  29090.,  29600.,
      28440.,  29040.,  29640.,  30240.,  38145.,  38910.,  39675.,  40440.,
      48936.,  49872.,  50808.,  51744.,  60837.,  61950.,  63063.,  64176.,
      64323.,  65478.,  66633.,  67788.,  67809.,  69006.,  70203.,  71400.,
      61860.,  62904.,  63948.,  64992.,  54705.,  55590.,  56475.,  57360.,
      46320.,  47040.,  47760.,  48480.,  46802.,  47628.,  48454.,  49280.,
      62090.,  63140.,  64190.,  65240.,  78869.,  80150.,  81431.,  82712.,
      97167.,  98686.,  100205., 101724., 101920., 103488., 105056., 106624.,
      106673., 108290., 109907., 111524., 96467.,  97874.,  99281.,  100688.,
      84630.,  85820.,  87010.,  88200.,  71134.,  72100.,  73066.,  74032.,
      69734.,  70812.,  71890.,  72968.,  91385.,  92750.,  94115.,  95480.,
      114779., 116438., 118097., 119756., 139944., 141904., 143864., 145824.,
      144697., 146706., 148715., 150724., 149450., 151508., 153566., 155624.,
      133889., 135674., 137459., 139244., 116445., 117950., 119455., 120960.,
      97090.,  98308.,  99526.,  100744., 90600.,  91632.,  92664.,  93696.,
      117345., 118650., 119955., 121260., 145776., 147360., 148944., 150528.,
      175917., 177786., 179655., 181524., 180579., 182490., 184401., 186312.,
      185241., 187194., 189147., 191100., 164316., 166008., 167700., 169392.,
      141585., 143010., 144435., 145860., 117024., 118176., 119328., 120480.,
      102870., 103820., 104770., 105720., 132400., 133600., 134800., 136000.,
      163495., 164950., 166405., 167860., 196175., 197890., 199605., 201320.,
      200550., 202300., 204050., 205800., 204925., 206710., 208495., 210280.,
      180745., 182290., 183835., 185380., 154900., 156200., 157500., 158800.,
      127370., 128420., 129470., 130520., 105536., 106368., 107200., 108032.,
      135290., 136340., 137390., 138440., 166424., 167696., 168968., 170240.,
      198954., 200452., 201950., 203448., 202846., 204372., 205898., 207424.,
      206738., 208292., 209846., 211400., 181664., 183008., 184352., 185696.,
      155130., 156260., 157390., 158520., 127120., 128032., 128944., 129856.,
      63872.,  65280.,  66688.,  68096.,  83810.,  85580.,  87350.,  89120.,
      105368., 107504., 109640., 111776., 128562., 131068., 133574., 136080.,
      130102., 132636., 135170., 137704., 131642., 134204., 136766., 139328.,
      118016., 120224., 122432., 124640., 102690., 104540., 106390., 108240.,
      85648.,  87136.,  88624.,  90112.,  106370., 108220., 110070., 111920.,
      138325., 140650., 142975., 145300., 172465., 175270., 178075., 180880.,
      208810., 212100., 215390., 218680., 211225., 214550., 217875., 221200.,
      213640., 217000., 220360., 223720., 190075., 192970., 195865., 198760.,
      164225., 166650., 169075., 171500., 136070., 138020., 139970., 141920.,
      161496., 163824., 166152., 168480., 208785., 211710., 214635., 217560.,
      258888., 262416., 265944., 269472., 311829., 315966., 320103., 324240.,
      315315., 319494., 323673., 327852., 318801., 323022., 327243., 331464.,
      282180., 285816., 289452., 293088., 242625., 245670., 248715., 251760.,
      200112., 202560., 205008., 207456., 230258., 233100., 235942., 238784.,
      296450., 300020., 303590., 307160., 366149., 370454., 374759., 379064.,
      439383., 444430., 449477., 454524., 444136., 449232., 454328., 459424.,
      448889., 454034., 459179., 464324., 395843., 400274., 404705., 409136.,
      339150., 342860., 346570., 350280., 278782., 281764., 284746., 287728.,
      253190., 256284., 259378., 262472., 325745., 329630., 333515., 337400.,
      402059., 406742., 411425., 416108., 482160., 487648., 493136., 498624.,
      486913., 492450., 497987., 503524., 491666., 497252., 502838., 508424.,
      433265., 438074., 442883., 447692., 370965., 374990., 379015., 383040.,
      304738., 307972., 311206., 314440., 272040., 274800., 277560., 280320.,
      348465., 351930., 355395., 358860., 428304., 432480., 436656., 440832.,
      511581., 516474., 521367., 526260., 516243., 521178., 526113., 531048.,
      520905., 525882., 530859., 535836., 457212., 461496., 465780., 470064.,
      389985., 393570., 397155., 400740., 319200., 322080., 324960., 327840.,
      274230., 276620., 279010., 281400., 350200., 353200., 356200., 359200.,
      429175., 432790., 436405., 440020., 511175., 515410., 519645., 523880.,
      515550., 519820., 524090., 528360., 519925., 524230., 528535., 532840.,
      455065., 458770., 462475., 466180., 387100., 390200., 393300., 396400.,
      316010., 318500., 320990., 323480., 258752., 260736., 262720., 264704.,
      329690., 332180., 334670., 337160., 403160., 406160., 409160., 412160.,
      479178., 482692., 486206., 489720., 483070., 486612., 490154., 493696.,
      486962., 490532., 494102., 497672., 425312., 428384., 431456., 434528.,
      361050., 363620., 366190., 368760., 294160., 296224., 298288., 300352.,
      120320., 122880., 125440., 128000., 157250., 160460., 163670., 166880.,
      196952., 200816., 204680., 208544., 239442., 243964., 248486., 253008.,
      240982., 245532., 250082., 254632., 242522., 247100., 251678., 256256.,
      216512., 220448., 224384., 228320., 187650., 190940., 194230., 197520.,
      155920., 158560., 161200., 163840., 197090., 200380., 203670., 206960.,
      255325., 259450., 263575., 267700., 317185., 322150., 327115., 332080.,
      382690., 388500., 394310., 400120., 385105., 390950., 396795., 402640.,
      387520., 393400., 399280., 405160., 343435., 348490., 353545., 358600.,
      295625., 299850., 304075., 308300., 244070., 247460., 250850., 254240.,
      294552., 298608., 302664., 306720., 379425., 384510., 389595., 394680.,
      468840., 474960., 481080., 487200., 562821., 569982., 577143., 584304.,
      566307., 573510., 580713., 587916., 569793., 577038., 584283., 591528.,
      502500., 508728., 514956., 521184., 430545., 435750., 440955., 446160.,
      353904., 358080., 362256., 366432., 413714., 418572., 423430., 428288.,
      530810., 536900., 542990., 549080., 653429., 660758., 668087., 675416.,
      781599., 790174., 798749., 807324., 786352., 794976., 803600., 812224.,
      791105., 799778., 808451., 817124., 695219., 702674., 710129., 717584.,
      593670., 599900., 606130., 612360., 486430., 491428., 496426., 501424.,
      436646., 441756., 446866., 451976., 560105., 566510., 572915., 579320.,
      689339., 697046., 704753., 712460., 824376., 833392., 842408., 851424.,
      829129., 838194., 847259., 856324., 833882., 842996., 852110., 861224.,
      732641., 740474., 748307., 756140., 625485., 632030., 638575., 645120.,
      512386., 517636., 522886., 528136., 453480., 457968., 462456., 466944.,
      579585., 585210., 590835., 596460., 710832., 717600., 724368., 731136.,
      847245., 855162., 863079., 870996., 851907., 859866., 867825., 875784.,
      856569., 864570., 872571., 880572., 750108., 756984., 763860., 770736.,
      638385., 644130., 649875., 655620., 521376., 525984., 530592., 535200.,
      445590., 449420., 453250., 457080., 568000., 572800., 577600., 582400.,
      694855., 700630., 706405., 712180., 826175., 832930., 839685., 846440.,
      830550., 837340., 844130., 850920., 834925., 841750., 848575., 855400.,
      729385., 735250., 741115., 746980., 619300., 624200., 629100., 634000.,
      504650., 508580., 512510., 516440., 411968., 415104., 418240., 421376.,
      524090., 528020., 531950., 535880., 639896., 644624., 649352., 654080.,
      759402., 764932., 770462., 775992., 763294., 768852., 774410., 779968.,
      767186., 772772., 778358., 783944., 668960., 673760., 678560., 683360.,
      566970., 570980., 574990., 579000., 461200., 464416., 467632., 470848.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,
      82.,    88.,    94.,    100.,   106.,   112.,   118.,   124.,   130.,
      136.,   113.,   118.,   123.,   128.,   75.,    78.,    81.,    84.,
      33.,    38.,    43.,    48.,    116.,   128.,   140.,   152.,   257.,
      278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,
      467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,
      656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,
      173.,   178.,   183.,   188.,   452.,   464.,   476.,   488.,   845.,
      866.,   887.,   908.,   929.,   950.,   971.,   992.,   1013.,  1034.,
      1055.,  1076.,  1097.,  1118.,  1139.,  1160.,  1181.,  1202.,  1223.,
      1244.,  952.,   968.,   984.,   1000.,  561.,   570.,   579.,   588.,
      313.,   318.,   323.,   328.,   788.,   800.,   812.,   824.,   1433.,
      1454.,  1475.,  1496.,  1517.,  1538.,  1559.,  1580.,  1601.,  1622.,
      1643.,  1664.,  1685.,  1706.,  1727.,  1748.,  1769.,  1790.,  1811.,
      1832.,  1400.,  1416.,  1432.,  1448.,  813.,   822.,   831.,   840.,
      453.,   458.,   463.,   468.,   1124.,  1136.,  1148.,  1160.,  2021.,
      2042.,  2063.,  2084.,  2105.,  2126.,  2147.,  2168.,  2189.,  2210.,
      2231.,  2252.,  2273.,  2294.,  2315.,  2336.,  2357.,  2378.,  2399.,
      2420.,  1848.,  1864.,  1880.,  1896.,  1065.,  1074.,  1083.,  1092.,
      593.,   598.,   603.,   608.,   1460.,  1472.,  1484.,  1496.,  2609.,
      2630.,  2651.,  2672.,  2693.,  2714.,  2735.,  2756.,  2777.,  2798.,
      2819.,  2840.,  2861.,  2882.,  2903.,  2924.,  2945.,  2966.,  2987.,
      3008.,  2296.,  2312.,  2328.,  2344.,  1317.,  1326.,  1335.,  1344.,
      733.,   738.,   743.,   748.,   1796.,  1808.,  1820.,  1832.,  3197.,
      3218.,  3239.,  3260.,  3281.,  3302.,  3323.,  3344.,  3365.,  3386.,
      3407.,  3428.,  3449.,  3470.,  3491.,  3512.,  3533.,  3554.,  3575.,
      3596.,  2744.,  2760.,  2776.,  2792.,  1569.,  1578.,  1587.,  1596.,
      676.,   680.,   684.,   688.,   1537.,  1546.,  1555.,  1564.,  2587.,
      2602.,  2617.,  2632.,  2647.,  2662.,  2677.,  2692.,  2707.,  2722.,
      2737.,  2752.,  2767.,  2782.,  2797.,  2812.,  2827.,  2842.,  2857.,
      2872.,  2099.,  2110.,  2121.,  2132.,  1158.,  1164.,  1170.,  1176.,
      7.,     14.,    21.,    28.,    43.,    58.,    73.,    88.,    112.,
      136.,   160.,   184.,   208.,   232.,   256.,   280.,   304.,   328.,
      352.,   376.,   400.,   424.,   448.,   472.,   496.,   520.,   544.,
      568.,   389.,   406.,   423.,   440.,   225.,   234.,   243.,   252.,
      213.,   230.,   247.,   264.,   524.,   560.,   596.,   632.,   941.,
      998.,   1055.,  1112.,  1169.,  1226.,  1283.,  1340.,  1397.,  1454.,
      1511.,  1568.,  1625.,  1682.,  1739.,  1796.,  1853.,  1910.,  1967.,
      2024.,  1392.,  1432.,  1472.,  1512.,  777.,   798.,   819.,   840.,
      689.,   706.,   723.,   740.,   1532.,  1568.,  1604.,  1640.,  2537.,
      2594.,  2651.,  2708.,  2765.,  2822.,  2879.,  2936.,  2993.,  3050.,
      3107.,  3164.,  3221.,  3278.,  3335.,  3392.,  3449.,  3506.,  3563.,
      3620.,  2512.,  2552.,  2592.,  2632.,  1365.,  1386.,  1407.,  1428.,
      1165.,  1182.,  1199.,  1216.,  2540.,  2576.,  2612.,  2648.,  4133.,
      4190.,  4247.,  4304.,  4361.,  4418.,  4475.,  4532.,  4589.,  4646.,
      4703.,  4760.,  4817.,  4874.,  4931.,  4988.,  5045.,  5102.,  5159.,
      5216.,  3632.,  3672.,  3712.,  3752.,  1953.,  1974.,  1995.,  2016.,
      1641.,  1658.,  1675.,  1692.,  3548.,  3584.,  3620.,  3656.,  5729.,
      5786.,  5843.,  5900.,  5957.,  6014.,  6071.,  6128.,  6185.,  6242.,
      6299.,  6356.,  6413.,  6470.,  6527.,  6584.,  6641.,  6698.,  6755.,
      6812.,  4752.,  4792.,  4832.,  4872.,  2541.,  2562.,  2583.,  2604.,
      2117.,  2134.,  2151.,  2168.,  4556.,  4592.,  4628.,  4664.,  7325.,
      7382.,  7439.,  7496.,  7553.,  7610.,  7667.,  7724.,  7781.,  7838.,
      7895.,  7952.,  8009.,  8066.,  8123.,  8180.,  8237.,  8294.,  8351.,
      8408.,  5872.,  5912.,  5952.,  5992.,  3129.,  3150.,  3171.,  3192.,
      2593.,  2610.,  2627.,  2644.,  5564.,  5600.,  5636.,  5672.,  8921.,
      8978.,  9035.,  9092.,  9149.,  9206.,  9263.,  9320.,  9377.,  9434.,
      9491.,  9548.,  9605.,  9662.,  9719.,  9776.,  9833.,  9890.,  9947.,
      10004., 6992.,  7032.,  7072.,  7112.,  3717.,  3738.,  3759.,  3780.,
      1690.,  1700.,  1710.,  1720.,  3589.,  3610.,  3631.,  3652.,  5701.,
      5734.,  5767.,  5800.,  5833.,  5866.,  5899.,  5932.,  5965.,  5998.,
      6031.,  6064.,  6097.,  6130.,  6163.,  6196.,  6229.,  6262.,  6295.,
      6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,
      13.,    26.,    39.,    52.,    79.,    106.,   133.,   160.,   202.,
      244.,   286.,   328.,   370.,   412.,   454.,   496.,   538.,   580.,
      622.,   664.,   706.,   748.,   790.,   832.,   874.,   916.,   958.,
      1000.,  665.,   694.,   723.,   752.,   375.,   390.,   405.,   420.,
      393.,   422.,   451.,   480.,   932.,   992.,   1052.,  1112.,  1625.,
      1718.,  1811.,  1904.,  1997.,  2090.,  2183.,  2276.,  2369.,  2462.,
      2555.,  2648.,  2741.,  2834.,  2927.,  3020.,  3113.,  3206.,  3299.,
      3392.,  2280.,  2344.,  2408.,  2472.,  1245.,  1278.,  1311.,  1344.,
      1205.,  1234.,  1263.,  1292.,  2612.,  2672.,  2732.,  2792.,  4229.,
      4322.,  4415.,  4508.,  4601.,  4694.,  4787.,  4880.,  4973.,  5066.,
      5159.,  5252.,  5345.,  5438.,  5531.,  5624.,  5717.,  5810.,  5903.,
      5996.,  4072.,  4136.,  4200.,  4264.,  2169.,  2202.,  2235.,  2268.,
      2017.,  2046.,  2075.,  2104.,  4292.,  4352.,  4412.,  4472.,  6833.,
      6926.,  7019.,  7112.,  7205.,  7298.,  7391.,  7484.,  7577.,  7670.,
      7763.,  7856.,  7949.,  8042.,  8135.,  8228.,  8321.,  8414.,  8507.,
      8600.,  5864.,  5928.,  5992.,  6056.,  3093.,  3126.,  3159.,  3192.,
      2829.,  2858.,  2887.,  2916.,  5972.,  6032.,  6092.,  6152.,  9437.,
      9530.,  9623.,  9716.,  9809.,  9902.,  9995.,  10088., 10181., 10274.,
      10367., 10460., 10553., 10646., 10739., 10832., 10925., 11018., 11111.,
      11204., 7656.,  7720.,  7784.,  7848.,  4017.,  4050.,  4083.,  4116.,
      3641.,  3670.,  3699.,  3728.,  7652.,  7712.,  7772.,  7832.,  12041.,
      12134., 12227., 12320., 12413., 12506., 12599., 12692., 12785., 12878.,
      12971., 13064., 13157., 13250., 13343., 13436., 13529., 13622., 13715.,
      13808., 9448.,  9512.,  9576.,  9640.,  4941.,  4974.,  5007.,  5040.,
      4453.,  4482.,  4511.,  4540.,  9332.,  9392.,  9452.,  9512.,  14645.,
      14738., 14831., 14924., 15017., 15110., 15203., 15296., 15389., 15482.,
      15575., 15668., 15761., 15854., 15947., 16040., 16133., 16226., 16319.,
      16412., 11240., 11304., 11368., 11432., 5865.,  5898.,  5931.,  5964.,
      2704.,  2720.,  2736.,  2752.,  5641.,  5674.,  5707.,  5740.,  8815.,
      8866.,  8917.,  8968.,  9019.,  9070.,  9121.,  9172.,  9223.,  9274.,
      9325.,  9376.,  9427.,  9478.,  9529.,  9580.,  9631.,  9682.,  9733.,
      9784.,  6683.,  6718.,  6753.,  6788.,  3474.,  3492.,  3510.,  3528.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  717720.,  725928.,
      734136.,  742344.,  929760.,  940140.,  950520.,  960900.,  1155228.,
      1167828., 1180428., 1193028., 1394316., 1409184., 1424052., 1438920.,
      1431528., 1446732., 1461936., 1477140., 1468740., 1484280., 1499820.,
      1515360., 1303044., 1316508., 1329972., 1343436., 1122960., 1134300.,
      1145640., 1156980., 928296.,  937464.,  946632.,  955800.,  816320.,
      823880.,  831440.,  839000.,  1050775., 1060325., 1069875., 1079425.,
      1297700., 1309280., 1320860., 1332440., 1557255., 1570905., 1584555.,
      1598205., 1592185., 1606115., 1620045., 1633975., 1627115., 1641325.,
      1655535., 1669745., 1435280., 1447580., 1459880., 1472180., 1230175.,
      1240525., 1250875., 1261225., 1011640., 1020000., 1028360., 1036720.,
      838384.,  845008.,  851632.,  858256.,  1074840., 1083200., 1091560.,
      1099920., 1322296., 1332424., 1342552., 1352680., 1580880., 1592808.,
      1604736., 1616664., 1611960., 1624112., 1636264., 1648416., 1643040.,
      1655416., 1667792., 1680168., 1443880., 1454584., 1465288., 1475992.,
      1233080., 1242080., 1251080., 1260080., 1010512., 1017776., 1025040.,
      1032304., 506608.,  517840.,  529072.,  540304.,  664920.,  679040.,
      693160.,  707280.,  836152.,  853192.,  870232.,  887272.,  1020432.,
      1040424., 1060416., 1080408., 1032696., 1052912., 1073128., 1093344.,
      1044960., 1065400., 1085840., 1106280., 937000.,  954616.,  972232.,
      989848.,  815480.,  830240.,  845000.,  859760.,  680272.,  692144.,
      704016.,  715888.,  844760.,  859520.,  874280.,  889040.,  1098725.,
      1117275., 1135825., 1154375., 1370120., 1392500., 1414880., 1437260.,
      1659105., 1685355., 1711605., 1737855., 1678355., 1704885., 1731415.,
      1757945., 1697605., 1724415., 1751225., 1778035., 1510580., 1533680.,
      1556780., 1579880., 1305325., 1324675., 1344025., 1363375., 1081680.,
      1097240., 1112800., 1128360., 1283640., 1302216., 1320792., 1339368.,
      1659720., 1683060., 1706400., 1729740., 2058252., 2086404., 2114556.,
      2142708., 2479428., 2512440., 2545452., 2578464., 2507232., 2540580.,
      2573928., 2607276., 2535036., 2568720., 2602404., 2636088., 2244084.,
      2273100., 2302116., 2331132., 1929720., 1954020., 1978320., 2002620.,
      1591752., 1611288., 1630824., 1650360., 1831312., 1853992., 1876672.,
      1899352., 2357985., 2386475., 2414965., 2443455., 2912644., 2947000.,
      2981356., 3015712., 3495513., 3535791., 3576069., 3616347., 3533439.,
      3574109., 3614779., 3655449., 3571365., 3612427., 3653489., 3694551.,
      3149608., 3184972., 3220336., 3255700., 2698745., 2728355., 2757965.,
      2787575., 2218552., 2242352., 2266152., 2289952., 2014264., 2038960.,
      2063656., 2088352., 2591715., 2622725., 2653735., 2684745., 3199168.,
      3236548., 3273928., 3311308., 3836847., 3880653., 3924459., 3968265.,
      3874773., 3918971., 3963169., 4007367., 3912699., 3957289., 4001879.,
      4046469., 3448228., 3486616., 3525004., 3563392., 2952635., 2984765.,
      3016895., 3049025., 2425696., 2451512., 2477328., 2503144., 2165784.,
      2187816., 2209848., 2231880., 2774400., 2802060., 2829720., 2857380.,
      3410268., 3443604., 3476940., 3510276., 4073580., 4112640., 4151700.,
      4190760., 4110792., 4150188., 4189584., 4228980., 4148004., 4187736.,
      4227468., 4267200., 3641028., 3675228., 3709428., 3743628., 3105840.,
      3134460., 3163080., 3191700., 2542248., 2565240., 2588232., 2611224.,
      2184320., 2203400., 2222480., 2241560., 2789575., 2813525., 2837475.,
      2861425., 3418820., 3447680., 3476540., 3505400., 4072215., 4106025.,
      4139835., 4173645., 4107145., 4141235., 4175325., 4209415., 4142075.,
      4176445., 4210815., 4245185., 3625520., 3655100., 3684680., 3714260.,
      3084175., 3108925., 3133675., 3158425., 2517880., 2537760., 2557640.,
      2577520., 2061808., 2077648., 2093488., 2109328., 2627160., 2647040.,
      2666920., 2686800., 3212728., 3236680., 3260632., 3284584., 3818640.,
      3846696., 3874752., 3902808., 3849720., 3878000., 3906280., 3934560.,
      3880800., 3909304., 3937808., 3966312., 3389608., 3414136., 3438664.,
      3463192., 2877560., 2898080., 2918600., 2939120., 2344528., 2361008.,
      2377488., 2393968., 955888.,  976336.,  996784.,  1017232., 1249560.,
      1275200., 1300840., 1326480., 1565368., 1596232., 1627096., 1657960.,
      1903440., 1939560., 1975680., 2011800., 1915704., 1952048., 1988392.,
      2024736., 1927968., 1964536., 2001104., 2037672., 1721512., 1752952.,
      1784392., 1815832., 1492280., 1518560., 1544840., 1571120., 1240144.,
      1261232., 1282320., 1303408., 1567640., 1593920., 1620200., 1646480.,
      2031125., 2064075., 2097025., 2129975., 2523560., 2563220., 2602880.,
      2642540., 3045105., 3091515., 3137925., 3184335., 3064355., 3111045.,
      3157735., 3204425., 3083605., 3130575., 3177545., 3224515., 2733140.,
      2773520., 2813900., 2854280., 2352925., 2386675., 2420425., 2454175.,
      1942800., 1969880., 1996960., 2024040., 2344632., 2377032., 2409432.,
      2441832., 3020520., 3061140., 3101760., 3142380., 3732684., 3781572.,
      3830460., 3879348., 4481316., 4538520., 4595724., 4652928., 4509120.,
      4566660., 4624200., 4681740., 4536924., 4594800., 4652676., 4710552.,
      4001460., 4051212., 4100964., 4150716., 3428760., 3470340., 3511920.,
      3553500., 2818632., 2851992., 2885352., 2918712., 3294928., 3333736.,
      3372544., 3411352., 4227825., 4276475., 4325125., 4373775., 5204836.,
      5263384., 5321932., 5380480., 6226185., 6294687., 6363189., 6431691.,
      6264111., 6333005., 6401899., 6470793., 6302037., 6371323., 6440609.,
      6509895., 5538568., 5598124., 5657680., 5717236., 4729865., 4779635.,
      4829405., 4879175., 3875704., 3915632., 3955560., 3995488., 3477880.,
      3518704., 3559528., 3600352., 4461555., 4512725., 4563895., 4615065.,
      5491360., 5552932., 5614504., 5676076., 6567519., 6639549., 6711579.,
      6783609., 6605445., 6677867., 6750289., 6822711., 6643371., 6716185.,
      6788999., 6861813., 5837188., 5899768., 5962348., 6024928., 4983755.,
      5036045., 5088335., 5140625., 4082848., 4124792., 4166736., 4208680.,
      3613848., 3649704., 3685560., 3721416., 4619040., 4663980., 4708920.,
      4753860., 5665308., 5719380., 5773452., 5827524., 6752844., 6816096.,
      6879348., 6942600., 6790056., 6853644., 6917232., 6980820., 6827268.,
      6891192., 6955116., 7019040., 5979012., 6033948., 6088884., 6143820.,
      5088720., 5134620., 5180520., 5226420., 4156200., 4193016., 4229832.,
      4266648., 3552320., 3582920., 3613520., 3644120., 4528375., 4566725.,
      4605075., 4643425., 5539940., 5586080., 5632220., 5678360., 6587175.,
      6641145., 6695115., 6749085., 6622105., 6676355., 6730605., 6784855.,
      6657035., 6711565., 6766095., 6820625., 5815760., 5862620., 5909480.,
      5956340., 4938175., 4977325., 5016475., 5055625., 4024120., 4055520.,
      4086920., 4118320., 3285232., 3310288., 3335344., 3360400., 4179480.,
      4210880., 4242280., 4273680., 5103160., 5140936., 5178712., 5216488.,
      6056400., 6100584., 6144768., 6188952., 6087480., 6131888., 6176296.,
      6220704., 6118560., 6163192., 6207824., 6252456., 5335336., 5373688.,
      5412040., 5450392., 4522040., 4554080., 4586120., 4618160., 3678544.,
      3704240., 3729936., 3755632.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    305.,    347.,    389.,    431.,
      473.,    515.,    557.,    599.,    641.,    683.,    725.,    767.,
      809.,    851.,    893.,    935.,    804.,    840.,    876.,    912.,
      545.,    567.,    589.,    611.,    196.,    232.,    268.,    304.,
      772.,    860.,    948.,    1036.,   1792.,   1948.,   2104.,   2260.,
      2416.,   2572.,   2728.,   2884.,   3040.,   3196.,   3352.,   3508.,
      3664.,   3820.,   3976.,   4132.,   4288.,   4444.,   4600.,   4756.,
      3708.,   3828.,   3948.,   4068.,   2300.,   2368.,   2436.,   2504.,
      1204.,   1240.,   1276.,   1312.,   3236.,   3324.,   3412.,   3500.,
      6160.,   6316.,   6472.,   6628.,   6784.,   6940.,   7096.,   7252.,
      7408.,   7564.,   7720.,   7876.,   8032.,   8188.,   8344.,   8500.,
      8656.,   8812.,   8968.,   9124.,   7068.,   7188.,   7308.,   7428.,
      4204.,   4272.,   4340.,   4408.,   2212.,   2248.,   2284.,   2320.,
      5700.,   5788.,   5876.,   5964.,   10528.,  10684.,  10840.,  10996.,
      11152.,  11308.,  11464.,  11620.,  11776.,  11932.,  12088.,  12244.,
      12400.,  12556.,  12712.,  12868.,  13024.,  13180.,  13336.,  13492.,
      10428.,  10548.,  10668.,  10788.,  6108.,   6176.,   6244.,   6312.,
      3220.,   3256.,   3292.,   3328.,   8164.,   8252.,   8340.,   8428.,
      14896.,  15052.,  15208.,  15364.,  15520.,  15676.,  15832.,  15988.,
      16144.,  16300.,  16456.,  16612.,  16768.,  16924.,  17080.,  17236.,
      17392.,  17548.,  17704.,  17860.,  13788.,  13908.,  14028.,  14148.,
      8012.,   8080.,   8148.,   8216.,   4228.,   4264.,   4300.,   4336.,
      10628.,  10716.,  10804.,  10892.,  19264.,  19420.,  19576.,  19732.,
      19888.,  20044.,  20200.,  20356.,  20512.,  20668.,  20824.,  20980.,
      21136.,  21292.,  21448.,  21604.,  21760.,  21916.,  22072.,  22228.,
      17148.,  17268.,  17388.,  17508.,  9916.,   9984.,   10052.,  10120.,
      5236.,   5272.,   5308.,   5344.,   13092.,  13180.,  13268.,  13356.,
      23632.,  23788.,  23944.,  24100.,  24256.,  24412.,  24568.,  24724.,
      24880.,  25036.,  25192.,  25348.,  25504.,  25660.,  25816.,  25972.,
      26128.,  26284.,  26440.,  26596.,  20508.,  20628.,  20748.,  20868.,
      11820.,  11888.,  11956.,  12024.,  5063.,   5093.,   5123.,   5153.,
      11596.,  11664.,  11732.,  11800.,  19631.,  19745.,  19859.,  19973.,
      20087.,  20201.,  20315.,  20429.,  20543.,  20657.,  20771.,  20885.,
      20999.,  21113.,  21227.,  21341.,  21455.,  21569.,  21683.,  21797.,
      16008.,  16092.,  16176.,  16260.,  8867.,   8913.,   8959.,   9005.,
      41.,     95.,     149.,    203.,    304.,    420.,    536.,    652.,
      821.,    1007.,   1193.,   1379.,   1565.,   1751.,   1937.,   2123.,
      2309.,   2495.,   2681.,   2867.,   3053.,   3239.,   3425.,   3611.,
      3797.,   3983.,   4169.,   4355.,   2988.,   3120.,   3252.,   3384.,
      1733.,   1803.,   1873.,   1943.,   1612.,   1744.,   1876.,   2008.,
      3988.,   4268.,   4548.,   4828.,   7192.,   7636.,   8080.,   8524.,
      8968.,   9412.,   9856.,   10300.,  10744.,  11188.,  11632.,  12076.,
      12520.,  12964.,  13408.,  13852.,  14296.,  14740.,  15184.,  15628.,
      10764.,  11076.,  11388.,  11700.,  6020.,   6184.,   6348.,   6512.,
      5308.,   5440.,   5572.,   5704.,   11828.,  12108.,  12388.,  12668.,
      19624.,  20068.,  20512.,  20956.,  21400.,  21844.,  22288.,  22732.,
      23176.,  23620.,  24064.,  24508.,  24952.,  25396.,  25840.,  26284.,
      26728.,  27172.,  27616.,  28060.,  19500.,  19812.,  20124.,  20436.,
      10612.,  10776.,  10940.,  11104.,  9004.,   9136.,   9268.,   9400.,
      19668.,  19948.,  20228.,  20508.,  32056.,  32500.,  32944.,  33388.,
      33832.,  34276.,  34720.,  35164.,  35608.,  36052.,  36496.,  36940.,
      37384.,  37828.,  38272.,  38716.,  39160.,  39604.,  40048.,  40492.,
      28236.,  28548.,  28860.,  29172.,  15204.,  15368.,  15532.,  15696.,
      12700.,  12832.,  12964.,  13096.,  27508.,  27788.,  28068.,  28348.,
      44488.,  44932.,  45376.,  45820.,  46264.,  46708.,  47152.,  47596.,
      48040.,  48484.,  48928.,  49372.,  49816.,  50260.,  50704.,  51148.,
      51592.,  52036.,  52480.,  52924.,  36972.,  37284.,  37596.,  37908.,
      19796.,  19960.,  20124.,  20288.,  16396.,  16528.,  16660.,  16792.,
      35348.,  35628.,  35908.,  36188.,  56920.,  57364.,  57808.,  58252.,
      58696.,  59140.,  59584.,  60028.,  60472.,  60916.,  61360.,  61804.,
      62248.,  62692.,  63136.,  63580.,  64024.,  64468.,  64912.,  65356.,
      45708.,  46020.,  46332.,  46644.,  24388.,  24552.,  24716.,  24880.,
      20092.,  20224.,  20356.,  20488.,  43188.,  43468.,  43748.,  44028.,
      69352.,  69796.,  70240.,  70684.,  71128.,  71572.,  72016.,  72460.,
      72904.,  73348.,  73792.,  74236.,  74680.,  75124.,  75568.,  76012.,
      76456.,  76900.,  77344.,  77788.,  54444.,  54756.,  55068.,  55380.,
      28980.,  29144.,  29308.,  29472.,  13163.,  13241.,  13319.,  13397.,
      27988.,  28152.,  28316.,  28480.,  44507.,  44765.,  45023.,  45281.,
      45539.,  45797.,  46055.,  46313.,  46571.,  46829.,  47087.,  47345.,
      47603.,  47861.,  48119.,  48377.,  48635.,  48893.,  49151.,  49409.,
      34320.,  34500.,  34680.,  34860.,  18119.,  18213.,  18307.,  18401.,
      77.,     179.,    281.,    383.,    568.,    780.,    992.,    1204.,
      1505.,   1835.,   2165.,   2495.,   2825.,   3155.,   3485.,   3815.,
      4145.,   4475.,   4805.,   5135.,   5465.,   5795.,   6125.,   6455.,
      6785.,   7115.,   7445.,   7775.,   5172.,   5400.,   5628.,   5856.,
      2921.,   3039.,   3157.,   3275.,   3028.,   3256.,   3484.,   3712.,
      7204.,   7676.,   8148.,   8620.,   12592.,  13324.,  14056.,  14788.,
      15520.,  16252.,  16984.,  17716.,  18448.,  19180.,  19912.,  20644.,
      21376.,  22108.,  22840.,  23572.,  24304.,  25036.,  25768.,  26500.,
      17820.,  18324.,  18828.,  19332.,  9740.,   10000.,  10260.,  10520.,
      9412.,   9640.,   9868.,   10096.,  20420.,  20892.,  21364.,  21836.,
      33088.,  33820.,  34552.,  35284.,  36016.,  36748.,  37480.,  38212.,
      38944.,  39676.,  40408.,  41140.,  41872.,  42604.,  43336.,  44068.,
      44800.,  45532.,  46264.,  46996.,  31932.,  32436.,  32940.,  33444.,
      17020.,  17280.,  17540.,  17800.,  15796.,  16024.,  16252.,  16480.,
      33636.,  34108.,  34580.,  35052.,  53584.,  54316.,  55048.,  55780.,
      56512.,  57244.,  57976.,  58708.,  59440.,  60172.,  60904.,  61636.,
      62368.,  63100.,  63832.,  64564.,  65296.,  66028.,  66760.,  67492.,
      46044.,  46548.,  47052.,  47556.,  24300.,  24560.,  24820.,  25080.,
      22180.,  22408.,  22636.,  22864.,  46852.,  47324.,  47796.,  48268.,
      74080.,  74812.,  75544.,  76276.,  77008.,  77740.,  78472.,  79204.,
      79936.,  80668.,  81400.,  82132.,  82864.,  83596.,  84328.,  85060.,
      85792.,  86524.,  87256.,  87988.,  60156.,  60660.,  61164.,  61668.,
      31580.,  31840.,  32100.,  32360.,  28564.,  28792.,  29020.,  29248.,
      60068.,  60540.,  61012.,  61484.,  94576.,  95308.,  96040.,  96772.,
      97504.,  98236.,  98968.,  99700.,  100432., 101164., 101896., 102628.,
      103360., 104092., 104824., 105556., 106288., 107020., 107752., 108484.,
      74268.,  74772.,  75276.,  75780.,  38860.,  39120.,  39380.,  39640.,
      34948.,  35176.,  35404.,  35632.,  73284.,  73756.,  74228.,  74700.,
      115072., 115804., 116536., 117268., 118000., 118732., 119464., 120196.,
      120928., 121660., 122392., 123124., 123856., 124588., 125320., 126052.,
      126784., 127516., 128248., 128980., 88380.,  88884.,  89388.,  89892.,
      46140.,  46400.,  46660.,  46920.,  21263.,  21389.,  21515.,  21641.,
      44380.,  44640.,  44900.,  45160.,  69383.,  69785.,  70187.,  70589.,
      70991.,  71393.,  71795.,  72197.,  72599.,  73001.,  73403.,  73805.,
      74207.,  74609.,  75011.,  75413.,  75815.,  76217.,  76619.,  77021.,
      52632.,  52908.,  53184.,  53460.,  27371.,  27513.,  27655.,  27797.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      332640.,  348640.,  364640.,  380640.,  447240.,  467880.,  488520.,
      509160.,  583120.,  608656.,  634192.,  659728.,  741304.,  771992.,
      802680.,  833368.,  790040.,  822520.,  855000.,  887480.,  838776.,
      873048.,  907320.,  941592.,  755216.,  785360.,  815504.,  845648.,
      641160.,  666920.,  692680.,  718440.,  571872.,  592992.,  614112.,
      635232.,  588040.,  613800.,  639560.,  665320.,  777998.,  810998.,
      843998.,  876998.,  998652.,  1039212., 1079772., 1120332., 1251282.,
      1299722., 1348162., 1396602., 1314890., 1365570., 1416250., 1466930.,
      1378498., 1431418., 1484338., 1537258., 1218508., 1264828., 1311148.,
      1357468., 1013230., 1052630., 1092030., 1131430., 874536.,  906696.,
      938856.,  971016.,  949712.,  987536.,  1025360., 1063184., 1207292.,
      1255532., 1303772., 1352012., 1509080., 1568120., 1627160., 1686200.,
      1856612., 1926836., 1997060., 2067284., 1931252., 2004164., 2077076.,
      2149988., 2005892., 2081492., 2157092., 2232692., 1759800., 1825752.,
      1891704., 1957656., 1453628., 1509548., 1565468., 1621388., 1235856.,
      1281360., 1326864., 1372368., 1369528., 1421720., 1473912., 1526104.,
      1719506., 1785866., 1852226., 1918586., 2131300., 2212276., 2293252.,
      2374228., 2604142., 2700182., 2796222., 2892262., 2698262., 2797438.,
      2896614., 2995790., 2792382., 2894694., 2997006., 3099318., 2444116.,
      2533156., 2622196., 2711236., 2016882., 2092202., 2167522., 2242842.,
      1695768., 1756920., 1818072., 1879224., 1815832., 1871864., 1927896.,
      1983928., 2224906., 2295042., 2365178., 2435314., 2695540., 2780228.,
      2864916., 2949604., 3190102., 3289790., 3389478., 3489166., 3183358.,
      3282086., 3380814., 3479542., 3277478., 3379342., 3481206., 3583070.,
      2811748., 2900404., 2989060., 3077716., 2267306., 2342306., 2417306.,
      2492306., 1866104., 1927000., 1987896., 2048792., 1850448., 1903632.,
      1956816., 2010000., 2176668., 2243084., 2309500., 2375916., 2560920.,
      2640952., 2720984., 2801016., 2928452., 3022484., 3116516., 3210548.,
      2801364., 2893988., 2986612., 3079236., 2889828., 2985140., 3080452.,
      3175764., 2416376., 2499224., 2582072., 2664920., 1869020., 1939020.,
      2009020., 2079020., 1506832., 1563600., 1620368., 1677136., 1600616.,
      1648648., 1696680., 1744712., 1959238., 2019054., 2078870., 2138686.,
      2368268., 2440188., 2512108., 2584028., 2715834., 2800178., 2884522.,
      2968866., 2718002., 2800490., 2882978., 2965466., 2788266., 2872994.,
      2957722., 3042450., 2441180., 2514764., 2588348., 2661932., 2029094.,
      2091214., 2153334., 2215454., 1586056., 1636392., 1686728., 1737064.,
      1600864., 1641440., 1682016., 1722592., 1872392., 1922728., 1973064.,
      2023400., 2186704., 2247056., 2307408., 2367760., 2394808., 2465432.,
      2536056., 2606680., 2272024., 2340344., 2408664., 2476984., 2332024.,
      2402136., 2472248., 2542360., 2019856., 2080720., 2141584., 2202448.,
      1655688., 1707048., 1758408., 1809768., 1238496., 1280096., 1321696.,
      1363296., 534368.,  558560.,  582752.,  606944.,  703496.,  734376.,
      765256.,  796136.,  902096.,  939920.,  977744.,  1015568., 1131192.,
      1176216., 1221240., 1266264., 1179928., 1226744., 1273560., 1320376.,
      1228664., 1277272., 1325880., 1374488., 1090576., 1133008., 1175440.,
      1217872., 913800.,  949800.,  985800.,  1021800., 806368.,  835680.,
      864992.,  894304.,  901640.,  937640.,  973640.,  1009640., 1146446.,
      1192246., 1238046., 1283846., 1432188., 1488108., 1544028., 1599948.,
      1760146., 1826506., 1892866., 1959226., 1823754., 1892354., 1960954.,
      2029554., 1887362., 1958202., 2029042., 2099882., 1647948., 1709628.,
      1771308., 1832988., 1353006., 1405206., 1457406., 1509606., 1147176.,
      1189576., 1231976., 1274376., 1301456., 1351568., 1401680., 1451792.,
      1628540., 1692140., 1755740., 1819340., 2012120., 2089592., 2167064.,
      2244536., 2453732., 2545460., 2637188., 2728916., 2528372., 2622788.,
      2717204., 2811620., 2603012., 2700116., 2797220., 2894324., 2271032.,
      2355416., 2439800., 2524184., 1866684., 1937964., 2009244., 2080524.,
      1571216., 1629008., 1686800., 1744592., 1795256., 1853592., 1911928.,
      1970264., 2208402., 2280394., 2352386., 2424378., 2681316., 2767412.,
      2853508., 2939604., 3180462., 3281110., 3381758., 3482406., 3190102.,
      3289790., 3389478., 3489166., 3183358., 3282086., 3380814., 3479542.,
      2730964., 2816932., 2902900., 2988868., 2201650., 2274410., 2347170.,
      2419930., 1813272., 1872376., 1931480., 1990584., 1960472., 2018552.,
      2076632., 2134712., 2301642., 2373314., 2444986., 2516658., 2702324.,
      2788036., 2873748., 2959460., 3092118., 3192318., 3292518., 3392718.,
      2987070., 3086310., 3185550., 3284790., 2865638., 2963918., 3062198.,
      3160478., 2410468., 2496052., 2581636., 2667220., 1878634., 1951074.,
      2023514., 2095954., 1524856., 1583704., 1642552., 1701400., 1637456.,
      1690640., 1743824., 1797008., 2034716., 2100108., 2165500., 2230892.,
      2485912., 2563896., 2641880., 2719864., 2883524., 2974484., 3065444.,
      3156404., 2920276., 3009828., 3099380., 3188932., 2940644., 3028788.,
      3116932., 3205076., 2592760., 2669464., 2746168., 2822872., 2175068.,
      2239948., 2304828., 2369708., 1717264., 1769936., 1822608., 1875280.,
      1759080., 1805064., 1851048., 1897032., 2051206., 2107438., 2163670.,
      2219902., 2387596., 2454396., 2521196., 2587996., 2623610., 2701298.,
      2778986., 2856674., 2527474., 2603306., 2679138., 2754970., 2414954.,
      2488930., 2562906., 2636882., 2060636., 2125004., 2189372., 2253740.,
      1647462., 1701902., 1756342., 1810782., 1242248., 1286440., 1330632.,
      1374824., 1352544., 1389024., 1425504., 1461984., 1438472., 1482664.,
      1526856., 1571048., 1558992., 1611152., 1663312., 1715472., 1794488.,
      1854872., 1915256., 1975640., 1835544., 1893624., 1951704., 2009784.,
      1860216., 1915992., 1971768., 2027544., 1684496., 1733072., 1781648.,
      1830224., 1464968., 1506088., 1547208., 1588328., 1200608., 1234016.,
      1267424., 1300832., 736096.,  768480.,  800864.,  833248.,  959752.,
      1000872., 1041992., 1083112., 1221072., 1271184., 1321296., 1371408.,
      1521080., 1580440., 1639800., 1699160., 1569816., 1630968., 1692120.,
      1753272., 1618552., 1681496., 1744440., 1807384., 1425936., 1480656.,
      1535376., 1590096., 1186440., 1232680., 1278920., 1325160., 1040864.,
      1078368., 1115872., 1153376., 1215240., 1261480., 1307720., 1353960.,
      1514894., 1573494., 1632094., 1690694., 1865724., 1937004., 2008284.,
      2079564., 2269010., 2353290., 2437570., 2521850., 2332618., 2419138.,
      2505658., 2592178., 2396226., 2484986., 2573746., 2662506., 2077388.,
      2154428., 2231468., 2308508., 1692782., 1757782., 1822782., 1887782.,
      1419816., 1472456., 1525096., 1577736., 1650640., 1708944., 1767248.,
      1825552., 2028284., 2099052., 2169820., 2240588., 2458328., 2541944.,
      2625560., 2709176., 2942308., 3039156., 3136004., 3232852., 2948852.,
      3044292., 3139732., 3235172., 2939012., 3033044., 3127076., 3221108.,
      2422840., 2501080., 2579320., 2657560., 1939260., 2005420., 2071580.,
      2137740., 1601424., 1655120., 1708816., 1762512., 2038200., 2098584.,
      2158968., 2219352., 2383442., 2456970., 2530498., 2604026., 2786404.,
      2873524., 2960644., 3047764., 3180782., 3281942., 3383102., 3484262.,
      3092118., 3192318., 3292518., 3392718., 2987070., 3086310., 3185550.,
      3284790., 2329684., 2412580., 2495476., 2578372., 1812978., 1883178.,
      1953378., 2023578., 1472024., 1529080., 1586136., 1643192., 1859352.,
      1919480., 1979608., 2039736., 2017930., 2091138., 2164346., 2237554.,
      2496116., 2582852., 2669588., 2756324., 2928598., 3029310., 3130022.,
      3230734., 2987390., 3087142., 3186894., 3286646., 3029798., 3128590.,
      3227382., 3326174., 2631780., 2714292., 2796804., 2879316., 2227242.,
      2297122., 2367002., 2436882., 1773432., 1830232., 1887032., 1943832.,
      1965136., 2018320., 2071504., 2124688., 2318748., 2383116., 2447484.,
      2511852., 2722200., 2798136., 2874072., 2950008., 3035204., 3123092.,
      3210980., 3298868., 2973652., 3060132., 3146612., 3233092., 2895716.,
      2980788., 3065860., 3150932., 2343160., 2413720., 2484280., 2554840.,
      1907676., 1967436., 2027196., 2086956., 1468944., 1517520., 1566096.,
      1614672., 1671784., 1715720., 1759656., 1803592., 1782726., 1835374.,
      1888022., 1940670., 1931788., 1993468., 2055148., 2116828., 1941562.,
      2012594., 2083626., 2154658., 2009266., 2078442., 2147618., 2216794.,
      2060586., 2127906., 2195226., 2262546., 1778396., 1833548., 1888700.,
      1943852., 1478822., 1525582., 1572342., 1619102., 1226120., 1264168.,
      1302216., 1340264., 1120608., 1152992., 1185376., 1217760., 1430536.,
      1468584., 1506632., 1544680., 1766864., 1810832., 1854800., 1898768.,
      1915064., 1965208., 2015352., 2065496., 1857816., 1905656., 1953496.,
      2001336., 1784184., 1829720., 1875256., 1920792., 1447440., 1483728.,
      1520016., 1556304., 1225096., 1255976., 1286856., 1317736., 966112.,
      991328.,  1016544., 1041760.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,     110.,    150.,    260.,     404.,     548.,
      692.,     946.,    1258.,   1570.,   1882.,    2194.,    2506.,
      2818.,    3130.,   3442.,   3754.,   4066.,    4378.,    4690.,
      5002.,    5314.,   5626.,   5938.,   6250.,    6562.,    6874.,
      6036.,    6308.,   6580.,   6852.,   4142.,    4310.,    4478.,
      4646.,    1300.,   1572.,   1844.,   2116.,    5560.,    6232.,
      6904.,    7576.,   13292.,  14492.,  15692.,   16892.,   18092.,
      19292.,   20492.,  21692.,  22892.,  24092.,   25292.,   26492.,
      27692.,   28892.,  30092.,  31292.,  32492.,   33692.,   34892.,
      36092.,   28376.,  29304.,  30232.,  31160.,   17716.,   18244.,
      18772.,   19300.,  8916.,   9188.,   9460.,    9732.,    24376.,
      25048.,   25720.,  26392.,  46892.,  48092.,   49292.,   50492.,
      51692.,   52892.,  54092.,  55292.,  56492.,   57692.,   58892.,
      60092.,   61292.,  62492.,  63692.,  64892.,   66092.,   67292.,
      68492.,   69692.,  54360.,  55288.,  56216.,   57144.,   32500.,
      33028.,   33556.,  34084.,  16532.,  16804.,   17076.,   17348.,
      43192.,   43864.,  44536.,  45208.,  80492.,   81692.,   82892.,
      84092.,   85292.,  86492.,  87692.,  88892.,   90092.,   91292.,
      92492.,   93692.,  94892.,  96092.,  97292.,   98492.,   99692.,
      100892.,  102092., 103292., 80344.,  81272.,   82200.,   83128.,
      47284.,   47812.,  48340.,  48868.,  24148.,   24420.,   24692.,
      24964.,   62008.,  62680.,  63352.,  64024.,   114092.,  115292.,
      116492.,  117692., 118892., 120092., 121292.,  122492.,  123692.,
      124892.,  126092., 127292., 128492., 129692.,  130892.,  132092.,
      133292.,  134492., 135692., 136892., 106328.,  107256.,  108184.,
      109112.,  62068.,  62596.,  63124.,  63652.,   31764.,   32036.,
      32308.,   32580.,  80824.,  81496.,  82168.,   82840.,   147692.,
      148892.,  150092., 151292., 152492., 153692.,  154892.,  156092.,
      157292.,  158492., 159692., 160892., 162092.,  163292.,  164492.,
      165692.,  166892., 168092., 169292., 170492.,  132312.,  133240.,
      134168.,  135096., 76852.,  77380.,  77908.,   78436.,   39380.,
      39652.,   39924.,  40196.,  99640.,  100312.,  100984.,  101656.,
      181292.,  182492., 183692., 184892., 186092.,  187292.,  188492.,
      189692.,  190892., 192092., 193292., 194492.,  195692.,  196892.,
      198092.,  199292., 200492., 201692., 202892.,  204092.,  158296.,
      159224.,  160152., 161080., 91636.,  92164.,   92692.,   93220.,
      39126.,   39358.,  39590.,  39822.,  89972.,   90500.,   91028.,
      91556.,   152794., 153682., 154570., 155458.,  156346.,  157234.,
      158122.,  159010., 159898., 160786., 161674.,  162562.,  163450.,
      164338.,  165226., 166114., 167002., 167890.,  168778.,  169666.,
      124932.,  125588., 126244., 126900., 69350.,   69710.,   70070.,
      70430.,   270.,    694.,    1118.,   1542.,    2276.,    3188.,
      4100.,    5012.,   6274.,   7738.,   9202.,    10666.,   12130.,
      13594.,   15058.,  16522.,  17986.,  19450.,   20914.,   22378.,
      23842.,   25306.,  26770.,  28234.,  29698.,   31162.,   32626.,
      34090.,   23412.,  24452.,  25492.,  26532.,   13598.,   14150.,
      14702.,   15254.,  12532.,  13572.,  14612.,   15652.,   31096.,
      33304.,   35512.,  37720.,  56204.,  59708.,   63212.,   66716.,
      70220.,   73724.,  77228.,  80732.,  84236.,   87740.,   91244.,
      94748.,   98252.,  101756., 105260., 108764.,  112268.,  115772.,
      119276.,  122780., 84632.,  87096.,  89560.,   92024.,   47380.,
      48676.,   49972.,  51268.,  41652.,  42692.,   43732.,   44772.,
      92920.,   95128.,  97336.,  99544.,  154316.,  157820.,  161324.,
      164828.,  168332., 171836., 175340., 178844.,  182348.,  185852.,
      189356.,  192860., 196364., 199868., 203372.,  206876.,  210380.,
      213884.,  217388., 220892., 153624., 156088.,  158552.,  161016.,
      83668.,   84964.,  86260.,  87556.,  70772.,   71812.,   72852.,
      73892.,   154744., 156952., 159160., 161368.,  252428.,  255932.,
      259436.,  262940., 266444., 269948., 273452.,  276956.,  280460.,
      283964.,  287468., 290972., 294476., 297980.,  301484.,  304988.,
      308492.,  311996., 315500., 319004., 222616.,  225080.,  227544.,
      230008.,  119956., 121252., 122548., 123844.,  99892.,   100932.,
      101972.,  103012., 216568., 218776., 220984.,  223192.,  350540.,
      354044.,  357548., 361052., 364556., 368060.,  371564.,  375068.,
      378572.,  382076., 385580., 389084., 392588.,  396092.,  399596.,
      403100.,  406604., 410108., 413612., 417116.,  291608.,  294072.,
      296536.,  299000., 156244., 157540., 158836.,  160132.,  129012.,
      130052.,  131092., 132132., 278392., 280600.,  282808.,  285016.,
      448652.,  452156., 455660., 459164., 462668.,  466172.,  469676.,
      473180.,  476684., 480188., 483692., 487196.,  490700.,  494204.,
      497708.,  501212., 504716., 508220., 511724.,  515228.,  360600.,
      363064.,  365528., 367992., 192532., 193828.,  195124.,  196420.,
      158132.,  159172., 160212., 161252., 340216.,  342424.,  344632.,
      346840.,  546764., 550268., 553772., 557276.,  560780.,  564284.,
      567788.,  571292., 574796., 578300., 581804.,  585308.,  588812.,
      592316.,  595820., 599324., 602828., 606332.,  609836.,  613340.,
      429592.,  432056., 434520., 436984., 228820.,  230116.,  231412.,
      232708.,  103878., 104494., 105110., 105726.,  221012.,  222308.,
      223604.,  224900., 351658., 353698., 355738.,  357778.,  359818.,
      361858.,  363898., 365938., 367978., 370018.,  372058.,  374098.,
      376138.,  378178., 380218., 382258., 384298.,  386338.,  388378.,
      390418.,  271332., 272756., 274180., 275604.,  143318.,  144062.,
      144806.,  145550., 510.,    1318.,   2126.,    2934.,    4292.,
      5972.,    7652.,   9332.,   11602.,  14218.,   16834.,   19450.,
      22066.,   24682.,  27298.,  29914.,  32530.,   35146.,   37762.,
      40378.,   42994.,  45610.,  48226.,  50842.,   53458.,   56074.,
      58690.,   61306.,  40788.,  42596.,  44404.,   46212.,   23054.,
      23990.,   24926.,  25862.,  23764.,  25572.,   27380.,   29188.,
      56632.,   60376.,  64120.,  67864.,  99116.,   104924.,  110732.,
      116540.,  122348., 128156., 133964., 139772.,  145580.,  151388.,
      157196.,  163004., 168812., 174620., 180428.,  186236.,  192044.,
      197852.,  203660., 209468., 140888., 144888.,  148888.,  152888.,
      77044.,   79108.,  81172.,  83236.,  74388.,   76196.,   78004.,
      79812.,   161464., 165208., 168952., 172696.,  261740.,  267548.,
      273356.,  279164., 284972., 290780., 296588.,  302396.,  308204.,
      314012.,  319820., 325628., 331436., 337244.,  343052.,  348860.,
      354668.,  360476., 366284., 372092., 252888.,  256888.,  260888.,
      264888.,  134836., 136900., 138964., 141028.,  125012.,  126820.,
      128628.,  130436., 266296., 270040., 273784.,  277528.,  424364.,
      430172.,  435980., 441788., 447596., 453404.,  459212.,  465020.,
      470828.,  476636., 482444., 488252., 494060.,  499868.,  505676.,
      511484.,  517292., 523100., 528908., 534716.,  364888.,  368888.,
      372888.,  376888., 192628., 194692., 196756.,  198820.,  175636.,
      177444.,  179252., 181060., 371128., 374872.,  378616.,  382360.,
      586988.,  592796., 598604., 604412., 610220.,  616028.,  621836.,
      627644.,  633452., 639260., 645068., 650876.,  656684.,  662492.,
      668300.,  674108., 679916., 685724., 691532.,  697340.,  476888.,
      480888.,  484888., 488888., 250420., 252484.,  254548.,  256612.,
      226260.,  228068., 229876., 231684., 475960.,  479704.,  483448.,
      487192.,  749612., 755420., 761228., 767036.,  772844.,  778652.,
      784460.,  790268., 796076., 801884., 807692.,  813500.,  819308.,
      825116.,  830924., 836732., 842540., 848348.,  854156.,  859964.,
      588888.,  592888., 596888., 600888., 308212.,  310276.,  312340.,
      314404.,  276884., 278692., 280500., 282308.,  580792.,  584536.,
      588280.,  592024., 912236., 918044., 923852.,  929660.,  935468.,
      941276.,  947084., 952892., 958700., 964508.,  970316.,  976124.,
      981932.,  987740., 993548., 999356., 1005164., 1010972., 1016780.,
      1022588., 700888., 704888., 708888., 712888.,  366004.,  368068.,
      370132.,  372196., 168630., 169630., 170630.,  171630.,  352052.,
      354116.,  356180., 358244., 550522., 553714.,  556906.,  560098.,
      563290.,  566482., 569674., 572866., 576058.,  579250.,  582442.,
      585634.,  588826., 592018., 595210., 598402.,  601594.,  604786.,
      607978.,  611170., 417732., 419924., 422116.,  424308.,  217286.,
      218414.,  219542., 220670.};
  const std::array<int, 4> in_shape = {{3, 8, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,   3070.,   4046.,   5152.,   5558.,   5964.,   6370.,   5930.,
      5340.,   4596.,   4600.,   6225.,   8050.,   10080.,  10710.,  11340.,
      11970.,  10975.,  9750.,   8290.,   8270.,   11035.,  14091.,  17444.,
      18347.,  19250.,  20153.,  18285.,  16090.,  13562.,  13510.,  17850.,
      22589.,  27734.,  28959.,  30184.,  31409.,  28280.,  24710.,  20692.,
      20090.,  26250.,  32879.,  39984.,  41209.,  42434.,  43659.,  38990.,
      33810.,  28112.,  25850.,  33415.,  41433.,  49910.,  51107.,  52304.,
      53501.,  47355.,  40720.,  33590.,  29200.,  37525.,  46270.,  55440.,
      56560.,  57680.,  58800.,  51775.,  44300.,  36370.,  29860.,  38230.,
      46970.,  56084.,  57078.,  58072.,  59066.,  51830.,  44200.,  36172.,
      18860.,  24670.,  30926.,  37632.,  38038.,  38444.,  38850.,  34730.,
      30140.,  25076.,  31000.,  40225.,  50050.,  60480.,  61110.,  61740.,
      62370.,  55375.,  47750.,  39490.,  46670.,  60235.,  74571.,  89684.,
      90587.,  91490.,  92393.,  81645.,  70090.,  57722.,  66150.,  85050.,
      104909., 125734., 126959., 128184., 129409., 113960., 97510.,  80052.,
      72730.,  93450.,  115199., 137984., 139209., 140434., 141659., 124670.,
      106610., 87472.,  77690.,  99415.,  122073., 145670., 146867., 148064.,
      149261., 130875., 111520., 91190.,  78000.,  99525.,  121870., 145040.,
      146160., 147280., 148400., 129775., 110300., 89970.,  73380.,  93430.,
      114170., 135604., 136598., 137592., 138586., 120950., 102600., 83532.,
      35500.,  46270.,  57806.,  70112.,  70518.,  70924.,  71330.,  63530.,
      54940.,  45556.,  57400.,  74225.,  92050.,  110880., 111510., 112140.,
      112770., 99775.,  85750.,  70690.,  85070.,  109435., 135051., 161924.,
      162827., 163730., 164633., 145005., 124090., 101882., 118790., 152250.,
      187229., 223734., 224959., 226184., 227409., 199640., 170310., 139412.,
      125370., 160650., 197519., 235984., 237209., 238434., 239659., 210350.,
      179410., 146832., 129530., 165415., 202713., 241430., 242627., 243824.,
      245021., 214395., 182320., 148790., 126800., 161525., 197470., 234640.,
      235760., 236880., 238000., 207775., 176300., 143570., 116900., 148630.,
      181370., 215124., 216118., 217112., 218106., 190070., 161000., 130892.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   20.,   30.,   40.,   50.,   52.,   45.,   28.,
      13.,   41.,   86.,   150.,  186.,  222.,  258.,  239.,  191.,  112.,
      55.,   139.,  254.,  402.,  438.,  474.,  510.,  449.,  345.,  196.,
      97.,   237.,  422.,  654.,  690.,  726.,  762.,  659.,  499.,  280.,
      139.,  335.,  590.,  906.,  942.,  978.,  1014., 869.,  653.,  364.,
      181.,  433.,  758.,  1158., 1194., 1230., 1266., 1079., 807.,  448.,
      223.,  531.,  926.,  1410., 1446., 1482., 1518., 1289., 961.,  532.,
      215.,  478.,  790.,  1152., 1178., 1204., 1230., 1006., 727.,  392.,
      9.,    28.,   58.,   100.,  142.,  184.,  226.,  196.,  149.,  84.,
      85.,   201.,  350.,  534.,  634.,  734.,  834.,  695.,  511.,  280.,
      239.,  523.,  854.,  1234., 1334., 1434., 1534., 1241., 889.,  476.,
      393.,  845.,  1358., 1934., 2034., 2134., 2234., 1787., 1267., 672.,
      547.,  1167., 1862., 2634., 2734., 2834., 2934., 2333., 1645., 868.,
      701.,  1489., 2366., 3334., 3434., 3534., 3634., 2879., 2023., 1064.,
      855.,  1811., 2870., 4034., 4134., 4234., 4334., 3425., 2401., 1260.,
      559.,  1174., 1846., 2576., 2634., 2692., 2750., 2158., 1503., 784.,
      17.,   52.,   106.,  180.,  254.,  328.,  402.,  340.,  253.,  140.,
      157.,  361.,  614.,  918.,  1082., 1246., 1410., 1151., 831.,  448.,
      423.,  907.,  1454., 2066., 2230., 2394., 2558., 2033., 1433., 756.,
      689.,  1453., 2294., 3214., 3378., 3542., 3706., 2915., 2035., 1064.,
      955.,  1999., 3134., 4362., 4526., 4690., 4854., 3797., 2637., 1372.,
      1221., 2545., 3974., 5510., 5674., 5838., 6002., 4679., 3239., 1680.,
      1487., 3091., 4814., 6658., 6822., 6986., 7150., 5561., 3841., 1988.,
      903.,  1870., 2902., 4000., 4090., 4180., 4270., 3310., 2279., 1176.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,   23320.,   30832.,   39368.,   42560.,   45752.,   48944.,
      45664.,   41200.,   35520.,   35260.,   47825.,   61970.,   77735.,
      82705.,   87675.,   92645.,   85070.,   75675.,   64420.,   63904.,
      85400.,   109200.,  135352.,  142492.,  149632.,  156772.,  142392.,
      125420.,  105808.,  104972.,  138845.,  175882.,  216139.,  225841.,
      235543.,  245245.,  220990.,  193235.,  161924.,  157052.,  205345.,
      257362.,  313159.,  322861.,  332563.,  342265.,  305830.,  265335.,
      220724.,  203248.,  262820.,  325992.,  392812.,  402304.,  411796.,
      421288.,  373008.,  320840.,  264736.,  230300.,  296025.,  365090.,
      437535.,  446425.,  455315.,  464205.,  408830.,  349875.,  287300.,
      235968.,  302160.,  371296.,  443408.,  451304.,  459200.,  467096.,
      409936.,  349640.,  286176.,  147360.,  192920.,  242032.,  294728.,
      297920.,  301112.,  304304.,  272224.,  236400.,  196800.,  243260.,
      315825.,  393170.,  475335.,  480305.,  485275.,  490245.,  435470.,
      375675.,  310820.,  367264.,  474200.,  587280.,  706552.,  713692.,
      720832.,  727972.,  643512.,  552620.,  455248.,  521612.,  670845.,
      827722.,  992299.,  1002001., 1011703., 1021405., 899710.,  770035.,
      632324.,  573692.,  737345.,  909202.,  1089319., 1099021., 1108723.,
      1118425., 984550.,  842135.,  691124.,  614128.,  786020.,  965352.,
      1152172., 1161664., 1171156., 1180648., 1035408., 882440.,  721696.,
      617500.,  788025.,  965090.,  1148735., 1157625., 1166515., 1175405.,
      1028030., 873875.,  712900.,  581568.,  740560.,  905056.,  1075088.,
      1082984., 1090880., 1098776., 959056.,  813640.,  662496.,  277920.,
      362520.,  453232.,  550088.,  553280.,  556472.,  559664.,  498784.,
      431600.,  358080.,  451260.,  583825.,  724370.,  872935.,  877905.,
      882875.,  887845.,  785870.,  675675.,  557220.,  670624.,  863000.,
      1065360., 1277752., 1284892., 1292032., 1299172., 1144632., 979820.,
      804688.,  938252.,  1202845., 1479562., 1768459., 1778161., 1787863.,
      1797565., 1578430., 1346835., 1102724., 990332.,  1269345., 1561042.,
      1865479., 1875181., 1884883., 1894585., 1663270., 1418935., 1161524.,
      1025008., 1309220., 1604712., 1911532., 1921024., 1930516., 1940008.,
      1697808., 1444040., 1178656., 1004700., 1280025., 1565090., 1859935.,
      1868825., 1877715., 1886605., 1647230., 1397875., 1138500., 927168.,
      1178960., 1438816., 1706768., 1714664., 1722560., 1730456., 1508176.,
      1277640., 1038816.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,   196.,   268.,   340.,   365.,   322.,
      203.,   76.,    264.,   580.,   1040.,  1312.,  1584.,  1856.,  1744.,
      1408.,  832.,   384.,   992.,   1840.,  2944.,  3216.,  3488.,  3760.,
      3340.,  2584.,  1476.,  692.,   1720.,  3100.,  4848.,  5120.,  5392.,
      5664.,  4936.,  3760.,  2120.,  1000.,  2448.,  4360.,  6752.,  7024.,
      7296.,  7568.,  6532.,  4936.,  2764.,  1308.,  3176.,  5620.,  8656.,
      8928.,  9200.,  9472.,  8128.,  6112.,  3408.,  1616.,  3904.,  6880.,
      10560., 10832., 11104., 11376., 9724.,  7288.,  4052.,  1625.,  3630.,
      6023.,  8812.,  9012.,  9212.,  9412.,  7721.,  5594.,  3023.,  53.,
      182.,   395.,   700.,   1028.,  1356.,  1684.,  1469.,  1122.,  635.,
      620.,   1480.,  2596.,  3984.,  4768.,  5552.,  6336.,  5296.,  3904.,
      2144.,  1824.,  4000.,  6544.,  9472.,  10256., 11040., 11824., 9580.,
      6872.,  3684.,  3028.,  6520.,  10492., 14960., 15744., 16528., 17312.,
      13864., 9840.,  5224.,  4232.,  9040.,  14440., 20448., 21232., 22016.,
      22800., 18148., 12808., 6764.,  5436.,  11560., 18388., 25936., 26720.,
      27504., 28288., 22432., 15776., 8304.,  6640.,  14080., 22336., 31424.,
      32208., 32992., 33776., 26716., 18744., 9844.,  4361.,  9166.,  14423.,
      20140., 20596., 21052., 21508., 16889., 11770., 6143.,  101.,   342.,
      731.,   1276.,  1860.,  2444.,  3028.,  2573.,  1922.,  1067.,  1164.,
      2696.,  4612.,  6928.,  8224.,  9520.,  10816., 8848.,  6400.,  3456.,
      3264.,  7008.,  11248., 16000., 17296., 18592., 19888., 15820., 11160.,
      5892.,  5364.,  11320., 17884., 25072., 26368., 27664., 28960., 22792.,
      15920., 8328.,  7464.,  15632., 24520., 34144., 35440., 36736., 38032.,
      29764., 20680., 10764., 9564.,  19944., 31156., 43216., 44512., 45808.,
      47104., 36736., 25440., 13200., 11664., 24256., 37792., 52288., 53584.,
      54880., 56176., 43708., 30200., 15636., 7097.,  14702., 22823., 31468.,
      32180., 32892., 33604., 26057., 17946., 9263.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,   181640.,   240560.,   307608.,   332920.,   358232.,
      383544.,   358256.,   323560.,   279200.,   275960.,   374750.,
      486100.,   610330.,   649810.,   689290.,   728770.,   669700.,
      596150.,   507800.,   502256.,   671740.,   859560.,   1066100.,
      1122884.,  1179668.,  1236452.,  1123656.,  990220.,   835760.,
      827400.,   1095010.,  1387820.,  1706278.,  1783502.,  1860726.,
      1937950.,  1747004.,  1528170.,  1281000.,  1241800.,  1624210.,
      2036300.,  2478518.,  2555742.,  2632966.,  2710190.,  2422364.,
      2102170.,  1749160.,  1611824.,  2084620.,  2586120.,  3116708.,
      3192308.,  3267908.,  3343508.,  2960808.,  2547100.,  2102000.,
      1829240.,  2351550.,  2900500.,  3476410.,  3547250.,  3618090.,
      3688930.,  3249220.,  2780950.,  2283800.,  1876128.,  2402600.,
      2952560.,  3526264.,  3589208.,  3652152.,  3715096.,  3260720.,
      2781320.,  2276640.,  1164832.,  1525640.,  1914800.,  2332568.,
      2357880.,  2383192.,  2408504.,  2155376.,  1872360.,  1559200.,
      1927160.,  2502750.,  3116500.,  3768730.,  3808210.,  3847690.,
      3887170.,  3453700.,  2980150.,  2466200.,  2913776.,  3762940.,
      4661160.,  5608820.,  5665604.,  5722388.,  5779172.,  5109576.,
      4388620.,  3615920.,  4142600.,  5328610.,  6575660.,  7884198.,
      7961422.,  8038646.,  8115870.,  7149884.,  6120170.,  5026280.,
      4557000.,  5857810.,  7224140.,  8656438.,  8733662.,  8810886.,
      8888110.,  7825244.,  6694170.,  5494440.,  4883504.,  6251020.,
      7677960.,  9164708.,  9240308.,  9315908.,  9391508.,  8236968.,
      7020700.,  5742320.,  4914040.,  6271550.,  7681300.,  9143610.,
      9214450.,  9285290.,  9356130.,  8183620.,  6956950.,  5675800.,
      4630688.,  5897000.,  7207280.,  8561784.,  8624728.,  8687672.,
      8750616.,  7638320.,  6480520.,  5276960.,  2199072.,  2869640.,
      3589040.,  4357528.,  4382840.,  4408152.,  4433464.,  3952496.,
      3421160.,  2839200.,  3578360.,  4630750.,  5746900.,  6927130.,
      6966610.,  7006090.,  7045570.,  6237700.,  5364150.,  4424600.,
      5325296.,  6854140.,  8462760.,  10151540., 10208324., 10265108.,
      10321892., 9095496.,  7787020.,  6396080.,  7457800.,  9562210.,
      11763500., 14062118., 14139342., 14216566., 14293790., 12552764.,
      10712170., 8771560.,  7872200.,  10091410., 12411980., 14834358.,
      14911582., 14988806., 15066030., 13228124., 11286170., 9239720.,
      8155184.,  10417420., 12769800., 15212708., 15288308., 15363908.,
      15439508., 13513128., 11494300., 9382640.,  7998840.,  10191550.,
      12462100., 14810810., 14881650., 14952490., 15023330., 13118020.,
      11132950., 9067800.,  7385248.,  9391400.,  11462000., 13597304.,
      13660248., 13723192., 13786136., 12015920., 10179720., 8277280.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    856.,    1400.,   1944.,   2488.,   2722.,
      2428.,   1542.,   500.,    1864.,   4220.,   7696.,   9808.,   11920.,
      14032.,  13292.,  10792.,  6404.,   2852.,   7464.,   13964.,  22480.,
      24592.,  26704.,  28816.,  25724.,  19976.,  11444.,  5204.,   13064.,
      23708.,  37264.,  39376.,  41488.,  43600.,  38156.,  29160.,  16484.,
      7556.,   18664.,  33452.,  52048.,  54160.,  56272.,  58384.,  50588.,
      38344.,  21524.,  9908.,   24264.,  43196.,  66832.,  68944.,  71056.,
      73168.,  63020.,  47528.,  26564.,  12260.,  29864.,  52940.,  81616.,
      83728.,  85840.,  87952.,  75452.,  56712.,  31604.,  12622.,  28268.,
      47002.,  68888.,  70456.,  72024.,  73592.,  60466.,  43868.,  23734.,
      350.,    1292.,   2890.,   5208.,   7800.,   10392.,  12984.,  11362.,
      8700.,   4934.,   4724.,   11336.,  19964.,  30736.,  36944.,  43152.,
      49360.,  41324.,  30504.,  16772.,  14244.,  31272.,  51212.,  74192.,
      80400.,  86608.,  92816.,  75260.,  54024.,  28980.,  23764.,  51208.,
      82460.,  117648., 123856., 130064., 136272., 109196., 77544.,  41188.,
      33284.,  71144.,  113708., 161104., 167312., 173520., 179728., 143132.,
      101064., 53396.,  42804.,  91080.,  144956., 204560., 210768., 216976.,
      223184., 177068., 124584., 65604.,  52324.,  111016., 176204., 248016.,
      254224., 260432., 266640., 211004., 148104., 77812.,  34446.,  72428.,
      114010., 159256., 162872., 166488., 170104., 133618., 93148.,  48630.,
      670.,    2444.,   5386.,   9560.,   14200.,  18840.,  23480.,  20002.,
      14972.,  8326.,   8948.,   20808.,  35708.,  53776.,  64080.,  74384.,
      84688.,  69356.,  50216.,  27140.,  25636.,  55080.,  88460.,  125904.,
      136208., 146512., 156816., 124796., 88072.,  46516.,  42324.,  89352.,
      141212., 198032., 208336., 218640., 228944., 180236., 125928., 65892.,
      59012.,  123624., 193964., 270160., 280464., 290768., 301072., 235676.,
      163784., 85268.,  75700.,  157896., 246716., 342288., 352592., 362896.,
      373200., 291116., 201640., 104644., 92388.,  192168., 299468., 414416.,
      424720., 435024., 445328., 346556., 239496., 124020., 56270.,  116588.,
      181018., 249624., 255288., 260952., 266616., 206770., 142428., 73526.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  50560.,  51700.,  65390.,  66830.,
      81120.,  82866.,  97762.,  99820.,  100114., 102214., 102466., 104608.,
      104818., 107002., 92820.,  94710.,  79850.,  81440.,  65896.,  67180.,
      57350.,  58400.,  73725.,  75050.,  90935.,  92540.,  108990., 110880.,
      111195., 113120., 113400., 115360., 115605., 117600., 101825., 103550.,
      87150.,  88600.,  71570.,  72740.,  58800.,  59720.,  75300.,  76460.,
      92536.,  93940.,  110516., 112168., 112476., 114156., 114436., 116144.,
      116396., 118132., 102160., 103660., 87140.,  88400.,  71328.,  72344.,
      36160.,  37720.,  47380.,  49340.,  59488.,  61852.,  72492.,  75264.,
      73276.,  76076.,  74060.,  76888.,  74844.,  77700.,  67000.,  69460.,
      58220.,  60280.,  48496.,  50152.,  59950.,  62000.,  77875.,  80450.,
      96995.,  100100., 117320., 120960., 118545., 122220., 119770., 123480.,
      120995., 124740., 107525., 110750., 92800.,  95500.,  76810.,  78980.,
      90760.,  93340.,  117230., 120470., 145236., 149142., 174790., 179368.,
      176554., 181174., 178318., 182980., 180082., 184786., 159240., 163290.,
      136790., 140180., 112720., 115444., 129150., 132300., 166145., 170100.,
      205051., 209818., 245882., 251468., 248283., 253918., 250684., 256368.,
      253085., 258818., 222985., 227920., 190890., 195020., 156786., 160104.,
      142030., 145460., 182595., 186900., 225211., 230398., 269892., 275968.,
      272293., 278418., 274694., 280868., 277095., 283318., 243985., 249340.,
      208740., 213220., 171346., 174944., 152320., 155380., 194990., 198830.,
      239520., 244146., 285922., 291340., 288274., 293734., 290626., 296128.,
      292978., 298522., 256980., 261750., 219050., 223040., 179176., 182380.,
      153350., 156000., 195725., 199050., 239735., 243740., 285390., 290080.,
      287595., 292320., 289800., 294560., 292005., 296800., 255425., 259550.,
      217150., 220600., 177170., 179940., 144560., 146760., 184100., 186860.,
      225016., 228340., 267316., 271208., 269276., 273196., 271236., 275184.,
      273196., 277172., 238480., 241900., 202340., 205200., 164768., 167064.,
      68160.,  71000.,  88980.,  92540.,  111328., 115612., 135212., 140224.,
      135996., 141036., 136780., 141848., 137564., 142660., 122680., 127060.,
      106220., 109880., 88176.,  91112.,  111150., 114800., 143875., 148450.,
      178595., 184100., 215320., 221760., 216545., 223020., 217770., 224280.,
      218995., 225540., 193925., 199550., 166800., 171500., 137610., 141380.,
      165640., 170140., 213230., 218870., 263316., 270102., 315910., 323848.,
      317674., 325654., 319438., 327460., 321202., 329266., 283080., 290010.,
      242390., 248180., 199120., 203764., 232190., 237580., 297745., 304500.,
      366331., 374458., 437962., 447468., 440363., 449918., 442764., 452368.,
      445165., 454818., 390985., 399280., 333690., 340620., 273266., 278824.,
      245070., 250740., 314195., 321300., 386491., 395038., 461972., 471968.,
      464373., 474418., 466774., 476868., 469175., 479318., 411985., 420700.,
      351540., 358820., 287826., 293664., 254080., 259060., 324590., 330830.,
      397920., 405426., 474082., 482860., 476434., 485254., 478786., 487648.,
      481138., 490042., 421140., 428790., 358250., 364640., 292456., 297580.,
      249350., 253600., 317725., 323050., 388535., 394940., 461790., 469280.,
      463995., 471520., 466200., 473760., 468405., 476000., 409025., 415550.,
      347150., 352600., 282770., 287140., 230320., 233800., 292900., 297260.,
      357496., 362740., 424116., 430248., 426076., 432236., 428036., 434224.,
      429996., 436212., 374800., 380140., 317540., 322000., 258208., 261784.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     14.,    20.,    30.,    40.,    50.,
      60.,    70.,    80.,    90.,    100.,   95.,    104.,   83.,    90.,
      52.,    56.,    20.,    26.,    68.,    82.,    148.,   172.,   264.,
      300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,
      360.,   382.,   212.,   224.,   104.,   110.,   264.,   278.,   484.,
      508.,   768.,   804.,   840.,   876.,   912.,   948.,   984.,   1020.,
      868.,   898.,   668.,   690.,   380.,   392.,   188.,   194.,   460.,
      474.,   820.,   844.,   1272.,  1308.,  1344.,  1380.,  1416.,  1452.,
      1488.,  1524.,  1288.,  1318.,  976.,   998.,   548.,   560.,   272.,
      278.,   656.,   670.,   1156.,  1180.,  1776.,  1812.,  1848.,  1884.,
      1920.,  1956.,  1992.,  2028.,  1708.,  1738.,  1284.,  1306.,  716.,
      728.,   356.,   362.,   852.,   866.,   1492.,  1516.,  2280.,  2316.,
      2352.,  2388.,  2424.,  2460.,  2496.,  2532.,  2128.,  2158.,  1592.,
      1614.,  884.,   896.,   440.,   446.,   1048.,  1062.,  1828.,  1852.,
      2784.,  2820.,  2856.,  2892.,  2928.,  2964.,  3000.,  3036.,  2548.,
      2578.,  1900.,  1922.,  1052.,  1064.,  425.,   430.,   945.,   956.,
      1562.,  1580.,  2278.,  2304.,  2330.,  2356.,  2382.,  2408.,  2434.,
      2460.,  1991.,  2012.,  1439.,  1454.,  776.,   784.,   9.,     18.,
      37.,    56.,    86.,    116.,   158.,   200.,   242.,   284.,   326.,
      368.,   410.,   452.,   359.,   392.,   275.,   298.,   156.,   168.,
      148.,   170.,   356.,   402.,   628.,   700.,   968.,   1068.,  1168.,
      1268.,  1368.,  1468.,  1568.,  1668.,  1312.,  1390.,  968.,   1022.,
      532.,   560.,   456.,   478.,   1000.,  1046.,  1636.,  1708.,  2368.,
      2468.,  2568.,  2668.,  2768.,  2868.,  2968.,  3068.,  2404.,  2482.,
      1724.,  1778.,  924.,   952.,   764.,   786.,   1644.,  1690.,  2644.,
      2716.,  3768.,  3868.,  3968.,  4068.,  4168.,  4268.,  4368.,  4468.,
      3496.,  3574.,  2480.,  2534.,  1316.,  1344.,  1072.,  1094.,  2288.,
      2334.,  3652.,  3724.,  5168.,  5268.,  5368.,  5468.,  5568.,  5668.,
      5768.,  5868.,  4588.,  4666.,  3236.,  3290.,  1708.,  1736.,  1380.,
      1402.,  2932.,  2978.,  4660.,  4732.,  6568.,  6668.,  6768.,  6868.,
      6968.,  7068.,  7168.,  7268.,  5680.,  5758.,  3992.,  4046.,  2100.,
      2128.,  1688.,  1710.,  3576.,  3622.,  5668.,  5740.,  7968.,  8068.,
      8168.,  8268.,  8368.,  8468.,  8568.,  8668.,  6772.,  6850.,  4748.,
      4802.,  2492.,  2520.,  1105.,  1118.,  2321.,  2348.,  3650.,  3692.,
      5094.,  5152.,  5210.,  5268.,  5326.,  5384.,  5442.,  5500.,  4271.,
      4316.,  2975.,  3006.,  1552.,  1568.,  17.,    34.,    69.,    104.,
      158.,   212.,   286.,   360.,   434.,   508.,   582.,   656.,   730.,
      804.,   623.,   680.,   467.,   506.,   260.,   280.,   276.,   314.,
      644.,   722.,   1108.,  1228.,  1672.,  1836.,  2000.,  2164.,  2328.,
      2492.,  2656.,  2820.,  2176.,  2302.,  1576.,  1662.,  852.,   896.,
      808.,   846.,   1736.,  1814.,  2788.,  2908.,  3968.,  4132.,  4296.,
      4460.,  4624.,  4788.,  4952.,  5116.,  3940.,  4066.,  2780.,  2866.,
      1468.,  1512.,  1340.,  1378.,  2828.,  2906.,  4468.,  4588.,  6264.,
      6428.,  6592.,  6756.,  6920.,  7084.,  7248.,  7412.,  5704.,  5830.,
      3984.,  4070.,  2084.,  2128.,  1872.,  1910.,  3920.,  3998.,  6148.,
      6268.,  8560.,  8724.,  8888.,  9052.,  9216.,  9380.,  9544.,  9708.,
      7468.,  7594.,  5188.,  5274.,  2700.,  2744.,  2404.,  2442.,  5012.,
      5090.,  7828.,  7948.,  10856., 11020., 11184., 11348., 11512., 11676.,
      11840., 12004., 9232.,  9358.,  6392.,  6478.,  3316.,  3360.,  2936.,
      2974.,  6104.,  6182.,  9508.,  9628.,  13152., 13316., 13480., 13644.,
      13808., 13972., 14136., 14300., 10996., 11122., 7596.,  7682.,  3932.,
      3976.,  1785.,  1806.,  3697.,  3740.,  5738.,  5804.,  7910.,  8000.,
      8090.,  8180.,  8270.,  8360.,  8450.,  8540.,  6551.,  6620.,  4511.,
      4558.,  2328.,  2352.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,   34144.,   44500.,   47340.,   59024.,   62528.,   75572.,
      79772.,   81788.,   86212.,   88004.,   92652.,   94220.,   99092.,
      88112.,   92384.,   79660.,   83300.,   68800.,   71776.,   67840.,
      71400.,   92225.,   96775.,   119740.,  125320.,  150465.,  157115.,
      160195.,  167125.,  169925.,  177135.,  179655.,  187145.,  165220.,
      171760.,  147175.,  152725.,  125440.,  129960.,  123872.,  129104.,
      165790.,  172450.,  212280.,  220416.,  263438.,  273098.,  277466.,
      287462.,  291494.,  301826.,  305522.,  316190.,  277800.,  287088.,
      244930.,  252790.,  206816.,  213200.,  204512.,  211736.,  270795.,
      279965.,  343364.,  354536.,  422331.,  435561.,  441441.,  455063.,
      460551.,  474565.,  479661.,  494067.,  432572.,  445088.,  378525.,
      389095.,  317408.,  325976.,  306992.,  316456.,  401695.,  413665.,
      503804.,  518336.,  613431.,  630581.,  632541.,  650083.,  651651.,
      669585.,  670761.,  689087.,  599732.,  615608.,  520625.,  533995.,
      433328.,  444136.,  399680.,  408752.,  517030.,  528490.,  641544.,
      655440.,  773318.,  789698.,  792050.,  808766.,  810782.,  827834.,
      829514.,  846902.,  734712.,  749760.,  632170.,  644830.,  521792.,
      532016.,  454320.,  462680.,  584125.,  594675.,  720580.,  733360.,
      863765.,  878815.,  881335.,  896665.,  898905.,  914515.,  916475.,
      932365.,  807340.,  821080.,  691075.,  702625.,  567600.,  576920.,
      466432.,  473760.,  597380.,  606620.,  734192.,  745376.,  876932.,
      890092.,  892556.,  905940.,  908180.,  921788.,  923804.,  937636.,
      810896.,  822848.,  691740.,  701780.,  566272.,  574368.,  285376.,
      297824.,  374100.,  389740.,  469904.,  488768.,  572852.,  594972.,
      579068.,  601412.,  585284.,  607852.,  591500.,  614292.,  529712.,
      549344.,  460460.,  476900.,  383680.,  396896.,  474240.,  490600.,
      616225.,  636775.,  767740.,  792520.,  928865.,  957915.,  938595.,
      967925.,  948325.,  977935.,  958055.,  987945.,  851620.,  877360.,
      735175.,  756725.,  608640.,  625960.,  719072.,  739664.,  928990.,
      954850.,  1151160., 1182336., 1385678., 1422218., 1399706., 1436582.,
      1413734., 1450946., 1427762., 1465310., 1262760., 1295088., 1084930.,
      1111990., 894176.,  915920.,  1024352., 1049496., 1317995., 1349565.,
      1626884., 1664936., 1951131., 1995721., 1970241., 2015223., 1989351.,
      2034725., 2008461., 2054227., 1769852., 1809248., 1515325., 1548295.,
      1244768., 1271256., 1126832., 1154216., 1448895., 1483265., 1787324.,
      1828736., 2142231., 2190741., 2161341., 2210243., 2180451., 2229745.,
      2199561., 2249247., 1937012., 1979768., 1657425., 1693195., 1360688.,
      1389416., 1209920., 1234352., 1549030., 1579690., 1902984., 1939920.,
      2271878., 2315138., 2290610., 2334206., 2309342., 2353274., 2328074.,
      2372342., 2042232., 2080320., 1740970., 1772830., 1424192., 1449776.,
      1219120., 1240280., 1556125., 1582675., 1906180., 1938160., 2269365.,
      2306815., 2286935., 2324665., 2304505., 2342515., 2322075., 2360365.,
      2031340., 2064280., 1727075., 1754625., 1409200., 1431320., 1149952.,
      1167520., 1464580., 1486620., 1790192., 1816736., 2126852., 2157932.,
      2142476., 2173780., 2158100., 2189628., 2173724., 2205476., 1897616.,
      1924928., 1610140., 1632980., 1311232., 1329568., 538816.,  561504.,
      703700.,  732140.,  880784.,  915008.,  1070132., 1110172., 1076348.,
      1116612., 1082564., 1123052., 1088780., 1129492., 971312.,  1006304.,
      841260.,  870500.,  698560.,  722016.,  880640.,  909800.,  1140225.,
      1176775., 1415740., 1459720., 1707265., 1758715., 1716995., 1768725.,
      1726725., 1778735., 1736455., 1788745., 1538020., 1582960., 1323175.,
      1360725., 1091840., 1121960., 1314272., 1350224., 1692190., 1737250.,
      2090040., 2144256., 2507918., 2571338., 2521946., 2585702., 2535974.,
      2600066., 2550002., 2614430., 2247720., 2303088., 1924930., 1971190.,
      1581536., 1618640., 1844192., 1887256., 2365195., 2419165., 2910404.,
      2975336., 3479931., 3555881., 3499041., 3575383., 3518151., 3594885.,
      3537261., 3614387., 3107132., 3173408., 2652125., 2707495., 2172128.,
      2216536., 1946672., 1991976., 2496095., 2552865., 3070844., 3139136.,
      3671031., 3750901., 3690141., 3770403., 3709251., 3789905., 3728361.,
      3809407., 3274292., 3343928., 2794225., 2852395., 2288048., 2334696.,
      2020160., 2059952., 2581030., 2630890., 3164424., 3224400., 3770438.,
      3840578., 3789170., 3859646., 3807902., 3878714., 3826634., 3897782.,
      3349752., 3410880., 2849770., 2900830., 2326592., 2367536., 1983920.,
      2017880., 2528125., 2570675., 3091780., 3142960., 3674965., 3734815.,
      3692535., 3752665., 3710105., 3770515., 3727675., 3788365., 3255340.,
      3307480., 2763075., 2806625., 2250800., 2285720., 1833472., 1861280.,
      2331780., 2366620., 2846192., 2888096., 3376772., 3425772., 3392396.,
      3441620., 3408020., 3457468., 3423644., 3473316., 2984336., 3027008.,
      2528540., 2564180., 2056192., 2084768.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     28.,     48.,     85.,     127.,    192.,    264.,
      336.,    408.,    480.,    552.,    624.,    696.,    679.,    745.,
      604.,    656.,    383.,    413.,    118.,    162.,    448.,    552.,
      1022.,   1202.,   1872.,   2144.,   2416.,   2688.,   2960.,   3232.,
      3504.,   3776.,   3314.,   3542.,   2688.,   2856.,   1594.,   1686.,
      734.,    778.,    1904.,   2008.,   3542.,   3722.,   5680.,   5952.,
      6224.,   6496.,   6768.,   7040.,   7312.,   7584.,   6506.,   6734.,
      5040.,   5208.,   2882.,   2974.,   1350.,   1394.,   3360.,   3464.,
      6062.,   6242.,   9488.,   9760.,   10032.,  10304.,  10576.,  10848.,
      11120.,  11392.,  9698.,   9926.,   7392.,   7560.,   4170.,   4262.,
      1966.,   2010.,   4816.,   4920.,   8582.,   8762.,   13296.,  13568.,
      13840.,  14112.,  14384.,  14656.,  14928.,  15200.,  12890.,  13118.,
      9744.,   9912.,   5458.,   5550.,   2582.,   2626.,   6272.,   6376.,
      11102.,  11282.,  17104.,  17376.,  17648.,  17920.,  18192.,  18464.,
      18736.,  19008.,  16082.,  16310.,  12096.,  12264.,  6746.,   6838.,
      3198.,   3242.,   7728.,   7832.,   13622.,  13802.,  20912.,  21184.,
      21456.,  21728.,  22000.,  22272.,  22544.,  22816.,  19274.,  19502.,
      14448.,  14616.,  8034.,   8126.,   3221.,   3259.,   7196.,   7280.,
      11941.,  12079.,  17472.,  17672.,  17872.,  18072.,  18272.,  18472.,
      18672.,  18872.,  15319.,  15481.,  11100.,  11216.,  5999.,   6061.,
      53.,     123.,    252.,    400.,    613.,    847.,    1152.,   1480.,
      1808.,   2136.,   2464.,   2792.,   3120.,   3448.,   2743.,   3001.,
      2108.,   2288.,   1199.,   1293.,   1110.,   1282.,   2688.,   3048.,
      4766.,   5330.,   7376.,   8160.,   8944.,   9728.,   10512.,  11296.,
      12080.,  12864.,  10130.,  10742.,  7488.,   7912.,   4122.,   4342.,
      3518.,   3690.,   7728.,   8088.,   12662.,  13226.,  18352.,  19136.,
      19920.,  20704.,  21488.,  22272.,  23056.,  23840.,  18698.,  19310.,
      13424.,  13848.,  7202.,   7422.,   5926.,   6098.,   12768.,  13128.,
      20558.,  21122.,  29328.,  30112.,  30896.,  31680.,  32464.,  33248.,
      34032.,  34816.,  27266.,  27878.,  19360.,  19784.,  10282.,  10502.,
      8334.,   8506.,   17808.,  18168.,  28454.,  29018.,  40304.,  41088.,
      41872.,  42656.,  43440.,  44224.,  45008.,  45792.,  35834.,  36446.,
      25296.,  25720.,  13362.,  13582.,  10742.,  10914.,  22848.,  23208.,
      36350.,  36914.,  51280.,  52064.,  52848.,  53632.,  54416.,  55200.,
      55984.,  56768.,  44402.,  45014.,  31232.,  31656.,  16442.,  16662.,
      13150.,  13322.,  27888.,  28248.,  44246.,  44810.,  62256.,  63040.,
      63824.,  64608.,  65392.,  66176.,  66960.,  67744.,  52970.,  53582.,
      37168.,  37592.,  19522.,  19742.,  8645.,   8747.,   18172.,  18384.,
      28597.,  28927.,  39936.,  40392.,  40848.,  41304.,  41760.,  42216.,
      42672.,  43128.,  33511.,  33865.,  23356.,  23600.,  12191.,  12317.,
      101.,    235.,    476.,    752.,    1141.,   1567.,   2112.,   2696.,
      3280.,   3864.,   4448.,   5032.,   5616.,   6200.,   4807.,   5257.,
      3612.,   3920.,   2015.,   2173.,   2102.,   2402.,   4928.,   5544.,
      8510.,   9458.,   12880.,  14176.,  15472.,  16768.,  18064.,  19360.,
      20656.,  21952.,  16946.,  17942.,  12288.,  12968.,  6650.,   6998.,
      6302.,   6602.,   13552.,  14168.,  21782.,  22730.,  31024.,  32320.,
      33616.,  34912.,  36208.,  37504.,  38800.,  40096.,  30890.,  31886.,
      21808.,  22488.,  11522.,  11870.,  10502.,  10802.,  22176.,  22792.,
      35054.,  36002.,  49168.,  50464.,  51760.,  53056.,  54352.,  55648.,
      56944.,  58240.,  44834.,  45830.,  31328.,  32008.,  16394.,  16742.,
      14702.,  15002.,  30800.,  31416.,  48326.,  49274.,  67312.,  68608.,
      69904.,  71200.,  72496.,  73792.,  75088.,  76384.,  58778.,  59774.,
      40848.,  41528.,  21266.,  21614.,  18902.,  19202.,  39424.,  40040.,
      61598.,  62546.,  85456.,  86752.,  88048.,  89344.,  90640.,  91936.,
      93232.,  94528.,  72722.,  73718.,  50368.,  51048.,  26138.,  26486.,
      23102.,  23402.,  48048.,  48664.,  74870.,  75818.,  103600., 104896.,
      106192., 107488., 108784., 110080., 111376., 112672., 86666.,  87662.,
      59888.,  60568.,  31010.,  31358.,  14069.,  14235.,  29148.,  29488.,
      45253.,  45775.,  62400.,  63112.,  63824.,  64536.,  65248.,  65960.,
      66672.,  67384.,  51703.,  52249.,  35612.,  35984.,  18383.,  18573.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,   267680.,   349080.,   371640.,   463600.,   491440.,
      594216.,   627592.,   643720.,   678888.,   693224.,   730184.,
      742728.,   781480.,   695152.,   729136.,   628920.,   657880.,
      543520.,   567200.,   534120.,   562440.,   726750.,   762950.,
      944300.,   988700.,   1187410.,  1240330.,  1264970.,  1320130.,
      1342530.,  1399930.,  1420090.,  1479730.,  1306700.,  1358780.,
      1164550.,  1208750.,  993000.,   1029000.,  978352.,   1020016.,
      1310180.,  1363220.,  1678440.,  1743240.,  2083900.,  2160844.,
      2195788.,  2275420.,  2307676.,  2389996.,  2419564.,  2504572.,
      2200872.,  2274888.,  1941140.,  2003780.,  1639600.,  1690480.,
      1618680.,  1676248.,  2144170.,  2217250.,  2719780.,  2808820.,
      3346406.,  3451854.,  3498894.,  3607478.,  3651382.,  3763102.,
      3803870.,  3918726.,  3431428.,  3531220.,  3003490.,  3087770.,
      2519160.,  2587480.,  2436280.,  2511768.,  3188570.,  3284050.,
      3999940.,  4115860.,  4871286.,  5008094.,  5023774.,  5163718.,
      5176262.,  5319342.,  5328750.,  5474966.,  4765348.,  4892020.,
      4137490.,  4244170.,  3444280.,  3530520.,  3178288.,  3250672.,
      4111940.,  4203380.,  5102760.,  5213640.,  6151516.,  6282220.,
      6301036.,  6434428.,  6450556.,  6586636.,  6600076.,  6738844.,
      5846376.,  5966472.,  5030900.,  5131940.,  4152880.,  4234480.,
      3616680.,  3683400.,  4650350.,  4734550.,  5737100.,  5839100.,
      6877570.,  6997690.,  7017850.,  7140210.,  7158130.,  7282730.,
      7298410.,  7425250.,  6429740.,  6539420.,  5504150.,  5596350.,
      4521000.,  4595400.,  3715616.,  3774112.,  4759000.,  4832760.,
      5849200.,  5938480.,  6986728.,  7091784.,  7111496.,  7218344.,
      7236264.,  7344904.,  7361032.,  7471464.,  6461680.,  6557104.,
      5512440.,  5592600.,  4512800.,  4577440.,  2267424.,  2366880.,
      2973080.,  3098040.,  3735280.,  3886000.,  4554536.,  4731272.,
      4604040.,  4782568.,  4653544.,  4833864.,  4703048.,  4885160.,
      4212592.,  4369456.,  3662520.,  3793880.,  3052320.,  3157920.,
      3772520.,  3903240.,  4902750.,  5066950.,  6109100.,  6307100.,
      7392210.,  7624330.,  7469770.,  7704130.,  7542210.,  7770618.,
      7598266.,  7820722.,  6719308.,  6908604.,  5760390.,  5916206.,
      4720872.,  4842888.,  5605808.,  5737584.,  7207140.,  7372820.,
      8889960.,  9089928.,  10655036., 10889676., 10766924., 11004252.,
      10759004., 10990828., 10734700., 10961020., 9393960.,  9586760.,
      7967124.,  8126020.,  6453424.,  6578032.,  7463160.,  7598552.,
      9547050.,  9717410.,  11719972., 11925748., 13982822., 14224462.,
      14135310., 14380086., 14053302., 14293022., 13954910., 14189574.,
      12146948., 12347092., 10244578., 10409754., 8246904.,  8376664.,
      7244472.,  7365016.,  9255130.,  9406930.,  11347396., 11530900.,
      13522166., 13737822., 13674654., 13893446., 13477958., 13691694.,
      13264878., 13473558., 11500452., 11678324., 9649042.,  9795658.,
      7709752.,  7824664.,  6535984.,  6632944.,  8339780.,  8461940.,
      10213032., 10360776., 12156508., 12330220., 12306028., 12482428.,
      11991676., 12162572., 11660940., 11826332., 10053480., 10194056.,
      8371956.,  8487332.,  6615600.,  6705392.,  5237160.,  5307976.,
      6681070.,  6770390.,  8180108.,  8288252.,  9734914.,  9862202.,
      9875194.,  10004722., 9436914.,  9560490.,  8982250.,  9099874.,
      7678764.,  7778204.,  6316310.,  6397246.,  4894248.,  4956360.,
      3312160.,  3354272.,  4234200.,  4287480.,  5194864.,  5259568.,
      6194664.,  6271048.,  6319432.,  6397608.,  5750952.,  5822728.,
      5166088.,  5231464.,  4322544.,  4377008.,  3437304.,  3480600.,
      2509856.,  2541728.,  1057056.,  1107360.,  1398680.,  1462200.,
      1772272.,  1849264.,  2178344.,  2269064.,  2227848.,  2320360.,
      2277352.,  2371656.,  2326856.,  2422952.,  2102128.,  2185264.,
      1842360.,  1912280.,  1547040.,  1603488.,  1829480.,  1898760.,
      2397150.,  2484550.,  3010220.,  3116060.,  3669330.,  3793930.,
      3746890.,  3873730.,  3824450.,  3953530.,  3902010.,  4033330.,
      3495500.,  3609020.,  3039750.,  3135150.,  2534120.,  2611080.,
      2876848.,  2967664.,  3744740.,  3859220.,  4673640.,  4812168.,
      5664316.,  5827276.,  5776204.,  5941852.,  5888092.,  6056428.,
      5999980.,  6171004.,  5343528.,  5491272.,  4621460.,  4745540.,
      3833008.,  3933040.,  4235000.,  4349912.,  5486250.,  5631010.,
      6816292.,  6991348.,  8226022.,  8431822.,  8378510.,  8587446.,
      8530998.,  8743070.,  8683486.,  8898694.,  7699972.,  7885780.,
      6632290.,  6788250.,  5479544.,  5605208.,  5052600.,  5185432.,
      6530650.,  6697810.,  8096452.,  8298388.,  9750902.,  9988062.,
      9903390.,  10143686., 10055878., 10299310., 10208366., 10454934.,
      9033892.,  9246580.,  7766290.,  7944650.,  6404664.,  6548248.,
      5764912.,  5886448.,  7406660.,  7559540.,  9130152.,  9314760.,
      10936156., 11152876., 11085676., 11305084., 11235196., 11457292.,
      11384716., 11609500., 10021224., 10215048., 8571380.,  8733860.,
      7034416.,  7165168.,  6058920.,  6166600.,  7754350.,  7889750.,
      9523340.,  9686780.,  11366530., 11558330., 11506810., 11700850.,
      11647090., 11843370., 11787370., 11985890., 10338860., 10509980.,
      8812950.,  8956350.,  7209000.,  7324360.,  5898784.,  5990048.,
      7528920.,  7643640.,  9222256.,  9360688.,  10979304., 11141704.,
      11104072., 11268264., 11228840., 11394824., 11353608., 11521384.,
      9933040.,  10077616., 8446200.,  8567320.,  6892576.,  6989984.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    578.,    890.,    1352.,   1896.,
      2440.,   2984.,   3528.,   4072.,   4616.,   5160.,   5114.,   5618.,
      4596.,   4996.,   2934.,   3166.,   780.,    1116.,   3208.,   4008.,
      7540.,   8932.,   14032.,  16144.,  18256.,  20368.,  22480.,  24592.,
      26704.,  28816.,  25444.,  27220.,  20744.,  22056.,  12348.,  13068.,
      5484.,   5820.,   14408.,  15208.,  27028.,  28420.,  43600.,  45712.,
      47824.,  49936.,  52048.,  54160.,  56272.,  58384.,  50308.,  52084.,
      39112.,  40424.,  22428.,  23148.,  10188.,  10524.,  25608.,  26408.,
      46516.,  47908.,  73168.,  75280.,  77392.,  79504.,  81616.,  83728.,
      85840.,  87952.,  75172.,  76948.,  57480.,  58792.,  32508.,  33228.,
      14892.,  15228.,  36808.,  37608.,  66004.,  67396.,  102736., 104848.,
      106960., 109072., 111184., 113296., 115408., 117520., 100036., 101812.,
      75848.,  77160.,  42588.,  43308.,  19596.,  19932.,  48008.,  48808.,
      85492.,  86884.,  132304., 134416., 136528., 138640., 140752., 142864.,
      144976., 147088., 124900., 126676., 94216.,  95528.,  52668.,  53388.,
      24300.,  24636.,  59208.,  60008.,  104980., 106372., 161872., 163984.,
      166096., 168208., 170320., 172432., 174544., 176656., 149764., 151540.,
      112584., 113896., 62748.,  63468.,  25054.,  25350.,  56116.,  56772.,
      93314.,  94394.,  136776., 138344., 139912., 141480., 143048., 144616.,
      146184., 147752., 120122., 121394., 87156.,  88068.,  47158.,  47646.,
      350.,    902.,    1844.,   3012.,   4610.,   6458.,   8776.,   11368.,
      13960.,  16552.,  19144.,  21736.,  24328.,  26920.,  21434.,  23474.,
      16500.,  17924.,  9398.,   10142.,  8588.,   9948.,   20872.,  23720.,
      37108.,  41572.,  57552.,  63760.,  69968.,  76176.,  82384.,  88592.,
      94800.,  101008., 79588.,  84436.,  58888.,  62248.,  32444.,  34188.,
      27628.,  28988.,  60744.,  63592.,  99604.,  104068., 144464., 150672.,
      156880., 163088., 169296., 175504., 181712., 187920., 147460., 152308.,
      105928., 109288., 56860.,  58604.,  46668.,  48028.,  100616., 103464.,
      162100., 166564., 231376., 237584., 243792., 250000., 256208., 262416.,
      268624., 274832., 215332., 220180., 152968., 156328., 81276.,  83020.,
      65708.,  67068.,  140488., 143336., 224596., 229060., 318288., 324496.,
      330704., 336912., 343120., 349328., 355536., 361744., 283204., 288052.,
      200008., 203368., 105692., 107436., 84748.,  86108.,  180360., 183208.,
      287092., 291556., 405200., 411408., 417616., 423824., 430032., 436240.,
      442448., 448656., 351076., 355924., 247048., 250408., 130108., 131852.,
      103788., 105148., 220232., 223080., 349588., 354052., 492112., 498320.,
      504528., 510736., 516944., 523152., 529360., 535568., 418948., 423796.,
      294088., 297448., 154524., 156268., 68382.,  69190.,  143796., 145476.,
      226370., 228986., 316232., 319848., 323464., 327080., 330696., 334312.,
      337928., 341544., 265466., 268274., 185076., 187012., 96630.,  97630.,
      670.,    1734.,   3508.,   5700.,   8642.,   12026.,  16200.,  20840.,
      25480.,  30120.,  34760.,  39400.,  44040.,  48680.,  37754.,  41330.,
      28404.,  30852.,  15862.,  17118.,  16396.,  18780.,  38536.,  43432.,
      66676.,  74212.,  101072., 111376., 121680., 131984., 142288., 152592.,
      162896., 173200., 133732., 141652., 97032.,  102440., 52540.,  55308.,
      49772.,  52156.,  107080., 111976., 172180., 179716., 245328., 255632.,
      265936., 276240., 286544., 296848., 307152., 317456., 244612., 252532.,
      172744., 178152., 91292.,  94060.,  83148.,  85532.,  175624., 180520.,
      277684., 285220., 389584., 399888., 410192., 420496., 430800., 441104.,
      451408., 461712., 355492., 363412., 248456., 253864., 130044., 132812.,
      116524., 118908., 244168., 249064., 383188., 390724., 533840., 544144.,
      554448., 564752., 575056., 585360., 595664., 605968., 466372., 474292.,
      324168., 329576., 168796., 171564., 149900., 152284., 312712., 317608.,
      488692., 496228., 678096., 688400., 698704., 709008., 719312., 729616.,
      739920., 750224., 577252., 585172., 399880., 405288., 207548., 210316.,
      183276., 185660., 381256., 386152., 594196., 601732., 822352., 832656.,
      842960., 853264., 863568., 873872., 884176., 894480., 688132., 696052.,
      475592., 481000., 246300., 249068., 111710., 113030., 231476., 234180.,
      359426., 363578., 495688., 501352., 507016., 512680., 518344., 524008.,
      529672., 535336., 410810., 415154., 282996., 285956., 146102., 147614.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,   8320.,   8600.,   8880.,   11200.,  11560.,  11920.,  12280.,
      14852.,  15296.,  15740.,  16184.,  19012.,  19544.,  20076.,  20608.,
      20552.,  21112.,  21672.,  22232.,  22092.,  22680.,  23268.,  23856.,
      23632.,  24248.,  24864.,  25480.,  22100.,  22640.,  23180.,  23720.,
      19980.,  20440.,  20900.,  21360.,  17256.,  17632.,  18008.,  18384.,
      17050.,  17500.,  17950.,  18400.,  23175.,  23750.,  24325.,  24900.,
      30085.,  30790.,  31495.,  32200.,  37800.,  38640.,  39480.,  40320.,
      40215.,  41090.,  41965.,  42840.,  42630.,  43540.,  44450.,  45360.,
      45045.,  45990.,  46935.,  47880.,  41425.,  42250.,  43075.,  43900.,
      36900.,  37600.,  38300.,  39000.,  31450.,  32020.,  32590.,  33160.,
      31100.,  31760.,  32420.,  33080.,  41620.,  42460.,  43300.,  44140.,
      53286.,  54312.,  55338.,  56364.,  66122.,  67340.,  68558.,  69776.,
      69608.,  70868.,  72128.,  73388.,  73094.,  74396.,  75698.,  77000.,
      76580.,  77924.,  79268.,  80612.,  69630.,  70800.,  71970.,  73140.,
      61390.,  62380.,  63370.,  64360.,  51836.,  52640.,  53444.,  54248.,
      51310.,  52220.,  53130.,  54040.,  67935.,  69090.,  70245.,  71400.,
      86135.,  87542.,  88949.,  90356.,  105938., 107604., 109270., 110936.,
      110691., 112406., 114121., 115836., 115444., 117208., 118972., 120736.,
      120197., 122010., 123823., 125636., 108395., 109970., 111545., 113120.,
      94850.,  96180.,  97510.,  98840.,  79534.,  80612.,  81690.,  82768.,
      76790.,  77980.,  79170.,  80360.,  100485., 101990., 103495., 105000.,
      126035., 127862., 129689., 131516., 153468., 155624., 157780., 159936.,
      158221., 160426., 162631., 164836., 162974., 165228., 167482., 169736.,
      167727., 170030., 172333., 174636., 149975., 151970., 153965., 155960.,
      130200., 131880., 133560., 135240., 108374., 109732., 111090., 112448.,
      99980.,  101120., 102260., 103400., 129340., 130780., 132220., 133660.,
      160494., 162240., 163986., 165732., 193466., 195524., 197582., 199640.,
      198128., 200228., 202328., 204428., 202790., 204932., 207074., 209216.,
      207452., 209636., 211820., 214004., 183750., 185640., 187530., 189420.,
      158110., 159700., 161290., 162880., 130508., 131792., 133076., 134360.,
      113650., 114700., 115750., 116800., 146125., 147450., 148775., 150100.,
      180265., 181870., 183475., 185080., 216090., 217980., 219870., 221760.,
      220465., 222390., 224315., 226240., 224840., 226800., 228760., 230720.,
      229215., 231210., 233205., 235200., 201925., 203650., 205375., 207100.,
      172850., 174300., 175750., 177200., 141970., 143140., 144310., 145480.,
      116680., 117600., 118520., 119440., 149440., 150600., 151760., 152920.,
      183668., 185072., 186476., 187880., 219380., 221032., 222684., 224336.,
      223272., 224952., 226632., 228312., 227164., 228872., 230580., 232288.,
      231056., 232792., 234528., 236264., 202820., 204320., 205820., 207320.,
      173020., 174280., 175540., 176800., 141640., 142656., 143672., 144688.,
      70760.,  72320.,  73880.,  75440.,  92800.,  94760.,  96720.,  98680.,
      116612., 118976., 121340., 123704., 142212., 144984., 147756., 150528.,
      143752., 146552., 149352., 152152., 145292., 148120., 150948., 153776.,
      146832., 149688., 152544., 155400., 131540., 134000., 136460., 138920.,
      114380., 116440., 118500., 120560., 95336.,  96992.,  98648.,  100304.,
      117850., 119900., 121950., 124000., 153175., 155750., 158325., 160900.,
      190885., 193990., 197095., 200200., 231000., 234640., 238280., 241920.,
      233415., 237090., 240765., 244440., 235830., 239540., 243250., 246960.,
      238245., 241990., 245735., 249480., 211825., 215050., 218275., 221500.,
      182900., 185600., 188300., 191000., 151450., 153620., 155790., 157960.,
      178940., 181520., 184100., 186680., 231220., 234460., 237700., 240940.,
      286566., 290472., 294378., 298284., 345002., 349580., 354158., 358736.,
      348488., 353108., 357728., 362348., 351974., 356636., 361298., 365960.,
      355460., 360164., 364868., 369572., 314430., 318480., 322530., 326580.,
      270190., 273580., 276970., 280360., 222716., 225440., 228164., 230888.,
      255150., 258300., 261450., 264600., 328335., 332290., 336245., 340200.,
      405335., 410102., 414869., 419636., 486178., 491764., 497350., 502936.,
      490931., 496566., 502201., 507836., 495684., 501368., 507052., 512736.,
      500437., 506170., 511903., 517636., 441035., 445970., 450905., 455840.,
      377650., 381780., 385910., 390040., 310254., 313572., 316890., 320208.,
      280630., 284060., 287490., 290920., 360885., 365190., 369495., 373800.,
      445235., 450422., 455609., 460796., 533708., 539784., 545860., 551936.,
      538461., 544586., 550711., 556836., 543214., 549388., 555562., 561736.,
      547967., 554190., 560413., 566636., 482615., 487970., 493325., 498680.,
      413000., 417480., 421960., 426440., 339094., 342692., 346290., 349888.,
      301580., 304640., 307700., 310760., 386140., 389980., 393820., 397660.,
      474414., 479040., 483666., 488292., 566426., 571844., 577262., 582680.,
      571088., 576548., 582008., 587468., 575750., 581252., 586754., 592256.,
      580412., 585956., 591500., 597044., 509190., 513960., 518730., 523500.,
      434110., 438100., 442090., 446080., 355148., 358352., 361556., 364760.,
      304050., 306700., 309350., 312000., 388125., 391450., 394775., 398100.,
      475465., 479470., 483475., 487480., 566090., 570780., 575470., 580160.,
      570465., 575190., 579915., 584640., 574840., 579600., 584360., 589120.,
      579215., 584010., 588805., 593600., 506725., 510850., 514975., 519100.,
      430850., 434300., 437750., 441200., 351570., 354340., 357110., 359880.,
      286920., 289120., 291320., 293520., 365440., 368200., 370960., 373720.,
      446708., 450032., 453356., 456680., 530740., 534632., 538524., 542416.,
      534632., 538552., 542472., 546392., 538524., 542472., 546420., 550368.,
      542416., 546392., 550368., 554344., 473540., 476960., 480380., 483800.,
      401820., 404680., 407540., 410400., 327240., 329536., 331832., 334128.,
      133480., 136320., 139160., 142000., 174400., 177960., 181520., 185080.,
      218372., 222656., 226940., 231224., 265412., 270424., 275436., 280448.,
      266952., 271992., 277032., 282072., 268492., 273560., 278628., 283696.,
      270032., 275128., 280224., 285320., 240980., 245360., 249740., 254120.,
      208780., 212440., 216100., 219760., 173416., 176352., 179288., 182224.,
      218650., 222300., 225950., 229600., 283175., 287750., 292325., 296900.,
      351685., 357190., 362695., 368200., 424200., 430640., 437080., 443520.,
      426615., 433090., 439565., 446040., 429030., 435540., 442050., 448560.,
      431445., 437990., 444535., 451080., 382225., 387850., 393475., 399100.,
      328900., 333600., 338300., 343000., 271450., 275220., 278990., 282760.,
      326780., 331280., 335780., 340280., 420820., 426460., 432100., 437740.,
      519846., 526632., 533418., 540204., 623882., 631820., 639758., 647696.,
      627368., 635348., 643328., 651308., 630854., 638876., 646898., 654920.,
      634340., 642404., 650468., 658532., 559230., 566160., 573090., 580020.,
      478990., 484780., 490570., 496360., 393596., 398240., 402884., 407528.,
      458990., 464380., 469770., 475160., 588735., 595490., 602245., 609000.,
      724535., 732662., 740789., 748916., 866418., 875924., 885430., 894936.,
      871171., 880726., 890281., 899836., 875924., 885528., 895132., 904736.,
      880677., 890330., 899983., 909636., 773675., 781970., 790265., 798560.,
      660450., 667380., 674310., 681240., 540974., 546532., 552090., 557648.,
      484470., 490140., 495810., 501480., 621285., 628390., 635495., 642600.,
      764435., 772982., 781529., 790076., 913948., 923944., 933940., 943936.,
      918701., 928746., 938791., 948836., 923454., 933548., 943642., 953736.,
      928207., 938350., 948493., 958636., 815255., 823970., 832685., 841400.,
      695800., 703080., 710360., 717640., 569814., 575652., 581490., 587328.,
      503180., 508160., 513140., 518120., 642940., 649180., 655420., 661660.,
      788334., 795840., 803346., 810852., 939386., 948164., 956942., 965720.,
      944048., 952868., 961688., 970508., 948710., 957572., 966434., 975296.,
      953372., 962276., 971180., 980084., 834630., 842280., 849930., 857580.,
      710110., 716500., 722890., 729280., 579788., 584912., 590036., 595160.,
      494450., 498700., 502950., 507200., 630125., 635450., 640775., 646100.,
      770665., 777070., 783475., 789880., 916090., 923580., 931070., 938560.,
      920465., 927990., 935515., 943040., 924840., 932400., 939960., 947520.,
      929215., 936810., 944405., 952000., 811525., 818050., 824575., 831100.,
      688850., 694300., 699750., 705200., 561170., 565540., 569910., 574280.,
      457160., 460640., 464120., 467600., 581440., 585800., 590160., 594520.,
      709748., 714992., 720236., 725480., 842100., 848232., 854364., 860496.,
      845992., 852152., 858312., 864472., 849884., 856072., 862260., 868448.,
      853776., 859992., 866208., 872424., 744260., 749600., 754940., 760280.,
      630620., 635080., 639540., 644000., 512840., 516416., 519992., 523568.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,    100.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,
      100.,   104.,   108.,   112.,   34.,    40.,    46.,    52.,    122.,
      136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,
      564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,
      888.,   924.,   960.,   996.,   1032.,  866.,   896.,   926.,   956.,
      698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   202.,
      208.,   214.,   220.,   514.,   528.,   542.,   556.,   944.,   968.,
      992.,   1016.,  1500.,  1536.,  1572.,  1608.,  1644.,  1680.,  1716.,
      1752.,  1788.,  1824.,  1860.,  1896.,  1932.,  1968.,  2004.,  2040.,
      1706.,  1736.,  1766.,  1796.,  1314.,  1336.,  1358.,  1380.,  748.,
      760.,   772.,   784.,   370.,   376.,   382.,   388.,   906.,   920.,
      934.,   948.,   1616.,  1640.,  1664.,  1688.,  2508.,  2544.,  2580.,
      2616.,  2652.,  2688.,  2724.,  2760.,  2796.,  2832.,  2868.,  2904.,
      2940.,  2976.,  3012.,  3048.,  2546.,  2576.,  2606.,  2636.,  1930.,
      1952.,  1974.,  1996.,  1084.,  1096.,  1108.,  1120.,  538.,   544.,
      550.,   556.,   1298.,  1312.,  1326.,  1340.,  2288.,  2312.,  2336.,
      2360.,  3516.,  3552.,  3588.,  3624.,  3660.,  3696.,  3732.,  3768.,
      3804.,  3840.,  3876.,  3912.,  3948.,  3984.,  4020.,  4056.,  3386.,
      3416.,  3446.,  3476.,  2546.,  2568.,  2590.,  2612.,  1420.,  1432.,
      1444.,  1456.,  706.,   712.,   718.,   724.,   1690.,  1704.,  1718.,
      1732.,  2960.,  2984.,  3008.,  3032.,  4524.,  4560.,  4596.,  4632.,
      4668.,  4704.,  4740.,  4776.,  4812.,  4848.,  4884.,  4920.,  4956.,
      4992.,  5028.,  5064.,  4226.,  4256.,  4286.,  4316.,  3162.,  3184.,
      3206.,  3228.,  1756.,  1768.,  1780.,  1792.,  874.,   880.,   886.,
      892.,   2082.,  2096.,  2110.,  2124.,  3632.,  3656.,  3680.,  3704.,
      5532.,  5568.,  5604.,  5640.,  5676.,  5712.,  5748.,  5784.,  5820.,
      5856.,  5892.,  5928.,  5964.,  6000.,  6036.,  6072.,  5066.,  5096.,
      5126.,  5156.,  3778.,  3800.,  3822.,  3844.,  2092.,  2104.,  2116.,
      2128.,  845.,   850.,   855.,   860.,   1879.,  1890.,  1901.,  1912.,
      3106.,  3124.,  3142.,  3160.,  4530.,  4556.,  4582.,  4608.,  4634.,
      4660.,  4686.,  4712.,  4738.,  4764.,  4790.,  4816.,  4842.,  4868.,
      4894.,  4920.,  3961.,  3982.,  4003.,  4024.,  2863.,  2878.,  2893.,
      2908.,  1544.,  1552.,  1560.,  1568.,  9.,     18.,    27.,    36.,
      55.,    74.,    93.,    112.,   142.,   172.,   202.,   232.,   274.,
      316.,   358.,   400.,   442.,   484.,   526.,   568.,   610.,   652.,
      694.,   736.,   778.,   820.,   862.,   904.,   685.,   718.,   751.,
      784.,   527.,   550.,   573.,   596.,   300.,   312.,   324.,   336.,
      274.,   296.,   318.,   340.,   666.,   712.,   758.,   804.,   1184.,
      1256.,  1328.,  1400.,  1836.,  1936.,  2036.,  2136.,  2236.,  2336.,
      2436.,  2536.,  2636.,  2736.,  2836.,  2936.,  3036.,  3136.,  3236.,
      3336.,  2546.,  2624.,  2702.,  2780.,  1882.,  1936.,  1990.,  2044.,
      1036.,  1064.,  1092.,  1120.,  890.,   912.,   934.,   956.,   1954.,
      2000.,  2046.,  2092.,  3200.,  3272.,  3344.,  3416.,  4636.,  4736.,
      4836.,  4936.,  5036.,  5136.,  5236.,  5336.,  5436.,  5536.,  5636.,
      5736.,  5836.,  5936.,  6036.,  6136.,  4730.,  4808.,  4886.,  4964.,
      3394.,  3448.,  3502.,  3556.,  1820.,  1848.,  1876.,  1904.,  1506.,
      1528.,  1550.,  1572.,  3242.,  3288.,  3334.,  3380.,  5216.,  5288.,
      5360.,  5432.,  7436.,  7536.,  7636.,  7736.,  7836.,  7936.,  8036.,
      8136.,  8236.,  8336.,  8436.,  8536.,  8636.,  8736.,  8836.,  8936.,
      6914.,  6992.,  7070.,  7148.,  4906.,  4960.,  5014.,  5068.,  2604.,
      2632.,  2660.,  2688.,  2122.,  2144.,  2166.,  2188.,  4530.,  4576.,
      4622.,  4668.,  7232.,  7304.,  7376.,  7448.,  10236., 10336., 10436.,
      10536., 10636., 10736., 10836., 10936., 11036., 11136., 11236., 11336.,
      11436., 11536., 11636., 11736., 9098.,  9176.,  9254.,  9332.,  6418.,
      6472.,  6526.,  6580.,  3388.,  3416.,  3444.,  3472.,  2738.,  2760.,
      2782.,  2804.,  5818.,  5864.,  5910.,  5956.,  9248.,  9320.,  9392.,
      9464.,  13036., 13136., 13236., 13336., 13436., 13536., 13636., 13736.,
      13836., 13936., 14036., 14136., 14236., 14336., 14436., 14536., 11282.,
      11360., 11438., 11516., 7930.,  7984.,  8038.,  8092.,  4172.,  4200.,
      4228.,  4256.,  3354.,  3376.,  3398.,  3420.,  7106.,  7152.,  7198.,
      7244.,  11264., 11336., 11408., 11480., 15836., 15936., 16036., 16136.,
      16236., 16336., 16436., 16536., 16636., 16736., 16836., 16936., 17036.,
      17136., 17236., 17336., 13466., 13544., 13622., 13700., 9442.,  9496.,
      9550.,  9604.,  4956.,  4984.,  5012.,  5040.,  2197.,  2210.,  2223.,
      2236.,  4615.,  4642.,  4669.,  4696.,  7258.,  7300.,  7342.,  7384.,
      10130., 10188., 10246., 10304., 10362., 10420., 10478., 10536., 10594.,
      10652., 10710., 10768., 10826., 10884., 10942., 11000., 8497.,  8542.,
      8587.,  8632.,  5919.,  5950.,  5981.,  6012.,  3088.,  3104.,  3120.,
      3136.,  17.,    34.,    51.,    68.,    103.,   138.,   173.,   208.,
      262.,   316.,   370.,   424.,   498.,   572.,   646.,   720.,   794.,
      868.,   942.,   1016.,  1090.,  1164.,  1238.,  1312.,  1386.,  1460.,
      1534.,  1608.,  1189.,  1246.,  1303.,  1360.,  895.,   934.,   973.,
      1012.,  500.,   520.,   540.,   560.,   514.,   552.,   590.,   628.,
      1210.,  1288.,  1366.,  1444.,  2096.,  2216.,  2336.,  2456.,  3180.,
      3344.,  3508.,  3672.,  3836.,  4000.,  4164.,  4328.,  4492.,  4656.,
      4820.,  4984.,  5148.,  5312.,  5476.,  5640.,  4226.,  4352.,  4478.,
      4604.,  3066.,  3152.,  3238.,  3324.,  1660.,  1704.,  1748.,  1792.,
      1578.,  1616.,  1654.,  1692.,  3394.,  3472.,  3550.,  3628.,  5456.,
      5576.,  5696.,  5816.,  7772.,  7936.,  8100.,  8264.,  8428.,  8592.,
      8756.,  8920.,  9084.,  9248.,  9412.,  9576.,  9740.,  9904.,  10068.,
      10232., 7754.,  7880.,  8006.,  8132.,  5474.,  5560.,  5646.,  5732.,
      2892.,  2936.,  2980.,  3024.,  2642.,  2680.,  2718.,  2756.,  5578.,
      5656.,  5734.,  5812.,  8816.,  8936.,  9056.,  9176.,  12364., 12528.,
      12692., 12856., 13020., 13184., 13348., 13512., 13676., 13840., 14004.,
      14168., 14332., 14496., 14660., 14824., 11282., 11408., 11534., 11660.,
      7882.,  7968.,  8054.,  8140.,  4124.,  4168.,  4212.,  4256.,  3706.,
      3744.,  3782.,  3820.,  7762.,  7840.,  7918.,  7996.,  12176., 12296.,
      12416., 12536., 16956., 17120., 17284., 17448., 17612., 17776., 17940.,
      18104., 18268., 18432., 18596., 18760., 18924., 19088., 19252., 19416.,
      14810., 14936., 15062., 15188., 10290., 10376., 10462., 10548., 5356.,
      5400.,  5444.,  5488.,  4770.,  4808.,  4846.,  4884.,  9946.,  10024.,
      10102., 10180., 15536., 15656., 15776., 15896., 21548., 21712., 21876.,
      22040., 22204., 22368., 22532., 22696., 22860., 23024., 23188., 23352.,
      23516., 23680., 23844., 24008., 18338., 18464., 18590., 18716., 12698.,
      12784., 12870., 12956., 6588.,  6632.,  6676.,  6720.,  5834.,  5872.,
      5910.,  5948.,  12130., 12208., 12286., 12364., 18896., 19016., 19136.,
      19256., 26140., 26304., 26468., 26632., 26796., 26960., 27124., 27288.,
      27452., 27616., 27780., 27944., 28108., 28272., 28436., 28600., 21866.,
      21992., 22118., 22244., 15106., 15192., 15278., 15364., 7820.,  7864.,
      7908.,  7952.,  3549.,  3570.,  3591.,  3612.,  7351.,  7394.,  7437.,
      7480.,  11410., 11476., 11542., 11608., 15730., 15820., 15910., 16000.,
      16090., 16180., 16270., 16360., 16450., 16540., 16630., 16720., 16810.,
      16900., 16990., 17080., 13033., 13102., 13171., 13240., 8975.,  9022.,
      9069.,  9116.,  4632.,  4656.,  4680.,  4704.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,   64416.,   66624.,   68832.,   86860.,   89700.,   92540.,
      95380.,   115408.,  118912.,  122416.,  125920.,  147980.,  152180.,
      156380.,  160580.,  160244.,  164668.,  169092.,  173516.,  172508.,
      177156.,  181804.,  186452.,  184772.,  189644.,  194516.,  199388.,
      173008.,  177280.,  181552.,  185824.,  156580.,  160220.,  163860.,
      167500.,  135360.,  138336.,  141312.,  144288.,  133000.,  136560.,
      140120.,  143680.,  181025.,  185575.,  190125.,  194675.,  235280.,
      240860.,  246440.,  252020.,  295925.,  302575.,  309225.,  315875.,
      315175.,  322105.,  329035.,  335965.,  334425.,  341635.,  348845.,
      356055.,  353675.,  361165.,  368655.,  376145.,  325520.,  332060.,
      338600.,  345140.,  290175.,  295725.,  301275.,  306825.,  247480.,
      252000.,  256520.,  261040.,  243808.,  249040.,  254272.,  259504.,
      326570.,  333230.,  339890.,  346550.,  418440.,  426576.,  434712.,
      442848.,  519610.,  529270.,  538930.,  548590.,  547414.,  557410.,
      567406.,  577402.,  575218.,  585550.,  595882.,  606214.,  603022.,
      613690.,  624358.,  635026.,  548616.,  557904.,  567192.,  576480.,
      483950.,  491810.,  499670.,  507530.,  408832.,  415216.,  421600.,
      427984.,  403592.,  410816.,  418040.,  425264.,  534695.,  543865.,
      553035.,  562205.,  678328.,  689500.,  700672.,  711844.,  834715.,
      847945.,  861175.,  874405.,  872641.,  886263.,  899885.,  913507.,
      910567.,  924581.,  938595.,  952609.,  948493.,  962899.,  977305.,
      991711.,  855736.,  868252.,  880768.,  893284.,  749105.,  759675.,
      770245.,  780815.,  628376.,  636944.,  645512.,  654080.,  606872.,
      616336.,  625800.,  635264.,  794395.,  806365.,  818335.,  830305.,
      996688.,  1011220., 1025752., 1040284., 1213975., 1231125., 1248275.,
      1265425., 1251901., 1269443., 1286985., 1304527., 1289827., 1307761.,
      1325695., 1343629., 1327753., 1346079., 1364405., 1382731., 1187536.,
      1203412., 1219288., 1235164., 1031205., 1044575., 1057945., 1071315.,
      858536.,  869344.,  880152.,  890960.,  792544.,  801616.,  810688.,
      819760.,  1025450., 1036910., 1048370., 1059830., 1272648., 1286544.,
      1300440., 1314336., 1534330., 1550710., 1567090., 1583470., 1571542.,
      1588258., 1604974., 1621690., 1608754., 1625806., 1642858., 1659910.,
      1645966., 1663354., 1680742., 1698130., 1458120., 1473168., 1488216.,
      1503264., 1254830., 1267490., 1280150., 1292810., 1035904., 1046128.,
      1056352., 1066576., 902360.,  910720.,  919080.,  927440.,  1160325.,
      1170875., 1181425., 1191975., 1431560., 1444340., 1457120., 1469900.,
      1716225., 1731275., 1746325., 1761375., 1751155., 1766485., 1781815.,
      1797145., 1786085., 1801695., 1817305., 1832915., 1821015., 1836905.,
      1852795., 1868685., 1604360., 1618100., 1631840., 1645580., 1373475.,
      1385025., 1396575., 1408125., 1128200., 1137520., 1146840., 1156160.,
      927360.,  934688.,  942016.,  949344.,  1187820., 1197060., 1206300.,
      1215540., 1459984., 1471168., 1482352., 1493536., 1743980., 1757140.,
      1770300., 1783460., 1775060., 1788444., 1801828., 1815212., 1806140.,
      1819748., 1833356., 1846964., 1837220., 1851052., 1864884., 1878716.,
      1612816., 1624768., 1636720., 1648672., 1375940., 1385980., 1396020.,
      1406060., 1126464., 1134560., 1142656., 1150752., 561408.,  573856.,
      586304.,  598752.,  736460.,  752100.,  767740.,  783380.,  925648.,
      944512.,  963376.,  982240.,  1129100., 1151220., 1173340., 1195460.,
      1141364., 1163708., 1186052., 1208396., 1153628., 1176196., 1198764.,
      1221332., 1165892., 1188684., 1211476., 1234268., 1044688., 1064320.,
      1083952., 1103584., 908580.,  925020.,  941460.,  957900.,  757440.,
      770656.,  783872.,  797088.,  936200.,  952560.,  968920.,  985280.,
      1217025., 1237575., 1258125., 1278675., 1516880., 1541660., 1566440.,
      1591220., 1835925., 1864975., 1894025., 1923075., 1855175., 1884505.,
      1913835., 1943165., 1874425., 1904035., 1933645., 1963255., 1893675.,
      1923565., 1953455., 1983345., 1683920., 1709660., 1735400., 1761140.,
      1454175., 1475725., 1497275., 1518825., 1204280., 1221600., 1238920.,
      1256240., 1422688., 1443280., 1463872., 1484464., 1838570., 1864430.,
      1890290., 1916150., 2278920., 2310096., 2341272., 2372448., 2743930.,
      2780470., 2817010., 2853550., 2771734., 2808610., 2845486., 2882362.,
      2799538., 2836750., 2873962., 2911174., 2827342., 2864890., 2902438.,
      2939986., 2501256., 2533584., 2565912., 2598240., 2149550., 2176610.,
      2203670., 2230730., 1772032., 1793776., 1815520., 1837264., 2029832.,
      2054976., 2080120., 2105264., 2612295., 2643865., 2675435., 2707005.,
      3225208., 3263260., 3301312., 3339364., 3868795., 3913385., 3957975.,
      4002565., 3906721., 3951703., 3996685., 4041667., 3944647., 3990021.,
      4035395., 4080769., 3982573., 4028339., 4074105., 4119871., 3510136.,
      3549532., 3588928., 3628324., 3005905., 3038875., 3071845., 3104815.,
      2469656., 2496144., 2522632., 2549120., 2233112., 2260496., 2287880.,
      2315264., 2871995., 2906365., 2940735., 2975105., 3543568., 3584980.,
      3626392., 3667804., 4248055., 4296565., 4345075., 4393585., 4285981.,
      4334883., 4383785., 4432687., 4323907., 4373201., 4422495., 4471789.,
      4361833., 4411519., 4461205., 4510891., 3841936., 3884692., 3927448.,
      3970204., 3288005., 3323775., 3359545., 3395315., 2699816., 2728544.,
      2757272., 2786000., 2401504., 2425936., 2450368., 2474800., 3075050.,
      3105710., 3136370., 3167030., 3778248., 3815184., 3852120., 3889056.,
      4511290., 4554550., 4597810., 4641070., 4548502., 4592098., 4635694.,
      4679290., 4585714., 4629646., 4673578., 4717510., 4622926., 4667194.,
      4711462., 4755730., 4055880., 4093968., 4132056., 4170144., 3458030.,
      3489890., 3521750., 3553610., 2829184., 2854768., 2880352., 2905936.,
      2422360., 2443520., 2464680., 2485840., 3092325., 3118875., 3145425.,
      3171975., 3788360., 3820340., 3852320., 3884300., 4510625., 4548075.,
      4585525., 4622975., 4545555., 4583285., 4621015., 4658745., 4580485.,
      4618495., 4656505., 4694515., 4615415., 4653705., 4691995., 4730285.,
      4037960., 4070900., 4103840., 4136780., 3433475., 3461025., 3488575.,
      3516125., 2801800., 2823920., 2846040., 2868160., 2286720., 2304288.,
      2321856., 2339424., 2912620., 2934660., 2956700., 2978740., 3560464.,
      3587008., 3613552., 3640096., 4230380., 4261460., 4292540., 4323620.,
      4261460., 4292764., 4324068., 4355372., 4292540., 4324068., 4355596.,
      4387124., 4323620., 4355372., 4387124., 4418876., 3774736., 3802048.,
      3829360., 3856672., 3203140., 3225980., 3248820., 3271660., 2608704.,
      2627040., 2645376., 2663712., 1060608., 1083296., 1105984., 1128672.,
      1386060., 1414500., 1442940., 1471380., 1735888., 1770112., 1804336.,
      1838560., 2110220., 2150260., 2190300., 2230340., 2122484., 2162748.,
      2203012., 2243276., 2134748., 2175236., 2215724., 2256212., 2147012.,
      2187724., 2228436., 2269148., 1916368., 1951360., 1986352., 2021344.,
      1660580., 1689820., 1719060., 1748300., 1379520., 1402976., 1426432.,
      1449888., 1739400., 1768560., 1797720., 1826880., 2253025., 2289575.,
      2326125., 2362675., 2798480., 2842460., 2886440., 2930420., 3375925.,
      3427375., 3478825., 3530275., 3395175., 3446905., 3498635., 3550365.,
      3414425., 3466435., 3518445., 3570455., 3433675., 3485965., 3538255.,
      3590545., 3042320., 3087260., 3132200., 3177140., 2618175., 2655725.,
      2693275., 2730825., 2161080., 2191200., 2221320., 2251440., 2601568.,
      2637520., 2673472., 2709424., 3350570., 3395630., 3440690., 3485750.,
      4139400., 4193616., 4247832., 4302048., 4968250., 5031670., 5095090.,
      5158510., 4996054., 5059810., 5123566., 5187322., 5023858., 5087950.,
      5152042., 5216134., 5051662., 5116090., 5180518., 5244946., 4453896.,
      4509264., 4564632., 4620000., 3815150., 3861410., 3907670., 3953930.,
      3135232., 3172336., 3209440., 3246544., 3656072., 3699136., 3742200.,
      3785264., 4689895., 4743865., 4797835., 4851805., 5772088., 5837020.,
      5901952., 5966884., 6902875., 6978825., 7054775., 7130725., 6940801.,
      7017143., 7093485., 7169827., 6978727., 7055461., 7132195., 7208929.,
      7016653., 7093779., 7170905., 7248031., 6164536., 6230812., 6297088.,
      6363364., 5262705., 5318075., 5373445., 5428815., 4310936., 4355344.,
      4399752., 4444160., 3859352., 3904656., 3949960., 3995264., 4949595.,
      5006365., 5063135., 5119905., 6090448., 6158740., 6227032., 6295324.,
      7282135., 7362005., 7441875., 7521745., 7320061., 7400323., 7480585.,
      7560847., 7357987., 7438641., 7519295., 7599949., 7395913., 7476959.,
      7558005., 7639051., 6496336., 6565972., 6635608., 6705244., 5544805.,
      5602975., 5661145., 5719315., 4541096., 4587744., 4634392., 4681040.,
      4010464., 4050256., 4090048., 4129840., 5124650., 5174510., 5224370.,
      5274230., 6283848., 6343824., 6403800., 6463776., 7488250., 7558390.,
      7628530., 7698670., 7525462., 7595938., 7666414., 7736890., 7562674.,
      7633486., 7704298., 7775110., 7599886., 7671034., 7742182., 7813330.,
      6653640., 6714768., 6775896., 6837024., 5661230., 5712290., 5763350.,
      5814410., 4622464., 4663408., 4704352., 4745296., 3942360., 3976320.,
      4010280., 4044240., 5024325., 5066875., 5109425., 5151975., 6145160.,
      6196340., 6247520., 6298700., 7305025., 7364875., 7424725., 7484575.,
      7339955., 7400085., 7460215., 7520345., 7374885., 7435295., 7495705.,
      7556115., 7409815., 7470505., 7531195., 7591885., 6471560., 6523700.,
      6575840., 6627980., 5493475., 5537025., 5580575., 5624125., 4475400.,
      4510320., 4545240., 4580160., 3646080., 3673888., 3701696., 3729504.,
      4637420., 4672260., 4707100., 4741940., 5660944., 5702848., 5744752.,
      5786656., 6716780., 6765780., 6814780., 6863780., 6747860., 6797084.,
      6846308., 6895532., 6778940., 6828388., 6877836., 6927284., 6810020.,
      6859692., 6909364., 6959036., 5936656., 5979328., 6022000., 6064672.,
      5030340., 5065980., 5101620., 5137260., 4090944., 4119520., 4148096.,
      4176672.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    328.,    400.,    472.,    544.,
      616.,    688.,    760.,    832.,    904.,    976.,    1048.,   1120.,
      1192.,   1264.,   1336.,   1408.,   1307.,   1373.,   1439.,   1505.,
      1168.,   1220.,   1272.,   1324.,   743.,    773.,    803.,    833.,
      202.,    246.,    290.,    334.,    816.,    920.,    1024.,   1128.,
      1906.,   2086.,   2266.,   2446.,   3536.,   3808.,   4080.,   4352.,
      4624.,   4896.,   5168.,   5440.,   5712.,   5984.,   6256.,   6528.,
      6800.,   7072.,   7344.,   7616.,   6454.,   6682.,   6910.,   7138.,
      5248.,   5416.,   5584.,   5752.,   3118.,   3210.,   3302.,   3394.,
      1434.,   1478.,   1522.,   1566.,   3728.,   3832.,   3936.,   4040.,
      6946.,   7126.,   7306.,   7486.,   11152.,  11424.,  11696.,  11968.,
      12240.,  12512.,  12784.,  13056.,  13328.,  13600.,  13872.,  14144.,
      14416.,  14688.,  14960.,  15232.,  12838.,  13066.,  13294.,  13522.,
      9952.,   10120.,  10288.,  10456.,  5694.,   5786.,   5878.,   5970.,
      2666.,   2710.,   2754.,   2798.,   6640.,   6744.,   6848.,   6952.,
      11986.,  12166.,  12346.,  12526.,  18768.,  19040.,  19312.,  19584.,
      19856.,  20128.,  20400.,  20672.,  20944.,  21216.,  21488.,  21760.,
      22032.,  22304.,  22576.,  22848.,  19222.,  19450.,  19678.,  19906.,
      14656.,  14824.,  14992.,  15160.,  8270.,   8362.,   8454.,   8546.,
      3898.,   3942.,   3986.,   4030.,   9552.,   9656.,   9760.,   9864.,
      17026.,  17206.,  17386.,  17566.,  26384.,  26656.,  26928.,  27200.,
      27472.,  27744.,  28016.,  28288.,  28560.,  28832.,  29104.,  29376.,
      29648.,  29920.,  30192.,  30464.,  25606.,  25834.,  26062.,  26290.,
      19360.,  19528.,  19696.,  19864.,  10846.,  10938.,  11030.,  11122.,
      5130.,   5174.,   5218.,   5262.,   12464.,  12568.,  12672.,  12776.,
      22066.,  22246.,  22426.,  22606.,  34000.,  34272.,  34544.,  34816.,
      35088.,  35360.,  35632.,  35904.,  36176.,  36448.,  36720.,  36992.,
      37264.,  37536.,  37808.,  38080.,  31990.,  32218.,  32446.,  32674.,
      24064.,  24232.,  24400.,  24568.,  13422.,  13514.,  13606.,  13698.,
      6362.,   6406.,   6450.,   6494.,   15376.,  15480.,  15584.,  15688.,
      27106.,  27286.,  27466.,  27646.,  41616.,  41888.,  42160.,  42432.,
      42704.,  42976.,  43248.,  43520.,  43792.,  44064.,  44336.,  44608.,
      44880.,  45152.,  45424.,  45696.,  38374.,  38602.,  38830.,  39058.,
      28768.,  28936.,  29104.,  29272.,  15998.,  16090.,  16182.,  16274.,
      6413.,   6451.,   6489.,   6527.,   14328.,  14412.,  14496.,  14580.,
      23777.,  23915.,  24053.,  24191.,  34792.,  34992.,  35192.,  35392.,
      35592.,  35792.,  35992.,  36192.,  36392.,  36592.,  36792.,  36992.,
      37192.,  37392.,  37592.,  37792.,  30515.,  30677.,  30839.,  31001.,
      22112.,  22228.,  22344.,  22460.,  11951.,  12013.,  12075.,  12137.,
      53.,     123.,    193.,    263.,    392.,    540.,    688.,    836.,
      1049.,   1283.,   1517.,   1751.,   2056.,   2384.,   2712.,   3040.,
      3368.,   3696.,   4024.,   4352.,   4680.,   5008.,   5336.,   5664.,
      5992.,   6320.,   6648.,   6976.,   5291.,   5549.,   5807.,   6065.,
      4080.,   4260.,   4440.,   4620.,   2327.,   2421.,   2515.,   2609.,
      2090.,   2262.,   2434.,   2606.,   5104.,   5464.,   5824.,   6184.,
      9106.,   9670.,   10234.,  10798.,  14160.,  14944.,  15728.,  16512.,
      17296.,  18080.,  18864.,  19648.,  20432.,  21216.,  22000.,  22784.,
      23568.,  24352.,  25136.,  25920.,  19798.,  20410.,  21022.,  21634.,
      14656.,  15080.,  15504.,  15928.,  8078.,   8298.,   8518.,   8738.,
      6906.,   7078.,   7250.,   7422.,   15184.,  15544.,  15904.,  16264.,
      24898.,  25462.,  26026.,  26590.,  36112.,  36896.,  37680.,  38464.,
      39248.,  40032.,  40816.,  41600.,  42384.,  43168.,  43952.,  44736.,
      45520.,  46304.,  47088.,  47872.,  36934.,  37546.,  38158.,  38770.,
      26528.,  26952.,  27376.,  27800.,  14238.,  14458.,  14678.,  14898.,
      11722.,  11894.,  12066.,  12238.,  25264.,  25624.,  25984.,  26344.,
      40690.,  41254.,  41818.,  42382.,  58064.,  58848.,  59632.,  60416.,
      61200.,  61984.,  62768.,  63552.,  64336.,  65120.,  65904.,  66688.,
      67472.,  68256.,  69040.,  69824.,  54070.,  54682.,  55294.,  55906.,
      38400.,  38824.,  39248.,  39672.,  20398.,  20618.,  20838.,  21058.,
      16538.,  16710.,  16882.,  17054.,  35344.,  35704.,  36064.,  36424.,
      56482.,  57046.,  57610.,  58174.,  80016.,  80800.,  81584.,  82368.,
      83152.,  83936.,  84720.,  85504.,  86288.,  87072.,  87856.,  88640.,
      89424.,  90208.,  90992.,  91776.,  71206.,  71818.,  72430.,  73042.,
      50272.,  50696.,  51120.,  51544.,  26558.,  26778.,  26998.,  27218.,
      21354.,  21526.,  21698.,  21870.,  45424.,  45784.,  46144.,  46504.,
      72274.,  72838.,  73402.,  73966.,  101968., 102752., 103536., 104320.,
      105104., 105888., 106672., 107456., 108240., 109024., 109808., 110592.,
      111376., 112160., 112944., 113728., 88342.,  88954.,  89566.,  90178.,
      62144.,  62568.,  62992.,  63416.,  32718.,  32938.,  33158.,  33378.,
      26170.,  26342.,  26514.,  26686.,  55504.,  55864.,  56224.,  56584.,
      88066.,  88630.,  89194.,  89758.,  123920., 124704., 125488., 126272.,
      127056., 127840., 128624., 129408., 130192., 130976., 131760., 132544.,
      133328., 134112., 134896., 135680., 105478., 106090., 106702., 107314.,
      74016.,  74440.,  74864.,  75288.,  38878.,  39098.,  39318.,  39538.,
      17213.,  17315.,  17417.,  17519.,  36184.,  36396.,  36608.,  36820.,
      56945.,  57275.,  57605.,  57935.,  79528.,  79984.,  80440.,  80896.,
      81352.,  81808.,  82264.,  82720.,  83176.,  83632.,  84088.,  84544.,
      85000.,  85456.,  85912.,  86368.,  66755.,  67109.,  67463.,  67817.,
      46528.,  46772.,  47016.,  47260.,  24287.,  24413.,  24539.,  24665.,
      101.,    235.,    369.,    503.,    744.,    1020.,   1296.,   1572.,
      1961.,   2387.,   2813.,   3239.,   3784.,   4368.,   4952.,   5536.,
      6120.,   6704.,   7288.,   7872.,   8456.,   9040.,   9624.,   10208.,
      10792.,  11376.,  11960.,  12544.,  9275.,   9725.,   10175.,  10625.,
      6992.,   7300.,   7608.,   7916.,   3911.,   4069.,   4227.,   4385.,
      3978.,   4278.,   4578.,   4878.,   9392.,   10008.,  10624.,  11240.,
      16306.,  17254.,  18202.,  19150.,  24784.,  26080.,  27376.,  28672.,
      29968.,  31264.,  32560.,  33856.,  35152.,  36448.,  37744.,  39040.,
      40336.,  41632.,  42928.,  44224.,  33142.,  34138.,  35134.,  36130.,
      24064.,  24744.,  25424.,  26104.,  13038.,  13386.,  13734.,  14082.,
      12378.,  12678.,  12978.,  13278.,  26640.,  27256.,  27872.,  28488.,
      42850.,  43798.,  44746.,  45694.,  61072.,  62368.,  63664.,  64960.,
      66256.,  67552.,  68848.,  70144.,  71440.,  72736.,  74032.,  75328.,
      76624.,  77920.,  79216.,  80512.,  61030.,  62026.,  63022.,  64018.,
      43104.,  43784.,  44464.,  45144.,  22782.,  23130.,  23478.,  23826.,
      20778.,  21078.,  21378.,  21678.,  43888.,  44504.,  45120.,  45736.,
      69394.,  70342.,  71290.,  72238.,  97360.,  98656.,  99952.,  101248.,
      102544., 103840., 105136., 106432., 107728., 109024., 110320., 111616.,
      112912., 114208., 115504., 116800., 88918.,  89914.,  90910.,  91906.,
      62144.,  62824.,  63504.,  64184.,  32526.,  32874.,  33222.,  33570.,
      29178.,  29478.,  29778.,  30078.,  61136.,  61752.,  62368.,  62984.,
      95938.,  96886.,  97834.,  98782.,  133648., 134944., 136240., 137536.,
      138832., 140128., 141424., 142720., 144016., 145312., 146608., 147904.,
      149200., 150496., 151792., 153088., 116806., 117802., 118798., 119794.,
      81184.,  81864.,  82544.,  83224.,  42270.,  42618.,  42966.,  43314.,
      37578.,  37878.,  38178.,  38478.,  78384.,  79000.,  79616.,  80232.,
      122482., 123430., 124378., 125326., 169936., 171232., 172528., 173824.,
      175120., 176416., 177712., 179008., 180304., 181600., 182896., 184192.,
      185488., 186784., 188080., 189376., 144694., 145690., 146686., 147682.,
      100224., 100904., 101584., 102264., 52014.,  52362.,  52710.,  53058.,
      45978.,  46278.,  46578.,  46878.,  95632.,  96248.,  96864.,  97480.,
      149026., 149974., 150922., 151870., 206224., 207520., 208816., 210112.,
      211408., 212704., 214000., 215296., 216592., 217888., 219184., 220480.,
      221776., 223072., 224368., 225664., 172582., 173578., 174574., 175570.,
      119264., 119944., 120624., 121304., 61758.,  62106.,  62454.,  62802.,
      28013.,  28179.,  28345.,  28511.,  58040.,  58380.,  58720.,  59060.,
      90113.,  90635.,  91157.,  91679.,  124264., 124976., 125688., 126400.,
      127112., 127824., 128536., 129248., 129960., 130672., 131384., 132096.,
      132808., 133520., 134232., 134944., 102995., 103541., 104087., 104633.,
      70944.,  71316.,  71688.,  72060.,  36623.,  36813.,  37003.,  37193.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1425630.,  1461830.,  1498030.,  1534230.,
      1842268.,  1886668.,  1931068.,  1975468.,  2301634.,  2354554.,
      2407474.,  2460394.,  2430778.,  2485938.,  2541098.,  2596258.,
      2559922.,  2617322.,  2674722.,  2732122.,  2689066.,  2748706.,
      2808346.,  2867986.,  2442460.,  2494540.,  2546620.,  2598700.,
      2138534.,  2182734.,  2226934.,  2271134.,  1776008.,  1812008.,
      1848008.,  1884008.,  1860912.,  1902576.,  1944240.,  1985904.,
      2392500.,  2445540.,  2498580.,  2551620.,  2980328.,  3045128.,
      3109928.,  3174728.,  3625932.,  3702876.,  3779820.,  3856764.,
      3766108.,  3845740.,  3925372.,  4005004.,  3906284.,  3988604.,
      4070924.,  4153244.,  4046460.,  4131468.,  4216476.,  4301484.,
      3621096.,  3695112.,  3769128.,  3843144.,  3122084.,  3184724.,
      3247364.,  3310004.,  2547888.,  2598768.,  2649648.,  2700528.,
      2734296.,  2791864.,  2849432.,  2907000.,  3448890.,  3521970.,
      3595050.,  3668130.,  4238868.,  4327908.,  4416948.,  4505988.,
      5106022.,  5211470.,  5316918.,  5422366.,  5269774.,  5378358.,
      5486942.,  5595526.,  5433526.,  5545246.,  5656966.,  5768686.,
      5597278.,  5712134.,  5826990.,  5941846.,  4978580.,  5078372.,
      5178164.,  5277956.,  4265554.,  4349834.,  4434114.,  4518394.,
      3456408.,  3524728.,  3593048.,  3661368.,  3702936.,  3778424.,
      3853912.,  3929400.,  4622570.,  4718050.,  4813530.,  4909010.,
      5635508.,  5751428.,  5867348.,  5983268.,  6743542.,  6880350.,
      7017158.,  7153966.,  6907294.,  7047238.,  7187182.,  7327126.,
      7071046.,  7214126.,  7357206.,  7500286.,  7234798.,  7381014.,
      7527230.,  7673446.,  6400820.,  6527492.,  6654164.,  6780836.,
      5454594.,  5561274.,  5667954.,  5774634.,  4394328.,  4480568.,
      4566808.,  4653048.,  4533552.,  4605936.,  4678320.,  4750704.,
      5570740.,  5662180.,  5753620.,  5845060.,  6697448.,  6808328.,
      6919208.,  7030088.,  7915212.,  8045916.,  8176620.,  8307324.,
      8073308.,  8206700.,  8340092.,  8473484.,  8231404.,  8367484.,
      8503564.,  8639644.,  8389500.,  8528268.,  8667036.,  8805804.,
      7338216.,  7458312.,  7578408.,  7698504.,  6180004.,  6281044.,
      6382084.,  6483124.,  4913328.,  4994928.,  5076528.,  5158128.,
      4758536.,  4825256.,  4891976.,  4958696.,  5750990.,  5835190.,
      5919390.,  6003590.,  6824828.,  6926828.,  7028828.,  7130828.,
      7981330.,  8101450.,  8221570.,  8341690.,  8121226.,  8243586.,
      8365946.,  8488306.,  8261122.,  8385722.,  8510322.,  8634922.,
      8401018.,  8527858.,  8654698.,  8781538.,  7282684.,  7392364.,
      7502044.,  7611724.,  6067094.,  6159294.,  6251494.,  6343694.,
      4752968.,  4827368.,  4901768.,  4976168.,  4306208.,  4364704.,
      4423200.,  4481696.,  5073720.,  5147480.,  5221240.,  5295000.,
      5910128.,  5999408.,  6088688.,  6177968.,  6816456.,  6921512.,
      7026568.,  7131624.,  6925608.,  7032456.,  7139304.,  7246152.,
      7034760.,  7143400.,  7252040.,  7360680.,  7143912.,  7254344.,
      7364776.,  7475208.,  6126704.,  6222128.,  6317552.,  6412976.,
      5026264.,  5106424.,  5186584.,  5266744.,  3841568.,  3906208.,
      3970848.,  4035488.,  4472608.,  4572064.,  4671520.,  4770976.,
      5867960.,  5992920.,  6117880.,  6242840.,  7376240.,  7526960.,
      7677680.,  7828400.,  8998472.,  9175208.,  9351944.,  9528680.,
      9096360.,  9274888.,  9453416.,  9631944.,  9194248.,  9374568.,
      9554888.,  9735208.,  9292136.,  9474248.,  9656360.,  9838472.,
      8327024.,  8483888.,  8640752.,  8797616.,  7242840.,  7374200.,
      7505560.,  7636920.,  6038560.,  6144160.,  6249760.,  6355360.,
      7463240.,  7593960.,  7724680.,  7855400.,  9042270.,  9206470.,
      9370670.,  9534870.,  10765148., 10963148., 11161148., 11359148.,
      12633154., 12865274., 13097394., 13329514., 12762298., 12996658.,
      13231018., 13465378., 12886322., 13114730., 13343138., 13571546.,
      12977578., 13200034., 13422490., 13644946., 11215836., 11405132.,
      11594428., 11783724., 9294374.,  9450190.,  9606006.,  9761822.,
      7211912.,  7333928.,  7455944.,  7577960.,  8438064.,  8569840.,
      8701616.,  8833392.,  10183860., 10349540., 10515220., 10680900.,
      12076008., 12275976., 12475944., 12675912., 14116044., 14350684.,
      14585324., 14819964., 14256220., 14493548., 14730876., 14968204.,
      14161900., 14393724., 14625548., 14857372., 14034812., 14261132.,
      14487452., 14713772., 12034792., 12227592., 12420392., 12613192.,
      9871012.,  10029908., 10188804., 10347700., 7541936.,  7666544.,
      7791152.,  7915760.,  9131736.,  9267128.,  9402520.,  9537912.,
      10984890., 11155250., 11325610., 11495970., 12991252., 13197028.,
      13402804., 13608580., 15152614., 15394254., 15635894., 15877534.,
      15316366., 15561142., 15805918., 16050694., 15016246., 15255966.,
      15495686., 15735406., 14683358., 14918022., 15152686., 15387350.,
      12516500., 12716644., 12916788., 13116932., 10177490., 10342666.,
      10507842., 10673018., 7664536.,  7794296.,  7924056.,  8053816.,
      8048280.,  8168824.,  8289368.,  8409912.,  9511530.,  9663330.,
      9815130.,  9966930.,  11113140., 11296644., 11480148., 11663652.,
      12854902., 13070558., 13286214., 13501870., 13018654., 13237446.,
      13456238., 13675030., 12489158., 12702894., 12916630., 13130366.,
      11926894., 12135574., 12344254., 12552934., 10008628., 10186500.,
      10364372., 10542244., 7933058.,  8079674.,  8226290.,  8372906.,
      5698392.,  5813304.,  5928216.,  6043128.,  5990704.,  6087664.,
      6184624.,  6281584.,  6798260.,  6920420.,  7042580.,  7164740.,
      7719912.,  7867656.,  8015400.,  8163144.,  8757196.,  8930908.,
      9104620.,  9278332.,  8915292.,  9091692.,  9268092.,  9444492.,
      8150764.,  8321660.,  8492556.,  8663452.,  7353468.,  7518860.,
      7684252.,  7849644.,  5909224.,  6049800.,  6190376.,  6330952.,
      4333476.,  4448852.,  4564228.,  4679604.,  3673264.,  3763056.,
      3852848.,  3942640.,  2754056.,  2824872.,  2895688.,  2966504.,
      3648846.,  3738166.,  3827486.,  3916806.,  4629116.,  4737260.,
      4845404.,  4953548.,  5696146.,  5823434.,  5950722.,  6078010.,
      5836042.,  5965570.,  6095098.,  6224626.,  5872514.,  5996090.,
      6119666.,  6243242.,  5876218.,  5993842.,  6111466.,  6229090.,
      5199612.,  5299052.,  5398492.,  5497932.,  4421654.,  4502590.,
      4583526.,  4664462.,  3541064.,  3603176.,  3665288.,  3727400.,
      2460960.,  2503072.,  2545184.,  2587296.,  3119416.,  3172696.,
      3225976.,  3279256.,  3830384.,  3895088.,  3959792.,  4024496.,
      4594888.,  4671272.,  4747656.,  4824040.,  4704040.,  4782216.,
      4860392.,  4938568.,  4480392.,  4552168.,  4623944.,  4695720.,
      4223976.,  4289352.,  4354728.,  4420104.,  3577968.,  3632432.,
      3686896.,  3741360.,  2865112.,  2908408.,  2951704.,  2995000.,
      2084384.,  2116256.,  2148128.,  2180000.,  2082592.,  2132896.,
      2183200.,  2233504.,  2757560.,  2821080.,  2884600.,  2948120.,
      3496304.,  3573296.,  3650288.,  3727280.,  4299848.,  4390568.,
      4481288.,  4572008.,  4397736.,  4490248.,  4582760.,  4675272.,
      4495624.,  4589928.,  4684232.,  4778536.,  4593512.,  4689608.,
      4785704.,  4881800.,  4152176.,  4235312.,  4318448.,  4401584.,
      3640920.,  3710840.,  3780760.,  3850680.,  3058720.,  3115168.,
      3171616.,  3228064.,  3615560.,  3684840.,  3754120.,  3823400.,
      4472286.,  4559686.,  4647086.,  4734486.,  5411420.,  5517260.,
      5623100.,  5728940.,  6434242.,  6558842.,  6683442.,  6808042.,
      6563386.,  6690226.,  6817066.,  6943906.,  6692530.,  6821610.,
      6950690.,  7079770.,  6821674.,  6952994.,  7084314.,  7215634.,
      5995228.,  6108748.,  6222268.,  6335788.,  5070502.,  5165902.,
      5261302.,  5356702.,  4046216.,  4123176.,  4200136.,  4277096.,
      4578608.,  4669424.,  4760240.,  4851056.,  5650356.,  5764836.,
      5879316.,  5993796.,  6827496.,  6966024.,  7104552.,  7243080.,
      8111564.,  8274524.,  8437484.,  8600444.,  8251740.,  8417388.,
      8583036.,  8748684.,  8391916.,  8560252.,  8728588.,  8896924.,
      8532092.,  8703116.,  8874140.,  9045164.,  7501032.,  7648776.,
      7796520.,  7944264.,  6347172.,  6471252.,  6595332.,  6719412.,
      5068976.,  5169008.,  5269040.,  5369072.,  5833944.,  5948856.,
      6063768.,  6178680.,  7204666.,  7349426.,  7494186.,  7638946.,
      8708116.,  8883172.,  9058228.,  9233284.,  10346086., 10551886.,
      10757686., 10963486., 10509838., 10718774., 10927710., 11136646.,
      10673590., 10885662., 11097734., 11309806., 10837342., 11052550.,
      11267758., 11482966., 9529748.,  9715556.,  9901364.,  10087172.,
      8070482.,  8226442.,  8382402.,  8538362.,  6457752.,  6583416.,
      6709080.,  6834744.,  6802584.,  6935416.,  7068248.,  7201080.,
      8378346.,  8545506.,  8712666.,  8879826.,  10104756., 10306692.,
      10508628., 10710564., 11983606., 12220766., 12457926., 12695086.,
      12147358., 12387654., 12627950., 12868246., 12311110., 12554542.,
      12797974., 13041406., 12474862., 12721430., 12967998., 13214566.,
      10951988., 11164676., 11377364., 11590052., 9259522.,  9437882.,
      9616242.,  9794602.,  7395672.,  7539256.,  7682840.,  7826424.,
      7578928.,  7700464.,  7822000.,  7943536.,  9238196.,  9391076.,
      9543956.,  9696836.,  11036136., 11220744., 11405352., 11589960.,
      12974284., 13191004., 13407724., 13624444., 13132380., 13351788.,
      13571196., 13790604., 13290476., 13512572., 13734668., 13956764.,
      13448572., 13673356., 13898140., 14122924., 11709672., 11903496.,
      12097320., 12291144., 9814692.,  9977172.,  10139652., 10302132.,
      7762096.,  7892848.,  8023600.,  8154352.,  7520264.,  7627944.,
      7735624.,  7843304.,  9043406.,  9178806.,  9314206.,  9449606.,
      10688892., 10852332., 11015772., 11179212., 12458002., 12649802.,
      12841602., 13033402., 12597898., 12791938., 12985978., 13180018.,
      12737794., 12934074., 13130354., 13326634., 12877690., 13076210.,
      13274730., 13473250., 11130364., 11301484., 11472604., 11643724.,
      9244822.,  9388222.,  9531622.,  9675022.,  7219784.,  7335144.,
      7450504.,  7565864.,  6554912.,  6646176.,  6737440.,  6828704.,
      7704376.,  7819096.,  7933816.,  8048536.,  8955504.,  9093936.,
      9232368.,  9370800.,  10309320., 10471720., 10634120., 10796520.,
      10418472., 10582664., 10746856., 10911048., 10527624., 10693608.,
      10859592., 11025576., 10636776., 10804552., 10972328., 11140104.,
      9106544.,  9251120.,  9395696.,  9540272.,  7460312.,  7581432.,
      7702552.,  7823672.,  5697056.,  5794464.,  5891872.,  5989280.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2344.,    2888.,
      3432.,    3976.,    4520.,    5064.,    5608.,    6152.,    6696.,
      7240.,    7784.,    8328.,    8872.,    9416.,    9960.,    10504.,
      9898.,    10402.,   10906.,   11410.,   8932.,    9332.,    9732.,
      10132.,   5718.,    5950.,    6182.,    6414.,    1340.,    1676.,
      2012.,    2348.,    5896.,    6696.,    7496.,    8296.,    14180.,
      15572.,   16964.,   18356.,   26704.,   28816.,   30928.,   33040.,
      35152.,   37264.,   39376.,   41488.,   43600.,   45712.,   47824.,
      49936.,   52048.,   54160.,   56272.,   58384.,   49748.,   51524.,
      53300.,   55076.,   40648.,   41960.,   43272.,   44584.,   24236.,
      24956.,   25676.,   26396.,   10748.,   11084.,   11420.,   11756.,
      28296.,   29096.,   29896.,   30696.,   53156.,   54548.,   55940.,
      57332.,   85840.,   87952.,   90064.,   92176.,   94288.,   96400.,
      98512.,   100624.,  102736.,  104848.,  106960.,  109072.,  111184.,
      113296.,  115408.,  117520.,  99476.,   101252.,  103028.,  104804.,
      77384.,   78696.,   80008.,   81320.,   44396.,   45116.,   45836.,
      46556.,   20156.,   20492.,   20828.,   21164.,   50696.,   51496.,
      52296.,   53096.,   92132.,   93524.,   94916.,   96308.,   144976.,
      147088.,  149200.,  151312.,  153424.,  155536.,  157648.,  159760.,
      161872.,  163984.,  166096.,  168208.,  170320.,  172432.,  174544.,
      176656.,  149204.,  150980.,  152756.,  154532.,  114120.,  115432.,
      116744.,  118056.,  64556.,   65276.,   65996.,   66716.,   29564.,
      29900.,   30236.,   30572.,   73096.,   73896.,   74696.,   75496.,
      131108.,  132500.,  133892.,  135284.,  204112.,  206224.,  208336.,
      210448.,  212560.,  214672.,  216784.,  218896.,  221008.,  223120.,
      225232.,  227344.,  229456.,  231568.,  233680.,  235792.,  198932.,
      200708.,  202484.,  204260.,  150856.,  152168.,  153480.,  154792.,
      84716.,   85436.,   86156.,   86876.,   38972.,   39308.,   39644.,
      39980.,   95496.,   96296.,   97096.,   97896.,   170084.,  171476.,
      172868.,  174260.,  263248.,  265360.,  267472.,  269584.,  271696.,
      273808.,  275920.,  278032.,  280144.,  282256.,  284368.,  286480.,
      288592.,  290704.,  292816.,  294928.,  248660.,  250436.,  252212.,
      253988.,  187592.,  188904.,  190216.,  191528.,  104876.,  105596.,
      106316.,  107036.,  48380.,   48716.,   49052.,   49388.,   117896.,
      118696.,  119496.,  120296.,  209060.,  210452.,  211844.,  213236.,
      322384.,  324496.,  326608.,  328720.,  330832.,  332944.,  335056.,
      337168.,  339280.,  341392.,  343504.,  345616.,  347728.,  349840.,
      351952.,  354064.,  298388.,  300164.,  301940.,  303716.,  224328.,
      225640.,  226952.,  228264.,  125036.,  125756.,  126476.,  127196.,
      49918.,   50214.,   50510.,   50806.,   111812.,  112468.,  113124.,
      113780.,  185938.,  187018.,  188098.,  189178.,  272552.,  274120.,
      275688.,  277256.,  278824.,  280392.,  281960.,  283528.,  285096.,
      286664.,  288232.,  289800.,  291368.,  292936.,  294504.,  296072.,
      239434.,  240706.,  241978.,  243250.,  173732.,  174644.,  175556.,
      176468.,  94006.,   94494.,   94982.,   95470.,   350.,     902.,
      1454.,    2006.,    2948.,    4116.,    5284.,    6452.,    8050.,
      9898.,    11746.,   13594.,   15912.,   18504.,   21096.,   23688.,
      26280.,   28872.,   31464.,   34056.,   36648.,   39240.,   41832.,
      44424.,   47016.,   49608.,   52200.,   54792.,   41578.,   43618.,
      45658.,   47698.,   32100.,   33524.,   34948.,   36372.,   18326.,
      19070.,   19814.,   20558.,   16316.,   17676.,   19036.,   20396.,
      39944.,   42792.,   45640.,   48488.,   71396.,   75860.,   80324.,
      84788.,   111184.,  117392.,  123600.,  129808.,  136016.,  142224.,
      148432.,  154640.,  160848.,  167056.,  173264.,  179472.,  185680.,
      191888.,  198096.,  204304.,  156116.,  160964.,  165812.,  170660.,
      115656.,  119016.,  122376.,  125736.,  63788.,   65532.,   67276.,
      69020.,   54396.,   55756.,   57116.,   58476.,   119688.,  122536.,
      125384.,  128232.,  196388.,  200852.,  205316.,  209780.,  285008.,
      291216.,  297424.,  303632.,  309840.,  316048.,  322256.,  328464.,
      334672.,  340880.,  347088.,  353296.,  359504.,  365712.,  371920.,
      378128.,  291860.,  296708.,  301556.,  306404.,  209736.,  213096.,
      216456.,  219816.,  112620.,  114364.,  116108.,  117852.,  92476.,
      93836.,   95196.,   96556.,   199432.,  202280.,  205128.,  207976.,
      321380.,  325844.,  330308.,  334772.,  458832.,  465040.,  471248.,
      477456.,  483664.,  489872.,  496080.,  502288.,  508496.,  514704.,
      520912.,  527120.,  533328.,  539536.,  545744.,  551952.,  427604.,
      432452.,  437300.,  442148.,  303816.,  307176.,  310536.,  313896.,
      161452.,  163196.,  164940.,  166684.,  130556.,  131916.,  133276.,
      134636.,  279176.,  282024.,  284872.,  287720.,  446372.,  450836.,
      455300.,  459764.,  632656.,  638864.,  645072.,  651280.,  657488.,
      663696.,  669904.,  676112.,  682320.,  688528.,  694736.,  700944.,
      707152.,  713360.,  719568.,  725776.,  563348.,  568196.,  573044.,
      577892.,  397896.,  401256.,  404616.,  407976.,  210284.,  212028.,
      213772.,  215516.,  168636.,  169996.,  171356.,  172716.,  358920.,
      361768.,  364616.,  367464.,  571364.,  575828.,  580292.,  584756.,
      806480.,  812688.,  818896.,  825104.,  831312.,  837520.,  843728.,
      849936.,  856144.,  862352.,  868560.,  874768.,  880976.,  887184.,
      893392.,  899600.,  699092.,  703940.,  708788.,  713636.,  491976.,
      495336.,  498696.,  502056.,  259116.,  260860.,  262604.,  264348.,
      206716.,  208076.,  209436.,  210796.,  438664.,  441512.,  444360.,
      447208.,  696356.,  700820.,  705284.,  709748.,  980304.,  986512.,
      992720.,  998928.,  1005136., 1011344., 1017552., 1023760., 1029968.,
      1036176., 1042384., 1048592., 1054800., 1061008., 1067216., 1073424.,
      834836.,  839684.,  844532.,  849380.,  586056.,  589416.,  592776.,
      596136.,  307948.,  309692.,  311436.,  313180.,  136254.,  137062.,
      137870.,  138678.,  286532.,  288212.,  289892.,  291572.,  451090.,
      453706.,  456322.,  458938.,  630184.,  633800.,  637416.,  641032.,
      644648.,  648264.,  651880.,  655496.,  659112.,  662728.,  666344.,
      669960.,  673576.,  677192.,  680808.,  684424.,  529162.,  531970.,
      534778.,  537586.,  368932.,  370868.,  372804.,  374740.,  192630.,
      193630.,  194630.,  195630.,  670.,     1734.,    2798.,    3862.,
      5636.,    7828.,    10020.,   12212.,   15154.,   18538.,   21922.,
      25306.,   29480.,   34120.,   38760.,   43400.,   48040.,   52680.,
      57320.,   61960.,   66600.,   71240.,   75880.,   80520.,   85160.,
      89800.,   94440.,   99080.,   73258.,   76834.,   80410.,   83986.,
      55268.,   57716.,   60164.,   62612.,   30934.,   32190.,   33446.,
      34702.,   31292.,   33676.,   36060.,   38444.,   73992.,   78888.,
      83784.,   88680.,   128612.,  136148.,  143684.,  151220.,  195664.,
      205968.,  216272.,  226576.,  236880.,  247184.,  257488.,  267792.,
      278096.,  288400.,  298704.,  309008.,  319312.,  329616.,  339920.,
      350224.,  262484.,  270404.,  278324.,  286244.,  190664.,  196072.,
      201480.,  206888.,  103340.,  106108.,  108876.,  111644.,  98044.,
      100428.,  102812.,  105196.,  211080.,  215976.,  220872.,  225768.,
      339620.,  347156.,  354692.,  362228.,  484176.,  494480.,  504784.,
      515088.,  525392.,  535696.,  546000.,  556304.,  566608.,  576912.,
      587216.,  597520.,  607824.,  618128.,  628432.,  638736.,  484244.,
      492164.,  500084.,  508004.,  342088.,  347496.,  352904.,  358312.,
      180844.,  183612.,  186380.,  189148.,  164796.,  167180.,  169564.,
      171948.,  348168.,  353064.,  357960.,  362856.,  550628.,  558164.,
      565700.,  573236.,  772688.,  782992.,  793296.,  803600.,  813904.,
      824208.,  834512.,  844816.,  855120.,  865424.,  875728.,  886032.,
      896336.,  906640.,  916944.,  927248.,  706004.,  713924.,  721844.,
      729764.,  493512.,  498920.,  504328.,  509736.,  258348.,  261116.,
      263884.,  266652.,  231548.,  233932.,  236316.,  238700.,  485256.,
      490152.,  495048.,  499944.,  761636.,  769172.,  776708.,  784244.,
      1061200., 1071504., 1081808., 1092112., 1102416., 1112720., 1123024.,
      1133328., 1143632., 1153936., 1164240., 1174544., 1184848., 1195152.,
      1205456., 1215760., 927764.,  935684.,  943604.,  951524.,  644936.,
      650344.,  655752.,  661160.,  335852.,  338620.,  341388.,  344156.,
      298300.,  300684.,  303068.,  305452.,  622344.,  627240.,  632136.,
      637032.,  972644.,  980180.,  987716.,  995252.,  1349712., 1360016.,
      1370320., 1380624., 1390928., 1401232., 1411536., 1421840., 1432144.,
      1442448., 1452752., 1463056., 1473360., 1483664., 1493968., 1504272.,
      1149524., 1157444., 1165364., 1173284., 796360.,  801768.,  807176.,
      812584.,  413356.,  416124.,  418892.,  421660.,  365052.,  367436.,
      369820.,  372204.,  759432.,  764328.,  769224.,  774120.,  1183652.,
      1191188., 1198724., 1206260., 1638224., 1648528., 1658832., 1669136.,
      1679440., 1689744., 1700048., 1710352., 1720656., 1730960., 1741264.,
      1751568., 1761872., 1772176., 1782480., 1792784., 1371284., 1379204.,
      1387124., 1395044., 947784.,  953192.,  958600.,  964008.,  490860.,
      493628.,  496396.,  499164.,  222590.,  223910.,  225230.,  226550.,
      461252.,  463956.,  466660.,  469364.,  716242.,  720394.,  724546.,
      728698.,  987816.,  993480.,  999144.,  1004808., 1010472., 1016136.,
      1021800., 1027464., 1033128., 1038792., 1044456., 1050120., 1055784.,
      1061448., 1067112., 1072776., 818890.,  823234.,  827578.,  831922.,
      564132.,  567092.,  570052.,  573012.,  291254.,  292766.,  294278.,
      295790.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,   2610.,   3458.,   4424.,   4830.,   4550.,   4140.,   3596.,
      3840.,   5225.,   6790.,   8540.,   9170.,   8485.,   7600.,   6510.,
      6850.,   9185.,   11781.,  14644.,  15547.,  14211.,  12590.,  10678.,
      11130.,  14770.,  18767.,  23128.,  24353.,  22064.,  19390.,  16324.,
      16394.,  21490.,  26999.,  32928.,  34153.,  30632.,  26670.,  22260.,
      21658.,  28210.,  35231.,  42728.,  43953.,  39200.,  33950.,  28196.,
      26182.,  33815.,  41895.,  50428.,  51625.,  45693.,  39290.,  32410.,
      28540.,  36675.,  45220.,  54180.,  55300.,  48715.,  41700.,  34250.,
      28508.,  36510.,  44870.,  53592.,  54586.,  47930.,  40900.,  33492.,
      16852.,  22050.,  27650.,  33656.,  34062.,  30470.,  26460.,  22028.,
      27600.,  35825.,  44590.,  53900.,  54530.,  48445.,  41800.,  34590.,
      41410.,  53465.,  66213.,  79660.,  80563.,  71235.,  61190.,  50422.,
      58506.,  75250.,  92855.,  111328., 112553., 99176.,  84910.,  69748.,
      63770.,  81970.,  101087., 121128., 122353., 107744., 92190.,  75684.,
      69034.,  88690.,  109319., 130928., 132153., 116312., 99470.,  81620.,
      72838.,  93215.,  114471., 136612., 137809., 120861., 103010., 84250.,
      72460.,  92475.,  113260., 134820., 135940., 118915., 101100., 82490.,
      67676.,  86190.,  105350., 125160., 126154., 110138., 93460.,  76116.,
      31828.,  41490.,  51842.,  62888.,  63294.,  56390.,  48780.,  40460.,
      51360.,  66425.,  82390.,  99260.,  99890.,  88405.,  76000.,  62670.,
      75970.,  97745.,  120645., 144676., 145579., 128259., 109790., 90166.,
      105882., 135730., 166943., 199528., 200753., 176288., 150430., 123172.,
      111146., 142450., 175175., 209328., 210553., 184856., 157710., 129108.,
      116410., 149170., 183407., 219128., 220353., 193424., 164990., 135044.,
      119494., 152615., 187047., 222796., 223993., 196029., 166730., 136090.,
      116380., 148275., 181300., 215460., 216580., 189115., 160500., 130730.,
      106844., 135870., 165830., 196728., 197722., 172346., 146020., 118740.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  107.,  268.,  289.,  310.,  331.,  352.,
      373.,  224.,  170.,  415.,  436.,  457.,  478.,  499.,  520.,  308.,
      233.,  562.,  583.,  604.,  625.,  646.,  667.,  392.,  296.,  709.,
      730.,  751.,  772.,  793.,  814.,  476.,  309.,  705.,  723.,  741.,
      759.,  777.,  795.,  448.,  215.,  478.,  489.,  500.,  511.,  522.,
      533.,  294.,  7.,    22.,   37.,   52.,   67.,   82.,   97.,   56.,
      65.,   155.,  189.,  223.,  257.,  291.,  325.,  182.,  188.,  427.,
      484.,  541.,  598.,  655.,  712.,  392.,  377.,  826.,  883.,  940.,
      997.,  1054., 1111., 602.,  566.,  1225., 1282., 1339., 1396., 1453.,
      1510., 812.,  755.,  1624., 1681., 1738., 1795., 1852., 1909., 1022.,
      944.,  2023., 2080., 2137., 2194., 2251., 2308., 1232., 783.,  1665.,
      1707., 1749., 1791., 1833., 1875., 994.,  473.,  1000., 1023., 1046.,
      1069., 1092., 1115., 588.,  13.,   40.,   67.,   94.,   121.,  148.,
      175.,  98.,   119.,  275.,  333.,  391.,  449.,  507.,  565.,  308.,
      332.,  733.,  826.,  919.,  1012., 1105., 1198., 644.,  647.,  1384.,
      1477., 1570., 1663., 1756., 1849., 980.,  962.,  2035., 2128., 2221.,
      2314., 2407., 2500., 1316., 1277., 2686., 2779., 2872., 2965., 3058.,
      3151., 1652., 1592., 3337., 3430., 3523., 3616., 3709., 3802., 1988.,
      1257., 2625., 2691., 2757., 2823., 2889., 2955., 1540., 731.,  1522.,
      1557., 1592., 1627., 1662., 1697., 882.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,   19760.,   26272.,   33712.,   36904.,   34864.,   31800.,
      27680.,   29340.,   40025.,   52130.,   65695.,   70665.,   65510.,
      58775.,   50420.,   52784.,   70900.,   91080.,   113372.,  120512.,
      110304.,  97840.,   83072.,   86268.,   114625.,  145810.,  179879.,
      189581.,  171934.,  151235.,  127428.,  127932.,  167825.,  210994.,
      257495.,  267197.,  239806.,  208915.,  174468.,  169596.,  221025.,
      276178.,  335111.,  344813.,  307678.,  266595.,  221508.,  205952.,
      266080.,  329760.,  397040.,  406532.,  359928.,  309580.,  255440.,
      225100.,  289325.,  356810.,  427595.,  436485.,  384590.,  329275.,
      270500.,  225248.,  288520.,  354640.,  423640.,  431536.,  378976.,
      323440.,  264896.,  131648.,  172400.,  216352.,  263536.,  266728.,
      238768.,  207480.,  172832.,  216540.,  281225.,  350210.,  423535.,
      428505.,  380870.,  328775.,  272180.,  325808.,  420820.,  521352.,
      627452.,  634592.,  561312.,  482320.,  397568.,  461244.,  593425.,
      732466.,  878423.,  888125.,  782782.,  670355.,  550788.,  502908.,
      646625.,  797650.,  956039.,  965741.,  850654.,  728035.,  597828.,
      544572.,  699825.,  862834.,  1033655., 1043357., 918526.,  785715.,
      644868.,  575744.,  736960.,  905184.,  1080464., 1089956., 956088.,
      815020.,  666704.,  573580.,  732125.,  896810.,  1067675., 1076565.,
      941870.,  800875.,  653540.,  536288.,  683080.,  835024.,  992152.,
      1000048., 873184.,  741040.,  603584.,  249152.,  325040.,  406432.,
      493360.,  496552.,  442672.,  383160.,  317984.,  403740.,  522425.,
      648290.,  781375.,  786345.,  696230.,  598775.,  493940.,  598832.,
      770740.,  951624.,  1141532., 1148672., 1012320., 866800.,  712064.,
      836220.,  1072225., 1319122., 1576967., 1586669., 1393630., 1189475.,
      974148.,  877884.,  1125425., 1384306., 1654583., 1664285., 1461502.,
      1247155., 1021188., 919548.,  1178625., 1449490., 1732199., 1741901.,
      1529374., 1304835., 1068228., 945536.,  1207840., 1480608., 1763888.,
      1773380., 1552248., 1320460., 1077968., 922060.,  1174925., 1436810.,
      1707755., 1716645., 1499150., 1272475., 1036580., 847328.,  1077640.,
      1315408., 1560664., 1568560., 1367392., 1158640., 942272.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    102.,   122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,
      986.,   1142.,  1298.,  1454.,  1610.,  1015.,  751.,   1922.,  2078.,
      2234.,  2390.,  2546.,  2702.,  1645.,  1213.,  3014.,  3170.,  3326.,
      3482.,  3638.,  3794.,  2275.,  1675.,  4106.,  4262.,  4418.,  4574.,
      4730.,  4886.,  2905.,  2137.,  5198.,  5354.,  5510.,  5666.,  5822.,
      5978.,  3535.,  2300.,  5288.,  5424.,  5560.,  5696.,  5832.,  5968.,
      3384.,  1625.,  3630.,  3714.,  3798.,  3882.,  3966.,  4050.,  2243.,
      41.,    142.,   258.,   374.,   490.,   606.,   722.,   419.,   472.,
      1136.,  1400.,  1664.,  1928.,  2192.,  2456.,  1380.,  1405.,  3206.,
      3650.,  4094.,  4538.,  4982.,  5426.,  2995.,  2875.,  6314.,  6758.,
      7202.,  7646.,  8090.,  8534.,  4633.,  4345.,  9422.,  9866.,  10310.,
      10754., 11198., 11642., 6271.,  5815.,  12530., 12974., 13418., 13862.,
      14306., 14750., 7909.,  7285.,  15638., 16082., 16526., 16970., 17414.,
      17858., 9547.,  6068.,  12920., 13248., 13576., 13904., 14232., 14560.,
      7728.,  3677.,  7782.,  7962.,  8142.,  8322.,  8502.,  8682.,  4583.,
      77.,    262.,   474.,   686.,   898.,   1110.,  1322.,  743.,   880.,
      2048.,  2504.,  2960.,  3416.,  3872.,  4328.,  2364.,  2521.,  5582.,
      6314.,  7046.,  7778.,  8510.,  9242.,  4975.,  4999.,  10706., 11438.,
      12170., 12902., 13634., 14366., 7621.,  7477.,  15830., 16562., 17294.,
      18026., 18758., 19490., 10267., 9955.,  20954., 21686., 22418., 23150.,
      23882., 24614., 12913., 12433., 26078., 26810., 27542., 28274., 29006.,
      29738., 15559., 9836.,  20552., 21072., 21592., 22112., 22632., 23152.,
      12072., 5729.,  11934., 12210., 12486., 12762., 13038., 13314., 6923.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,   153640.,   204656.,   263032.,   288344.,   272816.,
      249160.,   217120.,   229240.,   313150.,   408340.,   515130.,
      554610.,   514660.,   462150.,   396760.,   414256.,   556940.,
      716040.,   891940.,   948724.,   868968.,   771260.,   655216.,
      679112.,   902930.,   1149260.,  1418550.,  1495774.,  1357244.,
      1194410.,  1006824.,  1010632.,  1326290.,  1668044.,  2036342.,
      2113566.,  1897532.,  1653610.,  1381352.,  1342152.,  1749650.,
      2186828.,  2654134.,  2731358.,  2437820.,  2112810.,  1755880.,
      1633648.,  2110940.,  2616552.,  3150868.,  3226468.,  2857032.,
      2457740.,  2028208.,  1787960.,  2298350.,  2834740.,  3397450.,
      3468290.,  3056260.,  2616950.,  2150040.,  1790752.,  2293960.,
      2819888.,  3368792.,  3431736.,  3014000.,  2572520.,  2107040.,
      1040544.,  1363240.,  1711472.,  2085496.,  2110808.,  1890224.,
      1643080.,  1369120.,  1715320.,  2228350.,  2775700.,  3357690.,
      3397170.,  3020260.,  2607750.,  2159320.,  2584624.,  3339020.,
      4137480.,  4980388.,  5037172.,  4456296.,  3829820.,  3157360.,
      3662792.,  4713170.,  5818316.,  6978678.,  7055902.,  6219836.,
      5327210.,  4377576.,  3994312.,  5136530.,  6337100.,  7596470.,
      7673694.,  6760124.,  5786410.,  4752104.,  4325832.,  5559890.,
      6855884.,  8214262.,  8291486.,  7300412.,  6245610.,  5126632.,
      4578160.,  5860700.,  7199208.,  8594068.,  8669668.,  7605576.,
      6483980.,  5304496.,  4564280.,  5826350.,  7137460.,  8497930.,
      8568770.,  7497220.,  6375350.,  5202840.,  4269856.,  5438920.,
      6649136.,  7900760.,  7963704.,  6953840.,  5901800.,  4807328.,
      1971360.,  2572840.,  3218288.,  3907960.,  3933272.,  3507632.,
      3037000.,  2521120.,  3201400.,  4143550.,  5143060.,  6200250.,
      6239730.,  5525860.,  4753350.,  3921880.,  4754992.,  6121100.,
      7558920.,  9068836.,  9125620.,  8043624.,  6888380.,  5659504.,
      6646472.,  8523410.,  10487372., 12538806., 12616030., 11082428.,
      9460010.,  7748328.,  6977992.,  8946770.,  11006156., 13156598.,
      13233822., 11622716., 9919210.,  8122856.,  7309512.,  9370130.,
      11524940., 13774390., 13851614., 12163004., 10378410., 8497384.,
      7522672.,  9610460.,  11781864., 14037268., 14112868., 12354120.,
      10510220., 8580784.,  7340600.,  9354350.,  11440180., 13598410.,
      13669250., 11938180., 10133750., 8255640.,  6748960.,  8583880.,
      10478384., 12432728., 12495672., 10893680., 9231080.,  7507616.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    140.,    284.,    428.,    572.,    716.,    860.,    694.,
      420.,   1576.,   2120.,   2664.,   3208.,   3752.,   4296.,   2964.,
      2066.,  6100.,   7300.,   8500.,   9700.,   10900.,  12100.,  7706.,
      5594.,  14500.,  15700.,  16900.,  18100.,  19300.,  20500.,  12578.,
      9122.,  22900.,  24100.,  25300.,  26500.,  27700.,  28900.,  17450.,
      12650., 31300.,  32500.,  33700.,  34900.,  36100.,  37300.,  22322.,
      16178., 39700.,  40900.,  42100.,  43300.,  44500.,  45700.,  27194.,
      17716., 40904.,  41960.,  43016.,  44072.,  45128.,  46184.,  26276.,
      12622., 28268.,  28924.,  29580.,  30236.,  30892.,  31548.,  17510.,
      270.,   1004.,   1916.,   2828.,   3740.,   4652.,   5564.,   3238.,
      3588.,  8680.,   10760.,  12840.,  14920.,  17000.,  19080.,  10740.,
      10850., 24820.,  28324.,  31828.,  35332.,  38836.,  42340.,  23402.,
      22442., 49348.,  52852.,  56356.,  59860.,  63364.,  66868.,  36338.,
      34034., 73876.,  77380.,  80884.,  84388.,  87892.,  91396.,  49274.,
      45626., 98404.,  101908., 105412., 108916., 112420., 115924., 62210.,
      57218., 122932., 126436., 129940., 133444., 136948., 140452., 75146.,
      47764., 101768., 104360., 106952., 109544., 112136., 114728., 60932.,
      28990., 61388.,  62812.,  64236.,  65660.,  67084.,  68508.,  36182.,
      510.,   1868.,   3548.,   5228.,   6908.,   8588.,   10268.,  5782.,
      6756.,  15784.,  19400.,  23016.,  26632.,  30248.,  33864.,  18516.,
      19634., 43540.,  49348.,  55156.,  60964.,  66772.,  72580.,  39098.,
      39290., 84196.,  90004.,  95812.,  101620., 107428., 113236., 60098.,
      58946., 124852., 130660., 136468., 142276., 148084., 153892., 81098.,
      78602., 165508., 171316., 177124., 182932., 188740., 194548., 102098.,
      98258., 206164., 211972., 217780., 223588., 229396., 235204., 123098.,
      77812., 162632., 166760., 170888., 175016., 179144., 183272., 95588.,
      45358., 94508.,  96700.,  98892.,  101084., 103276., 105468., 54854.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,   3752.,   4920.,   5220.,   6544.,   6916.,   8400.,   8848.,
      9184.,   9660.,   8680.,   9100.,   7920.,   8280.,   6896.,   7192.,
      7310.,   7680.,   9975.,   10450.,  12995.,  13580.,  16380.,  17080.,
      17605.,  18340.,  16325.,  16970.,  14650.,  15200.,  12570.,  13020.,
      13160.,  13700.,  17680.,  18370.,  22716.,  23562.,  28280.,  29288.,
      30044.,  31094.,  27504.,  28422.,  24400.,  25180.,  20720.,  21356.,
      21518.,  22260.,  28595.,  29540.,  36379.,  37534.,  44884.,  46256.,
      47285.,  48706.,  42889.,  44128.,  37730.,  38780.,  31794.,  32648.,
      31822.,  32788.,  41755.,  42980.,  52507.,  53998.,  64092.,  65856.,
      66493.,  68306.,  59689.,  61264.,  52010.,  53340.,  43442.,  44520.,
      42126.,  43316.,  54915.,  56420.,  68635.,  70462.,  83300.,  85456.,
      85701.,  87906.,  76489.,  78400.,  66290.,  67900.,  55090.,  56392.,
      51248.,  52364.,  66220.,  67630.,  82080.,  83790.,  98840.,  100856.,
      101192., 103250., 89604.,  91386.,  77080.,  78580.,  63608.,  64820.,
      56070.,  57080.,  72075.,  73350.,  88895.,  90440.,  106540., 108360.,
      108745., 110600., 95825.,  97430.,  82050.,  83400.,  67410.,  68500.,
      56144.,  57016.,  71920.,  73020.,  88408.,  89740.,  105616., 107184.,
      107576., 109172., 94480.,  95860.,  80640.,  81800.,  66048.,  66984.,
      32320.,  33704.,  42360.,  44100.,  53200.,  55300.,  64848.,  67312.,
      65632.,  68124.,  58792.,  60940.,  51120.,  52920.,  42608.,  44056.,
      53390.,  55200.,  69375.,  71650.,  86435.,  89180.,  104580., 107800.,
      105805., 109060., 94085.,  96890.,  81250.,  83600.,  67290.,  69180.,
      80552.,  82820.,  104080., 106930., 128988., 132426., 155288., 159320.,
      157052., 161126., 138960., 142470., 119440., 122380., 98480.,  100844.,
      114254., 117012., 147035., 150500., 181531., 185710., 217756., 222656.,
      220157., 225106., 194089., 198352., 166250., 169820., 136626., 139496.,
      124558., 127540., 160195., 163940., 197659., 202174., 236964., 242256.,
      239365., 244706., 210889., 215488., 180530., 184380., 148274., 151368.,
      134862., 138068., 173355., 177380., 213787., 218638., 256172., 261856.,
      258573., 264306., 227689., 232624., 194810., 198940., 159922., 163240.,
      142832., 145676., 182860., 186430., 224640., 228942., 268184., 273224.,
      270536., 275618., 237348., 241722., 202360., 206020., 165560., 168500.,
      142470., 144920., 181875., 184950., 222815., 226520., 265300., 269640.,
      267505., 271880., 234065., 237830., 199050., 202200., 162450., 164980.,
      133328., 135352., 169840., 172380., 207640., 210700., 246736., 250320.,
      248696., 252308., 217168., 220276., 184320., 186920., 150144., 152232.,
      61120.,  63656.,  79800.,  82980.,  99856.,  103684., 121296., 125776.,
      122080., 126588., 108904., 112780., 94320.,  97560.,  78320.,  80920.,
      99470.,  102720., 128775., 132850., 159875., 164780., 192780., 198520.,
      194005., 199780., 171845., 176810., 147850., 152000., 122010., 125340.,
      147944., 151940., 190480., 195490., 235260., 241290., 282296., 289352.,
      284060., 291158., 250416., 256518., 214480., 219580., 176240., 180332.,
      206990., 211764., 265475., 271460., 326683., 333886., 390628., 399056.,
      393029., 401506., 345289., 352576., 294770., 300860., 241458., 246344.,
      217294., 222292., 278635., 284900., 342811., 350350., 409836., 418656.,
      412237., 421106., 362089., 369712., 309050., 315420., 253106., 258216.,
      227598., 232820., 291795., 298340., 358939., 366814., 429044., 438256.,
      431445., 440706., 378889., 386848., 323330., 329980., 264754., 270088.,
      234416., 238988., 299500., 305230., 367200., 374094., 437528., 445592.,
      439880., 447986., 385092., 392058., 327640., 333460., 267512., 272180.,
      228870., 232760., 291675., 296550., 356735., 362600., 424060., 430920.,
      426265., 433160., 372305., 378230., 316050., 321000., 257490., 261460.,
      210512., 213688., 267760., 271740., 326872., 331660., 387856., 393456.,
      389816., 395444., 339856., 344692., 288000., 292040., 234240., 237480.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    2.,    5.,    8.,    11.,   14.,   17.,   20.,   23.,   26.,
      29.,   32.,   35.,   38.,   26.,   28.,   18.,   22.,   60.,   70.,
      80.,   90.,   100.,  110.,  120.,  130.,  140.,  150.,  160.,  170.,
      106.,  112.,  79.,   88.,   221.,  242.,  263.,  284.,  305.,  326.,
      347.,  368.,  389.,  410.,  431.,  452.,  268.,  280.,  205.,  214.,
      515.,  536.,  557.,  578.,  599.,  620.,  641.,  662.,  683.,  704.,
      725.,  746.,  436.,  448.,  331.,  340.,  809.,  830.,  851.,  872.,
      893.,  914.,  935.,  956.,  977.,  998.,  1019., 1040., 604.,  616.,
      457.,  466.,  1103., 1124., 1145., 1166., 1187., 1208., 1229., 1250.,
      1271., 1292., 1313., 1334., 772.,  784.,  583.,  592.,  1397., 1418.,
      1439., 1460., 1481., 1502., 1523., 1544., 1565., 1586., 1607., 1628.,
      940.,  952.,  610.,  618.,  1392., 1410., 1428., 1446., 1464., 1482.,
      1500., 1518., 1536., 1554., 1572., 1590., 886.,  896.,  425.,  430.,
      945.,  956.,  967.,  978.,  989.,  1000., 1011., 1022., 1033., 1044.,
      1055., 1066., 582.,  588.,  7.,    14.,   29.,   44.,   59.,   74.,
      89.,   104.,  119.,  134.,  149.,  164.,  179.,  194.,  104.,  112.,
      114.,  130.,  276.,  310.,  344.,  378.,  412.,  446.,  480.,  514.,
      548.,  582.,  616.,  650.,  346.,  364.,  349.,  376.,  797.,  854.,
      911.,  968.,  1025., 1082., 1139., 1196., 1253., 1310., 1367., 1424.,
      754.,  784.,  727.,  754.,  1595., 1652., 1709., 1766., 1823., 1880.,
      1937., 1994., 2051., 2108., 2165., 2222., 1174., 1204., 1105., 1132.,
      2393., 2450., 2507., 2564., 2621., 2678., 2735., 2792., 2849., 2906.,
      2963., 3020., 1594., 1624., 1483., 1510., 3191., 3248., 3305., 3362.,
      3419., 3476., 3533., 3590., 3647., 3704., 3761., 3818., 2014., 2044.,
      1861., 1888., 3989., 4046., 4103., 4160., 4217., 4274., 4331., 4388.,
      4445., 4502., 4559., 4616., 2434., 2464., 1546., 1566., 3288., 3330.,
      3372., 3414., 3456., 3498., 3540., 3582., 3624., 3666., 3708., 3750.,
      1966., 1988., 935.,  946.,  1977., 2000., 2023., 2046., 2069., 2092.,
      2115., 2138., 2161., 2184., 2207., 2230., 1164., 1176., 13.,   26.,
      53.,   80.,   107.,  134.,  161.,  188.,  215.,  242.,  269.,  296.,
      323.,  350.,  182.,  196.,  210.,  238.,  492.,  550.,  608.,  666.,
      724.,  782.,  840.,  898.,  956.,  1014., 1072., 1130., 586.,  616.,
      619.,  664.,  1373., 1466., 1559., 1652., 1745., 1838., 1931., 2024.,
      2117., 2210., 2303., 2396., 1240., 1288., 1249., 1294., 2675., 2768.,
      2861., 2954., 3047., 3140., 3233., 3326., 3419., 3512., 3605., 3698.,
      1912., 1960., 1879., 1924., 3977., 4070., 4163., 4256., 4349., 4442.,
      4535., 4628., 4721., 4814., 4907., 5000., 2584., 2632., 2509., 2554.,
      5279., 5372., 5465., 5558., 5651., 5744., 5837., 5930., 6023., 6116.,
      6209., 6302., 3256., 3304., 3139., 3184., 6581., 6674., 6767., 6860.,
      6953., 7046., 7139., 7232., 7325., 7418., 7511., 7604., 3928., 3976.,
      2482., 2514., 5184., 5250., 5316., 5382., 5448., 5514., 5580., 5646.,
      5712., 5778., 5844., 5910., 3046., 3080., 1445., 1462., 3009., 3044.,
      3079., 3114., 3149., 3184., 3219., 3254., 3289., 3324., 3359., 3394.,
      1746., 1764.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,   28736.,   37740.,   40100.,   50336.,   53264.,   64764.,
      68292.,   70980.,   74732.,   67232.,   70544.,   61460.,   64300.,
      53600.,   55936.,   56480.,   59400.,   77225.,   80975.,   100780.,
      105400.,  127225.,  132755.,  136955.,  142765.,  127180.,  132280.,
      114275.,  118625.,  98160.,   101720.,  102352.,  106624.,  137690.,
      143150.,  177120.,  183816.,  220738.,  228718.,  234766.,  243082.,
      215136.,  222408.,  191030.,  197210.,  162352.,  167392.,  168112.,
      173992.,  223615.,  231105.,  284732.,  293888.,  351575.,  362453.,
      370685.,  381955.,  336476.,  346304.,  296205.,  304535.,  249760.,
      256536.,  250096.,  257768.,  328335.,  338065.,  413084.,  424928.,
      504455.,  518469.,  523565.,  537971.,  470204.,  482720.,  409885.,
      420455.,  342496.,  351064.,  332080.,  341544.,  433055.,  445025.,
      541436.,  555968.,  657335.,  674485.,  676445.,  693987.,  603932.,
      619136.,  523565.,  536375.,  435232.,  445592.,  405232.,  414112.,
      523730.,  534950.,  649296.,  662904.,  782026.,  798070.,  800758.,
      817138.,  709200.,  723384.,  610190.,  622130.,  503632.,  513280.,
      444160.,  452200.,  571025.,  581175.,  704380.,  716680.,  844305.,
      858795.,  861875.,  876645.,  759580.,  772360.,  650475.,  661225.,
      534480.,  543160.,  445280.,  452224.,  570460.,  579220.,  701312.,
      711920.,  837900.,  850388.,  853524.,  866236.,  749696.,  760688.,
      639940.,  649180.,  524192.,  531648.,  255008.,  266048.,  334380.,
      348260.,  420128.,  436880.,  512316.,  531972.,  518532.,  538412.,
      464672.,  481808.,  404180.,  418540.,  336992.,  348544.,  422240.,
      436680.,  548825.,  566975.,  683980.,  705880.,  827785.,  853475.,
      837515.,  863485.,  744940.,  767320.,  643475.,  662225.,  533040.,
      548120.,  638032.,  656128.,  824570.,  847310.,  1022112., 1049544.,
      1230754., 1262926., 1244782., 1277290., 1101600., 1129608., 947030.,
      970490.,  780976.,  799840.,  905968.,  927976.,  1166095., 1193745.,
      1439900., 1473248., 1727495., 1766597., 1746605., 1786099., 1540028.,
      1574048., 1319325., 1347815., 1084384., 1107288., 987952.,  1011752.,
      1270815., 1300705., 1568252., 1604288., 1880375., 1922613., 1899485.,
      1942115., 1673756., 1710464., 1433005., 1463735., 1177120., 1201816.,
      1069936., 1095528., 1375535., 1407665., 1696604., 1735328., 2033255.,
      2078629., 2052365., 2098131., 1807484., 1846880., 1546685., 1579655.,
      1269856., 1296344., 1134448., 1157152., 1452530., 1481030., 1784592.,
      1818936., 2130730., 2170966., 2149462., 2190034., 1885968., 1920888.,
      1608110., 1637330., 1315792., 1339264., 1132480., 1152040., 1445825.,
      1470375., 1771420., 1801000., 2109345., 2143995., 2126915., 2161845.,
      1861180., 1891240., 1582875., 1608025., 1291920., 1312120., 1060448.,
      1076608., 1350940., 1371220., 1651712., 1676144., 1962828., 1991444.,
      1978452., 2007292., 1727744., 1752560., 1466500., 1487260., 1194656.,
      1211328., 483104.,  503360.,  631020.,  656420.,  789920.,  820496.,
      959868.,  995652.,  966084.,  1002092., 862112.,  893072.,  746900.,
      772780.,  620384.,  641152.,  788000.,  813960.,  1020425., 1052975.,
      1267180., 1306360., 1528345., 1574195., 1538075., 1584205., 1362700.,
      1402360., 1172675., 1205825., 967920.,  994520.,  1173712., 1205632.,
      1511450., 1551470., 1867104., 1915272., 2240770., 2297134., 2254798.,
      2311498., 1988064., 2036808., 1703030., 1743770., 1399600., 1432288.,
      1643824., 1681960., 2108575., 2156385., 2595068., 2652608., 3103415.,
      3170741., 3122525., 3190243., 2743580., 2801792., 2342445., 2391095.,
      1919008., 1958040., 1725808., 1765736., 2213295., 2263345., 2723420.,
      2783648., 3256295., 3326757., 3275405., 3346259., 2877308., 2938208.,
      2456125., 2507015., 2011744., 2052568., 1807792., 1849512., 2318015.,
      2370305., 2851772., 2914688., 3409175., 3482773., 3428285., 3502275.,
      3011036., 3074624., 2569805., 2622935., 2104480., 2147096., 1863664.,
      1900192., 2381330., 2427110., 2919888., 2974968., 3479434., 3543862.,
      3498166., 3562930., 3062736., 3118392., 2606030., 2652530., 2127952.,
      2165248., 1820800., 1851880., 2320625., 2359575., 2838460., 2885320.,
      3374385., 3429195., 3391955., 3447045., 2962780., 3010120., 2515275.,
      2554825., 2049360., 2081080., 1675616., 1700992., 2131420., 2163220.,
      2602112., 2640368., 3087756., 3132500., 3103380., 3148348., 2705792.,
      2744432., 2293060., 2325340., 1865120., 1891008.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    68.,    88.,    108.,   128.,   148.,
      168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,
      392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,
      1040.,  1112.,  1184.,  758.,   802.,   527.,   593.,   1540.,  1696.,
      1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,
      3256.,  1961.,  2051.,  1451.,  1517.,  3724.,  3880.,  4036.,  4192.,
      4348.,  4504.,  4660.,  4816.,  4972.,  5128.,  5284.,  5440.,  3221.,
      3311.,  2375.,  2441.,  5908.,  6064.,  6220.,  6376.,  6532.,  6688.,
      6844.,  7000.,  7156.,  7312.,  7468.,  7624.,  4481.,  4571.,  3299.,
      3365.,  8092.,  8248.,  8404.,  8560.,  8716.,  8872.,  9028.,  9184.,
      9340.,  9496.,  9652.,  9808.,  5741.,  5831.,  4223.,  4289.,  10276.,
      10432., 10588., 10744., 10900., 11056., 11212., 11368., 11524., 11680.,
      11836., 11992., 7001.,  7091.,  4554.,  4614.,  10472., 10608., 10744.,
      10880., 11016., 11152., 11288., 11424., 11560., 11696., 11832., 11968.,
      6710.,  6786.,  3221.,  3259.,  7196.,  7280.,  7364.,  7448.,  7532.,
      7616.,  7700.,  7784.,  7868.,  7952.,  8036.,  8120.,  4451.,  4497.,
      41.,    95.,    196.,   312.,   428.,   544.,   660.,   776.,   892.,
      1008.,  1124.,  1240.,  1356.,  1472.,  791.,   853.,   850.,   974.,
      2072.,  2336.,  2600.,  2864.,  3128.,  3392.,  3656.,  3920.,  4184.,
      4448.,  4712.,  4976.,  2654.,  2794.,  2651.,  2861.,  6076.,  6520.,
      6964.,  7408.,  7852.,  8296.,  8740.,  9184.,  9628.,  10072., 10516.,
      10960., 5813.,  6047.,  5591.,  5801.,  12292., 12736., 13180., 13624.,
      14068., 14512., 14956., 15400., 15844., 16288., 16732., 17176., 9089.,
      9323.,  8531.,  8741.,  18508., 18952., 19396., 19840., 20284., 20728.,
      21172., 21616., 22060., 22504., 22948., 23392., 12365., 12599., 11471.,
      11681., 24724., 25168., 25612., 26056., 26500., 26944., 27388., 27832.,
      28276., 28720., 29164., 29608., 15641., 15875., 14411., 14621., 30940.,
      31384., 31828., 32272., 32716., 33160., 33604., 34048., 34492., 34936.,
      35380., 35824., 18917., 19151., 12018., 12174., 25592., 25920., 26248.,
      26576., 26904., 27232., 27560., 27888., 28216., 28544., 28872., 29200.,
      15326., 15498., 7289.,  7375.,  15428., 15608., 15788., 15968., 16148.,
      16328., 16508., 16688., 16868., 17048., 17228., 17408., 9095.,  9189.,
      77.,    179.,   364.,   576.,   788.,   1000.,  1212.,  1424.,  1636.,
      1848.,  2060.,  2272.,  2484.,  2696.,  1403.,  1513.,  1594.,  1814.,
      3752.,  4208.,  4664.,  5120.,  5576.,  6032.,  6488.,  6944.,  7400.,
      7856.,  8312.,  8768.,  4550.,  4786.,  4775.,  5129.,  10612., 11344.,
      12076., 12808., 13540., 14272., 15004., 15736., 16468., 17200., 17932.,
      18664., 9665.,  10043., 9731.,  10085., 20860., 21592., 22324., 23056.,
      23788., 24520., 25252., 25984., 26716., 27448., 28180., 28912., 14957.,
      15335., 14687., 15041., 31108., 31840., 32572., 33304., 34036., 34768.,
      35500., 36232., 36964., 37696., 38428., 39160., 20249., 20627., 19643.,
      19997., 41356., 42088., 42820., 43552., 44284., 45016., 45748., 46480.,
      47212., 47944., 48676., 49408., 25541., 25919., 24599., 24953., 51604.,
      52336., 53068., 53800., 54532., 55264., 55996., 56728., 57460., 58192.,
      58924., 59656., 30833., 31211., 19482., 19734., 40712., 41232., 41752.,
      42272., 42792., 43312., 43832., 44352., 44872., 45392., 45912., 46432.,
      23942., 24210., 11357., 11491., 23660., 23936., 24212., 24488., 24764.,
      25040., 25316., 25592., 25868., 26144., 26420., 26696., 13739., 13881.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,   224800.,   295480.,   314200.,   394672.,   417904.,
      508424.,   536424.,   557928.,   587720.,   529072.,   555376.,
      484120.,   506680.,   422560.,   441120.,   443880.,   467080.,
      607550.,   637350.,   793580.,   830300.,   1002610.,  1046570.,
      1080170.,  1126370.,  1003820.,  1044380.,  902550.,   937150.,
      775720.,   804040.,   807152.,   841136.,   1086580.,  1130020.,
      1398600.,  1451880.,  1743980.,  1807484.,  1855868.,  1922060.,
      1701576.,  1759464.,  1511620.,  1560820.,  1285232.,  1325360.,
      1328824.,  1375640.,  1768410.,  1828050.,  2252740.,  2325652.,
      2782710.,  2869342.,  2935198.,  3024966.,  2665348.,  2743636.,
      2347170.,  2413530.,  1979768.,  2033752.,  1982904.,  2044056.,
      2603930.,  2681490.,  3276868.,  3371284.,  4002614.,  4114334.,
      4155102.,  4269958.,  3732484.,  3832276.,  3254370.,  3338650.,
      2719864.,  2788184.,  2636984.,  2712472.,  3439450.,  3534930.,
      4300996.,  4416916.,  5222518.,  5359326.,  5375006.,  5514950.,
      4799620.,  4920916.,  4161570.,  4263770.,  3459960.,  3542616.,
      3222896.,  3293744.,  4165780.,  4255300.,  5165064.,  5273640.,
      6221516.,  6349532.,  6371036.,  6501740.,  5643144.,  5756328.,
      4855780.,  4951060.,  4008176.,  4085168.,  3535720.,  3599880.,
      4545950.,  4626950.,  5607980.,  5706140.,  6722450.,  6838090.,
      6862730.,  6980610.,  6048620.,  6150620.,  5180150.,  5265950.,
      4256680.,  4325960.,  3546784.,  3602208.,  4544120.,  4614040.,
      5586736.,  5671408.,  6675144.,  6774824.,  6799912.,  6901384.,
      5973040.,  6060784.,  5098840.,  5172600.,  4176800.,  4236320.,
      2025888.,  2114080.,  2657080.,  2767960.,  3339184.,  3473008.,
      4072712.,  4229736.,  4122216.,  4281032.,  3694768.,  3831664.,
      3214360.,  3329080.,  2680480.,  2772768.,  3358440.,  3473800.,
      4365950.,  4510950.,  5441900.,  5616860.,  6586930.,  6792170.,
      6664490.,  6871970.,  5928620.,  6107420.,  5121750.,  5271550.,
      4243240.,  4363720.,  5078768.,  5223344.,  6564340.,  6746020.,
      8137800.,  8356968.,  9799916.,  10056956., 9911804.,  10171532.,
      8772552.,  8996328.,  7542340.,  7729780.,  6220400.,  6371120.,
      7215544.,  7391384.,  9288090.,  9509010.,  11469892., 11736340.,
      13761846., 14074270., 13914334., 14229894., 12269572., 12541396.,
      10511970., 10739610., 8640632.,  8823640.,  7750840.,  7908248.,
      9934170.,  10132050., 12217540., 12456340., 14601846., 14882014.,
      14754334., 15037638., 12961924., 13206100., 11065890., 11270490.,
      9065336.,  9229912.,  7827384.,  7966360.,  10006810., 10181650.,
      12277060., 12488212., 14639030., 14886942., 14791518., 15042566.,
      12966148., 13182676., 11046370., 11227930., 9031288.,  9177432.,
      7428976.,  7544880.,  9479700.,  9625540.,  11609352., 11785512.,
      13818700., 14025564., 13968220., 14177772., 12222600., 12403368.,
      10394980., 10546580., 8484592.,  8606640.,  6499432.,  6590216.,
      8283870.,  8398150.,  10133420., 10271516., 12048722., 12210954.,
      12189002., 12353474., 10653932., 10795868., 9051190.,  9170270.,
      7380136.,  7476040.,  5010080.,  5073696.,  6383480.,  6463640.,
      7806256.,  7903216.,  9278920.,  9392936.,  9403688.,  9519496.,
      8217136.,  8317168.,  6979160.,  7063160.,  5689248.,  5756960.,
      613792.,   644640.,   820280.,   859480.,   1049008.,  1096816.,
      1300488.,  1357160.,  1349992.,  1408456.,  1232560.,  1283440.,
      1090840.,  1133880.,  924320.,   959264.,   1091560.,  1135240.,
      1442750.,  1498150.,  1826540.,  1893980.,  2243570.,  2323370.,
      2321130.,  2403170.,  2098220.,  2169500.,  1840150.,  1900350.,
      1546280.,  1595080.,  1756400.,  1814960.,  2303860.,  2378020.,
      2896200.,  2986344.,  3534188.,  3640700.,  3646076.,  3755276.,
      3272904.,  3367656.,  2851780.,  2931700.,  2381936.,  2446640.,
      2636984.,  2712472.,  3439450.,  3534930.,  4300996.,  4416916.,
      5222518.,  5359326.,  5375006.,  5514950.,  4799620.,  4920916.,
      4161570.,  4263770.,  3459960.,  3542616.,  3291064.,  3380888.,
      4274970.,  4388370.,  5325124.,  5462548.,  6442422.,  6604318.,
      6594910.,  6759942.,  5866756.,  6009556.,  5068770.,  5188890.,
      4200056.,  4297048.,  3945144.,  4049304.,  5110490.,  5241810.,
      6349252.,  6508180.,  7662326.,  7849310.,  7814814.,  8004934.,
      6933892.,  7098196.,  5975970.,  6114010.,  4940152.,  5051480.,
      4516208.,  4611632.,  5813140.,  5933380.,  7178760.,  7324200.,
      8613836.,  8784860.,  8763356.,  8937068.,  7730568.,  7880616.,
      6626020.,  6752020.,  5448944.,  5550512.,  4756840.,  4841480.,
      6097950.,  6204550.,  7501100.,  7629980.,  8966930.,  9118410.,
      9107210.,  9260930.,  8003180.,  8135900.,  6834550.,  6945950.,
      5600680.,  5690440.,  4638368.,  4710176.,  5929080.,  6019480.,
      7273264.,  7382512.,  8671432.,  8799784.,  8796200.,  8926344.,
      7708720.,  7821040.,  6565720.,  6659960.,  5366688.,  5442592.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    468.,    612.,    756.,    900.,
      1044.,   1188.,   1332.,   1476.,   1620.,   1764.,   1318.,   1422.,
      700.,    908.,    2792.,   3336.,   3880.,   4424.,   4968.,   5512.,
      6056.,   6600.,   7144.,   7688.,   8232.,   8776.,   5708.,   6044.,
      3802.,   4306.,   11420.,  12620.,  13820.,  15020.,  16220.,  17420.,
      18620.,  19820.,  21020.,  22220.,  23420.,  24620.,  14962.,  15658.,
      10858.,  11362.,  28220.,  29420.,  30620.,  31820.,  33020.,  34220.,
      35420.,  36620.,  37820.,  39020.,  40220.,  41420.,  24706.,  25402.,
      17914.,  18418.,  45020.,  46220.,  47420.,  48620.,  49820.,  51020.,
      52220.,  53420.,  54620.,  55820.,  57020.,  58220.,  34450.,  35146.,
      24970.,  25474.,  61820.,  63020.,  64220.,  65420.,  66620.,  67820.,
      69020.,  70220.,  71420.,  72620.,  73820.,  75020.,  44194.,  44890.,
      32026.,  32530.,  78620.,  79820.,  81020.,  82220.,  83420.,  84620.,
      85820.,  87020.,  88220.,  89420.,  90620.,  91820.,  53938.,  54634.,
      35132.,  35596.,  81128.,  82184.,  83240.,  84296.,  85352.,  86408.,
      87464.,  88520.,  89576.,  90632.,  91688.,  92744.,  52172.,  52764.,
      25054.,  25350.,  56116.,  56772.,  57428.,  58084.,  58740.,  59396.,
      60052.,  60708.,  61364.,  62020.,  62676.,  63332.,  34790.,  35150.,
      270.,    694.,    1428.,   2340.,   3252.,   4164.,   5076.,   5988.,
      6900.,   7812.,   8724.,   9636.,   10548.,  11460.,  6166.,   6654.,
      6556.,   7532.,   16040.,  18120.,  20200.,  22280.,  24360.,  26440.,
      28520.,  30600.,  32680.,  34760.,  36840.,  38920.,  20780.,  21884.,
      20650.,  22306.,  47420.,  50924.,  54428.,  57932.,  61436.,  64940.,
      68444.,  71948.,  75452.,  78956.,  82460.,  85964.,  45634.,  47482.,
      43834.,  45490.,  96476.,  99980.,  103484., 106988., 110492., 113996.,
      117500., 121004., 124508., 128012., 131516., 135020., 71506.,  73354.,
      67018.,  68674.,  145532., 149036., 152540., 156044., 159548., 163052.,
      166556., 170060., 173564., 177068., 180572., 184076., 97378.,  99226.,
      90202.,  91858.,  194588., 198092., 201596., 205100., 208604., 212108.,
      215612., 219116., 222620., 226124., 229628., 233132., 123250., 125098.,
      113386., 115042., 243644., 247148., 250652., 254156., 257660., 261164.,
      264668., 268172., 271676., 275180., 278684., 282188., 149122., 150970.,
      94748.,  95980.,  201896., 204488., 207080., 209672., 212264., 214856.,
      217448., 220040., 222632., 225224., 227816., 230408., 121004., 122364.,
      57550.,  58230.,  121876., 123300., 124724., 126148., 127572., 128996.,
      130420., 131844., 133268., 134692., 136116., 137540., 71894.,  72638.,
      510.,    1318.,   2676.,   4356.,   6036.,   7716.,   9396.,   11076.,
      12756.,  14436.,  16116.,  17796.,  19476.,  21156.,  11014.,  11886.,
      12412.,  14156.,  29288.,  32904.,  36520.,  40136.,  43752.,  47368.,
      50984.,  54600.,  58216.,  61832.,  65448.,  69064.,  35852.,  37724.,
      37498.,  40306.,  83420.,  89228.,  95036.,  100844., 106652., 112460.,
      118268., 124076., 129884., 135692., 141500., 147308., 76306.,  79306.,
      76810.,  79618.,  164732., 170540., 176348., 182156., 187964., 193772.,
      199580., 205388., 211196., 217004., 222812., 228620., 118306., 121306.,
      116122., 118930., 246044., 251852., 257660., 263468., 269276., 275084.,
      280892., 286700., 292508., 298316., 304124., 309932., 160306., 163306.,
      155434., 158242., 327356., 333164., 338972., 344780., 350588., 356396.,
      362204., 368012., 373820., 379628., 385436., 391244., 202306., 205306.,
      194746., 197554., 408668., 414476., 420284., 426092., 431900., 437708.,
      443516., 449324., 455132., 460940., 466748., 472556., 244306., 247306.,
      154364., 156364., 322664., 326792., 330920., 335048., 339176., 343304.,
      347432., 351560., 355688., 359816., 363944., 368072., 189836., 191964.,
      90046.,  91110.,  187636., 189828., 192020., 194212., 196404., 198596.,
      200788., 202980., 205172., 207364., 209556., 211748., 108998., 110126.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,   7504.,   9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,  13832.,  16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,  19320.,  16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,  16560.,  13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,  15360.,  19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,  27160.,  32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,  36680.,  32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,  30400.,  24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,  27400.,  34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,  47124.,  55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,  62188.,  54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,  50360.,  40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,  44520.,  56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,  75068.,  88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,  97412.,  84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,  77560.,  62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,  65576.,  82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505., 107996., 126420., 128184., 129948., 131712.,
      131173., 132986., 134799., 136612., 117803., 119378., 120953., 122528.,
      102690., 104020., 105350., 106680., 85806.,  86884.,  87962.,  89040.,
      83062.,  84252.,  85442.,  86632.,  108325., 109830., 111335., 112840.,
      135443., 137270., 139097., 140924., 164444., 166600., 168756., 170912.,
      169197., 171402., 173607., 175812., 151067., 152978., 154889., 156800.,
      130970., 132580., 134190., 135800., 108878., 110180., 111482., 112784.,
      101380., 102496., 103612., 104728., 131030., 132440., 133850., 135260.,
      162450., 164160., 165870., 167580., 195664., 197680., 199696., 201712.,
      200326., 202384., 204442., 206500., 177426., 179208., 180990., 182772.,
      152660., 154160., 155660., 157160., 126004., 127216., 128428., 129640.,
      111130., 112140., 113150., 114160., 142875., 144150., 145425., 146700.,
      176245., 177790., 179335., 180880., 211260., 213080., 214900., 216720.,
      215635., 217490., 219345., 221200., 190045., 191650., 193255., 194860.,
      162750., 164100., 165450., 166800., 133730., 134820., 135910., 137000.,
      111416., 112288., 113160., 114032., 142740., 143840., 144940., 146040.,
      175484., 176816., 178148., 179480., 209664., 211232., 212800., 214368.,
      213556., 215152., 216748., 218344., 187580., 188960., 190340., 191720.,
      160120., 161280., 162440., 163600., 131160., 132096., 133032., 133968.,
      63256.,  64640.,  66024.,  67408.,  82980.,  84720.,  86460.,  88200.,
      104300., 106400., 108500., 110600., 127232., 129696., 132160., 134624.,
      128772., 131264., 133756., 136248., 115436., 117584., 119732., 121880.,
      100440., 102240., 104040., 105840., 83768.,  85216.,  86664.,  88112.,
      104970., 106780., 108590., 110400., 136475., 138750., 141025., 143300.,
      170125., 172870., 175615., 178360., 205940., 209160., 212380., 215600.,
      208355., 211610., 214865., 218120., 185365., 188170., 190975., 193780.,
      160150., 162500., 164850., 167200., 132690., 134580., 136470., 138360.,
      158836., 161104., 163372., 165640., 205310., 208160., 211010., 213860.,
      254538., 257976., 261414., 264852., 306544., 310576., 314608., 318640.,
      310030., 314104., 318178., 322252., 274410., 277920., 281430., 284940.,
      235940., 238880., 241820., 244760., 194596., 196960., 199324., 201688.,
      225750., 228508., 231266., 234024., 290605., 294070., 297535., 301000.,
      358883., 363062., 367241., 371420., 430612., 435512., 440412., 445312.,
      435365., 440314., 445263., 450212., 383915., 388178., 392441., 396704.,
      328930., 332500., 336070., 339640., 270382., 273252., 276122., 278992.,
      246134., 249116., 252098., 255080., 316645., 320390., 324135., 327880.,
      390803., 395318., 399833., 404348., 468636., 473928., 479220., 484512.,
      473389., 478730., 484071., 489412., 417179., 421778., 426377., 430976.,
      357210., 361060., 364910., 368760., 293454., 296548., 299642., 302736.,
      266518., 269724., 272930., 276136., 342685., 346710., 350735., 354760.,
      422723., 427574., 432425., 437276., 506660., 512344., 518028., 523712.,
      511413., 517146., 522879., 528612., 450443., 455378., 460313., 465248.,
      385490., 389620., 393750., 397880., 316526., 319844., 323162., 326480.,
      282820., 285664., 288508., 291352., 362150., 365720., 369290., 372860.,
      444978., 449280., 453582., 457884., 531328., 536368., 541408., 546448.,
      535990., 541072., 546154., 551236., 470322., 474696., 479070., 483444.,
      401060., 404720., 408380., 412040., 328180., 331120., 334060., 337000.,
      282490., 284940., 287390., 289840., 360675., 363750., 366825., 369900.,
      441925., 445630., 449335., 453040., 526260., 530600., 534940., 539280.,
      530635., 535010., 539385., 543760., 464365., 468130., 471895., 475660.,
      394950., 398100., 401250., 404400., 322370., 324900., 327430., 329960.,
      264632., 266656., 268680., 270704., 337140., 339680., 342220., 344760.,
      412220., 415280., 418340., 421400., 489888., 493472., 497056., 500640.,
      493780., 497392., 501004., 504616., 431228., 434336., 437444., 440552.,
      366040., 368640., 371240., 373840., 298200., 300288., 302376., 304464.,
      119704., 122240., 124776., 127312., 156420., 159600., 162780., 165960.,
      195884., 199712., 203540., 207368., 238112., 242592., 247072., 251552.,
      239652., 244160., 248668., 253176., 213932., 217808., 221684., 225560.,
      185400., 188640., 191880., 195120., 154040., 156640., 159240., 161840.,
      195690., 198940., 202190., 205440., 253475., 257550., 261625., 265700.,
      314845., 319750., 324655., 329560., 379820., 385560., 391300., 397040.,
      382235., 388010., 393785., 399560., 338725., 343690., 348655., 353620.,
      291550., 295700., 299850., 304000., 240690., 244020., 247350., 250680.,
      291892., 295888., 299884., 303880., 375950., 380960., 385970., 390980.,
      464490., 470520., 476550., 482580., 557536., 564592., 571648., 578704.,
      561022., 568120., 575218., 582316., 494730., 500832., 506934., 513036.,
      423860., 428960., 434060., 439160., 348388., 352480., 356572., 360664.,
      409206., 413980., 418754., 423528., 524965., 530950., 536935., 542920.,
      646163., 653366., 660569., 667772., 772828., 781256., 789684., 798112.,
      777581., 786058., 794535., 803012., 683291., 690578., 697865., 705152.,
      583450., 589540., 595630., 601720., 478030., 482916., 487802., 492688.,
      429590., 434588., 439586., 444584., 551005., 557270., 563535., 569800.,
      678083., 685622., 693161., 700700., 810852., 819672., 828492., 837312.,
      815605., 824474., 833343., 842212., 716555., 724178., 731801., 739424.,
      611730., 618100., 624470., 630840., 501102., 506212., 511322., 516432.,
      449974., 455196., 460418., 465640., 577045., 583590., 590135., 596680.,
      710003., 717878., 725753., 733628., 848876., 858088., 867300., 876512.,
      853629., 862890., 872151., 881412., 749819., 757778., 765737., 773696.,
      640010., 646660., 653310., 659960., 524174., 529508., 534842., 540176.,
      464260., 468832., 473404., 477976., 593270., 599000., 604730., 610460.,
      727506., 734400., 741294., 748188., 866992., 875056., 883120., 891184.,
      871654., 879760., 887866., 895972., 763218., 770184., 777150., 784116.,
      649460., 655280., 661100., 666920., 530356., 535024., 539692., 544360.,
      453850., 457740., 461630., 465520., 578475., 583350., 588225., 593100.,
      707605., 713470., 719335., 725200., 841260., 848120., 854980., 861840.,
      845635., 852530., 859425., 866320., 738685., 744610., 750535., 756460.,
      627150., 632100., 637050., 642000., 511010., 514980., 518950., 522920.,
      417848., 421024., 424200., 427376., 531540., 535520., 539500., 543480.,
      648956., 653744., 658532., 663320., 770112., 775712., 781312., 786912.,
      774004., 779632., 785260., 790888., 674876., 679712., 684548., 689384.,
      571960., 576000., 580040., 584080., 465240., 468480., 471720., 474960.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    19.,
      22.,    25.,    28.,    31.,    34.,    37.,    40.,    43.,    46.,
      49.,    52.,    55.,    58.,    61.,    64.,    67.,    70.,    73.,
      76.,    50.,    52.,    54.,    56.,    32.,    36.,    40.,    44.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   210.,   220.,   230.,   240.,   250.,   260.,   270.,   280.,
      290.,   300.,   310.,   320.,   330.,   340.,   206.,   212.,   218.,
      224.,   149.,   158.,   167.,   176.,   421.,   442.,   463.,   484.,
      505.,   526.,   547.,   568.,   589.,   610.,   631.,   652.,   673.,
      694.,   715.,   736.,   757.,   778.,   799.,   820.,   841.,   862.,
      883.,   904.,   524.,   536.,   548.,   560.,   401.,   410.,   419.,
      428.,   1009.,  1030.,  1051.,  1072.,  1093.,  1114.,  1135.,  1156.,
      1177.,  1198.,  1219.,  1240.,  1261.,  1282.,  1303.,  1324.,  1345.,
      1366.,  1387.,  1408.,  1429.,  1450.,  1471.,  1492.,  860.,   872.,
      884.,   896.,   653.,   662.,   671.,   680.,   1597.,  1618.,  1639.,
      1660.,  1681.,  1702.,  1723.,  1744.,  1765.,  1786.,  1807.,  1828.,
      1849.,  1870.,  1891.,  1912.,  1933.,  1954.,  1975.,  1996.,  2017.,
      2038.,  2059.,  2080.,  1196.,  1208.,  1220.,  1232.,  905.,   914.,
      923.,   932.,   2185.,  2206.,  2227.,  2248.,  2269.,  2290.,  2311.,
      2332.,  2353.,  2374.,  2395.,  2416.,  2437.,  2458.,  2479.,  2500.,
      2521.,  2542.,  2563.,  2584.,  2605.,  2626.,  2647.,  2668.,  1532.,
      1544.,  1556.,  1568.,  1157.,  1166.,  1175.,  1184.,  2773.,  2794.,
      2815.,  2836.,  2857.,  2878.,  2899.,  2920.,  2941.,  2962.,  2983.,
      3004.,  3025.,  3046.,  3067.,  3088.,  3109.,  3130.,  3151.,  3172.,
      3193.,  3214.,  3235.,  3256.,  1868.,  1880.,  1892.,  1904.,  1212.,
      1220.,  1228.,  1236.,  2766.,  2784.,  2802.,  2820.,  2838.,  2856.,
      2874.,  2892.,  2910.,  2928.,  2946.,  2964.,  2982.,  3000.,  3018.,
      3036.,  3054.,  3072.,  3090.,  3108.,  3126.,  3144.,  3162.,  3180.,
      1762.,  1772.,  1782.,  1792.,  845.,   850.,   855.,   860.,   1879.,
      1890.,  1901.,  1912.,  1923.,  1934.,  1945.,  1956.,  1967.,  1978.,
      1989.,  2000.,  2011.,  2022.,  2033.,  2044.,  2055.,  2066.,  2077.,
      2088.,  2099.,  2110.,  2121.,  2132.,  1158.,  1164.,  1170.,  1176.,
      7.,     14.,    21.,    28.,    43.,    58.,    73.,    88.,    103.,
      118.,   133.,   148.,   163.,   178.,   193.,   208.,   223.,   238.,
      253.,   268.,   283.,   298.,   313.,   328.,   343.,   358.,   373.,
      388.,   200.,   208.,   216.,   224.,   212.,   228.,   244.,   260.,
      518.,   552.,   586.,   620.,   654.,   688.,   722.,   756.,   790.,
      824.,   858.,   892.,   926.,   960.,   994.,   1028.,  1062.,  1096.,
      1130.,  1164.,  1198.,  1232.,  1266.,  1300.,  674.,   692.,   710.,
      728.,   671.,   698.,   725.,   752.,   1537.,  1594.,  1651.,  1708.,
      1765.,  1822.,  1879.,  1936.,  1993.,  2050.,  2107.,  2164.,  2221.,
      2278.,  2335.,  2392.,  2449.,  2506.,  2563.,  2620.,  2677.,  2734.,
      2791.,  2848.,  1478.,  1508.,  1538.,  1568.,  1427.,  1454.,  1481.,
      1508.,  3133.,  3190.,  3247.,  3304.,  3361.,  3418.,  3475.,  3532.,
      3589.,  3646.,  3703.,  3760.,  3817.,  3874.,  3931.,  3988.,  4045.,
      4102.,  4159.,  4216.,  4273.,  4330.,  4387.,  4444.,  2318.,  2348.,
      2378.,  2408.,  2183.,  2210.,  2237.,  2264.,  4729.,  4786.,  4843.,
      4900.,  4957.,  5014.,  5071.,  5128.,  5185.,  5242.,  5299.,  5356.,
      5413.,  5470.,  5527.,  5584.,  5641.,  5698.,  5755.,  5812.,  5869.,
      5926.,  5983.,  6040.,  3158.,  3188.,  3218.,  3248.,  2939.,  2966.,
      2993.,  3020.,  6325.,  6382.,  6439.,  6496.,  6553.,  6610.,  6667.,
      6724.,  6781.,  6838.,  6895.,  6952.,  7009.,  7066.,  7123.,  7180.,
      7237.,  7294.,  7351.,  7408.,  7465.,  7522.,  7579.,  7636.,  3998.,
      4028.,  4058.,  4088.,  3695.,  3722.,  3749.,  3776.,  7921.,  7978.,
      8035.,  8092.,  8149.,  8206.,  8263.,  8320.,  8377.,  8434.,  8491.,
      8548.,  8605.,  8662.,  8719.,  8776.,  8833.,  8890.,  8947.,  9004.,
      9061.,  9118.,  9175.,  9232.,  4838.,  4868.,  4898.,  4928.,  3072.,
      3092.,  3112.,  3132.,  6534.,  6576.,  6618.,  6660.,  6702.,  6744.,
      6786.,  6828.,  6870.,  6912.,  6954.,  6996.,  7038.,  7080.,  7122.,
      7164.,  7206.,  7248.,  7290.,  7332.,  7374.,  7416.,  7458.,  7500.,
      3910.,  3932.,  3954.,  3976.,  1859.,  1870.,  1881.,  1892.,  3931.,
      3954.,  3977.,  4000.,  4023.,  4046.,  4069.,  4092.,  4115.,  4138.,
      4161.,  4184.,  4207.,  4230.,  4253.,  4276.,  4299.,  4322.,  4345.,
      4368.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,
      13.,    26.,    39.,    52.,    79.,    106.,   133.,   160.,   187.,
      214.,   241.,   268.,   295.,   322.,   349.,   376.,   403.,   430.,
      457.,   484.,   511.,   538.,   565.,   592.,   619.,   646.,   673.,
      700.,   350.,   364.,   378.,   392.,   392.,   420.,   448.,   476.,
      926.,   984.,   1042.,  1100.,  1158.,  1216.,  1274.,  1332.,  1390.,
      1448.,  1506.,  1564.,  1622.,  1680.,  1738.,  1796.,  1854.,  1912.,
      1970.,  2028.,  2086.,  2144.,  2202.,  2260.,  1142.,  1172.,  1202.,
      1232.,  1193.,  1238.,  1283.,  1328.,  2653.,  2746.,  2839.,  2932.,
      3025.,  3118.,  3211.,  3304.,  3397.,  3490.,  3583.,  3676.,  3769.,
      3862.,  3955.,  4048.,  4141.,  4234.,  4327.,  4420.,  4513.,  4606.,
      4699.,  4792.,  2432.,  2480.,  2528.,  2576.,  2453.,  2498.,  2543.,
      2588.,  5257.,  5350.,  5443.,  5536.,  5629.,  5722.,  5815.,  5908.,
      6001.,  6094.,  6187.,  6280.,  6373.,  6466.,  6559.,  6652.,  6745.,
      6838.,  6931.,  7024.,  7117.,  7210.,  7303.,  7396.,  3776.,  3824.,
      3872.,  3920.,  3713.,  3758.,  3803.,  3848.,  7861.,  7954.,  8047.,
      8140.,  8233.,  8326.,  8419.,  8512.,  8605.,  8698.,  8791.,  8884.,
      8977.,  9070.,  9163.,  9256.,  9349.,  9442.,  9535.,  9628.,  9721.,
      9814.,  9907.,  10000., 5120.,  5168.,  5216.,  5264.,  4973.,  5018.,
      5063.,  5108.,  10465., 10558., 10651., 10744., 10837., 10930., 11023.,
      11116., 11209., 11302., 11395., 11488., 11581., 11674., 11767., 11860.,
      11953., 12046., 12139., 12232., 12325., 12418., 12511., 12604., 6464.,
      6512.,  6560.,  6608.,  6233.,  6278.,  6323.,  6368.,  13069., 13162.,
      13255., 13348., 13441., 13534., 13627., 13720., 13813., 13906., 13999.,
      14092., 14185., 14278., 14371., 14464., 14557., 14650., 14743., 14836.,
      14929., 15022., 15115., 15208., 7808.,  7856.,  7904.,  7952.,  4932.,
      4964.,  4996.,  5028.,  10302., 10368., 10434., 10500., 10566., 10632.,
      10698., 10764., 10830., 10896., 10962., 11028., 11094., 11160., 11226.,
      11292., 11358., 11424., 11490., 11556., 11622., 11688., 11754., 11820.,
      6058.,  6092.,  6126.,  6160.,  2873.,  2890.,  2907.,  2924.,  5983.,
      6018.,  6053.,  6088.,  6123.,  6158.,  6193.,  6228.,  6263.,  6298.,
      6333.,  6368.,  6403.,  6438.,  6473.,  6508.,  6543.,  6578.,  6613.,
      6648.,  6683.,  6718.,  6753.,  6788.,  3474.,  3492.,  3510.,  3528.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  657048.,
      666512.,  675976.,  685440.,  857115.,  869085.,  881055.,  893025.,
      1071952., 1086484., 1101016., 1115548., 1301783., 1318933., 1336083.,
      1353233., 1339709., 1357251., 1374793., 1392335., 1196440., 1211644.,
      1226848., 1242052., 1037505., 1050315., 1063125., 1075935., 862680.,
      873040.,  883400.,  893760.,  803792.,  812672.,  821552.,  830432.,
      1039030., 1050250., 1061470., 1072690., 1288368., 1301976., 1315584.,
      1329192., 1551998., 1568042., 1584086., 1600130., 1589210., 1605590.,
      1621970., 1638350., 1407744., 1421928., 1436112., 1450296., 1211410.,
      1223350., 1235290., 1247230., 1000016., 1009664., 1019312., 1028960.,
      882280.,  890320.,  898360.,  906400.,  1134425., 1144575., 1154725.,
      1164875., 1399520., 1411820., 1424120., 1436420., 1677725., 1692215.,
      1706705., 1721195., 1712655., 1727425., 1742195., 1756965., 1509560.,
      1522340., 1535120., 1547900., 1292875., 1303625., 1314375., 1325125.,
      1062440., 1071120., 1079800., 1088480., 885344.,  892288.,  899232.,
      906176.,  1134340., 1143100., 1151860., 1160620., 1394656., 1405264.,
      1415872., 1426480., 1666420., 1678908., 1691396., 1703884., 1697500.,
      1710212., 1722924., 1735636., 1491136., 1502128., 1513120., 1524112.,
      1272940., 1282180., 1291420., 1300660., 1042784., 1050240., 1057696.,
      1065152., 501728.,  512768.,  523808.,  534848.,  658340.,  672220.,
      686100.,  699980.,  827680.,  844432.,  861184.,  877936.,  1009876.,
      1029532., 1049188., 1068844., 1022140., 1042020., 1061900., 1081780.,
      916480.,  933616.,  950752.,  967888.,  797580.,  811940.,  826300.,
      840660.,  665312.,  676864.,  688416.,  699968.,  833640.,  848080.,
      862520.,  876960.,  1084025., 1102175., 1120325., 1138475., 1351520.,
      1373420., 1395320., 1417220., 1636285., 1661975., 1687665., 1713355.,
      1655535., 1681505., 1707475., 1733445., 1473080., 1495460., 1517840.,
      1540220., 1272875., 1291625., 1310375., 1329125., 1054760., 1069840.,
      1084920., 1100000., 1262480., 1280576., 1298672., 1316768., 1632070.,
      1654810., 1677550., 1700290., 2023632., 2051064., 2078496., 2105928.,
      2437358., 2469530., 2501702., 2533874., 2465162., 2497670., 2530178.,
      2562686., 2182176., 2210184., 2238192., 2266200., 1876450., 1899910.,
      1923370., 1946830., 1547792., 1566656., 1585520., 1604384., 1795416.,
      1817424., 1839432., 1861440., 2311435., 2339085., 2366735., 2394385.,
      2854768., 2888116., 2921464., 2954812., 3425639., 3464741., 3503843.,
      3542945., 3463565., 3503059., 3542553., 3582047., 3054520., 3088540.,
      3122560., 3156580., 2617265., 2645755., 2674245., 2702735., 2151576.,
      2174480., 2197384., 2220288., 1958040., 1981840., 2005640., 2029440.,
      2519195., 2549085., 2578975., 2608865., 3109456., 3145492., 3181528.,
      3217564., 3729047., 3771285., 3813523., 3855761., 3766973., 3809603.,
      3852233., 3894863., 3319960., 3356668., 3393376., 3430084., 2842945.,
      2873675., 2904405., 2935135., 2335704., 2360400., 2385096., 2409792.,
      2120664., 2146256., 2171848., 2197440., 2726955., 2759085., 2791215.,
      2823345., 3364144., 3402868., 3441592., 3480316., 4032455., 4077829.,
      4123203., 4168577., 4070381., 4116147., 4161913., 4207679., 3585400.,
      3624796., 3664192., 3703588., 3068625., 3101595., 3134565., 3167535.,
      2519832., 2546320., 2572808., 2599296., 2251856., 2274560., 2297264.,
      2319968., 2883670., 2912170., 2940670., 2969170., 3543408., 3577752.,
      3612096., 3646440., 4231262., 4271498., 4311734., 4351970., 4268474.,
      4309046., 4349618., 4390190., 3745728., 3780648., 3815568., 3850488.,
      3194290., 3223510., 3252730., 3281950., 2613968., 2637440., 2660912.,
      2684384., 2250280., 2269840., 2289400., 2308960., 2873225., 2897775.,
      2922325., 2946875., 3520640., 3550220., 3579800., 3609380., 4192685.,
      4227335., 4261985., 4296635., 4227615., 4262545., 4297475., 4332405.,
      3699800., 3729860., 3759920., 3789980., 3146875., 3172025., 3197175.,
      3222325., 2568680., 2588880., 2609080., 2629280., 2108768., 2124928.,
      2141088., 2157248., 2686660., 2706940., 2727220., 2747500., 3285088.,
      3309520., 3333952., 3358384., 3904180., 3932796., 3961412., 3990028.,
      3935260., 3964100., 3992940., 4021780., 3436864., 3461680., 3486496.,
      3511312., 2917420., 2938180., 2958940., 2979700., 2376800., 2393472.,
      2410144., 2426816., 951008.,  971264.,  991520.,  1011776., 1242980.,
      1268380., 1293780., 1319180., 1556896., 1587472., 1618048., 1648624.,
      1892884., 1928668., 1964452., 2000236., 1905148., 1941156., 1977164.,
      2013172., 1700992., 1731952., 1762912., 1793872., 1474380., 1500260.,
      1526140., 1552020., 1225184., 1245952., 1266720., 1287488., 1556520.,
      1582480., 1608440., 1634400., 2016425., 2048975., 2081525., 2114075.,
      2504960., 2544140., 2583320., 2622500., 3022285., 3068135., 3113985.,
      3159835., 3041535., 3087665., 3133795., 3179925., 2695640., 2735300.,
      2774960., 2814620., 2320475., 2353625., 2386775., 2419925., 1915880.,
      1942480., 1969080., 1995680., 2323472., 2355392., 2387312., 2419232.,
      2992870., 3032890., 3072910., 3112930., 3698064., 3746232., 3794400.,
      3842568., 4439246., 4495610., 4551974., 4608338., 4467050., 4523750.,
      4580450., 4637150., 3939552., 3988296., 4037040., 4085784., 3375490.,
      3416230., 3456970., 3497710., 2774672., 2807360., 2840048., 2872736.,
      3259032., 3297168., 3335304., 3373440., 4181275., 4229085., 4276895.,
      4324705., 5146960., 5204500., 5262040., 5319580., 6156311., 6223637.,
      6290963., 6358289., 6194237., 6261955., 6329673., 6397391., 5443480.,
      5501692., 5559904., 5618116., 4648385., 4697035., 4745685., 4794335.,
      3808728., 3847760., 3886792., 3925824., 3421656., 3461584., 3501512.,
      3541440., 4389035., 4439085., 4489135., 4539185., 5401648., 5461876.,
      5522104., 5582332., 6459719., 6530181., 6600643., 6671105., 6497645.,
      6568499., 6639353., 6710207., 5708920., 5769820., 5830720., 5891620.,
      4874065., 4924955., 4975845., 5026735., 3992856., 4033680., 4074504.,
      4115328., 3584280., 3626000., 3667720., 3709440., 4596795., 4649085.,
      4701375., 4753665., 5656336., 5719252., 5782168., 5845084., 6763127.,
      6836725., 6910323., 6983921., 6801053., 6875043., 6949033., 7023023.,
      5974360., 6037948., 6101536., 6165124., 5099745., 5152875., 5206005.,
      5259135., 4176984., 4219600., 4262216., 4304832., 3699920., 3736448.,
      3772976., 3809504., 4728310., 4774090., 4819870., 4865650., 5798448.,
      5853528., 5908608., 5963688., 6910526., 6974954., 7039382., 7103810.,
      6947738., 7012502., 7077266., 7142030., 6083712., 6139368., 6195024.,
      6250680., 5177170., 5223670., 5270170., 5316670., 4227920., 4265216.,
      4302512., 4339808., 3618280., 3649360., 3680440., 3711520., 4612025.,
      4650975., 4689925., 4728875., 5641760., 5688620., 5735480., 5782340.,
      6707645., 6762455., 6817265., 6872075., 6742575., 6797665., 6852755.,
      6907845., 5890040., 5937380., 5984720., 6032060., 5000875., 5040425.,
      5079975., 5119525., 4074920., 4106640., 4138360., 4170080., 3332192.,
      3357568., 3382944., 3408320., 4238980., 4270780., 4302580., 4334380.,
      5175520., 5213776., 5252032., 5290288., 6141940., 6186684., 6231428.,
      6276172., 6173020., 6217988., 6262956., 6307924., 5382592., 5421232.,
      5459872., 5498512., 4561900., 4594180., 4626460., 4658740., 3710816.,
      3736704., 3762592., 3788480.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      120.,    140.,    160.,    180.,    200.,    220.,    240.,    260.,
      280.,    300.,    320.,    340.,    360.,    380.,    400.,    420.,
      440.,    460.,    480.,    500.,    347.,    361.,    375.,    389.,
      190.,    218.,    246.,    274.,    728.,    800.,    872.,    944.,
      1016.,   1088.,   1160.,   1232.,   1304.,   1376.,   1448.,   1520.,
      1592.,   1664.,   1736.,   1808.,   1880.,   1952.,   2024.,   2096.,
      2168.,   2240.,   2312.,   2384.,   1482.,   1526.,   1570.,   1614.,
      1003.,   1069.,   1135.,   1201.,   2960.,   3116.,   3272.,   3428.,
      3584.,   3740.,   3896.,   4052.,   4208.,   4364.,   4520.,   4676.,
      4832.,   4988.,   5144.,   5300.,   5456.,   5612.,   5768.,   5924.,
      6080.,   6236.,   6392.,   6548.,   3853.,   3943.,   4033.,   4123.,
      2851.,   2917.,   2983.,   3049.,   7328.,   7484.,   7640.,   7796.,
      7952.,   8108.,   8264.,   8420.,   8576.,   8732.,   8888.,   9044.,
      9200.,   9356.,   9512.,   9668.,   9824.,   9980.,   10136.,  10292.,
      10448.,  10604.,  10760.,  10916.,  6373.,   6463.,   6553.,   6643.,
      4699.,   4765.,   4831.,   4897.,   11696.,  11852.,  12008.,  12164.,
      12320.,  12476.,  12632.,  12788.,  12944.,  13100.,  13256.,  13412.,
      13568.,  13724.,  13880.,  14036.,  14192.,  14348.,  14504.,  14660.,
      14816.,  14972.,  15128.,  15284.,  8893.,   8983.,   9073.,   9163.,
      6547.,   6613.,   6679.,   6745.,   16064.,  16220.,  16376.,  16532.,
      16688.,  16844.,  17000.,  17156.,  17312.,  17468.,  17624.,  17780.,
      17936.,  18092.,  18248.,  18404.,  18560.,  18716.,  18872.,  19028.,
      19184.,  19340.,  19496.,  19652.,  11413.,  11503.,  11593.,  11683.,
      8395.,   8461.,   8527.,   8593.,   20432.,  20588.,  20744.,  20900.,
      21056.,  21212.,  21368.,  21524.,  21680.,  21836.,  21992.,  22148.,
      22304.,  22460.,  22616.,  22772.,  22928.,  23084.,  23240.,  23396.,
      23552.,  23708.,  23864.,  24020.,  13933.,  14023.,  14113.,  14203.,
      9062.,   9122.,   9182.,   9242.,   20840.,  20976.,  21112.,  21248.,
      21384.,  21520.,  21656.,  21792.,  21928.,  22064.,  22200.,  22336.,
      22472.,  22608.,  22744.,  22880.,  23016.,  23152.,  23288.,  23424.,
      23560.,  23696.,  23832.,  23968.,  13362.,  13438.,  13514.,  13590.,
      6413.,   6451.,   6489.,   6527.,   14328.,  14412.,  14496.,  14580.,
      14664.,  14748.,  14832.,  14916.,  15000.,  15084.,  15168.,  15252.,
      15336.,  15420.,  15504.,  15588.,  15672.,  15756.,  15840.,  15924.,
      16008.,  16092.,  16176.,  16260.,  8867.,   8913.,   8959.,   9005.,
      41.,     95.,     149.,    203.,    304.,    420.,    536.,    652.,
      768.,    884.,    1000.,   1116.,   1232.,   1348.,   1464.,   1580.,
      1696.,   1812.,   1928.,   2044.,   2160.,   2276.,   2392.,   2508.,
      2624.,   2740.,   2856.,   2972.,   1535.,   1597.,   1659.,   1721.,
      1606.,   1730.,   1854.,   1978.,   3944.,   4208.,   4472.,   4736.,
      5000.,   5264.,   5528.,   5792.,   6056.,   6320.,   6584.,   6848.,
      7112.,   7376.,   7640.,   7904.,   8168.,   8432.,   8696.,   8960.,
      9224.,   9488.,   9752.,   10016.,  5202.,   5342.,   5482.,   5622.,
      5143.,   5353.,   5563.,   5773.,   11816.,  12260.,  12704.,  13148.,
      13592.,  14036.,  14480.,  14924.,  15368.,  15812.,  16256.,  16700.,
      17144.,  17588.,  18032.,  18476.,  18920.,  19364.,  19808.,  20252.,
      20696.,  21140.,  21584.,  22028.,  11449.,  11683.,  11917.,  12151.,
      11023.,  11233.,  11443.,  11653.,  24248.,  24692.,  25136.,  25580.,
      26024.,  26468.,  26912.,  27356.,  27800.,  28244.,  28688.,  29132.,
      29576.,  30020.,  30464.,  30908.,  31352.,  31796.,  32240.,  32684.,
      33128.,  33572.,  34016.,  34460.,  18001.,  18235.,  18469.,  18703.,
      16903.,  17113.,  17323.,  17533.,  36680.,  37124.,  37568.,  38012.,
      38456.,  38900.,  39344.,  39788.,  40232.,  40676.,  41120.,  41564.,
      42008.,  42452.,  42896.,  43340.,  43784.,  44228.,  44672.,  45116.,
      45560.,  46004.,  46448.,  46892.,  24553.,  24787.,  25021.,  25255.,
      22783.,  22993.,  23203.,  23413.,  49112.,  49556.,  50000.,  50444.,
      50888.,  51332.,  51776.,  52220.,  52664.,  53108.,  53552.,  53996.,
      54440.,  54884.,  55328.,  55772.,  56216.,  56660.,  57104.,  57548.,
      57992.,  58436.,  58880.,  59324.,  31105.,  31339.,  31573.,  31807.,
      28663.,  28873.,  29083.,  29293.,  61544.,  61988.,  62432.,  62876.,
      63320.,  63764.,  64208.,  64652.,  65096.,  65540.,  65984.,  66428.,
      66872.,  67316.,  67760.,  68204.,  68648.,  69092.,  69536.,  69980.,
      70424.,  70868.,  71312.,  71756.,  37657.,  37891.,  38125.,  38359.,
      23918.,  24074.,  24230.,  24386.,  50936.,  51264.,  51592.,  51920.,
      52248.,  52576.,  52904.,  53232.,  53560.,  53888.,  54216.,  54544.,
      54872.,  55200.,  55528.,  55856.,  56184.,  56512.,  56840.,  57168.,
      57496.,  57824.,  58152.,  58480.,  30522.,  30694.,  30866.,  31038.,
      14513.,  14599.,  14685.,  14771.,  30720.,  30900.,  31080.,  31260.,
      31440.,  31620.,  31800.,  31980.,  32160.,  32340.,  32520.,  32700.,
      32880.,  33060.,  33240.,  33420.,  33600.,  33780.,  33960.,  34140.,
      34320.,  34500.,  34680.,  34860.,  18119.,  18213.,  18307.,  18401.,
      77.,     179.,    281.,    383.,    568.,    780.,    992.,    1204.,
      1416.,   1628.,   1840.,   2052.,   2264.,   2476.,   2688.,   2900.,
      3112.,   3324.,   3536.,   3748.,   3960.,   4172.,   4384.,   4596.,
      4808.,   5020.,   5232.,   5444.,   2723.,   2833.,   2943.,   3053.,
      3022.,   3242.,   3462.,   3682.,   7160.,   7616.,   8072.,   8528.,
      8984.,   9440.,   9896.,   10352.,  10808.,  11264.,  11720.,  12176.,
      12632.,  13088.,  13544.,  14000.,  14456.,  14912.,  15368.,  15824.,
      16280.,  16736.,  17192.,  17648.,  8922.,   9158.,   9394.,   9630.,
      9283.,   9637.,   9991.,   10345.,  20672.,  21404.,  22136.,  22868.,
      23600.,  24332.,  25064.,  25796.,  26528.,  27260.,  27992.,  28724.,
      29456.,  30188.,  30920.,  31652.,  32384.,  33116.,  33848.,  34580.,
      35312.,  36044.,  36776.,  37508.,  19045.,  19423.,  19801.,  20179.,
      19195.,  19549.,  19903.,  20257.,  41168.,  41900.,  42632.,  43364.,
      44096.,  44828.,  45560.,  46292.,  47024.,  47756.,  48488.,  49220.,
      49952.,  50684.,  51416.,  52148.,  52880.,  53612.,  54344.,  55076.,
      55808.,  56540.,  57272.,  58004.,  29629.,  30007.,  30385.,  30763.,
      29107.,  29461.,  29815.,  30169.,  61664.,  62396.,  63128.,  63860.,
      64592.,  65324.,  66056.,  66788.,  67520.,  68252.,  68984.,  69716.,
      70448.,  71180.,  71912.,  72644.,  73376.,  74108.,  74840.,  75572.,
      76304.,  77036.,  77768.,  78500.,  40213.,  40591.,  40969.,  41347.,
      39019.,  39373.,  39727.,  40081.,  82160.,  82892.,  83624.,  84356.,
      85088.,  85820.,  86552.,  87284.,  88016.,  88748.,  89480.,  90212.,
      90944.,  91676.,  92408.,  93140.,  93872.,  94604.,  95336.,  96068.,
      96800.,  97532.,  98264.,  98996.,  50797.,  51175.,  51553.,  51931.,
      48931.,  49285.,  49639.,  49993.,  102656., 103388., 104120., 104852.,
      105584., 106316., 107048., 107780., 108512., 109244., 109976., 110708.,
      111440., 112172., 112904., 113636., 114368., 115100., 115832., 116564.,
      117296., 118028., 118760., 119492., 61381.,  61759.,  62137.,  62515.,
      38774.,  39026.,  39278.,  39530.,  81032.,  81552.,  82072.,  82592.,
      83112.,  83632.,  84152.,  84672.,  85192.,  85712.,  86232.,  86752.,
      87272.,  87792.,  88312.,  88832.,  89352.,  89872.,  90392.,  90912.,
      91432.,  91952.,  92472.,  92992.,  47682.,  47950.,  48218.,  48486.,
      22613.,  22747.,  22881.,  23015.,  47112.,  47388.,  47664.,  47940.,
      48216.,  48492.,  48768.,  49044.,  49320.,  49596.,  49872.,  50148.,
      50424.,  50700.,  50976.,  51252.,  51528.,  51804.,  52080.,  52356.,
      52632.,  52908.,  53184.,  53460.,  27371.,  27513.,  27655.,  27797.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      301984.,  316448.,  330912.,  345376.,  407128.,  425848.,  444568.,
      463288.,  532016.,  555248.,  578480.,  601712.,  677672.,  705672.,
      733672.,  761672.,  726408.,  756200.,  785992.,  815784.,  657072.,
      683376.,  709680.,  735984.,  559800.,  582360.,  604920.,  627480.,
      501664.,  520224.,  538784.,  557344.,  532168.,  555368.,  578568.,
      601768.,  705854.,  735654.,  765454.,  795254.,  907676.,  944396.,
      981116.,  1017836., 1138914., 1182874., 1226834., 1270794., 1202522.,
      1248722., 1294922., 1341122., 1066684., 1107244., 1147804., 1188364.,
      889398.,  923998.,  958598.,  993198.,  770248.,  798568.,  826888.,
      855208.,  854640.,  888624.,  922608.,  956592.,  1089092., 1132532.,
      1175972., 1219412., 1363912., 1417192., 1470472., 1523752., 1680636.,
      1744140., 1807644., 1871148., 1755276., 1821468., 1887660., 1953852.,
      1544072., 1601960., 1659848., 1717736., 1278164., 1327364., 1376564.,
      1425764., 1089648., 1129776., 1169904., 1210032., 1230488., 1277304.,
      1324120., 1370936., 1548650., 1608290., 1667930., 1727570., 1923252.,
      1996164., 2069076., 2141988., 2353526., 2440158., 2526790., 2613422.,
      2447646., 2537414., 2627182., 2716950., 2147604., 2225892., 2304180.,
      2382468., 1775762., 1842122., 1908482., 1974842., 1496728., 1550712.,
      1604696., 1658680., 1677720., 1738872., 1800024., 1861176., 2094378.,
      2171938., 2249498., 2327058., 2581812., 2676228., 2770644., 2865060.,
      3106486., 3218206., 3329926., 3441646., 3200606., 3315462., 3430318.,
      3545174., 2793876., 2893668., 2993460., 3093252., 2301010., 2385290.,
      2469570., 2553850., 1919384., 1987704., 2056024., 2124344., 2016408.,
      2075512., 2134616., 2193720., 2463466., 2538466., 2613466., 2688466.,
      2979252., 3070596., 3161940., 3253284., 3497462., 3605598., 3713734.,
      3821870., 3591582., 3702854., 3814126., 3925398., 3080724., 3177444.,
      3274164., 3370884., 2485778., 2567498., 2649218., 2730938., 2036888.,
      2103160., 2169432., 2235704., 1880432., 1934896., 1989360., 2043824.,
      2232324., 2301364., 2370404., 2439444., 2647624., 2731624., 2815624.,
      2899624., 3027004., 3126348., 3225692., 3325036., 3115468., 3217500.,
      3319532., 3421564., 2610184., 2698792., 2787400., 2876008., 2027156.,
      2101956., 2176756., 2251556., 1629552., 1690160., 1750768., 1811376.,
      1723848., 1771624., 1819400., 1867176., 2096894., 2157414., 2217934.,
      2278454., 2524188., 2597772., 2671356., 2744940., 2873378., 2960346.,
      3047314., 3134282., 2943642., 3032850., 3122058., 3211266., 2576188.,
      2653612., 2731036., 2808460., 2141174., 2206494., 2271814., 2337134.,
      1672648., 1725544., 1778440., 1831336., 1564064., 1603104., 1642144.,
      1681184., 1841624., 1891064., 1940504., 1989944., 2164528., 2224624.,
      2284720., 2344816., 2367400., 2438408., 2509416., 2580424., 2427400.,
      2500200., 2573000., 2645800., 2102704., 2165872., 2229040., 2292208.,
      1724472., 1777752., 1831032., 1884312., 1291680., 1334816., 1377952.,
      1421088., 503712.,  526368.,  549024.,  571680.,  663384.,  692344.,
      721304.,  750264.,  850992.,  886512.,  922032.,  957552.,  1067560.,
      1109896., 1152232., 1194568., 1116296., 1160424., 1204552., 1248680.,
      992432.,  1031024., 1069616., 1108208., 832440.,  865240.,  898040.,
      930840.,  736160.,  762912.,  789664.,  816416.,  845768.,  879208.,
      912648.,  946088.,  1074302., 1116902., 1159502., 1202102., 1341212.,
      1393292., 1445372., 1497452., 1647778., 1709658., 1771538., 1833418.,
      1711386., 1775506., 1839626., 1903746., 1496124., 1552044., 1607964.,
      1663884., 1229174., 1276574., 1323974., 1371374., 1042888., 1081448.,
      1120008., 1158568., 1206384., 1252656., 1298928., 1345200., 1510340.,
      1569140., 1627940., 1686740., 1866952., 1938664., 2010376., 2082088.,
      2277756., 2362764., 2447772., 2532780., 2352396., 2440092., 2527788.,
      2615484., 2055304., 2131624., 2207944., 2284264., 1691220., 1755780.,
      1820340., 1884900., 1425008., 1477424., 1529840., 1582256., 1677720.,
      1738872., 1800024., 1861176., 2094378., 2171938., 2249498., 2327058.,
      2581812., 2676228., 2770644., 2865060., 3106486., 3218206., 3329926.,
      3441646., 3200606., 3315462., 3430318., 3545174., 2793876., 2893668.,
      2993460., 3093252., 2301010., 2385290., 2469570., 2553850., 1919384.,
      1987704., 2056024., 2124344., 2016408., 2075512., 2134616., 2193720.,
      2463466., 2538466., 2613466., 2688466., 2979252., 3070596., 3161940.,
      3253284., 3497462., 3605598., 3713734., 3821870., 3591582., 3702854.,
      3814126., 3925398., 3080724., 3177444., 3274164., 3370884., 2485778.,
      2567498., 2649218., 2730938., 2036888., 2103160., 2169432., 2235704.,
      1896344., 1953400., 2010456., 2067512., 2259114., 2331554., 2403994.,
      2476434., 2688564., 2776836., 2865108., 2953380., 3085622., 3190174.,
      3294726., 3399278., 3179742., 3287430., 3395118., 3502806., 2679444.,
      2773092., 2866740., 2960388., 2097106., 2176266., 2255426., 2334586.,
      1695640., 1759864., 1824088., 1888312., 1812336., 1862704., 1913072.,
      1963440., 2218884., 2282804., 2346724., 2410644., 2684744., 2762600.,
      2840456., 2918312., 3077820., 3169996., 3262172., 3354348., 3166284.,
      3261148., 3356012., 3450876., 2786568., 2869032., 2951496., 3033960.,
      2333204., 2402884., 2472564., 2542244., 1839984., 1896496., 1953008.,
      2009520., 1650376., 1692008., 1733640., 1775272., 1940542., 1993382.,
      2046222., 2099062., 2278812., 2343180., 2407548., 2471916., 2500066.,
      2576282., 2652498., 2728714., 2570330., 2648786., 2727242., 2805698.,
      2195644., 2263852., 2332060., 2400268., 1759542., 1817182., 1874822.,
      1932462., 1328840., 1375592., 1422344., 1469096., 969120.,  999968.,
      1030816., 1061664., 1306840., 1346040., 1385240., 1424440., 1681712.,
      1729520., 1777328., 1825136., 1895592., 1952264., 2008936., 2065608.,
      1955592., 2014056., 2072520., 2130984., 1767344., 1818224., 1869104.,
      1919984., 1533752., 1576792., 1619832., 1662872., 1253792., 1288736.,
      1323680., 1358624., 705440.,  736288.,  767136.,  797984.,  919640.,
      958840.,  998040.,  1037240., 1169968., 1217776., 1265584., 1313392.,
      1457448., 1514120., 1570792., 1627464., 1506184., 1564648., 1623112.,
      1681576., 1327792., 1378672., 1429552., 1480432., 1105080., 1148120.,
      1191160., 1234200., 970656.,  1005600., 1040544., 1075488., 1159368.,
      1203048., 1246728., 1290408., 1442750., 1498150., 1553550., 1608950.,
      1774748., 1842188., 1909628., 1977068., 2156642., 2236442., 2316242.,
      2396042., 2220250., 2302290., 2384330., 2466370., 1925564., 1996844.,
      2068124., 2139404., 1568950., 1629150., 1689350., 1749550., 1315528.,
      1364328., 1413128., 1461928., 1558128., 1616688., 1675248., 1733808.,
      1931588., 2005748., 2079908., 2154068., 2369992., 2460136., 2550280.,
      2640424., 2874876., 2981388., 3087900., 3194412., 2949516., 3058716.,
      3167916., 3277116., 2566536., 2661288., 2756040., 2850792., 2104276.,
      2184196., 2264116., 2344036., 1760368., 1825072., 1889776., 1954480.,
      2016408., 2075512., 2134616., 2193720., 2463466., 2538466., 2613466.,
      2688466., 2979252., 3070596., 3161940., 3253284., 3497462., 3605598.,
      3713734., 3821870., 3591582., 3702854., 3814126., 3925398., 3080724.,
      3177444., 3274164., 3370884., 2485778., 2567498., 2649218., 2730938.,
      2036888., 2103160., 2169432., 2235704., 1896344., 1953400., 2010456.,
      2067512., 2259114., 2331554., 2403994., 2476434., 2688564., 2776836.,
      2865108., 2953380., 3085622., 3190174., 3294726., 3399278., 3179742.,
      3287430., 3395118., 3502806., 2679444., 2773092., 2866740., 2960388.,
      2097106., 2176266., 2255426., 2334586., 1695640., 1759864., 1824088.,
      1888312., 1841816., 1896824., 1951832., 2006840., 2267754., 2337634.,
      2407514., 2477394., 2758324., 2843524., 2928724., 3013924., 3181686.,
      3282654., 3383622., 3484590., 3275806., 3379910., 3484014., 3588118.,
      2900756., 2991332., 3081908., 3172484., 2445714., 2522314., 2598914.,
      2675514., 1944216., 2006392., 2068568., 2130744., 1809776., 1856048.,
      1902320., 1948592., 2156292., 2215092., 2273892., 2332692., 2558024.,
      2629736., 2701448., 2773160., 2850108., 2935116., 3020124., 3105132.,
      2938572., 3026268., 3113964., 3201660., 2536968., 2613288., 2689608.,
      2765928., 2065812., 2130372., 2194932., 2259492., 1591664., 1644080.,
      1696496., 1748912., 1118152., 1153640., 1189128., 1224616., 1472894.,
      1518054., 1563214., 1608374., 1869596., 1924748., 1979900., 2035052.,
      2110370., 2175834., 2241298., 2306762., 2180634., 2248338., 2316042.,
      2383746., 1913404., 1972396., 2031388., 2090380., 1590902., 1640862.,
      1690822., 1740782., 1312712., 1353320., 1393928., 1434536., 964000.,
      986656.,  1009312., 1031968., 1247192., 1276152., 1305112., 1334072.,
      1559344., 1594864., 1630384., 1665904., 1669544., 1711880., 1754216.,
      1796552., 1729544., 1773672., 1817800., 1861928., 1530288., 1568880.,
      1607472., 1646064., 1293880., 1326680., 1359480., 1392280., 1019296.,
      1046048., 1072800., 1099552.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     110.,    150.,    260.,    404.,    548.,    692.,
      836.,    980.,    1124.,   1268.,   1412.,   1556.,   1700.,   1844.,
      1988.,   2132.,   2276.,   2420.,   2564.,   2708.,   2852.,   2996.,
      3140.,   3284.,   3428.,   3572.,   2566.,   2670.,   2774.,   2878.,
      1260.,   1468.,   1676.,   1884.,   5224.,   5768.,   6312.,   6856.,
      7400.,   7944.,   8488.,   9032.,   9576.,   10120.,  10664.,  11208.,
      11752.,  12296.,  12840.,  13384.,  13928.,  14472.,  15016.,  15560.,
      16104.,  16648.,  17192.,  17736.,  11196.,  11532.,  11868.,  12204.,
      7274.,   7778.,   8282.,   8786.,   22060.,  23260.,  24460.,  25660.,
      26860.,  28060.,  29260.,  30460.,  31660.,  32860.,  34060.,  35260.,
      36460.,  37660.,  38860.,  40060.,  41260.,  42460.,  43660.,  44860.,
      46060.,  47260.,  48460.,  49660.,  29474.,  30170.,  30866.,  31562.,
      21386.,  21890.,  22394.,  22898.,  55660.,  56860.,  58060.,  59260.,
      60460.,  61660.,  62860.,  64060.,  65260.,  66460.,  67660.,  68860.,
      70060.,  71260.,  72460.,  73660.,  74860.,  76060.,  77260.,  78460.,
      79660.,  80860.,  82060.,  83260.,  48962.,  49658.,  50354.,  51050.,
      35498.,  36002.,  36506.,  37010.,  89260.,  90460.,  91660.,  92860.,
      94060.,  95260.,  96460.,  97660.,  98860.,  100060., 101260., 102460.,
      103660., 104860., 106060., 107260., 108460., 109660., 110860., 112060.,
      113260., 114460., 115660., 116860., 68450.,  69146.,  69842.,  70538.,
      49610.,  50114.,  50618.,  51122.,  122860., 124060., 125260., 126460.,
      127660., 128860., 130060., 131260., 132460., 133660., 134860., 136060.,
      137260., 138460., 139660., 140860., 142060., 143260., 144460., 145660.,
      146860., 148060., 149260., 150460., 87938.,  88634.,  89330.,  90026.,
      63722.,  64226.,  64730.,  65234.,  156460., 157660., 158860., 160060.,
      161260., 162460., 163660., 164860., 166060., 167260., 168460., 169660.,
      170860., 172060., 173260., 174460., 175660., 176860., 178060., 179260.,
      180460., 181660., 182860., 184060., 107426., 108122., 108818., 109514.,
      69964.,  70428.,  70892.,  71356.,  161576., 162632., 163688., 164744.,
      165800., 166856., 167912., 168968., 170024., 171080., 172136., 173192.,
      174248., 175304., 176360., 177416., 178472., 179528., 180584., 181640.,
      182696., 183752., 184808., 185864., 103964., 104556., 105148., 105740.,
      49918.,  50214.,  50510.,  50806.,  111812., 112468., 113124., 113780.,
      114436., 115092., 115748., 116404., 117060., 117716., 118372., 119028.,
      119684., 120340., 120996., 121652., 122308., 122964., 123620., 124276.,
      124932., 125588., 126244., 126900., 69350.,  69710.,  70070.,  70430.,
      270.,    694.,    1118.,   1542.,   2276.,   3188.,   4100.,   5012.,
      5924.,   6836.,   7748.,   8660.,   9572.,   10484.,  11396.,  12308.,
      13220.,  14132.,  15044.,  15956.,  16868.,  17780.,  18692.,  19604.,
      20516.,  21428.,  22340.,  23252.,  12022.,  12510.,  12998.,  13486.,
      12492.,  13468.,  14444.,  15420.,  30760.,  32840.,  34920.,  37000.,
      39080.,  41160.,  43240.,  45320.,  47400.,  49480.,  51560.,  53640.,
      55720.,  57800.,  59880.,  61960.,  64040.,  66120.,  68200.,  70280.,
      72360.,  74440.,  76520.,  78600.,  40860.,  41964.,  43068.,  44172.,
      40250.,  41906.,  43562.,  45218.,  92620.,  96124.,  99628.,  103132.,
      106636., 110140., 113644., 117148., 120652., 124156., 127660., 131164.,
      134668., 138172., 141676., 145180., 148684., 152188., 155692., 159196.,
      162700., 166204., 169708., 173212., 90098.,  91946.,  93794.,  95642.,
      86618.,  88274.,  89930.,  91586.,  190732., 194236., 197740., 201244.,
      204748., 208252., 211756., 215260., 218764., 222268., 225772., 229276.,
      232780., 236284., 239788., 243292., 246796., 250300., 253804., 257308.,
      260812., 264316., 267820., 271324., 141842., 143690., 145538., 147386.,
      132986., 134642., 136298., 137954., 288844., 292348., 295852., 299356.,
      302860., 306364., 309868., 313372., 316876., 320380., 323884., 327388.,
      330892., 334396., 337900., 341404., 344908., 348412., 351916., 355420.,
      358924., 362428., 365932., 369436., 193586., 195434., 197282., 199130.,
      179354., 181010., 182666., 184322., 386956., 390460., 393964., 397468.,
      400972., 404476., 407980., 411484., 414988., 418492., 421996., 425500.,
      429004., 432508., 436012., 439516., 443020., 446524., 450028., 453532.,
      457036., 460540., 464044., 467548., 245330., 247178., 249026., 250874.,
      225722., 227378., 229034., 230690., 485068., 488572., 492076., 495580.,
      499084., 502588., 506092., 509596., 513100., 516604., 520108., 523612.,
      527116., 530620., 534124., 537628., 541132., 544636., 548140., 551644.,
      555148., 558652., 562156., 565660., 297074., 298922., 300770., 302618.,
      188716., 189948., 191180., 192412., 402152., 404744., 407336., 409928.,
      412520., 415112., 417704., 420296., 422888., 425480., 428072., 430664.,
      433256., 435848., 438440., 441032., 443624., 446216., 448808., 451400.,
      453992., 456584., 459176., 461768., 241148., 242508., 243868., 245228.,
      114670., 115350., 116030., 116710., 242852., 244276., 245700., 247124.,
      248548., 249972., 251396., 252820., 254244., 255668., 257092., 258516.,
      259940., 261364., 262788., 264212., 265636., 267060., 268484., 269908.,
      271332., 272756., 274180., 275604., 143318., 144062., 144806., 145550.,
      510.,    1318.,   2126.,   2934.,   4292.,   5972.,   7652.,   9332.,
      11012.,  12692.,  14372.,  16052.,  17732.,  19412.,  21092.,  22772.,
      24452.,  26132.,  27812.,  29492.,  31172.,  32852.,  34532.,  36212.,
      37892.,  39572.,  41252.,  42932.,  21478.,  22350.,  23222.,  24094.,
      23724.,  25468.,  27212.,  28956.,  56296.,  59912.,  63528.,  67144.,
      70760.,  74376.,  77992.,  81608.,  85224.,  88840.,  92456.,  96072.,
      99688.,  103304., 106920., 110536., 114152., 117768., 121384., 125000.,
      128616., 132232., 135848., 139464., 70524.,  72396.,  74268.,  76140.,
      73226.,  76034.,  78842.,  81650.,  163180., 168988., 174796., 180604.,
      186412., 192220., 198028., 203836., 209644., 215452., 221260., 227068.,
      232876., 238684., 244492., 250300., 256108., 261916., 267724., 273532.,
      279340., 285148., 290956., 296764., 150722., 153722., 156722., 159722.,
      151850., 154658., 157466., 160274., 325804., 331612., 337420., 343228.,
      349036., 354844., 360652., 366460., 372268., 378076., 383884., 389692.,
      395500., 401308., 407116., 412924., 418732., 424540., 430348., 436156.,
      441964., 447772., 453580., 459388., 234722., 237722., 240722., 243722.,
      230474., 233282., 236090., 238898., 488428., 494236., 500044., 505852.,
      511660., 517468., 523276., 529084., 534892., 540700., 546508., 552316.,
      558124., 563932., 569740., 575548., 581356., 587164., 592972., 598780.,
      604588., 610396., 616204., 622012., 318722., 321722., 324722., 327722.,
      309098., 311906., 314714., 317522., 651052., 656860., 662668., 668476.,
      674284., 680092., 685900., 691708., 697516., 703324., 709132., 714940.,
      720748., 726556., 732364., 738172., 743980., 749788., 755596., 761404.,
      767212., 773020., 778828., 784636., 402722., 405722., 408722., 411722.,
      387722., 390530., 393338., 396146., 813676., 819484., 825292., 831100.,
      836908., 842716., 848524., 854332., 860140., 865948., 871756., 877564.,
      883372., 889180., 894988., 900796., 906604., 912412., 918220., 924028.,
      929836., 935644., 941452., 947260., 486722., 489722., 492722., 495722.,
      307468., 309468., 311468., 313468., 642728., 646856., 650984., 655112.,
      659240., 663368., 667496., 671624., 675752., 679880., 684008., 688136.,
      692264., 696392., 700520., 704648., 708776., 712904., 717032., 721160.,
      725288., 729416., 733544., 737672., 378332., 380460., 382588., 384716.,
      179422., 180486., 181550., 182614., 373892., 376084., 378276., 380468.,
      382660., 384852., 387044., 389236., 391428., 393620., 395812., 398004.,
      400196., 402388., 404580., 406772., 408964., 411156., 413348., 415540.,
      417732., 419924., 422116., 424308., 217286., 218414., 219542., 220670.};
  const std::array<int, 4> in_shape = {{3, 9, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,   2840.,   3752.,   4788.,   5194.,   5600.,   5240.,   4740.,
      4096.,   4220.,   5725.,   7420.,   9310.,   9940.,   10570.,  9730.,
      8675.,   7400.,   7560.,   10110.,  12936.,  16044.,  16947.,  17850.,
      16248.,  14340.,  12120.,  12320.,  16310.,  20678.,  25431.,  26656.,
      27881.,  25172.,  22050.,  18508.,  18242.,  23870.,  29939.,  36456.,
      37681.,  38906.,  34811.,  30240.,  25186.,  24164.,  31430.,  39200.,
      47481.,  48706.,  49931.,  44450.,  38430.,  31864.,  29256.,  37740.,
      46704.,  56154.,  57351.,  58548.,  51744.,  44430.,  36600.,  31920.,
      40975.,  50470.,  60410.,  61530.,  62650.,  55120.,  47125.,  38660.,
      31904.,  40820.,  50120.,  59808.,  60802.,  61796.,  54200.,  46200.,
      37792.,  18896.,  24710.,  30968.,  37674.,  38080.,  38486.,  34400.,
      29850.,  24832.,  30950.,  40150.,  49945.,  60340.,  60970.,  61600.,
      54685.,  47150.,  38990.,  46440.,  59925.,  74172.,  89187.,  90090.,
      90993.,  80400.,  69015.,  56832.,  65618.,  84350.,  104027., 124656.,
      125881., 127106., 111923., 95760.,  78610.,  71540.,  91910.,  113288.,
      135681., 136906., 138131., 121562., 103950., 85288.,  77462.,  99470.,
      122549., 146706., 147931., 149156., 131201., 112140., 91966.,  81744.,
      104565., 128352., 153111., 154308., 155505., 136308., 116115., 94920.,
      81330.,  103750., 127015., 151130., 152250., 153370., 134095., 113950.,
      92930.,  75968.,  96710.,  118160., 140322., 141316., 142310., 124184.,
      105330., 85744.,  35744.,  46580.,  58184.,  70560.,  70966.,  71372.,
      63560.,  54960.,  45568.,  57680.,  74575.,  92470.,  111370., 112000.,
      112630., 99640.,  85625.,  70580.,  85320.,  109740., 135408., 162330.,
      163233., 164136., 144552., 123690., 101544., 118916., 152390., 187376.,
      223881., 225106., 226331., 198674., 169470., 138712., 124838., 159950.,
      196637., 234906., 236131., 237356., 208313., 177660., 145390., 130760.,
      167510., 205898., 245931., 247156., 248381., 217952., 185850., 152068.,
      134232., 171390., 210000., 250068., 251265., 252462., 220872., 187800.,
      153240., 130740., 166525., 203560., 241850., 242970., 244090., 213070.,
      180775., 147200., 120032., 152600., 186200., 220836., 221830., 222824.,
      194168., 164460., 133696.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,   16.,   22.,   28.,   34.,   32.,   21.,   12.,
      38.,   80.,   101.,  122.,  143.,  164.,  138.,  84.,   54.,   144.,
      273.,  318.,  363.,  408.,  453.,  360.,  210.,  138.,  333.,  588.,
      633.,  678.,  723.,  768.,  591.,  336.,  222.,  522.,  903.,  948.,
      993.,  1038., 1083., 822.,  462.,  306.,  711.,  1218., 1263., 1308.,
      1353., 1398., 1053., 588.,  390.,  900.,  1533., 1578., 1623., 1668.,
      1713., 1284., 714.,  424.,  938.,  1544., 1583., 1622., 1661., 1700.,
      1238., 672.,  301.,  652.,  1054., 1078., 1102., 1126., 1150., 824.,
      441.,  10.,   31.,   64.,   97.,   130.,  163.,  196.,  149.,  84.,
      93.,   218.,  377.,  452.,  527.,  602.,  677.,  498.,  273.,  270.,
      603.,  1002., 1128., 1254., 1380., 1506., 1089., 588.,  543.,  1170.,
      1884., 2010., 2136., 2262., 2388., 1698., 903.,  816.,  1737., 2766.,
      2892., 3018., 3144., 3270., 2307., 1218., 1089., 2304., 3648., 3774.,
      3900., 4026., 4152., 2916., 1533., 1362., 2871., 4530., 4656., 4782.,
      4908., 5034., 3525., 1848., 1135., 2378., 3731., 3824., 3917., 4010.,
      4103., 2858., 1491., 688.,  1435., 2242., 2293., 2344., 2395., 2446.,
      1697., 882.,  19.,   58.,   118.,  178.,  238.,  298.,  358.,  266.,
      147.,  174.,  398.,  674.,  803.,  932.,  1061., 1190., 858.,  462.,
      486.,  1062., 1731., 1938., 2145., 2352., 2559., 1818., 966.,  948.,
      2007., 3180., 3387., 3594., 3801., 4008., 2805., 1470., 1410., 2952.,
      4629., 4836., 5043., 5250., 5457., 3792., 1974., 1872., 3897., 6078.,
      6285., 6492., 6699., 6906., 4779., 2478., 2334., 4842., 7527., 7734.,
      7941., 8148., 8355., 5766., 2982., 1846., 3818., 5918., 6065., 6212.,
      6359., 6506., 4478., 2310., 1075., 2218., 3430., 3508., 3586., 3664.,
      3742., 2570., 1323.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,   21540.,   28552.,   36540.,   39732.,   42924.,   40264.,
      36500.,   31600.,   32300.,   43925.,   57050.,   71715.,   76685.,
      81655.,   75290.,   67225.,   57420.,   58344.,   78150.,   100140.,
      124362.,  131502.,  138642.,  126348.,  111630.,  94440.,   95620.,
      126735.,  160846.,  198009.,  207711.,  217413.,  196462.,  172235.,
      144676.,  142492.,  186585.,  234178.,  285327.,  295029.,  304731.,
      272818.,  237125.,  197596.,  189364.,  246435.,  307510.,  372645.,
      382347.,  392049.,  349174.,  302015.,  250516.,  230280.,  297150.,
      367836.,  442386.,  451878.,  461370.,  407868.,  350310.,  288648.,
      251900.,  323425.,  398450.,  477015.,  485905.,  494795.,  435410.,
      372325.,  305500.,  252208.,  322740.,  396328.,  473004.,  480900.,
      488796.,  428776.,  365540.,  299056.,  147664.,  193260.,  242392.,
      295092.,  298284.,  301476.,  269656.,  234140.,  194896.,  242900.,
      315275.,  392390.,  474285.,  479255.,  484225.,  430070.,  370975.,
      306900.,  365496.,  471810.,  584196.,  702702.,  709842.,  716982.,
      633732.,  544170.,  448248.,  517468.,  665385.,  820834.,  983871.,
      993573.,  1003275., 883666.,  756245.,  620956.,  564340.,  725235.,
      894166.,  1071189., 1080891., 1090593., 960022.,  821135.,  673876.,
      611212.,  785085.,  967498.,  1158507., 1168209., 1177911., 1036378.,
      886025.,  726796.,  646296.,  826890.,  1015188., 1211238., 1220730.,
      1230222., 1078548., 918930.,  751320.,  643940.,  821575.,  1005950.,
      1197105., 1205995., 1214885., 1062350., 902875.,  736420.,  602128.,
      766620.,  936760.,  1112580., 1120476., 1128372., 984760.,  835340.,
      680080.,  279856.,  364980.,  456232.,  553644.,  556836.,  560028.,
      499048.,  431780.,  358192.,  453500.,  586625.,  727730.,  876855.,
      881825.,  886795.,  784850.,  674725.,  556380.,  672648.,  865470.,
      1068252., 1281042., 1288182., 1295322., 1141116., 976710.,  802056.,
      939316.,  1204035., 1480822., 1769733., 1779435., 1789137., 1570870.,
      1340255., 1097236., 986188.,  1263885., 1554154., 1857051., 1866753.,
      1876455., 1647226., 1405145., 1150156., 1033060., 1323735., 1627486.,
      1944369., 1954071., 1963773., 1723582., 1470035., 1203076., 1062312.,
      1356630., 1662540., 1980090., 1989582., 1999074., 1749228., 1487550.,
      1213992., 1035980., 1319725., 1613450., 1917195., 1926085., 1934975.,
      1689290., 1433425., 1167340., 952048.,  1210500., 1477192., 1752156.,
      1760052., 1767948., 1540744., 1305140., 1061104.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   185.,   227.,   222.,   149.,
      70.,    244.,   538.,   694.,   850.,   1006.,  1162.,  996.,   614.,
      363.,   1002.,  1941.,  2283.,  2625.,  2967.,  3309.,  2658.,  1563.,
      993.,   2430.,  4335.,  4677.,  5019.,  5361.,  5703.,  4422.,  2529.,
      1623.,  3858.,  6729.,  7071.,  7413.,  7755.,  8097.,  6186.,  3495.,
      2253.,  5286.,  9123.,  9465.,  9807.,  10149., 10491., 7950.,  4461.,
      2883.,  6714.,  11517., 11859., 12201., 12543., 12885., 9714.,  5427.,
      3214.,  7140.,  11794., 12094., 12394., 12694., 12994., 9492.,  5166.,
      2309.,  5014.,  8123.,  8309.,  8495.,  8681.,  8867.,  6366.,  3413.,
      59.,    202.,   437.,   695.,   953.,   1211.,  1469.,  1122.,  635.,
      682.,   1612.,  2806.,  3394.,  3982.,  4570.,  5158.,  3804.,  2090.,
      2037.,  4566.,  7611.,  8601.,  9591.,  10581., 11571., 8382.,  4533.,
      4179.,  9018.,  14541., 15531., 16521., 17511., 18501., 13170., 7011.,
      6321.,  13470., 21471., 22461., 23451., 24441., 25431., 17958., 9489.,
      8463.,  17922., 28401., 29391., 30381., 31371., 32361., 22746., 11967.,
      10605., 22374., 35331., 36321., 37311., 38301., 39291., 27534., 14445.,
      8866.,  18588., 29182., 29914., 30646., 31378., 32110., 22380., 11682.,
      5387.,  11242., 17573., 17975., 18377., 18779., 19181., 13314., 6923.,
      113.,   382.,   815.,   1289.,  1763.,  2237.,  2711.,  2022.,  1121.,
      1294.,  2980.,  5074.,  6094.,  7114.,  8134.,  9154.,  6612.,  3566.,
      3711.,  8130.,  13281., 14919., 16557., 18195., 19833., 14106., 7503.,
      7365.,  15606., 24747., 26385., 28023., 29661., 31299., 21918., 11493.,
      11019., 23082., 36213., 37851., 39489., 41127., 42765., 29730., 15483.,
      14673., 30558., 47679., 49317., 50955., 52593., 54231., 37542., 19473.,
      18327., 38034., 59145., 60783., 62421., 64059., 65697., 45354., 23463.,
      14518., 30036., 46570., 47734., 48898., 50062., 51226., 35268., 18198.,
      8465.,  17470., 27023., 27641., 28259., 28877., 29495., 20262., 10433.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,   167640.,   222608.,   285320.,   310632.,   335944.,
      315536.,   286360.,   248160.,   252600.,   343950.,   447220.,
      562730.,   602210.,   641690.,   592180.,   529150.,   452280.,
      458256.,   614340.,   787800.,   979020.,   1035804.,  1092588.,
      996312.,   880740.,   745488.,   753256.,   998970.,   1268540.,
      1562414.,  1639638.,  1716862.,  1552124.,  1361290.,  1143912.,
      1126216.,  1475250.,  1852172.,  2257430.,  2334654.,  2411878.,
      2159948.,  1877890.,  1565256.,  1499176.,  1951530.,  2435804.,
      2952446.,  3029670.,  3106894.,  2767772.,  2394490.,  1986600.,
      1827216.,  2358180.,  2919576.,  3511788.,  3587388.,  3662988.,
      3238680.,  2782020.,  2292624.,  2001400.,  2569950.,  3166420.,
      3791130.,  3861970.,  3932810.,  3461140.,  2959950.,  2428920.,
      2005600.,  2566680.,  3152144.,  3762248.,  3825192.,  3888136.,
      3410960.,  2908120.,  2379360.,  1167328.,  1528440.,  1917776.,
      2335592.,  2360904.,  2386216.,  2135120.,  1854520.,  1544160.,
      1924440.,  2498550.,  3110500.,  3760610.,  3800090.,  3839570.,
      3410980.,  2942950.,  2435160.,  2899920.,  3744180.,  4636920.,
      5578524.,  5635308.,  5692092.,  5032056.,  4321620.,  3560400.,
      4109896.,  5285490.,  6521228.,  7817558.,  7894782.,  7972006.,
      7022540.,  6010690.,  4936008.,  4482856.,  5761770.,  7104860.,
      8512574.,  8589798.,  8667022.,  7630364.,  6527290.,  5357352.,
      4855816.,  6238050.,  7688492.,  9207590.,  9284814.,  9362038.,
      8238188.,  7043890.,  5778696.,  5139792.,  6576660.,  8075064.,
      9635388.,  9710988.,  9786588.,  8580792.,  7311540.,  5978448.,
      5124760.,  6538950.,  8006980.,  9529170.,  9600010.,  9670850.,
      8457220.,  7188150.,  5863320.,  4794592.,  6104760.,  7460048.,
      8860712.,  8923656.,  8986600.,  7843280.,  6653560.,  5417184.,
      2214496.,  2889240.,  3612944.,  4385864.,  4411176.,  4436488.,
      3954704.,  3422680.,  2840160.,  3596280.,  4653150.,  5773780.,
      6958490.,  6997970.,  7037450.,  6229780.,  5356750.,  4418040.,
      5341584.,  6874020.,  8486040.,  10178028., 10234812., 10291596.,
      9067800.,  7762500.,  6375312.,  7466536.,  9572010.,  11773916.,
      14072702., 14149926., 14227150., 12492956., 10660090., 8728104.,
      7839496.,  10048290., 12357548., 14767718., 14844942., 14922166.,
      13100780., 11176690., 9149448.,  8212456.,  10524570., 12941180.,
      15462734., 15539958., 15617182., 13708604., 11693290., 9570792.,
      8452368.,  10795140., 13230552., 15758988., 15834588., 15910188.,
      13922904., 11841060., 9664272.,  8248120.,  10507950., 12847540.,
      15267210., 15338050., 15408890., 13453300., 11416350., 9297720.,
      7583584.,  9642840.,  11767952., 13959176., 14022120., 14085064.,
      12275600., 10399000., 8455008.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    706.,    1018.,   1330.,   1642.,   1644.,
      1118.,   460.,    1720.,   3908.,   5108.,   6308.,   7508.,   8708.,
      7544.,   4684.,   2634.,   7428.,   14574.,  17238.,  19902.,  22566.,
      25230.,  20388.,  12042.,  7506.,   18516.,  33222.,  35886.,  38550.,
      41214.,  43878.,  34164.,  19602.,  12378.,  29604.,  51870.,  54534.,
      57198.,  59862.,  62526.,  47940.,  27162.,  17250.,  40692.,  70518.,
      73182.,  75846.,  78510.,  81174.,  61716.,  34722.,  22122.,  51780.,
      89166.,  91830.,  94494.,  97158.,  99822.,  75492.,  42282.,  25004.,
      55672.,  92132.,  94484.,  96836.,  99188.,  101540., 74296.,  40492.,
      18078.,  39308.,  63754.,  65218.,  66682.,  68146.,  69610.,  50028.,
      26846.,  390.,    1436.,   3202.,   5242.,   7282.,   9322.,   11362.,
      8700.,   4934.,   5212.,   12376.,  21620.,  26276.,  30932.,  35588.,
      40244.,  29720.,  16348.,  15810.,  35508.,  59286.,  67134.,  74982.,
      82830.,  90678.,  65748.,  35586.,  32778.,  70788.,  114222., 122070.,
      129918., 137766., 145614., 103716., 55242.,  49746.,  106068., 169158.,
      177006., 184854., 192702., 200550., 141684., 74898.,  66714.,  141348.,
      224094., 231942., 239790., 247638., 255486., 179652., 94554.,  83682.,
      176628., 279030., 286878., 294726., 302574., 310422., 217620., 114210.,
      70076.,  146968., 230804., 236612., 242420., 248228., 254036., 177112.,
      92476.,  42630.,  88988.,  139138., 142330., 145522., 148714., 151906.,
      105468., 54854.,  750.,    2732.,   6010.,   9778.,   13546.,  17314.,
      21082.,  15756.,  8750.,   9964.,   23032.,  39332.,  47444.,  55556.,
      63668.,  71780.,  51896.,  28012.,  28986.,  63588.,  103998., 117030.,
      130062., 143094., 156126., 111108., 59130.,  58050.,  123060., 195222.,
      208254., 221286., 234318., 247350., 173268., 90882.,  87114.,  182532.,
      286446., 299478., 312510., 325542., 338574., 235428., 122634., 116178.,
      242004., 377670., 390702., 403734., 416766., 429798., 297588., 154386.,
      145242., 301476., 468894., 481926., 494958., 507990., 521022., 359748.,
      186138., 115148., 238264., 369476., 378740., 388004., 397268., 406532.,
      279928., 144460., 67182.,  138668., 214522., 219442., 224362., 229282.,
      234202., 160908., 82862.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,   5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654.,  11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,   8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075.,  19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290.,  14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975.,  32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795.,  28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075.,  41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937.,  50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375.,  47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754.,  77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  46998.,  48328.,  61180.,  62860.,  76363.,  78400.,
      92561.,  94962.,  94962.,  97412.,  97363.,  99862.,  86737.,  88900.,
      75040.,  76860.,  62258.,  63728.,  57264.,  58512.,  73905.,  75480.,
      91500.,  93408.,  110061., 112308., 112413., 114702., 114765., 117096.,
      101472., 103488., 87165.,  88860.,  71832.,  73200.,  62710.,  63840.,
      80525.,  81950.,  99215.,  100940., 118790., 120820., 120995., 123060.,
      123200., 125300., 108425., 110240., 92725.,  94250.,  76090.,  77320.,
      62832.,  63808.,  80410.,  81640.,  98752.,  100240., 117866., 119616.,
      119826., 121604., 121786., 123592., 106840., 108400., 91090.,  92400.,
      74528.,  75584.,  36240.,  37792.,  47470.,  49420.,  59584.,  61936.,
      72590.,  75348.,  73374.,  76160.,  74158.,  76972.,  66376.,  68800.,
      57670.,  59700.,  48032.,  49664.,  59870.,  61900.,  77750.,  80300.,
      96815.,  99890.,  117075., 120680., 118300., 121940., 119525., 123200.,
      106205., 109370., 91650.,  94300.,  75850.,  77980.,  90336.,  92880.,
      116655., 119850., 144492., 148344., 173859., 178374., 175623., 180180.,
      177387., 181986., 156840., 160800., 134715., 138030., 111000., 113664.,
      128142., 131236., 164815., 168700., 203371., 208054., 243824., 249312.,
      246225., 251762., 248626., 254212., 219037., 223846., 187495., 191520.,
      153986., 157220., 139734., 143080., 179620., 183820., 221515., 226576.,
      265433., 271362., 267834., 273812., 270235., 276262., 237937., 243124.,
      203560., 207900., 167090., 170576., 151326., 154924., 194425., 198940.,
      239659., 245098., 287042., 293412., 289443., 295862., 291844., 298312.,
      256837., 262402., 219625., 224280., 180194., 183932., 160296., 163488.,
      205125., 209130., 251880., 256704., 300573., 306222., 302925., 308616.,
      305277., 311010., 267684., 272616., 228105., 232230., 186528., 189840.,
      159910., 162660., 204050., 207500., 249875., 254030., 297395., 302260.,
      299600., 304500., 301805., 306740., 263945., 268190., 224350., 227900.,
      183010., 185860., 149664., 151936., 190570., 193420., 232888., 236320.,
      276626., 280644., 278586., 282632., 280546., 284620., 244864., 248368.,
      207730., 210660., 169136., 171488., 68640.,  71488.,  89590.,  93160.,
      112072., 116368., 136094., 141120., 136878., 141932., 137662., 142744.,
      122752., 127120., 106270., 109920., 88208.,  91136.,  111710., 115360.,
      144575., 149150., 179435., 184940., 216300., 222740., 217525., 224000.,
      218750., 225260., 193685., 199280., 166575., 171250., 137410., 141160.,
      166152., 170640., 213855., 219480., 264048., 270816., 316743., 324660.,
      318507., 326466., 320271., 328272., 282228., 289104., 241635., 247380.,
      198480., 203088., 232470., 237832., 298060., 304780., 366667., 374752.,
      438305., 447762., 440706., 450212., 443107., 452662., 389137., 397348.,
      332080., 338940., 271922., 277424., 244062., 249676., 312865., 319900.,
      384811., 393274., 459914., 469812., 462315., 472262., 464716., 474712.,
      408037., 416626., 348145., 355320., 285026., 290780., 255654., 261520.,
      327670., 335020., 402955., 411796., 481523., 491862., 483924., 494312.,
      486325., 496762., 426937., 435904., 364210., 371700., 298130., 304136.,
      263328., 268464., 336345., 342780., 412260., 420000., 491085., 500136.,
      493437., 502530., 495789., 504924., 433896., 441744., 369045., 375600.,
      301224., 306480., 257110., 261480., 327575., 333050., 400535., 407120.,
      476000., 483700., 478205., 485940., 480410., 488180., 419465., 426140.,
      355975., 361550., 289930., 294400., 236496., 240064., 300730., 305200.,
      367024., 372400., 435386., 441672., 437346., 443660., 439306., 445648.,
      382888., 388336., 324370., 328920., 263744., 267392.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     14.,    20.,    26.,    32.,    38.,
      44.,    50.,    56.,    62.,    68.,    59.,    64.,    39.,    42.,
      19.,    24.,    64.,    76.,    139.,   160.,   181.,   202.,   223.,
      244.,   265.,   286.,   307.,   328.,   260.,   276.,   159.,   168.,
      96.,    108.,   261.,   288.,   501.,   546.,   591.,   636.,   681.,
      726.,   771.,   816.,   861.,   906.,   687.,   720.,   402.,   420.,
      264.,   276.,   639.,   666.,   1131.,  1176.,  1221.,  1266.,  1311.,
      1356.,  1401.,  1446.,  1491.,  1536.,  1149.,  1182.,  654.,   672.,
      432.,   444.,   1017.,  1044.,  1761.,  1806.,  1851.,  1896.,  1941.,
      1986.,  2031.,  2076.,  2121.,  2166.,  1611.,  1644.,  906.,   924.,
      600.,   612.,   1395.,  1422.,  2391.,  2436.,  2481.,  2526.,  2571.,
      2616.,  2661.,  2706.,  2751.,  2796.,  2073.,  2106.,  1158.,  1176.,
      768.,   780.,   1773.,  1800.,  3021.,  3066.,  3111.,  3156.,  3201.,
      3246.,  3291.,  3336.,  3381.,  3426.,  2535.,  2568.,  1410.,  1428.,
      837.,   848.,   1852.,  1876.,  3049.,  3088.,  3127.,  3166.,  3205.,
      3244.,  3283.,  3322.,  3361.,  3400.,  2448.,  2476.,  1329.,  1344.,
      595.,   602.,   1289.,  1304.,  2084.,  2108.,  2132.,  2156.,  2180.,
      2204.,  2228.,  2252.,  2276.,  2300.,  1631.,  1648.,  873.,   882.,
      10.,    20.,    41.,    62.,    95.,    128.,   161.,   194.,   227.,
      260.,   293.,   326.,   359.,   392.,   275.,   298.,   156.,   168.,
      163.,   186.,   388.,   436.,   679.,   754.,   829.,   904.,   979.,
      1054.,  1129.,  1204.,  1279.,  1354.,  944.,   996.,   519.,   546.,
      501.,   540.,   1125.,  1206.,  1878.,  2004.,  2130.,  2256.,  2382.,
      2508.,  2634.,  2760.,  2886.,  3012.,  2091.,  2178.,  1131.,  1176.,
      1047.,  1086.,  2259.,  2340.,  3642.,  3768.,  3894.,  4020.,  4146.,
      4272.,  4398.,  4524.,  4650.,  4776.,  3309.,  3396.,  1761.,  1806.,
      1593.,  1632.,  3393.,  3474.,  5406.,  5532.,  5658.,  5784.,  5910.,
      6036.,  6162.,  6288.,  6414.,  6540.,  4527.,  4614.,  2391.,  2436.,
      2139.,  2178.,  4527.,  4608.,  7170.,  7296.,  7422.,  7548.,  7674.,
      7800.,  7926.,  8052.,  8178.,  8304.,  5745.,  5832.,  3021.,  3066.,
      2685.,  2724.,  5661.,  5742.,  8934.,  9060.,  9186.,  9312.,  9438.,
      9564.,  9690.,  9816.,  9942.,  10068., 6963.,  7050.,  3651.,  3696.,
      2241.,  2270.,  4696.,  4756.,  7369.,  7462.,  7555.,  7648.,  7741.,
      7834.,  7927.,  8020.,  8113.,  8206.,  5652.,  5716.,  2949.,  2982.,
      1360.,  1376.,  2837.,  2870.,  4433.,  4484.,  4535.,  4586.,  4637.,
      4688.,  4739.,  4790.,  4841.,  4892.,  3359.,  3394.,  1746.,  1764.,
      19.,    38.,    77.,    116.,   176.,   236.,   296.,   356.,   416.,
      476.,   536.,   596.,   656.,   716.,   491.,   532.,   273.,   294.,
      307.,   348.,   712.,   796.,   1219.,  1348.,  1477.,  1606.,  1735.,
      1864.,  1993.,  2122.,  2251.,  2380.,  1628.,  1716.,  879.,   924.,
      906.,   972.,   1989.,  2124.,  3255.,  3462.,  3669.,  3876.,  4083.,
      4290.,  4497.,  4704.,  4911.,  5118.,  3495.,  3636.,  1860.,  1932.,
      1830.,  1896.,  3879.,  4014.,  6153.,  6360.,  6567.,  6774.,  6981.,
      7188.,  7395.,  7602.,  7809.,  8016.,  5469.,  5610.,  2868.,  2940.,
      2754.,  2820.,  5769.,  5904.,  9051.,  9258.,  9465.,  9672.,  9879.,
      10086., 10293., 10500., 10707., 10914., 7443.,  7584.,  3876.,  3948.,
      3678.,  3744.,  7659.,  7794.,  11949., 12156., 12363., 12570., 12777.,
      12984., 13191., 13398., 13605., 13812., 9417.,  9558.,  4884.,  4956.,
      4602.,  4668.,  9549.,  9684.,  14847., 15054., 15261., 15468., 15675.,
      15882., 16089., 16296., 16503., 16710., 11391., 11532., 5892.,  5964.,
      3645.,  3692.,  7540.,  7636.,  11689., 11836., 11983., 12130., 12277.,
      12424., 12571., 12718., 12865., 13012., 8856.,  8956.,  4569.,  4620.,
      2125.,  2150.,  4385.,  4436.,  6782.,  6860.,  6938.,  7016.,  7094.,
      7172.,  7250.,  7328.,  7406.,  7484.,  5087.,  5140.,  2619.,  2646.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,   31440.,   41120.,   43720.,   54680.,   57896.,   70168.,
      74032.,   76384.,   80472.,   82600.,   86912.,   77672.,   81464.,
      70560.,   73800.,   61200.,   63856.,   62160.,   65400.,   84725.,
      88875.,   110260.,  115360.,  138845.,  144935.,  148575.,  154945.,
      158305.,  164955.,  146200.,  152020.,  130725.,  135675.,  111800.,
      115840.,  113112.,  117864.,  151740.,  157800.,  194700.,  202116.,
      242088.,  250908.,  256116.,  265272.,  270144.,  279636.,  246468.,
      254748.,  217980.,  225000.,  184584.,  190296.,  186312.,  192864.,
      247205.,  255535.,  314048.,  324212.,  386953.,  399007.,  406063.,
      418509.,  425173.,  438011.,  384524.,  395696.,  337365.,  346815.,
      283584.,  291256.,  278544.,  287112.,  365015.,  375865.,  458444.,
      471632.,  558943.,  574525.,  578053.,  594027.,  597163.,  613529.,
      534968.,  549164.,  465255.,  477225.,  387912.,  397600.,  370776.,
      381360.,  482825.,  496195.,  602840.,  619052.,  730933.,  750043.,
      750043.,  769545.,  769153.,  789047.,  685412.,  702632.,  593145.,
      607635.,  492240.,  503944.,  453096.,  463032.,  584880.,  597420.,
      724260.,  739452.,  871332.,  889224.,  890064.,  908292.,  908796.,
      927360.,  803676.,  819732.,  690480.,  703980.,  569112.,  580008.,
      497040.,  506040.,  638325.,  649675.,  786580.,  800320.,  941885.,
      958055.,  959455.,  975905.,  977025.,  993755.,  859960.,  874420.,
      735525.,  747675.,  603640.,  613440.,  498576.,  506352.,  638120.,
      647920.,  783752.,  795608.,  935536.,  949480.,  951160.,  965328.,
      966784.,  981176.,  848216.,  860648.,  723240.,  733680.,  591792.,
      600208.,  286032.,  298416.,  374840.,  390400.,  470696.,  489464.,
      573664.,  595672.,  579880.,  602112.,  586096.,  608552.,  524792.,
      544136.,  456120.,  472320.,  380016.,  393040.,  473640.,  489840.,
      615275.,  635625.,  766360.,  790900.,  926975.,  955745.,  936705.,
      965755.,  946435.,  975765.,  841180.,  866440.,  726075.,  747225.,
      601040.,  618040.,  715752.,  736056.,  924480.,  949980.,  1145316.,
      1176060., 1378356., 1414392., 1392384., 1428756., 1406412., 1443120.,
      1243740., 1275348., 1068480., 1094940., 880536.,  901800.,  1016400.,
      1041096., 1307495., 1338505., 1613612., 1650992., 1934863., 1978669.,
      1953973., 1998171., 1973083., 2017673., 1738520., 1776908., 1488375.,
      1520505., 1222536., 1248352., 1108632., 1135344., 1425305., 1458835.,
      1758008., 1798412., 2106853., 2154187., 2125963., 2173689., 2145073.,
      2193191., 1888964., 1930376., 1616265., 1650915., 1326864., 1354696.,
      1200864., 1229592., 1543115., 1579165., 1902404., 1945832., 2278843.,
      2329705., 2297953., 2349207., 2317063., 2368709., 2039408., 2083844.,
      1744155., 1781325., 1431192., 1461040., 1273464., 1298952., 1629780.,
      1661760., 2001468., 2039988., 2388624., 2433732., 2407356., 2452800.,
      2426088., 2471868., 2127540., 2166924., 1813140., 1846080., 1482792.,
      1509240., 1271400., 1293360., 1622475., 1650025., 1987000., 2020180.,
      2365055., 2403905., 2382625., 2421755., 2400195., 2439605., 2099260.,
      2133160., 1784475., 1812825., 1455760., 1478520., 1190640., 1208784.,
      1516160., 1538920., 1852952., 1880360., 2201080., 2233168., 2216704.,
      2249016., 2232328., 2264864., 1948520., 1976504., 1653120., 1676520.,
      1346064., 1364848., 542640.,  565392.,  708560.,  737080.,  886712.,
      921032.,  1077160., 1117312., 1083376., 1123752., 1089592., 1130192.,
      971912.,  1006808., 841680.,  870840.,  698832.,  722224.,  885120.,
      914280.,  1145825., 1182375., 1422460., 1466440., 1715105., 1766555.,
      1724835., 1776565., 1734565., 1786575., 1536160., 1580860., 1321425.,
      1358775., 1090280., 1120240., 1318392., 1354248., 1697220., 1742160.,
      2095932., 2150004., 2514624., 2577876., 2528652., 2592240., 2542680.,
      2606604., 2241012., 2295948., 1918980., 1964880., 1576488., 1613304.,
      1846488., 1889328., 2367785., 2421475., 2913176., 2977772., 3482773.,
      3558331., 3501883., 3577833., 3520993., 3597335., 3092516., 3158120.,
      2639385., 2694195., 2161488., 2205448., 1938720., 1983576., 2485595.,
      2541805., 3057572., 3125192., 3654763., 3733849., 3673873., 3753351.,
      3692983., 3772853., 3242960., 3311588., 2767275., 2824605., 2265816.,
      2311792., 2030952., 2077824., 2603405., 2662135., 3201968., 3272612.,
      3826753., 3909367., 3845863., 3928869., 3864973., 3948371., 3393404.,
      3465056., 2895165., 2955015., 2370144., 2418136., 2093832., 2134872.,
      2674680., 2726100., 3278676., 3340524., 3905916., 3978240., 3924648.,
      3997308., 3943380., 4016376., 3451404., 3514116., 2935800., 2988180.,
      2396472., 2438472., 2045760., 2080680., 2606625., 2650375., 3187420.,
      3240040., 3788225., 3849755., 3805795., 3867605., 3823365., 3885455.,
      3338560., 3391900., 2833425., 2877975., 2307880., 2343600., 1882704.,
      1911216., 2394200., 2429920., 2922152., 2965112., 3466624., 3516856.,
      3482248., 3532704., 3497872., 3548552., 3048824., 3092360., 2583000.,
      2619360., 2100336., 2129488.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     28.,     48.,     85.,     127.,    169.,    211.,
      253.,    295.,    337.,    379.,    421.,    463.,    416.,    452.,
      281.,    303.,    112.,    148.,    420.,    508.,    956.,    1112.,
      1268.,   1424.,   1580.,   1736.,   1892.,   2048.,   2204.,   2360.,
      1900.,   2020.,   1176.,   1244.,   657.,    747.,    1848.,   2052.,
      3621.,   3963.,   4305.,   4647.,   4989.,   5331.,   5673.,   6015.,
      6357.,   6699.,   5124.,   5376.,   3021.,   3159.,   1917.,   2007.,
      4704.,   4908.,   8409.,   8751.,   9093.,   9435.,   9777.,   10119.,
      10461.,  10803.,  11145.,  11487.,  8652.,   8904.,   4953.,   5091.,
      3177.,   3267.,   7560.,   7764.,   13197.,  13539.,  13881.,  14223.,
      14565.,  14907.,  15249.,  15591.,  15933.,  16275.,  12180.,  12432.,
      6885.,   7023.,   4437.,   4527.,   10416.,  10620.,  17985.,  18327.,
      18669.,  19011.,  19353.,  19695.,  20037.,  20379.,  20721.,  21063.,
      15708.,  15960.,  8817.,   8955.,   5697.,   5787.,   13272.,  13476.,
      22773.,  23115.,  23457.,  23799.,  24141.,  24483.,  24825.,  25167.,
      25509.,  25851.,  19236.,  19488.,  10749.,  10887.,  6364.,   6448.,
      14140.,  14324.,  23360.,  23660.,  23960.,  24260.,  24560.,  24860.,
      25160.,  25460.,  25760.,  26060.,  18820.,  19036.,  10244.,  10360.,
      4577.,   4631.,   9940.,   10056.,  16105.,  16291.,  16477.,  16663.,
      16849.,  17035.,  17221.,  17407.,  17593.,  17779.,  12632.,  12764.,
      6773.,   6843.,   59.,     137.,    280.,    444.,    679.,    937.,
      1195.,   1453.,   1711.,   1969.,   2227.,   2485.,   2743.,   3001.,
      2108.,   2288.,   1199.,   1293.,   1228.,   1408.,   2940.,   3316.,
      5168.,   5756.,   6344.,   6932.,   7520.,   8108.,   8696.,   9284.,
      9872.,   10460.,  7300.,   7708.,   4020.,   4232.,   3843.,   4149.,
      8652.,   9288.,   14475.,  15465.,  16455.,  17445.,  18435.,  19425.,
      20415.,  21405.,  22395.,  23385.,  16248.,  16932.,  8799.,   9153.,
      8127.,   8433.,   17556.,  18192.,  28335.,  29325.,  30315.,  31305.,
      32295.,  33285.,  34275.,  35265.,  36255.,  37245.,  25824.,  26508.,
      13755.,  14109.,  12411.,  12717.,  26460.,  27096.,  42195.,  43185.,
      44175.,  45165.,  46155.,  47145.,  48135.,  49125.,  50115.,  51105.,
      35400.,  36084.,  18711.,  19065.,  16695.,  17001.,  35364.,  36000.,
      56055.,  57045.,  58035.,  59025.,  60015.,  61005.,  61995.,  62985.,
      63975.,  64965.,  44976.,  45660.,  23667.,  24021.,  20979.,  21285.,
      44268.,  44904.,  69915.,  70905.,  71895.,  72885.,  73875.,  74865.,
      75855.,  76845.,  77835.,  78825.,  54552.,  55236.,  28623.,  28977.,
      17560.,  17788.,  36820.,  37292.,  57812.,  58544.,  59276.,  60008.,
      60740.,  61472.,  62204.,  62936.,  63668.,  64400.,  44380.,  44884.,
      23168.,  23428.,  10679.,  10805.,  22288.,  22548.,  34843.,  35245.,
      35647.,  36049.,  36451.,  36853.,  37255.,  37657.,  38059.,  38461.,
      26420.,  26696.,  13739.,  13881.,  113.,    263.,    532.,    840.,
      1273.,   1747.,   2221.,   2695.,   3169.,   3643.,   4117.,   4591.,
      5065.,   5539.,   3800.,   4124.,   2117.,   2283.,   2344.,   2668.,
      5460.,   6124.,   9380.,   10400.,  11420.,  12440.,  13460.,  14480.,
      15500.,  16520.,  17540.,  18560.,  12700.,  13396.,  6864.,   7220.,
      7029.,   7551.,   15456.,  16524.,  25329.,  26967.,  28605.,  30243.,
      31881.,  33519.,  35157.,  36795.,  38433.,  40071.,  27372.,  28488.,
      14577.,  15147.,  14337.,  14859.,  30408.,  31476.,  48261.,  49899.,
      51537.,  53175.,  54813.,  56451.,  58089.,  59727.,  61365.,  63003.,
      42996.,  44112.,  22557.,  23127.,  21645.,  22167.,  45360.,  46428.,
      71193.,  72831.,  74469.,  76107.,  77745.,  79383.,  81021.,  82659.,
      84297.,  85935.,  58620.,  59736.,  30537.,  31107.,  28953.,  29475.,
      60312.,  61380.,  94125.,  95763.,  97401.,  99039.,  100677., 102315.,
      103953., 105591., 107229., 108867., 74244.,  75360.,  38517.,  39087.,
      36261.,  36783.,  75264.,  76332.,  117057., 118695., 120333., 121971.,
      123609., 125247., 126885., 128523., 130161., 131799., 89868.,  90984.,
      46497.,  47067.,  28756.,  29128.,  59500.,  60260.,  92264.,  93428.,
      94592.,  95756.,  96920.,  98084.,  99248.,  100412., 101576., 102740.,
      69940.,  70732.,  36092.,  36496.,  16781.,  16979.,  34636.,  35040.,
      53581.,  54199.,  54817.,  55435.,  56053.,  56671.,  57289.,  57907.,
      58525.,  59143.,  40208.,  40628.,  20705.,  20919.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,   246240.,   322280.,   342920.,   429136.,   454672.,
      551320.,   582008.,   600824.,   633304.,   650328.,   684600.,
      612112.,   642256.,   556520.,   582280.,   483040.,   504160.,
      489000.,   514760.,   667150.,   700150.,   868940.,   909500.,
      1095010.,  1143450.,  1172570.,  1223250.,  1250130.,  1303050.,
      1155260.,  1201580.,  1033550.,  1072950.,  884360.,   916520.,
      892752.,   930576.,   1198380.,  1246620.,  1538520.,  1597560.,
      1913940.,  1984164.,  2025828.,  2098740.,  2137716.,  2213316.,
      1951224.,  2017176.,  1726380.,  1782300.,  1462416.,  1507920.,
      1473752.,  1525944.,  1956290.,  2022650.,  2486260.,  2567236.,
      3064558.,  3160598.,  3217046.,  3316222.,  3369534.,  3471846.,
      3048388.,  3137428.,  2675330.,  2750650.,  2249464.,  2310616.,
      2209592.,  2277912.,  2896250.,  2982770.,  3638404.,  3743572.,
      4436950.,  4561214.,  4589438.,  4716838.,  4741926.,  4872462.,
      4248916.,  4362148.,  3695930.,  3791410.,  3082072.,  3159352.,
      2945432.,  3029880.,  3836210.,  3942890.,  4790548.,  4919908.,
      5809342.,  5961830.,  5961830.,  6117454.,  6114318.,  6273078.,
      5449444.,  5586868.,  4716530.,  4832170.,  3914680.,  4008088.,
      3604752.,  3684048.,  4653660.,  4753740.,  5763192.,  5884440.,
      6934116.,  7076916.,  7083636.,  7229124.,  7233156.,  7381332.,
      6397080.,  6525240.,  5496540.,  5604300.,  4530768.,  4617744.,
      3957800.,  4029640.,  5083150.,  5173750.,  6264140.,  6373820.,
      7501410.,  7630490.,  7641690.,  7773010.,  7781970.,  7915530.,
      6849980.,  6965420.,  5859150.,  5956150.,  4808840.,  4887080.,
      3972320.,  4034400.,  5084360.,  5162600.,  6245008.,  6339664.,
      7454776.,  7566104.,  7579544.,  7692664.,  7704312.,  7819224.,
      6759760.,  6859024.,  5764040.,  5847400.,  4716640.,  4783840.,
      2272736.,  2371680.,  2979080.,  3103400.,  3741712.,  3891664.,
      4561144.,  4736984.,  4610648.,  4788280.,  4660152.,  4839576.,
      4173520.,  4328080.,  3628040.,  3757480.,  3023200.,  3127264.,
      3767880.,  3897320.,  4895350.,  5057950.,  6098300.,  6294380.,
      7377370.,  7607250.,  7454930.,  7687050.,  7532490.,  7766850.,
      6695660.,  6897500.,  5780150.,  5949150.,  4785320.,  4921160.,
      5671696.,  5817552.,  7296348.,  7475532.,  9001336.,  9214232.,
      10787428., 11034420., 10812276., 11053764., 10820740., 11056724.,
      9531288.,  9734712.,  8157660.,  8328140.,  6699088.,  6836240.,
      7721528.,  7869720.,  9817914.,  10000178., 12001540., 12218324.,
      14273302., 14525054., 14224062., 14470758., 14158438., 14400078.,
      12415444., 12623908., 10580730., 10755570., 8653400.,  8794168.,
      7650456.,  7782008.,  9650930.,  9812394.,  11730324., 11922148.,
      13889534., 14112166., 13725606., 13943182., 13545294., 13757814.,
      11864932., 12048436., 10101170., 10255210., 8253112.,  8377240.,
      7120632.,  7235544.,  8910506.,  9051170.,  10770980., 10937844.,
      12702950., 12896462., 12424334., 12612790., 12129334., 12312734.,
      10626292., 10784836., 9048170.,  9181410.,  7394072.,  7501560.,
      6099152.,  6188176.,  7543692.,  7651836.,  9045528.,  9173176.,
      10605428., 10752964., 10209156., 10351188., 9796500.,  9933028.,
      8584248.,  8702424.,  7310860.,  7410300.,  5975568.,  6055888.,
      4481096.,  4541928.,  5426038.,  5498782.,  6412924.,  6497900.,
      7442394.,  7539922.,  6922194.,  7013770.,  6385610.,  6471234.,
      5612012.,  5686364.,  4793270.,  4856030.,  3928744.,  3979592.,
      2234208.,  2264544.,  2517224.,  2551688.,  2824784.,  2863632.,
      3157400.,  3200888.,  2507000.,  2544088.,  1840216.,  1870904.,
      1661200.,  1688272.,  1455080.,  1478280.,  1221344.,  1240416.,
      1087584.,  1138400.,  1437480.,  1501640.,  1819600.,  1897360.,
      2234456.,  2326072.,  2283960.,  2377368.,  2333464.,  2428664.,
      2107024.,  2189392.,  1845800.,  1915080.,  1549280.,  1605216.,
      1865320.,  1934600.,  2441950.,  2529350.,  3063980.,  3169820.,
      3732050.,  3856650.,  3809610.,  3936450.,  3887170.,  4016250.,
      3480860.,  3592460.,  3025950.,  3119750.,  2521800.,  2597480.,
      2909904.,  2999952.,  3785100.,  3898620.,  4720920.,  4858296.,
      5718132.,  5879748.,  5830020.,  5994324.,  5941908.,  6108900.,
      5290296.,  5434584.,  4574220.,  4695420.,  3792912.,  3890640.,
      4253592.,  4366712.,  5507250.,  5649770.,  6838804.,  7011172.,
      8249150.,  8451814.,  8401638.,  8607438.,  8554126.,  8763062.,
      7583716.,  7764148.,  6530930.,  6682410.,  5394872.,  5516952.,
      4989432.,  5118680.,  6447210.,  6609890.,  7990948.,  8187508.,
      9621542.,  9852430.,  9774030.,  10008054., 9926518.,  10163678.,
      8784244.,  8988868.,  7551530.,  7723170.,  6227480.,  6365688.,
      5725272.,  5870648.,  7387170.,  7570010.,  9143092.,  9363844.,
      10993934., 11253046., 11146422., 11408670., 11298910., 11564294.,
      9984772.,  10213588., 8572130.,  8763930.,  7060088.,  7214424.,
      6353040.,  6484560.,  8154300.,  8319660.,  10042296., 10241880.,
      12017796., 12251988., 12167316., 12404196., 12316836., 12556404.,
      10832856., 11039352., 9258300.,  9431340.,  7592400.,  7731600.,
      6552680.,  6668040.,  8381150.,  8526150.,  10287020., 10461980.,
      12270930., 12476170., 12411210., 12618690., 12551490., 12761210.,
      11003420., 11184140., 9374750.,  9526150.,  7664840.,  7786600.,
      6291936.,  6388832.,  8027400.,  8149160.,  9828880.,  9975760.,
      11696888., 11869144., 11821656., 11995704., 11946424., 12122264.,
      10448080., 10599568., 8881160.,  9008040.,  7245152.,  7347168.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,      180.,     324.,     578.,     890.,    1202.,
      1514.,   1826.,    2138.,    2450.,    2762.,    3074.,   3386.,
      3108.,   3380.,    2126.,    2294.,    740.,     1012.,   3000.,
      3672.,   7036.,    8236.,    9436.,    10636.,   11836.,  13036.,
      14236.,  15436.,   16636.,   17836.,   14488.,   15416.,  9028.,
      9556.,   4818.,    5514.,    13836.,   15420.,   27438.,  30102.,
      32766.,  35430.,   38094.,   40758.,   43422.,   46086.,  48750.,
      51414.,  39516.,   41484.,   23394.,   24474.,   14562.,  15258.,
      36012.,  37596.,   64734.,   67398.,   70062.,   72726.,  75390.,
      78054.,  80718.,   83382.,   86046.,   88710.,   67068.,  69036.,
      38514.,  39594.,   24306.,   25002.,   58188.,   59772.,  102030.,
      104694., 107358.,  110022.,  112686.,  115350.,  118014., 120678.,
      123342., 126006.,  94620.,   96588.,   53634.,   54714.,  34050.,
      34746.,  80364.,   81948.,   139326.,  141990.,  144654., 147318.,
      149982., 152646.,  155310.,  157974.,  160638.,  163302., 122172.,
      124140., 68754.,   69834.,   43794.,   44490.,   102540., 104124.,
      176622., 179286.,  181950.,  184614.,  187278.,  189942., 192606.,
      195270., 197934.,  200598.,  149724.,  151692.,  83874.,  84954.,
      49588.,  50244.,   110424.,  111864.,  182764.,  185116., 187468.,
      189820., 192172.,  194524.,  196876.,  199228.,  201580., 203932.,
      147512., 149208.,  80404.,   81316.,   35886.,   36310.,  78036.,
      78948.,  126578.,  128042.,  129506.,  130970.,  132434., 133898.,
      135362., 136826.,  138290.,  139754.,  99396.,   100436., 53342.,
      53894.,  390.,     1006.,    2052.,    3348.,    5114.,   7154.,
      9194.,   11234.,   13274.,   15314.,   17354.,   19394.,  21434.,
      23474.,  16500.,   17924.,   9398.,    10142.,   9524.,   10948.,
      22872.,  25848.,   40300.,   44956.,   49612.,   54268.,  58924.,
      63580.,  68236.,   72892.,   77548.,   82204.,   57400.,  60632.,
      31636.,  33316.,   30090.,   32514.,   67836.,   72876.,  113622.,
      121470., 129318.,  137166.,  145014.,  152862.,  160710., 168558.,
      176406., 184254.,  128076.,  133500.,  69402.,   72210.,  64026.,
      66450.,  138396.,  143436.,  223494.,  231342.,  239190., 247038.,
      254886., 262734.,  270582.,  278430.,  286278.,  294126., 204012.,
      209436., 108714.,  111522.,  97962.,   100386.,  208956., 213996.,
      333366., 341214.,  349062.,  356910.,  364758.,  372606., 380454.,
      388302., 396150.,  403998.,  279948.,  285372.,  148026., 150834.,
      131898., 134322.,  279516.,  284556.,  443238.,  451086., 458934.,
      466782., 474630.,  482478.,  490326.,  498174.,  506022., 513870.,
      355884., 361308.,  187338.,  190146.,  165834.,  168258., 350076.,
      355116., 553110.,  560958.,  568806.,  576654.,  584502., 592350.,
      600198., 608046.,  615894.,  623742.,  431820.,  437244., 226650.,
      229458., 139012.,  140820.,  291576.,  295320.,  457948., 463756.,
      469564., 475372.,  481180.,  486988.,  492796.,  498604., 504412.,
      510220., 351704.,  355704.,  183652.,  185716.,  84630.,  85630.,
      176676., 178740.,  276266.,  279458.,  282650.,  285842., 289034.,
      292226., 295418.,  298610.,  301802.,  304994.,  209556., 211748.,
      108998., 110126.,  750.,     1942.,    3924.,    6372.,   9650.,
      13418.,  17186.,   20954.,   24722.,   28490.,   32258.,  36026.,
      39794.,  43562.,   29892.,   32468.,   16670.,   17990.,  18308.,
      20884.,  42744.,   48024.,   73564.,   81676.,   89788.,  97900.,
      106012., 114124.,  122236.,  130348.,  138460.,  146572., 100312.,
      105848., 54244.,   57076.,   55362.,   59514.,   121836., 130332.,
      199806., 212838.,  225870.,  238902.,  251934.,  264966., 277998.,
      291030., 304062.,  317094.,  216636.,  225516.,  115410., 119946.,
      113490., 117642.,  240780.,  249276.,  382254.,  395286., 408318.,
      421350., 434382.,  447414.,  460446.,  473478.,  486510., 499542.,
      340956., 349836.,  178914.,  183450.,  171618.,  175770., 359724.,
      368220., 564702.,  577734.,  590766.,  603798.,  616830., 629862.,
      642894., 655926.,  668958.,  681990.,  465276.,  474156., 242418.,
      246954., 229746.,  233898.,  478668.,  487164.,  747150., 760182.,
      773214., 786246.,  799278.,  812310.,  825342.,  838374., 851406.,
      864438., 589596.,  598476.,  305922.,  310458.,  287874., 292026.,
      597612., 606108.,  929598.,  942630.,  955662.,  968694., 981726.,
      994758., 1007790., 1020822., 1033854., 1046886., 713916., 722796.,
      369426., 373962.,  228436.,  231396.,  472728.,  478776., 733132.,
      742396., 751660.,  760924.,  770188.,  779452.,  788716., 797980.,
      807244., 816508.,  555896.,  562200.,  286900.,  290116., 133374.,
      134950., 275316.,  278532.,  425954.,  430874.,  435794., 440714.,
      445634., 450554.,  455474.,  460394.,  465314.,  470234., 319716.,
      323060., 164654.,  166358.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,   7680.,   7936.,   8192.,    10370.,  10700.,  11030.,   11360.,
      13784.,  14192.,  14600.,  15008.,   17682.,  18172.,  18662.,   19152.,
      19222.,  19740.,  20258.,  20776.,   20762.,  21308.,  21854.,   22400.,
      19520.,  20000.,  20480.,  20960.,   17730.,  18140.,  18550.,   18960.,
      15376.,  15712.,  16048.,  16384.,   15650.,  16060.,  16470.,   16880.,
      21325.,  21850.,  22375.,  22900.,   27745.,  28390.,  29035.,   29680.,
      34930.,  35700.,  36470.,  37240.,   37345.,  38150.,  38955.,   39760.,
      39760.,  40600.,  41440.,  42280.,   36715.,  37450.,  38185.,   38920.,
      32825.,  33450.,  34075.,  34700.,   28070.,  28580.,  29090.,   29600.,
      28440.,  29040.,  29640.,  30240.,   38145.,  38910.,  39675.,   40440.,
      48936.,  49872.,  50808.,  51744.,   60837.,  61950.,  63063.,   64176.,
      64323.,  65478.,  66633.,  67788.,   67809.,  69006.,  70203.,   71400.,
      61860.,  62904.,  63948.,  64992.,   54705.,  55590.,  56475.,   57360.,
      46320.,  47040.,  47760.,  48480.,   46802.,  47628.,  48454.,   49280.,
      62090.,  63140.,  64190.,  65240.,   78869.,  80150.,  81431.,   82712.,
      97167.,  98686.,  100205., 101724.,  101920., 103488., 105056.,  106624.,
      106673., 108290., 109907., 111524.,  96467.,  97874.,  99281.,   100688.,
      84630.,  85820.,  87010.,  88200.,   71134.,  72100.,  73066.,   74032.,
      69734.,  70812.,  71890.,  72968.,   91385.,  92750.,  94115.,   95480.,
      114779., 116438., 118097., 119756.,  139944., 141904., 143864.,  145824.,
      144697., 146706., 148715., 150724.,  149450., 151508., 153566.,  155624.,
      133889., 135674., 137459., 139244.,  116445., 117950., 119455.,  120960.,
      97090.,  98308.,  99526.,  100744.,  92666.,  93996.,  95326.,   96656.,
      120680., 122360., 124040., 125720.,  150689., 152726., 154763.,  156800.,
      182721., 185122., 187523., 189924.,  187474., 189924., 192374.,  194824.,
      192227., 194726., 197225., 199724.,  171311., 173474., 175637.,  177800.,
      148260., 150080., 151900., 153720.,  123046., 124516., 125986.,  127456.,
      113280., 114528., 115776., 117024.,  146235., 147810., 149385.,  150960.,
      181092., 183000., 184908., 186816.,  217875., 220122., 222369.,  224616.,
      222537., 224826., 227115., 229404.,  227199., 229530., 231861.,  234192.,
      200928., 202944., 204960., 206976.,  172635., 174330., 176025.,  177720.,
      142296., 143664., 145032., 146400.,  124290., 125420., 126550.,  127680.,
      159625., 161050., 162475., 163900.,  196705., 198430., 200155.,  201880.,
      235550., 237580., 239610., 241640.,  239925., 241990., 244055.,  246120.,
      244300., 246400., 248500., 250600.,  215035., 216850., 218665.,  220480.,
      183925., 185450., 186975., 188500.,  150950., 152180., 153410.,  154640.,
      124688., 125664., 126640., 127616.,  159590., 160820., 162050.,  163280.,
      196016., 197504., 198992., 200480.,  233982., 235732., 237482.,  239232.,
      237874., 239652., 241430., 243208.,  241766., 243572., 245378.,  247184.,
      212120., 213680., 215240., 216800.,  180870., 182180., 183490.,  184800.,
      148000., 149056., 150112., 151168.,  70928.,  72480.,  74032.,   75584.,
      92990.,  94940.,  96890.,  98840.,   116816., 119168., 121520.,  123872.,
      142422., 145180., 147938., 150696.,  143962., 146748., 149534.,  152320.,
      145502., 148316., 151130., 153944.,  130328., 132752., 135176.,  137600.,
      113310., 115340., 117370., 119400.,  94432.,  96064.,  97696.,   99328.,
      117710., 119740., 121770., 123800.,  152950., 155500., 158050.,  160600.,
      190555., 193630., 196705., 199780.,  230545., 234150., 237755.,  241360.,
      232960., 236600., 240240., 243880.,  235375., 239050., 242725.,  246400.,
      209245., 212410., 215575., 218740.,  180650., 183300., 185950.,  188600.,
      149570., 151700., 153830., 155960.,  178128., 180672., 183216.,  185760.,
      230115., 233310., 236505., 239700.,  285132., 288984., 292836.,  296688.,
      343203., 347718., 352233., 356748.,  346689., 351246., 355803.,  360360.,
      350175., 354774., 359373., 363972.,  309720., 313680., 317640.,  321600.,
      266115., 269430., 272745., 276060.,  219336., 222000., 224664.,  227328.,
      253190., 256284., 259378., 262472.,  325745., 329630., 333515.,  337400.,
      402059., 406742., 411425., 416108.,  482160., 487648., 493136.,  498624.,
      486913., 492450., 497987., 503524.,  491666., 497252., 502838.,  508424.,
      433265., 438074., 442883., 447692.,  370965., 374990., 379015.,  383040.,
      304738., 307972., 311206., 314440.,  276122., 279468., 282814.,  286160.,
      355040., 359240., 363440., 367640.,  437969., 443030., 448091.,  453152.,
      524937., 530866., 536795., 542724.,  529690., 535668., 541646.,  547624.,
      534443., 540470., 546497., 552524.,  470687., 475874., 481061.,  486248.,
      402780., 407120., 411460., 415800.,  330694., 334180., 337666.,  341152.,
      299054., 302652., 306250., 309848.,  384335., 388850., 393365.,  397880.,
      473879., 479318., 484757., 490196.,  567714., 574084., 580454.,  586824.,
      572467., 578886., 585305., 591724.,  577220., 583688., 590156.,  596624.,
      508109., 513674., 519239., 524804.,  434595., 439250., 443905.,  448560.,
      356650., 360388., 364126., 367864.,  317400., 320592., 323784.,  326976.,
      406245., 410250., 414255., 418260.,  498936., 503760., 508584.,  513408.,
      595497., 601146., 606795., 612444.,  600159., 605850., 611541.,  617232.,
      604821., 610554., 616287., 622020.,  530436., 535368., 540300.,  545232.,
      452085., 456210., 460335., 464460.,  369744., 373056., 376368.,  379680.,
      317070., 319820., 322570., 325320.,  404650., 408100., 411550.,  415000.,
      495595., 499750., 503905., 508060.,  589925., 594790., 599655.,  604520.,
      594300., 599200., 604100., 609000.,  598675., 603610., 608545.,  613480.,
      523645., 527890., 532135., 536380.,  445150., 448700., 452250.,  455800.,
      363170., 366020., 368870., 371720.,  297056., 299328., 301600.,  303872.,
      378290., 381140., 383990., 386840.,  462344., 465776., 469208.,  472640.,
      549234., 553252., 557270., 561288.,  553126., 557172., 561218.,  565264.,
      557018., 561092., 565166., 569240.,  486224., 489728., 493232.,  496736.,
      412530., 415460., 418390., 421320.,  335920., 338272., 340624.,  342976.,
      134432., 137280., 140128., 142976.,  175610., 179180., 182750.,  186320.,
      219848., 224144., 228440., 232736.,  267162., 272188., 277214.,  282240.,
      268702., 273756., 278810., 283864.,  270242., 275324., 280406.,  285488.,
      241136., 245504., 249872., 254240.,  208890., 212540., 216190.,  219840.,
      173488., 176416., 179344., 182272.,  219770., 223420., 227070.,  230720.,
      284575., 289150., 293725., 298300.,  353365., 358870., 364375.,  369880.,
      426160., 432600., 439040., 445480.,  428575., 435050., 441525.,  448000.,
      430990., 437500., 444010., 450520.,  381775., 387370., 392965.,  398560.,
      328475., 333150., 337825., 342500.,  271070., 274820., 278570.,  282320.,
      327816., 332304., 336792., 341280.,  422085., 427710., 433335.,  438960.,
      521328., 528096., 534864., 541632.,  625569., 633486., 641403.,  649320.,
      629055., 637014., 644973., 652932.,  632541., 640542., 648543.,  656544.,
      557580., 564456., 571332., 578208.,  477525., 483270., 489015.,  494760.,
      392352., 396960., 401568., 406176.,  459578., 464940., 470302.,  475664.,
      589400., 596120., 602840., 609560.,  725249., 733334., 741419.,  749504.,
      867153., 876610., 886067., 895524.,  871906., 881412., 890918.,  900424.,
      876659., 886214., 895769., 905324.,  770063., 778274., 786485.,  794696.,
      657300., 664160., 671020., 677880.,  538342., 543844., 549346.,  554848.,
      482510., 488124., 493738., 499352.,  618695., 625730., 632765.,  639800.,
      761159., 769622., 778085., 786548.,  909930., 919828., 929726.,  939624.,
      914683., 924630., 934577., 944524.,  919436., 929432., 939428.,  949424.,
      807485., 816074., 824663., 833252.,  689115., 696290., 703465.,  710640.,
      564298., 570052., 575806., 581560.,  505442., 511308., 517174.,  523040.,
      647990., 655340., 662690., 670040.,  797069., 805910., 814751.,  823592.,
      952707., 963046., 973385., 983724.,  957460., 967848., 978236.,  988624.,
      962213., 972650., 983087., 993524.,  844907., 853874., 862841.,  871808.,
      720930., 728420., 735910., 743400.,  590254., 596260., 602266.,  608272.,
      521520., 526656., 531792., 536928.,  666255., 672690., 679125.,  685560.,
      816780., 824520., 832260., 840000.,  973119., 982170., 991221.,  1000272.,
      977781., 986874., 995967., 1005060., 982443., 991578., 1000713., 1009848.,
      859944., 867792., 875640., 883488.,  731535., 738090., 744645.,  751200.,
      597192., 602448., 607704., 612960.,  509850., 514220., 518590.,  522960.,
      649675., 655150., 660625., 666100.,  794485., 801070., 807655.,  814240.,
      944300., 952000., 959700., 967400.,  948675., 956410., 964145.,  971880.,
      953050., 960820., 968590., 976360.,  832255., 838930., 845605.,  852280.,
      706375., 711950., 717525., 723100.,  575390., 579860., 584330.,  588800.,
      469424., 472992., 476560., 480128.,  596990., 601460., 605930.,  610400.,
      728672., 734048., 739424., 744800.,  864486., 870772., 877058.,  883344.,
      868378., 874692., 881006., 887320.,  872270., 878612., 884954.,  891296.,
      760328., 765776., 771224., 776672.,  644190., 648740., 653290.,  657840.,
      523840., 527488., 531136., 534784.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,
      82.,    88.,    94.,    100.,   106.,   112.,   118.,   124.,   130.,
      136.,   113.,   118.,   123.,   128.,   75.,    78.,    81.,    84.,
      33.,    38.,    43.,    48.,    116.,   128.,   140.,   152.,   257.,
      278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,
      467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,
      656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,
      180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,
      1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,
      1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,
      1812.,  1341.,  1374.,  1407.,  1440.,  786.,   804.,   822.,   840.,
      516.,   528.,   540.,   552.,   1251.,  1278.,  1305.,  1332.,  2217.,
      2262.,  2307.,  2352.,  2397.,  2442.,  2487.,  2532.,  2577.,  2622.,
      2667.,  2712.,  2757.,  2802.,  2847.,  2892.,  2937.,  2982.,  3027.,
      3072.,  2265.,  2298.,  2331.,  2364.,  1290.,  1308.,  1326.,  1344.,
      852.,   864.,   876.,   888.,   2007.,  2034.,  2061.,  2088.,  3477.,
      3522.,  3567.,  3612.,  3657.,  3702.,  3747.,  3792.,  3837.,  3882.,
      3927.,  3972.,  4017.,  4062.,  4107.,  4152.,  4197.,  4242.,  4287.,
      4332.,  3189.,  3222.,  3255.,  3288.,  1794.,  1812.,  1830.,  1848.,
      1188.,  1200.,  1212.,  1224.,  2763.,  2790.,  2817.,  2844.,  4737.,
      4782.,  4827.,  4872.,  4917.,  4962.,  5007.,  5052.,  5097.,  5142.,
      5187.,  5232.,  5277.,  5322.,  5367.,  5412.,  5457.,  5502.,  5547.,
      5592.,  4113.,  4146.,  4179.,  4212.,  2298.,  2316.,  2334.,  2352.,
      1524.,  1536.,  1548.,  1560.,  3519.,  3546.,  3573.,  3600.,  5997.,
      6042.,  6087.,  6132.,  6177.,  6222.,  6267.,  6312.,  6357.,  6402.,
      6447.,  6492.,  6537.,  6582.,  6627.,  6672.,  6717.,  6762.,  6807.,
      6852.,  5037.,  5070.,  5103.,  5136.,  2802.,  2820.,  2838.,  2856.,
      1663.,  1674.,  1685.,  1696.,  3680.,  3704.,  3728.,  3752.,  6059.,
      6098.,  6137.,  6176.,  6215.,  6254.,  6293.,  6332.,  6371.,  6410.,
      6449.,  6488.,  6527.,  6566.,  6605.,  6644.,  6683.,  6722.,  6761.,
      6800.,  4868.,  4896.,  4924.,  4952.,  2643.,  2658.,  2673.,  2688.,
      1183.,  1190.,  1197.,  1204.,  2563.,  2578.,  2593.,  2608.,  4144.,
      4168.,  4192.,  4216.,  4240.,  4264.,  4288.,  4312.,  4336.,  4360.,
      4384.,  4408.,  4432.,  4456.,  4480.,  4504.,  4528.,  4552.,  4576.,
      4600.,  3245.,  3262.,  3279.,  3296.,  1737.,  1746.,  1755.,  1764.,
      10.,    20.,    30.,    40.,    61.,    82.,    103.,   124.,   157.,
      190.,   223.,   256.,   289.,   322.,   355.,   388.,   421.,   454.,
      487.,   520.,   553.,   586.,   619.,   652.,   685.,   718.,   751.,
      784.,   527.,   550.,   573.,   596.,   300.,   312.,   324.,   336.,
      303.,   326.,   349.,   372.,   728.,   776.,   824.,   872.,   1283.,
      1358.,  1433.,  1508.,  1583.,  1658.,  1733.,  1808.,  1883.,  1958.,
      2033.,  2108.,  2183.,  2258.,  2333.,  2408.,  2483.,  2558.,  2633.,
      2708.,  1836.,  1888.,  1940.,  1992.,  1011.,  1038.,  1065.,  1092.,
      963.,   1002.,  1041.,  1080.,  2169.,  2250.,  2331.,  2412.,  3630.,
      3756.,  3882.,  4008.,  4134.,  4260.,  4386.,  4512.,  4638.,  4764.,
      4890.,  5016.,  5142.,  5268.,  5394.,  5520.,  5646.,  5772.,  5898.,
      6024.,  4095.,  4182.,  4269.,  4356.,  2217.,  2262.,  2307.,  2352.,
      2055.,  2094.,  2133.,  2172.,  4437.,  4518.,  4599.,  4680.,  7158.,
      7284.,  7410.,  7536.,  7662.,  7788.,  7914.,  8040.,  8166.,  8292.,
      8418.,  8544.,  8670.,  8796.,  8922.,  9048.,  9174.,  9300.,  9426.,
      9552.,  6531.,  6618.,  6705.,  6792.,  3477.,  3522.,  3567.,  3612.,
      3147.,  3186.,  3225.,  3264.,  6705.,  6786.,  6867.,  6948.,  10686.,
      10812., 10938., 11064., 11190., 11316., 11442., 11568., 11694., 11820.,
      11946., 12072., 12198., 12324., 12450., 12576., 12702., 12828., 12954.,
      13080., 8967.,  9054.,  9141.,  9228.,  4737.,  4782.,  4827.,  4872.,
      4239.,  4278.,  4317.,  4356.,  8973.,  9054.,  9135.,  9216.,  14214.,
      14340., 14466., 14592., 14718., 14844., 14970., 15096., 15222., 15348.,
      15474., 15600., 15726., 15852., 15978., 16104., 16230., 16356., 16482.,
      16608., 11403., 11490., 11577., 11664., 5997.,  6042.,  6087.,  6132.,
      5331.,  5370.,  5409.,  5448.,  11241., 11322., 11403., 11484., 17742.,
      17868., 17994., 18120., 18246., 18372., 18498., 18624., 18750., 18876.,
      19002., 19128., 19254., 19380., 19506., 19632., 19758., 19884., 20010.,
      20136., 13839., 13926., 14013., 14100., 7257.,  7302.,  7347.,  7392.,
      4453.,  4482.,  4511.,  4540.,  9332.,  9392.,  9452.,  9512.,  14645.,
      14738., 14831., 14924., 15017., 15110., 15203., 15296., 15389., 15482.,
      15575., 15668., 15761., 15854., 15947., 16040., 16133., 16226., 16319.,
      16412., 11240., 11304., 11368., 11432., 5865.,  5898.,  5931.,  5964.,
      2704.,  2720.,  2736.,  2752.,  5641.,  5674.,  5707.,  5740.,  8815.,
      8866.,  8917.,  8968.,  9019.,  9070.,  9121.,  9172.,  9223.,  9274.,
      9325.,  9376.,  9427.,  9478.,  9529.,  9580.,  9631.,  9682.,  9733.,
      9784.,  6683.,  6718.,  6753.,  6788.,  3474.,  3492.,  3510.,  3528.,
      19.,    38.,    57.,    76.,    115.,   154.,   193.,   232.,   292.,
      352.,   412.,   472.,   532.,   592.,   652.,   712.,   772.,   832.,
      892.,   952.,   1012.,  1072.,  1132.,  1192.,  1252.,  1312.,  1372.,
      1432.,  941.,   982.,   1023.,  1064.,  525.,   546.,   567.,   588.,
      573.,   614.,   655.,   696.,   1340.,  1424.,  1508.,  1592.,  2309.,
      2438.,  2567.,  2696.,  2825.,  2954.,  3083.,  3212.,  3341.,  3470.,
      3599.,  3728.,  3857.,  3986.,  4115.,  4244.,  4373.,  4502.,  4631.,
      4760.,  3168.,  3256.,  3344.,  3432.,  1713.,  1758.,  1803.,  1848.,
      1746.,  1812.,  1878.,  1944.,  3843.,  3978.,  4113.,  4248.,  6303.,
      6510.,  6717.,  6924.,  7131.,  7338.,  7545.,  7752.,  7959.,  8166.,
      8373.,  8580.,  8787.,  8994.,  9201.,  9408.,  9615.,  9822.,  10029.,
      10236., 6849.,  6990.,  7131.,  7272.,  3648.,  3720.,  3792.,  3864.,
      3594.,  3660.,  3726.,  3792.,  7623.,  7758.,  7893.,  8028.,  12099.,
      12306., 12513., 12720., 12927., 13134., 13341., 13548., 13755., 13962.,
      14169., 14376., 14583., 14790., 14997., 15204., 15411., 15618., 15825.,
      16032., 10797., 10938., 11079., 11220., 5664.,  5736.,  5808.,  5880.,
      5442.,  5508.,  5574.,  5640.,  11403., 11538., 11673., 11808., 17895.,
      18102., 18309., 18516., 18723., 18930., 19137., 19344., 19551., 19758.,
      19965., 20172., 20379., 20586., 20793., 21000., 21207., 21414., 21621.,
      21828., 14745., 14886., 15027., 15168., 7680.,  7752.,  7824.,  7896.,
      7290.,  7356.,  7422.,  7488.,  15183., 15318., 15453., 15588., 23691.,
      23898., 24105., 24312., 24519., 24726., 24933., 25140., 25347., 25554.,
      25761., 25968., 26175., 26382., 26589., 26796., 27003., 27210., 27417.,
      27624., 18693., 18834., 18975., 19116., 9696.,  9768.,  9840.,  9912.,
      9138.,  9204.,  9270.,  9336.,  18963., 19098., 19233., 19368., 29487.,
      29694., 29901., 30108., 30315., 30522., 30729., 30936., 31143., 31350.,
      31557., 31764., 31971., 32178., 32385., 32592., 32799., 33006., 33213.,
      33420., 22641., 22782., 22923., 23064., 11712., 11784., 11856., 11928.,
      7243.,  7290.,  7337.,  7384.,  14984., 15080., 15176., 15272., 23231.,
      23378., 23525., 23672., 23819., 23966., 24113., 24260., 24407., 24554.,
      24701., 24848., 24995., 25142., 25289., 25436., 25583., 25730., 25877.,
      26024., 17612., 17712., 17812., 17912., 9087.,  9138.,  9189.,  9240.,
      4225.,  4250.,  4275.,  4300.,  8719.,  8770.,  8821.,  8872.,  13486.,
      13564., 13642., 13720., 13798., 13876., 13954., 14032., 14110., 14188.,
      14266., 14344., 14422., 14500., 14578., 14656., 14734., 14812., 14890.,
      14968., 10121., 10174., 10227., 10280., 5211.,  5238.,  5265.,  5292.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  733600.,  744184.,
      754768.,  765352.,  955605.,  968975.,  982345.,  995715.,  1193500.,
      1209712., 1225924., 1242136., 1447509., 1466619., 1485729., 1504839.,
      1485435., 1504937., 1524439., 1543941., 1523361., 1543255., 1563149.,
      1583043., 1357888., 1375108., 1392328., 1409548., 1175405., 1189895.,
      1204385., 1218875., 975688.,  987392.,  999096.,  1010800., 898728.,
      908664.,  918600.,  928536.,  1160340., 1172880., 1185420., 1197960.,
      1437108., 1452300., 1467492., 1482684., 1729224., 1747116., 1765008.,
      1782900., 1766436., 1784664., 1802892., 1821120., 1803648., 1822212.,
      1840776., 1859340., 1595292., 1611348., 1627404., 1643460., 1370820.,
      1384320., 1397820., 1411320., 1130040., 1140936., 1151832., 1162728.,
      987320.,  996320.,  1005320., 1014320., 1268125., 1279475., 1290825.,
      1302175., 1562840., 1576580., 1590320., 1604060., 1871625., 1887795.,
      1903965., 1920135., 1906555., 1923005., 1939455., 1955905., 1941485.,
      1958215., 1974945., 1991675., 1709060., 1723520., 1737980., 1752440.,
      1461925., 1474075., 1486225., 1498375., 1199920., 1209720., 1219520.,
      1229320., 991312.,  999088.,  1006864., 1014640., 1268880., 1278680.,
      1288480., 1298280., 1558600., 1570456., 1582312., 1594168., 1860600.,
      1874544., 1888488., 1902432., 1891680., 1905848., 1920016., 1934184.,
      1922760., 1937152., 1951544., 1965936., 1687096., 1699528., 1711960.,
      1724392., 1438640., 1449080., 1459520., 1469960., 1177264., 1185680.,
      1194096., 1202512., 562768.,  575152.,  587536.,  599920.,  738000.,
      753560.,  769120.,  784680.,  927304.,  946072.,  964840.,  983608.,
      1130808., 1152816., 1174824., 1196832., 1143072., 1165304., 1187536.,
      1209768., 1155336., 1177792., 1200248., 1222704., 1035064., 1054408.,
      1073752., 1093096., 900080.,  916280.,  932480.,  948680.,  750256.,
      763280.,  776304.,  789328.,  935120.,  951320.,  967520.,  983720.,
      1215275., 1235625., 1255975., 1276325., 1514300., 1538840., 1563380.,
      1587920., 1832355., 1861125., 1889895., 1918665., 1851605., 1880655.,
      1909705., 1938755., 1870855., 1900185., 1929515., 1958845., 1663400.,
      1688660., 1713920., 1739180., 1436275., 1457425., 1478575., 1499725.,
      1189320., 1206320., 1223320., 1240320., 1416264., 1436568., 1456872.,
      1477176., 1829820., 1855320., 1880820., 1906320., 2267556., 2298300.,
      2329044., 2359788., 2729664., 2765700., 2801736., 2837772., 2757468.,
      2793840., 2830212., 2866584., 2785272., 2821980., 2858688., 2895396.,
      2463756., 2495364., 2526972., 2558580., 2117100., 2143560., 2170020.,
      2196480., 1745112., 1766376., 1787640., 1808904., 2014264., 2038960.,
      2063656., 2088352., 2591715., 2622725., 2653735., 2684745., 3199168.,
      3236548., 3273928., 3311308., 3836847., 3880653., 3924459., 3968265.,
      3874773., 3918971., 3963169., 4007367., 3912699., 3957289., 4001879.,
      4046469., 3448228., 3486616., 3525004., 3563392., 2952635., 2984765.,
      3016895., 3049025., 2425696., 2451512., 2477328., 2503144., 2197216.,
      2223928., 2250640., 2277352., 2825445., 2858975., 2892505., 2926035.,
      3485692., 3526096., 3566500., 3606904., 4178181., 4225515., 4272849.,
      4320183., 4216107., 4263833., 4311559., 4359285., 4254033., 4302151.,
      4350269., 4398387., 3746848., 3788260., 3829672., 3871084., 3206525.,
      3241175., 3275825., 3310475., 2632840., 2660672., 2688504., 2716336.,
      2380168., 2408896., 2437624., 2466352., 3059175., 3095225., 3131275.,
      3167325., 3772216., 3815644., 3859072., 3902500., 4519515., 4570377.,
      4621239., 4672101., 4557441., 4608695., 4659949., 4711203., 4595367.,
      4647013., 4698659., 4750305., 4045468., 4089904., 4134340., 4178776.,
      3460415., 3497585., 3534755., 3571925., 2839984., 2869832., 2899680.,
      2929528., 2527800., 2553288., 2578776., 2604264., 3235560., 3267540.,
      3299520., 3331500., 3974028., 4012548., 4051068., 4089588., 4743396.,
      4788504., 4833612., 4878720., 4780608., 4826052., 4871496., 4916940.,
      4817820., 4863600., 4909380., 4955160., 4225524., 4264908., 4304292.,
      4343676., 3601560., 3634500., 3667440., 3700380., 2945736., 2972184.,
      2998632., 3025080., 2526320., 2548280., 2570240., 2592200., 3224275.,
      3251825., 3279375., 3306925., 3949100., 3982280., 4015460., 4048640.,
      4700955., 4739805., 4778655., 4817505., 4735885., 4775015., 4814145.,
      4853275., 4770815., 4810225., 4849635., 4889045., 4173080., 4206980.,
      4240880., 4274780., 3547675., 3576025., 3604375., 3632725., 2894440.,
      2917200., 2939960., 2962720., 2367664., 2385808., 2403952., 2422096.,
      3015240., 3038000., 3060760., 3083520., 3685336., 3712744., 3740152.,
      3767560., 4378080., 4410168., 4442256., 4474344., 4409160., 4441472.,
      4473784., 4506096., 4440240., 4472776., 4505312., 4537848., 3876040.,
      3904024., 3932008., 3959992., 3288680., 3312080., 3335480., 3358880.,
      2678032., 2696816., 2715600., 2734384., 1068208., 1090960., 1113712.,
      1136464., 1395720., 1424240., 1452760., 1481280., 1747672., 1781992.,
      1816312., 1850632., 2124192., 2164344., 2204496., 2244648., 2136456.,
      2176832., 2217208., 2257584., 2148720., 2189320., 2229920., 2270520.,
      1917640., 1952536., 1987432., 2022328., 1661480., 1690640., 1719800.,
      1748960., 1380112., 1403504., 1426896., 1450288., 1748360., 1777520.,
      1806680., 1835840., 2264225., 2300775., 2337325., 2373875., 2811920.,
      2855900., 2899880., 2943860., 3391605., 3443055., 3494505., 3545955.,
      3410855., 3462585., 3514315., 3566045., 3430105., 3482115., 3534125.,
      3586135., 3038780., 3083480., 3128180., 3172880., 2614825., 2652175.,
      2689525., 2726875., 2158080., 2188040., 2218000., 2247960., 2609880.,
      2645736., 2681592., 2717448., 3360720., 3405660., 3450600., 3495540.,
      4151292., 4205364., 4259436., 4313508., 4981788., 5045040., 5108292.,
      5171544., 5009592., 5073180., 5136768., 5200356., 5037396., 5101320.,
      5165244., 5229168., 4440804., 4495740., 4550676., 4605612., 3803520.,
      3849420., 3895320., 3941220., 3125352., 3162168., 3198984., 3235800.,
      3660832., 3703672., 3746512., 3789352., 4695285., 4748975., 4802665.,
      4856355., 5777884., 5842480., 5907076., 5971672., 6908853., 6984411.,
      7059969., 7135527., 6946779., 7022729., 7098679., 7174629., 6984705.,
      7061047., 7137389., 7213731., 6135808., 6201412., 6267016., 6332620.,
      5237645., 5292455., 5347265., 5402075., 4289992., 4333952., 4377912.,
      4421872., 3843784., 3888640., 3933496., 3978352., 4929015., 4985225.,
      5041435., 5097645., 6064408., 6132028., 6199648., 6267268., 7250187.,
      7329273., 7408359., 7487445., 7288113., 7367591., 7447069., 7526547.,
      7326039., 7405909., 7485779., 7565649., 6434428., 6503056., 6571684.,
      6640312., 5491535., 5548865., 5606195., 5663525., 4497136., 4543112.,
      4589088., 4635064., 4026736., 4073608., 4120480., 4167352., 5162745.,
      5221475., 5280205., 5338935., 6350932., 6421576., 6492220., 6562864.,
      7591521., 7674135., 7756749., 7839363., 7629447., 7712453., 7795459.,
      7878465., 7667373., 7750771., 7834169., 7917567., 6733048., 6804700.,
      6876352., 6948004., 5745425., 5805275., 5865125., 5924975., 4704280.,
      4752272., 4800264., 4848256., 4156872., 4197912., 4238952., 4279992.,
      5310780., 5362200., 5413620., 5465040., 6510948., 6572796., 6634644.,
      6696492., 7757568., 7829892., 7902216., 7974540., 7794780., 7867440.,
      7940100., 8012760., 7831992., 7904988., 7977984., 8050980., 6855756.,
      6918468., 6981180., 7043892., 5832300., 5884680., 5937060., 5989440.,
      4761432., 4803432., 4845432., 4887432., 4065320., 4100240., 4135160.,
      4170080., 5180425., 5224175., 5267925., 5311675., 6335360., 6387980.,
      6440600., 6493220., 7530285., 7591815., 7653345., 7714875., 7565215.,
      7627025., 7688835., 7750645., 7600145., 7662235., 7724325., 7786415.,
      6637100., 6690440., 6743780., 6797120., 5633425., 5677975., 5722525.,
      5767075., 4588960., 4624680., 4660400., 4696120., 3744016., 3772528.,
      3801040., 3829552., 4761600., 4797320., 4833040., 4868760., 5812072.,
      5855032., 5897992., 5940952., 6895560., 6945792., 6996024., 7046256.,
      6926640., 6977096., 7027552., 7078008., 6957720., 7008400., 7059080.,
      7109760., 6064984., 6108520., 6152056., 6195592., 5138720., 5175080.,
      5211440., 5247800., 4178800., 4207952., 4237104., 4266256.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    305.,    347.,    389.,    431.,
      473.,    515.,    557.,    599.,    641.,    683.,    725.,    767.,
      809.,    851.,    893.,    935.,    804.,    840.,    876.,    912.,
      545.,    567.,    589.,    611.,    196.,    232.,    268.,    304.,
      772.,    860.,    948.,    1036.,   1792.,   1948.,   2104.,   2260.,
      2416.,   2572.,   2728.,   2884.,   3040.,   3196.,   3352.,   3508.,
      3664.,   3820.,   3976.,   4132.,   4288.,   4444.,   4600.,   4756.,
      3708.,   3828.,   3948.,   4068.,   2300.,   2368.,   2436.,   2504.,
      1245.,   1335.,   1425.,   1515.,   3540.,   3744.,   3948.,   4152.,
      6981.,   7323.,   7665.,   8007.,   8349.,   8691.,   9033.,   9375.,
      9717.,   10059.,  10401.,  10743.,  11085.,  11427.,  11769.,  12111.,
      12453.,  12795.,  13137.,  13479.,  10056.,  10308.,  10560.,  10812.,
      5937.,   6075.,   6213.,   6351.,   3765.,   3855.,   3945.,   4035.,
      9252.,   9456.,   9660.,   9864.,   16557.,  16899.,  17241.,  17583.,
      17925.,  18267.,  18609.,  18951.,  19293.,  19635.,  19977.,  20319.,
      20661.,  21003.,  21345.,  21687.,  22029.,  22371.,  22713.,  23055.,
      17112.,  17364.,  17616.,  17868.,  9801.,   9939.,   10077.,  10215.,
      6285.,   6375.,   6465.,   6555.,   14964.,  15168.,  15372.,  15576.,
      26133.,  26475.,  26817.,  27159.,  27501.,  27843.,  28185.,  28527.,
      28869.,  29211.,  29553.,  29895.,  30237.,  30579.,  30921.,  31263.,
      31605.,  31947.,  32289.,  32631.,  24168.,  24420.,  24672.,  24924.,
      13665.,  13803.,  13941.,  14079.,  8805.,   8895.,   8985.,   9075.,
      20676.,  20880.,  21084.,  21288.,  35709.,  36051.,  36393.,  36735.,
      37077.,  37419.,  37761.,  38103.,  38445.,  38787.,  39129.,  39471.,
      39813.,  40155.,  40497.,  40839.,  41181.,  41523.,  41865.,  42207.,
      31224.,  31476.,  31728.,  31980.,  17529.,  17667.,  17805.,  17943.,
      11325.,  11415.,  11505.,  11595.,  26388.,  26592.,  26796.,  27000.,
      45285.,  45627.,  45969.,  46311.,  46653.,  46995.,  47337.,  47679.,
      48021.,  48363.,  48705.,  49047.,  49389.,  49731.,  50073.,  50415.,
      50757.,  51099.,  51441.,  51783.,  38280.,  38532.,  38784.,  39036.,
      21393.,  21531.,  21669.,  21807.,  12664.,  12748.,  12832.,  12916.,
      28140.,  28324.,  28508.,  28692.,  46492.,  46792.,  47092.,  47392.,
      47692.,  47992.,  48292.,  48592.,  48892.,  49192.,  49492.,  49792.,
      50092.,  50392.,  50692.,  50992.,  51292.,  51592.,  51892.,  52192.,
      37476.,  37692.,  37908.,  38124.,  20400.,  20516.,  20632.,  20748.,
      9113.,   9167.,   9221.,   9275.,   19792.,  19908.,  20024.,  20140.,
      32069.,  32255.,  32441.,  32627.,  32813.,  32999.,  33185.,  33371.,
      33557.,  33743.,  33929.,  34115.,  34301.,  34487.,  34673.,  34859.,
      35045.,  35231.,  35417.,  35603.,  25164.,  25296.,  25428.,  25560.,
      13493.,  13563.,  13633.,  13703.,  59.,     137.,    215.,    293.,
      436.,    600.,    764.,    928.,    1163.,   1421.,   1679.,   1937.,
      2195.,   2453.,   2711.,   2969.,   3227.,   3485.,   3743.,   4001.,
      4259.,   4517.,   4775.,   5033.,   5291.,   5549.,   5807.,   6065.,
      4080.,   4260.,   4440.,   4620.,   2327.,   2421.,   2515.,   2609.,
      2320.,   2500.,   2680.,   2860.,   5596.,   5972.,   6348.,   6724.,
      9892.,   10480.,  11068.,  11656.,  12244.,  12832.,  13420.,  14008.,
      14596.,  15184.,  15772.,  16360.,  16948.,  17536.,  18124.,  18712.,
      19300.,  19888.,  20476.,  21064.,  14292.,  14700.,  15108.,  15516.,
      7880.,   8092.,   8304.,   8516.,   7455.,   7761.,   8067.,   8373.,
      16824.,  17460.,  18096.,  18732.,  28203.,  29193.,  30183.,  31173.,
      32163.,  33153.,  34143.,  35133.,  36123.,  37113.,  38103.,  39093.,
      40083.,  41073.,  42063.,  43053.,  44043.,  45033.,  46023.,  47013.,
      31980.,  32664.,  33348.,  34032.,  17331.,  17685.,  18039.,  18393.,
      16023.,  16329.,  16635.,  16941.,  34632.,  35268.,  35904.,  36540.,
      55923.,  56913.,  57903.,  58893.,  59883.,  60873.,  61863.,  62853.,
      63843.,  64833.,  65823.,  66813.,  67803.,  68793.,  69783.,  70773.,
      71763.,  72753.,  73743.,  74733.,  51132.,  51816.,  52500.,  53184.,
      27243.,  27597.,  27951.,  28305.,  24591.,  24897.,  25203.,  25509.,
      52440.,  53076.,  53712.,  54348.,  83643.,  84633.,  85623.,  86613.,
      87603.,  88593.,  89583.,  90573.,  91563.,  92553.,  93543.,  94533.,
      95523.,  96513.,  97503.,  98493.,  99483.,  100473., 101463., 102453.,
      70284.,  70968.,  71652.,  72336.,  37155.,  37509.,  37863.,  38217.,
      33159.,  33465.,  33771.,  34077.,  70248.,  70884.,  71520.,  72156.,
      111363., 112353., 113343., 114333., 115323., 116313., 117303., 118293.,
      119283., 120273., 121263., 122253., 123243., 124233., 125223., 126213.,
      127203., 128193., 129183., 130173., 89436.,  90120.,  90804.,  91488.,
      47067.,  47421.,  47775.,  48129.,  41727.,  42033.,  42339.,  42645.,
      88056.,  88692.,  89328.,  89964.,  139083., 140073., 141063., 142053.,
      143043., 144033., 145023., 146013., 147003., 147993., 148983., 149973.,
      150963., 151953., 152943., 153933., 154923., 155913., 156903., 157893.,
      108588., 109272., 109956., 110640., 56979.,  57333.,  57687.,  58041.,
      34948.,  35176.,  35404.,  35632.,  73284.,  73756.,  74228.,  74700.,
      115072., 115804., 116536., 117268., 118000., 118732., 119464., 120196.,
      120928., 121660., 122392., 123124., 123856., 124588., 125320., 126052.,
      126784., 127516., 128248., 128980., 88380.,  88884.,  89388.,  89892.,
      46140.,  46400.,  46660.,  46920.,  21263.,  21389.,  21515.,  21641.,
      44380.,  44640.,  44900.,  45160.,  69383.,  69785.,  70187.,  70589.,
      70991.,  71393.,  71795.,  72197.,  72599.,  73001.,  73403.,  73805.,
      74207.,  74609.,  75011.,  75413.,  75815.,  76217.,  76619.,  77021.,
      52632.,  52908.,  53184.,  53460.,  27371.,  27513.,  27655.,  27797.,
      113.,    263.,    413.,    563.,    832.,    1140.,   1448.,   1756.,
      2189.,   2663.,   3137.,   3611.,   4085.,   4559.,   5033.,   5507.,
      5981.,   6455.,   6929.,   7403.,   7877.,   8351.,   8825.,   9299.,
      9773.,   10247.,  10721.,  11195.,  7356.,   7680.,   8004.,   8328.,
      4109.,   4275.,   4441.,   4607.,   4444.,   4768.,   5092.,   5416.,
      10420.,  11084.,  11748.,  12412.,  17992.,  19012.,  20032.,  21052.,
      22072.,  23092.,  24112.,  25132.,  26152.,  27172.,  28192.,  29212.,
      30232.,  31252.,  32272.,  33292.,  34312.,  35332.,  36352.,  37372.,
      24876.,  25572.,  26268.,  26964.,  13460.,  13816.,  14172.,  14528.,
      13665.,  14187.,  14709.,  15231.,  30108.,  31176.,  32244.,  33312.,
      49425.,  51063.,  52701.,  54339.,  55977.,  57615.,  59253.,  60891.,
      62529.,  64167.,  65805.,  67443.,  69081.,  70719.,  72357.,  73995.,
      75633.,  77271.,  78909.,  80547.,  53904.,  55020.,  56136.,  57252.,
      28725.,  29295.,  29865.,  30435.,  28281.,  28803.,  29325.,  29847.,
      60012.,  61080.,  62148.,  63216.,  95289.,  96927.,  98565.,  100203.,
      101841., 103479., 105117., 106755., 108393., 110031., 111669., 113307.,
      114945., 116583., 118221., 119859., 121497., 123135., 124773., 126411.,
      85152.,  86268.,  87384.,  88500.,  44685.,  45255.,  45825.,  46395.,
      42897.,  43419.,  43941.,  44463.,  89916.,  90984.,  92052.,  93120.,
      141153., 142791., 144429., 146067., 147705., 149343., 150981., 152619.,
      154257., 155895., 157533., 159171., 160809., 162447., 164085., 165723.,
      167361., 168999., 170637., 172275., 116400., 117516., 118632., 119748.,
      60645.,  61215.,  61785.,  62355.,  57513.,  58035.,  58557.,  59079.,
      119820., 120888., 121956., 123024., 187017., 188655., 190293., 191931.,
      193569., 195207., 196845., 198483., 200121., 201759., 203397., 205035.,
      206673., 208311., 209949., 211587., 213225., 214863., 216501., 218139.,
      147648., 148764., 149880., 150996., 76605.,  77175.,  77745.,  78315.,
      72129.,  72651.,  73173.,  73695.,  149724., 150792., 151860., 152928.,
      232881., 234519., 236157., 237795., 239433., 241071., 242709., 244347.,
      245985., 247623., 249261., 250899., 252537., 254175., 255813., 257451.,
      259089., 260727., 262365., 264003., 178896., 180012., 181128., 182244.,
      92565.,  93135.,  93705.,  94275.,  57232.,  57604.,  57976.,  58348.,
      118428., 119188., 119948., 120708., 183652., 184816., 185980., 187144.,
      188308., 189472., 190636., 191800., 192964., 194128., 195292., 196456.,
      197620., 198784., 199948., 201112., 202276., 203440., 204604., 205768.,
      139284., 140076., 140868., 141660., 71880.,  72284.,  72688.,  73092.,
      33413.,  33611.,  33809.,  34007.,  68968.,  69372.,  69776.,  70180.,
      106697., 107315., 107933., 108551., 109169., 109787., 110405., 111023.,
      111641., 112259., 112877., 113495., 114113., 114731., 115349., 115967.,
      116585., 117203., 117821., 118439., 80100.,  80520.,  80940.,  81360.,
      41249.,  41463.,  41677.,  41891.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      450400.,   466400.,   482400.,   498400.,   631560.,   652200.,
      672840.,   693480.,   842192.,   867728.,   893264.,   918800.,
      1083320.,  1114008.,  1144696.,  1175384.,  1181208.,  1213688.,
      1246168.,  1278648.,  1279096.,  1313368.,  1347640.,  1381912.,
      1205264.,  1235408.,  1265552.,  1295696.,  1096840.,  1122600.,
      1148360.,  1174120.,  952800.,   973920.,   995040.,   1016160.,
      961800.,   987560.,   1013320.,  1039080.,  1308430.,  1341430.,
      1374430.,  1407430.,  1693948.,  1734508.,  1775068.,  1815628.,
      2119634.,  2168074.,  2216514.,  2264954.,  2248778.,  2299458.,
      2350138.,  2400818.,  2377922.,  2430842.,  2483762.,  2536682.,
      2167756.,  2214076.,  2260396.,  2306716.,  1904110.,  1943510.,
      1982910.,  2022310.,  1585704.,  1617864.,  1650024.,  1682184.,
      1692112.,  1729936.,  1767760.,  1805584.,  2180092.,  2228332.,
      2276572.,  2324812.,  2720472.,  2779512.,  2838552.,  2897592.,
      3314788.,  3385012.,  3455236.,  3525460.,  3454964.,  3527876.,
      3600788.,  3673700.,  3595140.,  3670740.,  3746340.,  3821940.,
      3225144.,  3291096.,  3357048.,  3423000.,  2786876.,  2842796.,
      2898716.,  2954636.,  2278800.,  2324304.,  2369808.,  2415312.,
      2480568.,  2532760.,  2584952.,  2637144.,  3134674.,  3201034.,
      3267394.,  3333754.,  3858788.,  3939764.,  4020740.,  4101716.,
      4654702.,  4750742.,  4846782.,  4942822.,  4818454.,  4917630.,
      5016806.,  5115982.,  4982206.,  5084518.,  5186830.,  5289142.,
      4440404.,  4529444.,  4618484.,  4707524.,  3811442.,  3886762.,
      3962082.,  4037402.,  3093528.,  3154680.,  3215832.,  3276984.,
      3352344.,  3420664.,  3488984.,  3557304.,  4190986.,  4277506.,
      4364026.,  4450546.,  5115764.,  5220932.,  5326100.,  5431268.,
      6128470.,  6252734.,  6376998.,  6501262.,  6292222.,  6419622.,
      6547022.,  6674422.,  6455974.,  6586510.,  6717046.,  6847582.,
      5720420.,  5833652.,  5946884.,  6060116.,  4881578.,  4977058.,
      5072538.,  5168018.,  3937656.,  4014936.,  4092216.,  4169496.,
      4224120.,  4308568.,  4393016.,  4477464.,  5247298.,  5353978.,
      5460658.,  5567338.,  6372740.,  6502100.,  6631460.,  6760820.,
      7602238.,  7754726.,  7907214.,  8059702.,  7765990.,  7921614.,
      8077238.,  8232862.,  7929742.,  8088502.,  8247262.,  8406022.,
      7000436.,  7137860.,  7275284.,  7412708.,  5951714.,  6067354.,
      6182994.,  6298634.,  4781784.,  4875192.,  4968600.,  5062008.,
      4956176.,  5035472.,  5114768.,  5194064.,  6075340.,  6175420.,
      6275500.,  6375580.,  7290936.,  7412184.,  7533432.,  7654680.,
      8604500.,  8747300.,  8890100.,  9032900.,  8762596.,  8908084.,
      9053572.,  9199060.,  8920692.,  9068868.,  9217044.,  9365220.,
      7795608.,  7923768.,  8051928.,  8180088.,  6558220.,  6665980.,
      6773740.,  6881500.,  5206992.,  5293968.,  5380944.,  5467920.,
      5077128.,  5148968.,  5220808.,  5292648.,  6129262.,  6219862.,
      6310462.,  6401062.,  7267900.,  7377580.,  7487260.,  7596940.,
      8494322.,  8623402.,  8752482.,  8881562.,  8634218.,  8765538.,
      8896858.,  9028178.,  8774114.,  8907674.,  9041234.,  9174794.,
      7603468.,  7718908.,  7834348.,  7949788.,  6331726.,  6428726.,
      6525726.,  6622726.,  4957608.,  5035848.,  5114088.,  5192328.,
      4522464.,  4584544.,  4646624.,  4708704.,  5328424.,  5406664.,
      5484904.,  5563144.,  6206864.,  6301520.,  6396176.,  6490832.,
      7158808.,  7270136.,  7381464.,  7492792.,  7267960.,  7381080.,
      7494200.,  7607320.,  7377112.,  7492024.,  7606936.,  7721848.,
      6327248.,  6426512.,  6525776.,  6625040.,  5191592.,  5274952.,
      5358312.,  5441672.,  3969120.,  4036320.,  4103520.,  4170720.,
      4483552.,  4582496.,  4681440.,  4780384.,  5880360.,  6004680.,
      6129000.,  6253320.,  7389584.,  7539536.,  7689488.,  7839440.,
      9012248.,  9188088.,  9363928.,  9539768.,  9110136.,  9287768.,
      9465400.,  9643032.,  9208024.,  9387448.,  9566872.,  9746296.,
      8250320.,  8404880.,  8559440.,  8714000.,  7175080.,  7304520.,
      7433960.,  7563400.,  5981280.,  6085344.,  6189408.,  6293472.,
      7454760.,  7584200.,  7713640.,  7843080.,  9020278.,  9182878.,
      9345478.,  9508078.,  10728364., 10924444., 11120524., 11316604.,
      12580298., 12810178., 13040058., 13269938., 12709442., 12941562.,
      13173682., 13405802., 12838586., 13072946., 13307306., 13541666.,
      11160700., 11362540., 11564380., 11766220., 9325654.,  9494654.,
      9663654.,  9832654.,  7332168.,  7468008.,  7603848.,  7739688.,
      8528272.,  8674128.,  8819984.,  8965840.,  10312876., 10492060.,
      10671244., 10850428., 12241528., 12454424., 12667320., 12880216.,
      14315764., 14562756., 14809748., 15056740., 14286980., 14528468.,
      14769956., 15011444., 14225428., 14461412., 14697396., 14933380.,
      12327384., 12530808., 12734232., 12937656., 10269420., 10439900.,
      10610380., 10780860., 8050000.,  8187152.,  8324304.,  8461456.,
      9607704.,  9755896.,  9904088.,  10052280., 11486410., 11668674.,
      11850938., 12033202., 13514740., 13731524., 13948308., 14165092.,
      15694486., 15946238., 16197990., 16449742., 15459902., 15706598.,
      15953294., 16199990., 15192550., 15434190., 15675830., 15917470.,
      13146596., 13355060., 13563524., 13771988., 10933866., 11108706.,
      11283546., 11458386., 8552568.,  8693336.,  8834104.,  8974872.,
      8886136.,  9017688.,  9149240.,  9280792.,  10354434., 10515898.,
      10677362., 10838826., 11955716., 12147540., 12339364., 12531188.,
      13691774., 13914406., 14137038., 14359670., 13227814., 13445390.,
      13662966., 13880542., 12731086., 12943606., 13156126., 13368646.,
      10955252., 11138756., 11322260., 11505764., 9029282.,  9183322.,
      9337362.,  9491402.,  6951384.,  7075512.,  7199640.,  7323768.,
      7247064.,  7361976.,  7476888.,  7591800.,  8075578.,  8216242.,
      8356906.,  8497570.,  9020436.,  9187300.,  9354164.,  9521028.,
      10083430., 10276942., 10470454., 10663966., 9390094.,  9578550.,
      9767006.,  9955462.,  8663990.,  8847390.,  9030790.,  9214190.,
      7387652.,  7546196.,  7704740.,  7863284.,  5977818.,  6111058.,
      6244298.,  6377538.,  4432696.,  4540184.,  4647672.,  4755160.,
      4630480.,  4719504.,  4808528.,  4897552.,  4551292.,  4659436.,
      4767580.,  4875724.,  4561880.,  4689528.,  4817176.,  4944824.,
      5712356.,  5859892.,  6007428.,  6154964.,  5832564.,  5974596.,
      6116628.,  6258660.,  5920004.,  6056532.,  6193060.,  6329588.,
      5368632.,  5486808.,  5604984.,  5723160.,  4711612.,  4811052.,
      4910492.,  5009932.,  3947408.,  4027728.,  4108048.,  4188368.,
      2919336.,  2980168.,  3041000.,  3101832.,  3721430.,  3794174.,
      3866918.,  3939662.,  4582636.,  4667612.,  4752588.,  4837564.,
      5504234.,  5601762.,  5699290.,  5796818.,  5376866.,  5468442.,
      5560018.,  5651594.,  5216730.,  5302354.,  5387978.,  5473602.,
      4637116.,  4711468.,  4785820.,  4860172.,  3983798.,  4046558.,
      4109318.,  4172078.,  3255496.,  3306344.,  3357192.,  3408040.,
      2049120.,  2079456.,  2109792.,  2140128.,  2359624.,  2394088.,
      2428552.,  2463016.,  2694480.,  2733328.,  2772176.,  2811024.,
      3054712.,  3098200.,  3141688.,  3185176.,  2667224.,  2704312.,
      2741400.,  2778488.,  2246968.,  2277656.,  2308344.,  2339032.,
      1950608.,  1977680.,  2004752.,  2031824.,  1616584.,  1639784.,
      1662984.,  1686184.,  1243872.,  1262944.,  1282016.,  1301088.,
      2143328.,  2194144.,  2244960.,  2295776.,  2834760.,  2898920.,
      2963080.,  3027240.,  3590480.,  3668240.,  3746000.,  3823760.,
      4411512.,  4503128.,  4594744.,  4686360.,  4509400.,  4602808.,
      4696216.,  4789624.,  4607288.,  4702488.,  4797688.,  4892888.,
      4162448.,  4244816.,  4327184.,  4409552.,  3648200.,  3717480.,
      3786760.,  3856040.,  3063520.,  3119456.,  3175392.,  3231328.,
      3687240.,  3756520.,  3825800.,  3895080.,  4545502.,  4632902.,
      4720302.,  4807702.,  5486172.,  5592012.,  5697852.,  5803692.,
      6510530.,  6635130.,  6759730.,  6884330.,  6639674.,  6766514.,
      6893354.,  7020194.,  6768818.,  6897898.,  7026978.,  7156058.,
      5942572.,  6054172.,  6165772.,  6277372.,  5019326.,  5113126.,
      5206926.,  5300726.,  3997800.,  4073480.,  4149160.,  4224840.,
      4579664.,  4669712.,  4759760.,  4849808.,  5641564.,  5755084.,
      5868604.,  5982124.,  6808088.,  6945464.,  7082840.,  7220216.,
      8080772.,  8242388.,  8404004.,  8565620.,  8220948.,  8385252.,
      8549556.,  8713860.,  8361124.,  8528116.,  8695108.,  8862100.,
      7347576.,  7491864.,  7636152.,  7780440.,  6213532.,  6334732.,
      6455932.,  6577132.,  4957456.,  5055184.,  5152912.,  5250640.,
      5773944.,  5887064.,  6000184.,  6113304.,  7125186.,  7267706.,
      7410226.,  7552746.,  8607364.,  8779732.,  8952100.,  9124468.,
      10222270., 10424934., 10627598., 10830262., 10386022., 10591822.,
      10797622., 11003422., 10549774., 10758710., 10967646., 11176582.,
      9276020.,  9456452.,  9636884.,  9817316.,  7854178.,  8005658.,
      8157138.,  8308618.,  6282456.,  6404536.,  6526616.,  6648696.,
      6645720.,  6774968.,  6904216.,  7033464.,  8181498.,  8344178.,
      8506858.,  8669538.,  9864340.,  10060900., 10257460., 10454020.,
      11696038., 11926926., 12157814., 12388702., 11859790., 12093814.,
      12327838., 12561862., 12023542., 12260702., 12497862., 12735022.,
      10556036., 10760660., 10965284., 11169908., 8924314.,  9095954.,
      9267594.,  9439234.,  7126584.,  7264792.,  7403000.,  7541208.,
      7517496.,  7662872.,  7808248.,  7953624.,  9237810.,  9420650.,
      9603490.,  9786330.,  11121316., 11342068., 11562820., 11783572.,
      13169806., 13428918., 13688030., 13947142., 13333558., 13595806.,
      13858054., 14120302., 13497310., 13762694., 14028078., 14293462.,
      11836052., 12064868., 12293684., 12522500., 9994450.,  10186250.,
      10378050., 10569850., 7970712.,  8125048.,  8279384.,  8433720.,
      8191888.,  8323408.,  8454928.,  8586448.,  9972012.,  10137372.,
      10302732., 10468092., 11900792., 12100376., 12299960., 12499544.,
      13979764., 14213956., 14448148., 14682340., 14137860., 14374740.,
      14611620., 14848500., 14295956., 14535524., 14775092., 15014660.,
      12440280., 12646776., 12853272., 13059768., 10420076., 10593116.,
      10766156., 10939196., 8233808.,  8373008.,  8512208.,  8651408.,
      8011464.,  8126824.,  8242184.,  8357544.,  9627454.,  9772454.,
      9917454.,  10062454., 11373468., 11548428., 11723388., 11898348.,
      13250786., 13456026., 13661266., 13866506., 13390682., 13598162.,
      13805642., 14013122., 13530578., 13740298., 13950018., 14159738.,
      11691628., 11872348., 12053068., 12233788., 9708062.,  9859462.,
      10010862., 10162262., 7578600.,  7700360.,  7822120.,  7943880.,
      6911712.,  7008608.,  7105504.,  7202400.,  8123496.,  8245256.,
      8367016.,  8488776.,  9442576.,  9589456.,  9736336.,  9883216.,
      10869976., 11042232., 11214488., 11386744., 10979128., 11153176.,
      11327224., 11501272., 11088280., 11264120., 11439960., 11615800.,
      9493328.,  9644816.,  9796304.,  9947792.,  7777768.,  7904648.,
      8031528.,  8158408.,  5940576.,  6042592.,  6144608.,  6246624.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2194.,    2506.,
      2818.,    3130.,    3442.,    3754.,    4066.,    4378.,    4690.,
      5002.,    5314.,    5626.,    5938.,    6250.,    6562.,    6874.,
      6036.,    6308.,    6580.,    6852.,    4142.,    4310.,    4478.,
      4646.,    1300.,    1572.,    1844.,    2116.,    5560.,    6232.,
      6904.,    7576.,    13292.,   14492.,   15692.,   16892.,   18092.,
      19292.,   20492.,   21692.,   22892.,   24092.,   25292.,   26492.,
      27692.,   28892.,   30092.,   31292.,   32492.,   33692.,   34892.,
      36092.,   28376.,   29304.,   30232.,   31160.,   17716.,   18244.,
      18772.,   19300.,   9186.,    9882.,    10578.,   11274.,   26652.,
      28236.,   29820.,   31404.,   53166.,   55830.,   58494.,   61158.,
      63822.,   66486.,   69150.,   71814.,   74478.,   77142.,   79806.,
      82470.,   85134.,   87798.,   90462.,   93126.,   95790.,   98454.,
      101118.,  103782.,  77772.,   79740.,   81708.,   83676.,   46098.,
      47178.,   48258.,   49338.,   28674.,   29370.,   30066.,   30762.,
      71004.,   72588.,   74172.,   75756.,   127758.,  130422.,  133086.,
      135750.,  138414.,  141078.,  143742.,  146406.,  149070.,  151734.,
      154398.,  157062.,  159726.,  162390.,  165054.,  167718.,  170382.,
      173046.,  175710.,  178374.,  132876.,  134844.,  136812.,  138780.,
      76338.,   77418.,   78498.,   79578.,   48162.,   48858.,   49554.,
      50250.,   115356.,  116940.,  118524.,  120108.,  202350.,  205014.,
      207678.,  210342.,  213006.,  215670.,  218334.,  220998.,  223662.,
      226326.,  228990.,  231654.,  234318.,  236982.,  239646.,  242310.,
      244974.,  247638.,  250302.,  252966.,  187980.,  189948.,  191916.,
      193884.,  106578.,  107658.,  108738.,  109818.,  67650.,   68346.,
      69042.,   69738.,   159708.,  161292.,  162876.,  164460.,  276942.,
      279606.,  282270.,  284934.,  287598.,  290262.,  292926.,  295590.,
      298254.,  300918.,  303582.,  306246.,  308910.,  311574.,  314238.,
      316902.,  319566.,  322230.,  324894.,  327558.,  243084.,  245052.,
      247020.,  248988.,  136818.,  137898.,  138978.,  140058.,  87138.,
      87834.,   88530.,   89226.,   204060.,  205644.,  207228.,  208812.,
      351534.,  354198.,  356862.,  359526.,  362190.,  364854.,  367518.,
      370182.,  372846.,  375510.,  378174.,  380838.,  383502.,  386166.,
      388830.,  391494.,  394158.,  396822.,  399486.,  402150.,  298188.,
      300156.,  302124.,  304092.,  167058.,  168138.,  169218.,  170298.,
      98756.,   99412.,   100068.,  100724.,  219928.,  221368.,  222808.,
      224248.,  364028.,  366380.,  368732.,  371084.,  373436.,  375788.,
      378140.,  380492.,  382844.,  385196.,  387548.,  389900.,  392252.,
      394604.,  396956.,  399308.,  401660.,  404012.,  406364.,  408716.,
      293944.,  295640.,  297336.,  299032.,  160228.,  161140.,  162052.,
      162964.,  71502.,   71926.,   72350.,   72774.,   155492.,  156404.,
      157316.,  158228.,  252226.,  253690.,  255154.,  256618.,  258082.,
      259546.,  261010.,  262474.,  263938.,  265402.,  266866.,  268330.,
      269794.,  271258.,  272722.,  274186.,  275650.,  277114.,  278578.,
      280042.,  198132.,  199172.,  200212.,  201252.,  106334.,  106886.,
      107438.,  107990.,  390.,     1006.,    1622.,    2238.,    3284.,
      4580.,    5876.,    7172.,    8938.,    10978.,   13018.,   15058.,
      17098.,   19138.,   21178.,   23218.,   25258.,   27298.,   29338.,
      31378.,   33418.,   35458.,   37498.,   39538.,   41578.,   43618.,
      45658.,   47698.,   32100.,   33524.,   34948.,   36372.,   18326.,
      19070.,   19814.,   20558.,   18148.,   19572.,   20996.,   22420.,
      43864.,   46840.,   49816.,   52792.,   77660.,   82316.,   86972.,
      91628.,   96284.,   100940.,  105596.,  110252.,  114908.,  119564.,
      124220.,  128876.,  133532.,  138188.,  142844.,  147500.,  152156.,
      156812.,  161468.,  166124.,  112760.,  115992.,  119224.,  122456.,
      62212.,   63892.,   65572.,   67252.,   58650.,   61074.,   63498.,
      65922.,   132492.,  137532.,  142572.,  147612.,  222294.,  230142.,
      237990.,  245838.,  253686.,  261534.,  269382.,  277230.,  285078.,
      292926.,  300774.,  308622.,  316470.,  324318.,  332166.,  340014.,
      347862.,  355710.,  363558.,  371406.,  252732.,  258156.,  263580.,
      269004.,  137034.,  139842.,  142650.,  145458.,  126522.,  128946.,
      131370.,  133794.,  273612.,  278652.,  283692.,  288732.,  442038.,
      449886.,  457734.,  465582.,  473430.,  481278.,  489126.,  496974.,
      504822.,  512670.,  520518.,  528366.,  536214.,  544062.,  551910.,
      559758.,  567606.,  575454.,  583302.,  591150.,  404604.,  410028.,
      415452.,  420876.,  215658.,  218466.,  221274.,  224082.,  194394.,
      196818.,  199242.,  201666.,  414732.,  419772.,  424812.,  429852.,
      661782.,  669630.,  677478.,  685326.,  693174.,  701022.,  708870.,
      716718.,  724566.,  732414.,  740262.,  748110.,  755958.,  763806.,
      771654.,  779502.,  787350.,  795198.,  803046.,  810894.,  556476.,
      561900.,  567324.,  572748.,  294282.,  297090.,  299898.,  302706.,
      262266.,  264690.,  267114.,  269538.,  555852.,  560892.,  565932.,
      570972.,  881526.,  889374.,  897222.,  905070.,  912918.,  920766.,
      928614.,  936462.,  944310.,  952158.,  960006.,  967854.,  975702.,
      983550.,  991398.,  999246.,  1007094., 1014942., 1022790., 1030638.,
      708348.,  713772.,  719196.,  724620.,  372906.,  375714.,  378522.,
      381330.,  330138.,  332562.,  334986.,  337410.,  696972.,  702012.,
      707052.,  712092.,  1101270., 1109118., 1116966., 1124814., 1132662.,
      1140510., 1148358., 1156206., 1164054., 1171902., 1179750., 1187598.,
      1195446., 1203294., 1211142., 1218990., 1226838., 1234686., 1242534.,
      1250382., 860220.,  865644.,  871068.,  876492.,  451530.,  454338.,
      457146.,  459954.,  276884.,  278692.,  280500.,  282308.,  580792.,
      584536.,  588280.,  592024.,  912236.,  918044.,  923852.,  929660.,
      935468.,  941276.,  947084.,  952892.,  958700.,  964508.,  970316.,
      976124.,  981932.,  987740.,  993548.,  999356.,  1005164., 1010972.,
      1016780., 1022588., 700888.,  704888.,  708888.,  712888.,  366004.,
      368068.,  370132.,  372196.,  168630.,  169630.,  170630.,  171630.,
      352052.,  354116.,  356180.,  358244.,  550522.,  553714.,  556906.,
      560098.,  563290.,  566482.,  569674.,  572866.,  576058.,  579250.,
      582442.,  585634.,  588826.,  592018.,  595210.,  598402.,  601594.,
      604786.,  607978.,  611170.,  417732.,  419924.,  422116.,  424308.,
      217286.,  218414.,  219542.,  220670.,  750.,     1942.,    3134.,
      4326.,    6308.,    8756.,    11204.,   13652.,   16930.,   20698.,
      24466.,   28234.,   32002.,   35770.,   39538.,   43306.,   47074.,
      50842.,   54610.,   58378.,   62146.,   65914.,   69682.,   73450.,
      77218.,   80986.,   84754.,   88522.,   58164.,   60740.,   63316.,
      65892.,   32510.,   33830.,   35150.,   36470.,   34996.,   37572.,
      40148.,   42724.,   82168.,   87448.,   92728.,   98008.,   142028.,
      150140.,  158252.,  166364.,  174476.,  182588.,  190700.,  198812.,
      206924.,  215036.,  223148.,  231260.,  239372.,  247484.,  255596.,
      263708.,  271820.,  279932.,  288044.,  296156.,  197144.,  202680.,
      208216.,  213752.,  106708.,  109540.,  112372.,  115204.,  108114.,
      112266.,  116418.,  120570.,  238332.,  246828.,  255324.,  263820.,
      391422.,  404454.,  417486.,  430518.,  443550.,  456582.,  469614.,
      482646.,  495678.,  508710.,  521742.,  534774.,  547806.,  560838.,
      573870.,  586902.,  599934.,  612966.,  625998.,  639030.,  427692.,
      436572.,  445452.,  454332.,  227970.,  232506.,  237042.,  241578.,
      224370.,  228522.,  232674.,  236826.,  476220.,  484716.,  493212.,
      501708.,  756318.,  769350.,  782382.,  795414.,  808446.,  821478.,
      834510.,  847542.,  860574.,  873606.,  886638.,  899670.,  912702.,
      925734.,  938766.,  951798.,  964830.,  977862.,  990894.,  1003926.,
      676332.,  685212.,  694092.,  702972.,  354978.,  359514.,  364050.,
      368586.,  340626.,  344778.,  348930.,  353082.,  714108.,  722604.,
      731100.,  739596.,  1121214., 1134246., 1147278., 1160310., 1173342.,
      1186374., 1199406., 1212438., 1225470., 1238502., 1251534., 1264566.,
      1277598., 1290630., 1303662., 1316694., 1329726., 1342758., 1355790.,
      1368822., 924972.,  933852.,  942732.,  951612.,  481986.,  486522.,
      491058.,  495594.,  456882.,  461034.,  465186.,  469338.,  951996.,
      960492.,  968988.,  977484.,  1486110., 1499142., 1512174., 1525206.,
      1538238., 1551270., 1564302., 1577334., 1590366., 1603398., 1616430.,
      1629462., 1642494., 1655526., 1668558., 1681590., 1694622., 1707654.,
      1720686., 1733718., 1173612., 1182492., 1191372., 1200252., 608994.,
      613530.,  618066.,  622602.,  573138.,  577290.,  581442.,  585594.,
      1189884., 1198380., 1206876., 1215372., 1851006., 1864038., 1877070.,
      1890102., 1903134., 1916166., 1929198., 1942230., 1955262., 1968294.,
      1981326., 1994358., 2007390., 2020422., 2033454., 2046486., 2059518.,
      2072550., 2085582., 2098614., 1422252., 1431132., 1440012., 1448892.,
      736002.,  740538.,  745074.,  749610.,  455012.,  457972.,  460932.,
      463892.,  941656.,  947704.,  953752.,  959800.,  1460444., 1469708.,
      1478972., 1488236., 1497500., 1506764., 1516028., 1525292., 1534556.,
      1543820., 1553084., 1562348., 1571612., 1580876., 1590140., 1599404.,
      1608668., 1617932., 1627196., 1636460., 1107832., 1114136., 1120440.,
      1126744., 571780.,  574996.,  578212.,  581428.,  265758.,  267334.,
      268910.,  270486.,  548612.,  551828.,  555044.,  558260.,  848818.,
      853738.,  858658.,  863578.,  868498.,  873418.,  878338.,  883258.,
      888178.,  893098.,  898018.,  902938.,  907858.,  912778.,  917698.,
      922618.,  927538.,  932458.,  937378.,  942298.,  637332.,  640676.,
      644020.,  647364.,  328238.,  329942.,  331646.,  333350.};
  const std::array<int, 4> in_shape = {{3, 9, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,   3070.,   4046.,   5152.,   5558.,   5964.,   6370.,   5930.,
      5340.,   4596.,   4600.,   6225.,   8050.,   10080.,  10710.,  11340.,
      11970.,  10975.,  9750.,   8290.,   8270.,   11035.,  14091.,  17444.,
      18347.,  19250.,  20153.,  18285.,  16090.,  13562.,  13510.,  17850.,
      22589.,  27734.,  28959.,  30184.,  31409.,  28280.,  24710.,  20692.,
      20090.,  26250.,  32879.,  39984.,  41209.,  42434.,  43659.,  38990.,
      33810.,  28112.,  26670.,  34650.,  43169.,  52234.,  53459.,  54684.,
      55909.,  49700.,  42910.,  35532.,  32330.,  41665.,  51513.,  61880.,
      63077.,  64274.,  65471.,  57795.,  49570.,  40790.,  35300.,  45275.,
      55720.,  66640.,  67760.,  68880.,  70000.,  61525.,  52550.,  43070.,
      35300.,  45130.,  55370.,  66024.,  67018.,  68012.,  69006.,  60470.,
      51500.,  42092.,  20940.,  27370.,  34286.,  41692.,  42098.,  42504.,
      42910.,  38330.,  33240.,  27636.,  34300.,  44475.,  55300.,  66780.,
      67410.,  68040.,  68670.,  60925.,  52500.,  43390.,  51470.,  66385.,
      82131.,  98714.,  99617.,  100520., 101423., 89565.,  76840.,  63242.,
      72730.,  93450.,  115199., 137984., 139209., 140434., 141659., 124670.,
      106610., 87472.,  79310.,  101850., 125489., 150234., 151459., 152684.,
      153909., 135380., 115710., 94892.,  85890.,  110250., 135779., 162484.,
      163709., 164934., 166159., 146090., 124810., 102312., 90650.,  115915.,
      142233., 169610., 170807., 172004., 173201., 151755., 129220., 105590.,
      90200.,  115025., 140770., 167440., 168560., 169680., 170800., 149275.,
      126800., 103370., 84260.,  107230., 130970., 155484., 156478., 157472.,
      158466., 138230., 117200., 95372.,  39660.,  51670.,  64526.,  78232.,
      78638.,  79044.,  79450.,  70730.,  61140.,  50676.,  64000.,  82725.,
      102550., 123480., 124110., 124740., 125370., 110875., 95250.,  78490.,
      94670.,  121735., 150171., 179984., 180887., 181790., 182693., 160845.,
      137590., 112922., 131950., 169050., 207809., 248234., 249459., 250684.,
      251909., 221060., 188510., 154252., 138530., 177450., 218099., 260484.,
      261709., 262934., 264159., 231770., 197610., 161672., 145110., 185850.,
      228389., 272734., 273959., 275184., 276409., 242480., 206710., 169092.,
      148970., 190165., 232953., 277340., 278537., 279734., 280931., 245715.,
      208870., 170390., 145100., 184775., 225820., 268240., 269360., 270480.,
      271600., 237025., 201050., 163670., 133220., 169330., 206570., 244944.,
      245938., 246932., 247926., 215990., 182900., 148652.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     10.,    20.,    30.,    40.,   50.,   52.,   45.,
      28.,    13.,    41.,    86.,    150.,   186.,  222.,  258.,  239.,
      191.,   112.,   64.,    167.,   312.,   502.,  580.,  658.,  736.,
      645.,   494.,   280.,   169.,   398.,   690.,  1048., 1126., 1204.,
      1282.,  1086.,  809.,   448.,   274.,   629.,  1068., 1594., 1672.,
      1750.,  1828.,  1527.,  1124.,  616.,   379.,  860.,  1446., 2140.,
      2218.,  2296.,  2374.,  1968.,  1439.,  784.,  484.,  1091., 1824.,
      2686.,  2764.,  2842.,  2920.,  2409.,  1754., 952.,  539.,  1171.,
      1898.,  2722.,  2790.,  2858.,  2926.,  2357., 1681., 896.,  387.,
      826.,   1318.,  1864.,  1906.,  1948.,  1990., 1582., 1115., 588.,
      13.,    40.,    82.,    140.,   198.,   256.,  314.,  268.,  201.,
      112.,   121.,   281.,   482.,   726.,   858.,  990.,  1122., 923.,
      671.,   364.,   352.,   779.,   1284.,  1870., 2092., 2314., 2536.,
      2049.,  1466.,  784.,   709.,   1514.,  2418., 3424., 3646., 3868.,
      4090.,  3246.,  2285.,  1204.,  1066.,  2249., 3552., 4978., 5200.,
      5422.,  5644.,  4443.,  3104.,  1624.,  1423., 2984., 4686., 6532.,
      6754.,  6976.,  7198.,  5640.,  3923.,  2044., 1780., 3719., 5820.,
      8086.,  8308.,  8530.,  8752.,  6837.,  4742., 2464., 1487., 3091.,
      4814.,  6658.,  6822.,  6986.,  7150.,  5561., 3841., 1988., 903.,
      1870.,  2902.,  4000.,  4090.,  4180.,  4270., 3310., 2279., 1176.,
      25.,    76.,    154.,   260.,   366.,   472.,  578.,  484.,  357.,
      196.,   229.,   521.,   878.,   1302.,  1530., 1758., 1986., 1607.,
      1151.,  616.,   640.,   1391.,  2256.,  3238., 3604., 3970., 4336.,
      3453.,  2438.,  1288.,  1249.,  2630.,  4146., 5800., 6166., 6532.,
      6898.,  5406.,  3761.,  1960.,  1858.,  3869., 6036., 8362., 8728.,
      9094.,  9460.,  7359.,  5084.,  2632.,  2467., 5108., 7926., 10924.,
      11290., 11656., 12022., 9312.,  6407.,  3304., 3076., 6347., 9816.,
      13486., 13852., 14218., 14584., 11265., 7730., 3976., 2435., 5011.,
      7730.,  10594., 10854., 11114., 11374., 8765., 6001., 3080., 1419.,
      2914.,  4486.,  6136.,  6274.,  6412.,  6550., 5038., 3443., 1764.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,   23320.,   30832.,   39368.,   42560.,   45752.,   48944.,
      45664.,   41200.,   35520.,   35260.,   47825.,   61970.,   77735.,
      82705.,   87675.,   92645.,   85070.,   75675.,   64420.,   63904.,
      85400.,   109200.,  135352.,  142492.,  149632.,  156772.,  142392.,
      125420.,  105808.,  104972.,  138845.,  175882.,  216139.,  225841.,
      235543.,  245245.,  220990.,  193235.,  161924.,  157052.,  205345.,
      257362.,  313159.,  322861.,  332563.,  342265.,  305830.,  265335.,
      220724.,  209132.,  271845.,  338842.,  410179.,  419881.,  429583.,
      439285.,  390670.,  337435.,  279524.,  254608.,  328220.,  405912.,
      487732.,  497224.,  506716.,  516208.,  455808.,  391040.,  321856.,
      278700.,  357525.,  440090.,  526435.,  535325.,  544215.,  553105.,
      486230.,  415375.,  340500.,  279168.,  356960.,  438016.,  522368.,
      530264.,  538160.,  546056.,  478576.,  407640.,  333216.,  163680.,
      214120.,  268432.,  326648.,  329840.,  333032.,  336224.,  300544.,
      260800.,  216960.,  269260.,  349325.,  434570.,  525035.,  530005.,
      534975.,  539945.,  479270.,  413175.,  341620.,  405184.,  522800.,
      647040.,  777952.,  785092.,  792232.,  799372.,  706152.,  606020.,
      498928.,  573692.,  737345.,  909202.,  1089319., 1099021., 1108723.,
      1118425., 984550.,  842135.,  691124.,  625772.,  803845.,  990682.,
      1186339., 1196041., 1205743., 1215445., 1069390., 914235.,  749924.,
      677852.,  870345.,  1072162., 1283359., 1293061., 1302763., 1312465.,
      1154230., 986335.,  808724.,  716848.,  916820.,  1125192., 1342012.,
      1351504., 1360996., 1370488., 1201008., 1022840., 835936.,  714300.,
      911025.,  1115090., 1326535., 1335425., 1344315., 1353205., 1182830.,
      1004875., 819300.,  667968.,  850160.,  1038496., 1233008., 1240904.,
      1248800., 1256696., 1096336., 929640.,  756576.,  310560.,  404920.,
      506032.,  613928.,  617120.,  620312.,  623504.,  555424.,  480400.,
      398400.,  503260.,  650825.,  807170.,  972335.,  977305.,  982275.,
      987245.,  873470.,  750675.,  618820.,  746464.,  960200.,  1184880.,
      1420552., 1427692., 1434832., 1441972., 1269912., 1086620., 892048.,
      1042412., 1335845., 1642522., 1962499., 1972201., 1981903., 1991605.,
      1748110., 1491035., 1220324., 1094492., 1402345., 1724002., 2059519.,
      2069221., 2078923., 2088625., 1832950., 1563135., 1279124., 1146572.,
      1468845., 1805482., 2156539., 2166241., 2175943., 2185645., 1917790.,
      1635235., 1337924., 1179088., 1505420., 1844472., 2196292., 2205784.,
      2215276., 2224768., 1946208., 1654640., 1350016., 1149900., 1464525.,
      1790090., 2126635., 2135525., 2144415., 2153305., 1879430., 1594375.,
      1298100., 1056768., 1343360., 1638976., 1943648., 1951544., 1959440.,
      1967336., 1714096., 1451640., 1179936.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    124.,    196.,    268.,    340.,    365.,
      322.,   203.,   76.,    264.,    580.,    1040.,   1312.,   1584.,
      1856.,  1744.,  1408.,  832.,    437.,    1174.,   2235.,   3644.,
      4244.,  4844.,  5444.,  4809.,   3706.,   2111.,   1235.,   2938.,
      5133.,  7844.,  8444.,  9044.,   9644.,   8211.,   6142.,   3413.,
      2033.,  4702.,  8031.,  12044.,  12644.,  13244.,  13844.,  11613.,
      8578.,  4715.,  2831.,  6466.,   10929.,  16244.,  16844.,  17444.,
      18044., 15015., 11014., 6017.,   3629.,   8230.,   13827.,  20444.,
      21044., 21644., 22244., 18417.,  13450.,  7319.,   4128.,   8992.,
      14608., 20992., 21520., 22048.,  22576.,  18220.,  13016.,  6948.,
      2993.,  6398.,  10223., 14476.,  14804.,  15132.,  15460.,  12305.,
      8682.,  4583.,  77.,    262.,    563.,    988.,    1444.,   1900.,
      2356.,  2021.,  1522.,  851.,    892.,    2088.,   3604.,   5456.,
      6496.,  7536.,  8576.,  7072.,   5152.,   2800.,   2669.,   5926.,
      9795.,  14300., 16052., 17804.,  19556.,  15825.,  11338.,  6071.,
      5483.,  11722., 18741., 26564.,  28316.,  30068.,  31820.,  25275.,
      17806., 9389.,  8297.,  17518.,  27687.,  38828.,  40580.,  42332.,
      44084., 34725., 24274., 12707.,  11111.,  23314.,  36633.,  51092.,
      52844., 54596., 56348., 44175.,  30742.,  16025.,  13925.,  29110.,
      45579., 63356., 65108., 66860.,  68612.,  53625.,  37210.,  19343.,
      11664., 24256., 37792., 52288.,  53584.,  54880.,  56176.,  43708.,
      30200., 15636., 7097.,  14702.,  22823.,  31468.,  32180.,  32892.,
      33604., 26057., 17946., 9263.,   149.,    502.,    1067.,   1852.,
      2692.,  3532.,  4372.,  3677.,   2722.,   1499.,   1708.,   3912.,
      6628.,  9872.,  11680., 13488.,  15296.,  12400.,  8896.,   4768.,
      4901.,  10678., 17355., 24956.,  27860.,  30764.,  33668.,  26841.,
      18970., 10031., 9731.,  20506.,  32349.,  45284.,  48188.,  51092.,
      53996., 42339., 29470., 15365.,  14561.,  30334.,  47343.,  65612.,
      68516., 71420., 74324., 57837.,  39970.,  20699.,  19391.,  40162.,
      62337., 85940., 88844., 91748.,  94652.,  73335.,  50470.,  26033.,
      24221., 49990., 77331., 106268., 109172., 112076., 114980., 88833.,
      60970., 31367., 19200., 39520.,  60976.,  83584.,  85648.,  87712.,
      89776., 69196., 47384., 24324.,  11201.,  23006.,  35423.,  48460.,
      49556., 50652., 51748., 39809.,  27210.,  13943.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,   181640.,   240560.,   307608.,   332920.,   358232.,
      383544.,   358256.,   323560.,   279200.,   275960.,   374750.,
      486100.,   610330.,   649810.,   689290.,   728770.,   669700.,
      596150.,   507800.,   502256.,   671740.,   859560.,   1066100.,
      1122884.,  1179668.,  1236452.,  1123656.,  990220.,   835760.,
      827400.,   1095010.,  1387820.,  1706278.,  1783502.,  1860726.,
      1937950.,  1747004.,  1528170.,  1281000.,  1241800.,  1624210.,
      2036300.,  2478518.,  2555742.,  2632966.,  2710190.,  2422364.,
      2102170.,  1749160.,  1656200.,  2153410.,  2684780.,  3250758.,
      3327982.,  3405206.,  3482430.,  3097724.,  2676170.,  2217320.,
      2020784.,  2605420.,  3222600.,  3872708.,  3948308.,  4023908.,
      4099508.,  3620328.,  3106300.,  2557040.,  2214840.,  2841550.,
      3498100.,  4184810.,  4255650.,  4326490.,  4397330.,  3866020.,
      3302950.,  2707800.,  2220448.,  2839400.,  3484400.,  4155704.,
      4218648.,  4281592.,  4344536.,  3807920.,  3243720.,  2651680.,
      1294112.,  1693640.,  2124080.,  2585688.,  2611000.,  2636312.,
      2661624.,  2380016.,  2065960.,  1719200.,  2133560.,  2768750.,
      3445300.,  4163530.,  4203010.,  4242490.,  4281970.,  3801700.,
      3278150.,  2711000.,  3215216.,  4149340.,  5136360.,  6176660.,
      6233444.,  6290228.,  6347012.,  5607816.,  4813420.,  3963440.,
      4557000.,  5857810.,  7224140.,  8656438.,  8733662.,  8810886.,
      8888110.,  7825244.,  6694170.,  5494440.,  4971400.,  6387010.,
      7872620.,  9428678.,  9505902.,  9583126.,  9660350.,  8500604.,
      7268170.,  5962600.,  5385800.,  6916210.,  8521100.,  10200918.,
      10278142., 10355366., 10432590., 9175964.,  7842170.,  6430760.,
      5701424.,  7292620.,  8950920.,  10676708., 10752308., 10827908.,
      10903508., 9556008.,  8139100.,  6652400.,  5685240.,  7251550.,
      8876500.,  10560410., 10631250., 10702090., 10772930., 9417220.,
      8000950.,  6523800.,  5319328.,  6770600.,  8270960.,  9820664.,
      9883608.,  9946552.,  10009496., 8732720.,  7405320.,  6027040.,
      2457632.,  3205640.,  4007600.,  4863768.,  4889080.,  4914392.,
      4939704.,  4401776.,  3808360.,  3159200.,  3991160.,  5162750.,
      6404500.,  7716730.,  7756210.,  7795690.,  7835170.,  6933700.,
      5960150.,  4914200.,  5928176.,  7626940.,  9413160.,  11287220.,
      11344004., 11400788., 11457572., 10091976., 8636620.,  7091120.,
      8286600.,  10620610., 13060460., 15606598., 15683822., 15761046.,
      15838270., 13903484., 11860170., 9707880.,  8701000.,  11149810.,
      13708940., 16368598., 16419198., 16453414., 16471246., 14374044.,
      12163834., 9840168.,  8976136.,  11463970., 14050220., 16610406.,
      16546318., 16465846., 16368990., 14185148., 11900202., 9513704.,
      8784048.,  11191340., 13683912., 16022532., 15842132., 15645348.,
      15432180., 13275752., 11031740., 8699760.,  8098872.,  10299630.,
      12571444., 14560330., 14260482., 13944250., 13611634., 11605604.,
      9526598.,  7374296.,  6902688.,  8766440.,  10685936., 12192440.,
      11770008., 11331192., 10875992., 9147824.,  7362376.,  5519392.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 1024.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    856.,    1400.,   1944.,   2488.,   2722.,
      2428.,   1542.,   500.,    1864.,   4220.,   7696.,   9808.,   11920.,
      14032.,  13292.,  10792.,  6404.,   3202.,   8756.,   16854.,  27688.,
      32392.,  37096.,  41800.,  37086.,  28676.,  16378.,  9418.,   22532.,
      39534.,  60616.,  65320.,  70024.,  74728.,  63798.,  47828.,  26626.,
      15634.,  36308.,  62214.,  93544.,  98248.,  102952., 107656., 90510.,
      66980.,  36874.,  21850.,  50084.,  84894.,  126472., 131176., 135880.,
      140584., 117222., 86132.,  47122.,  28066.,  63860.,  107574., 159400.,
      164104., 168808., 173512., 143934., 105284., 57370.,  32292.,  70440.,
      114572., 164816., 168976., 173136., 177296., 143228., 102408., 54708.,
      23534.,  50348.,  80506.,  114072., 116664., 119256., 121848., 97042.,
      68508.,  36182.,  510.,    1868.,   4138.,   7384.,   11000.,  14616.,
      18232.,  15682.,  11836.,  6630.,   6836.,   16072.,  27836.,  42256.,
      50512.,  58768.,  67024.,  55340.,  40360.,  21956.,  20770.,  46196.,
      76470.,  111784., 125704., 139624., 153544., 124350., 89156.,  47770.,
      43114.,  92228.,  147534., 209224., 223144., 237064., 250984., 199446.,
      140564., 74146.,  65458.,  138260., 218598., 306664., 320584., 334504.,
      348424., 274542., 191972., 100522., 87802.,  184292., 289662., 404104.,
      418024., 431944., 445864., 349638., 243380., 126898., 110146., 230324.,
      360726., 501544., 515464., 529384., 543304., 424734., 294788., 153274.,
      92388.,  192168., 299468., 414416., 424720., 435024., 445328., 346556.,
      239496., 124020., 56270.,  116588., 181018., 249624., 255288., 260952.,
      266616., 206770., 142428., 73526.,  990.,    3596.,   7882.,   13912.,
      20600.,  27288.,  33976.,  28642.,  21244.,  11718.,  13172.,  30280.,
      51452.,  76816.,  91216.,  105616., 120016., 97388.,  69928.,  37508.,
      38338.,  83636.,  136086., 195880., 219016., 242152., 265288., 211614.,
      149636., 79162.,  76810.,  161924., 255534., 357832., 380968., 404104.,
      427240., 335094., 233300., 121666., 115282., 240212., 374982., 519784.,
      542920., 566056., 589192., 458574., 316964., 164170., 153754., 318500.,
      494430., 681736., 704872., 728008., 751144., 582054., 400628., 206674.,
      192226., 396788., 613878., 843688., 866824., 889960., 913096., 705534.,
      484292., 249178., 152484., 313896., 484364., 664016., 680464., 696912.,
      713360., 549884., 376584., 193332., 89006.,  182828., 281530., 385176.,
      393912., 402648., 411384., 316498., 216348., 110870.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  51870.,  53340.,  67445.,  69300.,
      84091.,  86338.,  101822., 104468., 104223., 106918., 106624., 109368.,
      109025., 111818., 96985.,  99400.,  83790.,  85820.,  69426.,  71064.,
      63280.,  64660.,  81590.,  83330.,  100920., 103026., 121282., 123760.,
      123634., 126154., 125986., 128548., 128338., 130942., 113340., 115590.,
      97250.,  99140.,  80056.,  81580.,  69350.,  70600.,  88975.,  90550.,
      109535., 111440., 131040., 133280., 133245., 135520., 135450., 137760.,
      137655., 140000., 121025., 123050., 103400., 105100., 84770.,  86140.,
      69520.,  70600.,  88900.,  90260.,  109096., 110740., 130116., 132048.,
      132076., 134036., 134036., 136024., 135996., 138012., 119200., 120940.,
      101540., 103000., 83008.,  84184.,  40160.,  41880.,  52580.,  54740.,
      65968.,  68572.,  80332.,  83384.,  81116.,  84196.,  81900.,  85008.,
      82684.,  85820.,  73960.,  76660.,  64220.,  66480.,  53456.,  55272.,
      66350.,  68600.,  86125.,  88950.,  107195., 110600., 129570., 133560.,
      130795., 134820., 132020., 136080., 133245., 137340., 118325., 121850.,
      102050., 105000., 84410.,  86780.,  100120., 102940., 129230., 132770.,
      159996., 164262., 192430., 197428., 194194., 199234., 195958., 201040.,
      197722., 202846., 174720., 179130., 149990., 153680., 123520., 126484.,
      142030., 145460., 182595., 186900., 225211., 230398., 269892., 275968.,
      272293., 278418., 274694., 280868., 277095., 283318., 243985., 249340.,
      208740., 213220., 171346., 174944., 154910., 158620., 199045., 203700.,
      245371., 250978., 293902., 300468., 296303., 302918., 298704., 305368.,
      301105., 307818., 264985., 270760., 226590., 231420., 185906., 189784.,
      167790., 171780., 215495., 220500., 265531., 271558., 317912., 324968.,
      320313., 327418., 322714., 329868., 325115., 332318., 285985., 292180.,
      244440., 249620., 200466., 204624., 177760., 181300., 227390., 231830.,
      279120., 284466., 332962., 339220., 335314., 341614., 337666., 344008.,
      340018., 346402., 298020., 303510., 253850., 258440., 207496., 211180.,
      177350., 180400., 226225., 230050., 276935., 281540., 329490., 334880.,
      331695., 337120., 333900., 339360., 336105., 341600., 293825., 298550.,
      249650., 253600., 203570., 206740., 166000., 168520., 211300., 214460.,
      258136., 261940., 306516., 310968., 308476., 312956., 310436., 314944.,
      312396., 316932., 272560., 276460., 231140., 234400., 188128., 190744.,
      76160.,  79320.,  99380.,  103340., 124288., 129052., 150892., 156464.,
      151676., 157276., 152460., 158088., 153244., 158900., 136600., 141460.,
      118220., 122280., 98096.,  101352., 123950., 128000., 160375., 165450.,
      198995., 205100., 239820., 246960., 241045., 248220., 242270., 249480.,
      243495., 250740., 215525., 221750., 185300., 190500., 152810., 156980.,
      184360., 189340., 237230., 243470., 292836., 300342., 351190., 359968.,
      352954., 361774., 354718., 363580., 356482., 365386., 314040., 321690.,
      268790., 275180., 220720., 225844., 257950., 263900., 330645., 338100.,
      406651., 415618., 485982., 496468., 488383., 498918., 490784., 501368.,
      493185., 503818., 432985., 442120., 369390., 377020., 302386., 308504.,
      270830., 277060., 347095., 354900., 426811., 436198., 509992., 520968.,
      512393., 523418., 514794., 525868., 517195., 528318., 453985., 463540.,
      387240., 395220., 316946., 323344., 283710., 290220., 363545., 371700.,
      446971., 456778., 534002., 545468., 536403., 547918., 538804., 550368.,
      541205., 552818., 474985., 484960., 405090., 413420., 331506., 338184.,
      292240., 297940., 373190., 380330., 457320., 465906., 544642., 554680.,
      546994., 557074., 549346., 559468., 551698., 561862., 482700., 491430.,
      410450., 417740., 334936., 340780., 285350., 290200., 363475., 369550.,
      444335., 451640., 527940., 536480., 530145., 538720., 532350., 540960.,
      534555., 543200., 466625., 474050., 395900., 402100., 322370., 327340.,
      262480., 266440., 333700., 338660., 407176., 413140., 482916., 489888.,
      484876., 491876., 486836., 493864., 488796., 495852., 425920., 431980.,
      360740., 365800., 293248., 297304.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     14.,    20.,    30.,    40.,    50.,
      60.,    70.,    80.,    90.,    100.,   95.,    104.,   83.,    90.,
      52.,    56.,    20.,    26.,    68.,    82.,    148.,   172.,   264.,
      300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,
      360.,   382.,   212.,   224.,   113.,   128.,   301.,   334.,   570.,
      624.,   926.,   1004.,  1082.,  1160.,  1238.,  1316.,  1394.,  1472.,
      1227.,  1290.,  943.,   988.,   536.,   560.,   323.,   338.,   763.,
      796.,   1326.,  1380.,  2018.,  2096.,  2174.,  2252.,  2330.,  2408.,
      2486.,  2564.,  2109.,  2172.,  1573.,  1618.,  872.,   896.,   533.,
      548.,   1225.,  1258.,  2082.,  2136.,  3110.,  3188.,  3266.,  3344.,
      3422.,  3500.,  3578.,  3656.,  2991.,  3054.,  2203.,  2248.,  1208.,
      1232.,  743.,   758.,   1687.,  1720.,  2838.,  2892.,  4202.,  4280.,
      4358.,  4436.,  4514.,  4592.,  4670.,  4748.,  3873.,  3936.,  2833.,
      2878.,  1544.,  1568.,  953.,   968.,   2149.,  2182.,  3594.,  3648.,
      5294.,  5372.,  5450.,  5528.,  5606.,  5684.,  5762.,  5840.,  4755.,
      4818.,  3463.,  3508.,  1880.,  1904.,  1064.,  1078.,  2312.,  2342.,
      3748.,  3796.,  5376.,  5444.,  5512.,  5580.,  5648.,  5716.,  5784.,
      5852.,  4660.,  4714.,  3324.,  3362.,  1772.,  1792.,  765.,   774.,
      1633.,  1652.,  2606.,  2636.,  3686.,  3728.,  3770.,  3812.,  3854.,
      3896.,  3938.,  3980.,  3131.,  3164.,  2207.,  2230.,  1164.,  1176.,
      13.,    26.,    53.,    80.,    122.,   164.,   222.,   280.,   338.,
      396.,   454.,   512.,   570.,   628.,   491.,   536.,   371.,   402.,
      208.,   224.,   212.,   242.,   500.,   562.,   868.,   964.,   1320.,
      1452.,  1584.,  1716.,  1848.,  1980.,  2112.,  2244.,  1744.,  1846.,
      1272.,  1342.,  692.,   728.,   653.,   704.,   1453.,  1558.,  2406.,
      2568.,  3518.,  3740.,  3962.,  4184.,  4406.,  4628.,  4850.,  5072.,
      3927.,  4098.,  2815.,  2932.,  1508.,  1568.,  1367.,  1418.,  2923.,
      3028.,  4674.,  4836.,  6626.,  6848.,  7070.,  7292.,  7514.,  7736.,
      7958.,  8180.,  6321.,  6492.,  4453.,  4570.,  2348.,  2408.,  2081.,
      2132.,  4393.,  4498.,  6942.,  7104.,  9734.,  9956.,  10178., 10400.,
      10622., 10844., 11066., 11288., 8715.,  8886.,  6091.,  6208.,  3188.,
      3248.,  2795.,  2846.,  5863.,  5968.,  9210.,  9372.,  12842., 13064.,
      13286., 13508., 13730., 13952., 14174., 14396., 11109., 11280., 7729.,
      7846.,  4028.,  4088.,  3509.,  3560.,  7333.,  7438.,  11478., 11640.,
      15950., 16172., 16394., 16616., 16838., 17060., 17282., 17504., 13503.,
      13674., 9367.,  9484.,  4868.,  4928.,  2936.,  2974.,  6104.,  6182.,
      9508.,  9628.,  13152., 13316., 13480., 13644., 13808., 13972., 14136.,
      14300., 10996., 11122., 7596.,  7682.,  3932.,  3976.,  1785.,  1806.,
      3697.,  3740.,  5738.,  5804.,  7910.,  8000.,  8090.,  8180.,  8270.,
      8360.,  8450.,  8540.,  6551.,  6620.,  4511.,  4558.,  2328.,  2352.,
      25.,    50.,    101.,   152.,   230.,   308.,   414.,   520.,   626.,
      732.,   838.,   944.,   1050.,  1156.,  887.,   968.,   659.,   714.,
      364.,   392.,   404.,   458.,   932.,   1042.,  1588.,  1756.,  2376.,
      2604.,  2832.,  3060.,  3288.,  3516.,  3744.,  3972.,  3040.,  3214.,
      2184.,  2302.,  1172.,  1232.,  1193.,  1280.,  2605.,  2782.,  4242.,
      4512.,  6110.,  6476.,  6842.,  7208.,  7574.,  7940.,  8306.,  8672.,
      6627.,  6906.,  4687.,  4876.,  2480.,  2576.,  2411.,  2498.,  5083.,
      5260.,  8022.,  8292.,  11234., 11600., 11966., 12332., 12698., 13064.,
      13430., 13796., 10533., 10812., 7333.,  7522.,  3824.,  3920.,  3629.,
      3716.,  7561.,  7738.,  11802., 12072., 16358., 16724., 17090., 17456.,
      17822., 18188., 18554., 18920., 14439., 14718., 9979.,  10168., 5168.,
      5264.,  4847.,  4934.,  10039., 10216., 15582., 15852., 21482., 21848.,
      22214., 22580., 22946., 23312., 23678., 24044., 18345., 18624., 12625.,
      12814., 6512.,  6608.,  6065.,  6152.,  12517., 12694., 19362., 19632.,
      26606., 26972., 27338., 27704., 28070., 28436., 28802., 29168., 22251.,
      22530., 15271., 15460., 7856.,  7952.,  4808.,  4870.,  9896.,  10022.,
      15268., 15460., 20928., 21188., 21448., 21708., 21968., 22228., 22488.,
      22748., 17332., 17530., 11868., 12002., 6092.,  6160.,  2805.,  2838.,
      5761.,  5828.,  8870.,  8972.,  12134., 12272., 12410., 12548., 12686.,
      12824., 12962., 13100., 9971.,  10076., 6815.,  6886.,  3492.,  3528.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,   34144.,   44500.,   47340.,   59024.,   62528.,   75572.,
      79772.,   81788.,   86212.,   88004.,   92652.,   94220.,   99092.,
      88112.,   92384.,   79660.,   83300.,   68800.,   71776.,   67840.,
      71400.,   92225.,   96775.,   119740.,  125320.,  150465.,  157115.,
      160195.,  167125.,  169925.,  177135.,  179655.,  187145.,  165220.,
      171760.,  147175.,  152725.,  125440.,  129960.,  123872.,  129104.,
      165790.,  172450.,  212280.,  220416.,  263438.,  273098.,  277466.,
      287462.,  291494.,  301826.,  305522.,  316190.,  277800.,  287088.,
      244930.,  252790.,  206816.,  213200.,  204512.,  211736.,  270795.,
      279965.,  343364.,  354536.,  422331.,  435561.,  441441.,  455063.,
      460551.,  474565.,  479661.,  494067.,  432572.,  445088.,  378525.,
      389095.,  317408.,  325976.,  306992.,  316456.,  401695.,  413665.,
      503804.,  518336.,  613431.,  630581.,  632541.,  650083.,  651651.,
      669585.,  670761.,  689087.,  599732.,  615608.,  520625.,  533995.,
      433328.,  444136.,  409472.,  421176.,  532595.,  547365.,  664244.,
      682136.,  804531.,  825601.,  823641.,  845103.,  842751.,  864605.,
      861861.,  884107.,  766892.,  786128.,  662725.,  678895.,  549248.,
      562296.,  500960.,  511952.,  646030.,  659890.,  799224.,  816000.,
      960638.,  980378.,  979370.,  999446.,  998102.,  1018514., 1016834.,
      1037582., 898152.,  916080.,  770770.,  785830.,  634592.,  646736.,
      549920.,  559880.,  705625.,  718175.,  868780.,  883960.,  1039465.,
      1057315., 1057035., 1075165., 1074605., 1093015., 1092175., 1110865.,
      960340.,  976480.,  820575.,  834125.,  672800.,  683720.,  551872.,
      560480.,  705780.,  716620.,  866192.,  879296.,  1033172., 1048572.,
      1048796., 1064420., 1064420., 1080268., 1080044., 1096116., 946736.,
      960608.,  806540.,  818180.,  659392.,  668768.,  317056.,  330784.,
      415300.,  432540.,  521264.,  542048.,  635012.,  659372.,  641228.,
      665812.,  647444.,  672252.,  653660.,  678692.,  584912.,  606464.,
      508060.,  526100.,  423040.,  437536.,  525040.,  543000.,  681725.,
      704275.,  848740.,  875920.,  1026165., 1058015., 1035895., 1068025.,
      1045625., 1078035., 1055355., 1088045., 937420.,  965560.,  808675.,
      832225.,  669040.,  687960.,  793472.,  815984.,  1024390., 1052650.,
      1268520., 1302576., 1525958., 1565858., 1539986., 1580222., 1554014.,
      1594586., 1568042., 1608950., 1385880., 1421088., 1189930., 1219390.,
      980096.,  1003760., 1126832., 1154216., 1448895., 1483265., 1787324.,
      1828736., 2142231., 2190741., 2161341., 2210243., 2180451., 2229745.,
      2199561., 2249247., 1937012., 1979768., 1657425., 1693195., 1360688.,
      1389416., 1229312., 1258936., 1579795., 1616965., 1947764., 1992536.,
      2333331., 2385761., 2352441., 2405263., 2371551., 2424765., 2390661.,
      2444267., 2104172., 2150288., 1799525., 1838095., 1476608., 1507576.,
      1331792., 1363656., 1710695., 1750665., 2108204., 2156336., 2524431.,
      2580781., 2543541., 2600283., 2562651., 2619785., 2581761., 2639287.,
      2271332., 2320808., 1941625., 1982995., 1592528., 1625736., 1412480.,
      1440752., 1807030., 1842490., 2218344., 2261040., 2646518., 2696498.,
      2665250., 2715566., 2683982., 2734634., 2702714., 2753702., 2369112.,
      2412960., 2018170., 2054830., 1649792., 1679216., 1410320., 1434680.,
      1799125., 1829675., 2202580., 2239360., 2620765., 2663815., 2638335.,
      2681665., 2655905., 2699515., 2673475., 2717365., 2337340., 2375080.,
      1986075., 2017625., 1619600., 1644920., 1320832., 1340960., 1681380.,
      1706620., 2054192., 2084576., 2439332., 2474892., 2454956., 2490740.,
      2470580., 2506588., 2486204., 2522436., 2169296., 2200448., 1839740.,
      1865780., 1497472., 1518368., 602176.,  627424.,  786100.,  817740.,
      983504.,  1021568., 1194452., 1238972., 1200668., 1245412., 1206884.,
      1251852., 1213100., 1258292., 1081712., 1120544., 936460.,  968900.,
      777280.,  803296.,  982240.,  1014600., 1271225., 1311775., 1577740.,
      1626520., 1901865., 1958915., 1911595., 1968925., 1921325., 1978935.,
      1931055., 1988945., 1709620., 1759360., 1470175., 1511725., 1212640.,
      1245960., 1463072., 1502864., 1882990., 1932850., 2324760., 2384736.,
      2788478., 2858618., 2802506., 2872982., 2816534., 2887346., 2830562.,
      2901710., 2493960., 2555088., 2134930., 2185990., 1753376., 1794320.,
      2049152., 2096696., 2626995., 2686565., 3231284., 3302936., 3862131.,
      3945921., 3881241., 3965423., 3900351., 3984925., 3919461., 4004427.,
      3441452., 3514448., 2936325., 2997295., 2403968., 2452856., 2151632.,
      2201416., 2757895., 2820265., 3391724., 3466736., 4053231., 4140941.,
      4072341., 4160443., 4091451., 4179945., 4110561., 4199447., 3608612.,
      3684968., 3078425., 3142195., 2519888., 2571016., 2254112., 2306136.,
      2888795., 2953965., 3552164., 3630536., 4244331., 4335961., 4263441.,
      4355463., 4282551., 4374965., 4301661., 4394467., 3775772., 3855488.,
      3220525., 3287095., 2635808., 2689176., 2324000., 2369552., 2968030.,
      3025090., 3637464., 3706080., 4332398., 4412618., 4351130., 4431686.,
      4369862., 4450754., 4388594., 4469822., 3840072., 3909840., 3265570.,
      3323830., 2664992., 2711696., 2270720., 2309480., 2892625., 2941175.,
      3536380., 3594760., 4202065., 4270315., 4219635., 4288165., 4237205.,
      4306015., 4254775., 4323865., 3714340., 3773680., 3151575., 3201125.,
      2566400., 2606120., 2089792., 2121440., 2656980., 2696620., 3242192.,
      3289856., 3845492., 3901212., 3861116., 3917060., 3876740., 3932908.,
      3892364., 3948756., 3391856., 3440288., 2872940., 2913380., 2335552.,
      2367968.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     28.,     48.,     85.,     127.,    192.,    264.,
      336.,    408.,    480.,    552.,    624.,    696.,    679.,    745.,
      604.,    656.,    383.,    413.,    118.,    162.,    448.,    552.,
      1022.,   1202.,   1872.,   2144.,   2416.,   2688.,   2960.,   3232.,
      3504.,   3776.,   3314.,   3542.,   2688.,   2856.,   1594.,   1686.,
      787.,    901.,    2156.,   2408.,   4155.,   4569.,   6832.,   7432.,
      8032.,   8632.,   9232.,   9832.,   10432.,  11032.,  9249.,   9735.,
      7148.,   7496.,   4081.,   4267.,   2383.,   2497.,   5684.,   5936.,
      9951.,   10365.,  15232.,  15832.,  16432.,  17032.,  17632.,  18232.,
      18832.,  19432.,  16053.,  16539.,  12020.,  12368.,  6685.,   6871.,
      3979.,   4093.,   9212.,   9464.,   15747.,  16161.,  23632.,  24232.,
      24832.,  25432.,  26032.,  26632.,  27232.,  27832.,  22857.,  23343.,
      16892.,  17240.,  9289.,   9475.,   5575.,   5689.,   12740.,  12992.,
      21543.,  21957.,  32032.,  32632.,  33232.,  33832.,  34432.,  35032.,
      35632.,  36232.,  29661.,  30147.,  21764.,  22112.,  11893.,  12079.,
      7171.,   7285.,   16268.,  16520.,  27339.,  27753.,  40432.,  41032.,
      41632.,  42232.,  42832.,  43432.,  44032.,  44632.,  36465.,  36951.,
      26636.,  26984.,  14497.,  14683.,  8174.,   8282.,   17808.,  18040.,
      28934.,  29306.,  41584.,  42112.,  42640.,  43168.,  43696.,  44224.,
      44752.,  45280.,  36122.,  36542.,  25808.,  26104.,  13778.,  13934.,
      5933.,   6003.,   12684.,  12832.,  20269.,  20503.,  28704.,  29032.,
      29360.,  29688.,  30016.,  30344.,  30672.,  31000.,  24415.,  24673.,
      17228.,  17408.,  9095.,   9189.,   77.,     179.,    364.,    576.,
      877.,    1207.,   1632.,   2088.,   2544.,   3000.,   3456.,   3912.,
      4368.,   4824.,   3775.,   4129.,   2860.,   3104.,   1607.,   1733.,
      1606.,   1842.,   3808.,   4296.,   6638.,   7394.,   10128.,  11168.,
      12208.,  13248.,  14288.,  15328.,  16368.,  17408.,  13538.,  14342.,
      9888.,   10440.,  5386.,   5670.,   5035.,   5437.,   11228.,  12056.,
      18627.,  19905.,  27280.,  29032.,  30784.,  32536.,  34288.,  36040.,
      37792.,  39544.,  30633.,  31983.,  21980.,  22904.,  11785.,  12259.,
      10663.,  11065.,  22820.,  23648.,  36519.,  37797.,  51808.,  53560.,
      55312.,  57064.,  58816.,  60568.,  62320.,  64072.,  49533.,  50883.,
      34916.,  35840.,  18421.,  18895.,  16291.,  16693.,  34412.,  35240.,
      54411.,  55689.,  76336.,  78088.,  79840.,  81592.,  83344.,  85096.,
      86848.,  88600.,  68433.,  69783.,  47852.,  48776.,  25057.,  25531.,
      21919.,  22321.,  46004.,  46832.,  72303.,  73581.,  100864., 102616.,
      104368., 106120., 107872., 109624., 111376., 113128., 87333.,  88683.,
      60788.,  61712.,  31693.,  32167.,  27547.,  27949.,  57596.,  58424.,
      90195.,  91473.,  125392., 127144., 128896., 130648., 132400., 134152.,
      135904., 137656., 106233., 107583., 73724.,  74648.,  38329.,  38803.,
      23102.,  23402.,  48048.,  48664.,  74870.,  75818.,  103600., 104896.,
      106192., 107488., 108784., 110080., 111376., 112672., 86666.,  87662.,
      59888.,  60568.,  31010.,  31358.,  14069.,  14235.,  29148.,  29488.,
      45253.,  45775.,  62400.,  63112.,  63824.,  64536.,  65248.,  65960.,
      66672.,  67384.,  51703.,  52249.,  35612.,  35984.,  18383.,  18573.,
      149.,    347.,    700.,    1104.,   1669.,   2287.,   3072.,   3912.,
      4752.,   5592.,   6432.,   7272.,   8112.,   8952.,   6871.,   7513.,
      5116.,   5552.,   2831.,   3053.,   3094.,   3522.,   7168.,   8040.,
      12254.,  13586.,  18384.,  20192.,  22000.,  23808.,  25616.,  27424.,
      29232.,  31040.,  23762.,  25142.,  17088.,  18024.,  9178.,   9654.,
      9283.,   9973.,   20300.,  21704.,  33099.,  35241.,  47728.,  50632.,
      53536.,  56440.,  59344.,  62248.,  65152.,  68056.,  52017.,  54231.,
      36812.,  38312.,  19489.,  20251.,  18943.,  19633.,  39956.,  41360.,
      63087.,  65229.,  88384.,  91288.,  94192.,  97096.,  100000., 102904.,
      105808., 108712., 83013.,  85227.,  57812.,  59312.,  30157.,  30919.,
      28603.,  29293.,  59612.,  61016.,  93075.,  95217.,  129040., 131944.,
      134848., 137752., 140656., 143560., 146464., 149368., 114009., 116223.,
      78812.,  80312.,  40825.,  41587.,  38263.,  38953.,  79268.,  80672.,
      123063., 125205., 169696., 172600., 175504., 178408., 181312., 184216.,
      187120., 190024., 145005., 147219., 99812.,  101312., 51493.,  52255.,
      47923.,  48613.,  98924.,  100328., 153051., 155193., 210352., 213256.,
      216160., 219064., 221968., 224872., 227776., 230680., 176001., 178215.,
      120812., 122312., 62161.,  62923.,  38030.,  38522.,  78288.,  79288.,
      120806., 122330., 165616., 167680., 169744., 171808., 173872., 175936.,
      178000., 180064., 137210., 138782., 93968.,  95032.,  48242.,  48782.,
      22205.,  22467.,  45612.,  46144.,  70237.,  71047.,  96096.,  97192.,
      98288.,  99384.,  100480., 101576., 102672., 103768., 78991.,  79825.,
      53996.,  54560.,  27671.,  27957.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,   267680.,   349080.,   371640.,   463600.,   491440.,
      594216.,   627592.,   643720.,   678888.,   693224.,   730184.,
      742728.,   781480.,   695152.,   729136.,   628920.,   657880.,
      543520.,   567200.,   534120.,   562440.,   726750.,   762950.,
      944300.,   988700.,   1187410.,  1240330.,  1264970.,  1320130.,
      1342530.,  1399930.,  1420090.,  1479730.,  1306700.,  1358780.,
      1164550.,  1208750.,  993000.,   1029000.,  978352.,   1020016.,
      1310180.,  1363220.,  1678440.,  1743240.,  2083900.,  2160844.,
      2195788.,  2275420.,  2307676.,  2389996.,  2419564.,  2504572.,
      2200872.,  2274888.,  1941140.,  2003780.,  1639600.,  1690480.,
      1618680.,  1676248.,  2144170.,  2217250.,  2719780.,  2808820.,
      3346406.,  3451854.,  3498894.,  3607478.,  3651382.,  3763102.,
      3803870.,  3918726.,  3431428.,  3531220.,  3003490.,  3087770.,
      2519160.,  2587480.,  2436280.,  2511768.,  3188570.,  3284050.,
      3999940.,  4115860.,  4871286.,  5008094.,  5023774.,  5163718.,
      5176262.,  5319342.,  5328750.,  5474966.,  4765348.,  4892020.,
      4137490.,  4244170.,  3444280.,  3530520.,  3253880.,  3347288.,
      4232970.,  4350850.,  5280100.,  5422900.,  6396166.,  6564334.,
      6548654.,  6719958.,  6701142.,  6875582.,  6853630.,  7031206.,
      6099268.,  6252820.,  5271490.,  5400570.,  4369400.,  4473560.,
      3986608.,  4074352.,  5141540.,  5252180.,  6361320.,  6495240.,
      7646716.,  7804300.,  7796236.,  7956508.,  7945756.,  8108716.,
      8095276.,  8260924.,  7151016.,  7294152.,  6137300.,  6257540.,
      5053360.,  5150320.,  4379880.,  4459400.,  5620350.,  5720550.,
      6920300.,  7041500.,  8280370.,  8422890.,  8420650.,  8565410.,
      8560930.,  8707930.,  8701210.,  8850450.,  7651340.,  7780220.,
      6538150.,  6646350.,  5361000.,  5448200.,  4397856.,  4466592.,
      5624600.,  5711160.,  6903280.,  7007920.,  8234408.,  8357384.,
      8359176.,  8483944.,  8483944.,  8610504.,  8608712.,  8737064.,
      7546480.,  7657264.,  6429240.,  6522200.,  5256480.,  5331360.,
      2519584.,  2629280.,  3301080.,  3438840.,  4144240.,  4310320.,
      5049576.,  5244232.,  5099080.,  5295528.,  5143464.,  5333512.,
      5171464.,  5355112.,  4592880.,  4748720.,  3949560.,  4077336.,
      3240992.,  3340448.,  4058536.,  4169288.,  5235310.,  5374550.,
      6478220.,  6646268.,  7787906.,  7985082.,  7865466.,  8064882.,
      7823218.,  8016682.,  7764586.,  7952098.,  6799148.,  6958492.,
      5763734.,  5894590.,  4657704.,  4759752.,  5621552.,  5735920.,
      7205060.,  7348980.,  8861352.,  9035208.,  10591196., 10795372.,
      10703084., 10909948., 10580476., 10781836., 10441484., 10637340.,
      9083752.,  9250440.,  7648628.,  7785764.,  6135344.,  6242544.,
      7244472.,  7365016.,  9255130.,  9406930.,  11347396., 11530900.,
      13522166., 13737822., 13674654., 13893446., 13477958., 13691694.,
      13264878., 13473558., 11500452., 11678324., 9649042.,  9795658.,
      7709752.,  7824664.,  6567032.,  6672728.,  8389770.,  8523010.,
      10286692., 10447924., 12258694., 12448366., 12411182., 12603990.,
      12099798., 12287550., 11772030., 11954726., 10165828., 10321428.,
      8480066.,  8608122.,  6713848.,  6813912.,  5430840.,  5521688.,
      6950970.,  7065650.,  8537860.,  8676820.,  10192406., 10356094.,
      10344894., 10511718., 9918822.,  10080590., 9476366.,  9633078.,
      8143076.,  8276404.,  6737650.,  6847146.,  5259192.,  5344408.,
      3786288.,  3848432.,  4859140.,  4937780.,  5984040.,  6079560.,
      7161756.,  7274540.,  7311276.,  7426748.,  6767548.,  6877516.,
      6207436.,  6311900.,  5261288.,  5349640.,  4258484.,  4330340.,
      3198256.,  3253232.,  1479720.,  1510600.,  1934350.,  1973750.,
      2424140.,  2472380.,  2949730.,  3007130.,  3090010.,  3149650.,
      3230290.,  3292170.,  3370570.,  3434690.,  3009260.,  3065180.,
      2608950.,  2656350.,  2169000.,  2207560.,  1805344.,  1835168.,
      2335320.,  2373240.,  2897776.,  2944048.,  3493224.,  3548104.,
      3617992.,  3674664.,  3742760.,  3801224.,  3867528.,  3927784.,
      3424240.,  3476656.,  2945400.,  2989720.,  2430496.,  2466464.,
      1561376.,  1632160.,  2054680.,  2143800.,  2590192.,  2697904.,
      3168424.,  3294984.,  3217928.,  3346280.,  3267432.,  3397576.,
      3316936.,  3448872.,  2981488.,  3095344.,  2600760.,  2696280.,
      2174240.,  2251168.,  2639080.,  2733960.,  3441150.,  3560550.,
      4301420.,  4445660.,  5220530.,  5389930.,  5298090.,  5469730.,
      5375650.,  5549530.,  5453210.,  5629330.,  4863500.,  5015420.,
      4211750.,  4339150.,  3497320.,  3599880.,  4063408.,  4184944.,
      5266340.,  5419220.,  6545640.,  6730248.,  7902076.,  8118796.,
      8013964.,  8233372.,  8125852.,  8347948.,  8237740.,  8462524.,
      7307688.,  7501512.,  6296660.,  6459140.,  5203888.,  5334640.,
      5870200.,  6020952.,  7575050.,  7764610.,  9376612.,  9605428.,
      11275782., 11544302., 11428270., 11699926., 11580758., 11855550.,
      11733246., 12011174., 10367812., 10607380., 8900290.,  9101050.,
      7329784.,  7491288.,  6687800.,  6856472.,  8619450.,  8831410.,
      10656772., 10912468., 12795542., 13087230., 12926526., 13213158.,
      13041126., 13322702., 13139342., 13415862., 11517412., 11751092.,
      9784434.,  9974826.,  7939512.,  8086168.,  7386616.,  7540440.,
      9474410.,  9667810.,  11660452., 11893876., 13825830., 14091534.,
      13842126., 14102774., 13842038., 14097630., 13825566., 14076102.,
      12017796., 12229204., 10106402., 10278234., 8090488.,  8222296.,
      7612336.,  7747184.,  9732580.,  9902100.,  11941224., 12145800.,
      14004540., 14236364., 13903180., 14129500., 13785436., 14006252.,
      13651308., 13866620., 11770408., 11951432., 9796500.,  9942852.,
      7728816.,  7840112.,  7312232.,  7425544.,  9328030.,  9470470.,
      11420204., 11592092., 13240210., 13433674., 13014922., 13202434.,
      12773250., 12954810., 12515194., 12690802., 10692044., 10838844.,
      8788678.,  8906350.,  6804456.,  6892680.,  6450464.,  6539680.,
      8215960.,  8328120.,  10043632., 10178992., 11470120., 11620744.,
      11114632., 11258856., 10742760., 10880584., 10354504., 10485928.,
      8728944.,  8837680.,  7038136.,  7123928.,  5281568.,  5344160.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      180.,     324.,     578.,     890.,     1352.,
      1896.,    2440.,    2984.,    3528.,    4072.,    4616.,    5160.,
      5114.,    5618.,    4596.,    4996.,    2934.,    3166.,    780.,
      1116.,    3208.,    4008.,    7540.,    8932.,    14032.,   16144.,
      18256.,   20368.,   22480.,   24592.,   26704.,   28816.,   25444.,
      27220.,   20744.,   22056.,   12348.,   13068.,   5834.,    6722.,
      16252.,   18220.,   31638.,   34878.,   52376.,   57080.,   61784.,
      66488.,   71192.,   75896.,   80600.,   85304.,   71742.,   75558.,
      55612.,   58348.,   31826.,   33290.,   18266.,   19154.,   43804.,
      45772.,   76998.,   80238.,   118232.,  122936.,  127640.,  132344.,
      137048.,  141752.,  146456.,  151160.,  125166.,  128982.,  93916.,
      96652.,   52322.,   53786.,   30698.,   31586.,   71356.,   73324.,
      122358.,  125598.,  184088.,  188792.,  193496.,  198200.,  202904.,
      207608.,  212312.,  217016.,  178590.,  182406.,  132220.,  134956.,
      72818.,   74282.,   43130.,   44018.,   98908.,   100876.,  167718.,
      170958.,  249944.,  254648.,  259352.,  264056.,  268760.,  273464.,
      278168.,  282872.,  232014.,  235830.,  170524.,  173260.,  93314.,
      94778.,   55562.,   56450.,   126460.,  128428.,  213078.,  216318.,
      315800.,  320504.,  325208.,  329912.,  334616.,  339320.,  344024.,
      348728.,  285438.,  289254.,  208828.,  211564.,  113810.,  115274.,
      64044.,   64892.,   139720.,  141544.,  227284.,  230212.,  326992.,
      331152.,  335312.,  339472.,  343632.,  347792.,  351952.,  356112.,
      284356.,  287668.,  203336.,  205672.,  108636.,  109868.,  46718.,
      47270.,   99956.,   101124.,  159842.,  161690.,  226504.,  229096.,
      231688.,  234280.,  236872.,  239464.,  242056.,  244648.,  192794.,
      194834.,  136116.,  137540.,  71894.,   72638.,   510.,     1318.,
      2676.,    4356.,    6626.,    9242.,    12488.,   16104.,   19720.,
      23336.,   26952.,   30568.,   34184.,   37800.,   29594.,   32402.,
      22452.,   24388.,   12630.,   13630.,   12492.,   14364.,   29704.,
      33576.,   51892.,   57892.,   79312.,   87568.,   95824.,   104080.,
      112336.,  120592.,  128848.,  137104.,  106660.,  113044.,  77960.,
      82344.,   42492.,   44748.,   39530.,   42722.,   88252.,   94828.,
      146550.,  156702.,  214808.,  228728.,  242648.,  256568.,  270488.,
      284408.,  298328.,  312248.,  241950.,  252678.,  173692.,  181036.,
      93170.,   96938.,   84218.,   87410.,   180316.,  186892.,  288678.,
      298830.,  409688.,  423608.,  437528.,  451448.,  465368.,  479288.,
      493208.,  507128.,  392142.,  402870.,  276508.,  283852.,  145922.,
      149690.,  128906.,  132098.,  272380.,  278956.,  430806.,  440958.,
      604568.,  618488.,  632408.,  646328.,  660248.,  674168.,  688088.,
      702008.,  542334.,  553062.,  379324.,  386668.,  198674.,  202442.,
      173594.,  176786.,  364444.,  371020.,  572934.,  583086.,  799448.,
      813368.,  827288.,  841208.,  855128.,  869048.,  882968.,  896888.,
      692526.,  703254.,  482140.,  489484.,  251426.,  255194.,  218282.,
      221474.,  456508.,  463084.,  715062.,  725214.,  994328.,  1008248.,
      1022168., 1036088., 1050008., 1063928., 1077848., 1091768., 842718.,
      853446.,  584956.,  592300.,  304178.,  307946.,  183276.,  185660.,
      381256.,  386152.,  594196.,  601732.,  822352.,  832656.,  842960.,
      853264.,  863568.,  873872.,  884176.,  894480.,  688132.,  696052.,
      475592.,  481000.,  246300.,  249068.,  111710.,  113030.,  231476.,
      234180.,  359426.,  363578.,  495688.,  501352.,  507016.,  512680.,
      518344.,  524008.,  529672.,  535336.,  410810.,  415154.,  282996.,
      285956.,  146102.,  147614.,  990.,     2566.,    5172.,    8388.,
      12674.,   17594.,   23624.,   30312.,   37000.,   43688.,   50376.,
      57064.,   63752.,   70440.,   54074.,   59186.,   40308.,   43780.,
      22326.,   24094.,   24204.,   27612.,   56200.,   63144.,   96244.,
      106852.,  144592.,  158992.,  173392.,  187792.,  202192.,  216592.,
      230992.,  245392.,  187876.,  198868.,  135176.,  142632.,  72636.,
      76428.,   73226.,   78722.,   160252.,  171436.,  261462.,  278526.,
      377240.,  400376.,  423512.,  446648.,  469784.,  492920.,  516056.,
      539192.,  412158.,  429798.,  291772.,  303724.,  154514.,  160586.,
      150170.,  155666.,  316828.,  328012.,  500358.,  517422.,  701144.,
      724280.,  747416.,  770552.,  793688.,  816824.,  839960.,  863096.,
      659118.,  676758.,  459100.,  471052.,  239522.,  245594.,  227114.,
      232610.,  473404.,  484588.,  739254.,  756318.,  1025048., 1048184.,
      1071320., 1094456., 1117592., 1140728., 1163864., 1187000., 906078.,
      923718.,  626428.,  638380.,  324530.,  330602.,  304058.,  309554.,
      629980.,  641164.,  978150.,  995214.,  1348952., 1372088., 1395224.,
      1418360., 1441496., 1464632., 1487768., 1510904., 1153038., 1170678.,
      793756.,  805708.,  409538.,  415610.,  381002.,  386498.,  786556.,
      797740.,  1217046., 1234110., 1672856., 1695992., 1719128., 1742264.,
      1765400., 1788536., 1811672., 1834808., 1399998., 1417638., 961084.,
      973036.,  494546.,  500618.,  302508.,  306428.,  622792.,  630760.,
      961108.,  973252.,  1317712., 1334160., 1350608., 1367056., 1383504.,
      1399952., 1416400., 1432848., 1091908., 1104436., 747848.,  756328.,
      383964.,  388268.,  176702.,  178790.,  362996.,  367236.,  559010.,
      565466.,  764872.,  773608.,  782344.,  791080.,  799816.,  808552.,
      817288.,  826024.,  628826.,  635474.,  429876.,  434372.,  220310.,
      222590.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,    8320.,    8600.,    8880.,    11200.,   11560.,   11920.,
      12280.,   14852.,   15296.,   15740.,   16184.,   19012.,   19544.,
      20076.,   20608.,   20552.,   21112.,   21672.,   22232.,   22092.,
      22680.,   23268.,   23856.,   23632.,   24248.,   24864.,   25480.,
      22100.,   22640.,   23180.,   23720.,   19980.,   20440.,   20900.,
      21360.,   17256.,   17632.,   18008.,   18384.,   17050.,   17500.,
      17950.,   18400.,   23175.,   23750.,   24325.,   24900.,   30085.,
      30790.,   31495.,   32200.,   37800.,   38640.,   39480.,   40320.,
      40215.,   41090.,   41965.,   42840.,   42630.,   43540.,   44450.,
      45360.,   45045.,   45990.,   46935.,   47880.,   41425.,   42250.,
      43075.,   43900.,   36900.,   37600.,   38300.,   39000.,   31450.,
      32020.,   32590.,   33160.,   31100.,   31760.,   32420.,   33080.,
      41620.,   42460.,   43300.,   44140.,   53286.,   54312.,   55338.,
      56364.,   66122.,   67340.,   68558.,   69776.,   69608.,   70868.,
      72128.,   73388.,   73094.,   74396.,   75698.,   77000.,   76580.,
      77924.,   79268.,   80612.,   69630.,   70800.,   71970.,   73140.,
      61390.,   62380.,   63370.,   64360.,   51836.,   52640.,   53444.,
      54248.,   51310.,   52220.,   53130.,   54040.,   67935.,   69090.,
      70245.,   71400.,   86135.,   87542.,   88949.,   90356.,   105938.,
      107604.,  109270.,  110936.,  110691.,  112406.,  114121.,  115836.,
      115444.,  117208.,  118972.,  120736.,  120197.,  122010.,  123823.,
      125636.,  108395.,  109970.,  111545.,  113120.,  94850.,   96180.,
      97510.,   98840.,   79534.,   80612.,   81690.,   82768.,   76790.,
      77980.,   79170.,   80360.,   100485.,  101990.,  103495.,  105000.,
      126035.,  127862.,  129689.,  131516.,  153468.,  155624.,  157780.,
      159936.,  158221.,  160426.,  162631.,  164836.,  162974.,  165228.,
      167482.,  169736.,  167727.,  170030.,  172333.,  174636.,  149975.,
      151970.,  153965.,  155960.,  130200.,  131880.,  133560.,  135240.,
      108374.,  109732.,  111090.,  112448.,  102270.,  103740.,  105210.,
      106680.,  133035.,  134890.,  136745.,  138600.,  165935.,  168182.,
      170429.,  172676.,  200998.,  203644.,  206290.,  208936.,  205751.,
      208446.,  211141.,  213836.,  210504.,  213248.,  215992.,  218736.,
      215257.,  218050.,  220843.,  223636.,  191555.,  193970.,  196385.,
      198800.,  165550.,  167580.,  169610.,  171640.,  137214.,  138852.,
      140490.,  142128.,  125180.,  126560.,  127940.,  129320.,  161440.,
      163180.,  164920.,  166660.,  199734.,  201840.,  203946.,  206052.,
      240086.,  242564.,  245042.,  247520.,  244748.,  247268.,  249788.,
      252308.,  249410.,  251972.,  254534.,  257096.,  254072.,  256676.,
      259280.,  261884.,  224430.,  226680.,  228930.,  231180.,  192610.,
      194500.,  196390.,  198280.,  158588.,  160112.,  161636.,  163160.,
      137450.,  138700.,  139950.,  141200.,  176375.,  177950.,  179525.,
      181100.,  217165.,  219070.,  220975.,  222880.,  259840.,  262080.,
      264320.,  266560.,  264215.,  266490.,  268765.,  271040.,  268590.,
      270900.,  273210.,  275520.,  272965.,  275310.,  277655.,  280000.,
      240025.,  242050.,  244075.,  246100.,  205100.,  206800.,  208500.,
      210200.,  168170.,  169540.,  170910.,  172280.,  137960.,  139040.,
      140120.,  141200.,  176440.,  177800.,  179160.,  180520.,  216548.,
      218192.,  219836.,  221480.,  258300.,  260232.,  262164.,  264096.,
      262192.,  264152.,  266112.,  268072.,  266084.,  268072.,  270060.,
      272048.,  269976.,  271992.,  274008.,  276024.,  236660.,  238400.,
      240140.,  241880.,  201620.,  203080.,  204540.,  206000.,  164840.,
      166016.,  167192.,  168368.,  78600.,   80320.,   82040.,   83760.,
      103000.,  105160.,  107320.,  109480.,  129332.,  131936.,  134540.,
      137144.,  157612.,  160664.,  163716.,  166768.,  159152.,  162232.,
      165312.,  168392.,  160692.,  163800.,  166908.,  170016.,  162232.,
      165368.,  168504.,  171640.,  145220.,  147920.,  150620.,  153320.,
      126180.,  128440.,  130700.,  132960.,  105096.,  106912.,  108728.,
      110544.,  130450.,  132700.,  134950.,  137200.,  169425.,  172250.,
      175075.,  177900.,  210985.,  214390.,  217795.,  221200.,  255150.,
      259140.,  263130.,  267120.,  257565.,  261590.,  265615.,  269640.,
      259980.,  264040.,  268100.,  272160.,  262395.,  266490.,  270585.,
      274680.,  233125.,  236650.,  240175.,  243700.,  201150.,  204100.,
      207050.,  210000.,  166450.,  168820.,  171190.,  173560.,  197420.,
      200240.,  203060.,  205880.,  254920.,  258460.,  262000.,  265540.,
      315726.,  319992.,  324258.,  328524.,  379862.,  384860.,  389858.,
      394856.,  383348.,  388388.,  393428.,  398468.,  386834.,  391916.,
      396998.,  402080.,  390320.,  395444.,  400568.,  405692.,  345030.,
      349440.,  353850.,  358260.,  296290.,  299980.,  303670.,  307360.,
      244076.,  247040.,  250004.,  252968.,  280630.,  284060.,  287490.,
      290920.,  360885.,  365190.,  369495.,  373800.,  445235.,  450422.,
      455609.,  460796.,  533708.,  539784.,  545860.,  551936.,  538461.,
      544586.,  550711.,  556836.,  543214.,  549388.,  555562.,  561736.,
      547967.,  554190.,  560413.,  566636.,  482615.,  487970.,  493325.,
      498680.,  413000.,  417480.,  421960.,  426440.,  339094.,  342692.,
      346290.,  349888.,  306110.,  309820.,  313530.,  317240.,  393435.,
      398090.,  402745.,  407400.,  485135.,  490742.,  496349.,  501956.,
      581238.,  587804.,  594370.,  600936.,  585991.,  592606.,  599221.,
      605836.,  590744.,  597408.,  604072.,  610736.,  595497.,  602210.,
      608923.,  615636.,  524195.,  529970.,  535745.,  541520.,  448350.,
      453180.,  458010.,  462840.,  367934.,  371812.,  375690.,  379568.,
      331590.,  335580.,  339570.,  343560.,  425985.,  430990.,  435995.,
      441000.,  525035.,  531062.,  537089.,  543116.,  628768.,  635824.,
      642880.,  649936.,  633521.,  640626.,  647731.,  654836.,  638274.,
      645428.,  652582.,  659736.,  643027.,  650230.,  657433.,  664636.,
      565775.,  571970.,  578165.,  584360.,  483700.,  488880.,  494060.,
      499240.,  396774.,  400932.,  405090.,  409248.,  351980.,  355520.,
      359060.,  362600.,  450340.,  454780.,  459220.,  463660.,  552894.,
      558240.,  563586.,  568932.,  659666.,  665924.,  672182.,  678440.,
      664328.,  670628.,  676928.,  683228.,  668990.,  675332.,  681674.,
      688016.,  673652.,  680036.,  686420.,  692804.,  590550.,  596040.,
      601530.,  607020.,  503110.,  507700.,  512290.,  516880.,  411308.,
      414992.,  418676.,  422360.,  351650.,  354700.,  357750.,  360800.,
      448625.,  452450.,  456275.,  460100.,  549265.,  553870.,  558475.,
      563080.,  653590.,  658980.,  664370.,  669760.,  657965.,  663390.,
      668815.,  674240.,  662340.,  667800.,  673260.,  678720.,  666715.,
      672210.,  677705.,  683200.,  582925.,  587650.,  592375.,  597100.,
      495350.,  499300.,  503250.,  507200.,  403970.,  407140.,  410310.,
      413480.,  329480.,  332000.,  334520.,  337040.,  419440.,  422600.,
      425760.,  428920.,  512468.,  516272.,  520076.,  523880.,  608580.,
      613032.,  617484.,  621936.,  612472.,  616952.,  621432.,  625912.,
      616364.,  620872.,  625380.,  629888.,  620256.,  624792.,  629328.,
      633864.,  541220.,  545120.,  549020.,  552920.,  459020.,  462280.,
      465540.,  468800.,  373640.,  376256.,  378872.,  381488.,  149160.,
      152320.,  155480.,  158640.,  194800.,  198760.,  202720.,  206680.,
      243812.,  248576.,  253340.,  258104.,  296212.,  301784.,  307356.,
      312928.,  297752.,  303352.,  308952.,  314552.,  299292.,  304920.,
      310548.,  316176.,  300832.,  306488.,  312144.,  317800.,  268340.,
      273200.,  278060.,  282920.,  232380.,  236440.,  240500.,  244560.,
      192936.,  196192.,  199448.,  202704.,  243850.,  247900.,  251950.,
      256000.,  315675.,  320750.,  325825.,  330900.,  391885.,  397990.,
      404095.,  410200.,  472500.,  479640.,  486780.,  493920.,  474915.,
      482090.,  489265.,  496440.,  477330.,  484540.,  491750.,  498960.,
      479745.,  486990.,  494235.,  501480.,  424825.,  431050.,  437275.,
      443500.,  365400.,  370600.,  375800.,  381000.,  301450.,  305620.,
      309790.,  313960.,  363740.,  368720.,  373700.,  378680.,  468220.,
      474460.,  480700.,  486940.,  578166.,  585672.,  593178.,  600684.,
      693602.,  702380.,  711158.,  719936.,  697088.,  705908.,  714728.,
      723548.,  700574.,  709436.,  718298.,  727160.,  704060.,  712964.,
      721868.,  730772.,  620430.,  628080.,  635730.,  643380.,  531190.,
      537580.,  543970.,  550360.,  436316.,  441440.,  446564.,  451688.,
      509950.,  515900.,  521850.,  527800.,  653835.,  661290.,  668745.,
      676200.,  804335.,  813302.,  822269.,  831236.,  961478.,  971964.,
      982450.,  992936.,  966231.,  976766.,  987301.,  997836.,  970984.,
      981568.,  992152.,  1002736., 975737.,  986370.,  997003.,  1007636.,
      856835.,  865970.,  875105.,  884240.,  731150.,  738780.,  746410.,
      754040.,  598654.,  604772.,  610890.,  617008.,  535430.,  541660.,
      547890.,  554120.,  686385.,  694190.,  701995.,  709800.,  844235.,
      853622.,  863009.,  872396.,  1009008., 1019984., 1030960., 1041936.,
      1013761., 1024786., 1035811., 1046836., 1018514., 1029588., 1040662.,
      1051736., 1023267., 1034390., 1045513., 1056636., 898415.,  907970.,
      917525.,  927080.,  766500.,  774480.,  782460.,  790440.,  627494.,
      633892.,  640290.,  646688.,  560910.,  567420.,  573930.,  580440.,
      718935.,  727090.,  735245.,  743400.,  884135.,  893942.,  903749.,
      913556.,  1056538., 1068004., 1079470., 1090936., 1061291., 1072806.,
      1084321., 1095836., 1066044., 1077608., 1089172., 1100736., 1070797.,
      1082410., 1094023., 1105636., 939995.,  949970.,  959945.,  969920.,
      801850.,  810180.,  818510.,  826840.,  656334.,  663012.,  669690.,
      676368.,  578780.,  584480.,  590180.,  595880.,  739240.,  746380.,
      753520.,  760660.,  906054.,  914640.,  923226.,  931812.,  1079246.,
      1089284., 1099322., 1109360., 1083908., 1093988., 1104068., 1114148.,
      1088570., 1098692., 1108814., 1118936., 1093232., 1103396., 1113560.,
      1123724., 956670.,  965400.,  974130.,  982860.,  813610.,  820900.,
      828190.,  835480.,  664028.,  669872.,  675716.,  681560.,  565850.,
      570700.,  575550.,  580400.,  720875.,  726950.,  733025.,  739100.,
      881365.,  888670.,  895975.,  903280.,  1047340., 1055880., 1064420.,
      1072960., 1051715., 1060290., 1068865., 1077440., 1056090., 1064700.,
      1073310., 1081920., 1060465., 1069110., 1077755., 1086400., 925825.,
      933250.,  940675.,  948100.,  785600.,  791800.,  798000.,  804200.,
      639770.,  644740.,  649710.,  654680.,  521000.,  524960.,  528920.,
      532880.,  662440.,  667400.,  672360.,  677320.,  808388.,  814352.,
      820316.,  826280.,  958860.,  965832.,  972804.,  979776.,  962752.,
      969752.,  976752.,  983752.,  966644.,  973672.,  980700.,  987728.,
      970536.,  977592.,  984648.,  991704.,  845780.,  851840.,  857900.,
      863960.,  716420.,  721480.,  726540.,  731600.,  582440.,  586496.,
      590552.,  594608.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,    100.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,
      100.,   104.,   108.,   112.,   34.,    40.,    46.,    52.,    122.,
      136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,
      564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,
      888.,   924.,   960.,   996.,   1032.,  866.,   896.,   926.,   956.,
      698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,
      226.,   241.,   256.,   569.,   602.,   635.,   668.,   1086.,  1140.,
      1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,
      2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,
      2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,
      1072.,  1096.,  1120.,  631.,   646.,   661.,   676.,   1493.,  1526.,
      1559.,  1592.,  2598.,  2652.,  2706.,  2760.,  3958.,  4036.,  4114.,
      4192.,  4270.,  4348.,  4426.,  4504.,  4582.,  4660.,  4738.,  4816.,
      4894.,  4972.,  5050.,  5128.,  4155.,  4218.,  4281.,  4344.,  3101.,
      3146.,  3191.,  3236.,  1720.,  1744.,  1768.,  1792.,  1051.,  1066.,
      1081.,  1096.,  2417.,  2450.,  2483.,  2516.,  4110.,  4164.,  4218.,
      4272.,  6142.,  6220.,  6298.,  6376.,  6454.,  6532.,  6610.,  6688.,
      6766.,  6844.,  6922.,  7000.,  7078.,  7156.,  7234.,  7312.,  5919.,
      5982.,  6045.,  6108.,  4361.,  4406.,  4451.,  4496.,  2392.,  2416.,
      2440.,  2464.,  1471.,  1486.,  1501.,  1516.,  3341.,  3374.,  3407.,
      3440.,  5622.,  5676.,  5730.,  5784.,  8326.,  8404.,  8482.,  8560.,
      8638.,  8716.,  8794.,  8872.,  8950.,  9028.,  9106.,  9184.,  9262.,
      9340.,  9418.,  9496.,  7683.,  7746.,  7809.,  7872.,  5621.,  5666.,
      5711.,  5756.,  3064.,  3088.,  3112.,  3136.,  1891.,  1906.,  1921.,
      1936.,  4265.,  4298.,  4331.,  4364.,  7134.,  7188.,  7242.,  7296.,
      10510., 10588., 10666., 10744., 10822., 10900., 10978., 11056., 11134.,
      11212., 11290., 11368., 11446., 11524., 11602., 11680., 9447.,  9510.,
      9573.,  9636.,  6881.,  6926.,  6971.,  7016.,  3736.,  3760.,  3784.,
      3808.,  2114.,  2128.,  2142.,  2156.,  4594.,  4624.,  4654.,  4684.,
      7448.,  7496.,  7544.,  7592.,  10684., 10752., 10820., 10888., 10956.,
      11024., 11092., 11160., 11228., 11296., 11364., 11432., 11500., 11568.,
      11636., 11704., 9266.,  9320.,  9374.,  9428.,  6610.,  6648.,  6686.,
      6724.,  3524.,  3544.,  3564.,  3584.,  1521.,  1530.,  1539.,  1548.,
      3247.,  3266.,  3285.,  3304.,  5182.,  5212.,  5242.,  5272.,  7330.,
      7372.,  7414.,  7456.,  7498.,  7540.,  7582.,  7624.,  7666.,  7708.,
      7750.,  7792.,  7834.,  7876.,  7918.,  7960.,  6229.,  6262.,  6295.,
      6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,
      13.,    26.,    39.,    52.,    79.,    106.,   133.,   160.,   202.,
      244.,   286.,   328.,   386.,   444.,   502.,   560.,   618.,   676.,
      734.,   792.,   850.,   908.,   966.,   1024.,  1082.,  1140.,  1198.,
      1256.,  937.,   982.,   1027.,  1072.,  711.,   742.,   773.,   804.,
      400.,   416.,   432.,   448.,   394.,   424.,   454.,   484.,   938.,
      1000.,  1062.,  1124.,  1640.,  1736.,  1832.,  1928.,  2508.,  2640.,
      2772.,  2904.,  3036.,  3168.,  3300.,  3432.,  3564.,  3696.,  3828.,
      3960.,  4092.,  4224.,  4356.,  4488.,  3386.,  3488.,  3590.,  3692.,
      2474.,  2544.,  2614.,  2684.,  1348.,  1384.,  1420.,  1456.,  1255.,
      1306.,  1357.,  1408.,  2801.,  2906.,  3011.,  3116.,  4650.,  4812.,
      4974.,  5136.,  6814.,  7036.,  7258.,  7480.,  7702.,  7924.,  8146.,
      8368.,  8590.,  8812.,  9034.,  9256.,  9478.,  9700.,  9922.,  10144.,
      7683.,  7854.,  8025.,  8196.,  5513.,  5630.,  5747.,  5864.,  2956.,
      3016.,  3076.,  3136.,  2683.,  2734.,  2785.,  2836.,  5741.,  5846.,
      5951.,  6056.,  9186.,  9348.,  9510.,  9672.,  13030., 13252., 13474.,
      13696., 13918., 14140., 14362., 14584., 14806., 15028., 15250., 15472.,
      15694., 15916., 16138., 16360., 12471., 12642., 12813., 12984., 8789.,
      8906.,  9023.,  9140.,  4636.,  4696.,  4756.,  4816.,  4111.,  4162.,
      4213.,  4264.,  8681.,  8786.,  8891.,  8996.,  13722., 13884., 14046.,
      14208., 19246., 19468., 19690., 19912., 20134., 20356., 20578., 20800.,
      21022., 21244., 21466., 21688., 21910., 22132., 22354., 22576., 17259.,
      17430., 17601., 17772., 12065., 12182., 12299., 12416., 6316.,  6376.,
      6436.,  6496.,  5539.,  5590.,  5641.,  5692.,  11621., 11726., 11831.,
      11936., 18258., 18420., 18582., 18744., 25462., 25684., 25906., 26128.,
      26350., 26572., 26794., 27016., 27238., 27460., 27682., 27904., 28126.,
      28348., 28570., 28792., 22047., 22218., 22389., 22560., 15341., 15458.,
      15575., 15692., 7996.,  8056.,  8116.,  8176.,  6967.,  7018.,  7069.,
      7120.,  14561., 14666., 14771., 14876., 22794., 22956., 23118., 23280.,
      31678., 31900., 32122., 32344., 32566., 32788., 33010., 33232., 33454.,
      33676., 33898., 34120., 34342., 34564., 34786., 35008., 26835., 27006.,
      27177., 27348., 18617., 18734., 18851., 18968., 9676.,  9736.,  9796.,
      9856.,  5834.,  5872.,  5910.,  5948.,  12130., 12208., 12286., 12364.,
      18896., 19016., 19136., 19256., 26140., 26304., 26468., 26632., 26796.,
      26960., 27124., 27288., 27452., 27616., 27780., 27944., 28108., 28272.,
      28436., 28600., 21866., 21992., 22118., 22244., 15106., 15192., 15278.,
      15364., 7820.,  7864.,  7908.,  7952.,  3549.,  3570.,  3591.,  3612.,
      7351.,  7394.,  7437.,  7480.,  11410., 11476., 11542., 11608., 15730.,
      15820., 15910., 16000., 16090., 16180., 16270., 16360., 16450., 16540.,
      16630., 16720., 16810., 16900., 16990., 17080., 13033., 13102., 13171.,
      13240., 8975.,  9022.,  9069.,  9116.,  4632.,  4656.,  4680.,  4704.,
      25.,    50.,    75.,    100.,   151.,   202.,   253.,   304.,   382.,
      460.,   538.,   616.,   722.,   828.,   934.,   1040.,  1146.,  1252.,
      1358.,  1464.,  1570.,  1676.,  1782.,  1888.,  1994.,  2100.,  2206.,
      2312.,  1693.,  1774.,  1855.,  1936.,  1263.,  1318.,  1373.,  1428.,
      700.,   728.,   756.,   784.,   754.,   808.,   862.,   916.,   1754.,
      1864.,  1974.,  2084.,  3008.,  3176.,  3344.,  3512.,  4524.,  4752.,
      4980.,  5208.,  5436.,  5664.,  5892.,  6120.,  6348.,  6576.,  6804.,
      7032.,  7260.,  7488.,  7716.,  7944.,  5906.,  6080.,  6254.,  6428.,
      4250.,  4368.,  4486.,  4604.,  2284.,  2344.,  2404.,  2464.,  2299.,
      2386.,  2473.,  2560.,  5033.,  5210.,  5387.,  5564.,  8214.,  8484.,
      8754.,  9024.,  11854., 12220., 12586., 12952., 13318., 13684., 14050.,
      14416., 14782., 15148., 15514., 15880., 16246., 16612., 16978., 17344.,
      12975., 13254., 13533., 13812., 9185.,  9374.,  9563.,  9752.,  4864.,
      4960.,  5056.,  5152.,  4735.,  4822.,  4909.,  4996.,  9989.,  10166.,
      10343., 10520., 15774., 16044., 16314., 16584., 22102., 22468., 22834.,
      23200., 23566., 23932., 24298., 24664., 25030., 25396., 25762., 26128.,
      26494., 26860., 27226., 27592., 20787., 21066., 21345., 21624., 14477.,
      14666., 14855., 15044., 7552.,  7648.,  7744.,  7840.,  7171.,  7258.,
      7345.,  7432.,  14945., 15122., 15299., 15476., 23334., 23604., 23874.,
      24144., 32350., 32716., 33082., 33448., 33814., 34180., 34546., 34912.,
      35278., 35644., 36010., 36376., 36742., 37108., 37474., 37840., 28599.,
      28878., 29157., 29436., 19769., 19958., 20147., 20336., 10240., 10336.,
      10432., 10528., 9607.,  9694.,  9781.,  9868.,  19901., 20078., 20255.,
      20432., 30894., 31164., 31434., 31704., 42598., 42964., 43330., 43696.,
      44062., 44428., 44794., 45160., 45526., 45892., 46258., 46624., 46990.,
      47356., 47722., 48088., 36411., 36690., 36969., 37248., 25061., 25250.,
      25439., 25628., 12928., 13024., 13120., 13216., 12043., 12130., 12217.,
      12304., 24857., 25034., 25211., 25388., 38454., 38724., 38994., 39264.,
      52846., 53212., 53578., 53944., 54310., 54676., 55042., 55408., 55774.,
      56140., 56506., 56872., 57238., 57604., 57970., 58336., 44223., 44502.,
      44781., 45060., 30353., 30542., 30731., 30920., 15616., 15712., 15808.,
      15904., 9554.,  9616.,  9678.,  9740.,  19666., 19792., 19918., 20044.,
      30344., 30536., 30728., 30920., 41596., 41856., 42116., 42376., 42636.,
      42896., 43156., 43416., 43676., 43936., 44196., 44456., 44716., 44976.,
      45236., 45496., 34466., 34664., 34862., 35060., 23602., 23736., 23870.,
      24004., 12116., 12184., 12252., 12320., 5577.,  5610.,  5643.,  5676.,
      11455., 11522., 11589., 11656., 17638., 17740., 17842., 17944., 24130.,
      24268., 24406., 24544., 24682., 24820., 24958., 25096., 25234., 25372.,
      25510., 25648., 25786., 25924., 26062., 26200., 19837., 19942., 20047.,
      20152., 13559., 13630., 13701., 13772., 6948.,  6984.,  7020.,  7056.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,   64416.,   66624.,   68832.,   86860.,   89700.,   92540.,
      95380.,   115408.,  118912.,  122416.,  125920.,  147980.,  152180.,
      156380.,  160580.,  160244.,  164668.,  169092.,  173516.,  172508.,
      177156.,  181804.,  186452.,  184772.,  189644.,  194516.,  199388.,
      173008.,  177280.,  181552.,  185824.,  156580.,  160220.,  163860.,
      167500.,  135360.,  138336.,  141312.,  144288.,  133000.,  136560.,
      140120.,  143680.,  181025.,  185575.,  190125.,  194675.,  235280.,
      240860.,  246440.,  252020.,  295925.,  302575.,  309225.,  315875.,
      315175.,  322105.,  329035.,  335965.,  334425.,  341635.,  348845.,
      356055.,  353675.,  361165.,  368655.,  376145.,  325520.,  332060.,
      338600.,  345140.,  290175.,  295725.,  301275.,  306825.,  247480.,
      252000.,  256520.,  261040.,  243808.,  249040.,  254272.,  259504.,
      326570.,  333230.,  339890.,  346550.,  418440.,  426576.,  434712.,
      442848.,  519610.,  529270.,  538930.,  548590.,  547414.,  557410.,
      567406.,  577402.,  575218.,  585550.,  595882.,  606214.,  603022.,
      613690.,  624358.,  635026.,  548616.,  557904.,  567192.,  576480.,
      483950.,  491810.,  499670.,  507530.,  408832.,  415216.,  421600.,
      427984.,  403592.,  410816.,  418040.,  425264.,  534695.,  543865.,
      553035.,  562205.,  678328.,  689500.,  700672.,  711844.,  834715.,
      847945.,  861175.,  874405.,  872641.,  886263.,  899885.,  913507.,
      910567.,  924581.,  938595.,  952609.,  948493.,  962899.,  977305.,
      991711.,  855736.,  868252.,  880768.,  893284.,  749105.,  759675.,
      770245.,  780815.,  628376.,  636944.,  645512.,  654080.,  606872.,
      616336.,  625800.,  635264.,  794395.,  806365.,  818335.,  830305.,
      996688.,  1011220., 1025752., 1040284., 1213975., 1231125., 1248275.,
      1265425., 1251901., 1269443., 1286985., 1304527., 1289827., 1307761.,
      1325695., 1343629., 1327753., 1346079., 1364405., 1382731., 1187536.,
      1203412., 1219288., 1235164., 1031205., 1044575., 1057945., 1071315.,
      858536.,  869344.,  880152.,  890960.,  810152.,  821856.,  833560.,
      845264.,  1054095., 1068865., 1083635., 1098405., 1315048., 1332940.,
      1350832., 1368724., 1593235., 1614305., 1635375., 1656445., 1631161.,
      1652623., 1674085., 1695547., 1669087., 1690941., 1712795., 1734649.,
      1707013., 1729259., 1751505., 1773751., 1519336., 1538572., 1557808.,
      1577044., 1313305., 1329475., 1345645., 1361815., 1088696., 1101744.,
      1114792., 1127840., 993664.,  1004656., 1015648., 1026640., 1281650.,
      1295510., 1309370., 1323230., 1585848., 1602624., 1619400., 1636176.,
      1906450., 1926190., 1945930., 1965670., 1943662., 1963738., 1983814.,
      2003890., 1980874., 2001286., 2021698., 2042110., 2018086., 2038834.,
      2059582., 2080330., 1782840., 1800768., 1818696., 1836624., 1530230.,
      1545290., 1560350., 1575410., 1260064., 1272208., 1284352., 1296496.,
      1092360., 1102320., 1112280., 1122240., 1401825., 1414375., 1426925.,
      1439475., 1726160., 1741340., 1756520., 1771700., 2065525., 2083375.,
      2101225., 2119075., 2100455., 2118585., 2136715., 2154845., 2135385.,
      2153795., 2172205., 2190615., 2170315., 2189005., 2207695., 2226385.,
      1908560., 1924700., 1940840., 1956980., 1630975., 1644525., 1658075.,
      1671625., 1337400., 1348320., 1359240., 1370160., 1097280., 1105888.,
      1114496., 1123104., 1403420., 1414260., 1425100., 1435940., 1722544.,
      1735648., 1748752., 1761856., 2054780., 2070180., 2085580., 2100980.,
      2085860., 2101484., 2117108., 2132732., 2116940., 2132788., 2148636.,
      2164484., 2148020., 2164092., 2180164., 2196236., 1883056., 1896928.,
      1910800., 1924672., 1604340., 1615980., 1627620., 1639260., 1311744.,
      1321120., 1330496., 1339872., 623808.,  637536.,  651264.,  664992.,
      817660.,  834900.,  852140.,  869380.,  1026928., 1047712., 1068496.,
      1089280., 1251740., 1276100., 1300460., 1324820., 1264004., 1288588.,
      1313172., 1337756., 1276268., 1301076., 1325884., 1350692., 1288532.,
      1313564., 1338596., 1363628., 1153648., 1175200., 1196752., 1218304.,
      1002580., 1020620., 1038660., 1056700., 835200.,  849696.,  864192.,
      878688.,  1036600., 1054560., 1072520., 1090480., 1346525., 1369075.,
      1391625., 1414175., 1677080., 1704260., 1731440., 1758620., 2028425.,
      2060275., 2092125., 2123975., 2047675., 2079805., 2111935., 2144065.,
      2066925., 2099335., 2131745., 2164155., 2086175., 2118865., 2151555.,
      2184245., 1853720., 1881860., 1910000., 1938140., 1599675., 1623225.,
      1646775., 1670325., 1323880., 1342800., 1361720., 1380640., 1570048.,
      1592560., 1615072., 1637584., 2027570., 2055830., 2084090., 2112350.,
      2511480., 2545536., 2579592., 2613648., 3021970., 3061870., 3101770.,
      3141670., 3049774., 3090010., 3130246., 3170482., 3077578., 3118150.,
      3158722., 3199294., 3105382., 3146290., 3187198., 3228106., 2745336.,
      2780544., 2815752., 2850960., 2357750., 2387210., 2416670., 2446130.,
      1942432., 1966096., 1989760., 2013424., 2233112., 2260496., 2287880.,
      2315264., 2871995., 2906365., 2940735., 2975105., 3543568., 3584980.,
      3626392., 3667804., 4248055., 4296565., 4345075., 4393585., 4285981.,
      4334883., 4383785., 4432687., 4323907., 4373201., 4422495., 4471789.,
      4361833., 4411519., 4461205., 4510891., 3841936., 3884692., 3927448.,
      3970204., 3288005., 3323775., 3359545., 3395315., 2699816., 2728544.,
      2757272., 2786000., 2436392., 2466016., 2495640., 2525264., 3131695.,
      3168865., 3206035., 3243205., 3861928., 3906700., 3951472., 3996244.,
      4627315., 4679745., 4732175., 4784605., 4665241., 4718063., 4770885.,
      4823707., 4703167., 4756381., 4809595., 4862809., 4741093., 4794699.,
      4848305., 4901911., 4173736., 4219852., 4265968., 4312084., 3570105.,
      3608675., 3647245., 3685815., 2929976., 2960944., 2991912., 3022880.,
      2639672., 2671536., 2703400., 2735264., 3391395., 3431365., 3471335.,
      3511305., 4180288., 4228420., 4276552., 4324684., 5006575., 5062925.,
      5119275., 5175625., 5044501., 5101243., 5157985., 5214727., 5082427.,
      5139561., 5196695., 5253829., 5120353., 5177879., 5235405., 5292931.,
      4505536., 4555012., 4604488., 4653964., 3852205., 3893575., 3934945.,
      3976315., 3160136., 3193344., 3226552., 3259760., 2803744., 2832016.,
      2860288., 2888560., 3587450., 3622910., 3658370., 3693830., 4404648.,
      4447344., 4490040., 4532736., 5255530., 5305510., 5355490., 5405470.,
      5292742., 5343058., 5393374., 5443690., 5329954., 5380606., 5431258.,
      5481910., 5367166., 5418154., 5469142., 5520130., 4705320., 4749168.,
      4793016., 4836864., 4008830., 4045490., 4082150., 4118810., 3277504.,
      3306928., 3336352., 3365776., 2802360., 2826720., 2851080., 2875440.,
      3575325., 3605875., 3636425., 3666975., 4377560., 4414340., 4451120.,
      4487900., 5209225., 5252275., 5295325., 5338375., 5244155., 5287485.,
      5330815., 5374145., 5279085., 5322695., 5366305., 5409915., 5314015.,
      5357905., 5401795., 5445685., 4646360., 4684100., 4721840., 4759580.,
      3948475., 3980025., 4011575., 4043125., 3220200., 3245520., 3270840.,
      3296160., 2626560., 2646688., 2666816., 2686944., 3343820., 3369060.,
      3394300., 3419540., 4085584., 4115968., 4146352., 4176736., 4851980.,
      4887540., 4923100., 4958660., 4883060., 4918844., 4954628., 4990412.,
      4914140., 4950148., 4986156., 5022164., 4945220., 4981452., 5017684.,
      5053916., 4315216., 4346368., 4377520., 4408672., 3659940., 3685980.,
      3712020., 3738060., 2979264., 3000160., 3021056., 3041952., 1185408.,
      1210656., 1235904., 1261152., 1548460., 1580100., 1611740., 1643380.,
      1938448., 1976512., 2014576., 2052640., 2355500., 2400020., 2444540.,
      2489060., 2367764., 2412508., 2457252., 2501996., 2380028., 2424996.,
      2469964., 2514932., 2392292., 2437484., 2482676., 2527868., 2134288.,
      2173120., 2211952., 2250784., 1848580., 1881020., 1913460., 1945900.,
      1535040., 1561056., 1587072., 1613088., 1940200., 1972560., 2004920.,
      2037280., 2512025., 2552575., 2593125., 2633675., 3118880., 3167660.,
      3216440., 3265220., 3760925., 3817975., 3875025., 3932075., 3780175.,
      3837505., 3894835., 3952165., 3799425., 3857035., 3914645., 3972255.,
      3818675., 3876565., 3934455., 3992345., 3381920., 3431660., 3481400.,
      3531140., 2909175., 2950725., 2992275., 3033825., 2400280., 2433600.,
      2466920., 2500240., 2896288., 2936080., 2975872., 3015664., 3728570.,
      3778430., 3828290., 3878150., 4604520., 4664496., 4724472., 4784448.,
      5524330., 5594470., 5664610., 5734750., 5552134., 5622610., 5693086.,
      5763562., 5579938., 5650750., 5721562., 5792374., 5607742., 5678890.,
      5750038., 5821186., 4942056., 5003184., 5064312., 5125440., 4231550.,
      4282610., 4333670., 4384730., 3476032., 3516976., 3557920., 3598864.,
      4062632., 4110176., 4157720., 4205264., 5209295., 5268865., 5328435.,
      5388005., 6408808., 6480460., 6552112., 6623764., 7661395., 7745185.,
      7828975., 7912765., 7699321., 7783503., 7867685., 7951867., 7737247.,
      7821821., 7906395., 7990969., 7775173., 7860139., 7945105., 8030071.,
      6828136., 6901132., 6974128., 7047124., 5826905., 5887875., 5948845.,
      6009815., 4771256., 4820144., 4869032., 4917920., 4265912., 4315696.,
      4365480., 4415264., 5468995., 5531365., 5593735., 5656105., 6727168.,
      6802180., 6877192., 6952204., 8040655., 8128365., 8216075., 8303785.,
      8078581., 8166683., 8254785., 8342887., 8116507., 8205001., 8293495.,
      8381989., 8154433., 8243319., 8332205., 8421091., 7159936., 7236292.,
      7312648., 7389004., 6109005., 6172775., 6236545., 6300315., 5001416.,
      5052544., 5103672., 5154800., 4469192., 4521216., 4573240., 4625264.,
      5728695., 5793865., 5859035., 5924205., 7045528., 7123900., 7202272.,
      7280644., 8419915., 8511545., 8603175., 8694805., 8457841., 8549863.,
      8641885., 8733907., 8495767., 8588181., 8680595., 8773009., 8533693.,
      8626499., 8719305., 8812111., 7491736., 7571452., 7651168., 7730884.,
      6391105., 6457675., 6524245., 6590815., 5231576., 5284944., 5338312.,
      5391680., 4613824., 4659376., 4704928., 4750480., 5893250., 5950310.,
      6007370., 6064430., 7223448., 7292064., 7360680., 7429296., 8604610.,
      8684830., 8765050., 8845270., 8641822., 8722378., 8802934., 8883490.,
      8679034., 8759926., 8840818., 8921710., 8716246., 8797474., 8878702.,
      8959930., 7627800., 7697568., 7767336., 7837104., 6487430., 6545690.,
      6603950., 6662210., 5294944., 5341648., 5388352., 5435056., 4512360.,
      4551120., 4589880., 4628640., 5748825., 5797375., 5845925., 5894475.,
      7028960., 7087340., 7145720., 7204100., 8352925., 8421175., 8489425.,
      8557675., 8387855., 8456385., 8524915., 8593445., 8422785., 8491595.,
      8560405., 8629215., 8457715., 8526805., 8595895., 8664985., 7384160.,
      7443500., 7502840., 7562180., 6265975., 6315525., 6365075., 6414625.,
      5103000., 5142720., 5182440., 5222160., 4155840., 4187488., 4219136.,
      4250784., 5284220., 5323860., 5363500., 5403140., 6448624., 6496288.,
      6543952., 6591616., 7649180., 7704900., 7760620., 7816340., 7680260.,
      7736204., 7792148., 7848092., 7711340., 7767508., 7823676., 7879844.,
      7742420., 7798812., 7855204., 7911596., 6747376., 6795808., 6844240.,
      6892672., 5715540., 5755980., 5796420., 5836860., 4646784., 4679200.,
      4711616., 4744032.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    328.,    400.,    472.,    544.,
      616.,    688.,    760.,    832.,    904.,    976.,    1048.,   1120.,
      1192.,   1264.,   1336.,   1408.,   1307.,   1373.,   1439.,   1505.,
      1168.,   1220.,   1272.,   1324.,   743.,    773.,    803.,    833.,
      202.,    246.,    290.,    334.,    816.,    920.,    1024.,   1128.,
      1906.,   2086.,   2266.,   2446.,   3536.,   3808.,   4080.,   4352.,
      4624.,   4896.,   5168.,   5440.,   5712.,   5984.,   6256.,   6528.,
      6800.,   7072.,   7344.,   7616.,   6454.,   6682.,   6910.,   7138.,
      5248.,   5416.,   5584.,   5752.,   3118.,   3210.,   3302.,   3394.,
      1487.,   1601.,   1715.,   1829.,   4120.,   4372.,   4624.,   4876.,
      7995.,   8409.,   8823.,   9237.,   13208.,  13808.,  14408.,  15008.,
      15608.,  16208.,  16808.,  17408.,  18008.,  18608.,  19208.,  19808.,
      20408.,  21008.,  21608.,  22208.,  18129.,  18615.,  19101.,  19587.,
      14032.,  14380.,  14728.,  15076.,  8021.,   8207.,   8393.,   8579.,
      4679.,   4793.,   4907.,   5021.,   11176.,  11428.,  11680.,  11932.,
      19587.,  20001.,  20415.,  20829.,  30008.,  30608.,  31208.,  31808.,
      32408.,  33008.,  33608.,  34208.,  34808.,  35408.,  36008.,  36608.,
      37208.,  37808.,  38408.,  39008.,  31737.,  32223.,  32709.,  33195.,
      23776.,  24124.,  24472.,  24820.,  13229.,  13415.,  13601.,  13787.,
      7871.,   7985.,   8099.,   8213.,   18232.,  18484.,  18736.,  18988.,
      31179.,  31593.,  32007.,  32421.,  46808.,  47408.,  48008.,  48608.,
      49208.,  49808.,  50408.,  51008.,  51608.,  52208.,  52808.,  53408.,
      54008.,  54608.,  55208.,  55808.,  45345.,  45831.,  46317.,  46803.,
      33520.,  33868.,  34216.,  34564.,  18437.,  18623.,  18809.,  18995.,
      11063.,  11177.,  11291.,  11405.,  25288.,  25540.,  25792.,  26044.,
      42771.,  43185.,  43599.,  44013.,  63608.,  64208.,  64808.,  65408.,
      66008.,  66608.,  67208.,  67808.,  68408.,  69008.,  69608.,  70208.,
      70808.,  71408.,  72008.,  72608.,  58953.,  59439.,  59925.,  60411.,
      43264.,  43612.,  43960.,  44308.,  23645.,  23831.,  24017.,  24203.,
      14255.,  14369.,  14483.,  14597.,  32344.,  32596.,  32848.,  33100.,
      54363.,  54777.,  55191.,  55605.,  80408.,  81008.,  81608.,  82208.,
      82808.,  83408.,  84008.,  84608.,  85208.,  85808.,  86408.,  87008.,
      87608.,  88208.,  88808.,  89408.,  72561.,  73047.,  73533.,  74019.,
      53008.,  53356.,  53704.,  54052.,  28853.,  29039.,  29225.,  29411.,
      16266.,  16374.,  16482.,  16590.,  35440.,  35672.,  35904.,  36136.,
      57586.,  57958.,  58330.,  58702.,  82768.,  83296.,  83824.,  84352.,
      84880.,  85408.,  85936.,  86464.,  86992.,  87520.,  88048.,  88576.,
      89104.,  89632.,  90160.,  90688.,  71926.,  72346.,  72766.,  73186.,
      51392.,  51688.,  51984.,  52280.,  27438.,  27594.,  27750.,  27906.,
      11813.,  11883.,  11953.,  12023.,  25256.,  25404.,  25552.,  25700.,
      40361.,  40595.,  40829.,  41063.,  57160.,  57488.,  57816.,  58144.,
      58472.,  58800.,  59128.,  59456.,  59784.,  60112.,  60440.,  60768.,
      61096.,  61424.,  61752.,  62080.,  48635.,  48893.,  49151.,  49409.,
      34320.,  34500.,  34680.,  34860.,  18119.,  18213.,  18307.,  18401.,
      77.,     179.,    281.,    383.,    568.,    780.,    992.,    1204.,
      1505.,   1835.,   2165.,   2495.,   2920.,   3376.,   3832.,   4288.,
      4744.,   5200.,   5656.,   6112.,   6568.,   7024.,   7480.,   7936.,
      8392.,   8848.,   9304.,   9760.,   7283.,   7637.,   7991.,   8345.,
      5536.,   5780.,   6024.,   6268.,   3119.,   3245.,   3371.,   3497.,
      3034.,   3270.,   3506.,   3742.,   7248.,   7736.,   8224.,   8712.,
      12706.,  13462.,  14218.,  14974.,  19472.,  20512.,  21552.,  22592.,
      23632.,  24672.,  25712.,  26752.,  27792.,  28832.,  29872.,  30912.,
      31952.,  32992.,  34032.,  35072.,  26470.,  27274.,  28078.,  28882.,
      19360.,  19912.,  20464.,  21016.,  10558.,  10842.,  11126.,  11410.,
      9767.,   10169.,  10571.,  10973.,  21832.,  22660.,  23488.,  24316.,
      36291.,  37569.,  38847.,  40125.,  53240.,  54992.,  56744.,  58496.,
      60248.,  62000.,  63752.,  65504.,  67256.,  69008.,  70760.,  72512.,
      74264.,  76016.,  77768.,  79520.,  60249.,  61599.,  62949.,  64299.,
      43264.,  44188.,  45112.,  46036.,  23213.,  23687.,  24161.,  24635.,
      21023.,  21425.,  21827.,  22229.,  45016.,  45844.,  46672.,  47500.,
      72075.,  73353.,  74631.,  75909.,  102296., 104048., 105800., 107552.,
      109304., 111056., 112808., 114560., 116312., 118064., 119816., 121568.,
      123320., 125072., 126824., 128576., 98049.,  99399.,  100749., 102099.,
      69136.,  70060.,  70984.,  71908.,  36485.,  36959.,  37433.,  37907.,
      32279.,  32681.,  33083.,  33485.,  68200.,  69028.,  69856.,  70684.,
      107859., 109137., 110415., 111693., 151352., 153104., 154856., 156608.,
      158360., 160112., 161864., 163616., 165368., 167120., 168872., 170624.,
      172376., 174128., 175880., 177632., 135849., 137199., 138549., 139899.,
      95008.,  95932.,  96856.,  97780.,  49757.,  50231.,  50705.,  51179.,
      43535.,  43937.,  44339.,  44741.,  91384.,  92212.,  93040.,  93868.,
      143643., 144921., 146199., 147477., 200408., 202160., 203912., 205664.,
      207416., 209168., 210920., 212672., 214424., 216176., 217928., 219680.,
      221432., 223184., 224936., 226688., 173649., 174999., 176349., 177699.,
      120880., 121804., 122728., 123652., 63029.,  63503.,  63977.,  64451.,
      54791.,  55193.,  55595.,  55997.,  114568., 115396., 116224., 117052.,
      179427., 180705., 181983., 183261., 249464., 251216., 252968., 254720.,
      256472., 258224., 259976., 261728., 263480., 265232., 266984., 268736.,
      270488., 272240., 273992., 275744., 211449., 212799., 214149., 215499.,
      146752., 147676., 148600., 149524., 76301.,  76775.,  77249.,  77723.,
      45978.,  46278.,  46578.,  46878.,  95632.,  96248.,  96864.,  97480.,
      149026., 149974., 150922., 151870., 206224., 207520., 208816., 210112.,
      211408., 212704., 214000., 215296., 216592., 217888., 219184., 220480.,
      221776., 223072., 224368., 225664., 172582., 173578., 174574., 175570.,
      119264., 119944., 120624., 121304., 61758.,  62106.,  62454.,  62802.,
      28013.,  28179.,  28345.,  28511.,  58040.,  58380.,  58720.,  59060.,
      90113.,  90635.,  91157.,  91679.,  124264., 124976., 125688., 126400.,
      127112., 127824., 128536., 129248., 129960., 130672., 131384., 132096.,
      132808., 133520., 134232., 134944., 102995., 103541., 104087., 104633.,
      70944.,  71316.,  71688.,  72060.,  36623.,  36813.,  37003.,  37193.,
      149.,    347.,    545.,    743.,    1096.,   1500.,   1904.,   2308.,
      2873.,   3491.,   4109.,   4727.,   5512.,   6352.,   7192.,   8032.,
      8872.,   9712.,   10552.,  11392.,  12232.,  13072.,  13912.,  14752.,
      15592.,  16432.,  17272.,  18112.,  13259.,  13901.,  14543.,  15185.,
      9904.,   10340.,  10776.,  11212.,  5495.,   5717.,   5939.,   6161.,
      5866.,   6294.,   6722.,   7150.,   13680.,  14552.,  15424.,  16296.,
      23506.,  24838.,  26170.,  27502.,  35408.,  37216.,  39024.,  40832.,
      42640.,  44448.,  46256.,  48064.,  49872.,  51680.,  53488.,  55296.,
      57104.,  58912.,  60720.,  62528.,  46486.,  47866.,  49246.,  50626.,
      33472.,  34408.,  35344.,  36280.,  17998.,  18474.,  18950.,  19426.,
      18047.,  18737.,  19427.,  20117.,  39544.,  40948.,  42352.,  43756.,
      64587.,  66729.,  68871.,  71013.,  93272.,  96176.,  99080.,  101984.,
      104888., 107792., 110696., 113600., 116504., 119408., 122312., 125216.,
      128120., 131024., 133928., 136832., 102369., 104583., 106797., 109011.,
      72496.,  73996.,  75496.,  76996.,  38405.,  39167.,  39929.,  40691.,
      37367.,  38057.,  38747.,  39437.,  78856.,  80260.,  81664.,  83068.,
      124563., 126705., 128847., 130989., 174584., 177488., 180392., 183296.,
      186200., 189104., 192008., 194912., 197816., 200720., 203624., 206528.,
      209432., 212336., 215240., 218144., 164361., 166575., 168789., 171003.,
      114496., 115996., 117496., 118996., 59741.,  60503.,  61265.,  62027.,
      56687.,  57377.,  58067.,  58757.,  118168., 119572., 120976., 122380.,
      184539., 186681., 188823., 190965., 255896., 258800., 261704., 264608.,
      267512., 270416., 273320., 276224., 279128., 282032., 284936., 287840.,
      290744., 293648., 296552., 299456., 226353., 228567., 230781., 232995.,
      156496., 157996., 159496., 160996., 81077.,  81839.,  82601.,  83363.,
      76007.,  76697.,  77387.,  78077.,  157480., 158884., 160288., 161692.,
      244515., 246657., 248799., 250941., 337208., 340112., 343016., 345920.,
      348824., 351728., 354632., 357536., 360440., 363344., 366248., 369152.,
      372056., 374960., 377864., 380768., 288345., 290559., 292773., 294987.,
      198496., 199996., 201496., 202996., 102413., 103175., 103937., 104699.,
      95327.,  96017.,  96707.,  97397.,  196792., 198196., 199600., 201004.,
      304491., 306633., 308775., 310917., 418520., 421424., 424328., 427232.,
      430136., 433040., 435944., 438848., 441752., 444656., 447560., 450464.,
      453368., 456272., 459176., 462080., 350337., 352551., 354765., 356979.,
      240496., 241996., 243496., 244996., 123749., 124511., 125273., 126035.,
      75690.,  76182.,  76674.,  77166.,  155824., 156824., 157824., 158824.,
      240466., 241990., 243514., 245038., 329680., 331744., 333808., 335872.,
      337936., 340000., 342064., 344128., 346192., 348256., 350320., 352384.,
      354448., 356512., 358576., 360640., 273238., 274810., 276382., 277954.,
      187136., 188200., 189264., 190328., 96078.,  96618.,  97158.,  97698.,
      44213.,  44475.,  44737.,  44999.,  90824.,  91356.,  91888.,  92420.,
      139865., 140675., 141485., 142295., 191368., 192464., 193560., 194656.,
      195752., 196848., 197944., 199040., 200136., 201232., 202328., 203424.,
      204520., 205616., 206712., 207808., 157355., 158189., 159023., 159857.,
      107568., 108132., 108696., 109260., 55127.,  55413.,  55699.,  55985.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1425630.,  1461830.,  1498030.,  1534230.,
      1842268.,  1886668.,  1931068.,  1975468.,  2301634.,  2354554.,
      2407474.,  2460394.,  2430778.,  2485938.,  2541098.,  2596258.,
      2559922.,  2617322.,  2674722.,  2732122.,  2689066.,  2748706.,
      2808346.,  2867986.,  2442460.,  2494540.,  2546620.,  2598700.,
      2138534.,  2182734.,  2226934.,  2271134.,  1776008.,  1812008.,
      1848008.,  1884008.,  1860912.,  1902576.,  1944240.,  1985904.,
      2392500.,  2445540.,  2498580.,  2551620.,  2980328.,  3045128.,
      3109928.,  3174728.,  3625932.,  3702876.,  3779820.,  3856764.,
      3766108.,  3845740.,  3925372.,  4005004.,  3906284.,  3988604.,
      4070924.,  4153244.,  4046460.,  4131468.,  4216476.,  4301484.,
      3621096.,  3695112.,  3769128.,  3843144.,  3122084.,  3184724.,
      3247364.,  3310004.,  2547888.,  2598768.,  2649648.,  2700528.,
      2734296.,  2791864.,  2849432.,  2907000.,  3448890.,  3521970.,
      3595050.,  3668130.,  4238868.,  4327908.,  4416948.,  4505988.,
      5106022.,  5211470.,  5316918.,  5422366.,  5269774.,  5378358.,
      5486942.,  5595526.,  5433526.,  5545246.,  5656966.,  5768686.,
      5597278.,  5712134.,  5826990.,  5941846.,  4978580.,  5078372.,
      5178164.,  5277956.,  4265554.,  4349834.,  4434114.,  4518394.,
      3456408.,  3524728.,  3593048.,  3661368.,  3702936.,  3778424.,
      3853912.,  3929400.,  4622570.,  4718050.,  4813530.,  4909010.,
      5635508.,  5751428.,  5867348.,  5983268.,  6743542.,  6880350.,
      7017158.,  7153966.,  6907294.,  7047238.,  7187182.,  7327126.,
      7071046.,  7214126.,  7357206.,  7500286.,  7234798.,  7381014.,
      7527230.,  7673446.,  6400820.,  6527492.,  6654164.,  6780836.,
      5454594.,  5561274.,  5667954.,  5774634.,  4394328.,  4480568.,
      4566808.,  4653048.,  4671576.,  4764984.,  4858392.,  4951800.,
      5796250.,  5914130.,  6032010.,  6149890.,  7032148.,  7174948.,
      7317748.,  7460548.,  8381062.,  8549230.,  8717398.,  8885566.,
      8544814.,  8716118.,  8887422.,  9058726.,  8708566.,  8883006.,
      9057446.,  9231886.,  8872318.,  9049894.,  9227470.,  9405046.,
      7823060.,  7976612.,  8130164.,  8283716.,  6643634.,  6772714.,
      6901794.,  7030874.,  5332248.,  5436408.,  5540568.,  5644728.,
      5485232.,  5572976.,  5660720.,  5748464.,  6716820.,  6827460.,
      6938100.,  7048740.,  8053288.,  8187208.,  8321128.,  8455048.,
      9496172.,  9653756.,  9811340.,  9968924.,  9654268.,  9814540.,
      9974812.,  10135084., 9812364.,  9975324.,  10138284., 10301244.,
      9970460.,  10136108., 10301756., 10467404., 8704296.,  8847432.,
      8990568.,  9133704.,  7315844.,  7436084.,  7556324.,  7676564.,
      5803568.,  5900528.,  5997488.,  6094448.,  5621576.,  5701096.,
      5780616.,  5860136.,  6779870.,  6880070.,  6980270.,  7080470.,
      8032348.,  8153548.,  8274748.,  8395948.,  9380290.,  9522810.,
      9665330.,  9807850.,  9520186.,  9664946.,  9809706.,  9954466.,
      9660082.,  9807082.,  9954082.,  10101082., 9799978.,  9949218.,
      10098458., 10247698., 8485084.,  8613964.,  8742844.,  8871724.,
      7060134.,  7168334.,  7276534.,  7384734.,  5523848.,  5611048.,
      5698248.,  5785448.,  5008928.,  5077664.,  5146400.,  5215136.,
      5895800.,  5982360.,  6068920.,  6155480.,  6861808.,  6966448.,
      7071088.,  7175728.,  7907976.,  8030952.,  8153928.,  8276904.,
      8017128.,  8141896.,  8266664.,  8391432.,  8126280.,  8252840.,
      8379400.,  8505960.,  8235432.,  8363784.,  8492136.,  8620488.,
      7057904.,  7168688.,  7279472.,  7390256.,  5786904.,  5879864.,
      5972824.,  6065784.,  4421408.,  4496288.,  4571168.,  4646048.,
      4970528.,  5080224.,  5189920.,  5299616.,  6515960.,  6653720.,
      6791480.,  6929240.,  8184560.,  8350640.,  8516720.,  8682800.,
      9977352.,  10172008., 10366664., 10561320., 10075240., 10271688.,
      10468136., 10664584., 10168008., 10358056., 10548104., 10738152.,
      10228008., 10411656., 10595304., 10778952., 9088240.,  9244080.,
      9399920.,  9555760.,  7819160.,  7946936.,  8074712.,  8202488.,
      6419744.,  6519200.,  6618656.,  6718112.,  8047752.,  8158504.,
      8269256.,  8380008.,  9641070.,  9780310.,  9919550.,  10058790.,
      11358268., 11526316., 11694364., 11862412., 13200626., 13397802.,
      13594978., 13792154., 13329770., 13529186., 13728602., 13928018.,
      13224418., 13417882., 13611346., 13804810., 13086298., 13273810.,
      13461322., 13648834., 11148476., 11307820., 11467164., 11626508.,
      9070902.,  9201758.,  9332614.,  9463470.,  6852296.,  6954344.,
      7056392.,  7158440.,  8152752.,  8267120.,  8381488.,  8495856.,
      9701780.,  9845700.,  9989620.,  10133540., 11379752., 11553608.,
      11727464., 11901320., 13188204., 13392380., 13596556., 13800732.,
      13328380., 13535244., 13742108., 13948972., 13004684., 13206044.,
      13407404., 13608764., 12648220., 12844076., 13039932., 13235788.,
      10693416., 10860104., 11026792., 11193480., 8592260.,  8729396.,
      8866532.,  9003668.,  6343216.,  6450416.,  6557616.,  6664816.,
      8048280.,  8168824.,  8289368.,  8409912.,  9511530.,  9663330.,
      9815130.,  9966930.,  11113140., 11296644., 11480148., 11663652.,
      12854902., 13070558., 13286214., 13501870., 13018654., 13237446.,
      13456238., 13675030., 12489158., 12702894., 12916630., 13130366.,
      11926894., 12135574., 12344254., 12552934., 10008628., 10186500.,
      10364372., 10542244., 7933058.,  8079674.,  8226290.,  8372906.,
      5698392.,  5813304.,  5928216.,  6043128.,  6047320.,  6153016.,
      6258712.,  6364408.,  6891290.,  7024530.,  7157770.,  7291010.,
      7858772.,  8020004.,  8181236.,  8342468.,  8951558.,  9141230.,
      9330902.,  9520574.,  9115310.,  9308118.,  9500926.,  9693734.,
      8356438.,  8544190.,  8731942.,  8919694.,  7564798.,  7747494.,
      7930190.,  8112886.,  6124500.,  6280100.,  6435700.,  6591300.,
      4541746.,  4669802.,  4797858.,  4925914.,  3863320.,  3963384.,
      4063448.,  4163512.,  3128856.,  3219704.,  3310552.,  3401400.,
      4172746.,  4287426.,  4402106.,  4516786.,  5325300.,  5464260.,
      5603220.,  5742180.,  6588310.,  6751998.,  6915686.,  7079374.,
      6752062.,  6918886.,  7085710.,  7252534.,  6812390.,  6974158.,
      7135926.,  7297694.,  6839950.,  6996662.,  7153374.,  7310086.,
      6106996.,  6240324.,  6373652.,  6506980.,  5246434.,  5355930.,
      5465426.,  5574922.,  4256472.,  4341688.,  4426904.,  4512120.,
      3396656.,  3458800.,  3520944.,  3583088.,  4353396.,  4432036.,
      4510676.,  4589316.,  5389416.,  5484936.,  5580456.,  5675976.,
      6506252.,  6619036.,  6731820.,  6844604.,  6664348.,  6779820.,
      6895292.,  7010764.,  6489644.,  6599612.,  6709580.,  6819548.,
      6282172.,  6386636.,  6491100.,  6595564.,  5434216.,  5522568.,
      5610920.,  5699272.,  4489572.,  4561428.,  4633284.,  4705140.,
      3446704.,  3501680.,  3556656.,  3611632.,  2342024.,  2372904.,
      2403784.,  2434664.,  2870126.,  2909526.,  2948926.,  2988326.,
      3443772.,  3492012.,  3540252.,  3588492.,  4064242.,  4121642.,
      4179042.,  4236442.,  4204138.,  4263778.,  4323418.,  4383058.,
      4344034.,  4405914.,  4467794.,  4529674.,  4483930.,  4548050.,
      4612170.,  4676290.,  3915964.,  3971884.,  4027804.,  4083724.,
      3286582.,  3333982.,  3381382.,  3428782.,  2594504.,  2633064.,
      2671624.,  2710184.,  2338592.,  2368416.,  2398240.,  2428064.,
      2771896.,  2809816.,  2847736.,  2885656.,  3245424.,  3291696.,
      3337968.,  3384240.,  3760200.,  3815080.,  3869960.,  3924840.,
      3869352.,  3926024.,  3982696.,  4039368.,  3978504.,  4036968.,
      4095432.,  4153896.,  4087656.,  4147912.,  4208168.,  4268424.,
      3519344.,  3571760.,  3624176.,  3676592.,  2896472.,  2940792.,
      2985112.,  3029432.,  2218016.,  2253984.,  2289952.,  2325920.,
      3078432.,  3149216.,  3220000.,  3290784.,  4053560.,  4142680.,
      4231800.,  4320920.,  5112944.,  5220656.,  5328368.,  5436080.,
      6257608.,  6384168.,  6510728.,  6637288.,  6355496.,  6483848.,
      6612200.,  6740552.,  6453384.,  6583528.,  6713672.,  6843816.,
      6551272.,  6683208.,  6815144.,  6947080.,  5891696.,  6005552.,
      6119408.,  6233264.,  5141720.,  5237240.,  5332760.,  5428280.,
      4300320.,  4377248.,  4454176.,  4531104.,  5218760.,  5313640.,
      5408520.,  5503400.,  6376446.,  6495846.,  6615246.,  6734646.,
      7642140.,  7786380.,  7930620.,  8074860.,  9017122.,  9186522.,
      9355922.,  9525322.,  9146266.,  9317906.,  9489546.,  9661186.,
      9275410.,  9449290.,  9623170.,  9797050.,  9404554.,  9580674.,
      9756794.,  9932914.,  8215708.,  8367628.,  8519548.,  8671468.,
      6902982.,  7030382.,  7157782.,  7285182.,  5465096.,  5567656.,
      5670216.,  5772776.,  6277168.,  6398704.,  6520240.,  6641776.,
      7686516.,  7839396.,  7992276.,  8145156.,  9231976.,  9416584.,
      9601192.,  9785800.,  10915084., 11131804., 11348524., 11565244.,
      11055260., 11274668., 11494076., 11713484., 11195436., 11417532.,
      11639628., 11861724., 11335612., 11560396., 11785180., 12009964.,
      9925992.,  10119816., 10313640., 10507464., 8362852.,  8525332.,
      8687812.,  8850292.,  6644656.,  6775408.,  6906160.,  7036912.,
      7771224.,  7921976.,  8072728.,  8223480.,  9552026.,  9741586.,
      9931146.,  10120706., 11501396., 11730212., 11959028., 12187844.,
      13621126., 13889646., 14158166., 14426686., 13784878., 14056534.,
      14328190., 14599846., 13948630., 14223422., 14498214., 14773006.,
      14112382., 14390310., 14668238., 14946166., 12374228., 12613796.,
      12853364., 13092932., 10448562., 10649322., 10850082., 11050842.,
      8333592.,  8495096.,  8656600.,  8818104.,  8739864.,  8908536.,
      9077208.,  9245880.,  10725706., 10937666., 11149626., 11361586.,
      12898036., 13153732., 13409428., 13665124., 15253526., 15545214.,
      15836902., 16128590., 15379390., 15666022., 15952654., 16239286.,
      15472486., 15754062., 16035638., 16317214., 15532814., 15809334.,
      16085854., 16362374., 13448308., 13681988., 13915668., 14149348.,
      11158370., 11348762., 11539154., 11729546., 8661208.,  8807864.,
      8954520.,  9101176.,  9491416.,  9645240.,  9799064.,  9952888.,
      11546106., 11739506., 11932906., 12126306., 13772436., 14005860.,
      14239284., 14472708., 15937702., 16203406., 16469110., 16734814.,
      15834190., 16094838., 16355486., 16616134., 15697910., 15953502.,
      16209094., 16464686., 15528862., 15779398., 16029934., 16280470.,
      13234196., 13445604., 13657012., 13868420., 10748946., 10920778.,
      11092610., 11264442., 8071320.,  8203128.,  8334936.,  8466744.,
      9299376.,  9434224.,  9569072.,  9703920.,  11176276., 11345796.,
      11515316., 11684836., 13205160., 13409736., 13614312., 13818888.,
      14923692., 15155516., 15387340., 15619164., 14585148., 14811468.,
      15037788., 15264108., 14213836., 14434652., 14655468., 14876284.,
      13809756., 14025068., 14240380., 14455692., 11529640., 11710664.,
      11891688., 12072712., 9080132.,  9226484.,  9372836.,  9519188.,
      6459696.,  6570992.,  6682288.,  6793584.,  8057288.,  8170600.,
      8283912.,  8397224.,  9483006.,  9625446.,  9767886.,  9910326.,
      11036700., 11208588., 11380476., 11552364., 12026402., 12219866.,
      12413330., 12606794., 11440282., 11627794., 11815306., 12002818.,
      10821394., 11002954., 11184514., 11366074., 10169738., 10345346.,
      10520954., 10696562., 8165532.,  8312332.,  8459132.,  8605932.,
      6017478.,  6135150.,  6252822.,  6370494.,  3724296.,  3812520.,
      3900744.,  3988968.,  5693472.,  5782688.,  5871904.,  5961120.,
      6376696.,  6488856.,  6601016.,  6713176.,  7159536.,  7294896.,
      7430256.,  7565616.,  7120392.,  7271016.,  7421640.,  7572264.,
      6274152.,  6418376.,  6562600.,  6706824.,  5395144.,  5532968.,
      5670792.,  5808616.,  4483368.,  4614792.,  4746216.,  4877640.,
      4082928.,  4191664.,  4300400.,  4409136.,  3568536.,  3654328.,
      3740120.,  3825912.,  2939168.,  3001760.,  3064352.,  3126944.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x9x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2344.,    2888.,
      3432.,    3976.,    4520.,    5064.,    5608.,    6152.,    6696.,
      7240.,    7784.,    8328.,    8872.,    9416.,    9960.,    10504.,
      9898.,    10402.,   10906.,   11410.,   8932.,    9332.,    9732.,
      10132.,   5718.,    5950.,    6182.,    6414.,    1340.,    1676.,
      2012.,    2348.,    5896.,    6696.,    7496.,    8296.,    14180.,
      15572.,   16964.,   18356.,   26704.,   28816.,   30928.,   33040.,
      35152.,   37264.,   39376.,   41488.,   43600.,   45712.,   47824.,
      49936.,   52048.,   54160.,   56272.,   58384.,   49748.,   51524.,
      53300.,   55076.,   40648.,   41960.,   43272.,   44584.,   24236.,
      24956.,   25676.,   26396.,   11098.,   11986.,   12874.,   13762.,
      31244.,   33212.,   35180.,   37148.,   61206.,   64446.,   67686.,
      70926.,   101752.,  106456.,  111160.,  115864.,  120568.,  125272.,
      129976.,  134680.,  139384.,  144088.,  148792.,  153496.,  158200.,
      162904.,  167608.,  172312.,  141054.,  144870.,  148686.,  152502.,
      109484.,  112220.,  114956.,  117692.,  62722.,   64186.,   65650.,
      67114.,   35962.,   36850.,   37738.,   38626.,   86348.,   88316.,
      90284.,   92252.,   151926.,  155166.,  158406.,  161646.,  233464.,
      238168.,  242872.,  247576.,  252280.,  256984.,  261688.,  266392.,
      271096.,  275800.,  280504.,  285208.,  289912.,  294616.,  299320.,
      304024.,  247902.,  251718.,  255534.,  259350.,  186092.,  188828.,
      191564.,  194300.,  103714.,  105178.,  106642.,  108106.,  60826.,
      61714.,   62602.,   63490.,   141452.,  143420.,  145388.,  147356.,
      242646.,  245886.,  249126.,  252366.,  365176.,  369880.,  374584.,
      379288.,  383992.,  388696.,  393400.,  398104.,  402808.,  407512.,
      412216.,  416920.,  421624.,  426328.,  431032.,  435736.,  354750.,
      358566.,  362382.,  366198.,  262700.,  265436.,  268172.,  270908.,
      144706.,  146170.,  147634.,  149098.,  85690.,   86578.,   87466.,
      88354.,   196556.,  198524.,  200492.,  202460.,  333366.,  336606.,
      339846.,  343086.,  496888.,  501592.,  506296.,  511000.,  515704.,
      520408.,  525112.,  529816.,  534520.,  539224.,  543928.,  548632.,
      553336.,  558040.,  562744.,  567448.,  461598.,  465414.,  469230.,
      473046.,  339308.,  342044.,  344780.,  347516.,  185698.,  187162.,
      188626.,  190090.,  110554.,  111442.,  112330.,  113218.,  251660.,
      253628.,  255596.,  257564.,  424086.,  427326.,  430566.,  433806.,
      628600.,  633304.,  638008.,  642712.,  647416.,  652120.,  656824.,
      661528.,  666232.,  670936.,  675640.,  680344.,  685048.,  689752.,
      694456.,  699160.,  568446.,  572262.,  576078.,  579894.,  415916.,
      418652.,  421388.,  424124.,  226690.,  228154.,  229618.,  231082.,
      127548.,  128396.,  129244.,  130092.,  278280.,  280104.,  281928.,
      283752.,  452708.,  455636.,  458564.,  461492.,  651344.,  655504.,
      659664.,  663824.,  667984.,  672144.,  676304.,  680464.,  684624.,
      688784.,  692944.,  697104.,  701264.,  705424.,  709584.,  713744.,
      566612.,  569924.,  573236.,  576548.,  405192.,  407528.,  409864.,
      412200.,  216492.,  217724.,  218956.,  220188.,  93086.,   93638.,
      94190.,   94742.,   199172.,  200340.,  201508.,  202676.,  318514.,
      320362.,  322210.,  324058.,  451368.,  453960.,  456552.,  459144.,
      461736.,  464328.,  466920.,  469512.,  472104.,  474696.,  477288.,
      479880.,  482472.,  485064.,  487656.,  490248.,  384298.,  386338.,
      388378.,  390418.,  271332.,  272756.,  274180.,  275604.,  143318.,
      144062.,  144806.,  145550.,  510.,     1318.,    2126.,    2934.,
      4292.,    5972.,    7652.,    9332.,    11602.,   14218.,   16834.,
      19450.,   22696.,   26312.,   29928.,   33544.,   37160.,   40776.,
      44392.,   48008.,   51624.,   55240.,   58856.,   62472.,   66088.,
      69704.,   73320.,   76936.,   57418.,   60226.,   63034.,   65842.,
      43684.,   45620.,   47556.,   49492.,   24630.,   25630.,   26630.,
      27630.,   23804.,   25676.,   27548.,   29420.,   56968.,   60840.,
      64712.,   68584.,   100004.,  106004.,  112004.,  118004.,  153424.,
      161680.,  169936.,  178192.,  186448.,  194704.,  202960.,  211216.,
      219472.,  227728.,  235984.,  244240.,  252496.,  260752.,  269008.,
      277264.,  209300.,  215684.,  222068.,  228452.,  153160.,  157544.,
      161928.,  166312.,  83564.,   85820.,   88076.,   90332.,   77050.,
      80242.,   83434.,   86626.,   172364.,  178940.,  185516.,  192092.,
      286710.,  296862.,  307014.,  317166.,  420856.,  434776.,  448696.,
      462616.,  476536.,  490456.,  504376.,  518296.,  532216.,  546136.,
      560056.,  573976.,  587896.,  601816.,  615736.,  629656.,  477150.,
      487878.,  498606.,  509334.,  342764.,  350108.,  357452.,  364796.,
      183970.,  187738.,  191506.,  195274.,  166426.,  169618.,  172810.,
      176002.,  356492.,  363068.,  369644.,  376220.,  570966.,  581118.,
      591270.,  601422.,  810616.,  824536.,  838456.,  852376.,  866296.,
      880216.,  894136.,  908056.,  921976.,  935896.,  949816.,  963736.,
      977656.,  991576.,  1005496., 1019416., 777534.,  788262.,  798990.,
      809718.,  548396.,  555740.,  563084.,  570428.,  289474.,  293242.,
      297010.,  300778.,  255802.,  258994.,  262186.,  265378.,  540620.,
      547196.,  553772.,  560348.,  855222.,  865374.,  875526.,  885678.,
      1200376., 1214296., 1228216., 1242136., 1256056., 1269976., 1283896.,
      1297816., 1311736., 1325656., 1339576., 1353496., 1367416., 1381336.,
      1395256., 1409176., 1077918., 1088646., 1099374., 1110102., 754028.,
      761372.,  768716.,  776060.,  394978.,  398746.,  402514.,  406282.,
      345178.,  348370.,  351562.,  354754.,  724748.,  731324.,  737900.,
      744476.,  1139478., 1149630., 1159782., 1169934., 1590136., 1604056.,
      1617976., 1631896., 1645816., 1659736., 1673656., 1687576., 1701496.,
      1715416., 1729336., 1743256., 1757176., 1771096., 1785016., 1798936.,
      1378302., 1389030., 1399758., 1410486., 959660.,  967004.,  974348.,
      981692.,  500482.,  504250.,  508018.,  511786.,  434554.,  437746.,
      440938.,  444130.,  908876.,  915452.,  922028.,  928604.,  1423734.,
      1433886., 1444038., 1454190., 1979896., 1993816., 2007736., 2021656.,
      2035576., 2049496., 2063416., 2077336., 2091256., 2105176., 2119096.,
      2133016., 2146936., 2160856., 2174776., 2188696., 1678686., 1689414.,
      1700142., 1710870., 1165292., 1172636., 1179980., 1187324., 605986.,
      609754.,  613522.,  617290.,  365052.,  367436.,  369820.,  372204.,
      759432.,  764328.,  769224.,  774120.,  1183652., 1191188., 1198724.,
      1206260., 1638224., 1648528., 1658832., 1669136., 1679440., 1689744.,
      1700048., 1710352., 1720656., 1730960., 1741264., 1751568., 1761872.,
      1772176., 1782480., 1792784., 1371284., 1379204., 1387124., 1395044.,
      947784.,  953192.,  958600.,  964008.,  490860.,  493628.,  496396.,
      499164.,  222590.,  223910.,  225230.,  226550.,  461252.,  463956.,
      466660.,  469364.,  716242.,  720394.,  724546.,  728698.,  987816.,
      993480.,  999144.,  1004808., 1010472., 1016136., 1021800., 1027464.,
      1033128., 1038792., 1044456., 1050120., 1055784., 1061448., 1067112.,
      1072776., 818890.,  823234.,  827578.,  831922.,  564132.,  567092.,
      570052.,  573012.,  291254.,  292766.,  294278.,  295790.,  990.,
      2566.,    4142.,    5718.,    8324.,    11540.,   14756.,   17972.,
      22258.,   27178.,   32098.,   37018.,   43048.,   49736.,   56424.,
      63112.,   69800.,   76488.,   83176.,   89864.,   96552.,   103240.,
      109928.,  116616.,  123304.,  129992.,  136680.,  143368.,  104938.,
      110050.,  115162.,  120274.,  78436.,   81908.,   85380.,   88852.,
      43542.,   45310.,   47078.,   48846.,   46268.,   49676.,   53084.,
      56492.,   108040.,  114984.,  121928.,  128872.,  185828.,  196436.,
      207044.,  217652.,  280144.,  294544.,  308944.,  323344.,  337744.,
      352144.,  366544.,  380944.,  395344.,  409744.,  424144.,  438544.,
      452944.,  467344.,  481744.,  496144.,  368852.,  379844.,  390836.,
      401828.,  265672.,  273128.,  280584.,  288040.,  142892.,  146684.,
      150476.,  154268.,  143002.,  148498.,  153994.,  159490.,  313484.,
      324668.,  335852.,  347036.,  512214.,  529278.,  546342.,  563406.,
      739960.,  763096.,  786232.,  809368.,  832504.,  855640.,  878776.,
      901912.,  925048.,  948184.,  971320.,  994456.,  1017592., 1040728.,
      1063864., 1087000., 813246.,  830886.,  848526.,  866166.,  576044.,
      587996.,  599948.,  611900.,  305218.,  311290.,  317362.,  323434.,
      296890.,  302386.,  307882.,  313378.,  626636.,  637820.,  649004.,
      660188.,  990006.,  1007070., 1024134., 1041198., 1387768., 1410904.,
      1434040., 1457176., 1480312., 1503448., 1526584., 1549720., 1572856.,
      1595992., 1619128., 1642264., 1665400., 1688536., 1711672., 1734808.,
      1307166., 1324806., 1342446., 1360086., 910700.,  922652.,  934604.,
      946556.,  475234.,  481306.,  487378.,  493450.,  450778.,  456274.,
      461770.,  467266.,  939788.,  950972.,  962156.,  973340.,  1467798.,
      1484862., 1501926., 1518990., 2035576., 2058712., 2081848., 2104984.,
      2128120., 2151256., 2174392., 2197528., 2220664., 2243800., 2266936.,
      2290072., 2313208., 2336344., 2359480., 2382616., 1801086., 1818726.,
      1836366., 1854006., 1245356., 1257308., 1269260., 1281212., 645250.,
      651322.,  657394.,  663466.,  604666.,  610162.,  615658.,  621154.,
      1252940., 1264124., 1275308., 1286492., 1945590., 1962654., 1979718.,
      1996782., 2683384., 2706520., 2729656., 2752792., 2775928., 2799064.,
      2822200., 2845336., 2868472., 2891608., 2914744., 2937880., 2961016.,
      2984152., 3007288., 3030424., 2295006., 2312646., 2330286., 2347926.,
      1580012., 1591964., 1603916., 1615868., 815266.,  821338.,  827410.,
      833482.,  758554.,  764050.,  769546.,  775042.,  1566092., 1577276.,
      1588460., 1599644., 2423382., 2440446., 2457510., 2474574., 3331192.,
      3354328., 3377464., 3400600., 3423736., 3446872., 3470008., 3493144.,
      3516280., 3539416., 3562552., 3585688., 3608824., 3631960., 3655096.,
      3678232., 2788926., 2806566., 2824206., 2841846., 1914668., 1926620.,
      1938572., 1950524., 985282.,  991354.,  997426.,  1003498., 602556.,
      606476.,  610396.,  614316.,  1240584., 1248552., 1256520., 1264488.,
      1914596., 1926740., 1938884., 1951028., 2625104., 2641552., 2658000.,
      2674448., 2690896., 2707344., 2723792., 2740240., 2756688., 2773136.,
      2789584., 2806032., 2822480., 2838928., 2855376., 2871824., 2175956.,
      2188484., 2201012., 2213540., 1490376., 1498856., 1507336., 1515816.,
      765228.,  769532.,  773836.,  778140.,  352094.,  354182.,  356270.,
      358358.,  723332.,  727572.,  731812.,  736052.,  1113970., 1120426.,
      1126882., 1133338., 1524264., 1533000., 1541736., 1550472., 1559208.,
      1567944., 1576680., 1585416., 1594152., 1602888., 1611624., 1620360.,
      1629096., 1637832., 1646568., 1655304., 1253482., 1260130., 1266778.,
      1273426., 856932.,  861428.,  865924.,  870420.,  439190.,  441470.,
      443750.,  446030.};
  const std::array<int, 4> in_shape = {{3, 9, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1876.,   2610.,   3458.,   4424.,   4830.,   4550.,   4140.,   3596.,
      3840.,   5225.,   6790.,   8540.,   9170.,   8485.,   7600.,   6510.,
      6850.,   9185.,   11781.,  14644.,  15547.,  14211.,  12590.,  10678.,
      11130.,  14770.,  18767.,  23128.,  24353.,  22064.,  19390.,  16324.,
      16394.,  21490.,  26999.,  32928.,  34153.,  30632.,  26670.,  22260.,
      21658.,  28210.,  35231.,  42728.,  43953.,  39200.,  33950.,  28196.,
      26922.,  34930.,  43463.,  52528.,  53753.,  47768.,  41230.,  34132.,
      31366.,  40415.,  49959.,  60004.,  61201.,  54045.,  46370.,  38170.,
      33420.,  42875.,  52780.,  63140.,  64260.,  56515.,  48300.,  39610.,
      32860.,  42030.,  51590.,  61544.,  62538.,  54842.,  46740.,  38228.,
      18516.,  24210.,  30338.,  36904.,  37310.,  33350.,  28940.,  24076.,
      30240.,  39225.,  48790.,  58940.,  59570.,  52885.,  45600.,  37710.,
      45250.,  58385.,  72261.,  86884.,  87787.,  77571.,  66590.,  54838.,
      63770.,  81970.,  101087., 121128., 122353., 107744., 92190.,  75684.,
      69034.,  88690.,  109319., 130928., 132153., 116312., 99470.,  81620.,
      74298.,  95410.,  117551., 140728., 141953., 124880., 106750., 87556.,
      79562.,  102130., 125783., 150528., 151753., 133448., 114030., 93492.,
      83206.,  106415., 130599., 155764., 156961., 137565., 117170., 95770.,
      82220.,  104875., 128380., 152740., 153860., 134515., 114300., 93210.,
      76380.,  97230.,  118790., 141064., 142058., 123962., 105140., 85588.,
      35156.,  45810.,  57218.,  69384.,  69790.,  62150.,  53740.,  44556.,
      56640.,  73225.,  90790.,  109340., 109970., 97285.,  83600.,  68910.,
      83650.,  107585., 132741., 159124., 160027., 140931., 120590., 98998.,
      116410., 149170., 183407., 219128., 220353., 193424., 164990., 135044.,
      121674., 155890., 191639., 228928., 230153., 201992., 172270., 140980.,
      126938., 162610., 199871., 238728., 239953., 210560., 179550., 146916.,
      132202., 169330., 208103., 248528., 249753., 219128., 186830., 152852.,
      135046., 172415., 211239., 251524., 252721., 221085., 187970., 153370.,
      131020., 166875., 203980., 242340., 243460., 212515., 180300., 146810.,
      119900., 152430., 185990., 220584., 221578., 193082., 163540., 132948.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    7.,    10.,   13.,   16.,   19.,   14.,   11.,   35.,
      45.,   55.,   65.,   75.,   85.,   56.,   44.,   121.,  142.,  163.,
      184.,  205.,  226.,  140.,  114.,  290.,  326.,  362.,  398.,  434.,
      470.,  280.,  226.,  542.,  578.,  614.,  650.,  686.,  722.,  420.,
      338.,  794.,  830.,  866.,  902.,  938.,  974.,  560.,  450.,  1046.,
      1082., 1118., 1154., 1190., 1226., 700.,  512.,  1147., 1180., 1213.,
      1246., 1279., 1312., 728.,  467.,  1025., 1051., 1077., 1103., 1129.,
      1155., 630.,  301.,  652.,  667.,  682.,  697.,  712.,  727.,  392.,
      9.,    28.,   47.,   66.,   85.,   104.,  123.,  70.,   83.,   195.,
      237.,  279.,  321.,  363.,  405.,  224.,  236.,  529.,  598.,  667.,
      736.,  805.,  874.,  476.,  482.,  1058., 1158., 1258., 1358., 1458.,
      1558., 840.,  818.,  1758., 1858., 1958., 2058., 2158., 2258., 1204.,
      1154., 2458., 2558., 2658., 2758., 2858., 2958., 1568., 1490., 3158.,
      3258., 3358., 3458., 3558., 3658., 1932., 1376., 2899., 2980., 3061.,
      3142., 3223., 3304., 1736., 1099., 2305., 2363., 2421., 2479., 2537.,
      2595., 1358., 645.,  1348., 1379., 1410., 1441., 1472., 1503., 784.,
      17.,   52.,   87.,   122.,  157.,  192.,  227.,  126.,  155.,  355.,
      429.,  503.,  577.,  651.,  725.,  392.,  428.,  937.,  1054., 1171.,
      1288., 1405., 1522., 812.,  850.,  1826., 1990., 2154., 2318., 2482.,
      2646., 1400., 1410., 2974., 3138., 3302., 3466., 3630., 3794., 1988.,
      1970., 4122., 4286., 4450., 4614., 4778., 4942., 2576., 2530., 5270.,
      5434., 5598., 5762., 5926., 6090., 3164., 2240., 4651., 4780., 4909.,
      5038., 5167., 5296., 2744., 1731., 3585., 3675., 3765., 3855., 3945.,
      4035., 2086., 989.,  2044., 2091., 2138., 2185., 2232., 2279., 1176.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14144.,   19760.,   26272.,   33712.,   36904.,   34864.,   31800.,
      27680.,   29340.,   40025.,   52130.,   65695.,   70665.,   65510.,
      58775.,   50420.,   52784.,   70900.,   91080.,   113372.,  120512.,
      110304.,  97840.,   83072.,   86268.,   114625.,  145810.,  179879.,
      189581.,  171934.,  151235.,  127428.,  127932.,  167825.,  210994.,
      257495.,  267197.,  239806.,  208915.,  174468.,  169596.,  221025.,
      276178.,  335111.,  344813.,  307678.,  266595.,  221508.,  211260.,
      274225.,  341362.,  412727.,  422429.,  375550.,  324275.,  268548.,
      247040.,  318400.,  393696.,  472976.,  482468.,  426168.,  365740.,
      301136.,  263820.,  338525.,  416810.,  498715.,  507605.,  446510.,
      381675.,  313060.,  259808.,  332360.,  408016.,  486808.,  494704.,
      433888.,  369840.,  302528.,  144704.,  189360.,  237472.,  289072.,
      292264.,  261424.,  227000.,  188960.,  237340.,  308025.,  383330.,
      463295.,  468265.,  415910.,  358775.,  296820.,  356144.,  459700.,
      569160.,  684572.,  691712.,  611424.,  525040.,  432512.,  502908.,
      646625.,  797650.,  956039.,  965741.,  850654.,  728035.,  597828.,
      544572.,  699825.,  862834.,  1033655., 1043357., 918526.,  785715.,
      644868.,  586236.,  753025.,  928018.,  1111271., 1120973., 986398.,
      843395.,  691908.,  627900.,  806225.,  993202.,  1188887., 1198589.,
      1054270., 901075.,  738948.,  657920.,  841600.,  1033056., 1232336.,
      1241828., 1088568., 927340.,  758096.,  651020.,  830525.,  1016810.,
      1209915., 1218805., 1065710., 905675.,  738660.,  605408.,  770760.,
      941776.,  1118488., 1126384., 983008.,  833840.,  678848.,  275264.,
      358960.,  448672.,  544432.,  547624.,  487984.,  422200.,  350240.,
      445340.,  576025.,  714530.,  860895.,  865865.,  766310.,  658775.,
      543220.,  659504.,  848500.,  1047240., 1255772., 1262912., 1112544.,
      952240.,  781952.,  919548.,  1178625., 1449490., 1732199., 1741901.,
      1529374., 1304835., 1068228., 961212.,  1231825., 1514674., 1809815.,
      1819517., 1597246., 1362515., 1115268., 1002876., 1285025., 1579858.,
      1887431., 1897133., 1665118., 1420195., 1162308., 1044540., 1338225.,
      1645042., 1965047., 1974749., 1732990., 1477875., 1209348., 1068800.,
      1364800., 1672416., 1991696., 2001188., 1750968., 1488940., 1215056.,
      1038220., 1322525., 1616810., 1921115., 1930005., 1684910., 1429675.,
      1164260., 951008.,  1209160., 1475536., 1750168., 1758064., 1532128.,
      1297840., 1055168.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    42.,    62.,    82.,    102.,   122.,   95.,    64.,
      224.,   296.,   368.,   440.,   512.,   584.,   396.,   289.,   830.,
      986.,   1142.,  1298.,  1454.,  1610.,  1015.,  792.,   2064.,  2336.,
      2608.,  2880.,  3152.,  3424.,  2064.,  1632.,  3968.,  4240.,  4512.,
      4784.,  5056.,  5328.,  3128.,  2472.,  5872.,  6144.,  6416.,  6688.,
      6960.,  7232.,  4192.,  3312.,  7776.,  8048.,  8320.,  8592.,  8864.,
      9136.,  5256.,  3853.,  8678.,  8930.,  9182.,  9434.,  9686.,  9938.,
      5539.,  3556.,  7832.,  8032.,  8232.,  8432.,  8632.,  8832.,  4832.,
      2309.,  5014.,  5130.,  5246.,  5362.,  5478.,  5594.,  3023.,  53.,
      182.,   330.,   478.,   626.,   774.,   922.,   527.,   608.,   1440.,
      1768.,  2096.,  2424.,  2752.,  3080.,  1708.,  1777.,  3998.,  4538.,
      5078.,  5618.,  6158.,  6698.,  3655.,  3672.,  8080.,  8864.,  9648.,
      10432., 11216., 12000., 6480.,  6304.,  13568., 14352., 15136., 15920.,
      16704., 17488., 9336.,  8936.,  19056., 19840., 20624., 21408., 22192.,
      22976., 12192., 11568., 24544., 25328., 26112., 26896., 27680., 28464.,
      15048., 10717., 22598., 23234., 23870., 24506., 25142., 25778., 13555.,
      8580.,  18008., 18464., 18920., 19376., 19832., 20288., 10624., 5045.,
      10550., 10794., 11038., 11282., 11526., 11770., 6143.,  101.,   342.,
      618.,   894.,   1170.,  1446.,  1722.,  959.,   1152.,  2656.,  3240.,
      3824.,  4408.,  4992.,  5576.,  3020.,  3265.,  7166.,  8090.,  9014.,
      9938.,  10862., 11786., 6295.,  6552.,  14096., 15392., 16688., 17984.,
      19280., 20576., 10896., 10976., 23168., 24464., 25760., 27056., 28352.,
      29648., 15544., 15400., 32240., 33536., 34832., 36128., 37424., 38720.,
      20192., 19824., 41312., 42608., 43904., 45200., 46496., 47792., 24840.,
      17581., 36518., 37538., 38558., 39578., 40598., 41618., 21571., 13604.,
      28184., 28896., 29608., 30320., 31032., 31744., 16416., 7781.,  16086.,
      16458., 16830., 17202., 17574., 17946., 9263.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      109728.,   153640.,   204656.,   263032.,   288344.,   272816.,
      249160.,   217120.,   229240.,   313150.,   408340.,   515130.,
      554610.,   514660.,   462150.,   396760.,   414256.,   556940.,
      716040.,   891940.,   948724.,   868968.,   771260.,   655216.,
      679112.,   902930.,   1149260.,  1418550.,  1495774.,  1357244.,
      1194410.,  1006824.,  1010632.,  1326290.,  1668044.,  2036342.,
      2113566.,  1897532.,  1653610.,  1381352.,  1342152.,  1749650.,
      2186828.,  2654134.,  2731358.,  2437820.,  2112810.,  1755880.,
      1673672.,  2173010.,  2705612.,  3271926.,  3349150.,  2978108.,
      2572010.,  2130408.,  1960816.,  2527580.,  3125736.,  3755668.,
      3831268.,  3384648.,  2905100.,  2392240.,  2096440.,  2690350.,
      3312820.,  3964170.,  4035010.,  3549700.,  3034550.,  2489240.,
      2066208.,  2643400.,  3245360.,  3872344.,  3935288.,  3451760.,
      2942440.,  2407072.,  1143968.,  1497640.,  1878896.,  2287992.,
      2313304.,  2069936.,  1797960.,  1497120.,  1880440.,  2441150.,
      3038740.,  3673530.,  3713010.,  3298660.,  2846150.,  2355160.,
      2825776.,  3648140.,  4517640.,  5434660.,  5491444.,  4854888.,
      4169660.,  3435376.,  3994312.,  5136530.,  6337100.,  7596470.,
      7673694.,  6760124.,  5786410.,  4752104.,  4325832.,  5559890.,
      6855884.,  8214262.,  8291486.,  7300412.,  6245610.,  5126632.,
      4657352.,  5983250.,  7374668.,  8832054.,  8909278.,  7840700.,
      6704810.,  5501160.,  4988872.,  6406610.,  7893452.,  9449846.,
      9527070.,  8380988.,  7164010.,  5875688.,  5232496.,  6693980.,
      8217576.,  9803668.,  9879268.,  8660808.,  7378700.,  6032560.,
      5181240.,  6610350.,  8093620.,  9631370.,  9702210.,  8484100.,
      7210550.,  5881240.,  4820768.,  6137800.,  7500080.,  8907864.,
      8970808.,  7829360.,  6641640.,  5407392.,  2178208.,  2841640.,
      3553136.,  4312952.,  4338264.,  3867056.,  3346760.,  2777120.,
      3531640.,  4569150.,  5669140.,  6831930.,  6871410.,  6082660.,
      5230150.,  4313560.,  5237296.,  6739340.,  8319240.,  9977380.,
      10034164., 8840808.,  7568060.,  6215536.,  7309512.,  9370130.,
      11524940., 13774390., 13851614., 12163004., 10378410., 8497384.,
      7641032.,  9793490.,  12043724., 14392182., 14469406., 12703292.,
      10837610., 8871912.,  7972552.,  10216850., 12562508., 15009974.,
      15087198., 13243580., 11296810., 9246440.,  8304072.,  10640210.,
      13081292., 15627766., 15704990., 13783868., 11756010., 9620968.,
      8504176.,  10860380., 13309416., 15851668., 15927268., 13936968.,
      11852300., 9672880.,  8266040.,  10530350., 12874420., 15298570.,
      15369410., 13418500., 11386550., 9273240.,  7575328.,  9632200.,
      11754800., 13943384., 14006328., 12206960., 10340840., 8407712.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    284.,    428.,    572.,    716.,    860.,    694.,
      420.,    1576.,   2120.,   2664.,   3208.,   3752.,   4296.,   2964.,
      2066.,   6100.,   7300.,   8500.,   9700.,   10900.,  12100.,  7706.,
      5864.,   15504.,  17616.,  19728.,  21840.,  23952.,  26064.,  15816.,
      12360.,  30288.,  32400.,  34512.,  36624.,  38736.,  40848.,  24104.,
      18856.,  45072.,  47184.,  49296.,  51408.,  53520.,  55632.,  32392.,
      25352.,  59856.,  61968.,  64080.,  66192.,  68304.,  70416.,  40680.,
      29858.,  67444.,  69412.,  71380.,  73348.,  75316.,  77284.,  43178.,
      27732.,  61192.,  62760.,  64328.,  65896.,  67464.,  69032.,  37828.,
      18078.,  39308.,  40220.,  41132.,  42044.,  42956.,  43868.,  23734.,
      350.,    1292.,   2460.,   3628.,   4796.,   5964.,   7132.,   4086.,
      4644.,   11048.,  13640.,  16232.,  18824.,  21416.,  24008.,  13332.,
      13778.,  31060.,  35332.,  39604.,  43876.,  48148.,  52420.,  28634.,
      28648.,  63120.,  69328.,  75536.,  81744.,  87952.,  94160.,  50888.,
      49480.,  106576., 112784., 118992., 125200., 131408., 137616., 73512.,
      70312.,  150032., 156240., 162448., 168656., 174864., 181072., 96136.,
      91144.,  193488., 199696., 205904., 212112., 218320., 224528., 118760.,
      84578.,  178420., 183460., 188500., 193540., 198580., 203620., 107114.,
      67796.,  142344., 145960., 149576., 153192., 156808., 160424., 84036.,
      39902.,  83468.,  85404.,  87340.,  89276.,  91212.,  93148.,  48630.,
      670.,    2444.,   4636.,   6828.,   9020.,   11212.,  13404.,  7478.,
      8868.,   20520.,  25160.,  29800.,  34440.,  39080.,  43720.,  23700.,
      25490.,  56020.,  63364.,  70708.,  78052.,  85396.,  92740.,  49562.,
      51432.,  110736., 121040., 131344., 141648., 151952., 162256., 85960.,
      86600.,  182864., 193168., 203472., 213776., 224080., 234384., 122920.,
      121768., 254992., 265296., 275600., 285904., 296208., 306512., 159880.,
      156936., 327120., 337424., 347728., 358032., 368336., 378640., 196840.,
      139298., 289396., 297508., 305620., 313732., 321844., 329956., 171050.,
      107860., 223496., 229160., 234824., 240488., 246152., 251816., 130244.,
      61726.,  127628., 130588., 133548., 136508., 139468., 142428., 73526.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3520.,   3752.,   4920.,   5220.,   6544.,   6916.,   8400.,   8848.,
      9184.,   9660.,   8680.,   9100.,   7920.,   8280.,   6896.,   7192.,
      7310.,   7680.,   9975.,   10450.,  12995.,  13580.,  16380.,  17080.,
      17605.,  18340.,  16325.,  16970.,  14650.,  15200.,  12570.,  13020.,
      13160.,  13700.,  17680.,  18370.,  22716.,  23562.,  28280.,  29288.,
      30044.,  31094.,  27504.,  28422.,  24400.,  25180.,  20720.,  21356.,
      21518.,  22260.,  28595.,  29540.,  36379.,  37534.,  44884.,  46256.,
      47285.,  48706.,  42889.,  44128.,  37730.,  38780.,  31794.,  32648.,
      31822.,  32788.,  41755.,  42980.,  52507.,  53998.,  64092.,  65856.,
      66493.,  68306.,  59689.,  61264.,  52010.,  53340.,  43442.,  44520.,
      42126.,  43316.,  54915.,  56420.,  68635.,  70462.,  83300.,  85456.,
      85701.,  87906.,  76489.,  78400.,  66290.,  67900.,  55090.,  56392.,
      52430.,  53844.,  68075.,  69860.,  84763.,  86926.,  102508., 105056.,
      104909., 107506., 93289.,  95536.,  80570.,  82460.,  66738.,  68264.,
      61424.,  62732.,  79180.,  80830.,  97920.,  99918.,  117656., 120008.,
      120008., 122402., 106020., 108090., 91000.,  92740.,  74936.,  76340.,
      65670.,  66840.,  84275.,  85750.,  103775., 105560., 124180., 126280.,
      126385., 128520., 111185., 113030., 95050.,  96600.,  77970.,  79220.,
      64720.,  65720.,  82800.,  84060.,  101656., 103180., 121296., 123088.,
      123256., 125076., 108112., 109684., 92160.,  93480.,  75392.,  76456.,
      35520.,  37032.,  46520.,  48420.,  58384.,  60676.,  71120.,  73808.,
      71904.,  74620.,  64360.,  66700.,  55920.,  57880.,  46576.,  48152.,
      58510.,  60480.,  75975.,  78450.,  94595.,  97580.,  114380., 117880.,
      115605., 119140., 102725., 105770., 88650.,  91200.,  73370.,  75420.,
      88040.,  90500.,  113680., 116770., 140796., 144522., 169400., 173768.,
      171164., 175574., 151344., 155142., 130000., 133180., 107120., 109676.,
      124558., 127540., 160195., 163940., 197659., 202174., 236964., 242256.,
      239365., 244706., 210889., 215488., 180530., 184380., 148274., 151368.,
      134862., 138068., 173355., 177380., 213787., 218638., 256172., 261856.,
      258573., 264306., 227689., 232624., 194810., 198940., 159922., 163240.,
      145166., 148596., 186515., 190820., 229915., 235102., 275380., 281456.,
      277781., 283906., 244489., 249760., 209090., 213500., 171570., 175112.,
      155470., 159124., 199675., 204260., 246043., 251566., 294588., 301056.,
      296989., 303506., 261289., 266896., 223370., 228060., 183218., 186984.,
      163184., 166412., 208780., 212830., 256320., 261198., 305816., 311528.,
      308168., 313922., 270180., 275130., 230200., 234340., 188216., 191540.,
      161670., 164440., 206275., 209750., 252575., 256760., 300580., 305480.,
      302785., 307720., 264785., 269030., 225050., 228600., 183570., 186420.,
      150480., 152760., 191600., 194460., 234136., 237580., 278096., 282128.,
      280056., 284116., 244432., 247924., 207360., 210280., 168832., 171176.,
      67520.,  70312.,  88120.,  91620.,  110224., 114436., 133840., 138768.,
      134624., 139580., 120040., 124300., 103920., 107480., 86256.,  89112.,
      109710., 113280., 141975., 146450., 176195., 181580., 212380., 218680.,
      213605., 219940., 189125., 194570., 162650., 167200., 134170., 137820.,
      162920., 167300., 209680., 215170., 258876., 265482., 310520., 318248.,
      312284., 320054., 275184., 281862., 235600., 241180., 193520., 197996.,
      227598., 232820., 291795., 298340., 358939., 366814., 429044., 438256.,
      431445., 440706., 378889., 386848., 323330., 329980., 264754., 270088.,
      237902., 243348., 304955., 311780., 375067., 383278., 448252., 457856.,
      450653., 460306., 395689., 403984., 337610., 344540., 276402., 281960.,
      248206., 253876., 318115., 325220., 391195., 399742., 467460., 477456.,
      469861., 479906., 412489., 421120., 351890., 359100., 288050., 293832.,
      258510., 264404., 331275., 338660., 407323., 416206., 486668., 497056.,
      489069., 499506., 429289., 438256., 366170., 373660., 299698., 305704.,
      264944., 270092., 338380., 344830., 414720., 422478., 493976., 503048.,
      496328., 505442., 434340., 442170., 369400., 375940., 301496., 306740.,
      257670., 262040., 328275., 333750., 401375., 407960., 476980., 484680.,
      479185., 486920., 418385., 425030., 355050., 360600., 289170., 293620.,
      236240., 239800., 300400., 304860., 366616., 371980., 434896., 441168.,
      436856., 443156., 380752., 386164., 322560., 327080., 262272., 265896.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     11.,    14.,    17.,    20.,    23.,
      26.,    29.,    32.,    35.,    38.,    26.,    28.,    18.,    22.,
      60.,    70.,    80.,    90.,    100.,   110.,   120.,   130.,   140.,
      150.,   160.,   170.,   106.,   112.,   79.,    88.,    221.,   242.,
      263.,   284.,   305.,   326.,   347.,   368.,   389.,   410.,   431.,
      452.,   268.,   280.,   212.,   228.,   544.,   580.,   616.,   652.,
      688.,   724.,   760.,   796.,   832.,   868.,   904.,   940.,   540.,
      560.,   436.,   452.,   1048.,  1084.,  1120.,  1156.,  1192.,  1228.,
      1264.,  1300.,  1336.,  1372.,  1408.,  1444.,  820.,   840.,   660.,
      676.,   1552.,  1588.,  1624.,  1660.,  1696.,  1732.,  1768.,  1804.,
      1840.,  1876.,  1912.,  1948.,  1100.,  1120.,  884.,   900.,   2056.,
      2092.,  2128.,  2164.,  2200.,  2236.,  2272.,  2308.,  2344.,  2380.,
      2416.,  2452.,  1380.,  1400.,  1009.,  1024.,  2261.,  2294.,  2327.,
      2360.,  2393.,  2426.,  2459.,  2492.,  2525.,  2558.,  2591.,  2624.,
      1438.,  1456.,  922.,   934.,   2024.,  2050.,  2076.,  2102.,  2128.,
      2154.,  2180.,  2206.,  2232.,  2258.,  2284.,  2310.,  1246.,  1260.,
      595.,   602.,   1289.,  1304.,  1319.,  1334.,  1349.,  1364.,  1379.,
      1394.,  1409.,  1424.,  1439.,  1454.,  776.,   784.,   9.,     18.,
      37.,    56.,    75.,    94.,    113.,   132.,   151.,   170.,   189.,
      208.,   227.,   246.,   130.,   140.,   146.,   166.,   348.,   390.,
      432.,   474.,   516.,   558.,   600.,   642.,   684.,   726.,   768.,
      810.,   426.,   448.,   439.,   472.,   989.,   1058.,  1127.,  1196.,
      1265.,  1334.,  1403.,  1472.,  1541.,  1610.,  1679.,  1748.,  916.,
      952.,   916.,   964.,   2016.,  2116.,  2216.,  2316.,  2416.,  2516.,
      2616.,  2716.,  2816.,  2916.,  3016.,  3116.,  1628.,  1680.,  1588.,
      1636.,  3416.,  3516.,  3616.,  3716.,  3816.,  3916.,  4016.,  4116.,
      4216.,  4316.,  4416.,  4516.,  2356.,  2408.,  2260.,  2308.,  4816.,
      4916.,  5016.,  5116.,  5216.,  5316.,  5416.,  5516.,  5616.,  5716.,
      5816.,  5916.,  3084.,  3136.,  2932.,  2980.,  6216.,  6316.,  6416.,
      6516.,  6616.,  6716.,  6816.,  6916.,  7016.,  7116.,  7216.,  7316.,
      3812.,  3864.,  2713.,  2752.,  5717.,  5798.,  5879.,  5960.,  6041.,
      6122.,  6203.,  6284.,  6365.,  6446.,  6527.,  6608.,  3430.,  3472.,
      2170.,  2198.,  4552.,  4610.,  4668.,  4726.,  4784.,  4842.,  4900.,
      4958.,  5016.,  5074.,  5132.,  5190.,  2686.,  2716.,  1275.,  1290.,
      2665.,  2696.,  2727.,  2758.,  2789.,  2820.,  2851.,  2882.,  2913.,
      2944.,  2975.,  3006.,  1552.,  1568.,  17.,    34.,    69.,    104.,
      139.,   174.,   209.,   244.,   279.,   314.,   349.,   384.,   419.,
      454.,   234.,   252.,   274.,   310.,   636.,   710.,   784.,   858.,
      932.,   1006.,  1080.,  1154.,  1228.,  1302.,  1376.,  1450.,  746.,
      784.,   799.,   856.,   1757.,  1874.,  1991.,  2108.,  2225.,  2342.,
      2459.,  2576.,  2693.,  2810.,  2927.,  3044.,  1564.,  1624.,  1620.,
      1700.,  3488.,  3652.,  3816.,  3980.,  4144.,  4308.,  4472.,  4636.,
      4800.,  4964.,  5128.,  5292.,  2716.,  2800.,  2740.,  2820.,  5784.,
      5948.,  6112.,  6276.,  6440.,  6604.,  6768.,  6932.,  7096.,  7260.,
      7424.,  7588.,  3892.,  3976.,  3860.,  3940.,  8080.,  8244.,  8408.,
      8572.,  8736.,  8900.,  9064.,  9228.,  9392.,  9556.,  9720.,  9884.,
      5068.,  5152.,  4980.,  5060.,  10376., 10540., 10704., 10868., 11032.,
      11196., 11360., 11524., 11688., 11852., 12016., 12180., 6244.,  6328.,
      4417.,  4480.,  9173.,  9302.,  9431.,  9560.,  9689.,  9818.,  9947.,
      10076., 10205., 10334., 10463., 10592., 5422.,  5488.,  3418.,  3462.,
      7080.,  7170.,  7260.,  7350.,  7440.,  7530.,  7620.,  7710.,  7800.,
      7890.,  7980.,  8070.,  4126.,  4172.,  1955.,  1978.,  4041.,  4088.,
      4135.,  4182.,  4229.,  4276.,  4323.,  4370.,  4417.,  4464.,  4511.,
      4558.,  2328.,  2352.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      26912.,   28736.,   37740.,   40100.,   50336.,   53264.,   64764.,
      68292.,   70980.,   74732.,   67232.,   70544.,   61460.,   64300.,
      53600.,   55936.,   56480.,   59400.,   77225.,   80975.,   100780.,
      105400.,  127225.,  132755.,  136955.,  142765.,  127180.,  132280.,
      114275.,  118625.,  98160.,   101720.,  102352.,  106624.,  137690.,
      143150.,  177120.,  183816.,  220738.,  228718.,  234766.,  243082.,
      215136.,  222408.,  191030.,  197210.,  162352.,  167392.,  168112.,
      173992.,  223615.,  231105.,  284732.,  293888.,  351575.,  362453.,
      370685.,  381955.,  336476.,  346304.,  296205.,  304535.,  249760.,
      256536.,  250096.,  257768.,  328335.,  338065.,  413084.,  424928.,
      504455.,  518469.,  523565.,  537971.,  470204.,  482720.,  409885.,
      420455.,  342496.,  351064.,  332080.,  341544.,  433055.,  445025.,
      541436.,  555968.,  657335.,  674485.,  676445.,  693987.,  603932.,
      619136.,  523565.,  536375.,  435232.,  445592.,  414064.,  425320.,
      537775.,  551985.,  669788.,  687008.,  810215.,  830501.,  829325.,
      850003.,  737660.,  755552.,  637245.,  652295.,  527968.,  540120.,
      486256.,  496672.,  626930.,  640070.,  775440.,  791352.,  931882.,
      950614.,  950614.,  969682.,  839952.,  856440.,  721070.,  734930.,
      593872.,  605056.,  520640.,  529960.,  668225.,  679975.,  822940.,
      837160.,  984865.,  1001595., 1002435., 1019445., 881980.,  896680.,
      754075.,  766425.,  618640.,  628600.,  513632.,  521600.,  657180.,
      667220.,  806912.,  819056.,  962892.,  977172.,  978516.,  993020.,
      858368.,  870896.,  731780.,  742300.,  598688.,  607168.,  280352.,
      292416.,  367340.,  382500.,  461216.,  479504.,  562044.,  583492.,
      568260.,  589932.,  508832.,  527504.,  442260.,  457900.,  368480.,
      381056.,  462880.,  478600.,  601225.,  620975.,  748780.,  772600.,
      905625.,  933555.,  915355.,  943565.,  813580.,  837880.,  702275.,
      722625.,  581360.,  597720.,  697552.,  717184.,  900890.,  925550.,
      1116000., 1145736., 1342978., 1377838., 1357006., 1392202., 1200096.,
      1230408., 1031030., 1056410., 849712.,  870112.,  987952.,  1011752.,
      1270815., 1300705., 1568252., 1604288., 1880375., 1922613., 1899485.,
      1942115., 1673756., 1710464., 1433005., 1463735., 1177120., 1201816.,
      1069936., 1095528., 1375535., 1407665., 1696604., 1735328., 2033255.,
      2078629., 2052365., 2098131., 1807484., 1846880., 1546685., 1579655.,
      1269856., 1296344., 1151920., 1179304., 1480255., 1514625., 1824956.,
      1866368., 2186135., 2234645., 2205245., 2254147., 1941212., 1983296.,
      1660365., 1695575., 1362592., 1390872., 1233904., 1263080., 1584975.,
      1621585., 1953308., 1997408., 2339015., 2390661., 2358125., 2410163.,
      2074940., 2119712., 1774045., 1811495., 1455328., 1485400., 1296496.,
      1322272., 1658930., 1691270., 2036880., 2075832., 2430442., 2476054.,
      2449174., 2495122., 2147472., 2187000., 1829870., 1862930., 1496272.,
      1522816., 1285440., 1307560., 1640225., 1667975., 2008540., 2041960.,
      2390465., 2429595., 2408035., 2447445., 2105980., 2139880., 1790075.,
      1818425., 1460240., 1483000., 1197152., 1215360., 1524380., 1547220.,
      1862912., 1890416., 2212812., 2245012., 2228436., 2260860., 1945088.,
      1972976., 1650180., 1673500., 1343648., 1362368., 533792.,  556096.,
      696940.,  724900.,  872096.,  905744.,  1059324., 1098692., 1065540.,
      1105132., 950432.,  984464.,  823060.,  851500.,  683360.,  706176.,
      869280.,  897800.,  1125225., 1160975., 1396780., 1439800., 1684025.,
      1734355., 1693755., 1744365., 1499980., 1543480., 1290275., 1326625.,
      1064560., 1093720., 1292752., 1327744., 1664090., 1707950., 2054880.,
      2107656., 2465218., 2526958., 2479246., 2541322., 2185056., 2238408.,
      1871030., 1915610., 1537072., 1572832., 1807792., 1849512., 2318015.,
      2370305., 2851772., 2914688., 3409175., 3482773., 3428285., 3502275.,
      3011036., 3074624., 2569805., 2622935., 2104480., 2147096., 1889776.,
      1933288., 2422735., 2477265., 2980124., 3045728., 3562055., 3638789.,
      3581165., 3658291., 3144764., 3211040., 2683485., 2738855., 2197216.,
      2241624., 1971760., 2017064., 2527455., 2584225., 3108476., 3176768.,
      3714935., 3794805., 3734045., 3814307., 3278492., 3347456., 2797165.,
      2854775., 2289952., 2336152., 2053744., 2100840., 2632175., 2691185.,
      3236828., 3307808., 3867815., 3950821., 3886925., 3970323., 3412220.,
      3483872., 2910845., 2970695., 2382688., 2430680., 2106736., 2147872.,
      2690930., 2742470., 3298320., 3360312., 3929002., 4001494., 3947734.,
      4020562., 3454992., 3517560., 2938670., 2990930., 2398672., 2440576.,
      2050240., 2085160., 2612225., 2655975., 3194140., 3246760., 3796065.,
      3857595., 3813635., 3875445., 3329980., 3383080., 2826075., 2870425.,
      2301840., 2337400., 1880672., 1909120., 2391580., 2427220., 2918912.,
      2961776., 3462732., 3512852., 3478356., 3528700., 3031808., 3075056.,
      2568580., 2604700., 2088608., 2117568.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     11.,    28.,    48.,    68.,    88.,    108.,   128.,   148.,
      168.,   188.,   208.,   228.,   248.,   179.,   193.,   106.,   134.,
      392.,   464.,   536.,   608.,   680.,   752.,   824.,   896.,   968.,
      1040.,  1112.,  1184.,  758.,   802.,   527.,   593.,   1540.,  1696.,
      1852.,  2008.,  2164.,  2320.,  2476.,  2632.,  2788.,  2944.,  3100.,
      3256.,  1961.,  2051.,  1492.,  1612.,  3920.,  4192.,  4464.,  4736.,
      5008.,  5280.,  5552.,  5824.,  6096.,  6368.,  6640.,  6912.,  4012.,
      4164.,  3172.,  3292.,  7728.,  8000.,  8272.,  8544.,  8816.,  9088.,
      9360.,  9632.,  9904.,  10176., 10448., 10720., 6140.,  6292.,  4852.,
      4972.,  11536., 11808., 12080., 12352., 12624., 12896., 13168., 13440.,
      13712., 13984., 14256., 14528., 8268.,  8420.,  6532.,  6652.,  15344.,
      15616., 15888., 16160., 16432., 16704., 16976., 17248., 17520., 17792.,
      18064., 18336., 10396., 10548., 7619.,  7733.,  17164., 17416., 17668.,
      17920., 18172., 18424., 18676., 18928., 19180., 19432., 19684., 19936.,
      10973., 11111., 7042.,  7134.,  15512., 15712., 15912., 16112., 16312.,
      16512., 16712., 16912., 17112., 17312., 17512., 17712., 9582.,  9690.,
      4577.,  4631.,  9940.,  10056., 10172., 10288., 10404., 10520., 10636.,
      10752., 10868., 10984., 11100., 11216., 5999.,  6061.,  53.,    123.,
      252.,   400.,   548.,   696.,   844.,   992.,   1140.,  1288.,  1436.,
      1584.,  1732.,  1880.,  995.,   1073.,  1098.,  1254.,  2632.,  2960.,
      3288.,  3616.,  3944.,  4272.,  4600.,  4928.,  5256.,  5584.,  5912.,
      6240.,  3286.,  3458.,  3359.,  3617.,  7588.,  8128.,  8668.,  9208.,
      9748.,  10288., 10828., 11368., 11908., 12448., 12988., 13528., 7097.,
      7379.,  7060.,  7436.,  15568., 16352., 17136., 17920., 18704., 19488.,
      20272., 21056., 21840., 22624., 23408., 24192., 12652., 13060., 12324.,
      12700., 26544., 27328., 28112., 28896., 29680., 30464., 31248., 32032.,
      32816., 33600., 34384., 35168., 18364., 18772., 17588., 17964., 37520.,
      38304., 39088., 39872., 40656., 41440., 42224., 43008., 43792., 44576.,
      45360., 46144., 24076., 24484., 22852., 23228., 48496., 49280., 50064.,
      50848., 51632., 52416., 53200., 53984., 54768., 55552., 56336., 57120.,
      29788., 30196., 21203., 21509., 44716., 45352., 45988., 46624., 47260.,
      47896., 48532., 49168., 49804., 50440., 51076., 51712., 26861., 27191.,
      16994., 17214., 35672., 36128., 36584., 37040., 37496., 37952., 38408.,
      38864., 39320., 39776., 40232., 40688., 21070., 21306., 10001., 10119.,
      20916., 21160., 21404., 21648., 21892., 22136., 22380., 22624., 22868.,
      23112., 23356., 23600., 12191., 12317., 101.,   235.,   476.,   752.,
      1028.,  1304.,  1580.,  1856.,  2132.,  2408.,  2684.,  2960.,  3236.,
      3512.,  1811.,  1953.,  2090.,  2374.,  4872.,  5456.,  6040.,  6624.,
      7208.,  7792.,  8376.,  8960.,  9544.,  10128., 10712., 11296., 5814.,
      6114.,  6191.,  6641.,  13636., 14560., 15484., 16408., 17332., 18256.,
      19180., 20104., 21028., 21952., 22876., 23800., 12233., 12707., 12628.,
      13260., 27216., 28512., 29808., 31104., 32400., 33696., 34992., 36288.,
      37584., 38880., 40176., 41472., 21292., 21956., 21476., 22108., 45360.,
      46656., 47952., 49248., 50544., 51840., 53136., 54432., 55728., 57024.,
      58320., 59616., 30588., 31252., 30324., 30956., 63504., 64800., 66096.,
      67392., 68688., 69984., 71280., 72576., 73872., 75168., 76464., 77760.,
      39884., 40548., 39172., 39804., 81648., 82944., 84240., 85536., 86832.,
      88128., 89424., 90720., 92016., 93312., 94608., 95904., 49180., 49844.,
      34787., 35285., 72268., 73288., 74308., 75328., 76348., 77368., 78388.,
      79408., 80428., 81448., 82468., 83488., 42749., 43271., 26946., 27294.,
      55832., 56544., 57256., 57968., 58680., 59392., 60104., 60816., 61528.,
      62240., 62952., 63664., 32558., 32922., 15425., 15607., 31892., 32264.,
      32636., 33008., 33380., 33752., 34124., 34496., 34868., 35240., 35612.,
      35984., 18383., 18573.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      210336.,   224800.,   295480.,   314200.,   394672.,   417904.,
      508424.,   536424.,   557928.,   587720.,   529072.,   555376.,
      484120.,   506680.,   422560.,   441120.,   443880.,   467080.,
      607550.,   637350.,   793580.,   830300.,   1002610.,  1046570.,
      1080170.,  1126370.,  1003820.,  1044380.,  902550.,   937150.,
      775720.,   804040.,   807152.,   841136.,   1086580.,  1130020.,
      1398600.,  1451880.,  1743980.,  1807484.,  1855868.,  1922060.,
      1701576.,  1759464.,  1511620.,  1560820.,  1285232.,  1325360.,
      1328824.,  1375640.,  1768410.,  1828050.,  2252740.,  2325652.,
      2782710.,  2869342.,  2935198.,  3024966.,  2665348.,  2743636.,
      2347170.,  2413530.,  1979768.,  2033752.,  1982904.,  2044056.,
      2603930.,  2681490.,  3276868.,  3371284.,  4002614.,  4114334.,
      4155102.,  4269958.,  3732484.,  3832276.,  3254370.,  3338650.,
      2719864.,  2788184.,  2636984.,  2712472.,  3439450.,  3534930.,
      4300996.,  4416916.,  5222518.,  5359326.,  5375006.,  5514950.,
      4799620.,  4920916.,  4161570.,  4263770.,  3459960.,  3542616.,
      3291064.,  3380888.,  4274970.,  4388370.,  5325124.,  5462548.,
      6442422.,  6604318.,  6594910.,  6759942.,  5866756.,  6009556.,
      5068770.,  5188890.,  4200056.,  4297048.,  3869552.,  3952688.,
      4989460.,  5094340.,  6171912.,  6298920.,  7417676.,  7567196.,
      7567196.,  7719404.,  6686856.,  6818472.,  5740900.,  5851540.,
      4728560.,  4817840.,  4146280.,  4220680.,  5321950.,  5415750.,
      6554540.,  6668060.,  7844690.,  7978250.,  7984970.,  8120770.,
      7025900.,  7143260.,  6007350.,  6105950.,  4928680.,  5008200.,
      4092576.,  4156192.,  5236600.,  5316760.,  6430000.,  6526960.,
      7673288.,  7787304.,  7798056.,  7913864.,  6840880.,  6940912.,
      5832280.,  5916280.,  4771744.,  4839456.,  2227616.,  2324000.,
      2919480.,  3040600.,  3666352.,  3812464.,  4468744.,  4640104.,
      4518248.,  4691400.,  4046512.,  4195696.,  3517720.,  3642680.,
      2931360.,  3031840.,  3682280.,  3807880.,  4783550.,  4941350.,
      5958380.,  6148700.,  7207410.,  7430570.,  7284970.,  7510370.,
      6475820.,  6669980.,  5590550.,  5753150.,  4628520.,  4759240.,
      5553392.,  5710256.,  7172980.,  7370020.,  8886600.,  9124200.,
      10695020., 10973564., 10806908., 11088140., 9558216.,  9800424.,
      8212420.,  8415220.,  6768752.,  6931760.,  7750840.,  7908248.,
      9934170.,  10132050., 12217540., 12456340., 14601846., 14882014.,
      14754334., 15037638., 12961924., 13206100., 11065890., 11270490.,
      9065336.,  9229912.,  7827384.,  7966360.,  10006810., 10181650.,
      12277060., 12488212., 14639030., 14886942., 14791518., 15042566.,
      12966148., 13182676., 11046370., 11227930., 9031288.,  9177432.,
      7445176.,  7565720.,  9506010.,  9657810.,  11648452., 11831956.,
      13873398., 14089054., 14025886., 14244678., 12282244., 12471124.,
      10453410., 10611930., 8538488.,  8666200.,  6604216.,  6706328.,
      8431770.,  8560530.,  10331716., 10487572., 12304950., 12488350.,
      12457438., 12643974., 10910212., 11071444., 9287010.,  9422490.,
      7586936.,  7696216.,  5273456.,  5348400.,  6734100.,  6828740.,
      8253192.,  8367912.,  9831500.,  9966684.,  9981020.,  10118892.,
      8743560.,  8862888.,  7444580.,  7544980.,  6083312.,  6164400.,
      3354216.,  3399944.,  4296030.,  4353990.,  5280428.,  5350940.,
      6308050.,  6391434.,  6448330.,  6533954.,  5665772.,  5740124.,
      4838070.,  4900830.,  3964584.,  4015432.,  817824.,   832288.,
      1081720.,  1100440.,  1370416.,  1393648.,  1684424.,  1712424.,
      1809192.,  1838984.,  1633840.,  1660144.,  1431640.,  1454200.,
      1202080.,  1220640.,  1017248.,  1064480.,  1345080.,  1404760.,
      1703344.,  1775728.,  2092552.,  2177896.,  2142056.,  2229192.,
      1936048.,  2011504.,  1697560.,  1761080.,  1426080.,  1477408.,
      1739240.,  1803400.,  2277950.,  2358950.,  2859500.,  2957660.,
      3484530.,  3600170.,  3562090.,  3679970.,  3192620.,  3294620.,
      2777750.,  2863550.,  2316840.,  2386120.,  2705648.,  2788784.,
      3521140.,  3626020.,  4393800.,  4520808.,  5324396.,  5473916.,
      5436284.,  5588492.,  4844232.,  4975848.,  4191940.,  4302580.,
      3478640.,  3567920.,  3945144.,  4049304.,  5110490.,  5241810.,
      6349252.,  6508180.,  7662326.,  7849310.,  7814814.,  8004934.,
      6933892.,  7098196.,  5975970.,  6114010.,  4940152.,  5051480.,
      4599224.,  4717720.,  5946010.,  6095250.,  7373380.,  7553812.,
      8882230.,  9094302.,  9034718.,  9249926.,  8001028.,  8186836.,
      6883170.,  7039130.,  5680248.,  5805912.,  5253304.,  5386136.,
      6781530.,  6948690.,  8397508.,  8599444.,  10102134., 10339294.,
      10254622., 10494918., 9068164.,  9275476.,  7790370.,  7964250.,
      6420344.,  6560344.,  5907384.,  6054552.,  7617050.,  7802130.,
      9421636.,  9645076.,  11322038., 11584286., 11474526., 11739910.,
      10135300., 10364116., 8697570.,  8889370.,  7160440.,  7314776.,
      6456176.,  6588464.,  8284180.,  8450500.,  10199304., 10400040.,
      12202316., 12437852., 12351836., 12590060., 10861704., 11067048.,
      9281380.,  9453460.,  7610096.,  7748528.,  6588520.,  6703880.,
      8425950.,  8570950.,  10340780., 10515740., 12333650., 12538890.,
      12473930., 12681410., 10935020., 11113820., 9316150.,  9465950.,
      7616680.,  7737160.,  6275744.,  6372128.,  8006520.,  8127640.,
      9803056.,  9949168.,  11665864., 11837224., 11790632., 11963784.,
      10312240., 10461424., 8766040.,  8891000.,  7151520.,  7252000.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,    468.,    612.,    756.,    900.,
      1044.,   1188.,   1332.,   1476.,   1620.,   1764.,   1318.,   1422.,
      700.,    908.,    2792.,   3336.,   3880.,   4424.,   4968.,   5512.,
      6056.,   6600.,   7144.,   7688.,   8232.,   8776.,   5708.,   6044.,
      3802.,   4306.,   11420.,  12620.,  13820.,  15020.,  16220.,  17420.,
      18620.,  19820.,  21020.,  22220.,  23420.,  24620.,  14962.,  15658.,
      11128.,  12056.,  29648.,  31760.,  33872.,  35984.,  38096.,  40208.,
      42320.,  44432.,  46544.,  48656.,  50768.,  52880.,  30872.,  32056.,
      24120.,  25048.,  59216.,  61328.,  63440.,  65552.,  67664.,  69776.,
      71888.,  74000.,  76112.,  78224.,  80336.,  82448.,  47448.,  48632.,
      37112.,  38040.,  88784.,  90896.,  93008.,  95120.,  97232.,  99344.,
      101456., 103568., 105680., 107792., 109904., 112016., 64024.,  65208.,
      50104.,  51032.,  118352., 120464., 122576., 124688., 126800., 128912.,
      131024., 133136., 135248., 137360., 139472., 141584., 80600.,  81784.,
      59146.,  60034.,  133628., 135596., 137564., 139532., 141500., 143468.,
      145436., 147404., 149372., 151340., 153308., 155276., 85666.,  86746.,
      55004.,  55724.,  121384., 122952., 124520., 126088., 127656., 129224.,
      130792., 132360., 133928., 135496., 137064., 138632., 75116.,  75964.,
      35886.,  36310.,  78036.,  78948.,  79860.,  80772.,  81684.,  82596.,
      83508.,  84420.,  85332.,  86244.,  87156.,  88068.,  47158.,  47646.,
      350.,    902.,    1844.,   3012.,   4180.,   5348.,   6516.,   7684.,
      8852.,   10020.,  11188.,  12356.,  13524.,  14692.,  7782.,   8398.,
      8508.,   9740.,   20456.,  23048.,  25640.,  28232.,  30824.,  33416.,
      36008.,  38600.,  41192.,  43784.,  46376.,  48968.,  25804.,  27164.,
      26266.,  28306.,  59420.,  63692.,  67964.,  72236.,  76508.,  80780.,
      85052.,  89324.,  93596.,  97868.,  102140., 106412., 55858.,  58090.,
      55416.,  58392.,  122320., 128528., 134736., 140944., 147152., 153360.,
      159568., 165776., 171984., 178192., 184400., 190608., 99736.,  102968.,
      97080.,  100056., 209232., 215440., 221648., 227856., 234064., 240272.,
      246480., 252688., 258896., 265104., 271312., 277520., 144984., 148216.,
      138744., 141720., 296144., 302352., 308560., 314768., 320976., 327184.,
      333392., 339600., 345808., 352016., 358224., 364432., 190232., 193464.,
      180408., 183384., 383056., 389264., 395472., 401680., 407888., 414096.,
      420304., 426512., 432720., 438928., 445136., 451344., 235480., 238712.,
      167626., 170050., 353660., 358700., 363740., 368780., 373820., 378860.,
      383900., 388940., 393980., 399020., 404060., 409100., 212578., 215194.,
      134492., 136236., 282408., 286024., 289640., 293256., 296872., 300488.,
      304104., 307720., 311336., 314952., 318568., 322184., 166892., 168764.,
      79214.,  80150.,  165716., 167652., 169588., 171524., 173460., 175396.,
      177332., 179268., 181204., 183140., 185076., 187012., 96630.,  97630.,
      670.,    1734.,   3508.,   5700.,   7892.,   10084.,  12276.,  14468.,
      16660.,  18852.,  21044.,  23236.,  25428.,  27620.,  14246.,  15374.,
      16316.,  18572.,  38120.,  42760.,  47400.,  52040.,  56680.,  61320.,
      65960.,  70600.,  75240.,  79880.,  84520.,  89160.,  45900.,  48284.,
      48730.,  52306.,  107420., 114764., 122108., 129452., 136796., 144140.,
      151484., 158828., 166172., 173516., 180860., 188204., 96754.,  100522.,
      99704.,  104728., 214992., 225296., 235600., 245904., 256208., 266512.,
      276816., 287120., 297424., 307728., 318032., 328336., 168600., 173880.,
      170040., 175064., 359248., 369552., 379856., 390160., 400464., 410768.,
      421072., 431376., 441680., 451984., 462288., 472592., 242520., 247800.,
      240376., 245400., 503504., 513808., 524112., 534416., 544720., 555024.,
      565328., 575632., 585936., 596240., 606544., 616848., 316440., 321720.,
      310712., 315736., 647760., 658064., 668368., 678672., 688976., 699280.,
      709584., 719888., 730192., 740496., 750800., 761104., 390360., 395640.,
      276106., 280066., 573692., 581804., 589916., 598028., 606140., 614252.,
      622364., 630476., 638588., 646700., 654812., 662924., 339490., 343642.,
      213980., 216748., 443432., 449096., 454760., 460424., 466088., 471752.,
      477416., 483080., 488744., 494408., 500072., 505736., 258668., 261564.,
      122542., 123990., 253396., 256356., 259316., 262276., 265236., 268196.,
      271156., 274116., 277076., 280036., 282996., 285956., 146102., 147614.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6808.,   7040.,   7272.,    7504.,    9540.,   9840.,   10140.,  10440.,
      12716.,  13088.,  13460.,   13832.,   16352.,  16800.,  17248.,  17696.,
      17892.,  18368.,  18844.,   19320.,   16940.,  17360.,  17780.,  18200.,
      15480.,  15840.,  16200.,   16560.,   13496.,  13792.,  14088.,  14384.,
      14250.,  14620.,  14990.,   15360.,   19475.,  19950.,  20425.,  20900.,
      25405.,  25990.,  26575.,   27160.,   32060.,  32760.,  33460.,  34160.,
      34475.,  35210.,  35945.,   36680.,   32005.,  32650.,  33295.,  33940.,
      28750.,  29300.,  29850.,   30400.,   24690.,  25140.,  25590.,  26040.,
      25780.,  26320.,  26860.,   27400.,   34670.,  35360.,  36050.,  36740.,
      44586.,  45432.,  46278.,   47124.,   55552.,  56560.,  57568.,  58576.,
      59038.,  60088.,  61138.,   62188.,   54090.,  55008.,  55926.,  56844.,
      48020.,  48800.,  49580.,   50360.,   40804.,  41440.,  42076.,  42712.,
      42294.,  43036.,  43778.,   44520.,   56245.,  57190.,  58135.,  59080.,
      71603.,  72758.,  73913.,   75068.,   88396.,  89768.,  91140.,  92512.,
      93149.,  94570.,  95991.,   97412.,   84539.,  85778.,  87017.,  88256.,
      74410.,  75460.,  76510.,   77560.,   62734.,  63588.,  64442.,  65296.,
      62678.,  63644.,  64610.,   65576.,   82285.,  83510.,  84735.,  85960.,
      103523., 105014., 106505.,  107996.,  126420., 128184., 129948., 131712.,
      131173., 132986., 134799.,  136612.,  117803., 119378., 120953., 122528.,
      102690., 104020., 105350.,  106680.,  85806.,  86884.,  87962.,  89040.,
      83062.,  84252.,  85442.,   86632.,   108325., 109830., 111335., 112840.,
      135443., 137270., 139097.,  140924.,  164444., 166600., 168756., 170912.,
      169197., 171402., 173607.,  175812.,  151067., 152978., 154889., 156800.,
      130970., 132580., 134190.,  135800.,  108878., 110180., 111482., 112784.,
      103446., 104860., 106274.,  107688.,  134365., 136150., 137935., 139720.,
      167363., 169526., 171689.,  173852.,  202468., 205016., 207564., 210112.,
      207221., 209818., 212415.,  215012.,  184331., 186578., 188825., 191072.,
      159250., 161140., 163030.,  164920.,  131950., 133476., 135002., 136528.,
      121540., 122848., 124156.,  125464.,  156710., 158360., 160010., 161660.,
      193842., 195840., 197838.,  199836.,  232960., 235312., 237664., 240016.,
      237622., 240016., 242410.,  244804.,  209970., 212040., 214110., 216180.,
      180260., 182000., 183740.,  185480.,  148468., 149872., 151276., 152680.,
      130170., 131340., 132510.,  133680.,  167075., 168550., 170025., 171500.,
      205765., 207550., 209335.,  211120.,  246260., 248360., 250460., 252560.,
      250635., 252770., 254905.,  257040.,  220525., 222370., 224215., 226060.,
      188550., 190100., 191650.,  193200.,  154690., 155940., 157190., 158440.,
      128440., 129440., 130440.,  131440.,  164340., 165600., 166860., 168120.,
      201788., 203312., 204836.,  206360.,  240800., 242592., 244384., 246176.,
      244692., 246512., 248332.,  250152.,  214652., 216224., 217796., 219368.,
      183000., 184320., 185640.,  186960.,  149720., 150784., 151848., 152912.,
      69528.,  71040.,  72552.,   74064.,   91140.,  93040.,  94940.,  96840.,
      114476., 116768., 119060.,  121352.,  139552., 142240., 144928., 147616.,
      141092., 143808., 146524.,  149240.,  126380., 128720., 131060., 133400.,
      109880., 111840., 113800.,  115760.,  91576.,  93152.,  94728.,  96304.,
      115050., 117020., 118990.,  120960.,  149475., 151950., 154425., 156900.,
      186205., 189190., 192175.,  195160.,  225260., 228760., 232260., 235760.,
      227675., 231210., 234745.,  238280.,  202405., 205450., 208495., 211540.,
      174750., 177300., 179850.,  182400.,  144690., 146740., 148790., 150840.,
      173620., 176080., 178540.,  181000.,  224270., 227360., 230450., 233540.,
      277866., 281592., 285318.,  289044.,  334432., 338800., 343168., 347536.,
      337918., 342328., 346738.,  351148.,  298890., 302688., 306486., 310284.,
      256820., 260000., 263180.,  266360.,  211684., 214240., 216796., 219352.,
      246134., 249116., 252098.,  255080.,  316645., 320390., 324135., 327880.,
      390803., 395318., 399833.,  404348.,  468636., 473928., 479220., 484512.,
      473389., 478730., 484071.,  489412.,  417179., 421778., 426377., 430976.,
      357210., 361060., 364910.,  368760.,  293454., 296548., 299642., 302736.,
      266518., 269724., 272930.,  276136.,  342685., 346710., 350735., 354760.,
      422723., 427574., 432425.,  437276.,  506660., 512344., 518028., 523712.,
      511413., 517146., 522879.,  528612.,  450443., 455378., 460313., 465248.,
      385490., 389620., 393750.,  397880.,  316526., 319844., 323162., 326480.,
      286902., 290332., 293762.,  297192.,  368725., 373030., 377335., 381640.,
      454643., 459830., 465017.,  470204.,  544684., 550760., 556836., 562912.,
      549437., 555562., 561687.,  567812.,  483707., 488978., 494249., 499520.,
      413770., 418180., 422590.,  427000.,  339598., 343140., 346682., 350224.,
      307286., 310940., 314594.,  318248.,  394765., 399350., 403935., 408520.,
      486563., 492086., 497609.,  503132.,  582708., 589176., 595644., 602112.,
      587461., 593978., 600495.,  607012.,  516971., 522578., 528185., 533792.,
      442050., 446740., 451430.,  456120.,  362670., 366436., 370202., 373968.,
      323140., 326368., 329596.,  332824.,  413510., 417560., 421610., 425660.,
      507762., 512640., 517518.,  522396.,  605920., 611632., 617344., 623056.,
      610582., 616336., 622090.,  627844.,  535410., 540360., 545310., 550260.,
      456260., 460400., 464540.,  468680.,  373108., 376432., 379756., 383080.,
      320570., 323340., 326110.,  328880.,  409075., 412550., 416025., 419500.,
      500965., 505150., 509335.,  513520.,  596260., 601160., 606060., 610960.,
      600635., 605570., 610505.,  615440.,  525325., 529570., 533815., 538060.,
      446550., 450100., 453650.,  457200.,  364290., 367140., 369990., 372840.,
      298680., 300960., 303240.,  305520.,  380340., 383200., 386060., 388920.,
      464828., 468272., 471716.,  475160.,  552160., 556192., 560224., 564256.,
      556052., 560112., 564172.,  568232.,  485372., 488864., 492356., 495848.,
      411800., 414720., 417640.,  420560.,  335320., 337664., 340008., 342352.,
      132248., 135040., 137832.,  140624.,  172740., 176240., 179740., 183240.,
      216236., 220448., 224660.,  228872.,  262752., 267680., 272608., 277536.,
      264292., 269248., 274204.,  279160.,  235820., 240080., 244340., 248600.,
      204280., 207840., 211400.,  214960.,  169656., 172512., 175368., 178224.,
      215850., 219420., 222990.,  226560.,  279475., 283950., 288425., 292900.,
      347005., 352390., 357775.,  363160.,  418460., 424760., 431060., 437360.,
      420875., 427210., 433545.,  439880.,  372805., 378250., 383695., 389140.,
      320750., 325300., 329850.,  334400.,  264690., 268340., 271990., 275640.,
      321460., 325840., 330220.,  334600.,  413870., 419360., 424850., 430340.,
      511146., 517752., 524358.,  530964.,  613312., 621040., 628768., 636496.,
      616798., 624568., 632338.,  640108.,  543690., 550368., 557046., 563724.,
      465620., 471200., 476780.,  482360.,  382564., 387040., 391516., 395992.,
      449974., 455196., 460418.,  465640.,  577045., 583590., 590135., 596680.,
      710003., 717878., 725753.,  733628.,  848876., 858088., 867300., 876512.,
      853629., 862890., 872151.,  881412.,  749819., 757778., 765737., 773696.,
      640010., 646660., 653310.,  659960.,  524174., 529508., 534842., 540176.,
      470358., 475804., 481250.,  486696.,  603085., 609910., 616735., 623560.,
      741923., 750134., 758345.,  766556.,  886900., 896504., 906108., 915712.,
      891653., 901306., 910959.,  920612.,  783083., 791378., 799673., 807968.,
      668290., 675220., 682150.,  689080.,  547246., 552804., 558362., 563920.,
      490742., 496412., 502082.,  507752.,  629125., 636230., 643335., 650440.,
      773843., 782390., 790937.,  799484.,  924924., 934920., 944916., 954912.,
      929677., 939722., 949767.,  959812.,  816347., 824978., 833609., 842240.,
      696570., 703780., 710990.,  718200.,  570318., 576100., 581882., 587664.,
      511126., 517020., 522914.,  528808.,  655165., 662550., 669935., 677320.,
      805763., 814646., 823529.,  832412.,  962948., 973336., 983724., 994112.,
      967701., 978138., 988575.,  999012.,  849611., 858578., 867545., 876512.,
      724850., 732340., 739830.,  747320.,  593390., 599396., 605402., 611408.,
      524740., 529888., 535036.,  540184.,  670310., 676760., 683210., 689660.,
      821682., 829440., 837198.,  844956.,  978880., 987952., 997024., 1006096.,
      983542., 992656., 1001770., 1010884., 860850., 868680., 876510., 884340.,
      732260., 738800., 745340.,  751880.,  597748., 602992., 608236., 613480.,
      510970., 515340., 519710.,  524080.,  651075., 656550., 662025., 667500.,
      796165., 802750., 809335.,  815920.,  946260., 953960., 961660., 969360.,
      950635., 958370., 966105.,  973840.,  830125., 836770., 843415., 850060.,
      704550., 710100., 715650.,  721200.,  573890., 578340., 582790., 587240.,
      468920., 472480., 476040.,  479600.,  596340., 600800., 605260., 609720.,
      727868., 733232., 738596.,  743960.,  863520., 869792., 876064., 882336.,
      867412., 873712., 880012.,  886312.,  756092., 761504., 766916., 772328.,
      640600., 645120., 649640.,  654160.,  520920., 524544., 528168., 531792.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    19.,
      22.,    25.,    28.,    31.,    34.,    37.,    40.,    43.,    46.,
      49.,    52.,    55.,    58.,    61.,    64.,    67.,    70.,    73.,
      76.,    50.,    52.,    54.,    56.,    32.,    36.,    40.,    44.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   210.,   220.,   230.,   240.,   250.,   260.,   270.,   280.,
      290.,   300.,   310.,   320.,   330.,   340.,   206.,   212.,   218.,
      224.,   149.,   158.,   167.,   176.,   421.,   442.,   463.,   484.,
      505.,   526.,   547.,   568.,   589.,   610.,   631.,   652.,   673.,
      694.,   715.,   736.,   757.,   778.,   799.,   820.,   841.,   862.,
      883.,   904.,   524.,   536.,   548.,   560.,   408.,   424.,   440.,
      456.,   1052.,  1088.,  1124.,  1160.,  1196.,  1232.,  1268.,  1304.,
      1340.,  1376.,  1412.,  1448.,  1484.,  1520.,  1556.,  1592.,  1628.,
      1664.,  1700.,  1736.,  1772.,  1808.,  1844.,  1880.,  1060.,  1080.,
      1100.,  1120.,  856.,   872.,   888.,   904.,   2060.,  2096.,  2132.,
      2168.,  2204.,  2240.,  2276.,  2312.,  2348.,  2384.,  2420.,  2456.,
      2492.,  2528.,  2564.,  2600.,  2636.,  2672.,  2708.,  2744.,  2780.,
      2816.,  2852.,  2888.,  1620.,  1640.,  1660.,  1680.,  1304.,  1320.,
      1336.,  1352.,  3068.,  3104.,  3140.,  3176.,  3212.,  3248.,  3284.,
      3320.,  3356.,  3392.,  3428.,  3464.,  3500.,  3536.,  3572.,  3608.,
      3644.,  3680.,  3716.,  3752.,  3788.,  3824.,  3860.,  3896.,  2180.,
      2200.,  2220.,  2240.,  1752.,  1768.,  1784.,  1800.,  4076.,  4112.,
      4148.,  4184.,  4220.,  4256.,  4292.,  4328.,  4364.,  4400.,  4436.,
      4472.,  4508.,  4544.,  4580.,  4616.,  4652.,  4688.,  4724.,  4760.,
      4796.,  4832.,  4868.,  4904.,  2740.,  2760.,  2780.,  2800.,  2003.,
      2018.,  2033.,  2048.,  4489.,  4522.,  4555.,  4588.,  4621.,  4654.,
      4687.,  4720.,  4753.,  4786.,  4819.,  4852.,  4885.,  4918.,  4951.,
      4984.,  5017.,  5050.,  5083.,  5116.,  5149.,  5182.,  5215.,  5248.,
      2858.,  2876.,  2894.,  2912.,  1832.,  1844.,  1856.,  1868.,  4022.,
      4048.,  4074.,  4100.,  4126.,  4152.,  4178.,  4204.,  4230.,  4256.,
      4282.,  4308.,  4334.,  4360.,  4386.,  4412.,  4438.,  4464.,  4490.,
      4516.,  4542.,  4568.,  4594.,  4620.,  2478.,  2492.,  2506.,  2520.,
      1183.,  1190.,  1197.,  1204.,  2563.,  2578.,  2593.,  2608.,  2623.,
      2638.,  2653.,  2668.,  2683.,  2698.,  2713.,  2728.,  2743.,  2758.,
      2773.,  2788.,  2803.,  2818.,  2833.,  2848.,  2863.,  2878.,  2893.,
      2908.,  1544.,  1552.,  1560.,  1568.,  9.,     18.,    27.,    36.,
      55.,    74.,    93.,    112.,   131.,   150.,   169.,   188.,   207.,
      226.,   245.,   264.,   283.,   302.,   321.,   340.,   359.,   378.,
      397.,   416.,   435.,   454.,   473.,   492.,   250.,   260.,   270.,
      280.,   272.,   292.,   312.,   332.,   654.,   696.,   738.,   780.,
      822.,   864.,   906.,   948.,   990.,   1032.,  1074.,  1116.,  1158.,
      1200.,  1242.,  1284.,  1326.,  1368.,  1410.,  1452.,  1494.,  1536.,
      1578.,  1620.,  830.,   852.,   874.,   896.,   845.,   878.,   911.,
      944.,   1909.,  1978.,  2047.,  2116.,  2185.,  2254.,  2323.,  2392.,
      2461.,  2530.,  2599.,  2668.,  2737.,  2806.,  2875.,  2944.,  3013.,
      3082.,  3151.,  3220.,  3289.,  3358.,  3427.,  3496.,  1796.,  1832.,
      1868.,  1904.,  1784.,  1832.,  1880.,  1928.,  3932.,  4032.,  4132.,
      4232.,  4332.,  4432.,  4532.,  4632.,  4732.,  4832.,  4932.,  5032.,
      5132.,  5232.,  5332.,  5432.,  5532.,  5632.,  5732.,  5832.,  5932.,
      6032.,  6132.,  6232.,  3204.,  3256.,  3308.,  3360.,  3128.,  3176.,
      3224.,  3272.,  6732.,  6832.,  6932.,  7032.,  7132.,  7232.,  7332.,
      7432.,  7532.,  7632.,  7732.,  7832.,  7932.,  8032.,  8132.,  8232.,
      8332.,  8432.,  8532.,  8632.,  8732.,  8832.,  8932.,  9032.,  4660.,
      4712.,  4764.,  4816.,  4472.,  4520.,  4568.,  4616.,  9532.,  9632.,
      9732.,  9832.,  9932.,  10032., 10132., 10232., 10332., 10432., 10532.,
      10632., 10732., 10832., 10932., 11032., 11132., 11232., 11332., 11432.,
      11532., 11632., 11732., 11832., 6116.,  6168.,  6220.,  6272.,  5816.,
      5864.,  5912.,  5960.,  12332., 12432., 12532., 12632., 12732., 12832.,
      12932., 13032., 13132., 13232., 13332., 13432., 13532., 13632., 13732.,
      13832., 13932., 14032., 14132., 14232., 14332., 14432., 14532., 14632.,
      7572.,  7624.,  7676.,  7728.,  5387.,  5426.,  5465.,  5504.,  11353.,
      11434., 11515., 11596., 11677., 11758., 11839., 11920., 12001., 12082.,
      12163., 12244., 12325., 12406., 12487., 12568., 12649., 12730., 12811.,
      12892., 12973., 13054., 13135., 13216., 6818.,  6860.,  6902.,  6944.,
      4312.,  4340.,  4368.,  4396.,  9046.,  9104.,  9162.,  9220.,  9278.,
      9336.,  9394.,  9452.,  9510.,  9568.,  9626.,  9684.,  9742.,  9800.,
      9858.,  9916.,  9974.,  10032., 10090., 10148., 10206., 10264., 10322.,
      10380., 5342.,  5372.,  5402.,  5432.,  2535.,  2550.,  2565.,  2580.,
      5299.,  5330.,  5361.,  5392.,  5423.,  5454.,  5485.,  5516.,  5547.,
      5578.,  5609.,  5640.,  5671.,  5702.,  5733.,  5764.,  5795.,  5826.,
      5857.,  5888.,  5919.,  5950.,  5981.,  6012.,  3088.,  3104.,  3120.,
      3136.,  17.,    34.,    51.,    68.,    103.,   138.,   173.,   208.,
      243.,   278.,   313.,   348.,   383.,   418.,   453.,   488.,   523.,
      558.,   593.,   628.,   663.,   698.,   733.,   768.,   803.,   838.,
      873.,   908.,   450.,   468.,   486.,   504.,   512.,   548.,   584.,
      620.,   1198.,  1272.,  1346.,  1420.,  1494.,  1568.,  1642.,  1716.,
      1790.,  1864.,  1938.,  2012.,  2086.,  2160.,  2234.,  2308.,  2382.,
      2456.,  2530.,  2604.,  2678.,  2752.,  2826.,  2900.,  1454.,  1492.,
      1530.,  1568.,  1541.,  1598.,  1655.,  1712.,  3397.,  3514.,  3631.,
      3748.,  3865.,  3982.,  4099.,  4216.,  4333.,  4450.,  4567.,  4684.,
      4801.,  4918.,  5035.,  5152.,  5269.,  5386.,  5503.,  5620.,  5737.,
      5854.,  5971.,  6088.,  3068.,  3128.,  3188.,  3248.,  3160.,  3240.,
      3320.,  3400.,  6812.,  6976.,  7140.,  7304.,  7468.,  7632.,  7796.,
      7960.,  8124.,  8288.,  8452.,  8616.,  8780.,  8944.,  9108.,  9272.,
      9436.,  9600.,  9764.,  9928.,  10092., 10256., 10420., 10584., 5348.,
      5432.,  5516.,  5600.,  5400.,  5480.,  5560.,  5640.,  11404., 11568.,
      11732., 11896., 12060., 12224., 12388., 12552., 12716., 12880., 13044.,
      13208., 13372., 13536., 13700., 13864., 14028., 14192., 14356., 14520.,
      14684., 14848., 15012., 15176., 7700.,  7784.,  7868.,  7952.,  7640.,
      7720.,  7800.,  7880.,  15996., 16160., 16324., 16488., 16652., 16816.,
      16980., 17144., 17308., 17472., 17636., 17800., 17964., 18128., 18292.,
      18456., 18620., 18784., 18948., 19112., 19276., 19440., 19604., 19768.,
      10052., 10136., 10220., 10304., 9880.,  9960.,  10040., 10120., 20588.,
      20752., 20916., 21080., 21244., 21408., 21572., 21736., 21900., 22064.,
      22228., 22392., 22556., 22720., 22884., 23048., 23212., 23376., 23540.,
      23704., 23868., 24032., 24196., 24360., 12404., 12488., 12572., 12656.,
      8771.,  8834.,  8897.,  8960.,  18217., 18346., 18475., 18604., 18733.,
      18862., 18991., 19120., 19249., 19378., 19507., 19636., 19765., 19894.,
      20023., 20152., 20281., 20410., 20539., 20668., 20797., 20926., 21055.,
      21184., 10778., 10844., 10910., 10976., 6792.,  6836.,  6880.,  6924.,
      14070., 14160., 14250., 14340., 14430., 14520., 14610., 14700., 14790.,
      14880., 14970., 15060., 15150., 15240., 15330., 15420., 15510., 15600.,
      15690., 15780., 15870., 15960., 16050., 16140., 8206.,  8252.,  8298.,
      8344.,  3887.,  3910.,  3933.,  3956.,  8035.,  8082.,  8129.,  8176.,
      8223.,  8270.,  8317.,  8364.,  8411.,  8458.,  8505.,  8552.,  8599.,
      8646.,  8693.,  8740.,  8787.,  8834.,  8881.,  8928.,  8975.,  9022.,
      9069.,  9116.,  4632.,  4656.,  4680.,  4704.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      52448.,   54272.,   56096.,   57920.,   73700.,   76060.,   78420.,
      80780.,   98464.,   101392.,  104320.,  107248.,  126868.,  130396.,
      133924.,  137452.,  139132.,  142884.,  146636.,  150388.,  131968.,
      135280.,  138592.,  141904.,  120780.,  123620.,  126460.,  129300.,
      105440.,  107776.,  110112.,  112448.,  110760.,  113680.,  116600.,
      119520.,  151625.,  155375.,  159125.,  162875.,  198080.,  202700.,
      207320.,  211940.,  250285.,  255815.,  261345.,  266875.,  269535.,
      275345.,  281155.,  286965.,  250520.,  255620.,  260720.,  265820.,
      225275.,  229625.,  233975.,  238325.,  193640.,  197200.,  200760.,
      204320.,  201488.,  205760.,  210032.,  214304.,  271270.,  276730.,
      282190.,  287650.,  349200.,  355896.,  362592.,  369288.,  435470.,
      443450.,  451430.,  459410.,  463274.,  471590.,  479906.,  488222.,
      424800.,  432072.,  439344.,  446616.,  377410.,  383590.,  389770.,
      395950.,  320912.,  325952.,  330992.,  336032.,  331800.,  337680.,
      343560.,  349440.,  441595.,  449085.,  456575.,  464065.,  562576.,
      571732.,  580888.,  590044.,  694967.,  705845.,  716723.,  727601.,
      732893.,  744163.,  755433.,  766703.,  665560.,  675388.,  685216.,
      695044.,  586145.,  594475.,  602805.,  611135.,  494424.,  501200.,
      507976.,  514752.,  494424.,  502096.,  509768.,  517440.,  649355.,
      659085.,  668815.,  678545.,  817264.,  829108.,  840952.,  852796.,
      998375.,  1012389., 1026403., 1040417., 1036301., 1050707., 1065113.,
      1079519., 931000.,  943516.,  956032.,  968548.,  811825.,  822395.,
      832965.,  843535.,  678552.,  687120.,  695688.,  704256.,  657048.,
      666512.,  675976.,  685440.,  857115.,  869085.,  881055.,  893025.,
      1071952., 1086484., 1101016., 1115548., 1301783., 1318933., 1336083.,
      1353233., 1339709., 1357251., 1374793., 1392335., 1196440., 1211644.,
      1226848., 1242052., 1037505., 1050315., 1063125., 1075935., 862680.,
      873040.,  883400.,  893760.,  819672.,  830928.,  842184.,  853440.,
      1064875., 1079085., 1093295., 1107505., 1326640., 1343860., 1361080.,
      1378300., 1605191., 1625477., 1645763., 1666049., 1643117., 1663795.,
      1684473., 1705151., 1461880., 1479772., 1497664., 1515556., 1263185.,
      1278235., 1293285., 1308335., 1046808., 1058960., 1071112., 1083264.,
      964688.,  975104.,  985520.,  995936.,  1243990., 1257130., 1270270.,
      1283410., 1538928., 1554840., 1570752., 1586664., 1849694., 1868426.,
      1887158., 1905890., 1886906., 1905974., 1925042., 1944110., 1667520.,
      1684008., 1700496., 1716984., 1431730., 1445590., 1459450., 1473310.,
      1179344., 1190528., 1201712., 1212896., 1034280., 1043600., 1052920.,
      1062240., 1327625., 1339375., 1351125., 1362875., 1635200., 1649420.,
      1663640., 1677860., 1957165., 1973895., 1990625., 2007355., 1992095.,
      2009105., 2026115., 2043125., 1752920., 1767620., 1782320., 1797020.,
      1498875., 1511225., 1523575., 1535925., 1229800., 1239760., 1249720.,
      1259680., 1021280., 1029248., 1037216., 1045184., 1306820., 1316860.,
      1326900., 1336940., 1604704., 1616848., 1628992., 1641136., 1915060.,
      1929340., 1943620., 1957900., 1946140., 1960644., 1975148., 1989652.,
      1707328., 1719856., 1732384., 1744912., 1455660., 1466180., 1476700.,
      1487220., 1191008., 1199488., 1207968., 1216448., 551648.,  563712.,
      575776.,  587840.,  723300.,  738460.,  753620.,  768780.,  908704.,
      926992.,  945280.,  963568.,  1107988., 1129436., 1150884., 1172332.,
      1120252., 1141924., 1163596., 1185268., 1003648., 1022320., 1040992.,
      1059664., 872780.,  888420.,  904060.,  919700.,  727520.,  740096.,
      752672.,  765248.,  913960.,  929680.,  945400.,  961120.,  1187625.,
      1207375., 1227125., 1246875., 1479680., 1503500., 1527320., 1551140.,
      1790285., 1818215., 1846145., 1874075., 1809535., 1837745., 1865955.,
      1894165., 1608920., 1633220., 1657520., 1681820., 1389275., 1409625.,
      1429975., 1450325., 1150440., 1166800., 1183160., 1199520., 1380368.,
      1400000., 1419632., 1439264., 1783270., 1807930., 1832590., 1857250.,
      2209680., 2239416., 2269152., 2298888., 2659790., 2694650., 2729510.,
      2764370., 2687594., 2722790., 2757986., 2793182., 2377440., 2407752.,
      2438064., 2468376., 2043010., 2068390., 2093770., 2119150., 1684112.,
      1704512., 1724912., 1745312., 1958040., 1981840., 2005640., 2029440.,
      2519195., 2549085., 2578975., 2608865., 3109456., 3145492., 3181528.,
      3217564., 3729047., 3771285., 3813523., 3855761., 3766973., 3809603.,
      3852233., 3894863., 3319960., 3356668., 3393376., 3430084., 2842945.,
      2873675., 2904405., 2935135., 2335704., 2360400., 2385096., 2409792.,
      2120664., 2146256., 2171848., 2197440., 2726955., 2759085., 2791215.,
      2823345., 3364144., 3402868., 3441592., 3480316., 4032455., 4077829.,
      4123203., 4168577., 4070381., 4116147., 4161913., 4207679., 3585400.,
      3624796., 3664192., 3703588., 3068625., 3101595., 3134565., 3167535.,
      2519832., 2546320., 2572808., 2599296., 2283288., 2310672., 2338056.,
      2365440., 2934715., 2969085., 3003455., 3037825., 3618832., 3660244.,
      3701656., 3743068., 4335863., 4384373., 4432883., 4481393., 4373789.,
      4422691., 4471593., 4520495., 3850840., 3892924., 3935008., 3977092.,
      3294305., 3329515., 3364725., 3399935., 2703960., 2732240., 2760520.,
      2788800., 2445912., 2475088., 2504264., 2533440., 3142475., 3179085.,
      3215695., 3252305., 3873520., 3917620., 3961720., 4005820., 4639271.,
      4690917., 4742563., 4794209., 4677197., 4729235., 4781273., 4833311.,
      4116280., 4161052., 4205824., 4250596., 3519985., 3557435., 3594885.,
      3632335., 2888088., 2918160., 2948232., 2978304., 2573648., 2599424.,
      2625200., 2650976., 3293590., 3325930., 3358270., 3390610., 4044528.,
      4083480., 4122432., 4161384., 4826654., 4872266., 4917878., 4963490.,
      4863866., 4909814., 4955762., 5001710., 4265280., 4304808., 4344336.,
      4383864., 3634930., 3667990., 3701050., 3734110., 2972624., 2999168.,
      3025712., 3052256., 2554280., 2576400., 2598520., 2620640., 3259625.,
      3287375., 3315125., 3342875., 3992000., 4025420., 4058840., 4092260.,
      4751565., 4790695., 4829825., 4868955., 4786495., 4825905., 4865315.,
      4904725., 4186520., 4220420., 4254320., 4288220., 3558875., 3587225.,
      3615575., 3643925., 2903400., 2926160., 2948920., 2971680., 2380640.,
      2398848., 2417056., 2435264., 3031620., 3054460., 3077300., 3100140.,
      3705184., 3732688., 3760192., 3787696., 4401460., 4433660., 4465860.,
      4498060., 4432540., 4464964., 4497388., 4529812., 3869248., 3897136.,
      3925024., 3952912., 3282860., 3306180., 3329500., 3352820., 2673248.,
      2691968., 2710688., 2729408., 1050848., 1073152., 1095456., 1117760.,
      1372900., 1400860., 1428820., 1456780., 1718944., 1752592., 1786240.,
      1819888., 2089108., 2128476., 2167844., 2207212., 2101372., 2140964.,
      2180556., 2220148., 1875328., 1909360., 1943392., 1977424., 1624780.,
      1653220., 1681660., 1710100., 1349600., 1372416., 1395232., 1418048.,
      1717160., 1745680., 1774200., 1802720., 2223625., 2259375., 2295125.,
      2330875., 2761280., 2804300., 2847320., 2890340., 3330285., 3380615.,
      3430945., 3481275., 3349535., 3400145., 3450755., 3501365., 2967320.,
      3010820., 3054320., 3097820., 2553275., 2589625., 2625975., 2662325.,
      2107240., 2136400., 2165560., 2194720., 2559248., 2594240., 2629232.,
      2664224., 3295270., 3339130., 3382990., 3426850., 4070160., 4122936.,
      4175712., 4228488., 4884110., 4945850., 5007590., 5069330., 4911914.,
      4973990., 5036066., 5098142., 4330080., 4383432., 4436784., 4490136.,
      3708610., 3753190., 3797770., 3842350., 3047312., 3083072., 3118832.,
      3154592., 3584280., 3626000., 3667720., 3709440., 4596795., 4649085.,
      4701375., 4753665., 5656336., 5719252., 5782168., 5845084., 6763127.,
      6836725., 6910323., 6983921., 6801053., 6875043., 6949033., 7023023.,
      5974360., 6037948., 6101536., 6165124., 5099745., 5152875., 5206005.,
      5259135., 4176984., 4219600., 4262216., 4304832., 3746904., 3790416.,
      3833928., 3877440., 4804555., 4859085., 4913615., 4968145., 5911024.,
      5976628., 6042232., 6107836., 7066535., 7143269., 7220003., 7296737.,
      7104461., 7181587., 7258713., 7335839., 6239800., 6306076., 6372352.,
      6438628., 5325425., 5380795., 5436165., 5491535., 4361112., 4405520.,
      4449928., 4494336., 3909528., 3954832., 4000136., 4045440., 5012315.,
      5069085., 5125855., 5182625., 6165712., 6234004., 6302296., 6370588.,
      7369943., 7449813., 7529683., 7609553., 7407869., 7488131., 7568393.,
      7648655., 6505240., 6574204., 6643168., 6712132., 5551105., 5608715.,
      5666325., 5723935., 4545240., 4591440., 4637640., 4683840., 4072152.,
      4119248., 4166344., 4213440., 5220075., 5279085., 5338095., 5397105.,
      6420400., 6491380., 6562360., 6633340., 7673351., 7756357., 7839363.,
      7922369., 7711277., 7794675., 7878073., 7961471., 6770680., 6842332.,
      6913984., 6985636., 5776785., 5836635., 5896485., 5956335., 4729368.,
      4777360., 4825352., 4873344., 4182608., 4223744., 4264880., 4306016.,
      5343190., 5394730., 5446270., 5497810., 6550128., 6612120., 6674112.,
      6736104., 7803614., 7876106., 7948598., 8021090., 7840826., 7913654.,
      7986482., 8059310., 6863040., 6925608., 6988176., 7050744., 5838130.,
      5890390., 5942650., 5994910., 4765904., 4807808., 4849712., 4891616.,
      4074280., 4109200., 4144120., 4179040., 5191625., 5235375., 5279125.,
      5322875., 6348800., 6401420., 6454040., 6506660., 7545965., 7607495.,
      7669025., 7730555., 7580895., 7642705., 7704515., 7766325., 6620120.,
      6673220., 6726320., 6779420., 5618875., 5663225., 5707575., 5751925.,
      4577000., 4612560., 4648120., 4683680., 3740000., 3768448., 3796896.,
      3825344., 4756420., 4792060., 4827700., 4863340., 5805664., 5848528.,
      5891392., 5934256., 6887860., 6937980., 6988100., 7038220., 6918940.,
      6969284., 7019628., 7069972., 6031168., 6074416., 6117664., 6160912.,
      5110060., 5146180., 5182300., 5218420., 4155488., 4184448., 4213408.,
      4242368.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      120.,    140.,    160.,    180.,    200.,    220.,    240.,    260.,
      280.,    300.,    320.,    340.,    360.,    380.,    400.,    420.,
      440.,    460.,    480.,    500.,    347.,    361.,    375.,    389.,
      190.,    218.,    246.,    274.,    728.,    800.,    872.,    944.,
      1016.,   1088.,   1160.,   1232.,   1304.,   1376.,   1448.,   1520.,
      1592.,   1664.,   1736.,   1808.,   1880.,   1952.,   2024.,   2096.,
      2168.,   2240.,   2312.,   2384.,   1482.,   1526.,   1570.,   1614.,
      1003.,   1069.,   1135.,   1201.,   2960.,   3116.,   3272.,   3428.,
      3584.,   3740.,   3896.,   4052.,   4208.,   4364.,   4520.,   4676.,
      4832.,   4988.,   5144.,   5300.,   5456.,   5612.,   5768.,   5924.,
      6080.,   6236.,   6392.,   6548.,   3853.,   3943.,   4033.,   4123.,
      2892.,   3012.,   3132.,   3252.,   7632.,   7904.,   8176.,   8448.,
      8720.,   8992.,   9264.,   9536.,   9808.,   10080.,  10352.,  10624.,
      10896.,  11168.,  11440.,  11712.,  11984.,  12256.,  12528.,  12800.,
      13072.,  13344.,  13616.,  13888.,  7908.,   8060.,   8212.,   8364.,
      6252.,   6372.,   6492.,   6612.,   15248.,  15520.,  15792.,  16064.,
      16336.,  16608.,  16880.,  17152.,  17424.,  17696.,  17968.,  18240.,
      18512.,  18784.,  19056.,  19328.,  19600.,  19872.,  20144.,  20416.,
      20688.,  20960.,  21232.,  21504.,  12164.,  12316.,  12468.,  12620.,
      9612.,   9732.,   9852.,   9972.,   22864.,  23136.,  23408.,  23680.,
      23952.,  24224.,  24496.,  24768.,  25040.,  25312.,  25584.,  25856.,
      26128.,  26400.,  26672.,  26944.,  27216.,  27488.,  27760.,  28032.,
      28304.,  28576.,  28848.,  29120.,  16420.,  16572.,  16724.,  16876.,
      12972.,  13092.,  13212.,  13332.,  30480.,  30752.,  31024.,  31296.,
      31568.,  31840.,  32112.,  32384.,  32656.,  32928.,  33200.,  33472.,
      33744.,  34016.,  34288.,  34560.,  34832.,  35104.,  35376.,  35648.,
      35920.,  36192.,  36464.,  36736.,  20676.,  20828.,  20980.,  21132.,
      15151.,  15265.,  15379.,  15493.,  34136.,  34388.,  34640.,  34892.,
      35144.,  35396.,  35648.,  35900.,  36152.,  36404.,  36656.,  36908.,
      37160.,  37412.,  37664.,  37916.,  38168.,  38420.,  38672.,  38924.,
      39176.,  39428.,  39680.,  39932.,  21841.,  21979.,  22117.,  22255.,
      14014.,  14106.,  14198.,  14290.,  30872.,  31072.,  31272.,  31472.,
      31672.,  31872.,  32072.,  32272.,  32472.,  32672.,  32872.,  33072.,
      33272.,  33472.,  33672.,  33872.,  34072.,  34272.,  34472.,  34672.,
      34872.,  35072.,  35272.,  35472.,  19082.,  19190.,  19298.,  19406.,
      9113.,   9167.,   9221.,   9275.,   19792.,  19908.,  20024.,  20140.,
      20256.,  20372.,  20488.,  20604.,  20720.,  20836.,  20952.,  21068.,
      21184.,  21300.,  21416.,  21532.,  21648.,  21764.,  21880.,  21996.,
      22112.,  22228.,  22344.,  22460.,  11951.,  12013.,  12075.,  12137.,
      53.,     123.,    193.,    263.,    392.,    540.,    688.,    836.,
      984.,    1132.,   1280.,   1428.,   1576.,   1724.,   1872.,   2020.,
      2168.,   2316.,   2464.,   2612.,   2760.,   2908.,   3056.,   3204.,
      3352.,   3500.,   3648.,   3796.,   1931.,   2009.,   2087.,   2165.,
      2078.,   2234.,   2390.,   2546.,   5016.,   5344.,   5672.,   6000.,
      6328.,   6656.,   6984.,   7312.,   7640.,   7968.,   8296.,   8624.,
      8952.,   9280.,   9608.,   9936.,   10264.,  10592.,  10920.,  11248.,
      11576.,  11904.,  12232.,  12560.,  6442.,   6614.,   6786.,   6958.,
      6523.,   6781.,   7039.,   7297.,   14768.,  15308.,  15848.,  16388.,
      16928.,  17468.,  18008.,  18548.,  19088.,  19628.,  20168.,  20708.,
      21248.,  21788.,  22328.,  22868.,  23408.,  23948.,  24488.,  25028.,
      25568.,  26108.,  26648.,  27188.,  13981.,  14263.,  14545.,  14827.,
      13836.,  14212.,  14588.,  14964.,  30544.,  31328.,  32112.,  32896.,
      33680.,  34464.,  35248.,  36032.,  36816.,  37600.,  38384.,  39168.,
      39952.,  40736.,  41520.,  42304.,  43088.,  43872.,  44656.,  45440.,
      46224.,  47008.,  47792.,  48576.,  24996.,  25404.,  25812.,  26220.,
      24364.,  24740.,  25116.,  25492.,  52496.,  53280.,  54064.,  54848.,
      55632.,  56416.,  57200.,  57984.,  58768.,  59552.,  60336.,  61120.,
      61904.,  62688.,  63472.,  64256.,  65040.,  65824.,  66608.,  67392.,
      68176.,  68960.,  69744.,  70528.,  36420.,  36828.,  37236.,  37644.,
      34892.,  35268.,  35644.,  36020.,  74448.,  75232.,  76016.,  76800.,
      77584.,  78368.,  79152.,  79936.,  80720.,  81504.,  82288.,  83072.,
      83856.,  84640.,  85424.,  86208.,  86992.,  87776.,  88560.,  89344.,
      90128.,  90912.,  91696.,  92480.,  47844.,  48252.,  48660.,  49068.,
      45420.,  45796.,  46172.,  46548.,  96400.,  97184.,  97968.,  98752.,
      99536.,  100320., 101104., 101888., 102672., 103456., 104240., 105024.,
      105808., 106592., 107376., 108160., 108944., 109728., 110512., 111296.,
      112080., 112864., 113648., 114432., 59268.,  59676.,  60084.,  60492.,
      42175.,  42481.,  42787.,  43093.,  88952.,  89588.,  90224.,  90860.,
      91496.,  92132.,  92768.,  93404.,  94040.,  94676.,  95312.,  95948.,
      96584.,  97220.,  97856.,  98492.,  99128.,  99764.,  100400., 101036.,
      101672., 102308., 102944., 103580., 53473.,  53803.,  54133.,  54463.,
      33822.,  34042.,  34262.,  34482.,  71000.,  71456.,  71912.,  72368.,
      72824.,  73280.,  73736.,  74192.,  74648.,  75104.,  75560.,  76016.,
      76472.,  76928.,  77384.,  77840.,  78296.,  78752.,  79208.,  79664.,
      80120.,  80576.,  81032.,  81488.,  41962.,  42198.,  42434.,  42670.,
      19913.,  20031.,  20149.,  20267.,  41648.,  41892.,  42136.,  42380.,
      42624.,  42868.,  43112.,  43356.,  43600.,  43844.,  44088.,  44332.,
      44576.,  44820.,  45064.,  45308.,  45552.,  45796.,  46040.,  46284.,
      46528.,  46772.,  47016.,  47260.,  24287.,  24413.,  24539.,  24665.,
      101.,    235.,    369.,    503.,    744.,    1020.,   1296.,   1572.,
      1848.,   2124.,   2400.,   2676.,   2952.,   3228.,   3504.,   3780.,
      4056.,   4332.,   4608.,   4884.,   5160.,   5436.,   5712.,   5988.,
      6264.,   6540.,   6816.,   7092.,   3515.,   3657.,   3799.,   3941.,
      3966.,   4250.,   4534.,   4818.,   9304.,   9888.,   10472.,  11056.,
      11640.,  12224.,  12808.,  13392.,  13976.,  14560.,  15144.,  15728.,
      16312.,  16896.,  17480.,  18064.,  18648.,  19232.,  19816.,  20400.,
      20984.,  21568.,  22152.,  22736.,  11402.,  11702.,  12002.,  12302.,
      12043.,  12493.,  12943.,  13393.,  26576.,  27500.,  28424.,  29348.,
      30272.,  31196.,  32120.,  33044.,  33968.,  34892.,  35816.,  36740.,
      37664.,  38588.,  39512.,  40436.,  41360.,  42284.,  43208.,  44132.,
      45056.,  45980.,  46904.,  47828.,  24109.,  24583.,  25057.,  25531.,
      24780.,  25412.,  26044.,  26676.,  53456.,  54752.,  56048.,  57344.,
      58640.,  59936.,  61232.,  62528.,  63824.,  65120.,  66416.,  67712.,
      69008.,  70304.,  71600.,  72896.,  74192.,  75488.,  76784.,  78080.,
      79376.,  80672.,  81968.,  83264.,  42084.,  42748.,  43412.,  44076.,
      42476.,  43108.,  43740.,  44372.,  89744.,  91040.,  92336.,  93632.,
      94928.,  96224.,  97520.,  98816.,  100112., 101408., 102704., 104000.,
      105296., 106592., 107888., 109184., 110480., 111776., 113072., 114368.,
      115664., 116960., 118256., 119552., 60676.,  61340.,  62004.,  62668.,
      60172.,  60804.,  61436.,  62068.,  126032., 127328., 128624., 129920.,
      131216., 132512., 133808., 135104., 136400., 137696., 138992., 140288.,
      141584., 142880., 144176., 145472., 146768., 148064., 149360., 150656.,
      151952., 153248., 154544., 155840., 79268.,  79932.,  80596.,  81260.,
      77868.,  78500.,  79132.,  79764.,  162320., 163616., 164912., 166208.,
      167504., 168800., 170096., 171392., 172688., 173984., 175280., 176576.,
      177872., 179168., 180464., 181760., 183056., 184352., 185648., 186944.,
      188240., 189536., 190832., 192128., 97860.,  98524.,  99188.,  99852.,
      69199.,  69697.,  70195.,  70693.,  143768., 144788., 145808., 146828.,
      147848., 148868., 149888., 150908., 151928., 152948., 153968., 154988.,
      156008., 157028., 158048., 159068., 160088., 161108., 162128., 163148.,
      164168., 165188., 166208., 167228., 85105.,  85627.,  86149.,  86671.,
      53630.,  53978.,  54326.,  54674.,  111128., 111840., 112552., 113264.,
      113976., 114688., 115400., 116112., 116824., 117536., 118248., 118960.,
      119672., 120384., 121096., 121808., 122520., 123232., 123944., 124656.,
      125368., 126080., 126792., 127504., 64842.,  65206.,  65570.,  65934.,
      30713.,  30895.,  31077.,  31259.,  63504.,  63876.,  64248.,  64620.,
      64992.,  65364.,  65736.,  66108.,  66480.,  66852.,  67224.,  67596.,
      67968.,  68340.,  68712.,  69084.,  69456.,  69828.,  70200.,  70572.,
      70944.,  71316.,  71688.,  72060.,  36623.,  36813.,  37003.,  37193.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      301984.,  316448.,  330912.,  345376.,  407128.,  425848.,  444568.,
      463288.,  532016.,  555248.,  578480.,  601712.,  677672.,  705672.,
      733672.,  761672.,  726408.,  756200.,  785992.,  815784.,  657072.,
      683376.,  709680.,  735984.,  559800.,  582360.,  604920.,  627480.,
      501664.,  520224.,  538784.,  557344.,  532168.,  555368.,  578568.,
      601768.,  705854.,  735654.,  765454.,  795254.,  907676.,  944396.,
      981116.,  1017836., 1138914., 1182874., 1226834., 1270794., 1202522.,
      1248722., 1294922., 1341122., 1066684., 1107244., 1147804., 1188364.,
      889398.,  923998.,  958598.,  993198.,  770248.,  798568.,  826888.,
      855208.,  854640.,  888624.,  922608.,  956592.,  1089092., 1132532.,
      1175972., 1219412., 1363912., 1417192., 1470472., 1523752., 1680636.,
      1744140., 1807644., 1871148., 1755276., 1821468., 1887660., 1953852.,
      1544072., 1601960., 1659848., 1717736., 1278164., 1327364., 1376564.,
      1425764., 1089648., 1129776., 1169904., 1210032., 1230488., 1277304.,
      1324120., 1370936., 1548650., 1608290., 1667930., 1727570., 1923252.,
      1996164., 2069076., 2141988., 2353526., 2440158., 2526790., 2613422.,
      2447646., 2537414., 2627182., 2716950., 2147604., 2225892., 2304180.,
      2382468., 1775762., 1842122., 1908482., 1974842., 1496728., 1550712.,
      1604696., 1658680., 1677720., 1738872., 1800024., 1861176., 2094378.,
      2171938., 2249498., 2327058., 2581812., 2676228., 2770644., 2865060.,
      3106486., 3218206., 3329926., 3441646., 3200606., 3315462., 3430318.,
      3545174., 2793876., 2893668., 2993460., 3093252., 2301010., 2385290.,
      2469570., 2553850., 1919384., 1987704., 2056024., 2124344., 2016408.,
      2075512., 2134616., 2193720., 2463466., 2538466., 2613466., 2688466.,
      2979252., 3070596., 3161940., 3253284., 3497462., 3605598., 3713734.,
      3821870., 3591582., 3702854., 3814126., 3925398., 3080724., 3177444.,
      3274164., 3370884., 2485778., 2567498., 2649218., 2730938., 2036888.,
      2103160., 2169432., 2235704., 1896344., 1953400., 2010456., 2067512.,
      2259114., 2331554., 2403994., 2476434., 2688564., 2776836., 2865108.,
      2953380., 3085622., 3190174., 3294726., 3399278., 3179742., 3287430.,
      3395118., 3502806., 2679444., 2773092., 2866740., 2960388., 2097106.,
      2176266., 2255426., 2334586., 1695640., 1759864., 1824088., 1888312.,
      1812336., 1862704., 1913072., 1963440., 2218884., 2282804., 2346724.,
      2410644., 2684744., 2762600., 2840456., 2918312., 3077820., 3169996.,
      3262172., 3354348., 3166284., 3261148., 3356012., 3450876., 2786568.,
      2869032., 2951496., 3033960., 2333204., 2402884., 2472564., 2542244.,
      1839984., 1896496., 1953008., 2009520., 1650376., 1692008., 1733640.,
      1775272., 1940542., 1993382., 2046222., 2099062., 2278812., 2343180.,
      2407548., 2471916., 2500066., 2576282., 2652498., 2728714., 2570330.,
      2648786., 2727242., 2805698., 2195644., 2263852., 2332060., 2400268.,
      1759542., 1817182., 1874822., 1932462., 1328840., 1375592., 1422344.,
      1469096., 969120.,  999968.,  1030816., 1061664., 1306840., 1346040.,
      1385240., 1424440., 1681712., 1729520., 1777328., 1825136., 1895592.,
      1952264., 2008936., 2065608., 1955592., 2014056., 2072520., 2130984.,
      1767344., 1818224., 1869104., 1919984., 1533752., 1576792., 1619832.,
      1662872., 1253792., 1288736., 1323680., 1358624., 705440.,  736288.,
      767136.,  797984.,  919640.,  958840.,  998040.,  1037240., 1169968.,
      1217776., 1265584., 1313392., 1457448., 1514120., 1570792., 1627464.,
      1506184., 1564648., 1623112., 1681576., 1327792., 1378672., 1429552.,
      1480432., 1105080., 1148120., 1191160., 1234200., 970656.,  1005600.,
      1040544., 1075488., 1159368., 1203048., 1246728., 1290408., 1442750.,
      1498150., 1553550., 1608950., 1774748., 1842188., 1909628., 1977068.,
      2156642., 2236442., 2316242., 2396042., 2220250., 2302290., 2384330.,
      2466370., 1925564., 1996844., 2068124., 2139404., 1568950., 1629150.,
      1689350., 1749550., 1315528., 1364328., 1413128., 1461928., 1558128.,
      1616688., 1675248., 1733808., 1931588., 2005748., 2079908., 2154068.,
      2369992., 2460136., 2550280., 2640424., 2874876., 2981388., 3087900.,
      3194412., 2949516., 3058716., 3167916., 3277116., 2566536., 2661288.,
      2756040., 2850792., 2104276., 2184196., 2264116., 2344036., 1760368.,
      1825072., 1889776., 1954480., 2016408., 2075512., 2134616., 2193720.,
      2463466., 2538466., 2613466., 2688466., 2979252., 3070596., 3161940.,
      3253284., 3497462., 3605598., 3713734., 3821870., 3591582., 3702854.,
      3814126., 3925398., 3080724., 3177444., 3274164., 3370884., 2485778.,
      2567498., 2649218., 2730938., 2036888., 2103160., 2169432., 2235704.,
      1896344., 1953400., 2010456., 2067512., 2259114., 2331554., 2403994.,
      2476434., 2688564., 2776836., 2865108., 2953380., 3085622., 3190174.,
      3294726., 3399278., 3179742., 3287430., 3395118., 3502806., 2679444.,
      2773092., 2866740., 2960388., 2097106., 2176266., 2255426., 2334586.,
      1695640., 1759864., 1824088., 1888312., 1841816., 1896824., 1951832.,
      2006840., 2267754., 2337634., 2407514., 2477394., 2758324., 2843524.,
      2928724., 3013924., 3181686., 3282654., 3383622., 3484590., 3275806.,
      3379910., 3484014., 3588118., 2900756., 2991332., 3081908., 3172484.,
      2445714., 2522314., 2598914., 2675514., 1944216., 2006392., 2068568.,
      2130744., 1852824., 1905784., 1958744., 2011704., 2227242., 2294562.,
      2361882., 2429202., 2664244., 2746372., 2828500., 2910628., 2999222.,
      3096606., 3193990., 3291374., 3093342., 3193862., 3294382., 3394902.,
      2696084., 2783588., 2871092., 2958596., 2220882., 2294922., 2368962.,
      2443002., 1734040., 1794168., 1854296., 1914424., 1348464., 1390640.,
      1432816., 1474992., 1782404., 1836084., 1889764., 1943444., 2267464.,
      2333032., 2398600., 2464168., 2606012., 2683852., 2761692., 2839532.,
      2694476., 2775004., 2855532., 2936060., 2385672., 2455848., 2526024.,
      2596200., 2011412., 2070852., 2130292., 2189732., 1671024., 1719344.,
      1767664., 1815984., 1175752., 1205096., 1234440., 1263784., 1480382.,
      1517862., 1555342., 1592822., 1820828., 1866764., 1912700., 1958636.,
      1966434., 2021146., 2075858., 2130570., 2036698., 2093650., 2150602.,
      2207554., 1729468., 1779244., 1829020., 1878796., 1373110., 1415390.,
      1457670., 1499950., 1099976., 1134440., 1168904., 1203368., 500128.,
      514592.,  529056.,  543520.,  614104.,  632824.,  651544.,  670264.,
      748848.,  772080.,  795312.,  818544.,  902824.,  930824.,  958824.,
      986824.,  962824.,  992616.,  1022408., 1052200., 867248.,  893552.,
      919856.,  946160.,  742712.,  765272.,  787832.,  810392.,  588192.,
      606752.,  625312.,  643872.,  1108896., 1156128., 1203360., 1250592.,
      1432152., 1491832., 1551512., 1611192., 1807920., 1880304., 1952688.,
      2025072., 2237224., 2322568., 2407912., 2493256., 2285960., 2373096.,
      2460232., 2547368., 1998512., 2073968., 2149424., 2224880., 1650360.,
      1713880., 1777400., 1840920., 1439648., 1490976., 1542304., 1593632.,
      1678024., 1725800., 1773576., 1821352., 2003006., 2063526., 2124046.,
      2184566., 2380700., 2454284., 2527868., 2601452., 2812386., 2899354.,
      2986322., 3073290., 2875994., 2965202., 3054410., 3143618., 2425020.,
      2502444., 2579868., 2657292., 1908022., 1973342., 2038662., 2103982.,
      1555656., 1608552., 1661448., 1714344., 1585776., 1636144., 1686512.,
      1736880., 1847364., 1911284., 1975204., 2039124., 2165704., 2243560.,
      2321416., 2399272., 2542332., 2634508., 2726684., 2818860., 2616972.,
      2711836., 2806700., 2901564., 2182024., 2264488., 2346952., 2429416.,
      1675988., 1745668., 1815348., 1885028., 1362032., 1418544., 1475056.,
      1531568., 1841816., 1896824., 1951832., 2006840., 2267754., 2337634.,
      2407514., 2477394., 2758324., 2843524., 2928724., 3013924., 3181686.,
      3282654., 3383622., 3484590., 3275806., 3379910., 3484014., 3588118.,
      2900756., 2991332., 3081908., 3172484., 2445714., 2522314., 2598914.,
      2675514., 1944216., 2006392., 2068568., 2130744., 1852824., 1905784.,
      1958744., 2011704., 2227242., 2294562., 2361882., 2429202., 2664244.,
      2746372., 2828500., 2910628., 2999222., 3096606., 3193990., 3291374.,
      3093342., 3193862., 3294382., 3394902., 2696084., 2783588., 2871092.,
      2958596., 2220882., 2294922., 2368962., 2443002., 1734040., 1794168.,
      1854296., 1914424., 1405080., 1455992., 1506904., 1557816., 1875434.,
      1940194., 2004954., 2069714., 2406324., 2485380., 2564436., 2643492.,
      2800374., 2894174., 2987974., 3081774., 2894494., 2991430., 3088366.,
      3185302., 2589716., 2674148., 2758580., 2843012., 2209042., 2280522.,
      2352002., 2423482., 1851544., 1909624., 1967704., 2025784., 1547160.,
      1596024., 1644888., 1693752., 1998762., 2060962., 2123162., 2185362.,
      2508852., 2584836., 2660820., 2736804., 2847286., 2937502., 3027718.,
      3117934., 2941406., 3034758., 3128110., 3221462., 2581652., 2663012.,
      2744372., 2825732., 2148050., 2216970., 2285890., 2354810., 1772440.,
      1828472., 1884504., 1940536., 1146736., 1180720., 1214704., 1248688.,
      1411460., 1454900., 1498340., 1541780., 1719112., 1772392., 1825672.,
      1878952., 2068668., 2132172., 2195676., 2259180., 2157132., 2223324.,
      2289516., 2355708., 1853704., 1911592., 1969480., 2027368., 1493012.,
      1542212., 1591412., 1640612., 1239920., 1280048., 1320176., 1360304.,
      1137352., 1170792., 1204232., 1237672., 1344318., 1386918., 1429518.,
      1472118., 1591196., 1643276., 1695356., 1747436., 1843938., 1905818.,
      1967698., 2029578., 1914202., 1978322., 2042442., 2106562., 1589948.,
      1645868., 1701788., 1757708., 1212470., 1259870., 1307270., 1354670.,
      979656.,  1018216., 1056776., 1095336., 1100192., 1131040., 1161888.,
      1192736., 1339608., 1378808., 1418008., 1457208., 1616176., 1663984.,
      1711792., 1759600., 1862824., 1919496., 1976168., 2032840., 1922824.,
      1981288., 2039752., 2098216., 1701808., 1752688., 1803568., 1854448.,
      1435448., 1478488., 1521528., 1564568., 1122720., 1157664., 1192608.,
      1227552.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     836.,     980.,     1124.,    1268.,    1412.,    1556.,
      1700.,    1844.,    1988.,    2132.,    2276.,    2420.,    2564.,
      2708.,    2852.,    2996.,    3140.,    3284.,    3428.,    3572.,
      2566.,    2670.,    2774.,    2878.,    1260.,    1468.,    1676.,
      1884.,    5224.,    5768.,    6312.,    6856.,    7400.,    7944.,
      8488.,    9032.,    9576.,    10120.,   10664.,   11208.,   11752.,
      12296.,   12840.,   13384.,   13928.,   14472.,   15016.,   15560.,
      16104.,   16648.,   17192.,   17736.,   11196.,   11532.,   11868.,
      12204.,   7274.,    7778.,    8282.,    8786.,    22060.,   23260.,
      24460.,   25660.,   26860.,   28060.,   29260.,   30460.,   31660.,
      32860.,   34060.,   35260.,   36460.,   37660.,   38860.,   40060.,
      41260.,   42460.,   43660.,   44860.,   46060.,   47260.,   48460.,
      49660.,   29474.,   30170.,   30866.,   31562.,   21656.,   22584.,
      23512.,   24440.,   57936.,   60048.,   62160.,   64272.,   66384.,
      68496.,   70608.,   72720.,   74832.,   76944.,   79056.,   81168.,
      83280.,   85392.,   87504.,   89616.,   91728.,   93840.,   95952.,
      98064.,   100176.,  102288.,  104400.,  106512.,  60984.,   62168.,
      63352.,   64536.,   47640.,   48568.,   49496.,   50424.,   117072.,
      119184.,  121296.,  123408.,  125520.,  127632.,  129744.,  131856.,
      133968.,  136080.,  138192.,  140304.,  142416.,  144528.,  146640.,
      148752.,  150864.,  152976.,  155088.,  157200.,  159312.,  161424.,
      163536.,  165648.,  94136.,   95320.,   96504.,   97688.,   73624.,
      74552.,   75480.,   76408.,   176208.,  178320.,  180432.,  182544.,
      184656.,  186768.,  188880.,  190992.,  193104.,  195216.,  197328.,
      199440.,  201552.,  203664.,  205776.,  207888.,  210000.,  212112.,
      214224.,  216336.,  218448.,  220560.,  222672.,  224784.,  127288.,
      128472.,  129656.,  130840.,  99608.,   100536.,  101464.,  102392.,
      235344.,  237456.,  239568.,  241680.,  243792.,  245904.,  248016.,
      250128.,  252240.,  254352.,  256464.,  258576.,  260688.,  262800.,
      264912.,  267024.,  269136.,  271248.,  273360.,  275472.,  277584.,
      279696.,  281808.,  283920.,  160440.,  161624.,  162808.,  163992.,
      117722.,  118610.,  119498.,  120386.,  265996.,  267964.,  269932.,
      271900.,  273868.,  275836.,  277804.,  279772.,  281740.,  283708.,
      285676.,  287644.,  289612.,  291580.,  293548.,  295516.,  297484.,
      299452.,  301420.,  303388.,  305356.,  307324.,  309292.,  311260.,
      170642.,  171722.,  172802.,  173882.,  109548.,  110268.,  110988.,
      111708.,  241768.,  243336.,  244904.,  246472.,  248040.,  249608.,
      251176.,  252744.,  254312.,  255880.,  257448.,  259016.,  260584.,
      262152.,  263720.,  265288.,  266856.,  268424.,  269992.,  271560.,
      273128.,  274696.,  276264.,  277832.,  149692.,  150540.,  151388.,
      152236.,  71502.,   71926.,   72350.,   72774.,   155492.,  156404.,
      157316.,  158228.,  159140.,  160052.,  160964.,  161876.,  162788.,
      163700.,  164612.,  165524.,  166436.,  167348.,  168260.,  169172.,
      170084.,  170996.,  171908.,  172820.,  173732.,  174644.,  175556.,
      176468.,  94006.,   94494.,   94982.,   95470.,   350.,     902.,
      1454.,    2006.,    2948.,    4116.,    5284.,    6452.,    7620.,
      8788.,    9956.,    11124.,   12292.,   13460.,   14628.,   15796.,
      16964.,   18132.,   19300.,   20468.,   21636.,   22804.,   23972.,
      25140.,   26308.,   27476.,   28644.,   29812.,   15174.,   15790.,
      16406.,   17022.,   16236.,   17468.,   18700.,   19932.,   39272.,
      41864.,   44456.,   47048.,   49640.,   52232.,   54824.,   57416.,
      60008.,   62600.,   65192.,   67784.,   70376.,   72968.,   75560.,
      78152.,   80744.,   83336.,   85928.,   88520.,   91112.,   93704.,
      96296.,   98888.,   50748.,   52108.,   53468.,   54828.,   51242.,
      53282.,   55322.,   57362.,   116140.,  120412.,  124684.,  128956.,
      133228.,  137500.,  141772.,  146044.,  150316.,  154588.,  158860.,
      163132.,  167404.,  171676.,  175948.,  180220.,  184492.,  188764.,
      193036.,  197308.,  201580.,  205852.,  210124.,  214396.,  110306.,
      112538.,  114770.,  117002.,  108952.,  111928.,  114904.,  117880.,
      240720.,  246928.,  253136.,  259344.,  265552.,  271760.,  277968.,
      284176.,  290384.,  296592.,  302800.,  309008.,  315216.,  321424.,
      327632.,  333840.,  340048.,  346256.,  352464.,  358672.,  364880.,
      371088.,  377296.,  383504.,  197432.,  200664.,  203896.,  207128.,
      192280.,  195256.,  198232.,  201208.,  414544.,  420752.,  426960.,
      433168.,  439376.,  445584.,  451792.,  458000.,  464208.,  470416.,
      476624.,  482832.,  489040.,  495248.,  501456.,  507664.,  513872.,
      520080.,  526288.,  532496.,  538704.,  544912.,  551120.,  557328.,
      287928.,  291160.,  294392.,  297624.,  275608.,  278584.,  281560.,
      284536.,  588368.,  594576.,  600784.,  606992.,  613200.,  619408.,
      625616.,  631824.,  638032.,  644240.,  650448.,  656656.,  662864.,
      669072.,  675280.,  681488.,  687696.,  693904.,  700112.,  706320.,
      712528.,  718736.,  724944.,  731152.,  378424.,  381656.,  384888.,
      388120.,  358936.,  361912.,  364888.,  367864.,  762192.,  768400.,
      774608.,  780816.,  787024.,  793232.,  799440.,  805648.,  811856.,
      818064.,  824272.,  830480.,  836688.,  842896.,  849104.,  855312.,
      861520.,  867728.,  873936.,  880144.,  886352.,  892560.,  898768.,
      904976.,  468920.,  472152.,  475384.,  478616.,  333722.,  336146.,
      338570.,  340994.,  704140.,  709180.,  714220.,  719260.,  724300.,
      729340.,  734380.,  739420.,  744460.,  749500.,  754540.,  759580.,
      764620.,  769660.,  774700.,  779740.,  784780.,  789820.,  794860.,
      799900.,  804940.,  809980.,  815020.,  820060.,  423506.,  426122.,
      428738.,  431354.,  267884.,  269628.,  271372.,  273116.,  562536.,
      566152.,  569768.,  573384.,  577000.,  580616.,  584232.,  587848.,
      591464.,  595080.,  598696.,  602312.,  605928.,  609544.,  613160.,
      616776.,  620392.,  624008.,  627624.,  631240.,  634856.,  638472.,
      642088.,  645704.,  332604.,  334476.,  336348.,  338220.,  157838.,
      158774.,  159710.,  160646.,  330212.,  332148.,  334084.,  336020.,
      337956.,  339892.,  341828.,  343764.,  345700.,  347636.,  349572.,
      351508.,  353444.,  355380.,  357316.,  359252.,  361188.,  363124.,
      365060.,  366996.,  368932.,  370868.,  372804.,  374740.,  192630.,
      193630.,  194630.,  195630.,  670.,     1734.,    2798.,    3862.,
      5636.,    7828.,    10020.,   12212.,   14404.,   16596.,   18788.,
      20980.,   23172.,   25364.,   27556.,   29748.,   31940.,   34132.,
      36324.,   38516.,   40708.,   42900.,   45092.,   47284.,   49476.,
      51668.,   53860.,   56052.,   27782.,   28910.,   30038.,   31166.,
      31212.,   33468.,   35724.,   37980.,   73320.,   77960.,   82600.,
      87240.,   91880.,   96520.,   101160.,  105800.,  110440.,  115080.,
      119720.,  124360.,  129000.,  133640.,  138280.,  142920.,  147560.,
      152200.,  156840.,  161480.,  166120.,  170760.,  175400.,  180040.,
      90300.,   92684.,   95068.,   97452.,   95210.,   98786.,   102362.,
      105938.,  210220.,  217564.,  224908.,  232252.,  239596.,  246940.,
      254284.,  261628.,  268972.,  276316.,  283660.,  291004.,  298348.,
      305692.,  313036.,  320380.,  327724.,  335068.,  342412.,  349756.,
      357100.,  364444.,  371788.,  379132.,  191138.,  194906.,  198674.,
      202442.,  196248.,  201272.,  206296.,  211320.,  423504.,  433808.,
      444112.,  454416.,  464720.,  475024.,  485328.,  495632.,  505936.,
      516240.,  526544.,  536848.,  547152.,  557456.,  567760.,  578064.,
      588368.,  598672.,  608976.,  619280.,  629584.,  639888.,  650192.,
      660496.,  333880.,  339160.,  344440.,  349720.,  336920.,  341944.,
      346968.,  351992.,  712016.,  722320.,  732624.,  742928.,  753232.,
      763536.,  773840.,  784144.,  794448.,  804752.,  815056.,  825360.,
      835664.,  845968.,  856272.,  866576.,  876880.,  887184.,  897488.,
      907792.,  918096.,  928400.,  938704.,  949008.,  481720.,  487000.,
      492280.,  497560.,  477592.,  482616.,  487640.,  492664.,  1000528.,
      1010832., 1021136., 1031440., 1041744., 1052048., 1062352., 1072656.,
      1082960., 1093264., 1103568., 1113872., 1124176., 1134480., 1144784.,
      1155088., 1165392., 1175696., 1186000., 1196304., 1206608., 1216912.,
      1227216., 1237520., 629560.,  634840.,  640120.,  645400.,  618264.,
      623288.,  628312.,  633336.,  1289040., 1299344., 1309648., 1319952.,
      1330256., 1340560., 1350864., 1361168., 1371472., 1381776., 1392080.,
      1402384., 1412688., 1422992., 1433296., 1443600., 1453904., 1464208.,
      1474512., 1484816., 1495120., 1505424., 1515728., 1526032., 777400.,
      782680.,  787960.,  793240.,  549722.,  553682.,  557642.,  561602.,
      1142284., 1150396., 1158508., 1166620., 1174732., 1182844., 1190956.,
      1199068., 1207180., 1215292., 1223404., 1231516., 1239628., 1247740.,
      1255852., 1263964., 1272076., 1280188., 1288300., 1296412., 1304524.,
      1312636., 1320748., 1328860., 676370.,  680522.,  684674.,  688826.,
      426220.,  428988.,  431756.,  434524.,  883304.,  888968.,  894632.,
      900296.,  905960.,  911624.,  917288.,  922952.,  928616.,  934280.,
      939944.,  945608.,  951272.,  956936.,  962600.,  968264.,  973928.,
      979592.,  985256.,  990920.,  996584.,  1002248., 1007912., 1013576.,
      515516.,  518412.,  521308.,  524204.,  244174.,  245622.,  247070.,
      248518.,  504932.,  507892.,  510852.,  513812.,  516772.,  519732.,
      522692.,  525652.,  528612.,  531572.,  534532.,  537492.,  540452.,
      543412.,  546372.,  549332.,  552292.,  555252.,  558212.,  561172.,
      564132.,  567092.,  570052.,  573012.,  291254.,  292766.,  294278.,
      295790.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2048.,   2840.,   3752.,   4788.,   5194.,   5600.,   5240.,   4740.,
      4096.,   4220.,   5725.,   7420.,   9310.,   9940.,   10570.,  9730.,
      8675.,   7400.,   7560.,   10110.,  12936.,  16044.,  16947.,  17850.,
      16248.,  14340.,  12120.,  12320.,  16310.,  20678.,  25431.,  26656.,
      27881.,  25172.,  22050.,  18508.,  18242.,  23870.,  29939.,  36456.,
      37681.,  38906.,  34811.,  30240.,  25186.,  24164.,  31430.,  39200.,
      47481.,  48706.,  49931.,  44450.,  38430.,  31864.,  30086.,  38990.,
      48461.,  58506.,  59731.,  60956.,  54089.,  46620.,  38542.,  35088.,
      45165.,  55776.,  66927.,  68124.,  69321.,  61140.,  52395.,  43080.,
      37410.,  47950.,  58975.,  70490.,  71610.,  72730.,  63895.,  54550.,
      44690.,  36800.,  47030.,  57680.,  68754.,  69748.,  70742.,  61976.,
      52770.,  43120.,  20768.,  27140.,  33992.,  41328.,  41734.,  42140.,
      37640.,  32640.,  27136.,  33920.,  43975.,  54670.,  66010.,  66640.,
      67270.,  59680.,  51425.,  42500.,  50760.,  65460.,  80976.,  97314.,
      98217.,  99120.,  87528.,  75090.,  61800.,  71540.,  91910.,  113288.,
      135681., 136906., 138131., 121562., 103950., 85288.,  77462.,  99470.,
      122549., 146706., 147931., 149156., 131201., 112140., 91966.,  83384.,
      107030., 131810., 157731., 158956., 160181., 140840., 120330., 98644.,
      89306.,  114590., 141071., 168756., 169981., 171206., 150479., 128520.,
      105322., 93408.,  119415., 146496., 174657., 175854., 177051., 155100.,
      132045., 107880., 92310.,  117700., 144025., 171290., 172410., 173530.,
      151645., 128800., 104990., 85760.,  109130., 133280., 158214., 159208.,
      160202., 139736., 118470., 96400.,  39488.,  51440.,  64232.,  77868.,
      78274.,  78680.,  70040.,  60540.,  50176.,  63620.,  82225.,  101920.,
      122710., 123340., 123970., 109630., 94175.,  77600.,  93960.,  120810.,
      149016., 178584., 179487., 180390., 158808., 135840., 111480., 130760.,
      167510., 205898., 245931., 247156., 248381., 217952., 185850., 152068.,
      136682., 175070., 215159., 256956., 258181., 259406., 227591., 194040.,
      158746., 142604., 182630., 224420., 267981., 269206., 270431., 237230.,
      202230., 165424., 148526., 190190., 233681., 279006., 280231., 281456.,
      246869., 210420., 172102., 151728., 193665., 237216., 282387., 283584.,
      284781., 249060., 211695., 172680., 147210., 187450., 229075., 272090.,
      273210., 274330., 239395., 203050., 165290., 134720., 171230., 208880.,
      247674., 248668., 249662., 217496., 184170., 149680.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    10.,    16.,    22.,    28.,    34.,    32.,   21.,
      12.,   38.,   80.,    101.,   122.,   143.,   164.,   138.,  84.,
      54.,   144.,  273.,   318.,   363.,   408.,   453.,   360.,  210.,
      148.,  364.,  652.,   730.,   808.,   886.,   964.,   740.,  420.,
      302.,  700.,  1198.,  1276.,  1354.,  1432.,  1510.,  1132., 630.,
      456.,  1036., 1744.,  1822.,  1900.,  1978.,  2056.,  1524., 840.,
      610.,  1372., 2290.,  2368.,  2446.,  2524.,  2602.,  1916., 1050.,
      714.,  1557., 2532.,  2604.,  2676.,  2748.,  2820.,  2031., 1092.,
      661.,  1418., 2273.,  2330.,  2387.,  2444.,  2501.,  1778., 945.,
      430.,  913.,  1450.,  1483.,  1516.,  1549.,  1582.,  1115., 588.,
      13.,   40.,   82.,    124.,   166.,   208.,   250.,   188.,  105.,
      120.,  278.,  476.,   569.,   662.,   755.,   848.,   618.,  336.,
      342.,  756.,  1245.,  1398.,  1551.,  1704.,  1857.,  1332., 714.,
      700.,  1516., 2452.,  2674.,  2896.,  3118.,  3340.,  2372., 1260.,
      1190., 2524., 4006.,  4228.,  4450.,  4672.,  4894.,  3436., 1806.,
      1680., 3532., 5560.,  5782.,  6004.,  6226.,  6448.,  4500., 2352.,
      2170., 4540., 7114.,  7336.,  7558.,  7780.,  8002.,  5564., 2898.,
      2010., 4185., 6528.,  6708.,  6888.,  7068.,  7248.,  5019., 2604.,
      1609., 3338., 5189.,  5318.,  5447.,  5576.,  5705.,  3938., 2037.,
      946.,  1957., 3034.,  3103.,  3172.,  3241.,  3310.,  2279., 1176.,
      25.,   76.,   154.,   232.,   310.,   388.,   466.,   344.,  189.,
      228.,  518.,  872.,   1037.,  1202.,  1367.,  1532.,  1098., 588.,
      630.,  1368., 2217.,  2478.,  2739.,  3000.,  3261.,  2304., 1218.,
      1252., 2668., 4252.,  4618.,  4984.,  5350.,  5716.,  4004., 2100.,
      2078., 4348., 6814.,  7180.,  7546.,  7912.,  8278.,  5740., 2982.,
      2904., 6028., 9376.,  9742.,  10108., 10474., 10840., 7476., 3864.,
      3730., 7708., 11938., 12304., 12670., 13036., 13402., 9212., 4746.,
      3306., 6813., 10524., 10812., 11100., 11388., 11676., 8007., 4116.,
      2557., 5258., 8105.,  8306.,  8507.,  8708.,  8909.,  6098., 3129.,
      1462., 3001., 4618.,  4723.,  4828.,  4933.,  5038.,  3443., 1764.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15472.,   21540.,   28552.,   36540.,   39732.,   42924.,   40264.,
      36500.,   31600.,   32300.,   43925.,   57050.,   71715.,   76685.,
      81655.,   75290.,   67225.,   57420.,   58344.,   78150.,   100140.,
      124362.,  131502.,  138642.,  126348.,  111630.,  94440.,   95620.,
      126735.,  160846.,  198009.,  207711.,  217413.,  196462.,  172235.,
      144676.,  142492.,  186585.,  234178.,  285327.,  295029.,  304731.,
      272818.,  237125.,  197596.,  189364.,  246435.,  307510.,  372645.,
      382347.,  392049.,  349174.,  302015.,  250516.,  236236.,  306285.,
      380842.,  459963.,  469665.,  479367.,  425530.,  366905.,  303436.,
      276504.,  356010.,  439764.,  527814.,  537306.,  546798.,  482388.,
      413490.,  340056.,  295460.,  378775.,  465950.,  557025.,  565915.,
      574805.,  505070.,  431275.,  353380.,  291088.,  372060.,  456376.,
      544068.,  551964.,  559860.,  490552.,  417740.,  341392.,  162352.,
      212340.,  266152.,  323820.,  327012.,  330204.,  295144.,  256100.,
      213040.,  266300.,  345425.,  429650.,  519015.,  523985.,  528955.,
      469490.,  404725.,  334620.,  399624.,  515550.,  637980.,  766962.,
      774102.,  781242.,  690108.,  592230.,  487560.,  564340.,  725235.,
      894166.,  1071189., 1080891., 1090593., 960022.,  821135.,  673876.,
      611212.,  785085.,  967498.,  1158507., 1168209., 1177911., 1036378.,
      886025.,  726796.,  658084.,  844935.,  1040830., 1245825., 1255527.,
      1265229., 1112734., 950915.,  779716.,  704956.,  904785.,  1114162.,
      1333143., 1342845., 1352547., 1189090., 1015805., 832636.,  738744.,
      944610.,  1159044., 1382094., 1391586., 1401078., 1227588., 1045290.,
      854136.,  731060.,  932275.,  1140950., 1357125., 1366015., 1374905.,
      1201670., 1020775., 832180.,  679888.,  865260.,  1056856., 1254708.,
      1262604., 1270500., 1108312., 939740.,  764752.,  309232.,  403140.,
      503752.,  611100.,  614292.,  617484.,  550024.,  475700.,  394480.,
      500300.,  646925.,  802250.,  966315.,  971285.,  976255.,  863690.,
      742225.,  611820.,  740904.,  952950.,  1175820., 1409562., 1416702.,
      1423842., 1253868., 1072830., 880680.,  1033060., 1323735., 1627486.,
      1944369., 1954071., 1963773., 1723582., 1470035., 1203076., 1079932.,
      1383585., 1700818., 2031687., 2041389., 2051091., 1799938., 1534925.,
      1255996., 1126804., 1443435., 1774150., 2119005., 2128707., 2138409.,
      1876294., 1599815., 1308916., 1173676., 1503285., 1847482., 2206323.,
      2216025., 2225727., 1952650., 1664705., 1361836., 1200984., 1533210.,
      1878324., 2236374., 2245866., 2255358., 1972788., 1677090., 1368216.,
      1166660., 1485775., 1815950., 2157225., 2166115., 2175005., 1898270.,
      1610275., 1310980., 1068688., 1358460., 1657336., 1965348., 1973244.,
      1981140., 1726072., 1461740., 1188112.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     22.,    59.,    101.,   143.,   185.,    227.,    222.,   149.,
      70.,    244.,   538.,   694.,   850.,   1006.,   1162.,   996.,   614.,
      363.,   1002.,  1941.,  2283.,  2625.,  2967.,   3309.,   2658.,  1563.,
      1052.,  2632.,  4772.,  5372.,  5972.,  6572.,   7172.,   5544.,  3164.,
      2228.,  5208.,  8972.,  9572.,  10172., 10772.,  11372.,  8568.,  4788.,
      3404.,  7784.,  13172., 13772., 14372., 14972.,  15572.,  11592., 6412.,
      4580.,  10360., 17372., 17972., 18572., 19172.,  19772.,  14616., 8036.,
      5457.,  11934., 19455., 20013., 20571., 21129.,  21687.,  15654., 8433.,
      5098.,  10956., 17590., 18034., 18478., 18922.,  19366.,  13788., 7338.,
      3335.,  7090.,  11273., 11531., 11789., 12047.,  12305.,  8682.,  4583.,
      77.,    262.,   563.,   893.,   1223.,  1553.,   1883.,   1422.,  797.,
      886.,   2068.,  3562.,  4294.,  5026.,  5758.,   6490.,   4740.,  2582.,
      2595.,  5754.,  9501.,  10707., 11913., 13119.,  14325.,  10290., 5523.,
      5372.,  11656., 18884., 20636., 22388., 24140.,  25892.,  18408., 9788.,
      9236.,  19608., 31148., 32900., 34652., 36404.,  38156.,  26808., 14100.,
      13100., 27560., 43412., 45164., 46916., 48668.,  50420.,  35208., 18412.,
      16964., 35512., 55676., 57428., 59180., 60932.,  62684.,  43608., 22724.,
      15753., 32814., 51207., 52629., 54051., 55473.,  56895.,  39414., 20457.,
      12634., 26220., 40774., 41794., 42814., 43834.,  44854.,  30972., 16026.,
      7439.,  15394., 23873., 24419., 24965., 25511.,  26057.,  17946., 9263.,
      149.,   502.,   1067.,  1685.,  2303.,  2921.,   3539.,   2622.,  1445.,
      1702.,  3892.,  6586.,  7894.,  9202.,  10510.,  11818.,  8484.,  4550.,
      4827.,  10506., 17061., 19131., 21201., 23271.,  25341.,  17922., 9483.,
      9692.,  20680., 32996., 35900., 38804., 41708.,  44612.,  31272., 16412.,
      16244., 34008., 53324., 56228., 59132., 62036.,  64940.,  45048., 23412.,
      22796., 47336., 73652., 76556., 79460., 82364.,  85268.,  58824., 30412.,
      29348., 60664., 93980., 96884., 99788., 102692., 105596., 72600., 37412.,
      26049., 53694., 82959., 85245., 87531., 89817.,  92103.,  63174., 32481.,
      20170., 41484., 63958., 65554., 67150., 68746.,  70342.,  48156., 24714.,
      11543., 23698., 36473., 37307., 38141., 38975.,  39809.,  27210., 13943.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      120160.,  167640.,  222608.,  285320.,  310632.,  335944.,  315536.,
      286360.,  248160.,  252600.,  343950.,  447220.,  562730.,  602210.,
      641690.,  592180.,  529150.,  452280.,  458256.,  614340.,  787800.,
      979020.,  1035804., 1092588., 996312.,  880740.,  745488.,  753256.,
      998970.,  1268540., 1562414., 1639638., 1716862., 1552124., 1361290.,
      1143912., 1126216., 1475250., 1852172., 2257430., 2334654., 2411878.,
      2159948., 1877890., 1565256., 1499176., 1951530., 2435804., 2952446.,
      3029670., 3106894., 2767772., 2394490., 1986600., 1872136., 2427810.,
      3019436., 3647462., 3724686., 3801910., 3375596., 2911090., 2407944.,
      2195280., 2826900., 3492408., 4192188., 4267788., 4343388., 3832248.,
      3285300., 2702160., 2348440., 3010950., 3704260., 4428690., 4499530.,
      4570370., 4016260., 3429750., 2810520., 2315488., 2959800., 3630800.,
      4328744., 4391688., 4454632., 3903440., 3324280., 2716896., 1283680.,
      1679640., 2106128., 2563400., 2588712., 2614024., 2337296., 2028760.,
      1688160., 2091768., 2698014., 3336788., 4008410., 4001810., 3987018.,
      3521428., 3021710., 2487544., 2968464., 3772452., 4611992., 5487468.,
      5440828., 5385996., 4730904., 4038340., 3307920., 3866408., 4876010.,
      5925212., 7014462., 6930918., 6839182., 5989916., 5098810., 4165416.,
      3596296., 4499298., 5437740., 6412070., 6271182., 6122102., 5362796.,
      4565810., 3730696., 3096808., 3835866., 4606204., 5408270., 5210038.,
      5003614., 4391612., 3746090., 3066600., 2367944., 2885714., 3430604.,
      4003062., 3747486., 3483718., 3076364., 2639650., 2173128., 1380560.,
      1603572., 1845880., 2107868., 1793324., 1470588., 1326072., 1160340.,
      973008.,  883160.,  1148950., 1433380., 1736770., 1807610., 1878450.,
      1672420., 1446150., 1199320., 1007072., 1299960., 1609808., 1936872.,
      1999816., 2062760., 1824080., 1567160., 1291744., 792416.,  1041240.,
      1310864., 1601544., 1626856., 1652168., 1483664., 1293080., 1080160.,
      1325880., 1727150., 2156980., 2615690., 2655170., 2694650., 2401780.,
      2078750., 1725240., 2025744., 2623620., 3258840., 3931788., 3988572.,
      4045356., 3587160., 3089700., 2552592., 2908136., 3750810., 4640636.,
      5578062., 5655286., 5732510., 5063996., 4346090., 3578344., 3281096.,
      4227090., 5224268., 6273078., 6350302., 6427526., 5671820., 4862690.,
      3999688., 3654056., 4698250., 5789468., 6928158., 6975686., 7015022.,
      6131164., 5189850., 4253096., 3957384., 5009666., 6104812., 7243270.,
      7233454., 7215446., 6249516., 5230290., 4277128., 4022864., 5021012.,
      6056632., 7130108., 7061324., 6984348., 5993016., 4954100., 4044368.,
      3825176., 4700838., 5607556., 6545650., 6414762., 6275682., 5324100.,
      4331670., 3532568., 3348192., 4028984., 4733392., 5461672., 5265544.,
      5061224., 4218576., 3342840., 2725600.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     140.,    394.,    706.,    1018.,   1330.,   1642.,   1644.,
      1118.,   460.,    1720.,   3908.,   5108.,   6308.,   7508.,   8708.,
      7544.,   4684.,   2634.,   7428.,   14574.,  17238.,  19902.,  22566.,
      25230.,  20388.,  12042.,  7896.,   19952.,  36424.,  41128.,  45832.,
      50536.,  55240.,  42864.,  24536.,  17080.,  40112.,  69352.,  74056.,
      78760.,  83464.,  88168.,  66608.,  37304.,  26264.,  60272.,  102280.,
      106984., 111688., 116392., 121096., 90352.,  50072.,  35448.,  80432.,
      135208., 139912., 144616., 149320., 154024., 114096., 62840.,  42642.,
      93396.,  152454., 156846., 161238., 165630., 170022., 122868., 66258.,
      40028.,  86104.,  138356., 141860., 145364., 148868., 152372., 108568.,
      57820.,  26262.,  55868.,  88882.,  90922.,  92962.,  95002.,  97042.,
      68508.,  36182.,  510.,    1868.,   4138.,   6754.,   9370.,   11986.,
      14602.,  11052.,  6206.,   6796.,   15928.,  27524.,  33332.,  39140.,
      44948.,  50756.,  37112.,  20236.,  20202.,  44868.,  74190.,  83766.,
      93342.,  102918., 112494., 80868.,  43434.,  42072.,  91376.,  148168.,
      162088., 176008., 189928., 203848., 145008., 77144.,  72760.,  154544.,
      245608., 259528., 273448., 287368., 301288., 211760., 111416., 103448.,
      217712., 343048., 356968., 370888., 384808., 398728., 278512., 145688.,
      134136., 280880., 440488., 454408., 468328., 482248., 496168., 345264.,
      179960., 124722., 259860., 405606., 416910., 428214., 439518., 450822.,
      312372., 162162., 100124., 207832., 323252., 331364., 339476., 347588.,
      355700., 245656., 127132., 58998.,  122108., 189394., 193738., 198082.,
      202426., 206770., 142428., 73526.,  990.,    3596.,   7882.,   12802.,
      17722.,  22642.,  27562.,  20460.,  11294.,  13132.,  30136.,  51140.,
      61556.,  71972.,  82388.,  92804.,  66680.,  35788.,  37770.,  82308.,
      133806., 150294., 166782., 183270., 199758., 141348., 74826.,  76248.,
      162800., 259912., 283048., 306184., 329320., 352456., 247152., 129752.,
      128440., 268976., 421864., 445000., 468136., 491272., 514408., 356912.,
      185528., 180632., 375152., 583816., 606952., 630088., 653224., 676360.,
      466672., 241304., 232824., 481328., 745768., 768904., 792040., 815176.,
      838312., 576432., 297080., 206802., 426324., 658758., 676974., 695190.,
      713406., 731622., 501876., 258066., 160220., 329560., 508148., 520868.,
      533588., 546308., 559028., 382744., 196444., 91734.,  188348., 289906.,
      296554., 303202., 309850., 316498., 216348., 110870.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3840.,   4096.,   5350.,   5680.,   7096.,   7504.,   9086.,   9576.,
      9870.,   10388.,  10654.,  11200.,  10000.,  10480.,  9070.,   9480.,
      7856.,   8192.,   8030.,   8440.,   10925.,  11450.,  14195.,  14840.,
      17850.,  18620.,  19075.,  19880.,  20300.,  21140.,  18725.,  19460.,
      16725.,  17350.,  14290.,  14800.,  14520.,  15120.,  19455.,  20220.,
      24936.,  25872.,  30975.,  32088.,  32739.,  33894.,  34503.,  35700.,
      31452.,  32496.,  27795.,  28680.,  23520.,  24240.,  23814.,  24640.,
      31570.,  32620.,  40075.,  41356.,  49343.,  50862.,  51744.,  53312.,
      54145.,  55762.,  48937.,  50344.,  42910.,  44100.,  36050.,  37016.,
      35406.,  36484.,  46375.,  47740.,  58219.,  59878.,  70952.,  72912.,
      73353.,  75362.,  75754.,  77812.,  67837.,  69622.,  58975.,  60480.,
      49154.,  50372.,  46998.,  48328.,  61180.,  62860.,  76363.,  78400.,
      92561.,  94962.,  94962.,  97412.,  97363.,  99862.,  86737.,  88900.,
      75040.,  76860.,  62258.,  63728.,  58590.,  60172.,  75985.,  77980.,
      94507.,  96922.,  114170., 117012., 116571., 119462., 118972., 121912.,
      105637., 108178., 91105.,  93240.,  75362.,  77084.,  68712.,  70176.,
      88485.,  90330.,  109320., 111552., 131229., 133854., 133581., 136248.,
      135933., 138642., 119940., 122280., 102825., 104790., 84576.,  86160.,
      73510.,  74820.,  94250.,  95900.,  115955., 117950., 138635., 140980.,
      140840., 143220., 143045., 145460., 125705., 127790., 107350., 109100.,
      87970.,  89380.,  72480.,  73600.,  92650.,  94060.,  113656., 115360.,
      135506., 137508., 137466., 139496., 139426., 141484., 122176., 123952.,
      104050., 105540., 85040.,  86240.,  39840.,  41536.,  52150.,  54280.,
      65416.,  67984.,  79646.,  82656.,  80430.,  83468.,  81214.,  84280.,
      72640.,  75280.,  63070.,  65280.,  52496.,  54272.,  65630.,  67840.,
      85175.,  87950.,  105995., 109340., 128100., 132020., 129325., 133280.,
      130550., 134540., 115925., 119360., 99975.,  102850., 82690.,  85000.,
      98760.,  101520., 127455., 130920., 157776., 161952., 189735., 194628.,
      191499., 196434., 193263., 198240., 170772., 175056., 146595., 150180.,
      120720., 123600., 139734., 143080., 179620., 183820., 221515., 226576.,
      265433., 271362., 267834., 273812., 270235., 276262., 237937., 243124.,
      203560., 207900., 167090., 170576., 151326., 154924., 194425., 198940.,
      239659., 245098., 287042., 293412., 289443., 295862., 291844., 298312.,
      256837., 262402., 219625., 224280., 180194., 183932., 162918., 166768.,
      209230., 214060., 257803., 263620., 308651., 315462., 311052., 317912.,
      313453., 320362., 275737., 281680., 235690., 240660., 193298., 197288.,
      174510., 178612., 224035., 229180., 275947., 282142., 330260., 337512.,
      332661., 339962., 335062., 342412., 294637., 300958., 251755., 257040.,
      206402., 210644., 183192., 186816., 234285., 238830., 287520., 292992.,
      342909., 349314., 345261., 351708., 347613., 354102., 304620., 310200.,
      259425., 264090., 212016., 215760., 181510., 184620., 231500., 235400.,
      283355., 288050., 337085., 342580., 339290., 344820., 341495., 347060.,
      298505., 303290., 253600., 257600., 206770., 209980., 168960., 171520.,
      215050., 218260., 262696., 266560., 311906., 316428., 313866., 318416.,
      315826., 320404., 275536., 279472., 233650., 236940., 190160., 192800.,
      75840.,  78976.,  98950.,  102880., 123736., 128464., 150206., 155736.,
      150990., 156548., 151774., 157360., 135280., 140080., 117070., 121080.,
      97136.,  100352., 123230., 127240., 159425., 164450., 197795., 203840.,
      238350., 245420., 239575., 246680., 240800., 247940., 213125., 219260.,
      183225., 188350., 151090., 155200., 183000., 187920., 235455., 241620.,
      290616., 298032., 348495., 357168., 350259., 358974., 352023., 360780.,
      310092., 317616., 265395., 271680., 217920., 222960., 255654., 261520.,
      327670., 335020., 402955., 411796., 481523., 491862., 483924., 494312.,
      486325., 496762., 426937., 435904., 364210., 371700., 298130., 304136.,
      267246., 273364., 342475., 350140., 421099., 430318., 503132., 513912.,
      505533., 516362., 507934., 518812., 445837., 455182., 380275., 388080.,
      311234., 317492., 278838., 285208., 357280., 365260., 439243., 448840.,
      524741., 535962., 527142., 538412., 529543., 540862., 464737., 474460.,
      396340., 404460., 324338., 330848., 290430., 297052., 372085., 380380.,
      457387., 467362., 546350., 558012., 548751., 560462., 551152., 562912.,
      483637., 493738., 412405., 420840., 337442., 344204., 297672., 303456.,
      380085., 387330., 465720., 474432., 554589., 564774., 556941., 567168.,
      559293., 569562., 489300., 498120., 416025., 423390., 339456., 345360.,
      289510., 294420., 368750., 374900., 450755., 458150., 535535., 544180.,
      537740., 546420., 539945., 548660., 471305., 478790., 399850., 406100.,
      325570., 330580., 265440., 269440., 337450., 342460., 411736., 417760.,
      488306., 495348., 490266., 497336., 492226., 499324., 428896., 434992.,
      363250., 368340., 295280., 299360.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     14.,    20.,    26.,    32.,    38.,
      44.,    50.,    56.,    62.,    68.,    59.,    64.,    39.,    42.,
      19.,    24.,    64.,    76.,    139.,   160.,   181.,   202.,   223.,
      244.,   265.,   286.,   307.,   328.,   260.,   276.,   159.,   168.,
      96.,    108.,   261.,   288.,   501.,   546.,   591.,   636.,   681.,
      726.,   771.,   816.,   861.,   906.,   687.,   720.,   402.,   420.,
      274.,   296.,   680.,   728.,   1226.,  1304.,  1382.,  1460.,  1538.,
      1616.,  1694.,  1772.,  1850.,  1928.,  1424.,  1480.,  810.,   840.,
      582.,   604.,   1352.,  1400.,  2318.,  2396.,  2474.,  2552.,  2630.,
      2708.,  2786.,  2864.,  2942.,  3020.,  2208.,  2264.,  1230.,  1260.,
      890.,   912.,   2024.,  2072.,  3410.,  3488.,  3566.,  3644.,  3722.,
      3800.,  3878.,  3956.,  4034.,  4112.,  2992.,  3048.,  1650.,  1680.,
      1198.,  1220.,  2696.,  2744.,  4502.,  4580.,  4658.,  4736.,  4814.,
      4892.,  4970.,  5048.,  5126.,  5204.,  3776.,  3832.,  2070.,  2100.,
      1407.,  1428.,  3069.,  3114.,  4992.,  5064.,  5136.,  5208.,  5280.,
      5352.,  5424.,  5496.,  5568.,  5640.,  4011.,  4062.,  2157.,  2184.,
      1305.,  1322.,  2800.,  2836.,  4489.,  4546.,  4603.,  4660.,  4717.,
      4774.,  4831.,  4888.,  4945.,  5002.,  3516.,  3556.,  1869.,  1890.,
      850.,   860.,   1805.,  1826.,  2867.,  2900.,  2933.,  2966.,  2999.,
      3032.,  3065.,  3098.,  3131.,  3164.,  2207.,  2230.,  1164.,  1176.,
      13.,    26.,    53.,    80.,    122.,   164.,   206.,   248.,   290.,
      332.,   374.,   416.,   458.,   500.,   347.,   376.,   195.,   210.,
      211.,   240.,   496.,   556.,   859.,   952.,   1045.,  1138.,  1231.,
      1324.,  1417.,  1510.,  1603.,  1696.,  1172.,  1236.,  639.,   672.,
      636.,   684.,   1413.,  1512.,  2337.,  2490.,  2643.,  2796.,  2949.,
      3102.,  3255.,  3408.,  3561.,  3714.,  2559.,  2664.,  1374.,  1428.,
      1330.,  1400.,  2888.,  3032.,  4682.,  4904.,  5126.,  5348.,  5570.,
      5792.,  6014.,  6236.,  6458.,  6680.,  4592.,  4744.,  2442.,  2520.,
      2310.,  2380.,  4904.,  5048.,  7790.,  8012.,  8234.,  8456.,  8678.,
      8900.,  9122.,  9344.,  9566.,  9788.,  6720.,  6872.,  3534.,  3612.,
      3290.,  3360.,  6920.,  7064.,  10898., 11120., 11342., 11564., 11786.,
      12008., 12230., 12452., 12674., 12896., 8848.,  9000.,  4626.,  4704.,
      4270.,  4340.,  8936.,  9080.,  14006., 14228., 14450., 14672., 14894.,
      15116., 15338., 15560., 15782., 16004., 10976., 11128., 5718.,  5796.,
      3963.,  4020.,  8253.,  8370.,  12876., 13056., 13236., 13416., 13596.,
      13776., 13956., 14136., 14316., 14496., 9915.,  10038., 5145.,  5208.,
      3177.,  3218.,  6592.,  6676.,  10249., 10378., 10507., 10636., 10765.,
      10894., 11023., 11152., 11281., 11410., 7788.,  7876.,  4029.,  4074.,
      1870.,  1892.,  3869.,  3914.,  5999.,  6068.,  6137.,  6206.,  6275.,
      6344.,  6413.,  6482.,  6551.,  6620.,  4511.,  4558.,  2328.,  2352.,
      25.,    50.,    101.,   152.,   230.,   308.,   386.,   464.,   542.,
      620.,   698.,   776.,   854.,   932.,   635.,   688.,   351.,   378.,
      403.,   456.,   928.,   1036.,  1579.,  1744.,  1909.,  2074.,  2239.,
      2404.,  2569.,  2734.,  2899.,  3064.,  2084.,  2196.,  1119.,  1176.,
      1176.,  1260.,  2565.,  2736.,  4173.,  4434.,  4695.,  4956.,  5217.,
      5478.,  5739.,  6000.,  6261.,  6522.,  4431.,  4608.,  2346.,  2436.,
      2386.,  2504.,  5096.,  5336.,  8138.,  8504.,  8870.,  9236.,  9602.,
      9968.,  10334., 10700., 11066., 11432., 7760.,  8008.,  4074.,  4200.,
      4038.,  4156.,  8456.,  8696.,  13262., 13628., 13994., 14360., 14726.,
      15092., 15458., 15824., 16190., 16556., 11232., 11480., 5838.,  5964.,
      5690.,  5808.,  11816., 12056., 18386., 18752., 19118., 19484., 19850.,
      20216., 20582., 20948., 21314., 21680., 14704., 14952., 7602.,  7728.,
      7342.,  7460.,  15176., 15416., 23510., 23876., 24242., 24608., 24974.,
      25340., 25706., 26072., 26438., 26804., 18176., 18424., 9366.,  9492.,
      6519.,  6612.,  13437., 13626., 20760., 21048., 21336., 21624., 21912.,
      22200., 22488., 22776., 23064., 23352., 15819., 16014., 8133.,  8232.,
      5049.,  5114.,  10384., 10516., 16009., 16210., 16411., 16612., 16813.,
      17014., 17215., 17416., 17617., 17818., 12060., 12196., 6189.,  6258.,
      2890.,  2924.,  5933.,  6002.,  9131.,  9236.,  9341.,  9446.,  9551.,
      9656.,  9761.,  9866.,  9971.,  10076., 6815.,  6886.,  3492.,  3528.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      29424.,   31440.,   41120.,   43720.,   54680.,   57896.,   70168.,
      74032.,   76384.,   80472.,   82600.,   86912.,   77672.,   81464.,
      70560.,   73800.,   61200.,   63856.,   62160.,   65400.,   84725.,
      88875.,   110260.,  115360.,  138845.,  144935.,  148575.,  154945.,
      158305.,  164955.,  146200.,  152020.,  130725.,  135675.,  111800.,
      115840.,  113112.,  117864.,  151740.,  157800.,  194700.,  202116.,
      242088.,  250908.,  256116.,  265272.,  270144.,  279636.,  246468.,
      254748.,  217980.,  225000.,  184584.,  190296.,  186312.,  192864.,
      247205.,  255535.,  314048.,  324212.,  386953.,  399007.,  406063.,
      418509.,  425173.,  438011.,  384524.,  395696.,  337365.,  346815.,
      283584.,  291256.,  278544.,  287112.,  365015.,  375865.,  458444.,
      471632.,  558943.,  574525.,  578053.,  594027.,  597163.,  613529.,
      534968.,  549164.,  465255.,  477225.,  387912.,  397600.,  370776.,
      381360.,  482825.,  496195.,  602840.,  619052.,  730933.,  750043.,
      750043.,  769545.,  769153.,  789047.,  685412.,  702632.,  593145.,
      607635.,  492240.,  503944.,  463008.,  475608.,  600635.,  616525.,
      747236.,  766472.,  902923.,  925561.,  922033.,  945063.,  941143.,
      964565.,  835856.,  856100.,  721035.,  738045.,  596568.,  610288.,
      544248.,  555912.,  700980.,  715680.,  866172.,  883956.,  1039920.,
      1060836., 1058652., 1079904., 1077384., 1098972., 950772.,  969420.,
      815220.,  830880.,  670632.,  683256.,  583080.,  593520.,  747675.,
      760825.,  919960.,  935860.,  1100015., 1118705., 1117585., 1136555.,
      1135155., 1154405., 997660.,  1014280., 852075.,  866025.,  698320.,
      709560.,  575472.,  584400.,  735680.,  746920.,  902552.,  916136.,
      1076152., 1092112., 1091776., 1107960., 1107400., 1123808., 970472.,
      984632.,  826560.,  838440.,  675600.,  685168.,  314544.,  328080.,
      411920.,  428920.,  516920.,  537416.,  629608.,  653632.,  635824.,
      660072.,  642040.,  666512.,  574472.,  595544.,  498960.,  516600.,
      415440.,  429616.,  519360.,  537000.,  674225.,  696375.,  839260.,
      865960.,  1014545., 1045835., 1024275., 1055845., 1034005., 1065855.,
      918400.,  945820.,  792225.,  815175.,  655400.,  673840.,  782712.,
      804744.,  1010340., 1038000., 1250940., 1284276., 1504608., 1543668.,
      1518636., 1558032., 1532664., 1572396., 1354548., 1388748., 1162980.,
      1191600., 957864.,  980856.,  1108632., 1135344., 1425305., 1458835.,
      1758008., 1798412., 2106853., 2154187., 2125963., 2173689., 2145073.,
      2193191., 1888964., 1930376., 1616265., 1650915., 1326864., 1354696.,
      1200864., 1229592., 1543115., 1579165., 1902404., 1945832., 2278843.,
      2329705., 2297953., 2349207., 2317063., 2368709., 2039408., 2083844.,
      1744155., 1781325., 1431192., 1461040., 1293096., 1323840., 1660925.,
      1699495., 2046800., 2093252., 2450833., 2505223., 2469943., 2524725.,
      2489053., 2544227., 2189852., 2237312., 1872045., 1911735., 1535520.,
      1567384., 1385328., 1418088., 1778735., 1819825., 2191196., 2240672.,
      2622823., 2680741., 2641933., 2700243., 2661043., 2719745., 2340296.,
      2390780., 1999935., 2042145., 1639848., 1673728., 1455768., 1484712.,
      1861980., 1898280., 2285292., 2328996., 2725800., 2776956., 2744532.,
      2796024., 2763264., 2815092., 2421732., 2466300., 2062620., 2099880.,
      1685832., 1715736., 1443480., 1468320., 1841175., 1872325., 2253760.,
      2291260., 2681315., 2725205., 2698885., 2743055., 2716455., 2760905.,
      2374660., 2412880., 2017575., 2049525., 1645120., 1670760., 1344432.,
      1364880., 1711280., 1736920., 2090552., 2121416., 2482312., 2518432.,
      2497936., 2534280., 2513560., 2550128., 2193032., 2224472., 1859760.,
      1886040., 1513680., 1534768., 599664.,  624720.,  782720.,  814120.,
      979160.,  1016936., 1189048., 1233232., 1195264., 1239672., 1201480.,
      1246112., 1071272., 1109624., 927360.,  959400.,  769680.,  795376.,
      976560.,  1008600., 1263725., 1303875., 1568260., 1616560., 1890245.,
      1946735., 1899975., 1956745., 1909705., 1966755., 1690600., 1739620.,
      1453725., 1494675., 1199000., 1231840., 1452312., 1491624., 1868940.,
      1918200., 2307180., 2366436., 2767128., 2836428., 2781156., 2850792.,
      2795184., 2865156., 2462628., 2522748., 2107980., 2158200., 1731144.,
      1771416., 2030952., 2077824., 2603405., 2662135., 3201968., 3272612.,
      3826753., 3909367., 3845863., 3928869., 3864973., 3948371., 3393404.,
      3465056., 2895165., 2955015., 2370144., 2418136., 2123184., 2172072.,
      2721215., 2782465., 3346364., 3420032., 3998743., 4084885., 4017853.,
      4104387., 4036963., 4123889., 3543848., 3618524., 3023055., 3085425.,
      2474472., 2524480., 2215416., 2266320., 2839025., 2902795., 3490760.,
      3567452., 4170733., 4260403., 4189843., 4279905., 4208953., 4299407.,
      3694292., 3771992., 3150945., 3215835., 2578800., 2630824., 2307648.,
      2360568., 2956835., 3023125., 3635156., 3714872., 4342723., 4435921.,
      4361833., 4455423., 4380943., 4474925., 3844736., 3925460., 3278835.,
      3346245., 2683128., 2737168., 2367288., 2413512., 3022980., 3080880.,
      3704412., 3774036., 4411680., 4493076., 4430412., 4512144., 4449144.,
      4531212., 3892692., 3963180., 3310020., 3368880., 2701032., 2748216.,
      2303880., 2343120., 2934675., 2983825., 3587560., 3646660., 4262615.,
      4331705., 4280185., 4349555., 4297755., 4367405., 3751660., 3811480.,
      3183075., 3233025., 2591920., 2631960., 2113392., 2145360., 2686880.,
      2726920., 3278552., 3326696., 3888472., 3944752., 3904096., 3960600.,
      3919720., 3976448., 3415592., 3464312., 2892960., 2933640., 2351760.,
      2384368.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     28.,     48.,     85.,     127.,    169.,    211.,
      253.,    295.,    337.,    379.,    421.,    463.,    416.,    452.,
      281.,    303.,    112.,    148.,    420.,    508.,    956.,    1112.,
      1268.,   1424.,   1580.,   1736.,   1892.,   2048.,   2204.,   2360.,
      1900.,   2020.,   1176.,   1244.,   657.,    747.,    1848.,   2052.,
      3621.,   3963.,   4305.,   4647.,   4989.,   5331.,   5673.,   6015.,
      6357.,   6699.,   5124.,   5376.,   3021.,   3159.,   1976.,   2144.,
      4984.,   5352.,   9088.,   9688.,   10288.,  10888.,  11488.,  12088.,
      12688.,  13288.,  13888.,  14488.,  10760.,  11192.,  6152.,   6384.,
      4328.,   4496.,   10136.,  10504.,  17488.,  18088.,  18688.,  19288.,
      19888.,  20488.,  21088.,  21688.,  22288.,  22888.,  16808.,  17240.,
      9400.,   9632.,   6680.,   6848.,   15288.,  15656.,  25888.,  26488.,
      27088.,  27688.,  28288.,  28888.,  29488.,  30088.,  30688.,  31288.,
      22856.,  23288.,  12648.,  12880.,  9032.,   9200.,   20440.,  20808.,
      34288.,  34888.,  35488.,  36088.,  36688.,  37288.,  37888.,  38488.,
      39088.,  39688.,  28904.,  29336.,  15896.,  16128.,  10791.,  10953.,
      23604.,  23952.,  38487.,  39045.,  39603.,  40161.,  40719.,  41277.,
      41835.,  42393.,  42951.,  43509.,  31008.,  31404.,  16707.,  16917.,
      10096.,  10228.,  21700.,  21980.,  34844.,  35288.,  35732.,  36176.,
      36620.,  37064.,  37508.,  37952.,  38396.,  38840.,  27340.,  27652.,
      14552.,  14716.,  6611.,   6689.,   14056.,  14220.,  22351.,  22609.,
      22867.,  23125.,  23383.,  23641.,  23899.,  24157.,  24415.,  24673.,
      17228.,  17408.,  9095.,   9189.,   77.,     179.,    364.,    576.,
      877.,    1207.,   1537.,   1867.,   2197.,   2527.,   2857.,   3187.,
      3517.,   3847.,   2672.,   2900.,   1505.,   1623.,   1600.,   1828.,
      3780.,   4252.,   6572.,   7304.,   8036.,   8768.,   9500.,   10232.,
      10964.,  11696.,  12428.,  13160.,  9100.,   9604.,   4968.,   5228.,
      4905.,   5283.,   10920.,  11700.,  18093.,  19299.,  20505.,  21711.,
      22917.,  24123.,  25329.,  26535.,  27741.,  28947.,  19956.,  20784.,
      10725.,  11151.,  10328.,  10880.,  22456.,  23592.,  36448.,  38200.,
      39952.,  41704.,  43456.,  45208.,  46960.,  48712.,  50464.,  52216.,
      35912.,  37112.,  19112.,  19728.,  18056.,  18608.,  38360.,  39496.,
      60976.,  62728.,  64480.,  66232.,  67984.,  69736.,  71488.,  73240.,
      74992.,  76744.,  52712.,  53912.,  27736.,  28352.,  25784.,  26336.,
      54264.,  55400.,  85504.,  87256.,  89008.,  90760.,  92512.,  94264.,
      96016.,  97768.,  99520.,  101272., 69512.,  70712.,  36360.,  36976.,
      33512.,  34064.,  70168.,  71304.,  110032., 111784., 113536., 115288.,
      117040., 118792., 120544., 122296., 124048., 125800., 86312.,  87512.,
      44984.,  45600.,  31167.,  31617.,  64932.,  65856.,  101343., 102765.,
      104187., 105609., 107031., 108453., 109875., 111297., 112719., 114141.,
      78096.,  79068.,  40539.,  41037.,  25024.,  25348.,  51940.,  52604.,
      80780.,  81800.,  82820.,  83840.,  84860.,  85880.,  86900.,  87920.,
      88940.,  89960.,  61420.,  62116.,  31784.,  32140.,  14747.,  14921.,
      30520.,  30876.,  47335.,  47881.,  48427.,  48973.,  49519.,  50065.,
      50611.,  51157.,  51703.,  52249.,  35612.,  35984.,  18383.,  18573.,
      149.,    347.,    700.,    1104.,   1669.,   2287.,   2905.,   3523.,
      4141.,   4759.,   5377.,   5995.,   6613.,   7231.,   4928.,   5348.,
      2729.,   2943.,   3088.,   3508.,   7140.,   7996.,   12188.,  13496.,
      14804.,  16112.,  17420.,  18728.,  20036.,  21344.,  22652.,  23960.,
      16300.,  17188.,  8760.,   9212.,   9153.,   9819.,   19992.,  21348.,
      32565.,  34635.,  36705.,  38775.,  40845.,  42915.,  44985.,  47055.,
      49125.,  51195.,  34788.,  36192.,  18429.,  19143.,  18680.,  19616.,
      39928.,  41832.,  63808.,  66712.,  69616.,  72520.,  75424.,  78328.,
      81232.,  84136.,  87040.,  89944.,  61064.,  63032.,  32072.,  33072.,
      31784.,  32720.,  66584.,  68488.,  104464., 107368., 110272., 113176.,
      116080., 118984., 121888., 124792., 127696., 130600., 88616.,  90584.,
      46072.,  47072.,  44888.,  45824.,  93240.,  95144.,  145120., 148024.,
      150928., 153832., 156736., 159640., 162544., 165448., 168352., 171256.,
      116168., 118136., 60072.,  61072.,  57992.,  58928.,  119896., 121800.,
      185776., 188680., 191584., 194488., 197392., 200296., 203200., 206104.,
      209008., 211912., 143720., 145688., 74072.,  75072.,  51543.,  52281.,
      106260., 107760., 164199., 166485., 168771., 171057., 173343., 175629.,
      177915., 180201., 182487., 184773., 125184., 126732., 64371.,  65157.,
      39952.,  40468.,  82180.,  83228.,  126716., 128312., 129908., 131504.,
      133100., 134696., 136292., 137888., 139484., 141080., 95500.,  96580.,
      49016.,  49564.,  22883.,  23153.,  46984.,  47532.,  72319.,  73153.,
      73987.,  74821.,  75655.,  76489.,  77323.,  78157.,  78991.,  79825.,
      53996.,  54560.,  27671.,  27957.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      230240.,   246240.,   322280.,   342920.,   429136.,   454672.,
      551320.,   582008.,   600824.,   633304.,   650328.,   684600.,
      612112.,   642256.,   556520.,   582280.,   483040.,   504160.,
      489000.,   514760.,   667150.,   700150.,   868940.,   909500.,
      1095010.,  1143450.,  1172570.,  1223250.,  1250130.,  1303050.,
      1155260.,  1201580.,  1033550.,  1072950.,  884360.,   916520.,
      892752.,   930576.,   1198380.,  1246620.,  1538520.,  1597560.,
      1913940.,  1984164.,  2025828.,  2098740.,  2137716.,  2213316.,
      1951224.,  2017176.,  1726380.,  1782300.,  1462416.,  1507920.,
      1473752.,  1525944.,  1956290.,  2022650.,  2486260.,  2567236.,
      3064558.,  3160598.,  3217046.,  3316222.,  3369534.,  3471846.,
      3048388.,  3137428.,  2675330.,  2750650.,  2249464.,  2310616.,
      2209592.,  2277912.,  2896250.,  2982770.,  3638404.,  3743572.,
      4436950.,  4561214.,  4589438.,  4716838.,  4741926.,  4872462.,
      4248916.,  4362148.,  3695930.,  3791410.,  3082072.,  3159352.,
      2945432.,  3029880.,  3836210.,  3942890.,  4790548.,  4919908.,
      5809342.,  5961830.,  5961830.,  6117454.,  6114318.,  6273078.,
      5449444.,  5586868.,  4716530.,  4832170.,  3914680.,  4008088.,
      3681272.,  3781848.,  4776170.,  4903010.,  5942692.,  6096244.,
      7181734.,  7362446.,  7334222.,  7518070.,  7486710.,  7673694.,
      6649972.,  6811588.,  5737130.,  5872930.,  4747288.,  4856824.,
      4332240.,  4425360.,  5580300.,  5697660.,  6895896.,  7037880.,
      8279796.,  8446788.,  8429316.,  8598996.,  8578836.,  8751204.,
      7571256.,  7720152.,  6492300.,  6617340.,  5341200.,  5442000.,
      4644680.,  4728040.,  5956150.,  6061150.,  7329020.,  7455980.,
      8763930.,  8913170.,  8904210.,  9055690.,  9044490.,  9198210.,
      7949420.,  8082140.,  6789750.,  6901150.,  5564840.,  5654600.,
      4586336.,  4657632.,  5863400.,  5953160.,  7193680.,  7302160.,
      8577688.,  8705144.,  8702456.,  8831704.,  8827224.,  8958264.,
      7736080.,  7849168.,  6589160.,  6684040.,  5385952.,  5462368.,
      2499680.,  2607840.,  3274280.,  3410120.,  4109776.,  4273552.,
      5006680.,  5198648.,  5056184.,  5249944.,  5105688.,  5301240.,
      4569232.,  4737616.,  3969320.,  4110280.,  3305440.,  3418720.,
      4105576.,  4230152.,  5300638.,  5453062.,  6560556.,  6741148.,
      7885970.,  8095050.,  7876490.,  8079618.,  7850626.,  8047802.,
      6936476.,  7106444.,  5954270.,  6096710.,  4903368.,  5017960.,
      5857488.,  5984400.,  7447564.,  7603068.,  9108504.,  9292984.,
      10841076., 11054916., 10751236., 10959572., 10645012., 10847844.,
      9352248.,  9527256.,  7984780.,  8131580.,  6541840.,  6660048.,
      7650456.,  7782008.,  9650930.,  9812394.,  11730324., 11922148.,
      13889534., 14112166., 13725606., 13943182., 13545294., 13757814.,
      11864932., 12048436., 10101170., 10255210., 8253112.,  8377240.,
      7120632.,  7235544.,  8910506.,  9051170.,  10770980., 10937844.,
      12702950., 12896462., 12424334., 12612790., 12129334., 12312734.,
      10626292., 10784836., 9048170.,  9181410.,  7394072.,  7501560.,
      6132056.,  6230328.,  7596642.,  7716506.,  9123508.,  9265412.,
      10713550., 10877942., 10320246., 10479582., 9910558.,  10064838.,
      8699524.,  8833108.,  7421730.,  7534170.,  6076280.,  6167128.,
      4684728.,  4766360.,  5709338.,  5808402.,  6787908.,  6904852.,
      7921334.,  8056606.,  7413342.,  7543558.,  6888966.,  7014126.,
      6084628.,  6193252.,  5221850.,  5313490.,  4299736.,  4373944.,
      2729040.,  2780176.,  3169004.,  3229788.,  3647320.,  3718136.,
      4164756.,  4245988.,  3539108.,  3614836.,  2897076.,  2967300.,
      2613624.,  2674968.,  2287980.,  2340060.,  1919376.,  1961808.,
      1744520.,  1779240.,  2270150.,  2314350.,  2832860.,  2886860.,
      3433290.,  3497410.,  3573570.,  3639930.,  3713850.,  3782450.,
      3307340.,  3367100.,  2860550.,  2911150.,  2372840.,  2413960.,
      1993824.,  2026208.,  2574120.,  2615240.,  3188176.,  3238288.,
      3836504.,  3895864.,  3961272.,  4022424.,  4086040.,  4148984.,
      3613840.,  3668560.,  3105320.,  3151560.,  2559968.,  2597472.,
      1541472.,  1610720.,  2027880.,  2115080.,  2555728.,  2661136.,
      3125528.,  3249400.,  3175032.,  3300696.,  3224536.,  3351992.,
      2898448.,  3008464.,  2528360.,  2620680.,  2113760.,  2188128.,
      2593960.,  2686280.,  3381550.,  3497750.,  4226060.,  4366460.,
      5128130.,  5293050.,  5205690.,  5372850.,  5283250.,  5452650.,
      4712060.,  4858220.,  4080750.,  4203350.,  3388680.,  3487400.,
      3977808.,  4095504.,  5154540.,  5302620.,  6405720.,  6584568.,
      7732116.,  7942116.,  7844004.,  8056692.,  7955892.,  8171268.,
      7058040.,  7243800.,  6081900.,  6237660.,  5026704.,  5152080.,
      5725272.,  5870648.,  7387170.,  7570010.,  9143092.,  9363844.,
      10993934., 11253046., 11146422., 11408670., 11298910., 11564294.,
      9984772.,  10213588., 8572130.,  8763930.,  7060088.,  7214424.,
      6461112.,  6622616.,  8327130.,  8530130.,  10295236., 10540180.,
      12366326., 12653662., 12518814., 12809286., 12671302., 12964910.,
      11185300., 11438308., 9592730.,  9804690.,  7892696.,  8063160.,
      7196952.,  7374584.,  9261970.,  9476938.,  11420756., 11673508.,
      13674206., 13965190., 13772422., 14058350., 13854254., 14135126.,
      12114468., 12350708., 10260050., 10451210., 8409912.,  8563736.,
      7814008.,  7975000.,  9897802.,  10091970., 12067044., 12294836.,
      14322630., 14584494., 14306158., 14562966., 14273302., 14525054.,
      12366772., 12578052., 10353930., 10524290., 8468376.,  8605560.,
      7957968.,  8098192.,  9936844.,  10104892., 11990424., 12186680.,
      14119476., 14344324., 13985348., 14204692., 13834836., 14048676.,
      11874232., 12052824., 9818700.,  9961660.,  8016656.,  8131792.,
      7577032.,  7694184.,  9314646.,  9453694.,  11114172., 11275436.,
      12976250., 13160050., 12718194., 12896042., 12443754., 12615650.,
      10559020., 10701468., 8592790.,  8705470.,  7008296.,  7099080.,
      6638944.,  6730720.,  7990888.,  8098056.,  9389904.,  9512720.,
      10836504., 10975224., 10448248., 10580568., 10043608., 10169528.,
      8372752.,  8475600.,  6635880.,  6715400.,  5411040.,  5475168.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      180.,     324.,     578.,     890.,     1202.,
      1514.,    1826.,    2138.,    2450.,    2762.,    3074.,    3386.,
      3108.,    3380.,    2126.,    2294.,    740.,     1012.,    3000.,
      3672.,    7036.,    8236.,    9436.,    10636.,   11836.,   13036.,
      14236.,   15436.,   16636.,   17836.,   14488.,   15416.,   9028.,
      9556.,    4818.,    5514.,    13836.,   15420.,   27438.,   30102.,
      32766.,   35430.,   38094.,   40758.,   43422.,   46086.,   48750.,
      51414.,   39516.,   41484.,   23394.,   24474.,   14952.,   16264.,
      38064.,   40944.,   69848.,   74552.,   79256.,   83960.,   88664.,
      93368.,   98072.,   102776.,  107480.,  112184.,  83568.,   86960.,
      47912.,   49736.,   33320.,   34632.,   78384.,   81264.,   135704.,
      140408.,  145112.,  149816.,  154520.,  159224.,  163928.,  168632.,
      173336.,  178040.,  131056.,  134448.,  73448.,   75272.,   51688.,
      53000.,   118704.,  121584.,  201560.,  206264.,  210968.,  215672.,
      220376.,  225080.,  229784.,  234488.,  239192.,  243896.,  178544.,
      181936.,  98984.,   100808.,  70056.,   71368.,   159024.,  161904.,
      267416.,  272120.,  276824.,  281528.,  286232.,  290936.,  295640.,
      300344.,  305048.,  309752.,  226032.,  229424.,  124520.,  126344.,
      84474.,   85746.,   185052.,  187788.,  302118.,  306510.,  310902.,
      315294.,  319686.,  324078.,  328470.,  332862.,  337254.,  341646.,
      243756.,  246876.,  131466.,  133122.,  79396.,   80436.,   170808.,
      173016.,  274492.,  277996.,  281500.,  285004.,  288508.,  292012.,
      295516.,  299020.,  302524.,  306028.,  215576.,  218040.,  114820.,
      116116.,  52134.,   52750.,   110916.,  112212.,  176474.,  178514.,
      180554.,  182594.,  184634.,  186674.,  188714.,  190754.,  192794.,
      194834.,  136116.,  137540.,  71894.,   72638.,   510.,     1318.,
      2676.,    4356.,    6626.,    9242.,    11858.,   14474.,   17090.,
      19706.,   22322.,   24938.,   27554.,   30170.,   20964.,   22772.,
      11822.,   12758.,   12452.,   14260.,   29496.,   33240.,   51388.,
      57196.,   63004.,   68812.,   74620.,   80428.,   86236.,   92044.,
      97852.,   103660.,  71704.,   75704.,   39172.,   41236.,   38514.,
      41514.,   85836.,   92028.,   142350.,  151926.,  161502.,  171078.,
      180654.,  190230.,  199806.,  209382.,  218958.,  228534.,  157596.,
      164172.,  84738.,   88122.,   81384.,   85768.,   177072.,  186096.,
      287576.,  301496.,  315416.,  329336.,  343256.,  357176.,  371096.,
      385016.,  398936.,  412856.,  284016.,  293552.,  151208.,  156104.,
      142760.,  147144.,  303408.,  312432.,  482456.,  496376.,  510296.,
      524216.,  538136.,  552056.,  565976.,  579896.,  593816.,  607736.,
      417520.,  427056.,  219752.,  224648.,  204136.,  208520.,  429744.,
      438768.,  677336.,  691256.,  705176.,  719096.,  733016.,  746936.,
      760856.,  774776.,  788696.,  802616.,  551024.,  560560.,  288296.,
      293192.,  265512.,  269896.,  556080.,  565104.,  872216.,  886136.,
      900056.,  913976.,  927896.,  941816.,  955736.,  969656.,  983576.,
      997496.,  684528.,  694064.,  356840.,  361736.,  247194.,  250770.,
      515100.,  522444.,  804102.,  815406.,  826710.,  838014.,  849318.,
      860622.,  871926.,  883230.,  894534.,  905838.,  619884.,  627612.,
      321834.,  325794.,  198628.,  201204.,  412344.,  417624.,  641404.,
      649516.,  657628.,  665740.,  673852.,  681964.,  690076.,  698188.,
      706300.,  714412.,  487832.,  493368.,  252484.,  255316.,  117126.,
      118510.,  242436.,  245268.,  376058.,  380402.,  384746.,  389090.,
      393434.,  397778.,  402122.,  406466.,  410810.,  415154.,  282996.,
      285956.,  146102.,  147614.,  990.,     2566.,    5172.,    8388.,
      12674.,   17594.,   22514.,   27434.,   32354.,   37274.,   42194.,
      47114.,   52034.,   56954.,   38820.,   42164.,   21518.,   23222.,
      24164.,   27508.,   55992.,   62808.,   95740.,   106156.,  116572.,
      126988.,  137404.,  147820.,  158236.,  168652.,  179068.,  189484.,
      128920.,  135992.,  69316.,   72916.,   72210.,   77514.,   157836.,
      168636.,  257262.,  273750.,  290238.,  306726.,  323214.,  339702.,
      356190.,  372678.,  389166.,  405654.,  275676.,  286860.,  146082.,
      151770.,  147816.,  155272.,  316080.,  331248.,  505304.,  528440.,
      551576.,  574712.,  597848.,  620984.,  644120.,  667256.,  690392.,
      713528.,  484464.,  500144.,  254504.,  262472.,  252200.,  259656.,
      528432.,  543600.,  829208.,  852344.,  875480.,  898616.,  921752.,
      944888.,  968024.,  991160.,  1014296., 1037432., 703984.,  719664.,
      366056.,  374024.,  356584.,  364040.,  740784.,  755952.,  1153112.,
      1176248., 1199384., 1222520., 1245656., 1268792., 1291928., 1315064.,
      1338200., 1361336., 923504.,  939184.,  477608.,  485576.,  460968.,
      468424.,  953136.,  968304.,  1477016., 1500152., 1523288., 1546424.,
      1569560., 1592696., 1615832., 1638968., 1662104., 1685240., 1143024.,
      1158704., 589160.,  597128.,  409914.,  415794.,  845148.,  857100.,
      1306086., 1324302., 1342518., 1360734., 1378950., 1397166., 1415382.,
      1433598., 1451814., 1470030., 996012.,  1008348., 512202.,  518466.,
      317860.,  321972.,  653880.,  662232.,  1008316., 1021036., 1033756.,
      1046476., 1059196., 1071916., 1084636., 1097356., 1110076., 1122796.,
      760088.,  768696.,  390148.,  394516.,  182118.,  184270.,  373956.,
      378324.,  575642.,  582290.,  588938.,  595586.,  602234.,  608882.,
      615530.,  622178.,  628826.,  635474.,  429876.,  434372.,  220310.,
      222590.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7424.,    7680.,    7936.,    8192.,    10370.,   10700.,   11030.,
      11360.,   13784.,   14192.,   14600.,   15008.,   17682.,   18172.,
      18662.,   19152.,   19222.,   19740.,   20258.,   20776.,   20762.,
      21308.,   21854.,   22400.,   19520.,   20000.,   20480.,   20960.,
      17730.,   18140.,   18550.,   18960.,   15376.,   15712.,   16048.,
      16384.,   15650.,   16060.,   16470.,   16880.,   21325.,   21850.,
      22375.,   22900.,   27745.,   28390.,   29035.,   29680.,   34930.,
      35700.,   36470.,   37240.,   37345.,   38150.,   38955.,   39760.,
      39760.,   40600.,   41440.,   42280.,   36715.,   37450.,   38185.,
      38920.,   32825.,   33450.,   34075.,   34700.,   28070.,   28580.,
      29090.,   29600.,   28440.,   29040.,   29640.,   30240.,   38145.,
      38910.,   39675.,   40440.,   48936.,   49872.,   50808.,   51744.,
      60837.,   61950.,   63063.,   64176.,   64323.,   65478.,   66633.,
      67788.,   67809.,   69006.,   70203.,   71400.,   61860.,   62904.,
      63948.,   64992.,   54705.,   55590.,   56475.,   57360.,   46320.,
      47040.,   47760.,   48480.,   46802.,   47628.,   48454.,   49280.,
      62090.,   63140.,   64190.,   65240.,   78869.,   80150.,   81431.,
      82712.,   97167.,   98686.,   100205.,  101724.,  101920.,  103488.,
      105056.,  106624.,  106673.,  108290.,  109907.,  111524.,  96467.,
      97874.,   99281.,   100688.,  84630.,   85820.,   87010.,   88200.,
      71134.,   72100.,   73066.,   74032.,   69734.,   70812.,   71890.,
      72968.,   91385.,   92750.,   94115.,   95480.,   114779.,  116438.,
      118097.,  119756.,  139944.,  141904.,  143864.,  145824.,  144697.,
      146706.,  148715.,  150724.,  149450.,  151508.,  153566.,  155624.,
      133889.,  135674.,  137459.,  139244.,  116445.,  117950.,  119455.,
      120960.,  97090.,   98308.,   99526.,   100744.,  92666.,   93996.,
      95326.,   96656.,   120680.,  122360.,  124040.,  125720.,  150689.,
      152726.,  154763.,  156800.,  182721.,  185122.,  187523.,  189924.,
      187474.,  189924.,  192374.,  194824.,  192227.,  194726.,  197225.,
      199724.,  171311.,  173474.,  175637.,  177800.,  148260.,  150080.,
      151900.,  153720.,  123046.,  124516.,  125986.,  127456.,  115598.,
      117180.,  118762.,  120344.,  149975.,  151970.,  153965.,  155960.,
      186599.,  189014.,  191429.,  193844.,  225498.,  228340.,  231182.,
      234024.,  230251.,  233142.,  236033.,  238924.,  235004.,  237944.,
      240884.,  243824.,  208733.,  211274.,  213815.,  216356.,  180075.,
      182210.,  184345.,  186480.,  149002.,  150724.,  152446.,  154168.,
      135960.,  137424.,  138888.,  140352.,  175125.,  176970.,  178815.,
      180660.,  216408.,  218640.,  220872.,  223104.,  259833.,  262458.,
      265083.,  267708.,  264495.,  267162.,  269829.,  272496.,  269157.,
      271866.,  274575.,  277284.,  237540.,  239880.,  242220.,  244560.,
      203685.,  205650.,  207615.,  209580.,  167568.,  169152.,  170736.,
      172320.,  145710.,  147020.,  148330.,  149640.,  186850.,  188500.,
      190150.,  191800.,  229915.,  231910.,  233905.,  235900.,  274925.,
      277270.,  279615.,  281960.,  279300.,  281680.,  284060.,  286440.,
      283675.,  286090.,  288505.,  290920.,  249325.,  251410.,  253495.,
      255580.,  212950.,  214700.,  216450.,  218200.,  174530.,  175940.,
      177350.,  178760.,  143840.,  144960.,  146080.,  147200.,  183890.,
      185300.,  186710.,  188120.,  225608.,  227312.,  229016.,  230720.,
      269010.,  271012.,  273014.,  275016.,  272902.,  274932.,  276962.,
      278992.,  276794.,  278852.,  280910.,  282968.,  242576.,  244352.,
      246128.,  247904.,  206610.,  208100.,  209590.,  211080.,  168880.,
      170080.,  171280.,  172480.,  77984.,   79680.,   81376.,   83072.,
      102170.,  104300.,  106430.,  108560.,  128264.,  130832.,  133400.,
      135968.,  156282.,  159292.,  162302.,  165312.,  157822.,  160860.,
      163898.,  166936.,  159362.,  162428.,  165494.,  168560.,  142640.,
      145280.,  147920.,  150560.,  123930.,  126140.,  128350.,  130560.,
      103216.,  104992.,  106768.,  108544.,  129050.,  131260.,  133470.,
      135680.,  167575.,  170350.,  173125.,  175900.,  208645.,  211990.,
      215335.,  218680.,  252280.,  256200.,  260120.,  264040.,  254695.,
      258650.,  262605.,  266560.,  257110.,  261100.,  265090.,  269080.,
      228415.,  231850.,  235285.,  238720.,  197075.,  199950.,  202825.,
      205700.,  163070.,  165380.,  167690.,  170000.,  194760.,  197520.,
      200280.,  203040.,  251445.,  254910.,  258375.,  261840.,  311376.,
      315552.,  319728.,  323904.,  374577.,  379470.,  384363.,  389256.,
      378063.,  382998.,  387933.,  392868.,  381549.,  386526.,  391503.,
      396480.,  337260.,  341544.,  345828.,  350112.,  289605.,  293190.,
      296775.,  300360.,  238560.,  241440.,  244320.,  247200.,  276122.,
      279468.,  282814.,  286160.,  355040.,  359240.,  363440.,  367640.,
      437969.,  443030.,  448091.,  453152.,  524937.,  530866.,  536795.,
      542724.,  529690.,  535668.,  541646.,  547624.,  534443.,  540470.,
      546497.,  552524.,  470687.,  475874.,  481061.,  486248.,  402780.,
      407120.,  411460.,  415800.,  330694.,  334180.,  337666.,  341152.,
      299054.,  302652.,  306250.,  309848.,  384335.,  388850.,  393365.,
      397880.,  473879.,  479318.,  484757.,  490196.,  567714.,  574084.,
      580454.,  586824.,  572467.,  578886.,  585305.,  591724.,  577220.,
      583688.,  590156.,  596624.,  508109.,  513674.,  519239.,  524804.,
      434595.,  439250.,  443905.,  448560.,  356650.,  360388.,  364126.,
      367864.,  321986.,  325836.,  329686.,  333536.,  413630.,  418460.,
      423290.,  428120.,  509789.,  515606.,  521423.,  527240.,  610491.,
      617302.,  624113.,  630924.,  615244.,  622104.,  628964.,  635824.,
      619997.,  626906.,  633815.,  640724.,  545531.,  551474.,  557417.,
      563360.,  466410.,  471380.,  476350.,  481320.,  382606.,  386596.,
      390586.,  394576.,  344918.,  349020.,  353122.,  357224.,  442925.,
      448070.,  453215.,  458360.,  545699.,  551894.,  558089.,  564284.,
      653268.,  660520.,  667772.,  675024.,  658021.,  665322.,  672623.,
      679924.,  662774.,  670124.,  677474.,  684824.,  582953.,  589274.,
      595595.,  601916.,  498225.,  503510.,  508795.,  514080.,  408562.,
      412804.,  417046.,  421288.,  362760.,  366384.,  370008.,  373632.,
      464025.,  468570.,  473115.,  477660.,  569568.,  575040.,  580512.,
      585984.,  679413.,  685818.,  692223.,  698628.,  684075.,  690522.,
      696969.,  703416.,  688737.,  695226.,  701715.,  708204.,  603660.,
      609240.,  614820.,  620400.,  514185.,  518850.,  523515.,  528180.,
      420288.,  424032.,  427776.,  431520.,  359910.,  363020.,  366130.,
      369240.,  459100.,  463000.,  466900.,  470800.,  562015.,  566710.,
      571405.,  576100.,  668675.,  674170.,  679665.,  685160.,  673050.,
      678580.,  684110.,  689640.,  677425.,  682990.,  688555.,  694120.,
      592225.,  597010.,  601795.,  606580.,  503200.,  507200.,  511200.,
      515200.,  410330.,  413540.,  416750.,  419960.,  335360.,  337920.,
      340480.,  343040.,  426890.,  430100.,  433310.,  436520.,  521528.,
      525392.,  529256.,  533120.,  619290.,  623812.,  628334.,  632856.,
      623182.,  627732.,  632282.,  636832.,  627074.,  631652.,  636230.,
      640808.,  547136.,  551072.,  555008.,  558944.,  464010.,  467300.,
      470590.,  473880.,  377680.,  380320.,  382960.,  385600.,  148544.,
      151680.,  154816.,  157952.,  193970.,  197900.,  201830.,  205760.,
      242744.,  247472.,  252200.,  256928.,  294882.,  300412.,  305942.,
      311472.,  296422.,  301980.,  307538.,  313096.,  297962.,  303548.,
      309134.,  314720.,  265760.,  270560.,  275360.,  280160.,  230130.,
      234140.,  238150.,  242160.,  191056.,  194272.,  197488.,  200704.,
      242450.,  246460.,  250470.,  254480.,  313825.,  318850.,  323875.,
      328900.,  389545.,  395590.,  401635.,  407680.,  469630.,  476700.,
      483770.,  490840.,  472045.,  479150.,  486255.,  493360.,  474460.,
      481600.,  488740.,  495880.,  420115.,  426250.,  432385.,  438520.,
      361325.,  366450.,  371575.,  376700.,  298070.,  302180.,  306290.,
      310400.,  361080.,  366000.,  370920.,  375840.,  464745.,  470910.,
      477075.,  483240.,  573816.,  581232.,  588648.,  596064.,  688317.,
      696990.,  705663.,  714336.,  691803.,  700518.,  709233.,  717948.,
      695289.,  704046.,  712803.,  721560.,  612660.,  620184.,  627708.,
      635232.,  524505.,  530790.,  537075.,  543360.,  430800.,  435840.,
      440880.,  445920.,  505442.,  511308.,  517174.,  523040.,  647990.,
      655340.,  662690.,  670040.,  797069.,  805910.,  814751.,  823592.,
      952707.,  963046.,  973385.,  983724.,  957460.,  967848.,  978236.,
      988624.,  962213.,  972650.,  983087.,  993524.,  844907.,  853874.,
      862841.,  871808.,  720930.,  728420.,  735910.,  743400.,  590254.,
      596260.,  602266.,  608272.,  528374.,  534492.,  540610.,  546728.,
      677285.,  684950.,  692615.,  700280.,  832979.,  842198.,  851417.,
      860636.,  995484.,  1006264., 1017044., 1027824., 1000237., 1011066.,
      1021895., 1032724., 1004990., 1015868., 1026746., 1037624., 882329.,
      891674.,  901019.,  910364.,  752745.,  760550.,  768355.,  776160.,
      616210.,  622468.,  628726.,  634984.,  551306.,  557676.,  564046.,
      570416.,  706580.,  714560.,  722540.,  730520.,  868889.,  878486.,
      888083.,  897680.,  1038261., 1049482., 1060703., 1071924., 1043014.,
      1054284., 1065554., 1076824., 1047767., 1059086., 1070405., 1081724.,
      919751.,  929474.,  939197.,  948920.,  784560.,  792680.,  800800.,
      808920.,  642166.,  648676.,  655186.,  661696.,  574238.,  580860.,
      587482.,  594104.,  735875.,  744170.,  752465.,  760760.,  904799.,
      914774.,  924749.,  934724.,  1081038., 1092700., 1104362., 1116024.,
      1085791., 1097502., 1109213., 1120924., 1090544., 1102304., 1114064.,
      1125824., 957173.,  967274.,  977375.,  987476.,  816375.,  824810.,
      833245.,  841680.,  668122.,  674884.,  681646.,  688408.,  589560.,
      595344.,  601128.,  606912.,  752925.,  760170.,  767415.,  774660.,
      922728.,  931440.,  940152.,  948864.,  1098993., 1109178., 1119363.,
      1129548., 1103655., 1113882., 1124109., 1134336., 1108317., 1118586.,
      1128855., 1139124., 969780.,  978600.,  987420.,  996240.,  824685.,
      832050.,  839415.,  846780.,  673008.,  678912.,  684816.,  690720.,
      574110.,  579020.,  583930.,  588840.,  731350.,  737500.,  743650.,
      749800.,  894115.,  901510.,  908905.,  916300.,  1062425., 1071070.,
      1079715., 1088360., 1066800., 1075480., 1084160., 1092840., 1071175.,
      1079890., 1088605., 1097320., 935125.,  942610.,  950095.,  957580.,
      793450.,  799700.,  805950.,  812200.,  646130.,  651140.,  656150.,
      661160.,  526880.,  530880.,  534880.,  538880.,  669890.,  674900.,
      679910.,  684920.,  817448.,  823472.,  829496.,  835520.,  969570.,
      976612.,  983654.,  990696.,  973462.,  980532.,  987602.,  994672.,
      977354.,  984452.,  991550.,  998648.,  851696.,  857792.,  863888.,
      869984.,  721410.,  726500.,  731590.,  736680.,  586480.,  590560.,
      594640.,  598720.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    46.,    52.,    58.,    64.,    70.,    76.,
      82.,    88.,    94.,    100.,   106.,   112.,   118.,   124.,   130.,
      136.,   113.,   118.,   123.,   128.,   75.,    78.,    81.,    84.,
      33.,    38.,    43.,    48.,    116.,   128.,   140.,   152.,   257.,
      278.,   299.,   320.,   341.,   362.,   383.,   404.,   425.,   446.,
      467.,   488.,   509.,   530.,   551.,   572.,   593.,   614.,   635.,
      656.,   504.,   520.,   536.,   552.,   309.,   318.,   327.,   336.,
      180.,   192.,   204.,   216.,   495.,   522.,   549.,   576.,   957.,
      1002.,  1047.,  1092.,  1137.,  1182.,  1227.,  1272.,  1317.,  1362.,
      1407.,  1452.,  1497.,  1542.,  1587.,  1632.,  1677.,  1722.,  1767.,
      1812.,  1341.,  1374.,  1407.,  1440.,  786.,   804.,   822.,   840.,
      526.,   548.,   570.,   592.,   1312.,  1360.,  1408.,  1456.,  2374.,
      2452.,  2530.,  2608.,  2686.,  2764.,  2842.,  2920.,  2998.,  3076.,
      3154.,  3232.,  3310.,  3388.,  3466.,  3544.,  3622.,  3700.,  3778.,
      3856.,  2792.,  2848.,  2904.,  2960.,  1590.,  1620.,  1650.,  1680.,
      1142.,  1164.,  1186.,  1208.,  2656.,  2704.,  2752.,  2800.,  4558.,
      4636.,  4714.,  4792.,  4870.,  4948.,  5026.,  5104.,  5182.,  5260.,
      5338.,  5416.,  5494.,  5572.,  5650.,  5728.,  5806.,  5884.,  5962.,
      6040.,  4360.,  4416.,  4472.,  4528.,  2430.,  2460.,  2490.,  2520.,
      1758.,  1780.,  1802.,  1824.,  4000.,  4048.,  4096.,  4144.,  6742.,
      6820.,  6898.,  6976.,  7054.,  7132.,  7210.,  7288.,  7366.,  7444.,
      7522.,  7600.,  7678.,  7756.,  7834.,  7912.,  7990.,  8068.,  8146.,
      8224.,  5928.,  5984.,  6040.,  6096.,  3270.,  3300.,  3330.,  3360.,
      2374.,  2396.,  2418.,  2440.,  5344.,  5392.,  5440.,  5488.,  8926.,
      9004.,  9082.,  9160.,  9238.,  9316.,  9394.,  9472.,  9550.,  9628.,
      9706.,  9784.,  9862.,  9940.,  10018., 10096., 10174., 10252., 10330.,
      10408., 7496.,  7552.,  7608.,  7664.,  4110.,  4140.,  4170.,  4200.,
      2793.,  2814.,  2835.,  2856.,  6093.,  6138.,  6183.,  6228.,  9912.,
      9984.,  10056., 10128., 10200., 10272., 10344., 10416., 10488., 10560.,
      10632., 10704., 10776., 10848., 10920., 10992., 11064., 11136., 11208.,
      11280., 7971.,  8022.,  8073.,  8124.,  4287.,  4314.,  4341.,  4368.,
      2593.,  2610.,  2627.,  2644.,  5564.,  5600.,  5636.,  5672.,  8921.,
      8978.,  9035.,  9092.,  9149.,  9206.,  9263.,  9320.,  9377.,  9434.,
      9491.,  9548.,  9605.,  9662.,  9719.,  9776.,  9833.,  9890.,  9947.,
      10004., 6992.,  7032.,  7072.,  7112.,  3717.,  3738.,  3759.,  3780.,
      1690.,  1700.,  1710.,  1720.,  3589.,  3610.,  3631.,  3652.,  5701.,
      5734.,  5767.,  5800.,  5833.,  5866.,  5899.,  5932.,  5965.,  5998.,
      6031.,  6064.,  6097.,  6130.,  6163.,  6196.,  6229.,  6262.,  6295.,
      6328.,  4391.,  4414.,  4437.,  4460.,  2316.,  2328.,  2340.,  2352.,
      13.,    26.,    39.,    52.,    79.,    106.,   133.,   160.,   202.,
      244.,   286.,   328.,   370.,   412.,   454.,   496.,   538.,   580.,
      622.,   664.,   706.,   748.,   790.,   832.,   874.,   916.,   958.,
      1000.,  665.,   694.,   723.,   752.,   375.,   390.,   405.,   420.,
      393.,   422.,   451.,   480.,   932.,   992.,   1052.,  1112.,  1625.,
      1718.,  1811.,  1904.,  1997.,  2090.,  2183.,  2276.,  2369.,  2462.,
      2555.,  2648.,  2741.,  2834.,  2927.,  3020.,  3113.,  3206.,  3299.,
      3392.,  2280.,  2344.,  2408.,  2472.,  1245.,  1278.,  1311.,  1344.,
      1224.,  1272.,  1320.,  1368.,  2727.,  2826.,  2925.,  3024.,  4521.,
      4674.,  4827.,  4980.,  5133.,  5286.,  5439.,  5592.,  5745.,  5898.,
      6051.,  6204.,  6357.,  6510.,  6663.,  6816.,  6969.,  7122.,  7275.,
      7428.,  5013.,  5118.,  5223.,  5328.,  2694.,  2748.,  2802.,  2856.,
      2590.,  2660.,  2730.,  2800.,  5632.,  5776.,  5920.,  6064.,  9142.,
      9364.,  9586.,  9808.,  10030., 10252., 10474., 10696., 10918., 11140.,
      11362., 11584., 11806., 12028., 12250., 12472., 12694., 12916., 13138.,
      13360., 9032.,  9184.,  9336.,  9488.,  4806.,  4884.,  4962.,  5040.,
      4550.,  4620.,  4690.,  4760.,  9664.,  9808.,  9952.,  10096., 15358.,
      15580., 15802., 16024., 16246., 16468., 16690., 16912., 17134., 17356.,
      17578., 17800., 18022., 18244., 18466., 18688., 18910., 19132., 19354.,
      19576., 13288., 13440., 13592., 13744., 6990.,  7068.,  7146.,  7224.,
      6510.,  6580.,  6650.,  6720.,  13696., 13840., 13984., 14128., 21574.,
      21796., 22018., 22240., 22462., 22684., 22906., 23128., 23350., 23572.,
      23794., 24016., 24238., 24460., 24682., 24904., 25126., 25348., 25570.,
      25792., 17544., 17696., 17848., 18000., 9174.,  9252.,  9330.,  9408.,
      8470.,  8540.,  8610.,  8680.,  17728., 17872., 18016., 18160., 27790.,
      28012., 28234., 28456., 28678., 28900., 29122., 29344., 29566., 29788.,
      30010., 30232., 30454., 30676., 30898., 31120., 31342., 31564., 31786.,
      32008., 21800., 21952., 22104., 22256., 11358., 11436., 11514., 11592.,
      7869.,  7926.,  7983.,  8040.,  16389., 16506., 16623., 16740., 25572.,
      25752., 25932., 26112., 26292., 26472., 26652., 26832., 27012., 27192.,
      27372., 27552., 27732., 27912., 28092., 28272., 28452., 28632., 28812.,
      28992., 19707., 19830., 19953., 20076., 10227., 10290., 10353., 10416.,
      6313.,  6354.,  6395.,  6436.,  13100., 13184., 13268., 13352., 20369.,
      20498., 20627., 20756., 20885., 21014., 21143., 21272., 21401., 21530.,
      21659., 21788., 21917., 22046., 22175., 22304., 22433., 22562., 22691.,
      22820., 15488., 15576., 15664., 15752., 8013.,  8058.,  8103.,  8148.,
      3718.,  3740.,  3762.,  3784.,  7693.,  7738.,  7783.,  7828.,  11929.,
      11998., 12067., 12136., 12205., 12274., 12343., 12412., 12481., 12550.,
      12619., 12688., 12757., 12826., 12895., 12964., 13033., 13102., 13171.,
      13240., 8975.,  9022.,  9069.,  9116.,  4632.,  4656.,  4680.,  4704.,
      25.,    50.,    75.,    100.,   151.,   202.,   253.,   304.,   382.,
      460.,   538.,   616.,   694.,   772.,   850.,   928.,   1006.,  1084.,
      1162.,  1240.,  1318.,  1396.,  1474.,  1552.,  1630.,  1708.,  1786.,
      1864.,  1217.,  1270.,  1323.,  1376.,  675.,   702.,   729.,   756.,
      753.,   806.,   859.,   912.,   1748.,  1856.,  1964.,  2072.,  2993.,
      3158.,  3323.,  3488.,  3653.,  3818.,  3983.,  4148.,  4313.,  4478.,
      4643.,  4808.,  4973.,  5138.,  5303.,  5468.,  5633.,  5798.,  5963.,
      6128.,  4056.,  4168.,  4280.,  4392.,  2181.,  2238.,  2295.,  2352.,
      2268.,  2352.,  2436.,  2520.,  4959.,  5130.,  5301.,  5472.,  8085.,
      8346.,  8607.,  8868.,  9129.,  9390.,  9651.,  9912.,  10173., 10434.,
      10695., 10956., 11217., 11478., 11739., 12000., 12261., 12522., 12783.,
      13044., 8685.,  8862.,  9039.,  9216.,  4602.,  4692.,  4782.,  4872.,
      4654.,  4772.,  4890.,  5008.,  9952.,  10192., 10432., 10672., 15910.,
      16276., 16642., 17008., 17374., 17740., 18106., 18472., 18838., 19204.,
      19570., 19936., 20302., 20668., 21034., 21400., 21766., 22132., 22498.,
      22864., 15272., 15520., 15768., 16016., 8022.,  8148.,  8274.,  8400.,
      7958.,  8076.,  8194.,  8312.,  16672., 16912., 17152., 17392., 26158.,
      26524., 26890., 27256., 27622., 27988., 28354., 28720., 29086., 29452.,
      29818., 30184., 30550., 30916., 31282., 31648., 32014., 32380., 32746.,
      33112., 22216., 22464., 22712., 22960., 11550., 11676., 11802., 11928.,
      11262., 11380., 11498., 11616., 23392., 23632., 23872., 24112., 36406.,
      36772., 37138., 37504., 37870., 38236., 38602., 38968., 39334., 39700.,
      40066., 40432., 40798., 41164., 41530., 41896., 42262., 42628., 42994.,
      43360., 29160., 29408., 29656., 29904., 15078., 15204., 15330., 15456.,
      14566., 14684., 14802., 14920., 30112., 30352., 30592., 30832., 46654.,
      47020., 47386., 47752., 48118., 48484., 48850., 49216., 49582., 49948.,
      50314., 50680., 51046., 51412., 51778., 52144., 52510., 52876., 53242.,
      53608., 36104., 36352., 36600., 36848., 18606., 18732., 18858., 18984.,
      12945., 13038., 13131., 13224., 26685., 26874., 27063., 27252., 41232.,
      41520., 41808., 42096., 42384., 42672., 42960., 43248., 43536., 43824.,
      44112., 44400., 44688., 44976., 45264., 45552., 45840., 46128., 46416.,
      46704., 31443., 31638., 31833., 32028., 16167., 16266., 16365., 16464.,
      10033., 10098., 10163., 10228., 20636., 20768., 20900., 21032., 31817.,
      32018., 32219., 32420., 32621., 32822., 33023., 33224., 33425., 33626.,
      33827., 34028., 34229., 34430., 34631., 34832., 35033., 35234., 35435.,
      35636., 23984., 24120., 24256., 24392., 12309., 12378., 12447., 12516.,
      5746.,  5780.,  5814.,  5848.,  11797., 11866., 11935., 12004., 18157.,
      18262., 18367., 18472., 18577., 18682., 18787., 18892., 18997., 19102.,
      19207., 19312., 19417., 19522., 19627., 19732., 19837., 19942., 20047.,
      20152., 13559., 13630., 13701., 13772., 6948.,  6984.,  7020.,  7056.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      57328.,   59344.,   61360.,   63376.,   80280.,   82880.,   85480.,
      88080.,   106936.,  110152.,  113368.,  116584.,  137424.,  141288.,
      145152.,  149016.,  149688.,  153776.,  157864.,  161952.,  161952.,
      166264.,  170576.,  174888.,  152488.,  156280.,  160072.,  163864.,
      138680.,  141920.,  145160.,  148400.,  120400.,  123056.,  125712.,
      128368.,  121880.,  125120.,  128360.,  131600.,  166325.,  170475.,
      174625.,  178775.,  216680.,  221780.,  226880.,  231980.,  273105.,
      279195.,  285285.,  291375.,  292355.,  298725.,  305095.,  311465.,
      311605.,  318255.,  324905.,  331555.,  288020.,  293840.,  299660.,
      305480.,  257725.,  262675.,  267625.,  272575.,  220560.,  224600.,
      228640.,  232680.,  222648.,  227400.,  232152.,  236904.,  298920.,
      304980.,  311040.,  317100.,  383820.,  391236.,  398652.,  406068.,
      477540.,  486360.,  495180.,  504000.,  505344.,  514500.,  523656.,
      532812.,  533148.,  542640.,  552132.,  561624.,  486708.,  494988.,
      503268.,  511548.,  430680.,  437700.,  444720.,  451740.,  364872.,
      370584.,  376296.,  382008.,  367696.,  374248.,  380800.,  387352.,
      488145.,  496475.,  504805.,  513135.,  620452.,  630616.,  640780.,
      650944.,  764841.,  776895.,  788949.,  801003.,  802767.,  815213.,
      827659.,  840105.,  840693.,  853531.,  866369.,  879207.,  760648.,
      771820.,  782992.,  794164.,  667625.,  677075.,  686525.,  695975.,
      561400.,  569072.,  576744.,  584416.,  550648.,  559216.,  567784.,
      576352.,  721875.,  732725.,  743575.,  754425.,  906976.,  920164.,
      933352.,  946540.,  1106175., 1121757., 1137339., 1152921., 1144101.,
      1160075., 1176049., 1192023., 1182027., 1198393., 1214759., 1231125.,
      1059268., 1073464., 1087660., 1101856., 921515.,  933485.,  945455.,
      957425.,  768544.,  778232.,  787920.,  797608.,  733600.,  744184.,
      754768.,  765352.,  955605.,  968975.,  982345.,  995715.,  1193500.,
      1209712., 1225924., 1242136., 1447509., 1466619., 1485729., 1504839.,
      1485435., 1504937., 1524439., 1543941., 1523361., 1543255., 1563149.,
      1583043., 1357888., 1375108., 1392328., 1409548., 1175405., 1189895.,
      1204385., 1218875., 975688.,  987392.,  999096.,  1010800., 916552.,
      929152.,  941752.,  954352.,  1189335., 1205225., 1221115., 1237005.,
      1480024., 1499260., 1518496., 1537732., 1788843., 1811481., 1834119.,
      1856757., 1826769., 1849799., 1872829., 1895859., 1864695., 1888117.,
      1911539., 1934961., 1656508., 1676752., 1696996., 1717240., 1429295.,
      1446305., 1463315., 1480325., 1182832., 1196552., 1210272., 1223992.,
      1079736., 1091400., 1103064., 1114728., 1390920., 1405620., 1420320.,
      1435020., 1718988., 1736772., 1754556., 1772340., 2064132., 2085048.,
      2105964., 2126880., 2101344., 2122596., 2143848., 2165100., 2138556.,
      2160144., 2181732., 2203320., 1887540., 1906188., 1924836., 1943484.,
      1618680., 1634340., 1650000., 1665660., 1331784., 1344408., 1357032.,
      1369656., 1158320., 1168760., 1179200., 1189640., 1485475., 1498625.,
      1511775., 1524925., 1827980., 1843880., 1859780., 1875680., 2185995.,
      2204685., 2223375., 2242065., 2220925., 2239895., 2258865., 2277835.,
      2255855., 2275105., 2294355., 2313605., 1982840., 1999460., 2016080.,
      2032700., 1693675., 1707625., 1721575., 1735525., 1388200., 1399440.,
      1410680., 1421920., 1144240., 1153168., 1162096., 1171024., 1462920.,
      1474160., 1485400., 1496640., 1794904., 1808488., 1822072., 1835656.,
      2140320., 2156280., 2172240., 2188200., 2171400., 2187584., 2203768.,
      2219952., 2202480., 2218888., 2235296., 2251704., 1930312., 1944472.,
      1958632., 1972792., 1644200., 1656080., 1667960., 1679840., 1344016.,
      1353584., 1363152., 1372720., 618928.,  632464.,  646000.,  659536.,
      811080.,  828080.,  845080.,  862080.,  1018456., 1038952., 1059448.,
      1079944., 1241184., 1265208., 1289232., 1313256., 1253448., 1277696.,
      1301944., 1326192., 1265712., 1290184., 1314656., 1339128., 1133128.,
      1154200., 1175272., 1196344., 984680.,  1002320., 1019960., 1037600.,
      820240.,  834416.,  848592.,  862768.,  1025480., 1043120., 1060760.,
      1078400., 1331825., 1353975., 1376125., 1398275., 1658480., 1685180.,
      1711880., 1738580., 2005605., 2036895., 2068185., 2099475., 2024855.,
      2056425., 2087995., 2119565., 2044105., 2075955., 2107805., 2139655.,
      1816220., 1843640., 1871060., 1898480., 1567225., 1590175., 1613125.,
      1636075., 1296960., 1315400., 1333840., 1352280., 1548888., 1570920.,
      1592952., 1614984., 1999920., 2027580., 2055240., 2082900., 2476860.,
      2510196., 2543532., 2576868., 2979900., 3018960., 3058020., 3097080.,
      3007704., 3047100., 3086496., 3125892., 3035508., 3075240., 3114972.,
      3154704., 2683428., 2717628., 2751828., 2786028., 2304480., 2333100.,
      2361720., 2390340., 1898472., 1921464., 1944456., 1967448., 2197216.,
      2223928., 2250640., 2277352., 2825445., 2858975., 2892505., 2926035.,
      3485692., 3526096., 3566500., 3606904., 4178181., 4225515., 4272849.,
      4320183., 4216107., 4263833., 4311559., 4359285., 4254033., 4302151.,
      4350269., 4398387., 3746848., 3788260., 3829672., 3871084., 3206525.,
      3241175., 3275825., 3310475., 2632840., 2660672., 2688504., 2716336.,
      2380168., 2408896., 2437624., 2466352., 3059175., 3095225., 3131275.,
      3167325., 3772216., 3815644., 3859072., 3902500., 4519515., 4570377.,
      4621239., 4672101., 4557441., 4608695., 4659949., 4711203., 4595367.,
      4647013., 4698659., 4750305., 4045468., 4089904., 4134340., 4178776.,
      3460415., 3497585., 3534755., 3571925., 2839984., 2869832., 2899680.,
      2929528., 2563120., 2593864., 2624608., 2655352., 3292905., 3331475.,
      3370045., 3408615., 4058740., 4105192., 4151644., 4198096., 4860849.,
      4915239., 4969629., 5024019., 4898775., 4953557., 5008339., 5063121.,
      4936701., 4991875., 5047049., 5102223., 4344088., 4391548., 4439008.,
      4486468., 3714305., 3753995., 3793685., 3833375., 3047128., 3078992.,
      3110856., 3142720., 2746072., 2778832., 2811592., 2844352., 3526635.,
      3567725., 3608815., 3649905., 4345264., 4394740., 4444216., 4493692.,
      5202183., 5260101., 5318019., 5375937., 5240109., 5298419., 5356729.,
      5415039., 5278035., 5336737., 5395439., 5454141., 4642708., 4693192.,
      4743676., 4794160., 3968195., 4010405., 4052615., 4094825., 3254272.,
      3288152., 3322032., 3355912., 2889816., 2918760., 2947704., 2976648.,
      3696720., 3733020., 3769320., 3805620., 4537788., 4581492., 4625196.,
      4668900., 5413212., 5464368., 5515524., 5566680., 5450424., 5501916.,
      5553408., 5604900., 5487636., 5539464., 5591292., 5643120., 4810020.,
      4854588., 4899156., 4943724., 4097280., 4134540., 4171800., 4209060.,
      3349224., 3379128., 3409032., 3438936., 2868320., 2893160., 2918000.,
      2942840., 3658975., 3690125., 3721275., 3752425., 4479380., 4516880.,
      4554380., 4591880., 5329695., 5373585., 5417475., 5461365., 5364625.,
      5408795., 5452965., 5497135., 5399555., 5444005., 5488455., 5532905.,
      4720640., 4758860., 4797080., 4835300., 4011175., 4043125., 4075075.,
      4107025., 3271000., 3296640., 3322280., 3347920., 2673520., 2693968.,
      2714416., 2734864., 3403320., 3428960., 3454600., 3480240., 4157944.,
      4188808., 4219672., 4250536., 4937520., 4973640., 5009760., 5045880.,
      4968600., 5004944., 5041288., 5077632., 4999680., 5036248., 5072816.,
      5109384., 4362472., 4393912., 4425352., 4456792., 3699800., 3726080.,
      3752360., 3778640., 3011536., 3032624., 3053712., 3074800., 1180528.,
      1205584., 1230640., 1255696., 1541880., 1573280., 1604680., 1636080.,
      1929976., 1967752., 2005528., 2043304., 2344944., 2389128., 2433312.,
      2477496., 2357208., 2401616., 2446024., 2490432., 2369472., 2414104.,
      2458736., 2503368., 2113768., 2152120., 2190472., 2228824., 1830680.,
      1862720., 1894760., 1926800., 1520080., 1545776., 1571472., 1597168.,
      1929080., 1961120., 1993160., 2025200., 2497325., 2537475., 2577625.,
      2617775., 3100280., 3148580., 3196880., 3245180., 3738105., 3794595.,
      3851085., 3907575., 3757355., 3814125., 3870895., 3927665., 3776605.,
      3833655., 3890705., 3947755., 3344420., 3393440., 3442460., 3491480.,
      2876725., 2917675., 2958625., 2999575., 2373360., 2406200., 2439040.,
      2471880., 2875128., 2914440., 2953752., 2993064., 3700920., 3750180.,
      3799440., 3848700., 4569900., 4629156., 4688412., 4747668., 5482260.,
      5551560., 5620860., 5690160., 5510064., 5579700., 5649336., 5718972.,
      5537868., 5607840., 5677812., 5747784., 4880148., 4940268., 5000388.,
      5060508., 4178280., 4228500., 4278720., 4328940., 3432072., 3472344.,
      3512616., 3552888., 4026736., 4073608., 4120480., 4167352., 5162745.,
      5221475., 5280205., 5338935., 6350932., 6421576., 6492220., 6562864.,
      7591521., 7674135., 7756749., 7839363., 7629447., 7712453., 7795459.,
      7878465., 7667373., 7750771., 7834169., 7917567., 6733048., 6804700.,
      6876352., 6948004., 5745425., 5805275., 5865125., 5924975., 4704280.,
      4752272., 4800264., 4848256., 4209688., 4258576., 4307464., 4356352.,
      5396475., 5457725., 5518975., 5580225., 6637456., 6711124., 6784792.,
      6858460., 7932855., 8018997., 8105139., 8191281., 7970781., 8057315.,
      8143849., 8230383., 8008707., 8095633., 8182559., 8269485., 7031668.,
      7106344., 7181020., 7255696., 5999315., 6061685., 6124055., 6186425.,
      4911424., 4961432., 5011440., 5061448., 4392640., 4443544., 4494448.,
      4545352., 5630205., 5693975., 5757745., 5821515., 6923980., 7000672.,
      7077364., 7154056., 8274189., 8363859., 8453529., 8543199., 8312115.,
      8402177., 8492239., 8582301., 8350041., 8440495., 8530949., 8621403.,
      7330288., 7407988., 7485688., 7563388., 6253205., 6318095., 6382985.,
      6447875., 5118568., 5170592., 5222616., 5274640., 4575592., 4628512.,
      4681432., 4734352., 5863935., 5930225., 5996515., 6062805., 7210504.,
      7290220., 7369936., 7449652., 8615523., 8708721., 8801919., 8895117.,
      8653449., 8747039., 8840629., 8934219., 8691375., 8785357., 8879339.,
      8973321., 7628908., 7709632., 7790356., 7871080., 6507095., 6574505.,
      6641915., 6709325., 5325712., 5379752., 5433792., 5487832., 4699896.,
      4746120., 4792344., 4838568., 6002520., 6060420., 6118320., 6176220.,
      7356588., 7426212., 7495836., 7565460., 8762292., 8843688., 8925084.,
      9006480., 8799504., 8881236., 8962968., 9044700., 8836716., 8918784.,
      9000852., 9082920., 7732500., 7802988., 7873476., 7943964., 6575880.,
      6634740., 6693600., 6752460., 5366664., 5413848., 5461032., 5508216.,
      4578320., 4617560., 4656800., 4696040., 5832475., 5881625., 5930775.,
      5979925., 7130780., 7189880., 7248980., 7308080., 8473395., 8542485.,
      8611575., 8680665., 8508325., 8577695., 8647065., 8716435., 8543255.,
      8612905., 8682555., 8752205., 7458440., 7518260., 7578080., 7637900.,
      6328675., 6378625., 6428575., 6478525., 5153800., 5193840., 5233880.,
      5273920., 4202800., 4234768., 4266736., 4298704., 5343720., 5383760.,
      5423800., 5463840., 6520984., 6569128., 6617272., 6665416., 7734720.,
      7791000., 7847280., 7903560., 7765800., 7822304., 7878808., 7935312.,
      7796880., 7853608., 7910336., 7967064., 6794632., 6843352., 6892072.,
      6940792., 5755400., 5796080., 5836760., 5877440., 4679056., 4711664.,
      4744272., 4776880.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    305.,    347.,    389.,    431.,
      473.,    515.,    557.,    599.,    641.,    683.,    725.,    767.,
      809.,    851.,    893.,    935.,    804.,    840.,    876.,    912.,
      545.,    567.,    589.,    611.,    196.,    232.,    268.,    304.,
      772.,    860.,    948.,    1036.,   1792.,   1948.,   2104.,   2260.,
      2416.,   2572.,   2728.,   2884.,   3040.,   3196.,   3352.,   3508.,
      3664.,   3820.,   3976.,   4132.,   4288.,   4444.,   4600.,   4756.,
      3708.,   3828.,   3948.,   4068.,   2300.,   2368.,   2436.,   2504.,
      1245.,   1335.,   1425.,   1515.,   3540.,   3744.,   3948.,   4152.,
      6981.,   7323.,   7665.,   8007.,   8349.,   8691.,   9033.,   9375.,
      9717.,   10059.,  10401.,  10743.,  11085.,  11427.,  11769.,  12111.,
      12453.,  12795.,  13137.,  13479.,  10056.,  10308.,  10560.,  10812.,
      5937.,   6075.,   6213.,   6351.,   3824.,   3992.,   4160.,   4328.,
      9688.,   10056.,  10424.,  10792.,  17720.,  18320.,  18920.,  19520.,
      20120.,  20720.,  21320.,  21920.,  22520.,  23120.,  23720.,  24320.,
      24920.,  25520.,  26120.,  26720.,  27320.,  27920.,  28520.,  29120.,
      21192.,  21624.,  22056.,  22488.,  12128.,  12360.,  12592.,  12824.,
      8528.,   8696.,   8864.,   9032.,   19992.,  20360.,  20728.,  21096.,
      34520.,  35120.,  35720.,  36320.,  36920.,  37520.,  38120.,  38720.,
      39320.,  39920.,  40520.,  41120.,  41720.,  42320.,  42920.,  43520.,
      44120.,  44720.,  45320.,  45920.,  33288.,  33720.,  34152.,  34584.,
      18624.,  18856.,  19088.,  19320.,  13232.,  13400.,  13568.,  13736.,
      30296.,  30664.,  31032.,  31400.,  51320.,  51920.,  52520.,  53120.,
      53720.,  54320.,  54920.,  55520.,  56120.,  56720.,  57320.,  57920.,
      58520.,  59120.,  59720.,  60320.,  60920.,  61520.,  62120.,  62720.,
      45384.,  45816.,  46248.,  46680.,  25120.,  25352.,  25584.,  25816.,
      17936.,  18104.,  18272.,  18440.,  40600.,  40968.,  41336.,  41704.,
      68120.,  68720.,  69320.,  69920.,  70520.,  71120.,  71720.,  72320.,
      72920.,  73520.,  74120.,  74720.,  75320.,  75920.,  76520.,  77120.,
      77720.,  78320.,  78920.,  79520.,  57480.,  57912.,  58344.,  58776.,
      31616.,  31848.,  32080.,  32312.,  21459.,  21621.,  21783.,  21945.,
      46944.,  47292.,  47640.,  47988.,  76551.,  77109.,  77667.,  78225.,
      78783.,  79341.,  79899.,  80457.,  81015.,  81573.,  82131.,  82689.,
      83247.,  83805.,  84363.,  84921.,  85479.,  86037.,  86595.,  87153.,
      61716.,  62112.,  62508.,  62904.,  33255.,  33465.,  33675.,  33885.,
      20092.,  20224.,  20356.,  20488.,  43188.,  43468.,  43748.,  44028.,
      69352.,  69796.,  70240.,  70684.,  71128.,  71572.,  72016.,  72460.,
      72904.,  73348.,  73792.,  74236.,  74680.,  75124.,  75568.,  76012.,
      76456.,  76900.,  77344.,  77788.,  54444.,  54756.,  55068.,  55380.,
      28980.,  29144.,  29308.,  29472.,  13163.,  13241.,  13319.,  13397.,
      27988.,  28152.,  28316.,  28480.,  44507.,  44765.,  45023.,  45281.,
      45539.,  45797.,  46055.,  46313.,  46571.,  46829.,  47087.,  47345.,
      47603.,  47861.,  48119.,  48377.,  48635.,  48893.,  49151.,  49409.,
      34320.,  34500.,  34680.,  34860.,  18119.,  18213.,  18307.,  18401.,
      77.,     179.,    281.,    383.,    568.,    780.,    992.,    1204.,
      1505.,   1835.,   2165.,   2495.,   2825.,   3155.,   3485.,   3815.,
      4145.,   4475.,   4805.,   5135.,   5465.,   5795.,   6125.,   6455.,
      6785.,   7115.,   7445.,   7775.,   5172.,   5400.,   5628.,   5856.,
      2921.,   3039.,   3157.,   3275.,   3028.,   3256.,   3484.,   3712.,
      7204.,   7676.,   8148.,   8620.,   12592.,  13324.,  14056.,  14788.,
      15520.,  16252.,  16984.,  17716.,  18448.,  19180.,  19912.,  20644.,
      21376.,  22108.,  22840.,  23572.,  24304.,  25036.,  25768.,  26500.,
      17820.,  18324.,  18828.,  19332.,  9740.,   10000.,  10260.,  10520.,
      9525.,   9903.,   10281.,  10659.,  21252.,  22032.,  22812.,  23592.,
      35277.,  36483.,  37689.,  38895.,  40101.,  41307.,  42513.,  43719.,
      44925.,  46131.,  47337.,  48543.,  49749.,  50955.,  52161.,  53367.,
      54573.,  55779.,  56985.,  58191.,  39288.,  40116.,  40944.,  41772.,
      21129.,  21555.,  21981.,  22407.,  20240.,  20792.,  21344.,  21896.,
      44056.,  45192.,  46328.,  47464.,  71576.,  73328.,  75080.,  76832.,
      78584.,  80336.,  82088.,  83840.,  85592.,  87344.,  89096.,  90848.,
      92600.,  94352.,  96104.,  97856.,  99608.,  101360., 103112., 104864.,
      70920.,  72120.,  73320.,  74520.,  37760.,  38376.,  38992.,  39608.,
      35696.,  36248.,  36800.,  37352.,  75864.,  77000.,  78136.,  79272.,
      120632., 122384., 124136., 125888., 127640., 129392., 131144., 132896.,
      134648., 136400., 138152., 139904., 141656., 143408., 145160., 146912.,
      148664., 150416., 152168., 153920., 104520., 105720., 106920., 108120.,
      55008.,  55624.,  56240.,  56856.,  51152.,  51704.,  52256.,  52808.,
      107672., 108808., 109944., 111080., 169688., 171440., 173192., 174944.,
      176696., 178448., 180200., 181952., 183704., 185456., 187208., 188960.,
      190712., 192464., 194216., 195968., 197720., 199472., 201224., 202976.,
      138120., 139320., 140520., 141720., 72256.,  72872.,  73488.,  74104.,
      66608.,  67160.,  67712.,  68264.,  139480., 140616., 141752., 142888.,
      218744., 220496., 222248., 224000., 225752., 227504., 229256., 231008.,
      232760., 234512., 236264., 238016., 239768., 241520., 243272., 245024.,
      246776., 248528., 250280., 252032., 171720., 172920., 174120., 175320.,
      89504.,  90120.,  90736.,  91352.,  61995.,  62445.,  62895.,  63345.,
      129168., 130092., 131016., 131940., 201615., 203037., 204459., 205881.,
      207303., 208725., 210147., 211569., 212991., 214413., 215835., 217257.,
      218679., 220101., 221523., 222945., 224367., 225789., 227211., 228633.,
      155460., 156432., 157404., 158376., 80703.,  81201.,  81699.,  82197.,
      49804.,  50128.,  50452.,  50776.,  103380., 104044., 104708., 105372.,
      160792., 161812., 162832., 163852., 164872., 165892., 166912., 167932.,
      168952., 169972., 170992., 172012., 173032., 174052., 175072., 176092.,
      177112., 178132., 179152., 180172., 122316., 123012., 123708., 124404.,
      63300.,  63656.,  64012.,  64368.,  29363.,  29537.,  29711.,  29885.,
      60772.,  61128.,  61484.,  61840.,  94259.,  94805.,  95351.,  95897.,
      96443.,  96989.,  97535.,  98081.,  98627.,  99173.,  99719.,  100265.,
      100811., 101357., 101903., 102449., 102995., 103541., 104087., 104633.,
      70944.,  71316.,  71688.,  72060.,  36623.,  36813.,  37003.,  37193.,
      149.,    347.,    545.,    743.,    1096.,   1500.,   1904.,   2308.,
      2873.,   3491.,   4109.,   4727.,   5345.,   5963.,   6581.,   7199.,
      7817.,   8435.,   9053.,   9671.,   10289.,  10907.,  11525.,  12143.,
      12761.,  13379.,  13997.,  14615.,  9540.,   9960.,   10380.,  10800.,
      5297.,   5511.,   5725.,   5939.,   5860.,   6280.,   6700.,   7120.,
      13636.,  14492.,  15348.,  16204.,  23392.,  24700.,  26008.,  27316.,
      28624.,  29932.,  31240.,  32548.,  33856.,  35164.,  36472.,  37780.,
      39088.,  40396.,  41704.,  43012.,  44320.,  45628.,  46936.,  48244.,
      31932.,  32820.,  33708.,  34596.,  17180.,  17632.,  18084.,  18536.,
      17805.,  18471.,  19137.,  19803.,  38964.,  40320.,  41676.,  43032.,
      63573.,  65643.,  67713.,  69783.,  71853.,  73923.,  75993.,  78063.,
      80133.,  82203.,  84273.,  86343.,  88413.,  90483.,  92553.,  94623.,
      96693.,  98763.,  100833., 102903., 68520.,  69924.,  71328.,  72732.,
      36321.,  37035.,  37749.,  38463.,  36656.,  37592.,  38528.,  39464.,
      78424.,  80328.,  82232.,  84136.,  125432., 128336., 131240., 134144.,
      137048., 139952., 142856., 145760., 148664., 151568., 154472., 157376.,
      160280., 163184., 166088., 168992., 171896., 174800., 177704., 180608.,
      120648., 122616., 124584., 126552., 63392.,  64392.,  65392.,  66392.,
      62864.,  63800.,  64736.,  65672.,  131736., 133640., 135544., 137448.,
      206744., 209648., 212552., 215456., 218360., 221264., 224168., 227072.,
      229976., 232880., 235784., 238688., 241592., 244496., 247400., 250304.,
      253208., 256112., 259016., 261920., 175752., 177720., 179688., 181656.,
      91392.,  92392.,  93392.,  94392.,  89072.,  90008.,  90944.,  91880.,
      185048., 186952., 188856., 190760., 288056., 290960., 293864., 296768.,
      299672., 302576., 305480., 308384., 311288., 314192., 317096., 320000.,
      322904., 325808., 328712., 331616., 334520., 337424., 340328., 343232.,
      230856., 232824., 234792., 236760., 119392., 120392., 121392., 122392.,
      115280., 116216., 117152., 118088., 238360., 240264., 242168., 244072.,
      369368., 372272., 375176., 378080., 380984., 383888., 386792., 389696.,
      392600., 395504., 398408., 401312., 404216., 407120., 410024., 412928.,
      415832., 418736., 421640., 424544., 285960., 287928., 289896., 291864.,
      147392., 148392., 149392., 150392., 102531., 103269., 104007., 104745.,
      211392., 212892., 214392., 215892., 326679., 328965., 331251., 333537.,
      335823., 338109., 340395., 342681., 344967., 347253., 349539., 351825.,
      354111., 356397., 358683., 360969., 363255., 365541., 367827., 370113.,
      249204., 250752., 252300., 253848., 128151., 128937., 129723., 130509.,
      79516.,  80032.,  80548.,  81064.,  163572., 164620., 165668., 166716.,
      252232., 253828., 255424., 257020., 258616., 260212., 261808., 263404.,
      265000., 266596., 268192., 269788., 271384., 272980., 274576., 276172.,
      277768., 279364., 280960., 282556., 190188., 191268., 192348., 193428.,
      97620.,  98168.,  98716.,  99264.,  45563.,  45833.,  46103.,  46373.,
      93556.,  94104.,  94652.,  95200.,  144011., 144845., 145679., 146513.,
      147347., 148181., 149015., 149849., 150683., 151517., 152351., 153185.,
      154019., 154853., 155687., 156521., 157355., 158189., 159023., 159857.,
      107568., 108132., 108696., 109260., 55127.,  55413.,  55699.,  55985.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      332640.,  348640.,  364640.,  380640.,  447240.,  467880.,  488520.,
      509160.,  583120.,  608656.,  634192.,  659728.,  741304.,  771992.,
      802680.,  833368.,  790040.,  822520.,  855000.,  887480.,  838776.,
      873048.,  907320.,  941592.,  755216.,  785360.,  815504.,  845648.,
      641160.,  666920.,  692680.,  718440.,  571872.,  592992.,  614112.,
      635232.,  588040.,  613800.,  639560.,  665320.,  777998.,  810998.,
      843998.,  876998.,  998652.,  1039212., 1079772., 1120332., 1251282.,
      1299722., 1348162., 1396602., 1314890., 1365570., 1416250., 1466930.,
      1378498., 1431418., 1484338., 1537258., 1218508., 1264828., 1311148.,
      1357468., 1013230., 1052630., 1092030., 1131430., 874536.,  906696.,
      938856.,  971016.,  949712.,  987536.,  1025360., 1063184., 1207292.,
      1255532., 1303772., 1352012., 1509080., 1568120., 1627160., 1686200.,
      1856612., 1926836., 1997060., 2067284., 1931252., 2004164., 2077076.,
      2149988., 2005892., 2081492., 2157092., 2232692., 1759800., 1825752.,
      1891704., 1957656., 1453628., 1509548., 1565468., 1621388., 1235856.,
      1281360., 1326864., 1372368., 1369528., 1421720., 1473912., 1526104.,
      1719506., 1785866., 1852226., 1918586., 2131300., 2212276., 2293252.,
      2374228., 2604142., 2700182., 2796222., 2892262., 2698262., 2797438.,
      2896614., 2995790., 2792382., 2894694., 2997006., 3099318., 2444116.,
      2533156., 2622196., 2711236., 2016882., 2092202., 2167522., 2242842.,
      1695768., 1756920., 1818072., 1879224., 1815832., 1871864., 1927896.,
      1983928., 2224906., 2295042., 2365178., 2435314., 2695540., 2780228.,
      2864916., 2949604., 3190102., 3289790., 3389478., 3489166., 3183358.,
      3282086., 3380814., 3479542., 3277478., 3379342., 3481206., 3583070.,
      2811748., 2900404., 2989060., 3077716., 2267306., 2342306., 2417306.,
      2492306., 1866104., 1927000., 1987896., 2048792., 1866360., 1922136.,
      1977912., 2033688., 2203458., 2273274., 2343090., 2412906., 2601860.,
      2686164., 2770468., 2854772., 2987070., 3086310., 3185550., 3284790.,
      2865638., 2963918., 3062198., 3160478., 2959758., 3061174., 3162590.,
      3264006., 2491252., 2579524., 2667796., 2756068., 1944290., 2018970.,
      2093650., 2168330., 1577688., 1638328., 1698968., 1759608., 1720280.,
      1775800., 1831320., 1886840., 2132858., 2202354., 2271850., 2341346.,
      2606484., 2690404., 2774324., 2858244., 3029798., 3128590., 3227382.,
      3326174., 3055822., 3153654., 3251486., 3349318., 3149942., 3250910.,
      3351878., 3452846., 2793348., 2881236., 2969124., 3057012., 2358554.,
      2432914., 2507274., 2581634., 1879096., 1939480., 1999864., 2060248.,
      1855440., 1903504., 1951568., 1999632., 2198780., 2258796., 2318812.,
      2378828., 2595032., 2667384., 2739736., 2812088., 2895716., 2980788.,
      3065860., 3150932., 2801396., 2885060., 2968724., 3052388., 2889860.,
      2976212., 3062564., 3148916., 2493496., 2568664., 2643832., 2719000.,
      2028348., 2091948., 2155548., 2219148., 1565072., 1616720., 1668368.,
      1720016., 1314984., 1353288., 1391592., 1429896., 1409942., 1457598.,
      1505254., 1552910., 1807724., 1865052., 1922380., 1979708., 2060586.,
      2127906., 2195226., 2262546., 2095522., 2160986., 2226450., 2291914.,
      2165786., 2233490., 2301194., 2368898., 1895996., 1954988., 2013980.,
      2072972., 1570934., 1620894., 1670854., 1720814., 1298376., 1338984.,
      1379592., 1420200., 1043040., 1069280., 1095520., 1121760., 1335880.,
      1368296., 1400712., 1433128., 1657168., 1696016., 1734864., 1773712.,
      1784184., 1829720., 1875256., 1920792., 1694168., 1737400., 1780632.,
      1823864., 1754168., 1799192., 1844216., 1889240., 1551760., 1591120.,
      1630480., 1669840., 1311688., 1345128., 1378568., 1412008., 1032928.,
      1060192., 1087456., 1114720., 988256.,  1030880., 1073504., 1116128.,
      1280072., 1333992., 1387912., 1441832., 1619792., 1685264., 1750736.,
      1816208., 2008440., 2085720., 2163000., 2240280., 2057176., 2136248.,
      2215320., 2294392., 2105912., 2186776., 2267640., 2348504., 1845136.,
      1915216., 1985296., 2055376., 1527240., 1586280., 1645320., 1704360.,
      1333984., 1381728., 1429472., 1477216., 1585736., 1636584., 1687432.,
      1738280., 1918622., 1980934., 2043246., 2105558., 2299100., 2373196.,
      2447292., 2521388., 2728450., 2814650., 2900850., 2987050., 2707578.,
      2791922., 2876266., 2960610., 2670322., 2752810., 2835298., 2917786.,
      2254764., 2326428., 2398092., 2469756., 1777022., 1837542., 1898062.,
      1958582., 1455464., 1504520., 1553576., 1602632., 1733456., 1786640.,
      1839824., 1893008., 1998812., 2064204., 2129596., 2194988., 2315544.,
      2393528., 2471512., 2549496., 2685188., 2776148., 2867108., 2958068.,
      2560660., 2650212., 2739764., 2829316., 2419748., 2507892., 2596036.,
      2684180., 2014328., 2091032., 2167736., 2244440., 1541660., 1606540.,
      1671420., 1736300., 1256720., 1309392., 1362064., 1414736., 1666936.,
      1724760., 1782584., 1840408., 2083586., 2154938., 2226290., 2297642.,
      2559492., 2644820., 2730148., 2815476., 2987390., 3087142., 3186894.,
      3286646., 3029798., 3128590., 3227382., 3326174., 3055822., 3153654.,
      3251486., 3349318., 2712564., 2797764., 2882964., 2968164., 2292898.,
      2365018., 2437138., 2509258., 1826264., 1884856., 1943448., 2002040.,
      1963224., 2020792., 2078360., 2135928., 2340666., 2411698., 2482730.,
      2553762., 2777108., 2862052., 2946996., 3031940., 3128422., 3227726.,
      3327030., 3426334., 3056142., 3154486., 3252830., 3351174., 2967478.,
      3064862., 3162246., 3259630., 2588676., 2673492., 2758308., 2843124.,
      2133722., 2205522., 2277322., 2349122., 1668920., 1727256., 1785592.,
      1843928., 1800760., 1858072., 1915384., 1972696., 2024306., 2095018.,
      2165730., 2236442., 2306596., 2391156., 2475716., 2560276., 2728782.,
      2827638., 2926494., 3025350., 2803958., 2901854., 2999750., 3097646.,
      2862750., 2959686., 3056622., 3153558., 2563092., 2647524., 2731956.,
      2816388., 2187538., 2259018., 2330498., 2401978., 1839256., 1897336.,
      1955416., 2013496., 1703832., 1760888., 1817944., 1875000., 2183082.,
      2253474., 2323866., 2394258., 2720820., 2804996., 2889172., 2973348.,
      3099190., 3197598., 3296006., 3394414., 3059678., 3157126., 3254574.,
      3352022., 3003782., 3100270., 3196758., 3293246., 2635812., 2719860.,
      2803908., 2887956., 2192202., 2263362., 2334522., 2405682., 1812984.,
      1870808., 1928632., 1986456., 1581904., 1624848., 1667792., 1710736.,
      1882332., 1934924., 1987516., 2040108., 2226456., 2289080., 2351704.,
      2414328., 2359300., 2432340., 2505380., 2578420., 2199444., 2271076.,
      2342708., 2414340., 2285348., 2355572., 2425796., 2496020., 1960568.,
      2021912., 2083256., 2144600., 1576220., 1628300., 1680380., 1732460.,
      1309456., 1351888., 1394320., 1436752., 1176552., 1211272., 1245992.,
      1280712., 1386278., 1430478., 1474678., 1518878., 1637196., 1691196.,
      1745196., 1799196., 1899354., 1963474., 2027594., 2091714., 1969618.,
      2035978., 2102338., 2168698., 2039882., 2108482., 2177082., 2245682.,
      1690140., 1749900., 1809660., 1869420., 1284614., 1335214., 1385814.,
      1436414., 1037576., 1078696., 1119816., 1160936., 1153376., 1185760.,
      1218144., 1250528., 1401736., 1442856., 1483976., 1525096., 1688784.,
      1738896., 1789008., 1839120., 1947448., 2006808., 2066168., 2125528.,
      2007448., 2068600., 2129752., 2190904., 2067448., 2130392., 2193336.,
      2256280., 1827600., 1882320., 1937040., 1991760., 1539848., 1586088.,
      1632328., 1678568., 1203168., 1240672., 1278176., 1315680., 736096.,
      768480.,  800864.,  833248.,  705928.,  743976.,  782024.,  820072.,
      963280.,  1007248., 1051216., 1095184., 1247032., 1297176., 1347320.,
      1397464., 1260440., 1308280., 1356120., 1403960., 1257464., 1303000.,
      1348536., 1394072., 1103120., 1139408., 1175696., 1211984., 982280.,
      1013160., 1044040., 1074920., 852960.,  878176.,  903392.,  928608.,
      1364360., 1403432., 1442504., 1481576., 1523758., 1570326., 1616894.,
      1663462., 1714876., 1769260., 1823644., 1878028., 1938994., 2001514.,
      2064034., 2126554., 1852586., 1913250., 1973914., 2034578., 1749794.,
      1808602., 1867410., 1926218., 1326988., 1374844., 1422700., 1470556.,
      1040654., 1081334., 1122014., 1162694., 770728.,  803912.,  837096.,
      870280.,  1423056., 1471120., 1519184., 1567248., 1480636., 1538604.,
      1596572., 1654540., 1580376., 1648632., 1716888., 1785144., 1723812.,
      1802740., 1881668., 1960596., 1795892., 1873412., 1950932., 2028452.,
      1851588., 1927700., 2003812., 2079924., 1647288., 1710168., 1773048.,
      1835928., 1420284., 1473644., 1527004., 1580364., 1234576., 1278032.,
      1321488., 1364944., 1716024., 1775384., 1834744., 1894104., 2199346.,
      2271594., 2343842., 2416090., 2739364., 2824948., 2910532., 2996116.,
      3122318., 3221686., 3321054., 3420422., 3099190., 3197598., 3296006.,
      3394414., 3059678., 3157126., 3254574., 3352022., 2555028., 2636388.,
      2717748., 2799108., 2126546., 2195466., 2264386., 2333306., 1760152.,
      1816184., 1872216., 1928248., 1799320., 1858424., 1917528., 1976632.,
      2161514., 2233442., 2305370., 2377298., 2580148., 2665348., 2750548.,
      2835748., 2804598., 2903518., 3002438., 3101358., 2666782., 2764742.,
      2862702., 2960662., 2512582., 2609582., 2706582., 2803582., 2201764.,
      2282740., 2363716., 2444692., 1819914., 1888514., 1957114., 2025714.,
      1537272., 1593048., 1648824., 1704600., 1704952., 1767896., 1830840.,
      1893784., 2126242., 2201946., 2277650., 2353354., 2603716., 2692628.,
      2781540., 2870452., 3112030., 3214598., 3317166., 3419734., 3154438.,
      3256046., 3357654., 3459262., 3180462., 3281110., 3381758., 3482406.,
      2670260., 2754948., 2839636., 2924324., 2070338., 2138618., 2206898.,
      2275178., 1707608., 1763128., 1818648., 1874168., 2099544., 2162232.,
      2224920., 2287608., 2448858., 2524242., 2599626., 2675010., 2854100.,
      2942628., 3031156., 3119684., 3253062., 3355182., 3457302., 3559422.,
      3180782., 3281942., 3383102., 3484262., 3092118., 3192318., 3292518.,
      3392718., 2464452., 2548756., 2633060., 2717364., 1747322., 1815282.,
      1883242., 1951202., 1419192., 1474456., 1529720., 1584984., 2009296.,
      2067600., 2125904., 2184208., 2154684., 2224428., 2294172., 2363916.,
      2350936., 2432504., 2514072., 2595640., 2760868., 2854644., 2948420.,
      3042196., 2830388., 2922756., 3015124., 3107492., 2883524., 2974484.,
      3065444., 3156404., 2510520., 2586712., 2662904., 2739096., 2054396.,
      2115436., 2176476., 2237516., 1621136., 1670736., 1720336., 1769936.,
      1853736., 1905352., 1956968., 2008584., 2161846., 2223070., 2284294.,
      2345518., 2511660., 2582812., 2653964., 2725116., 2766730., 2848130.,
      2929530., 3010930., 2703362., 2782906., 2862450., 2941994., 2623610.,
      2701298., 2778986., 2856674., 2125820., 2190444., 2255068., 2319692.,
      1555350., 1606590., 1657830., 1709070., 1169992., 1211624., 1253256.,
      1294888., 1692256., 1734880., 1777504., 1820128., 1795272., 1845096.,
      1894920., 1944744., 1930832., 1988112., 2045392., 2102672., 1925368.,
      1990360., 2055352., 2120344., 1737048., 1799736., 1862424., 1925112.,
      1794488., 1854872., 1915256., 1975640., 1615504., 1665104., 1714704.,
      1764304., 1378376., 1416936., 1455496., 1494056., 1133792., 1165152.,
      1196512., 1227872.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 256.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x9x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2194.,    2506.,
      2818.,    3130.,    3442.,    3754.,    4066.,    4378.,    4690.,
      5002.,    5314.,    5626.,    5938.,    6250.,    6562.,    6874.,
      6036.,    6308.,    6580.,    6852.,    4142.,    4310.,    4478.,
      4646.,    1300.,    1572.,    1844.,    2116.,    5560.,    6232.,
      6904.,    7576.,    13292.,   14492.,   15692.,   16892.,   18092.,
      19292.,   20492.,   21692.,   22892.,   24092.,   25292.,   26492.,
      27692.,   28892.,   30092.,   31292.,   32492.,   33692.,   34892.,
      36092.,   28376.,   29304.,   30232.,   31160.,   17716.,   18244.,
      18772.,   19300.,   9186.,    9882.,    10578.,   11274.,   26652.,
      28236.,   29820.,   31404.,   53166.,   55830.,   58494.,   61158.,
      63822.,   66486.,   69150.,   71814.,   74478.,   77142.,   79806.,
      82470.,   85134.,   87798.,   90462.,   93126.,   95790.,   98454.,
      101118.,  103782.,  77772.,   79740.,   81708.,   83676.,   46098.,
      47178.,   48258.,   49338.,   29064.,   30376.,   31688.,   33000.,
      74288.,   77168.,   80048.,   82928.,   136696.,  141400.,  146104.,
      150808.,  155512.,  160216.,  164920.,  169624.,  174328.,  179032.,
      183736.,  188440.,  193144.,  197848.,  202552.,  207256.,  211960.,
      216664.,  221368.,  226072.,  164976.,  168368.,  171760.,  175152.,
      94664.,   96488.,   98312.,   100136.,  65800.,   67112.,   68424.,
      69736.,   154928.,  157808.,  160688.,  163568.,  268408.,  273112.,
      277816.,  282520.,  287224.,  291928.,  296632.,  301336.,  306040.,
      310744.,  315448.,  320152.,  324856.,  329560.,  334264.,  338968.,
      343672.,  348376.,  353080.,  357784.,  259952.,  263344.,  266736.,
      270128.,  145736.,  147560.,  149384.,  151208.,  102536.,  103848.,
      105160.,  106472.,  235568.,  238448.,  241328.,  244208.,  400120.,
      404824.,  409528.,  414232.,  418936.,  423640.,  428344.,  433048.,
      437752.,  442456.,  447160.,  451864.,  456568.,  461272.,  465976.,
      470680.,  475384.,  480088.,  484792.,  489496.,  354928.,  358320.,
      361712.,  365104.,  196808.,  198632.,  200456.,  202280.,  139272.,
      140584.,  141896.,  143208.,  316208.,  319088.,  321968.,  324848.,
      531832.,  536536.,  541240.,  545944.,  550648.,  555352.,  560056.,
      564760.,  569464.,  574168.,  578872.,  583576.,  588280.,  592984.,
      597688.,  602392.,  607096.,  611800.,  616504.,  621208.,  449904.,
      453296.,  456688.,  460080.,  247880.,  249704.,  251528.,  253352.,
      168138.,  169410.,  170682.,  171954.,  368364.,  371100.,  373836.,
      376572.,  601446.,  605838.,  610230.,  614622.,  619014.,  623406.,
      627798.,  632190.,  636582.,  640974.,  645366.,  649758.,  654150.,
      658542.,  662934.,  667326.,  671718.,  676110.,  680502.,  684894.,
      485532.,  488652.,  491772.,  494892.,  261882.,  263538.,  265194.,
      266850.,  158132.,  159172.,  160212.,  161252.,  340216.,  342424.,
      344632.,  346840.,  546764.,  550268.,  553772.,  557276.,  560780.,
      564284.,  567788.,  571292.,  574796.,  578300.,  581804.,  585308.,
      588812.,  592316.,  595820.,  599324.,  602828.,  606332.,  609836.,
      613340.,  429592.,  432056.,  434520.,  436984.,  228820.,  230116.,
      231412.,  232708.,  103878.,  104494.,  105110.,  105726.,  221012.,
      222308.,  223604.,  224900.,  351658.,  353698.,  355738.,  357778.,
      359818.,  361858.,  363898.,  365938.,  367978.,  370018.,  372058.,
      374098.,  376138.,  378178.,  380218.,  382258.,  384298.,  386338.,
      388378.,  390418.,  271332.,  272756.,  274180.,  275604.,  143318.,
      144062.,  144806.,  145550.,  510.,     1318.,    2126.,    2934.,
      4292.,    5972.,    7652.,    9332.,    11602.,   14218.,   16834.,
      19450.,   22066.,   24682.,   27298.,   29914.,   32530.,   35146.,
      37762.,   40378.,   42994.,   45610.,   48226.,   50842.,   53458.,
      56074.,   58690.,   61306.,   40788.,   42596.,   44404.,   46212.,
      23054.,   23990.,   24926.,   25862.,   23764.,   25572.,   27380.,
      29188.,   56632.,   60376.,   64120.,   67864.,   99116.,   104924.,
      110732.,  116540.,  122348.,  128156.,  133964.,  139772.,  145580.,
      151388.,  157196.,  163004.,  168812.,  174620.,  180428.,  186236.,
      192044.,  197852.,  203660.,  209468.,  140888.,  144888.,  148888.,
      152888.,  77044.,   79108.,   81172.,   83236.,   75138.,   78138.,
      81138.,   84138.,   167772.,  173964.,  180156.,  186348.,  278670.,
      288246.,  297822.,  307398.,  316974.,  326550.,  336126.,  345702.,
      355278.,  364854.,  374430.,  384006.,  393582.,  403158.,  412734.,
      422310.,  431886.,  441462.,  451038.,  460614.,  311052.,  317628.,
      324204.,  330780.,  167346.,  170730.,  174114.,  177498.,  160008.,
      164392.,  168776.,  173160.,  348464.,  357488.,  366512.,  375536.,
      566392.,  580312.,  594232.,  608152.,  622072.,  635992.,  649912.,
      663832.,  677752.,  691672.,  705592.,  719512.,  733432.,  747352.,
      761272.,  775192.,  789112.,  803032.,  816952.,  830872.,  562032.,
      571568.,  581104.,  590640.,  299336.,  304232.,  309128.,  314024.,
      282760.,  287144.,  291528.,  295912.,  601136.,  610160.,  619184.,
      628208.,  956152.,  970072.,  983992.,  997912.,  1011832., 1025752.,
      1039672., 1053592., 1067512., 1081432., 1095352., 1109272., 1123192.,
      1137112., 1151032., 1164952., 1178872., 1192792., 1206712., 1220632.,
      829040.,  838576.,  848112.,  857648.,  436424.,  441320.,  446216.,
      451112.,  405512.,  409896.,  414280.,  418664.,  853808.,  862832.,
      871856.,  880880.,  1345912., 1359832., 1373752., 1387672., 1401592.,
      1415512., 1429432., 1443352., 1457272., 1471192., 1485112., 1499032.,
      1512952., 1526872., 1540792., 1554712., 1568632., 1582552., 1596472.,
      1610392., 1096048., 1105584., 1115120., 1124656., 573512.,  578408.,
      583304.,  588200.,  528264.,  532648.,  537032.,  541416.,  1106480.,
      1115504., 1124528., 1133552., 1735672., 1749592., 1763512., 1777432.,
      1791352., 1805272., 1819192., 1833112., 1847032., 1860952., 1874872.,
      1888792., 1902712., 1916632., 1930552., 1944472., 1958392., 1972312.,
      1986232., 2000152., 1363056., 1372592., 1382128., 1391664., 710600.,
      715496.,  720392.,  725288.,  492138.,  495714.,  499290.,  502866.,
      1025580., 1032924., 1040268., 1047612., 1601094., 1612398., 1623702.,
      1635006., 1646310., 1657614., 1668918., 1680222., 1691526., 1702830.,
      1714134., 1725438., 1736742., 1748046., 1759350., 1770654., 1781958.,
      1793262., 1804566., 1815870., 1234908., 1242636., 1250364., 1258092.,
      641178.,  645138.,  649098.,  653058.,  395636.,  398212.,  400788.,
      403364.,  821368.,  826648.,  831928.,  837208.,  1277708., 1285820.,
      1293932., 1302044., 1310156., 1318268., 1326380., 1334492., 1342604.,
      1350716., 1358828., 1366940., 1375052., 1383164., 1391276., 1399388.,
      1407500., 1415612., 1423724., 1431836., 972184.,  977720.,  983256.,
      988792.,  503188.,  506020.,  508852.,  511684.,  233382.,  234766.,
      236150.,  237534.,  483092.,  485924.,  488756.,  491588.,  749386.,
      753730.,  758074.,  762418.,  766762.,  771106.,  775450.,  779794.,
      784138.,  788482.,  792826.,  797170.,  801514.,  805858.,  810202.,
      814546.,  818890.,  823234.,  827578.,  831922.,  564132.,  567092.,
      570052.,  573012.,  291254.,  292766.,  294278.,  295790.,  990.,
      2566.,    4142.,    5718.,    8324.,    11540.,   14756.,   17972.,
      22258.,   27178.,   32098.,   37018.,   41938.,   46858.,   51778.,
      56698.,   61618.,   66538.,   71458.,   76378.,   81298.,   86218.,
      91138.,   96058.,   100978.,  105898.,  110818.,  115738.,  75540.,
      78884.,   82228.,   85572.,   41966.,   43670.,   45374.,   47078.,
      46228.,   49572.,   52916.,   56260.,   107704.,  114520.,  121336.,
      128152.,  184940.,  195356.,  205772.,  216188.,  226604.,  237020.,
      247436.,  257852.,  268268.,  278684.,  289100.,  299516.,  309932.,
      320348.,  330764.,  341180.,  351596.,  362012.,  372428.,  382844.,
      253400.,  260472.,  267544.,  274616.,  136372.,  139972.,  143572.,
      147172.,  141090.,  146394.,  151698.,  157002.,  308892.,  319692.,
      330492.,  341292.,  504174.,  520662.,  537150.,  553638.,  570126.,
      586614.,  603102.,  619590.,  636078.,  652566.,  669054.,  685542.,
      702030.,  718518.,  735006.,  751494.,  767982.,  784470.,  800958.,
      817446.,  544332.,  555516.,  566700.,  577884.,  288594.,  294282.,
      299970.,  305658.,  290952.,  298408.,  305864.,  313320.,  622640.,
      637808.,  652976.,  668144.,  996088.,  1019224., 1042360., 1065496.,
      1088632., 1111768., 1134904., 1158040., 1181176., 1204312., 1227448.,
      1250584., 1273720., 1296856., 1319992., 1343128., 1366264., 1389400.,
      1412536., 1435672., 959088.,  974768.,  990448.,  1006128., 504008.,
      511976.,  519944.,  527912.,  499720.,  507176.,  514632.,  522088.,
      1047344., 1062512., 1077680., 1092848., 1643896., 1667032., 1690168.,
      1713304., 1736440., 1759576., 1782712., 1805848., 1828984., 1852120.,
      1875256., 1898392., 1921528., 1944664., 1967800., 1990936., 2014072.,
      2037208., 2060344., 2083480., 1398128., 1413808., 1429488., 1445168.,
      727112.,  735080.,  743048.,  751016.,  708488.,  715944.,  723400.,
      730856.,  1472048., 1487216., 1502384., 1517552., 2291704., 2314840.,
      2337976., 2361112., 2384248., 2407384., 2430520., 2453656., 2476792.,
      2499928., 2523064., 2546200., 2569336., 2592472., 2615608., 2638744.,
      2661880., 2685016., 2708152., 2731288., 1837168., 1852848., 1868528.,
      1884208., 950216.,  958184.,  966152.,  974120.,  917256.,  924712.,
      932168.,  939624.,  1896752., 1911920., 1927088., 1942256., 2939512.,
      2962648., 2985784., 3008920., 3032056., 3055192., 3078328., 3101464.,
      3124600., 3147736., 3170872., 3194008., 3217144., 3240280., 3263416.,
      3286552., 3309688., 3332824., 3355960., 3379096., 2276208., 2291888.,
      2307568., 2323248., 1173320., 1181288., 1189256., 1197224., 816138.,
      822018.,  827898.,  833778.,  1682796., 1694748., 1706700., 1718652.,
      2600742., 2618958., 2637174., 2655390., 2673606., 2691822., 2710038.,
      2728254., 2746470., 2764686., 2782902., 2801118., 2819334., 2837550.,
      2855766., 2873982., 2892198., 2910414., 2928630., 2946846., 1984284.,
      1996620., 2008956., 2021292., 1020474., 1026738., 1033002., 1039266.,
      633140.,  637252.,  641364.,  645476.,  1302520., 1310872., 1319224.,
      1327576., 2008652., 2021372., 2034092., 2046812., 2059532., 2072252.,
      2084972., 2097692., 2110412., 2123132., 2135852., 2148572., 2161292.,
      2174012., 2186732., 2199452., 2212172., 2224892., 2237612., 2250332.,
      1514776., 1523384., 1531992., 1540600., 777556.,  781924.,  786292.,
      790660.,  362886.,  365038.,  367190.,  369342.,  745172.,  749540.,
      753908.,  758276.,  1147114., 1153762., 1160410., 1167058., 1173706.,
      1180354., 1187002., 1193650., 1200298., 1206946., 1213594., 1220242.,
      1226890., 1233538., 1240186., 1246834., 1253482., 1260130., 1266778.,
      1273426., 856932.,  861428.,  865924.,  870420.,  439190.,  441470.,
      443750.,  446030.};
  const std::array<int, 4> in_shape = {{3, 10, 9, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2220.,   3070.,   4046.,   5152.,   5558.,   5964.,   6370.,   5930.,
      5340.,   4596.,   4600.,   6225.,   8050.,   10080.,  10710.,  11340.,
      11970.,  10975.,  9750.,   8290.,   8270.,   11035.,  14091.,  17444.,
      18347.,  19250.,  20153.,  18285.,  16090.,  13562.,  13510.,  17850.,
      22589.,  27734.,  28959.,  30184.,  31409.,  28280.,  24710.,  20692.,
      20090.,  26250.,  32879.,  39984.,  41209.,  42434.,  43659.,  38990.,
      33810.,  28112.,  26670.,  34650.,  43169.,  52234.,  53459.,  54684.,
      55909.,  49700.,  42910.,  35532.,  33250.,  43050.,  53459.,  64484.,
      65709.,  66934.,  68159.,  60410.,  52010.,  42952.,  38810.,  49915.,
      61593.,  73850.,  75047.,  76244.,  77441.,  68235.,  58420.,  47990.,
      41400.,  53025.,  65170.,  77840.,  78960.,  80080.,  81200.,  71275.,
      60800.,  49770.,  40740.,  52030.,  63770.,  75964.,  76958.,  77952.,
      78946.,  69110.,  58800.,  48012.,  23020.,  30070.,  37646.,  45752.,
      46158.,  46564.,  46970.,  41930.,  36340.,  30196.,  37600.,  48725.,
      60550.,  73080.,  73710.,  74340.,  74970.,  66475.,  57250.,  47290.,
      56270.,  72535.,  89691.,  107744., 108647., 109550., 110453., 97485.,
      83590.,  68762.,  79310.,  101850., 125489., 150234., 151459., 152684.,
      153909., 135380., 115710., 94892.,  85890.,  110250., 135779., 162484.,
      163709., 164934., 166159., 146090., 124810., 102312., 92470.,  118650.,
      146069., 174734., 175959., 177184., 178409., 156800., 133910., 109732.,
      99050.,  127050., 156359., 186984., 188209., 189434., 190659., 167510.,
      143010., 117152., 103610., 132415., 162393., 193550., 194747., 195944.,
      197141., 172635., 146920., 119990., 102400., 130525., 159670., 189840.,
      190960., 192080., 193200., 168775., 143300., 116770., 95140.,  121030.,
      147770., 175364., 176358., 177352., 178346., 155510., 131800., 107212.,
      43820.,  57070.,  71246.,  86352.,  86758.,  87164.,  87570.,  77930.,
      67340.,  55796.,  70600.,  91225.,  113050., 136080., 136710., 137340.,
      137970., 121975., 104750., 86290.,  104270., 134035., 165291., 198044.,
      198947., 199850., 200753., 176685., 151090., 123962., 145110., 185850.,
      228389., 272734., 273959., 275184., 276409., 242480., 206710., 169092.,
      151690., 194250., 238679., 284984., 286209., 287434., 288659., 253190.,
      215810., 176512., 158270., 202650., 248969., 297234., 298459., 299684.,
      300909., 263900., 224910., 183932., 164850., 211050., 259259., 309484.,
      310709., 311934., 313159., 274610., 234010., 191352., 168410., 214915.,
      263193., 313250., 314447., 315644., 316841., 277035., 235420., 191990.,
      163400., 208025., 254170., 301840., 302960., 304080., 305200., 266275.,
      225800., 183770., 149540., 190030., 231770., 274764., 275758., 276752.,
      277746., 241910., 204800., 166412.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     10.,    20.,    30.,    40.,    50.,    52.,    45.,
      28.,    13.,    41.,    86.,    150.,   186.,   222.,   258.,   239.,
      191.,   112.,   64.,    167.,   312.,   502.,   580.,   658.,   736.,
      645.,   494.,   280.,   182.,   438.,   772.,   1188.,  1324.,  1460.,
      1596.,  1354.,  1010.,  560.,   378.,   858.,   1444.,  2140.,  2276.,
      2412.,  2548.,  2110.,  1542.,  840.,   574.,   1278.,  2116.,  3092.,
      3228.,  3364.,  3500.,  2866.,  2074.,  1120.,  770.,   1698.,  2788.,
      4044.,  4180.,  4316.,  4452.,  3622.,  2606.,  1400.,  916.,   1967.,
      3156.,  4486.,  4612.,  4738.,  4864.,  3885.,  2750.,  1456.,  855.,
      1811.,  2870.,  4034.,  4134.,  4234.,  4334.,  3425.,  2401.,  1260.,
      559.,   1174.,  1846.,  2576.,  2634.,  2692.,  2750.,  2158.,  1503.,
      784.,   17.,    52.,    106.,   180.,   254.,   328.,   402.,   340.,
      253.,   140.,   157.,   361.,   614.,   918.,   1082.,  1246.,  1410.,
      1151.,  831.,   448.,   448.,   983.,   1608.,  2326.,  2596.,  2866.,
      3136.,  2517.,  1790.,  952.,   918.,   1974.,  3172.,  4516.,  4908.,
      5300.,  5692.,  4522.,  3186.,  1680.,  1562.,  3290.,  5188.,  7260.,
      7652.,  8044.,  8436.,  6622.,  4614.,  2408.,  2206.,  4606.,  7204.,
      10004., 10396., 10788., 11180., 8722.,  6042.,  3136.,  2850.,  5922.,
      9220.,  12748., 13140., 13532., 13924., 10822., 7470.,  3864.,  2644.,
      5471.,  8484.,  11686., 12004., 12322., 12640., 9789.,  6734.,  3472.,
      2119.,  4371.,  6758.,  9282.,  9510.,  9738.,  9966.,  7697.,  5281.,
      2716.,  1247.,  2566.,  3958.,  5424.,  5546.,  5668.,  5790.,  4462.,
      3055.,  1568.,  33.,    100.,   202.,   340.,   478.,   616.,   754.,
      628.,   461.,   252.,   301.,   681.,   1142.,  1686.,  1978.,  2270.,
      2562.,  2063.,  1471.,  784.,   832.,   1799.,  2904.,  4150.,  4612.,
      5074.,  5536.,  4389.,  3086.,  1624.,  1654.,  3510.,  5572.,  7844.,
      8492.,  9140.,  9788.,  7690.,  5362.,  2800.,  2746.,  5722.,  8932.,
      12380., 13028., 13676., 14324., 11134., 7686.,  3976.,  3838.,  7934.,
      12292., 16916., 17564., 18212., 18860., 14578., 10010., 5152.,  4930.,
      10146., 15652., 21452., 22100., 22748., 23396., 18022., 12334., 6328.,
      4372.,  8975.,  13812., 18886., 19396., 19906., 20416., 15693., 10718.,
      5488.,  3383.,  6931.,  10646., 14530., 14886., 15242., 15598., 11969.,
      8161.,  4172.,  1935.,  3958.,  6070.,  8272.,  8458.,  8644.,  8830.,
      6766.,  4607.,  2352.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      16800.,   23320.,   30832.,   39368.,   42560.,   45752.,   48944.,
      45664.,   41200.,   35520.,   35260.,   47825.,   61970.,   77735.,
      82705.,   87675.,   92645.,   85070.,   75675.,   64420.,   63904.,
      85400.,   109200.,  135352.,  142492.,  149632.,  156772.,  142392.,
      125420.,  105808.,  104972.,  138845.,  175882.,  216139.,  225841.,
      235543.,  245245.,  220990.,  193235.,  161924.,  157052.,  205345.,
      257362.,  313159.,  322861.,  332563.,  342265.,  305830.,  265335.,
      220724.,  209132.,  271845.,  338842.,  410179.,  419881.,  429583.,
      439285.,  390670.,  337435.,  279524.,  261212.,  338345.,  420322.,
      507199.,  516901.,  526603.,  536305.,  475510.,  409535.,  338324.,
      305968.,  393620.,  485832.,  582652.,  592144.,  601636.,  611128.,
      538608.,  461240.,  378976.,  327100.,  419025.,  515090.,  615335.,
      624225.,  633115.,  642005.,  563630.,  480875.,  393700.,  322368.,
      411760.,  504736.,  601328.,  609224.,  617120.,  625016.,  547216.,
      465640.,  380256.,  180000.,  235320.,  294832.,  358568.,  361760.,
      364952.,  368144.,  328864.,  285200.,  237120.,  295260.,  382825.,
      475970.,  574735.,  579705.,  584675.,  589645.,  523070.,  450675.,
      372420.,  443104.,  571400.,  706800.,  849352.,  856492.,  863632.,
      870772.,  768792.,  659420.,  542608.,  625772.,  803845.,  990682.,
      1186339., 1196041., 1205743., 1215445., 1069390., 914235.,  749924.,
      677852.,  870345.,  1072162., 1283359., 1293061., 1302763., 1312465.,
      1154230., 986335.,  808724.,  729932.,  936845.,  1153642., 1380379.,
      1390081., 1399783., 1409485., 1239070., 1058435., 867524.,  782012.,
      1003345., 1235122., 1477399., 1487101., 1496803., 1506505., 1323910.,
      1130535., 926324.,  819568.,  1047620., 1285032., 1531852., 1541344.,
      1550836., 1560328., 1366608., 1163240., 950176.,  811100.,  1034025.,
      1265090., 1504335., 1513225., 1522115., 1531005., 1337630., 1135875.,
      925700.,  754368.,  959760.,  1171936., 1390928., 1398824., 1406720.,
      1414616., 1233616., 1045640., 850656.,  343200.,  447320.,  558832.,
      677768.,  680960.,  684152.,  687344.,  612064.,  529200.,  438720.,
      555260.,  717825.,  889970.,  1071735., 1076705., 1081675., 1086645.,
      961070.,  825675.,  680420.,  822304.,  1057400., 1304400., 1563352.,
      1570492., 1577632., 1584772., 1395192., 1193420., 979408.,  1146572.,
      1468845., 1805482., 2156539., 2166241., 2175943., 2185645., 1917790.,
      1635235., 1337924., 1198652., 1535345., 1886962., 2253559., 2263261.,
      2272963., 2282665., 2002630., 1707335., 1396724., 1250732., 1601845.,
      1968442., 2350579., 2360281., 2369983., 2379685., 2087470., 1779435.,
      1455524., 1302812., 1668345., 2049922., 2447599., 2457301., 2467003.,
      2476705., 2172310., 1851535., 1514324., 1333168., 1701620., 2084232.,
      2481052., 2490544., 2500036., 2509528., 2194608., 1865240., 1521376.,
      1295100., 1649025., 2015090., 2393335., 2402225., 2411115., 2420005.,
      2111630., 1790875., 1457700., 1186368., 1507760., 1839136., 2180528.,
      2188424., 2196320., 2204216., 1920016., 1625640., 1321056.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      22.,     59.,     124.,    196.,    268.,    340.,    365.,
      322.,    203.,    76.,     264.,    580.,    1040.,   1312.,   1584.,
      1856.,   1744.,   1408.,   832.,    437.,    1174.,   2235.,   3644.,
      4244.,   4844.,   5444.,   4809.,   3706.,   2111.,   1312.,   3200.,
      5696.,   8832.,   9888.,   10944.,  12000.,  10232.,  7664.,   4264.,
      2824.,   6448.,   10904.,  16224.,  17280.,  18336.,  19392.,  16112.,
      11808.,  6448.,   4336.,   9696.,   16112.,  23616.,  24672.,  25728.,
      26784.,  21992.,  15952.,  8632.,   5848.,   12944.,  21320.,  31008.,
      32064.,  33120.,  34176.,  27872.,  20096.,  10816.,  7061.,   15190.,
      24411.,  34748.,  35732.,  36716.,  37700.,  30153.,  21370.,  11327.,
      6640.,   14080.,  22336.,  31424.,  32208.,  32992.,  33776.,  26716.,
      18744.,  9844.,   4361.,   9166.,   14423.,  20140.,  20596.,  21052.,
      21508.,  16889.,  11770.,  6143.,   101.,    342.,    731.,    1276.,
      1860.,   2444.,   3028.,   2573.,   1922.,   1067.,   1164.,   2696.,
      4612.,   6928.,   8224.,   9520.,   10816.,  8848.,   6400.,   3456.,
      3413.,   7510.,   12315.,  17852.,  19988.,  22124.,  24260.,  19497.,
      13882.,  7391.,   7072.,   15232.,  24512.,  34944.,  38048.,  41152.,
      44256.,  35192.,  24816.,  13096.,  12168.,  25648.,  40472.,  56672.,
      59776.,  62880.,  65984.,  51824.,  36128.,  18864.,  17264.,  36064.,
      56432.,  78400.,  81504.,  84608.,  87712.,  68456.,  47440.,  24632.,
      22360.,  46480.,  72392.,  100128., 103232., 106336., 109440., 85088.,
      58752.,  30400.,  20789.,  43030.,  66747.,  91964.,  94484.,  97004.,
      99524.,  77097.,  53050.,  27359.,  16688.,  34432.,  53248.,  73152.,
      74960.,  76768.,  78576.,  60700.,  41656.,  21428.,  9833.,   20238.,
      31223.,  42796.,  43764.,  44732.,  45700.,  35225.,  24122.,  12383.,
      197.,    662.,    1403.,   2428.,   3524.,   4620.,   5716.,   4781.,
      3522.,   1931.,   2252.,   5128.,   8644.,   12816.,  15136.,  17456.,
      19776.,  15952.,  11392.,  6080.,   6389.,   13846.,  22395.,  32060.,
      35732.,  39404.,  43076.,  34185.,  24058.,  12671.,  12832.,  27264.,
      43328.,  61056.,  66208.,  71360.,  76512.,  60152.,  41968.,  21928.,
      21512.,  44848.,  70040.,  97120.,  102272., 107424., 112576., 87536.,
      60448.,  31280.,  30192.,  62432.,  96752.,  133184., 138336., 143488.,
      148640., 114920., 78928.,  40632.,  38872.,  80016.,  123464., 169248.,
      174400., 179552., 184704., 142304., 97408.,  49984.,  34517.,  70870.,
      109083., 149180., 153236., 157292., 161348., 124041., 84730.,  43391.,
      26736.,  54784.,  84160.,  114880., 117712., 120544., 123376., 94684.,
      64568.,  33012.,  15305.,  31310.,  48023.,  65452.,  66932.,  68412.,
      69892.,  53561.,  36474.,  18623.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130592.,   181640.,   240560.,   307608.,   332920.,   358232.,
      383544.,   358256.,   323560.,   279200.,   275960.,   374750.,
      486100.,   610330.,   649810.,   689290.,   728770.,   669700.,
      596150.,   507800.,   502256.,   671740.,   859560.,   1066100.,
      1122884.,  1179668.,  1236452.,  1123656.,  990220.,   835760.,
      827400.,   1095010.,  1387820.,  1706278.,  1783502.,  1860726.,
      1937950.,  1747004.,  1528170.,  1281000.,  1241800.,  1624210.,
      2036300.,  2478518.,  2555742.,  2632966.,  2710190.,  2422364.,
      2102170.,  1749160.,  1656200.,  2153410.,  2684780.,  3250758.,
      3327982.,  3405206.,  3482430.,  3097724.,  2676170.,  2217320.,
      2070600.,  2682610.,  3333260.,  4022998.,  4100222.,  4177446.,
      4254670.,  3773084.,  3250170.,  2685480.,  2429744.,  3126220.,
      3859080.,  4628708.,  4704308.,  4779908.,  4855508.,  4279848.,
      3665500.,  3012080.,  2600440.,  3331550.,  4095700.,  4893210.,
      4964050.,  5034890.,  5105730.,  4482820.,  3824950.,  3131800.,
      2564768.,  3276200.,  4016240.,  4785144.,  4848088.,  4911032.,
      4973976.,  4355120.,  3706120.,  3026720.,  1423392.,  1861640.,
      2333360.,  2838808.,  2864120.,  2889432.,  2914744.,  2604656.,
      2259560.,  1879200.,  2339960.,  3034750.,  3774100.,  4558330.,
      4597810.,  4637290.,  4676770.,  4149700.,  3576150.,  2955800.,
      3516656.,  4535740.,  5611560.,  6744500.,  6801284.,  6858068.,
      6914852.,  6106056.,  5238220.,  4310960.,  4971400.,  6387010.,
      7872620.,  9428678.,  9505902.,  9583126.,  9660350.,  8500604.,
      7268170.,  5962600.,  5385800.,  6916210.,  8521100.,  10200918.,
      10278142., 10355366., 10432590., 9175964.,  7842170.,  6430760.,
      5800200.,  7445410.,  9169580.,  10973158., 11050382., 11127606.,
      11204830., 9851324.,  8416170.,  6898920.,  6214600.,  7974610.,
      9818060.,  11745398., 11822622., 11899846., 11977070., 10526684.,
      8990170.,  7367080.,  6519344.,  8334220.,  10223880., 12188708.,
      12264308., 12339908., 12415508., 10875048., 9257500.,  7562480.,
      6456440.,  8231550.,  10071700., 11977210., 12048050., 12118890.,
      12189730., 10650820., 9044950.,  7371800.,  6007968.,  7644200.,
      9334640.,  11079544., 11142488., 11205432., 11268376., 9827120.,
      8330120.,  6777120.,  2716192.,  3541640.,  4426160.,  5370008.,
      5395320.,  5420632.,  5445944.,  4851056.,  4195560.,  3479200.,
      4403960.,  5694750.,  7062100.,  8506330.,  8545810.,  8585290.,
      8624770.,  7629700.,  6556150.,  5403800.,  6531056.,  8399740.,
      10363560., 12412660., 12442820., 12456596., 12453988., 10883656.,
      9215884.,  7450288.,  8976136.,  11463970., 14050220., 16610406.,
      16546318., 16465846., 16368990., 14185148., 11900202., 9513704.,
      8792520.,  11204690., 13703372., 16049398., 15870622., 15675462.,
      15463918., 13308124., 11063130., 8728488.,  8150152.,  10371970.,
      12668396., 14685574., 14392110., 14082262., 13756030., 11742972.,
      9652618.,  7484520.,  7049032.,  8965810.,  10945292., 12518934.,
      12110782., 11686246., 11245326., 9489692.,  7668666.,  5781800.,
      5464368.,  6947660.,  8478600.,  9473892.,  8949428.,  8408580.,
      7851348.,  6468392.,  5035484.,  3552240.,  3332856.,  4243230.,
      5185108.,  5460442.,  4816530.,  4156234.,  3479554.,  2605700.,
      1698422.,  757400.,   636576.,   830120.,   1037936.,  1260280.,
      1323224.,  1386168.,  1449112.,  1290800.,  1116680.,  926496.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 1024.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      140.,     394.,     856.,     1400.,    1944.,    2488.,
      2722.,    2428.,    1542.,    500.,     1864.,    4220.,    7696.,
      9808.,    11920.,   14032.,   13292.,   10792.,   6404.,    3202.,
      8756.,    16854.,   27688.,   32392.,   37096.,   41800.,   37086.,
      28676.,   16378.,   9928.,    24400.,   43672.,   68000.,   76320.,
      84640.,   92960.,   79480.,   59664.,   33256.,   21800.,   49936.,
      84664.,   126240.,  134560.,  142880.,  151200.,  125848.,  92368.,
      50504.,   33672.,   75472.,   125656.,  184480.,  192800.,  201120.,
      209440.,  172216.,  125072.,  67752.,   45544.,   101008.,  166648.,
      242720.,  251040.,  259360.,  267680.,  218584.,  157776.,  85000.,
      55426.,   119348.,  191958.,  273448.,  281224.,  289000.,  296776.,
      237534.,  168452.,  89338.,   52324.,   111016.,  176204.,  248016.,
      254224.,  260432.,  266640.,  211004.,  148104.,  77812.,   34446.,
      72428.,   114010.,  159256.,  162872.,  166488.,  170104.,  133618.,
      93148.,   48630.,   670.,     2444.,    5386.,    9560.,    14200.,
      18840.,   23480.,   20002.,   14972.,   8326.,    8948.,    20808.,
      35708.,   53776.,   64080.,   74384.,   84688.,   69356.,   50216.,
      27140.,   26626.,   58676.,   96342.,   139816.,  156808.,  173800.,
      190792.,  153438.,  109316.,  58234.,   55496.,   119632.,  192664.,
      274848.,  299552.,  324256.,  348960.,  277624.,  195856.,  103400.,
      96040.,   202512.,  319672.,  447776.,  472480.,  497184.,  521888.,
      410008.,  285904.,  149320.,  136584.,  285392.,  446680.,  620704.,
      645408.,  670112.,  694816.,  542392.,  375952.,  195240.,  177128.,
      368272.,  573688.,  793632.,  818336.,  843040.,  867744.,  674776.,
      466000.,  241160.,  164866.,  341300.,  529494.,  729640.,  749704.,
      769768.,  789832.,  611934.,  421124.,  217210.,  132452.,  273320.,
      422732.,  580816.,  595216.,  609616.,  624016.,  482108.,  330888.,
      170228.,  78094.,   160748.,  248026.,  339992.,  347704.,  355416.,
      363128.,  279922.,  191708.,  98422.,   1310.,    4748.,    10378.,
      18264.,   27000.,   35736.,   44472.,   37282.,   27516.,   15110.,
      17396.,   39752.,   67196.,   99856.,   118352.,  136848.,  155344.,
      125420.,  89640.,   47876.,   50050.,   108596.,  175830.,  251944.,
      281224.,  310504.,  339784.,  269790.,  189956.,  100090.,  101064.,
      214864.,  341656.,  481696.,  522784.,  563872.,  604960.,  475768.,
      332048.,  173544.,  170280.,  355088.,  554680.,  769312.,  810400.,
      851488.,  892576.,  694168.,  479440.,  248136.,  239496.,  495312.,
      767704.,  1056928., 1098016., 1139104., 1180192., 912568.,  626832.,
      322728.,  308712.,  635536.,  980728.,  1344544., 1385632., 1426720.,
      1467808., 1130968., 774224.,  397320.,  274306.,  563252.,  867030.,
      1185832., 1218184., 1250536., 1282888., 986334.,  673796.,  345082.,
      212580.,  435624.,  669260.,  913616.,  936208.,  958800.,  981392.,
      753212.,  513672.,  262644.,  121742.,  249068.,  382042.,  520728.,
      532536.,  544344.,  556152.,  426226.,  290268.,  148214.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      4160.,   4440.,   5780.,   6140.,   7648.,   8092.,   9772.,   10304.,
      10556.,  11116.,  11340.,  11928.,  12124.,  12740.,  11320.,  11860.,
      10220.,  10680.,  8816.,   9192.,   8750.,   9200.,   11875.,  12450.,
      15395.,  16100.,  19320.,  20160.,  20545.,  21420.,  21770.,  22680.,
      22995.,  23940.,  21125.,  21950.,  18800.,  19500.,  16010.,  16580.,
      15880.,  16540.,  21230.,  22070.,  27156.,  28182.,  33670.,  34888.,
      35434.,  36694.,  37198.,  38500.,  38962.,  40306.,  35400.,  36570.,
      31190.,  32180.,  26320.,  27124.,  26110.,  27020.,  34545.,  35700.,
      43771.,  45178.,  53802.,  55468.,  56203.,  57918.,  58604.,  60368.,
      61005.,  62818.,  54985.,  56560.,  48090.,  49420.,  40306.,  41384.,
      38990.,  40180.,  50995.,  52500.,  63931.,  65758.,  77812.,  79968.,
      80213.,  82418.,  82614.,  84868.,  85015.,  87318.,  75985.,  77980.,
      65940.,  67620.,  54866.,  56224.,  51870.,  53340.,  67445.,  69300.,
      84091.,  86338.,  101822., 104468., 104223., 106918., 106624., 109368.,
      109025., 111818., 96985.,  99400.,  83790.,  85820.,  69426.,  71064.,
      64750.,  66500.,  83895.,  86100.,  104251., 106918., 125832., 128968.,
      128233., 131418., 130634., 133868., 133035., 136318., 117985., 120820.,
      101640., 104020., 83986.,  85904.,  76000.,  77620.,  97790.,  99830.,
      120720., 123186., 144802., 147700., 147154., 150094., 149506., 152488.,
      151858., 154882., 133860., 136470., 114650., 116840., 94216.,  95980.,
      81350.,  82800.,  104225., 106050., 128135., 130340., 153090., 155680.,
      155295., 157920., 157500., 160160., 159705., 162400., 140225., 142550.,
      119650., 121600., 97970.,  99540.,  80240.,  81480.,  102500., 104060.,
      125656., 127540., 149716., 151928., 151676., 153916., 153636., 155904.,
      155596., 157892., 136240., 138220., 115940., 117600., 94688.,  96024.,
      44160.,  46040.,  57780.,  60140.,  72448.,  75292.,  88172.,  91504.,
      88956.,  92316.,  89740.,  93128.,  90524.,  93940.,  80920.,  83860.,
      70220.,  72680.,  58416.,  60392.,  72750.,  75200.,  94375.,  97450.,
      117395., 121100., 141820., 146160., 143045., 147420., 144270., 148680.,
      145495., 149940., 129125., 132950., 111300., 114500., 92010.,  94580.,
      109480., 112540., 141230., 145070., 174756., 179382., 210070., 215488.,
      211834., 217294., 213598., 219100., 215362., 220906., 190200., 194970.,
      163190., 167180., 134320., 137524., 154910., 158620., 199045., 203700.,
      245371., 250978., 293902., 300468., 296303., 302918., 298704., 305368.,
      301105., 307818., 264985., 270760., 226590., 231420., 185906., 189784.,
      167790., 171780., 215495., 220500., 265531., 271558., 317912., 324968.,
      320313., 327418., 322714., 329868., 325115., 332318., 285985., 292180.,
      244440., 249620., 200466., 204624., 180670., 184940., 231945., 237300.,
      285691., 292138., 341922., 349468., 344323., 351918., 346724., 354368.,
      349125., 356818., 306985., 313600., 262290., 267820., 215026., 219464.,
      193550., 198100., 248395., 254100., 305851., 312718., 365932., 373968.,
      368333., 376418., 370734., 378868., 373135., 381318., 327985., 335020.,
      280140., 286020., 229586., 234304., 203200., 207220., 259790., 264830.,
      318720., 324786., 380002., 387100., 382354., 389494., 384706., 391888.,
      387058., 394282., 339060., 345270., 288650., 293840., 235816., 239980.,
      201350., 204800., 256725., 261050., 314135., 319340., 373590., 379680.,
      375795., 381920., 378000., 384160., 380205., 386400., 332225., 337550.,
      282150., 286600., 229970., 233540., 187440., 190280., 238500., 242060.,
      291256., 295540., 345716., 350728., 347676., 352716., 349636., 354704.,
      351596., 356692., 306640., 311020., 259940., 263600., 211488., 214424.,
      84160.,  87640.,  109780., 114140., 137248., 142492., 166572., 172704.,
      167356., 173516., 168140., 174328., 168924., 175140., 150520., 155860.,
      130220., 134680., 108016., 111592., 136750., 141200., 176875., 182450.,
      219395., 226100., 264320., 272160., 265545., 273420., 266770., 274680.,
      267995., 275940., 237125., 243950., 203800., 209500., 168010., 172580.,
      203080., 208540., 261230., 268070., 322356., 330582., 386470., 396088.,
      388234., 397894., 389998., 399700., 391762., 401506., 345000., 353370.,
      295190., 302180., 242320., 247924., 283710., 290220., 363545., 371700.,
      446971., 456778., 534002., 545468., 536403., 547918., 538804., 550368.,
      541205., 552818., 474985., 484960., 405090., 413420., 331506., 338184.,
      296590., 303380., 379995., 388500., 467131., 477358., 558012., 569968.,
      560413., 572418., 562814., 574868., 565215., 577318., 495985., 506380.,
      422940., 431620., 346066., 353024., 309470., 316540., 396445., 405300.,
      487291., 497938., 582022., 594468., 584423., 596918., 586824., 599368.,
      589225., 601818., 516985., 527800., 440790., 449820., 360626., 367864.,
      322350., 329700., 412895., 422100., 507451., 518518., 606032., 618968.,
      608433., 621418., 610834., 623868., 613235., 626318., 537985., 549220.,
      458640., 468020., 375186., 382704., 330400., 336820., 421790., 429830.,
      516720., 526386., 615202., 626500., 617554., 628894., 619906., 631288.,
      622258., 633682., 544260., 554070., 462650., 470840., 377416., 383980.,
      321350., 326800., 409225., 416050., 500135., 508340., 594090., 603680.,
      596295., 605920., 598500., 608160., 600705., 610400., 524225., 532550.,
      444650., 451600., 361970., 367540., 294640., 299080., 374500., 380060.,
      456856., 463540., 541716., 549528., 543676., 551516., 545636., 553504.,
      547596., 555492., 477040., 483820., 403940., 409600., 328288., 332824.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     5.,     8.,     14.,    20.,    30.,    40.,    50.,
      60.,    70.,    80.,    90.,    100.,   95.,    104.,   83.,    90.,
      52.,    56.,    20.,    26.,    68.,    82.,    148.,   172.,   264.,
      300.,   336.,   372.,   408.,   444.,   480.,   516.,   448.,   478.,
      360.,   382.,   212.,   224.,   113.,   128.,   301.,   334.,   570.,
      624.,   926.,   1004.,  1082.,  1160.,  1238.,  1316.,  1394.,  1472.,
      1227.,  1290.,  943.,   988.,   536.,   560.,   336.,   364.,   816.,
      876.,   1448.,  1544.,  2240.,  2376.,  2512.,  2648.,  2784.,  2920.,
      3056.,  3192.,  2600.,  2708.,  1944.,  2020.,  1080.,  1120.,  728.,
      756.,   1656.,  1716.,  2792.,  2888.,  4144.,  4280.,  4416.,  4552.,
      4688.,  4824.,  4960.,  5096.,  4112.,  4220.,  3008.,  3084.,  1640.,
      1680.,  1120.,  1148.,  2496.,  2556.,  4136.,  4232.,  6048.,  6184.,
      6320.,  6456.,  6592.,  6728.,  6864.,  7000.,  5624.,  5732.,  4072.,
      4148.,  2200.,  2240.,  1512.,  1540.,  3336.,  3396.,  5480.,  5576.,
      7952.,  8088.,  8224.,  8360.,  8496.,  8632.,  8768.,  8904.,  7136.,
      7244.,  5136.,  5212.,  2760.,  2800.,  1805.,  1832.,  3877.,  3934.,
      6222.,  6312.,  8846.,  8972.,  9098.,  9224.,  9350.,  9476.,  9602.,
      9728.,  7671.,  7770.,  5431.,  5500.,  2876.,  2912.,  1688.,  1710.,
      3576.,  3622.,  5668.,  5740.,  7968.,  8068.,  8168.,  8268.,  8368.,
      8468.,  8568.,  8668.,  6772.,  6850.,  4748.,  4802.,  2492.,  2520.,
      1105.,  1118.,  2321.,  2348.,  3650.,  3692.,  5094.,  5152.,  5210.,
      5268.,  5326.,  5384.,  5442.,  5500.,  4271.,  4316.,  2975.,  3006.,
      1552.,  1568.,  17.,    34.,    69.,    104.,   158.,   212.,   286.,
      360.,   434.,   508.,   582.,   656.,   730.,   804.,   623.,   680.,
      467.,   506.,   260.,   280.,   276.,   314.,   644.,   722.,   1108.,
      1228.,  1672.,  1836.,  2000.,  2164.,  2328.,  2492.,  2656.,  2820.,
      2176.,  2302.,  1576.,  1662.,  852.,   896.,   833.,   896.,   1837.,
      1966.,  3018.,  3216.,  4382.,  4652.,  4922.,  5192.,  5462.,  5732.,
      6002.,  6272.,  4827.,  5034.,  3439.,  3580.,  1832.,  1904.,  1744.,
      1836.,  3760.,  3948.,  6056.,  6344.,  8640.,  9032.,  9424.,  9816.,
      10208., 10600., 10992., 11384., 8744.,  9044.,  6168.,  6372.,  3256.,
      3360.,  3032.,  3124.,  6392.,  6580.,  10088., 10376., 14128., 14520.,
      14912., 15304., 15696., 16088., 16480., 16872., 12944., 13244., 9024.,
      9228.,  4712.,  4816.,  4320.,  4412.,  9024.,  9212.,  14120., 14408.,
      19616., 20008., 20400., 20792., 21184., 21576., 21968., 22360., 17144.,
      17444., 11880., 12084., 6168.,  6272.,  5608.,  5700.,  11656., 11844.,
      18152., 18440., 25104., 25496., 25888., 26280., 26672., 27064., 27456.,
      27848., 21344., 21644., 14736., 14940., 7624.,  7728.,  5213.,  5288.,
      10789., 10942., 16734., 16968., 23054., 23372., 23690., 24008., 24326.,
      24644., 24962., 25280., 19335., 19578., 13303., 13468., 6860.,  6944.,
      4184.,  4238.,  8632.,  8742.,  13348., 13516., 18336., 18564., 18792.,
      19020., 19248., 19476., 19704., 19932., 15220., 15394., 10444., 10562.,
      5372.,  5432.,  2465.,  2494.,  5073.,  5132.,  7826.,  7916.,  10726.,
      10848., 10970., 11092., 11214., 11336., 11458., 11580., 8831.,  8924.,
      6047.,  6110.,  3104.,  3136.,  33.,    66.,    133.,   200.,   302.,
      404.,   542.,   680.,   818.,   956.,   1094.,  1232.,  1370.,  1508.,
      1151.,  1256.,  851.,   922.,   468.,   504.,   532.,   602.,   1220.,
      1362.,  2068.,  2284.,  3080.,  3372.,  3664.,  3956.,  4248.,  4540.,
      4832.,  5124.,  3904.,  4126.,  2792.,  2942.,  1492.,  1568.,  1553.,
      1664.,  3373.,  3598.,  5466.,  5808.,  7838.,  8300.,  8762.,  9224.,
      9686.,  10148., 10610., 11072., 8427.,  8778.,  5935.,  6172.,  3128.,
      3248.,  3152.,  3308.,  6704.,  7020.,  10664., 11144., 15040., 15688.,
      16336., 16984., 17632., 18280., 18928., 19576., 14888., 15380., 10392.,
      10724., 5432.,  5600.,  5336.,  5492.,  11128., 11444., 17384., 17864.,
      24112., 24760., 25408., 26056., 26704., 27352., 28000., 28648., 21776.,
      22268., 15040., 15372., 7784.,  7952.,  7520.,  7676.,  15552., 15868.,
      24104., 24584., 33184., 33832., 34480., 35128., 35776., 36424., 37072.,
      37720., 28664., 29156., 19688., 20020., 10136., 10304., 9704.,  9860.,
      19976., 20292., 30824., 31304., 42256., 42904., 43552., 44200., 44848.,
      45496., 46144., 46792., 35552., 36044., 24336., 24668., 12488., 12656.,
      8621.,  8744.,  17701., 17950., 27246., 27624., 37262., 37772., 38282.,
      38792., 39302., 39812., 40322., 40832., 30999., 31386., 21175., 21436.,
      10844., 10976., 6680.,  6766.,  13688., 13862., 21028., 21292., 28704.,
      29060., 29416., 29772., 30128., 30484., 30840., 31196., 23668., 23938.,
      16140., 16322., 8252.,  8344.,  3825.,  3870.,  7825.,  7916.,  12002.,
      12140., 16358., 16544., 16730., 16916., 17102., 17288., 17474., 17660.,
      13391., 13532., 9119.,  9214.,  4656.,  4704.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31936.,   34144.,   44500.,   47340.,   59024.,   62528.,   75572.,
      79772.,   81788.,   86212.,   88004.,   92652.,   94220.,   99092.,
      88112.,   92384.,   79660.,   83300.,   68800.,   71776.,   67840.,
      71400.,   92225.,   96775.,   119740.,  125320.,  150465.,  157115.,
      160195.,  167125.,  169925.,  177135.,  179655.,  187145.,  165220.,
      171760.,  147175.,  152725.,  125440.,  129960.,  123872.,  129104.,
      165790.,  172450.,  212280.,  220416.,  263438.,  273098.,  277466.,
      287462.,  291494.,  301826.,  305522.,  316190.,  277800.,  287088.,
      244930.,  252790.,  206816.,  213200.,  204512.,  211736.,  270795.,
      279965.,  343364.,  354536.,  422331.,  435561.,  441441.,  455063.,
      460551.,  474565.,  479661.,  494067.,  432572.,  445088.,  378525.,
      389095.,  317408.,  325976.,  306992.,  316456.,  401695.,  413665.,
      503804.,  518336.,  613431.,  630581.,  632541.,  650083.,  651651.,
      669585.,  670761.,  689087.,  599732.,  615608.,  520625.,  533995.,
      433328.,  444136.,  409472.,  421176.,  532595.,  547365.,  664244.,
      682136.,  804531.,  825601.,  823641.,  845103.,  842751.,  864605.,
      861861.,  884107.,  766892.,  786128.,  662725.,  678895.,  549248.,
      562296.,  511952.,  525896.,  663495.,  681065.,  824684.,  845936.,
      995631.,  1020621., 1014741., 1040123., 1033851., 1059625., 1052961.,
      1079127., 934052.,  956648.,  804825.,  823795.,  665168.,  680456.,
      602240.,  615152.,  775030.,  791290.,  956904.,  976560.,  1147958.,
      1171058., 1166690., 1190126., 1185422., 1209194., 1204154., 1228262.,
      1061592., 1082400., 909370.,  926830.,  747392.,  761456.,  645520.,
      657080.,  827125.,  841675.,  1016980., 1034560., 1215165., 1235815.,
      1232735., 1253665., 1250305., 1271515., 1267875., 1289365., 1113340.,
      1131880., 950075.,  965625.,  778000.,  790520.,  637312.,  647200.,
      814180.,  826620.,  998192.,  1013216., 1189412., 1207052., 1205036.,
      1222900., 1220660., 1238748., 1236284., 1254596., 1082576., 1098368.,
      921340.,  934580.,  752512.,  763168.,  348736.,  363744.,  456500.,
      475340.,  572624.,  595328.,  697172.,  723772.,  703388.,  730212.,
      709604.,  736652.,  715820.,  743092.,  640112.,  663584.,  555660.,
      575300.,  462400.,  478176.,  575840.,  595400.,  747225.,  771775.,
      929740.,  959320.,  1123465., 1158115., 1133195., 1168125., 1142925.,
      1178135., 1152655., 1188145., 1023220., 1053760., 882175.,  907725.,
      729440.,  749960.,  867872.,  892304.,  1119790., 1150450., 1385880.,
      1422816., 1666238., 1709498., 1680266., 1723862., 1694294., 1738226.,
      1708322., 1752590., 1509000., 1547088., 1294930., 1326790., 1066016.,
      1091600., 1229312., 1258936., 1579795., 1616965., 1947764., 1992536.,
      2333331., 2385761., 2352441., 2405263., 2371551., 2424765., 2390661.,
      2444267., 2104172., 2150288., 1799525., 1838095., 1476608., 1507576.,
      1331792., 1363656., 1710695., 1750665., 2108204., 2156336., 2524431.,
      2580781., 2543541., 2600283., 2562651., 2619785., 2581761., 2639287.,
      2271332., 2320808., 1941625., 1982995., 1592528., 1625736., 1434272.,
      1468376., 1841595., 1884365., 2268644., 2320136., 2715531., 2775801.,
      2734641., 2795303., 2753751., 2814805., 2772861., 2834307., 2438492.,
      2491328., 2083725., 2127895., 1708448., 1743896., 1536752., 1573096.,
      1972495., 2018065., 2429084., 2483936., 2906631., 2970821., 2925741.,
      2990323., 2944851., 3009825., 2963961., 3029327., 2605652., 2661848.,
      2225825., 2272795., 1824368., 1862056., 1615040., 1647152., 2065030.,
      2105290., 2533704., 2582160., 3021158., 3077858., 3039890., 3096926.,
      3058622., 3115994., 3077354., 3135062., 2695992., 2745600., 2295370.,
      2336830., 1875392., 1908656., 1601520., 1629080., 2042125., 2076675.,
      2498980., 2540560., 2972165., 3020815., 2989735., 3038665., 3007305.,
      3056515., 3024875., 3074365., 2643340., 2685880., 2245075., 2280625.,
      1830000., 1858520., 1491712., 1514400., 1898180., 1926620., 2318192.,
      2352416., 2751812., 2791852., 2767436., 2807700., 2783060., 2823548.,
      2798684., 2839396., 2440976., 2475968., 2069340., 2098580., 1683712.,
      1707168., 665536.,  693344.,  868500.,  903340.,  1086224., 1128128.,
      1318772., 1367772., 1324988., 1374212., 1331204., 1380652., 1337420.,
      1387092., 1192112., 1234784., 1031660., 1067300., 856000.,  884576.,
      1083840., 1119400., 1402225., 1446775., 1739740., 1793320., 2096465.,
      2159115., 2106195., 2169125., 2115925., 2179135., 2125655., 2189145.,
      1881220., 1935760., 1617175., 1662725., 1333440., 1369960., 1611872.,
      1655504., 2073790., 2128450., 2559480., 2625216., 3069038., 3145898.,
      3083066., 3160262., 3097094., 3174626., 3111122., 3188990., 2740200.,
      2807088., 2344930., 2400790., 1925216., 1970000., 2254112., 2306136.,
      2888795., 2953965., 3552164., 3630536., 4244331., 4335961., 4263441.,
      4355463., 4282551., 4374965., 4301661., 4394467., 3775772., 3855488.,
      3220525., 3287095., 2635808., 2689176., 2356592., 2410856., 3019695.,
      3087665., 3712604., 3794336., 4435431., 4530981., 4454541., 4550483.,
      4473651., 4569985., 4492761., 4589487., 3942932., 4026008., 3362625.,
      3431995., 2751728., 2807336., 2459072., 2515576., 3150595., 3221365.,
      3873044., 3958136., 4626531., 4726001., 4645641., 4745503., 4664751.,
      4765005., 4683861., 4784507., 4110092., 4196528., 3504725., 3576895.,
      2867648., 2925496., 2561552., 2620296., 3281495., 3355065., 4033484.,
      4121936., 4817631., 4921021., 4836741., 4940523., 4855851., 4960025.,
      4874961., 4979527., 4277252., 4367048., 3646825., 3721795., 2983568.,
      3043656., 2627840., 2679152., 3355030., 3419290., 4110504., 4187760.,
      4894358., 4984658., 4913090., 5003726., 4931822., 5022794., 4950554.,
      5041862., 4330392., 4408800., 3681370., 3746830., 3003392., 3055856.,
      2557520., 2601080., 3257125., 3311675., 3980980., 4046560., 4729165.,
      4805815., 4746735., 4823665., 4764305., 4841515., 4781875., 4859365.,
      4173340., 4239880., 3540075., 3595625., 2882000., 2926520., 2346112.,
      2381600., 2982180., 3026620., 3638192., 3691616., 4314212., 4376652.,
      4329836., 4392500., 4345460., 4408348., 4361084., 4424196., 3799376.,
      3853568., 3217340., 3262580., 2614912., 2651168.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     28.,     48.,     85.,     127.,    192.,    264.,
      336.,    408.,    480.,    552.,    624.,    696.,    679.,    745.,
      604.,    656.,    383.,    413.,    118.,    162.,    448.,    552.,
      1022.,   1202.,   1872.,   2144.,   2416.,   2688.,   2960.,   3232.,
      3504.,   3776.,   3314.,   3542.,   2688.,   2856.,   1594.,   1686.,
      787.,    901.,    2156.,   2408.,   4155.,   4569.,   6832.,   7432.,
      8032.,   8632.,   9232.,   9832.,   10432.,  11032.,  9249.,   9735.,
      7148.,   7496.,   4081.,   4267.,   2460.,   2676.,   6048.,   6512.,
      10828.,  11572.,  16864.,  17920.,  18976.,  20032.,  21088.,  22144.,
      23200.,  24256.,  19828.,  20668.,  14880.,  15472.,  8292.,   8604.,
      5484.,   5700.,   12544.,  13008.,  21244.,  21988.,  31648.,  32704.,
      33760.,  34816.,  35872.,  36928.,  37984.,  39040.,  31588.,  32428.,
      23168.,  23760.,  12660.,  12972.,  8508.,   8724.,   19040.,  19504.,
      31660.,  32404.,  46432.,  47488.,  48544.,  49600.,  50656.,  51712.,
      52768.,  53824.,  43348.,  44188.,  31456.,  32048.,  17028.,  17340.,
      11532.,  11748.,  25536.,  26000.,  42076.,  42820.,  61216.,  62272.,
      63328.,  64384.,  65440.,  66496.,  67552.,  68608.,  55108.,  55948.,
      39744.,  40336.,  21396.,  21708.,  13963.,  14173.,  30044.,  30488.,
      48291.,  48993.,  68752.,  69736.,  70720.,  71704.,  72688.,  73672.,
      74656.,  75640.,  59721.,  60495.,  42332.,  42872.,  22441.,  22723.,
      13150.,  13322.,  27888.,  28248.,  44246.,  44810.,  62256.,  63040.,
      63824.,  64608.,  65392.,  66176.,  66960.,  67744.,  52970.,  53582.,
      37168.,  37592.,  19522.,  19742.,  8645.,   8747.,   18172.,  18384.,
      28597.,  28927.,  39936.,  40392.,  40848.,  41304.,  41760.,  42216.,
      42672.,  43128.,  33511.,  33865.,  23356.,  23600.,  12191.,  12317.,
      101.,    235.,    476.,    752.,    1141.,   1567.,   2112.,   2696.,
      3280.,   3864.,   4448.,   5032.,   5616.,   6200.,   4807.,   5257.,
      3612.,   3920.,   2015.,   2173.,   2102.,   2402.,   4928.,   5544.,
      8510.,   9458.,   12880.,  14176.,  15472.,  16768.,  18064.,  19360.,
      20656.,  21952.,  16946.,  17942.,  12288.,  12968.,  6650.,   6998.,
      6451.,   6949.,   14252.,  15272.,  23451.,  25017.,  34096.,  36232.,
      38368.,  40504.,  42640.,  44776.,  46912.,  49048.,  37761.,  39399.,
      26924.,  28040.,  14353.,  14923.,  13596.,  14324.,  29344.,  30832.,
      47308.,  49588.,  67552.,  70656.,  73760.,  76864.,  79968.,  83072.,
      86176.,  89280.,  68596.,  70972.,  48416.,  50032.,  25572.,  26396.,
      23788.,  24516.,  50176.,  51664.,  79228.,  81508.,  111008., 114112.,
      117216., 120320., 123424., 126528., 129632., 132736., 101860., 104236.,
      71040.,  72656.,  37108.,  37932.,  33980.,  34708.,  71008.,  72496.,
      111148., 113428., 154464., 157568., 160672., 163776., 166880., 169984.,
      173088., 176192., 135124., 137500., 93664.,  95280.,  48644.,  49468.,
      44172.,  44900.,  91840.,  93328.,  143068., 145348., 197920., 201024.,
      204128., 207232., 210336., 213440., 216544., 219648., 168388., 170764.,
      116288., 117904., 60180.,  61004.,  41131.,  41725.,  85148.,  86360.,
      132099., 133953., 182032., 184552., 187072., 189592., 192112., 194632.,
      197152., 199672., 152745., 154671., 105116., 106424., 54217.,  54883.,
      33054.,  33482.,  68208.,  69080.,  105494., 106826., 144944., 146752.,
      148560., 150368., 152176., 153984., 155792., 157600., 120362., 121742.,
      82608.,  83544.,  42498.,  42974.,  19493.,  19723.,  40124.,  40592.,
      61909.,  62623.,  84864.,  85832.,  86800.,  87768.,  88736.,  89704.,
      90672.,  91640.,  69895.,  70633.,  47868.,  48368.,  24575.,  24829.,
      197.,    459.,    924.,    1456.,   2197.,   3007.,   4032.,   5128.,
      6224.,   7320.,   8416.,   9512.,   10608.,  11704.,  8935.,   9769.,
      6620.,   7184.,   3647.,   3933.,   4086.,   4642.,   9408.,   10536.,
      15998.,  17714.,  23888.,  26208.,  28528.,  30848.,  33168.,  35488.,
      37808.,  40128.,  30578.,  32342.,  21888.,  23080.,  11706.,  12310.,
      12115.,  12997.,  26348.,  28136.,  42747.,  45465.,  61360.,  65032.,
      68704.,  72376.,  76048.,  79720.,  83392.,  87064.,  66273.,  69063.,
      46700.,  48584.,  24625.,  25579.,  24732.,  25972.,  52640.,  55152.,
      83788.,  87604.,  118240., 123392., 128544., 133696., 138848., 144000.,
      149152., 154304., 117364., 121276., 81952.,  84592.,  42852.,  44188.,
      42092.,  43332.,  87808.,  90320.,  137212., 141028., 190368., 195520.,
      200672., 205824., 210976., 216128., 221280., 226432., 172132., 176044.,
      118912., 121552., 61556.,  62892.,  59452.,  60692.,  122976., 125488.,
      190636., 194452., 262496., 267648., 272800., 277952., 283104., 288256.,
      293408., 298560., 226900., 230812., 155872., 158512., 80260.,  81596.,
      76812.,  78052.,  158144., 160656., 244060., 247876., 334624., 339776.,
      344928., 350080., 355232., 360384., 365536., 370688., 281668., 285580.,
      192832., 195472., 98964.,  100300., 68299.,  69277.,  140252., 142232.,
      215907., 218913., 295312., 299368., 303424., 307480., 311536., 315592.,
      319648., 323704., 245769., 248847., 167900., 169976., 85993.,  87043.,
      52958.,  53642.,  108528., 109912., 166742., 168842., 227632., 230464.,
      233296., 236128., 238960., 241792., 244624., 247456., 187754., 189902.,
      128048., 129496., 65474.,  66206.,  30341.,  30699.,  62076.,  62800.,
      95221.,  96319.,  129792., 131272., 132752., 134232., 135712., 137192.,
      138672., 140152., 106279., 107401., 72380.,  73136.,  36959.,  37341.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      250144.,   267680.,   349080.,   371640.,   463600.,   491440.,
      594216.,   627592.,   643720.,   678888.,   693224.,   730184.,
      742728.,   781480.,   695152.,   729136.,   628920.,   657880.,
      543520.,   567200.,   534120.,   562440.,   726750.,   762950.,
      944300.,   988700.,   1187410.,  1240330.,  1264970.,  1320130.,
      1342530.,  1399930.,  1420090.,  1479730.,  1306700.,  1358780.,
      1164550.,  1208750.,  993000.,   1029000.,  978352.,   1020016.,
      1310180.,  1363220.,  1678440.,  1743240.,  2083900.,  2160844.,
      2195788.,  2275420.,  2307676.,  2389996.,  2419564.,  2504572.,
      2200872.,  2274888.,  1941140.,  2003780.,  1639600.,  1690480.,
      1618680.,  1676248.,  2144170.,  2217250.,  2719780.,  2808820.,
      3346406.,  3451854.,  3498894.,  3607478.,  3651382.,  3763102.,
      3803870.,  3918726.,  3431428.,  3531220.,  3003490.,  3087770.,
      2519160.,  2587480.,  2436280.,  2511768.,  3188570.,  3284050.,
      3999940.,  4115860.,  4871286.,  5008094.,  5023774.,  5163718.,
      5176262.,  5319342.,  5328750.,  5474966.,  4765348.,  4892020.,
      4137490.,  4244170.,  3444280.,  3530520.,  3253880.,  3347288.,
      4232970.,  4350850.,  5280100.,  5422900.,  6396166.,  6564334.,
      6548654.,  6719958.,  6701142.,  6875582.,  6853630.,  7031206.,
      6099268.,  6252820.,  5271490.,  5400570.,  4369400.,  4473560.,
      4071480.,  4182808.,  5277370.,  5417650.,  6560260.,  6729940.,
      7921046.,  8120574.,  8073534.,  8276198.,  8226022.,  8431822.,
      8378510.,  8587446.,  7433188.,  7613620.,  6405490.,  6556970.,
      5294520.,  5416600.,  4794928.,  4898032.,  6171140.,  6300980.,
      7619880.,  7776840.,  9141916.,  9326380.,  9291436.,  9478588.,
      9440956.,  9630796.,  9590476.,  9783004.,  8455656.,  8621832.,
      7243700.,  7383140.,  5953840.,  6066160.,  5143080.,  5235400.,
      6590350.,  6706550.,  8103500.,  8243900.,  9683170.,  9848090.,
      9823450.,  9990610.,  9963730.,  10133130., 10104010., 10275650.,
      8872940.,  9021020.,  7572150.,  7696350.,  6201000.,  6301000.,
      5080096.,  5159072.,  6490200.,  6589560.,  7957360.,  8077360.,
      9482088.,  9622984.,  9606856.,  9749544.,  9731624.,  9876104.,
      9856392.,  10002664., 8631280.,  8757424.,  7346040.,  7451800.,
      6000160.,  6085280.,  2652960.,  2740128.,  3439640.,  3549240.,
      4276720.,  4409008.,  5164712.,  5319944.,  5214216.,  5371240.,
      5143912.,  5294536.,  5057224.,  5201448.,  4428400.,  4550448.,
      3746104.,  3845720.,  3009824.,  3086752.,  3885800.,  3976584.,
      4994430.,  5108710.,  6159212.,  6297308.,  7380786.,  7543018.,
      7458346.,  7622818.,  7301410.,  7459930.,  7128090.,  7280658.,
      6190860.,  6320252.,  5193638.,  5299534.,  4135784.,  4217864.,
      5178544.,  5275504.,  6629540.,  6751700.,  8144616.,  8292360.,
      9724540.,  9898252.,  9836428.,  10012828., 9599132.,  9770028.,
      9345452.,  9510844.,  8085416.,  8225992.,  6756692.,  6872068.,
      5358512.,  5448304.,  6567032.,  6672728.,  8389770.,  8523010.,
      10286692., 10447924., 12258694., 12448366., 12411182., 12603990.,
      12099798., 12287550., 11772030., 11954726., 10165828., 10321428.,
      8480066.,  8608122.,  6713848.,  6813912.,  5430840.,  5521688.,
      6950970.,  7065650.,  8537860.,  8676820.,  10192406., 10356094.,
      10344894., 10511718., 9918822.,  10080590., 9476366.,  9633078.,
      8143076.,  8276404.,  6737650.,  6847146.,  5259192.,  5344408.,
      3835896.,  3911896.,  4938730.,  5034850.,  6100900.,  6217588.,
      7323302.,  7461006.,  7475790.,  7616630.,  6935030.,  7070814.,
      6377886.,  6508614.,  5432196.,  5543252.,  4421794.,  4512730.,
      3345784.,  3416152.,  1782200.,  1843352.,  2353050.,  2430610.,
      2975812.,  3070228.,  3651382.,  3763102.,  3803870.,  3918726.,
      3956358.,  4074350.,  4108846.,  4229974.,  3698212.,  3803380.,
      3230290.,  3319050.,  2704184.,  2776088.,  2531632.,  2591728.,
      3288260.,  3364340.,  4095912.,  4188360.,  4955356.,  5064556.,
      5104876.,  5216764.,  5254396.,  5368972.,  5403916.,  5521180.,
      4802664.,  4904328.,  4145780.,  4231460.,  3432496.,  3501808.,
      3006120.,  3062600.,  3874350.,  3945750.,  4790540.,  4877180.,
      5755330.,  5857530.,  5895610.,  6000050.,  6035890.,  6142570.,
      6176170.,  6285090.,  5452460.,  5546780.,  4676950.,  4756350.,
      3849000.,  3913160.,  3169824.,  3220128.,  4066520.,  4130040.,
      5005936.,  5082928.,  5988584.,  6079304.,  6113352.,  6205864.,
      6238120.,  6332424.,  6362888.,  6458984.,  5593840.,  5676976.,
      4779000.,  4848920.,  3917856.,  3974304.,  2065696.,  2156960.,
      2710680.,  2825400.,  3408112.,  3546544.,  4158504.,  4320904.,
      4208008.,  4372200.,  4257512.,  4423496.,  4307016.,  4474792.,
      3860848.,  4005424.,  3359160.,  3480280.,  2801440.,  2898848.,
      3448680.,  3569160.,  4485150.,  4636550.,  5592620.,  5775260.,
      6771730.,  6985930.,  6849290.,  7065730.,  6926850.,  7145530.,
      7004410.,  7225330.,  6231500.,  6421820.,  5383750.,  5543150.,
      4460520.,  4588680.,  5249968.,  5402224.,  6787940.,  6979220.,
      8417640.,  8648328.,  10134716., 10397004., 10225100., 10481884.,
      10299100., 10550380., 10356716., 10602492., 9087528.,  9294664.,
      7722004.,  7890116.,  6259376.,  6388080.,  7386616.,  7540440.,
      9474410.,  9667810.,  11660452., 11893876., 13825830., 14091534.,
      13842126., 14102774., 13842038., 14097630., 13825566., 14076102.,
      12017796., 12229204., 10106402., 10278234., 8090488.,  8222296.,
      7626680.,  7765656.,  9755930.,  9930770.,  11976004., 12187156.,
      14053302., 14293022., 13954910., 14189574., 13840134., 14069742.,
      13708974., 13933526., 11830052., 12019188., 9854930.,  10008202.,
      7782712.,  7899672.,  7407992.,  7532120.,  9464010.,  9620290.,
      11603428., 11792308., 13477958., 13691694., 13264878., 13473558.,
      13035414., 13239038., 12789566., 12988134., 10954180., 11121044.,
      9030018.,  9164730.,  7016184.,  7118296.,  6730552.,  6839832.,
      8598650.,  8736370.,  10542724., 10709332., 12099798., 12287550.,
      11772030., 11954726., 11427878., 11605518., 11067342., 11239926.,
      9390180.,  9534772.,  7631666.,  7747818.,  5790904.,  5878168.,
      5552176.,  5634800.,  7092100.,  7196340.,  8694312.,  8820552.,
      9781020.,  9921452.,  9335596.,  9470524.,  8873788.,  9003212.,
      8395596.,  8519516.,  6990568.,  7093256.,  5518644.,  5599716.,
      3979056.,  4038128.,  3740456.,  3793864.,  4788430.,  4855990.,
      5882828.,  5964860.,  6331042.,  6419674.,  5761690.,  5844370.,
      5175954.,  5252682.,  4573834.,  4644610.,  3598700.,  3655644.,
      2573302.,  2616094.,  1497000.,  1525320.,  1259552.,  1281184.,
      1642840.,  1670520.,  2054512.,  2088496.,  2495080.,  2535624.,
      2619848.,  2662184.,  2744616.,  2788744.,  2869384.,  2915304.,
      2556400.,  2596528.,  2211960.,  2246040.,  1835552.,  1863328.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      180.,     324.,     578.,     890.,     1352.,
      1896.,    2440.,    2984.,    3528.,    4072.,    4616.,    5160.,
      5114.,    5618.,    4596.,    4996.,    2934.,    3166.,    780.,
      1116.,    3208.,    4008.,    7540.,    8932.,    14032.,   16144.,
      18256.,   20368.,   22480.,   24592.,   26704.,   28816.,   25444.,
      27220.,   20744.,   22056.,   12348.,   13068.,   5834.,    6722.,
      16252.,   18220.,   31638.,   34878.,   52376.,   57080.,   61784.,
      66488.,   71192.,   75896.,   80600.,   85304.,   71742.,   75558.,
      55612.,   58348.,   31826.,   33290.,   18776.,   20472.,   46480.,
      50128.,   83624.,   89480.,   130720.,  139040.,  147360.,  155680.,
      164000.,  172320.,  180640.,  188960.,  154760.,  161384.,  116368.,
      121040.,  64952.,   67416.,   42520.,   44216.,   97552.,   101200.,
      165608.,  171464.,  247200.,  255520.,  263840.,  272160.,  280480.,
      288800.,  297120.,  305440.,  247496.,  254120.,  181776.,  186448.,
      99448.,   101912.,  66264.,   67960.,   148624.,  152272.,  247592.,
      253448.,  363680.,  372000.,  380320.,  388640.,  396960.,  405280.,
      413600.,  421920.,  340232.,  346856.,  247184.,  251856.,  133944.,
      136408.,  90008.,   91704.,   199696.,  203344.,  329576.,  335432.,
      480160.,  488480.,  496800.,  505120.,  513440.,  521760.,  530080.,
      538400.,  432968.,  439592.,  312592.,  317264.,  168440.,  170904.,
      109802.,  111458.,  236476.,  239980.,  380406.,  385950.,  541976.,
      549752.,  557528.,  565304.,  573080.,  580856.,  588632.,  596408.,
      471198.,  477318.,  334204.,  338476.,  177266.,  179498.,  103788.,
      105148.,  220232.,  223080.,  349588.,  354052.,  492112.,  498320.,
      504528.,  510736.,  516944.,  523152.,  529360.,  535568.,  418948.,
      423796.,  294088.,  297448.,  154524.,  156268.,  68382.,   69190.,
      143796.,  145476.,  226370.,  228986.,  316232.,  319848.,  323464.,
      327080.,  330696.,  334312.,  337928.,  341544.,  265466.,  268274.,
      185076.,  187012.,  96630.,   97630.,   670.,     1734.,    3508.,
      5700.,    8642.,    12026.,   16200.,   20840.,   25480.,   30120.,
      34760.,   39400.,   44040.,   48680.,   37754.,   41330.,   28404.,
      30852.,   15862.,   17118.,   16396.,   18780.,   38536.,   43432.,
      66676.,   74212.,   101072.,  111376.,  121680.,  131984.,  142288.,
      152592.,  162896.,  173200.,  133732.,  141652.,  97032.,   102440.,
      52540.,   55308.,   50762.,   54722.,   112252.,  120364.,  184854.,
      197310.,  268952.,  285944.,  302936.,  319928.,  336920.,  353912.,
      370904.,  387896.,  298686.,  311718.,  213052.,  221932.,  113618.,
      118154.,  107352.,  113144.,  231824.,  243664.,  373928.,  392072.,
      534176.,  558880.,  583584.,  608288.,  632992.,  657696.,  682400.,
      707104.,  543368.,  562280.,  383632.,  396496.,  202680.,  209240.,
      188440.,  194232.,  397584.,  409424.,  627944.,  646088.,  880032.,
      904736.,  929440.,  954144.,  978848.,  1003552., 1028256., 1052960.,
      808136.,  827048.,  563728.,  576592.,  294520.,  301080.,  269528.,
      275320.,  563344.,  575184.,  881960.,  900104.,  1225888., 1250592.,
      1275296., 1300000., 1324704., 1349408., 1374112., 1398816., 1072904.,
      1091816., 743824.,  756688.,  386360.,  392920.,  350616.,  356408.,
      729104.,  740944.,  1135976., 1154120., 1571744., 1596448., 1621152.,
      1645856., 1670560., 1695264., 1719968., 1744672., 1337672., 1356584.,
      923920.,  936784.,  478200.,  484760.,  326762.,  331490.,  676540.,
      686188.,  1049718., 1064478., 1446680., 1466744., 1486808., 1506872.,
      1526936., 1547000., 1567064., 1587128., 1214238., 1229574., 835708.,
      846124.,  431090.,  436394.,  262764.,  266172.,  542280.,  549224.,
      838804.,  849412.,  1152592., 1166992., 1181392., 1195792., 1210192.,
      1224592., 1238992., 1253392., 957316.,  968308.,  657096.,  664552.,
      338076.,  341868.,  155038.,  156870.,  319156.,  322884.,  492482.,
      498170.,  675144.,  682856.,  690568.,  698280.,  705992.,  713704.,
      721416.,  729128.,  556154.,  562034.,  380916.,  384900.,  195574.,
      197598.,  1310.,    3398.,    6836.,    11076.,   16706.,   23162.,
      31048.,   39784.,   48520.,   57256.,   65992.,   74728.,   83464.,
      92200.,   70394.,   77042.,   52212.,   56708.,   28790.,   31070.,
      32012.,   36444.,   73864.,   82856.,   125812.,  139492.,  188112.,
      206608.,  225104.,  243600.,  262096.,  280592.,  299088.,  317584.,
      242020.,  256084.,  173320.,  182824.,  92732.,   97548.,   95690.,
      102722.,  208252.,  222508.,  338070.,  359742.,  485528.,  514808.,
      544088.,  573368.,  602648.,  631928.,  661208.,  690488.,  525630.,
      547878.,  370492.,  385516.,  195410.,  203018.,  195928.,  205816.,
      417168.,  437200.,  664232.,  694664.,  937632.,  978720.,  1019808.,
      1060896., 1101984., 1143072., 1184160., 1225248., 931976.,  963176.,
      650896.,  671952.,  340408.,  351064.,  334360.,  344248.,  697616.,
      717648.,  1090280., 1120712., 1512864., 1553952., 1595040., 1636128.,
      1677216., 1718304., 1759392., 1800480., 1368776., 1399976., 945680.,
      966736.,  489592.,  500248.,  472792.,  482680.,  978064.,  998096.,
      1516328., 1546760., 2088096., 2129184., 2170272., 2211360., 2252448.,
      2293536., 2334624., 2375712., 1805576., 1836776., 1240464., 1261520.,
      638776.,  649432.,  611224.,  621112.,  1258512., 1278544., 1942376.,
      1972808., 2663328., 2704416., 2745504., 2786592., 2827680., 2868768.,
      2909856., 2950944., 2242376., 2273576., 1535248., 1556304., 787960.,
      798616.,  543722.,  551522.,  1116604., 1132396., 1719030., 1743006.,
      2351384., 2383736., 2416088., 2448440., 2480792., 2513144., 2545496.,
      2577848., 1957278., 1981830., 1337212., 1353772., 684914.,  693290.,
      421740.,  427196.,  864328.,  875368.,  1328020., 1344772., 1813072.,
      1835664., 1858256., 1880848., 1903440., 1926032., 1948624., 1971216.,
      1495684., 1512820., 1020104., 1031656., 521628.,  527468.,  241694.,
      244550.,  494516.,  500292.,  758594.,  767354.,  1034056., 1045864.,
      1057672., 1069480., 1081288., 1093096., 1104904., 1116712., 846842.,
      855794.,  576756.,  582788.,  294518.,  297566.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8040.,    8320.,    8600.,    8880.,    11200.,   11560.,   11920.,
      12280.,   14852.,   15296.,   15740.,   16184.,   19012.,   19544.,
      20076.,   20608.,   20552.,   21112.,   21672.,   22232.,   22092.,
      22680.,   23268.,   23856.,   23632.,   24248.,   24864.,   25480.,
      22100.,   22640.,   23180.,   23720.,   19980.,   20440.,   20900.,
      21360.,   17256.,   17632.,   18008.,   18384.,   17050.,   17500.,
      17950.,   18400.,   23175.,   23750.,   24325.,   24900.,   30085.,
      30790.,   31495.,   32200.,   37800.,   38640.,   39480.,   40320.,
      40215.,   41090.,   41965.,   42840.,   42630.,   43540.,   44450.,
      45360.,   45045.,   45990.,   46935.,   47880.,   41425.,   42250.,
      43075.,   43900.,   36900.,   37600.,   38300.,   39000.,   31450.,
      32020.,   32590.,   33160.,   31100.,   31760.,   32420.,   33080.,
      41620.,   42460.,   43300.,   44140.,   53286.,   54312.,   55338.,
      56364.,   66122.,   67340.,   68558.,   69776.,   69608.,   70868.,
      72128.,   73388.,   73094.,   74396.,   75698.,   77000.,   76580.,
      77924.,   79268.,   80612.,   69630.,   70800.,   71970.,   73140.,
      61390.,   62380.,   63370.,   64360.,   51836.,   52640.,   53444.,
      54248.,   51310.,   52220.,   53130.,   54040.,   67935.,   69090.,
      70245.,   71400.,   86135.,   87542.,   88949.,   90356.,   105938.,
      107604.,  109270.,  110936.,  110691.,  112406.,  114121.,  115836.,
      115444.,  117208.,  118972.,  120736.,  120197.,  122010.,  123823.,
      125636.,  108395.,  109970.,  111545.,  113120.,  94850.,   96180.,
      97510.,   98840.,   79534.,   80612.,   81690.,   82768.,   76790.,
      77980.,   79170.,   80360.,   100485.,  101990.,  103495.,  105000.,
      126035.,  127862.,  129689.,  131516.,  153468.,  155624.,  157780.,
      159936.,  158221.,  160426.,  162631.,  164836.,  162974.,  165228.,
      167482.,  169736.,  167727.,  170030.,  172333.,  174636.,  149975.,
      151970.,  153965.,  155960.,  130200.,  131880.,  133560.,  135240.,
      108374.,  109732.,  111090.,  112448.,  102270.,  103740.,  105210.,
      106680.,  133035.,  134890.,  136745.,  138600.,  165935.,  168182.,
      170429.,  172676.,  200998.,  203644.,  206290.,  208936.,  205751.,
      208446.,  211141.,  213836.,  210504.,  213248.,  215992.,  218736.,
      215257.,  218050.,  220843.,  223636.,  191555.,  193970.,  196385.,
      198800.,  165550.,  167580.,  169610.,  171640.,  137214.,  138852.,
      140490.,  142128.,  127750.,  129500.,  131250.,  133000.,  165585.,
      167790.,  169995.,  172200.,  205835.,  208502.,  211169.,  213836.,
      248528.,  251664.,  254800.,  257936.,  253281.,  256466.,  259651.,
      262836.,  258034.,  261268.,  264502.,  267736.,  262787.,  266070.,
      269353.,  272636.,  233135.,  235970.,  238805.,  241640.,  200900.,
      203280.,  205660.,  208040.,  166054.,  167972.,  169890.,  171808.,
      150380.,  152000.,  153620.,  155240.,  193540.,  195580.,  197620.,
      199660.,  238974.,  241440.,  243906.,  246372.,  286706.,  289604.,
      292502.,  295400.,  291368.,  294308.,  297248.,  300188.,  296030.,
      299012.,  301994.,  304976.,  300692.,  303716.,  306740.,  309764.,
      265110.,  267720.,  270330.,  272940.,  227110.,  229300.,  231490.,
      233680.,  186668.,  188432.,  190196.,  191960.,  161250.,  162700.,
      164150.,  165600.,  206625.,  208450.,  210275.,  212100.,  254065.,
      256270.,  258475.,  260680.,  303590.,  306180.,  308770.,  311360.,
      307965.,  310590.,  313215.,  315840.,  312340.,  315000.,  317660.,
      320320.,  316715.,  319410.,  322105.,  324800.,  278125.,  280450.,
      282775.,  285100.,  237350.,  239300.,  241250.,  243200.,  194370.,
      195940.,  197510.,  199080.,  159240.,  160480.,  161720.,  162960.,
      203440.,  205000.,  206560.,  208120.,  249428.,  251312.,  253196.,
      255080.,  297220.,  299432.,  301644.,  303856.,  301112.,  303352.,
      305592.,  307832.,  305004.,  307272.,  309540.,  311808.,  308896.,
      311192.,  313488.,  315784.,  270500.,  272480.,  274460.,  276440.,
      230220.,  231880.,  233540.,  235200.,  188040.,  189376.,  190712.,
      192048.,  86440.,   88320.,   90200.,   92080.,   113200.,  115560.,
      117920.,  120280.,  142052.,  144896.,  147740.,  150584.,  173012.,
      176344.,  179676.,  183008.,  174552.,  177912.,  181272.,  184632.,
      176092.,  179480.,  182868.,  186256.,  177632.,  181048.,  184464.,
      187880.,  158900.,  161840.,  164780.,  167720.,  137980.,  140440.,
      142900.,  145360.,  114856.,  116832.,  118808.,  120784.,  143050.,
      145500.,  147950.,  150400.,  185675.,  188750.,  191825.,  194900.,
      231085.,  234790.,  238495.,  242200.,  279300.,  283640.,  287980.,
      292320.,  281715.,  286090.,  290465.,  294840.,  284130.,  288540.,
      292950.,  297360.,  286545.,  290990.,  295435.,  299880.,  254425.,
      258250.,  262075.,  265900.,  219400.,  222600.,  225800.,  229000.,
      181450.,  184020.,  186590.,  189160.,  215900.,  218960.,  222020.,
      225080.,  278620.,  282460.,  286300.,  290140.,  344886.,  349512.,
      354138.,  358764.,  414722.,  420140.,  425558.,  430976.,  418208.,
      423668.,  429128.,  434588.,  421694.,  427196.,  432698.,  438200.,
      425180.,  430724.,  436268.,  441812.,  375630.,  380400.,  385170.,
      389940.,  322390.,  326380.,  330370.,  334360.,  265436.,  268640.,
      271844.,  275048.,  306110.,  309820.,  313530.,  317240.,  393435.,
      398090.,  402745.,  407400.,  485135.,  490742.,  496349.,  501956.,
      581238.,  587804.,  594370.,  600936.,  585991.,  592606.,  599221.,
      605836.,  590744.,  597408.,  604072.,  610736.,  595497.,  602210.,
      608923.,  615636.,  524195.,  529970.,  535745.,  541520.,  448350.,
      453180.,  458010.,  462840.,  367934.,  371812.,  375690.,  379568.,
      331590.,  335580.,  339570.,  343560.,  425985.,  430990.,  435995.,
      441000.,  525035.,  531062.,  537089.,  543116.,  628768.,  635824.,
      642880.,  649936.,  633521.,  640626.,  647731.,  654836.,  638274.,
      645428.,  652582.,  659736.,  643027.,  650230.,  657433.,  664636.,
      565775.,  571970.,  578165.,  584360.,  483700.,  488880.,  494060.,
      499240.,  396774.,  400932.,  405090.,  409248.,  357070.,  361340.,
      365610.,  369880.,  458535.,  463890.,  469245.,  474600.,  564935.,
      571382.,  577829.,  584276.,  676298.,  683844.,  691390.,  698936.,
      681051.,  688646.,  696241.,  703836.,  685804.,  693448.,  701092.,
      708736.,  690557.,  698250.,  705943.,  713636.,  607355.,  613970.,
      620585.,  627200.,  519050.,  524580.,  530110.,  535640.,  425614.,
      430052.,  434490.,  438928.,  382550.,  387100.,  391650.,  396200.,
      491085.,  496790.,  502495.,  508200.,  604835.,  611702.,  618569.,
      625436.,  723828.,  731864.,  739900.,  747936.,  728581.,  736666.,
      744751.,  752836.,  733334.,  741468.,  749602.,  757736.,  738087.,
      746270.,  754453.,  762636.,  648935.,  655970.,  663005.,  670040.,
      554400.,  560280.,  566160.,  572040.,  454454.,  459172.,  463890.,
      468608.,  402380.,  406400.,  410420.,  414440.,  514540.,  519580.,
      524620.,  529660.,  631374.,  637440.,  643506.,  649572.,  752906.,
      760004.,  767102.,  774200.,  757568.,  764708.,  771848.,  778988.,
      762230.,  769412.,  776594.,  783776.,  766892.,  774116.,  781340.,
      788564.,  671910.,  678120.,  684330.,  690540.,  572110.,  577300.,
      582490.,  587680.,  467468.,  471632.,  475796.,  479960.,  399250.,
      402700.,  406150.,  409600.,  509125.,  513450.,  517775.,  522100.,
      623065.,  628270.,  633475.,  638680.,  741090.,  747180.,  753270.,
      759360.,  745465.,  751590.,  757715.,  763840.,  749840.,  756000.,
      762160.,  768320.,  754215.,  760410.,  766605.,  772800.,  659125.,
      664450.,  669775.,  675100.,  559850.,  564300.,  568750.,  573200.,
      456370.,  459940.,  463510.,  467080.,  372040.,  374880.,  377720.,
      380560.,  473440.,  477000.,  480560.,  484120.,  578228.,  582512.,
      586796.,  591080.,  686420.,  691432.,  696444.,  701456.,  690312.,
      695352.,  700392.,  705432.,  694204.,  699272.,  704340.,  709408.,
      698096.,  703192.,  708288.,  713384.,  608900.,  613280.,  617660.,
      622040.,  516220.,  519880.,  523540.,  527200.,  420040.,  422976.,
      425912.,  428848.,  164840.,  168320.,  171800.,  175280.,  215200.,
      219560.,  223920.,  228280.,  269252.,  274496.,  279740.,  284984.,
      327012.,  333144.,  339276.,  345408.,  328552.,  334712.,  340872.,
      347032.,  330092.,  336280.,  342468.,  348656.,  331632.,  337848.,
      344064.,  350280.,  295700.,  301040.,  306380.,  311720.,  255980.,
      260440.,  264900.,  269360.,  212456.,  216032.,  219608.,  223184.,
      269050.,  273500.,  277950.,  282400.,  348175.,  353750.,  359325.,
      364900.,  432085.,  438790.,  445495.,  452200.,  520800.,  528640.,
      536480.,  544320.,  523215.,  531090.,  538965.,  546840.,  525630.,
      533540.,  541450.,  549360.,  528045.,  535990.,  543935.,  551880.,
      467425.,  474250.,  481075.,  487900.,  401900.,  407600.,  413300.,
      419000.,  331450.,  336020.,  340590.,  345160.,  400700.,  406160.,
      411620.,  417080.,  515620.,  522460.,  529300.,  536140.,  636486.,
      644712.,  652938.,  661164.,  763322.,  772940.,  782558.,  792176.,
      766808.,  776468.,  786128.,  795788.,  770294.,  779996.,  789698.,
      799400.,  773780.,  783524.,  793268.,  803012.,  681630.,  690000.,
      698370.,  706740.,  583390.,  590380.,  597370.,  604360.,  479036.,
      484640.,  490244.,  495848.,  560910.,  567420.,  573930.,  580440.,
      718935.,  727090.,  735245.,  743400.,  884135.,  893942.,  903749.,
      913556.,  1056538., 1068004., 1079470., 1090936., 1061291., 1072806.,
      1084321., 1095836., 1066044., 1077608., 1089172., 1100736., 1070797.,
      1082410., 1094023., 1105636., 939995.,  949970.,  959945.,  969920.,
      801850.,  810180.,  818510.,  826840.,  656334.,  663012.,  669690.,
      676368.,  586390.,  593180.,  599970.,  606760.,  751485.,  759990.,
      768495.,  777000.,  924035.,  934262.,  944489.,  954716.,  1104068.,
      1116024., 1127980., 1139936., 1108821., 1120826., 1132831., 1144836.,
      1113574., 1125628., 1137682., 1149736., 1118327., 1130430., 1142533.,
      1154636., 981575.,  991970.,  1002365., 1012760., 837200.,  845880.,
      854560.,  863240.,  685174.,  692132.,  699090.,  706048.,  611870.,
      618940.,  626010.,  633080.,  784035.,  792890.,  801745.,  810600.,
      963935.,  974582.,  985229.,  995876.,  1151598., 1164044., 1176490.,
      1188936., 1156351., 1168846., 1181341., 1193836., 1161104., 1173648.,
      1186192., 1198736., 1165857., 1178450., 1191043., 1203636., 1023155.,
      1033970., 1044785., 1055600., 872550.,  881580.,  890610.,  899640.,
      714014.,  721252.,  728490.,  735728.,  637350.,  644700.,  652050.,
      659400.,  816585.,  825790.,  834995.,  844200.,  1003835., 1014902.,
      1025969., 1037036., 1199128., 1212064., 1225000., 1237936., 1203881.,
      1216866., 1229851., 1242836., 1208634., 1221668., 1234702., 1247736.,
      1213387., 1226470., 1239553., 1252636., 1064735., 1075970., 1087205.,
      1098440., 907900.,  917280.,  926660.,  936040.,  742854.,  750372.,
      757890.,  765408.,  654380.,  660800.,  667220.,  673640.,  835540.,
      843580.,  851620.,  859660.,  1023774., 1033440., 1043106., 1052772.,
      1219106., 1230404., 1241702., 1253000., 1223768., 1235108., 1246448.,
      1257788., 1228430., 1239812., 1251194., 1262576., 1233092., 1244516.,
      1255940., 1267364., 1078710., 1088520., 1098330., 1108140., 917110.,
      925300.,  933490.,  941680.,  748268.,  754832.,  761396.,  767960.,
      637250.,  642700.,  648150.,  653600.,  811625.,  818450.,  825275.,
      832100.,  992065.,  1000270., 1008475., 1016680., 1178590., 1188180.,
      1197770., 1207360., 1182965., 1192590., 1202215., 1211840., 1187340.,
      1197000., 1206660., 1216320., 1191715., 1201410., 1211105., 1220800.,
      1040125., 1048450., 1056775., 1065100., 882350.,  889300.,  896250.,
      903200.,  718370.,  723940.,  729510.,  735080.,  584840.,  589280.,
      593720.,  598160.,  743440.,  749000.,  754560.,  760120.,  907028.,
      913712.,  920396.,  927080.,  1075620., 1083432., 1091244., 1099056.,
      1079512., 1087352., 1095192., 1103032., 1083404., 1091272., 1099140.,
      1107008., 1087296., 1095192., 1103088., 1110984., 947300.,  954080.,
      960860.,  967640.,  802220.,  807880.,  813540.,  819200.,  652040.,
      656576.,  661112.,  665648.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     2.,     3.,     4.,     7.,     10.,    13.,    16.,    22.,
      28.,    34.,    40.,    50.,    60.,    70.,    80.,    90.,    100.,
      110.,   120.,   130.,   140.,   150.,   160.,   170.,   180.,   190.,
      200.,   181.,   190.,   199.,   208.,   159.,   166.,   173.,   180.,
      100.,   104.,   108.,   112.,   34.,    40.,    46.,    52.,    122.,
      136.,   150.,   164.,   272.,   296.,   320.,   344.,   492.,   528.,
      564.,   600.,   636.,   672.,   708.,   744.,   780.,   816.,   852.,
      888.,   924.,   960.,   996.,   1032.,  866.,   896.,   926.,   956.,
      698.,   720.,   742.,   764.,   412.,   424.,   436.,   448.,   211.,
      226.,   241.,   256.,   569.,   602.,   635.,   668.,   1086.,  1140.,
      1194.,  1248.,  1774.,  1852.,  1930.,  2008.,  2086.,  2164.,  2242.,
      2320.,  2398.,  2476.,  2554.,  2632.,  2710.,  2788.,  2866.,  2944.,
      2391.,  2454.,  2517.,  2580.,  1841.,  1886.,  1931.,  1976.,  1048.,
      1072.,  1096.,  1120.,  644.,   672.,   700.,   728.,   1572.,  1632.,
      1692.,  1752.,  2800.,  2896.,  2992.,  3088.,  4344.,  4480.,  4616.,
      4752.,  4888.,  5024.,  5160.,  5296.,  5432.,  5568.,  5704.,  5840.,
      5976.,  6112.,  6248.,  6384.,  5092.,  5200.,  5308.,  5416.,  3812.,
      3888.,  3964.,  4040.,  2120.,  2160.,  2200.,  2240.,  1428.,  1456.,
      1484.,  1512.,  3252.,  3312.,  3372.,  3432.,  5488.,  5584.,  5680.,
      5776.,  8152.,  8288.,  8424.,  8560.,  8696.,  8832.,  8968.,  9104.,
      9240.,  9376.,  9512.,  9648.,  9784.,  9920.,  10056., 10192., 8116.,
      8224.,  8332.,  8440.,  5940.,  6016.,  6092.,  6168.,  3240.,  3280.,
      3320.,  3360.,  2212.,  2240.,  2268.,  2296.,  4932.,  4992.,  5052.,
      5112.,  8176.,  8272.,  8368.,  8464.,  11960., 12096., 12232., 12368.,
      12504., 12640., 12776., 12912., 13048., 13184., 13320., 13456., 13592.,
      13728., 13864., 14000., 11140., 11248., 11356., 11464., 8068.,  8144.,
      8220.,  8296.,  4360.,  4400.,  4440.,  4480.,  2996.,  3024.,  3052.,
      3080.,  6612.,  6672.,  6732.,  6792.,  10864., 10960., 11056., 11152.,
      15768., 15904., 16040., 16176., 16312., 16448., 16584., 16720., 16856.,
      16992., 17128., 17264., 17400., 17536., 17672., 17808., 14164., 14272.,
      14380., 14488., 10196., 10272., 10348., 10424., 5480.,  5520.,  5560.,
      5600.,  3583.,  3610.,  3637.,  3664.,  7697.,  7754.,  7811.,  7868.,
      12354., 12444., 12534., 12624., 17566., 17692., 17818., 17944., 18070.,
      18196., 18322., 18448., 18574., 18700., 18826., 18952., 19078., 19204.,
      19330., 19456., 15243., 15342., 15441., 15540., 10793., 10862., 10931.,
      11000., 5716.,  5752.,  5788.,  5824.,  3354.,  3376.,  3398.,  3420.,
      7106.,  7152.,  7198.,  7244.,  11264., 11336., 11408., 11480., 15836.,
      15936., 16036., 16136., 16236., 16336., 16436., 16536., 16636., 16736.,
      16836., 16936., 17036., 17136., 17236., 17336., 13466., 13544., 13622.,
      13700., 9442.,  9496.,  9550.,  9604.,  4956.,  4984.,  5012.,  5040.,
      2197.,  2210.,  2223.,  2236.,  4615.,  4642.,  4669.,  4696.,  7258.,
      7300.,  7342.,  7384.,  10130., 10188., 10246., 10304., 10362., 10420.,
      10478., 10536., 10594., 10652., 10710., 10768., 10826., 10884., 10942.,
      11000., 8497.,  8542.,  8587.,  8632.,  5919.,  5950.,  5981.,  6012.,
      3088.,  3104.,  3120.,  3136.,  17.,    34.,    51.,    68.,    103.,
      138.,   173.,   208.,   262.,   316.,   370.,   424.,   498.,   572.,
      646.,   720.,   794.,   868.,   942.,   1016.,  1090.,  1164.,  1238.,
      1312.,  1386.,  1460.,  1534.,  1608.,  1189.,  1246.,  1303.,  1360.,
      895.,   934.,   973.,   1012.,  500.,   520.,   540.,   560.,   514.,
      552.,   590.,   628.,   1210.,  1288.,  1366.,  1444.,  2096.,  2216.,
      2336.,  2456.,  3180.,  3344.,  3508.,  3672.,  3836.,  4000.,  4164.,
      4328.,  4492.,  4656.,  4820.,  4984.,  5148.,  5312.,  5476.,  5640.,
      4226.,  4352.,  4478.,  4604.,  3066.,  3152.,  3238.,  3324.,  1660.,
      1704.,  1748.,  1792.,  1603.,  1666.,  1729.,  1792.,  3545.,  3674.,
      3803.,  3932.,  5838.,  6036.,  6234.,  6432.,  8494.,  8764.,  9034.,
      9304.,  9574.,  9844.,  10114., 10384., 10654., 10924., 11194., 11464.,
      11734., 12004., 12274., 12544., 9447.,  9654.,  9861.,  10068., 6737.,
      6878.,  7019.,  7160.,  3592.,  3664.,  3736.,  3808.,  3396.,  3488.,
      3580.,  3672.,  7332.,  7520.,  7708.,  7896.,  11824., 12112., 12400.,
      12688., 16888., 17280., 17672., 18064., 18456., 18848., 19240., 19632.,
      20024., 20416., 20808., 21200., 21592., 21984., 22376., 22768., 17188.,
      17488., 17788., 18088., 12132., 12336., 12540., 12744., 6408.,  6512.,
      6616.,  6720.,  5972.,  6064.,  6156.,  6248.,  12596., 12784., 12972.,
      13160., 19888., 20176., 20464., 20752., 27864., 28256., 28648., 29040.,
      29432., 29824., 30216., 30608., 31000., 31392., 31784., 32176., 32568.,
      32960., 33352., 33744., 25588., 25888., 26188., 26488., 17844., 18048.,
      18252., 18456., 9320.,  9424.,  9528.,  9632.,  8548.,  8640.,  8732.,
      8824.,  17860., 18048., 18236., 18424., 27952., 28240., 28528., 28816.,
      38840., 39232., 39624., 40016., 40408., 40800., 41192., 41584., 41976.,
      42368., 42760., 43152., 43544., 43936., 44328., 44720., 33988., 34288.,
      34588., 34888., 23556., 23760., 23964., 24168., 12232., 12336., 12440.,
      12544., 11124., 11216., 11308., 11400., 23124., 23312., 23500., 23688.,
      36016., 36304., 36592., 36880., 49816., 50208., 50600., 50992., 51384.,
      51776., 52168., 52560., 52952., 53344., 53736., 54128., 54520., 54912.,
      55304., 55696., 42388., 42688., 42988., 43288., 29268., 29472., 29676.,
      29880., 15144., 15248., 15352., 15456., 10351., 10426., 10501., 10576.,
      21425., 21578., 21731., 21884., 33234., 33468., 33702., 33936., 45790.,
      46108., 46426., 46744., 47062., 47380., 47698., 48016., 48334., 48652.,
      48970., 49288., 49606., 49924., 50242., 50560., 38427., 38670., 38913.,
      39156., 26441., 26606., 26771., 26936., 13636., 13720., 13804., 13888.,
      8314.,  8368.,  8422.,  8476.,  17154., 17264., 17374., 17484., 26528.,
      26696., 26864., 27032., 36444., 36672., 36900., 37128., 37356., 37584.,
      37812., 38040., 38268., 38496., 38724., 38952., 39180., 39408., 39636.,
      39864., 30266., 30440., 30614., 30788., 20770., 20888., 21006., 21124.,
      10684., 10744., 10804., 10864., 4901.,  4930.,  4959.,  4988.,  10087.,
      10146., 10205., 10264., 15562., 15652., 15742., 15832., 21330., 21452.,
      21574., 21696., 21818., 21940., 22062., 22184., 22306., 22428., 22550.,
      22672., 22794., 22916., 23038., 23160., 17569., 17662., 17755., 17848.,
      12031., 12094., 12157., 12220., 6176.,  6208.,  6240.,  6272.,  33.,
      66.,    99.,    132.,   199.,   266.,   333.,   400.,   502.,   604.,
      706.,   808.,   946.,   1084.,  1222.,  1360.,  1498.,  1636.,  1774.,
      1912.,  2050.,  2188.,  2326.,  2464.,  2602.,  2740.,  2878.,  3016.,
      2197.,  2302.,  2407.,  2512.,  1631.,  1702.,  1773.,  1844.,  900.,
      936.,   972.,   1008.,  994.,   1064.,  1134.,  1204.,  2298.,  2440.,
      2582.,  2724.,  3920.,  4136.,  4352.,  4568.,  5868.,  6160.,  6452.,
      6744.,  7036.,  7328.,  7620.,  7912.,  8204.,  8496.,  8788.,  9080.,
      9372.,  9664.,  9956.,  10248., 7586.,  7808.,  8030.,  8252.,  5434.,
      5584.,  5734.,  5884.,  2908.,  2984.,  3060.,  3136.,  2995.,  3106.,
      3217.,  3328.,  6521.,  6746.,  6971.,  7196.,  10590., 10932., 11274.,
      11616., 15214., 15676., 16138., 16600., 17062., 17524., 17986., 18448.,
      18910., 19372., 19834., 20296., 20758., 21220., 21682., 22144., 16503.,
      16854., 17205., 17556., 11633., 11870., 12107., 12344., 6136.,  6256.,
      6376.,  6496.,  6148.,  6304.,  6460.,  6616.,  13092., 13408., 13724.,
      14040., 20848., 21328., 21808., 22288., 29432., 30080., 30728., 31376.,
      32024., 32672., 33320., 33968., 34616., 35264., 35912., 36560., 37208.,
      37856., 38504., 39152., 29284., 29776., 30268., 30760., 20452., 20784.,
      21116., 21448., 10696., 10864., 11032., 11200., 10516., 10672., 10828.,
      10984., 21940., 22256., 22572., 22888., 34288., 34768., 35248., 35728.,
      47576., 48224., 48872., 49520., 50168., 50816., 51464., 52112., 52760.,
      53408., 54056., 54704., 55352., 56000., 56648., 57296., 43060., 43552.,
      44044., 44536., 29748., 30080., 30412., 30744., 15400., 15568., 15736.,
      15904., 14884., 15040., 15196., 15352., 30788., 31104., 31420., 31736.,
      47728., 48208., 48688., 49168., 65720., 66368., 67016., 67664., 68312.,
      68960., 69608., 70256., 70904., 71552., 72200., 72848., 73496., 74144.,
      74792., 75440., 56836., 57328., 57820., 58312., 39044., 39376., 39708.,
      40040., 20104., 20272., 20440., 20608., 19252., 19408., 19564., 19720.,
      39636., 39952., 40268., 40584., 61168., 61648., 62128., 62608., 83864.,
      84512., 85160., 85808., 86456., 87104., 87752., 88400., 89048., 89696.,
      90344., 90992., 91640., 92288., 92936., 93584., 70612., 71104., 71596.,
      72088., 48340., 48672., 49004., 49336., 24808., 24976., 25144., 25312.,
      17119., 17242., 17365., 17488., 35153., 35402., 35651., 35900., 54114.,
      54492., 54870., 55248., 74014., 74524., 75034., 75544., 76054., 76564.,
      77074., 77584., 78094., 78604., 79114., 79624., 80134., 80644., 81154.,
      81664., 61611., 61998., 62385., 62772., 42089., 42350., 42611., 42872.,
      21556., 21688., 21820., 21952., 13274., 13360., 13446., 13532., 27202.,
      27376., 27550., 27724., 41792., 42056., 42320., 42584., 57052., 57408.,
      57764., 58120., 58476., 58832., 59188., 59544., 59900., 60256., 60612.,
      60968., 61324., 61680., 62036., 62392., 47066., 47336., 47606., 47876.,
      32098., 32280., 32462., 32644., 16412., 16504., 16596., 16688., 7605.,
      7650.,  7695.,  7740.,  15559., 15650., 15741., 15832., 23866., 24004.,
      24142., 24280., 32530., 32716., 32902., 33088., 33274., 33460., 33646.,
      33832., 34018., 34204., 34390., 34576., 34762., 34948., 35134., 35320.,
      26641., 26782., 26923., 27064., 18143., 18238., 18333., 18428., 9264.,
      9312.,  9360.,  9408.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      62208.,    64416.,    66624.,   68832.,   86860.,    89700.,   92540.,
      95380.,    115408.,   118912.,  122416.,  125920.,   147980.,  152180.,
      156380.,   160580.,   160244.,  164668.,  169092.,   173516.,  172508.,
      177156.,   181804.,   186452.,  184772.,  189644.,   194516.,  199388.,
      173008.,   177280.,   181552.,  185824.,  156580.,   160220.,  163860.,
      167500.,   135360.,   138336.,  141312.,  144288.,   133000.,  136560.,
      140120.,   143680.,   181025.,  185575.,  190125.,   194675.,  235280.,
      240860.,   246440.,   252020.,  295925.,  302575.,   309225.,  315875.,
      315175.,   322105.,   329035.,  335965.,  334425.,   341635.,  348845.,
      356055.,   353675.,   361165.,  368655.,  376145.,   325520.,  332060.,
      338600.,   345140.,   290175.,  295725.,  301275.,   306825.,  247480.,
      252000.,   256520.,   261040.,  243808.,  249040.,   254272.,  259504.,
      326570.,   333230.,   339890.,  346550.,  418440.,   426576.,  434712.,
      442848.,   519610.,   529270.,  538930.,  548590.,   547414.,  557410.,
      567406.,   577402.,   575218.,  585550.,  595882.,   606214.,  603022.,
      613690.,   624358.,   635026.,  548616.,  557904.,   567192.,  576480.,
      483950.,   491810.,   499670.,  507530.,  408832.,   415216.,  421600.,
      427984.,   403592.,   410816.,  418040.,  425264.,   534695.,  543865.,
      553035.,   562205.,   678328.,  689500.,  700672.,   711844.,  834715.,
      847945.,   861175.,   874405.,  872641.,  886263.,   899885.,  913507.,
      910567.,   924581.,   938595.,  952609.,  948493.,   962899.,  977305.,
      991711.,   855736.,   868252.,  880768.,  893284.,   749105.,  759675.,
      770245.,   780815.,   628376.,  636944.,  645512.,   654080.,  606872.,
      616336.,   625800.,   635264.,  794395.,  806365.,   818335.,  830305.,
      996688.,   1011220.,  1025752., 1040284., 1213975.,  1231125., 1248275.,
      1265425.,  1251901.,  1269443., 1286985., 1304527.,  1289827., 1307761.,
      1325695.,  1343629.,  1327753., 1346079., 1364405.,  1382731., 1187536.,
      1203412.,  1219288.,  1235164., 1031205., 1044575.,  1057945., 1071315.,
      858536.,   869344.,   880152.,  890960.,  810152.,   821856.,  833560.,
      845264.,   1054095.,  1068865., 1083635., 1098405.,  1315048., 1332940.,
      1350832.,  1368724.,  1593235., 1614305., 1635375.,  1656445., 1631161.,
      1652623.,  1674085.,  1695547., 1669087., 1690941.,  1712795., 1734649.,
      1707013.,  1729259.,  1751505., 1773751., 1519336.,  1538572., 1557808.,
      1577044.,  1313305.,  1329475., 1345645., 1361815.,  1088696., 1101744.,
      1114792.,  1127840.,  1013432., 1027376., 1041320.,  1055264., 1313795.,
      1331365.,  1348935.,  1366505., 1633408., 1654660.,  1675912., 1697164.,
      1972495.,  1997485.,  2022475., 2047465., 2010421.,  2035803., 2061185.,
      2086567.,  2048347.,  2074121., 2099895., 2125669.,  2086273., 2112439.,
      2138605.,  2164771.,  1851136., 1873732., 1896328.,  1918924., 1595405.,
      1614375.,  1633345.,  1652315., 1318856., 1334144.,  1349432., 1364720.,
      1194784.,  1207696.,  1220608., 1233520., 1537850.,  1554110., 1570370.,
      1586630.,  1899048.,  1918704., 1938360., 1958016.,  2278570., 2301670.,
      2324770.,  2347870.,  2315782., 2339218., 2362654.,  2386090., 2352994.,
      2376766.,  2400538.,  2424310., 2390206., 2414314.,  2438422., 2462530.,
      2107560.,  2128368.,  2149176., 2169984., 1805630.,  1823090., 1840550.,
      1858010.,  1484224.,  1498288., 1512352., 1526416.,  1282360., 1293920.,
      1305480.,  1317040.,  1643325., 1657875., 1672425.,  1686975., 2020760.,
      2038340.,  2055920.,  2073500., 2414825., 2435475.,  2456125., 2476775.,
      2449755.,  2470685.,  2491615., 2512545., 2484685.,  2505895., 2527105.,
      2548315.,  2519615.,  2541105., 2562595., 2584085.,  2212760., 2231300.,
      2249840.,  2268380.,  1888475., 1904025., 1919575.,  1935125., 1546600.,
      1559120.,  1571640.,  1584160., 1267200., 1277088.,  1286976., 1296864.,
      1619020.,  1631460.,  1643900., 1656340., 1985104.,  2000128., 2015152.,
      2030176.,  2365580.,  2383220., 2400860., 2418500.,  2396660., 2414524.,
      2432388.,  2450252.,  2427740., 2445828., 2463916.,  2482004., 2458820.,
      2477132.,  2495444.,  2513756., 2153296., 2169088.,  2184880., 2200672.,
      1832740.,  1845980.,  1859220., 1872460., 1497024.,  1507680., 1518336.,
      1528992.,  686208.,   701216.,  716224.,  731232.,   898860.,  917700.,
      936540.,   955380.,   1128208., 1150912., 1173616.,  1196320., 1374380.,
      1400980.,  1427580.,  1454180., 1386644., 1413468.,  1440292., 1467116.,
      1398908.,  1425956.,  1453004., 1480052., 1411172.,  1438444., 1465716.,
      1492988.,  1262608.,  1286080., 1309552., 1333024.,  1096580., 1116220.,
      1135860.,  1155500.,  912960.,  928736.,  944512.,   960288.,  1137000.,
      1156560.,  1176120.,  1195680., 1476025., 1500575.,  1525125., 1549675.,
      1837280.,  1866860.,  1896440., 1926020., 2220925.,  2255575., 2290225.,
      2324875.,  2240175.,  2275105., 2310035., 2344965.,  2259425., 2294635.,
      2329845.,  2365055.,  2278675., 2314165., 2349655.,  2385145., 2023520.,
      2054060.,  2084600.,  2115140., 1745175., 1770725.,  1796275., 1821825.,
      1443480.,  1464000.,  1484520., 1505040., 1717408.,  1741840., 1766272.,
      1790704.,  2216570.,  2247230., 2277890., 2308550.,  2744040., 2780976.,
      2817912.,  2854848.,  3300010., 3343270., 3386530.,  3429790., 3327814.,
      3371410.,  3415006.,  3458602., 3355618., 3399550.,  3443482., 3487414.,
      3383422.,  3427690.,  3471958., 3516226., 2989416.,  3027504., 3065592.,
      3103680.,  2565950.,  2597810., 2629670., 2661530.,  2112832., 2138416.,
      2164000.,  2189584.,  2436392., 2466016., 2495640.,  2525264., 3131695.,
      3168865.,  3206035.,  3243205., 3861928., 3906700.,  3951472., 3996244.,
      4627315.,  4679745.,  4732175., 4784605., 4665241.,  4718063., 4770885.,
      4823707.,  4703167.,  4756381., 4809595., 4862809.,  4741093., 4794699.,
      4848305.,  4901911.,  4173736., 4219852., 4265968.,  4312084., 3570105.,
      3608675.,  3647245.,  3685815., 2929976., 2960944.,  2991912., 3022880.,
      2639672.,  2671536.,  2703400., 2735264., 3391395.,  3431365., 3471335.,
      3511305.,  4180288.,  4228420., 4276552., 4324684.,  5006575., 5062925.,
      5119275.,  5175625.,  5044501., 5101243., 5157985.,  5214727., 5082427.,
      5139561.,  5196695.,  5253829., 5120353., 5177879.,  5235405., 5292931.,
      4505536.,  4555012.,  4604488., 4653964., 3852205.,  3893575., 3934945.,
      3976315.,  3160136.,  3193344., 3226552., 3259760.,  2842952., 2877056.,
      2911160.,  2945264.,  3651095., 3693865., 3736635.,  3779405., 4498648.,
      4550140.,  4601632.,  4653124., 5385835., 5446105.,  5506375., 5566645.,
      5423761.,  5484423.,  5545085., 5605747., 5461687.,  5522741., 5583795.,
      5644849.,  5499613.,  5561059., 5622505., 5683951.,  4837336., 4890172.,
      4943008.,  4995844.,  4134305., 4178475., 4222645.,  4266815., 3390296.,
      3425744.,  3461192.,  3496640., 3046232., 3082576.,  3118920., 3155264.,
      3910795.,  3956365.,  4001935., 4047505., 4817008.,  4871860., 4926712.,
      4981564.,  5765095.,  5829285., 5893475., 5957665.,  5803021., 5867603.,
      5932185.,  5996767.,  5840947., 5905921., 5970895.,  6035869., 5878873.,
      5944239.,  6009605.,  6074971., 5169136., 5225332.,  5281528., 5337724.,
      4416405.,  4463375.,  4510345., 4557315., 3620456.,  3658144., 3695832.,
      3733520.,  3205984.,  3238096., 3270208., 3302320.,  4099850., 4140110.,
      4180370.,  4220630.,  5031048., 5079504., 5127960.,  5176416., 5999770.,
      6056470.,  6113170.,  6169870., 6036982., 6094018.,  6151054., 6208090.,
      6074194.,  6131566.,  6188938., 6246310., 6111406.,  6169114., 6226822.,
      6284530.,  5354760.,  5404368., 5453976., 5503584.,  4559630., 4601090.,
      4642550.,  4684010.,  3725824., 3759088., 3792352.,  3825616., 3182360.,
      3209920.,  3237480.,  3265040., 4058325., 4092875.,  4127425., 4161975.,
      4966760.,  5008340.,  5049920., 5091500., 5907825.,  5956475., 6005125.,
      6053775.,  5942755.,  5991685., 6040615., 6089545.,  5977685., 6026895.,
      6076105.,  6125315.,  6012615., 6062105., 6111595.,  6161085., 5254760.,
      5297300.,  5339840.,  5382380., 4463475., 4499025.,  4534575., 4570125.,
      3638600.,  3667120.,  3695640., 3724160., 2966400.,  2989088., 3011776.,
      3034464.,  3775020.,  3803460., 3831900., 3860340.,  4610704., 4644928.,
      4679152.,  4713376.,  5473580., 5513620., 5553660.,  5593700., 5504660.,
      5544924.,  5585188.,  5625452., 5535740., 5576228.,  5616716., 5657204.,
      5566820.,  5607532.,  5648244., 5688956., 4855696.,  4890688., 4925680.,
      4960672.,  4116740.,  4145980., 4175220., 4204460.,  3349824., 3373280.,
      3396736.,  3420192.,  1310208., 1338016., 1365824.,  1393632., 1710860.,
      1745700.,  1780540.,  1815380., 2141008., 2182912.,  2224816., 2266720.,
      2600780.,  2649780.,  2698780., 2747780., 2613044.,  2662268., 2711492.,
      2760716.,  2625308.,  2674756., 2724204., 2773652.,  2637572., 2687244.,
      2736916.,  2786588.,  2352208., 2394880., 2437552.,  2480224., 2036580.,
      2072220.,  2107860.,  2143500., 1690560., 1719136.,  1747712., 1776288.,
      2141000.,  2176560.,  2212120., 2247680., 2771025.,  2815575., 2860125.,
      2904675.,  3439280.,  3492860., 3546440., 3600020.,  4145925., 4208575.,
      4271225.,  4333875.,  4165175., 4228105., 4291035.,  4353965., 4184425.,
      4247635.,  4310845.,  4374055., 4203675., 4267165.,  4330655., 4394145.,
      3721520.,  3776060.,  3830600., 3885140., 3200175.,  3245725., 3291275.,
      3336825.,  2639480.,  2676000., 2712520., 2749040.,  3191008., 3234640.,
      3278272.,  3321904.,  4106570., 4161230., 4215890.,  4270550., 5069640.,
      5135376.,  5201112.,  5266848., 6080410., 6157270.,  6234130., 6310990.,
      6108214.,  6185410.,  6262606., 6339802., 6136018.,  6213550., 6291082.,
      6368614.,  6163822.,  6241690., 6319558., 6397426.,  5430216., 5497104.,
      5563992.,  5630880.,  4647950., 4703810., 4759670.,  4815530., 3816832.,
      3861616.,  3906400.,  3951184., 4469192., 4521216.,  4573240., 4625264.,
      5728695.,  5793865.,  5859035., 5924205., 7045528.,  7123900., 7202272.,
      7280644.,  8419915.,  8511545., 8603175., 8694805.,  8457841., 8549863.,
      8641885.,  8733907.,  8495767., 8588181., 8680595.,  8773009., 8533693.,
      8626499.,  8719305.,  8812111., 7491736., 7571452.,  7651168., 7730884.,
      6391105.,  6457675.,  6524245., 6590815., 5231576.,  5284944., 5338312.,
      5391680.,  4672472.,  4726736., 4781000., 4835264.,  5988395., 6056365.,
      6124335.,  6192305.,  7363888., 7445620., 7527352.,  7609084., 8799175.,
      8894725.,  8990275.,  9085825., 8837101., 8933043.,  9028985., 9124927.,
      8875027.,  8971361.,  9067695., 9164029., 8912953.,  9009679., 9106405.,
      9203131.,  7823536.,  7906612., 7989688., 8072764.,  6673205., 6742575.,
      6811945.,  6881315.,  5461736., 5517344., 5572952.,  5628560., 4875752.,
      4932256.,  4988760.,  5045264., 6248095., 6318865.,  6389635., 6460405.,
      7682248.,  7767340.,  7852432., 7937524., 9178435.,  9277905., 9377375.,
      9476845.,  9216361.,  9316223., 9416085., 9515947.,  9254287., 9354541.,
      9454795.,  9555049.,  9292213., 9392859., 9493505.,  9594151., 8155336.,
      8241772.,  8328208.,  8414644., 6955305., 7027475.,  7099645., 7171815.,
      5691896.,  5749744.,  5807592., 5865440., 5079032.,  5137776., 5196520.,
      5255264.,  6507795.,  6581365., 6654935., 6728505.,  8000608., 8089060.,
      8177512.,  8265964.,  9557695., 9661085., 9764475.,  9867865., 9595621.,
      9699403.,  9803185.,  9906967., 9633547., 9737721.,  9841895., 9946069.,
      9671473.,  9776039.,  9880605., 9985171., 8487136.,  8576932., 8666728.,
      8756524.,  7237405.,  7312375., 7387345., 7462315.,  5922056., 5982144.,
      6042232.,  6102320.,  5217184., 5268496., 5319808.,  5371120., 6661850.,
      6726110.,  6790370.,  6854630., 8163048., 8240304.,  8317560., 8394816.,
      9720970.,  9811270.,  9901570., 9991870., 9758182.,  9848818., 9939454.,
      10030090., 9795394.,  9886366., 9977338., 10068310., 9832606., 9923914.,
      10015222., 10106530., 8601960., 8680368., 8758776.,  8837184., 7313630.,
      7379090.,  7444550.,  7510010., 5967424., 6019888.,  6072352., 6124816.,
      5082360.,  5125920.,  5169480., 5213040., 6473325.,  6527875., 6582425.,
      6636975.,  7912760.,  7978340., 8043920., 8109500.,  9400825., 9477475.,
      9554125.,  9630775.,  9435755., 9512685., 9589615.,  9666545., 9470685.,
      9547895.,  9625105.,  9702315., 9505615., 9583105.,  9660595., 9738085.,
      8296760.,  8363300.,  8429840., 8496380., 7038475.,  7094025., 7149575.,
      7205125.,  5730600.,  5775120., 5819640., 5864160.,  4665600., 4701088.,
      4736576.,  4772064.,  5931020., 5975460., 6019900.,  6064340., 7236304.,
      7289728.,  7343152.,  7396576., 8581580., 8644020.,  8706460., 8768900.,
      8612660.,  8675324.,  8737988., 8800652., 8643740.,  8706628., 8769516.,
      8832404.,  8674820.,  8737932., 8801044., 8864156.,  7558096., 7612288.,
      7666480.,  7720672.,  6400740., 6445980., 6491220.,  6536460., 5202624.,
      5238880.,  5275136.,  5311392.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      11.,     17.,     23.,     40.,     60.,     80.,     100.,
      137.,    179.,    221.,    263.,    328.,    400.,    472.,    544.,
      616.,    688.,    760.,    832.,    904.,    976.,    1048.,   1120.,
      1192.,   1264.,   1336.,   1408.,   1307.,   1373.,   1439.,   1505.,
      1168.,   1220.,   1272.,   1324.,   743.,    773.,    803.,    833.,
      202.,    246.,    290.,    334.,    816.,    920.,    1024.,   1128.,
      1906.,   2086.,   2266.,   2446.,   3536.,   3808.,   4080.,   4352.,
      4624.,   4896.,   5168.,   5440.,   5712.,   5984.,   6256.,   6528.,
      6800.,   7072.,   7344.,   7616.,   6454.,   6682.,   6910.,   7138.,
      5248.,   5416.,   5584.,   5752.,   3118.,   3210.,   3302.,   3394.,
      1487.,   1601.,   1715.,   1829.,   4120.,   4372.,   4624.,   4876.,
      7995.,   8409.,   8823.,   9237.,   13208.,  13808.,  14408.,  15008.,
      15608.,  16208.,  16808.,  17408.,  18008.,  18608.,  19208.,  19808.,
      20408.,  21008.,  21608.,  22208.,  18129.,  18615.,  19101.,  19587.,
      14032.,  14380.,  14728.,  15076.,  8021.,   8207.,   8393.,   8579.,
      4756.,   4972.,   5188.,   5404.,   11744.,  12208.,  12672.,  13136.,
      21092.,  21836.,  22580.,  23324.,  32928.,  33984.,  35040.,  36096.,
      37152.,  38208.,  39264.,  40320.,  41376.,  42432.,  43488.,  44544.,
      45600.,  46656.,  47712.,  48768.,  39020.,  39860.,  40700.,  41540.,
      29312.,  29904.,  30496.,  31088.,  16348.,  16660.,  16972.,  17284.,
      10804.,  11020.,  11236.,  11452.,  24736.,  25200.,  25664.,  26128.,
      41924.,  42668.,  43412.,  44156.,  62496.,  63552.,  64608.,  65664.,
      66720.,  67776.,  68832.,  69888.,  70944.,  72000.,  73056.,  74112.,
      75168.,  76224.,  77280.,  78336.,  62540.,  63380.,  64220.,  65060.,
      45888.,  46480.,  47072.,  47664.,  25084.,  25396.,  25708.,  26020.,
      16852.,  17068.,  17284.,  17500.,  37728.,  38192.,  38656.,  39120.,
      62756.,  63500.,  64244.,  64988.,  92064.,  93120.,  94176.,  95232.,
      96288.,  97344.,  98400.,  99456.,  100512., 101568., 102624., 103680.,
      104736., 105792., 106848., 107904., 86060.,  86900.,  87740.,  88580.,
      62464.,  63056.,  63648.,  64240.,  33820.,  34132.,  34444.,  34756.,
      22900.,  23116.,  23332.,  23548.,  50720.,  51184.,  51648.,  52112.,
      83588.,  84332.,  85076.,  85820.,  121632., 122688., 123744., 124800.,
      125856., 126912., 127968., 129024., 130080., 131136., 132192., 133248.,
      134304., 135360., 136416., 137472., 109580., 110420., 111260., 112100.,
      79040.,  79632.,  80224.,  80816.,  42556.,  42868.,  43180.,  43492.,
      27767.,  27977.,  28187.,  28397.,  59752.,  60196.,  60640.,  61084.,
      96051.,  96753.,  97455.,  98157.,  136760., 137744., 138728., 139712.,
      140696., 141680., 142664., 143648., 144632., 145616., 146600., 147584.,
      148568., 149552., 150536., 151520., 118857., 119631., 120405., 121179.,
      84256.,  84796.,  85336.,  85876.,  44669.,  44951.,  45233.,  45515.,
      26170.,  26342.,  26514.,  26686.,  55504.,  55864.,  56224.,  56584.,
      88066.,  88630.,  89194.,  89758.,  123920., 124704., 125488., 126272.,
      127056., 127840., 128624., 129408., 130192., 130976., 131760., 132544.,
      133328., 134112., 134896., 135680., 105478., 106090., 106702., 107314.,
      74016.,  74440.,  74864.,  75288.,  38878.,  39098.,  39318.,  39538.,
      17213.,  17315.,  17417.,  17519.,  36184.,  36396.,  36608.,  36820.,
      56945.,  57275.,  57605.,  57935.,  79528.,  79984.,  80440.,  80896.,
      81352.,  81808.,  82264.,  82720.,  83176.,  83632.,  84088.,  84544.,
      85000.,  85456.,  85912.,  86368.,  66755.,  67109.,  67463.,  67817.,
      46528.,  46772.,  47016.,  47260.,  24287.,  24413.,  24539.,  24665.,
      101.,    235.,    369.,    503.,    744.,    1020.,   1296.,   1572.,
      1961.,   2387.,   2813.,   3239.,   3784.,   4368.,   4952.,   5536.,
      6120.,   6704.,   7288.,   7872.,   8456.,   9040.,   9624.,   10208.,
      10792.,  11376.,  11960.,  12544.,  9275.,   9725.,   10175.,  10625.,
      6992.,   7300.,   7608.,   7916.,   3911.,   4069.,   4227.,   4385.,
      3978.,   4278.,   4578.,   4878.,   9392.,   10008.,  10624.,  11240.,
      16306.,  17254.,  18202.,  19150.,  24784.,  26080.,  27376.,  28672.,
      29968.,  31264.,  32560.,  33856.,  35152.,  36448.,  37744.,  39040.,
      40336.,  41632.,  42928.,  44224.,  33142.,  34138.,  35134.,  36130.,
      24064.,  24744.,  25424.,  26104.,  13038.,  13386.,  13734.,  14082.,
      12527.,  13025.,  13523.,  14021.,  27736.,  28756.,  29776.,  30796.,
      45723.,  47289.,  48855.,  50421.,  66584.,  68720.,  70856.,  72992.,
      75128.,  77264.,  79400.,  81536.,  83672.,  85808.,  87944.,  90080.,
      92216.,  94352.,  96488.,  98624.,  74289.,  75927.,  77565.,  79203.,
      53008.,  54124.,  55240.,  56356.,  28277.,  28847.,  29417.,  29987.,
      26644.,  27372.,  28100.,  28828.,  57568.,  59056.,  60544.,  62032.,
      92900.,  95180.,  97460.,  99740.,  132768., 135872., 138976., 142080.,
      145184., 148288., 151392., 154496., 157600., 160704., 163808., 166912.,
      170016., 173120., 176224., 179328., 135404., 137780., 140156., 142532.,
      95616.,  97232.,  98848.,  100464., 50524.,  51348.,  52172.,  52996.,
      47028.,  47756.,  48484.,  49212.,  99232.,  100720., 102208., 103696.,
      156740., 159020., 161300., 163580., 219680., 222784., 225888., 228992.,
      232096., 235200., 238304., 241408., 244512., 247616., 250720., 253824.,
      256928., 260032., 263136., 266240., 201932., 204308., 206684., 209060.,
      140864., 142480., 144096., 145712., 73596.,  74420.,  75244.,  76068.,
      67412.,  68140.,  68868.,  69596.,  140896., 142384., 143872., 145360.,
      220580., 222860., 225140., 227420., 306592., 309696., 312800., 315904.,
      319008., 322112., 325216., 328320., 331424., 334528., 337632., 340736.,
      343840., 346944., 350048., 353152., 268460., 270836., 273212., 275588.,
      186112., 187728., 189344., 190960., 96668.,  97492.,  98316.,  99140.,
      87796.,  88524.,  89252.,  89980.,  182560., 184048., 185536., 187024.,
      284420., 286700., 288980., 291260., 393504., 396608., 399712., 402816.,
      405920., 409024., 412128., 415232., 418336., 421440., 424544., 427648.,
      430752., 433856., 436960., 440064., 334988., 337364., 339740., 342116.,
      231360., 232976., 234592., 236208., 119740., 120564., 121388., 122212.,
      81815.,  82409.,  83003.,  83597.,  169384., 170596., 171808., 173020.,
      262803., 264657., 266511., 268365., 362168., 364688., 367208., 369728.,
      372248., 374768., 377288., 379808., 382328., 384848., 387368., 389888.,
      392408., 394928., 397448., 399968., 304041., 305967., 307893., 309819.,
      209248., 210556., 211864., 213172., 107933., 108599., 109265., 109931.,
      65786.,  66214.,  66642.,  67070.,  135760., 136632., 137504., 138376.,
      209986., 211318., 212650., 213982., 288528., 290336., 292144., 293952.,
      295760., 297568., 299376., 301184., 302992., 304800., 306608., 308416.,
      310224., 312032., 313840., 315648., 239686., 241066., 242446., 243826.,
      164512., 165448., 166384., 167320., 84638.,  85114.,  85590.,  86066.,
      38813.,  39043.,  39273.,  39503.,  79896.,  80364.,  80832.,  81300.,
      123281., 123995., 124709., 125423., 169000., 169968., 170936., 171904.,
      172872., 173840., 174808., 175776., 176744., 177712., 178680., 179648.,
      180616., 181584., 182552., 183520., 139235., 139973., 140711., 141449.,
      95360.,  95860.,  96360.,  96860.,  48959.,  49213.,  49467.,  49721.,
      197.,    459.,    721.,    983.,    1448.,   1980.,   2512.,   3044.,
      3785.,   4595.,   5405.,   6215.,   7240.,   8336.,   9432.,   10528.,
      11624.,  12720.,  13816.,  14912.,  16008.,  17104.,  18200.,  19296.,
      20392.,  21488.,  22584.,  23680.,  17243.,  18077.,  18911.,  19745.,
      12816.,  13380.,  13944.,  14508.,  7079.,   7365.,   7651.,   7937.,
      7754.,   8310.,   8866.,   9422.,   17968.,  19096.,  20224.,  21352.,
      30706.,  32422.,  34138.,  35854.,  46032.,  48352.,  50672.,  52992.,
      55312.,  57632.,  59952.,  62272.,  64592.,  66912.,  69232.,  71552.,
      73872.,  76192.,  78512.,  80832.,  59830.,  61594.,  63358.,  65122.,
      42880.,  44072.,  45264.,  46456.,  22958.,  23562.,  24166.,  24770.,
      23567.,  24449.,  25331.,  26213.,  51352.,  53140.,  54928.,  56716.,
      83451.,  86169.,  88887.,  91605.,  119960., 123632., 127304., 130976.,
      134648., 138320., 141992., 145664., 149336., 153008., 156680., 160352.,
      164024., 167696., 171368., 175040., 130449., 133239., 136029., 138819.,
      91984.,  93868.,  95752.,  97636.,  48533.,  49487.,  50441.,  51395.,
      48532.,  49772.,  51012.,  52252.,  103392., 105904., 108416., 110928.,
      164708., 168524., 172340., 176156., 232608., 237760., 242912., 248064.,
      253216., 258368., 263520., 268672., 273824., 278976., 284128., 289280.,
      294432., 299584., 304736., 309888., 231788., 235700., 239612., 243524.,
      161920., 164560., 167200., 169840., 84700.,  86036.,  87372.,  88708.,
      83252.,  84492.,  85732.,  86972.,  173728., 176240., 178752., 181264.,
      271556., 275372., 279188., 283004., 376864., 382016., 387168., 392320.,
      397472., 402624., 407776., 412928., 418080., 423232., 428384., 433536.,
      438688., 443840., 448992., 454144., 341324., 345236., 349148., 353060.,
      235840., 238480., 241120., 243760., 122108., 123444., 124780., 126116.,
      117972., 119212., 120452., 121692., 244064., 246576., 249088., 251600.,
      378404., 382220., 386036., 389852., 521120., 526272., 531424., 536576.,
      541728., 546880., 552032., 557184., 562336., 567488., 572640., 577792.,
      582944., 588096., 593248., 598400., 450860., 454772., 458684., 462596.,
      309760., 312400., 315040., 317680., 159516., 160852., 162188., 163524.,
      152692., 153932., 155172., 156412., 314400., 316912., 319424., 321936.,
      485252., 489068., 492884., 496700., 665376., 670528., 675680., 680832.,
      685984., 691136., 696288., 701440., 706592., 711744., 716896., 722048.,
      727200., 732352., 737504., 742656., 560396., 564308., 568220., 572132.,
      383680., 386320., 388960., 391600., 196924., 198260., 199596., 200932.,
      135863., 136841., 137819., 138797., 279016., 280996., 282976., 284956.,
      429555., 432561., 435567., 438573., 587576., 591632., 595688., 599744.,
      603800., 607856., 611912., 615968., 620024., 624080., 628136., 632192.,
      636248., 640304., 644360., 648416., 489225., 492303., 495381., 498459.,
      334240., 336316., 338392., 340468., 171197., 172247., 173297., 174347.,
      105402., 106086., 106770., 107454., 216016., 217400., 218784., 220168.,
      331906., 334006., 336106., 338206., 453136., 455968., 458800., 461632.,
      464464., 467296., 470128., 472960., 475792., 478624., 481456., 484288.,
      487120., 489952., 492784., 495616., 373894., 376042., 378190., 380338.,
      255008., 256456., 257904., 259352., 130398., 131130., 131862., 132594.,
      60413.,  60771.,  61129.,  61487.,  123608., 124332., 125056., 125780.,
      189617., 190715., 191813., 192911., 258472., 259952., 261432., 262912.,
      264392., 265872., 267352., 268832., 270312., 271792., 273272., 274752.,
      276232., 277712., 279192., 280672., 211715., 212837., 213959., 215081.,
      144192., 144948., 145704., 146460., 73631.,  74013.,  74395.,  74777.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      489248.,   506784.,   524320.,   541856.,   683960.,   706520.,
      729080.,   751640.,   909680.,   937520.,   965360.,   993200.,
      1167432.,  1200808.,  1234184.,  1267560.,  1265320.,  1300488.,
      1335656.,  1370824.,  1363208.,  1400168.,  1437128.,  1474088.,
      1461096.,  1499848.,  1538600.,  1577352.,  1368944.,  1402928.,
      1436912.,  1470896.,  1239640.,  1268600.,  1297560.,  1326520.,
      1072160.,  1095840.,  1119520.,  1143200.,  1050440.,  1078760.,
      1107080.,  1135400.,  1425630.,  1461830.,  1498030.,  1534230.,
      1842268.,  1886668.,  1931068.,  1975468.,  2301634.,  2354554.,
      2407474.,  2460394.,  2430778.,  2485938.,  2541098.,  2596258.,
      2559922.,  2617322.,  2674722.,  2732122.,  2689066.,  2748706.,
      2808346.,  2867986.,  2442460.,  2494540.,  2546620.,  2598700.,
      2138534.,  2182734.,  2226934.,  2271134.,  1776008.,  1812008.,
      1848008.,  1884008.,  1860912.,  1902576.,  1944240.,  1985904.,
      2392500.,  2445540.,  2498580.,  2551620.,  2980328.,  3045128.,
      3109928.,  3174728.,  3625932.,  3702876.,  3779820.,  3856764.,
      3766108.,  3845740.,  3925372.,  4005004.,  3906284.,  3988604.,
      4070924.,  4153244.,  4046460.,  4131468.,  4216476.,  4301484.,
      3621096.,  3695112.,  3769128.,  3843144.,  3122084.,  3184724.,
      3247364.,  3310004.,  2547888.,  2598768.,  2649648.,  2700528.,
      2734296.,  2791864.,  2849432.,  2907000.,  3448890.,  3521970.,
      3595050.,  3668130.,  4238868.,  4327908.,  4416948.,  4505988.,
      5106022.,  5211470.,  5316918.,  5422366.,  5269774.,  5378358.,
      5486942.,  5595526.,  5433526.,  5545246.,  5656966.,  5768686.,
      5597278.,  5712134.,  5826990.,  5941846.,  4978580.,  5078372.,
      5178164.,  5277956.,  4265554.,  4349834.,  4434114.,  4518394.,
      3456408.,  3524728.,  3593048.,  3661368.,  3702936.,  3778424.,
      3853912.,  3929400.,  4622570.,  4718050.,  4813530.,  4909010.,
      5635508.,  5751428.,  5867348.,  5983268.,  6743542.,  6880350.,
      7017158.,  7153966.,  6907294.,  7047238.,  7187182.,  7327126.,
      7071046.,  7214126.,  7357206.,  7500286.,  7234798.,  7381014.,
      7527230.,  7673446.,  6400820.,  6527492.,  6654164.,  6780836.,
      5454594.,  5561274.,  5667954.,  5774634.,  4394328.,  4480568.,
      4566808.,  4653048.,  4671576.,  4764984.,  4858392.,  4951800.,
      5796250.,  5914130.,  6032010.,  6149890.,  7032148.,  7174948.,
      7317748.,  7460548.,  8381062.,  8549230.,  8717398.,  8885566.,
      8544814.,  8716118.,  8887422.,  9058726.,  8708566.,  8883006.,
      9057446.,  9231886.,  8872318.,  9049894.,  9227470.,  9405046.,
      7823060.,  7976612.,  8130164.,  8283716.,  6643634.,  6772714.,
      6901794.,  7030874.,  5332248.,  5436408.,  5540568.,  5644728.,
      5640216.,  5751544.,  5862872.,  5974200.,  6969930.,  7110210.,
      7250490.,  7390770.,  8428788.,  8598468.,  8768148.,  8937828.,
      10018582., 10218110., 10417638., 10617166., 10182334., 10384998.,
      10587662., 10790326., 10346086., 10551886., 10757686., 10963486.,
      10509838., 10718774., 10927710., 11136646., 9245300.,  9425732.,
      9606164.,  9786596.,  7832674.,  7984154.,  8135634.,  8287114.,
      6270168.,  6392248.,  6514328.,  6636408.,  6436912.,  6540016.,
      6643120.,  6746224.,  7862900.,  7992740.,  8122580.,  8252420.,
      9409128.,  9566088.,  9723048.,  9880008.,  11077132., 11261596.,
      11446060., 11630524., 11235228., 11422380., 11609532., 11796684.,
      11393324., 11583164., 11773004., 11962844., 11551420., 11743948.,
      11936476., 12129004., 10070376., 10236552., 10402728., 10568904.,
      8451684.,  8591124.,  8730564.,  8870004.,  6693808.,  6806128.,
      6918448.,  7030768.,  6484616.,  6576936.,  6669256.,  6761576.,
      7808750.,  7924950.,  8041150.,  8157350.,  9239868.,  9380268.,
      9520668.,  9661068.,  10779250., 10944170., 11109090., 11274010.,
      10919146., 11086306., 11253466., 11420626., 11059042., 11228442.,
      11397842., 11567242., 11198938., 11370578., 11542218., 11713858.,
      9687484.,  9835564.,  9983644.,  10131724., 8053174.,  8177374.,
      8301574.,  8425774.,  6294728.,  6394728.,  6494728.,  6594728.,
      5711648.,  5790624.,  5869600.,  5948576.,  6717880.,  6817240.,
      6916600.,  7015960.,  7813488.,  7933488.,  8053488.,  8173488.,
      8999496.,  9140392.,  9281288.,  9422184.,  9108648.,  9251336.,
      9394024.,  9536712.,  9217800.,  9362280.,  9506760.,  9651240.,
      9326952.,  9473224.,  9619496.,  9765768.,  7989104.,  8115248.,
      8241392.,  8367536.,  6547544.,  6653304.,  6759064.,  6864824.,
      5001248.,  5086368.,  5171488.,  5256608.,  5251360.,  5338528.,
      5425696.,  5512864.,  6810680.,  6920280.,  7029880.,  7139480.,
      8470640.,  8602928.,  8735216.,  8867504.,  10232264., 10387496.,
      10542728., 10697960., 10330152., 10487176., 10644200., 10801224.,
      10193544., 10344168., 10494792., 10645416., 10024168., 10168392.,
      10312616., 10456840., 8780400.,  8902448.,  9024496.,  9146544.,
      7429848.,  7529464.,  7629080.,  7728696.,  5971488.,  6048416.,
      6125344.,  6202272.,  7714760.,  7805544.,  7896328.,  7987112.,
      9092990.,  9207270.,  9321550.,  9435830.,  10575132., 10713228.,
      10851324., 10989420., 12162466., 12324698., 12486930., 12649162.,
      12291610., 12456082., 12620554., 12785026., 11956882., 12115402.,
      12273922., 12432442., 11589386., 11741954., 11894522., 12047090.,
      9704860.,  9834252.,  9963644.,  10093036., 7700550.,  7806446.,
      7912342.,  8018238.,  5575176.,  5657256.,  5739336.,  5821416.,
      6949936.,  7046896.,  7143856.,  7240816.,  8072820.,  8194980.,
      8317140.,  8439300.,  9307240.,  9454984.,  9602728.,  9750472.,
      10654732., 10828444., 11002156., 11175868., 10794908., 10971308.,
      11147708., 11324108., 10241836., 10412732., 10583628., 10754524.,
      9655996.,  9821388.,  9986780.,  10152172., 7975784.,  8116360.,
      8256936.,  8397512.,  6166628.,  6282004.,  6397380.,  6512756.,
      4226992.,  4316784.,  4406576.,  4496368.,  6047320.,  6153016.,
      6258712.,  6364408.,  6891290.,  7024530.,  7157770.,  7291010.,
      7858772.,  8020004.,  8181236.,  8342468.,  8951558.,  9141230.,
      9330902.,  9520574.,  9115310.,  9308118.,  9500926.,  9693734.,
      8356438.,  8544190.,  8731942.,  8919694.,  7564798.,  7747494.,
      7930190.,  8112886.,  6124500.,  6280100.,  6435700.,  6591300.,
      4541746.,  4669802.,  4797858.,  4925914.,  3863320.,  3963384.,
      4063448.,  4163512.,  3128856.,  3219704.,  3310552.,  3401400.,
      4172746.,  4287426.,  4402106.,  4516786.,  5325300.,  5464260.,
      5603220.,  5742180.,  6588310.,  6751998.,  6915686.,  7079374.,
      6752062.,  6918886.,  7085710.,  7252534.,  6812390.,  6974158.,
      7135926.,  7297694.,  6839950.,  6996662.,  7153374.,  7310086.,
      6106996.,  6240324.,  6373652.,  6506980.,  5246434.,  5355930.,
      5465426.,  5574922.,  4256472.,  4341688.,  4426904.,  4512120.,
      3487192.,  3563192.,  3639192.,  3715192.,  4501626.,  4597746.,
      4693866.,  4789986.,  5609876.,  5726564.,  5843252.,  5959940.,
      6813734.,  6951438.,  7089142.,  7226846.,  6977486.,  7118326.,
      7259166.,  7400006.,  6808438.,  6944222.,  7080006.,  7215790.,
      6606622.,  6737350.,  6868078.,  6998806.,  5761812.,  5872868.,
      5983924.,  6094980.,  4804242.,  4895178.,  4986114.,  5077050.,
      3732120.,  3802488.,  3872856.,  3943224.,  2928024.,  2989176.,
      3050328.,  3111480.,  3683626.,  3761186.,  3838746.,  3916306.,
      4518196.,  4612612.,  4707028.,  4801444.,  5433526.,  5545246.,
      5656966.,  5768686.,  5597278.,  5712134.,  5826990.,  5941846.,
      5761030.,  5879022.,  5997014.,  6115006.,  5924782.,  6045910.,
      6167038.,  6288166.,  5263028.,  5368196.,  5473364.,  5578532.,
      4503362.,  4592122.,  4680882.,  4769642.,  3643992.,  3715896.,
      3787800.,  3859704.,  3772208.,  3832304.,  3892400.,  3952496.,
      4653876.,  4729956.,  4806036.,  4882116.,  5612776.,  5705224.,
      5797672.,  5890120.,  6650444.,  6759644.,  6868844.,  6978044.,
      6808540.,  6920428.,  7032316.,  7144204.,  6966636.,  7081212.,
      7195788.,  7310364.,  7124732.,  7241996.,  7359260.,  7476524.,
      6245352.,  6347016.,  6448680.,  6550344.,  5271332.,  5357012.,
      5442692.,  5528372.,  4201136.,  4270448.,  4339760.,  4409072.,
      4068104.,  4124584.,  4181064.,  4237544.,  4927886.,  4999286.,
      5070686.,  5142086.,  5858812.,  5945452.,  6032092.,  6118732.,
      6862162.,  6964362.,  7066562.,  7168762.,  7002058.,  7106498.,
      7210938.,  7315378.,  7141954.,  7248634.,  7355314.,  7461994.,
      7281850.,  7390770.,  7499690.,  7608610.,  6320764.,  6415084.,
      6509404.,  6603724.,  5272662.,  5352062.,  5431462.,  5510862.,
      4136264.,  4200424.,  4264584.,  4328744.,  3744032.,  3794336.,
      3844640.,  3894944.,  4416056.,  4479576.,  4543096.,  4606616.,
      5148784.,  5225776.,  5302768.,  5379760.,  5943240.,  6033960.,
      6124680.,  6215400.,  6052392.,  6144904.,  6237416.,  6329928.,
      6161544.,  6255848.,  6350152.,  6444456.,  6270696.,  6366792.,
      6462888.,  6558984.,  5381744.,  5464880.,  5548016.,  5631152.,
      4417752.,  4487672.,  4557592.,  4627512.,  3377696.,  3434144.,
      3490592.,  3547040.,  4074272.,  4165536.,  4256800.,  4348064.,
      5349560.,  5464280.,  5579000.,  5693720.,  6729584.,  6868016.,
      7006448.,  7144880.,  8215368.,  8377768.,  8540168.,  8702568.,
      8313256.,  8477448.,  8641640.,  8805832.,  8411144.,  8577128.,
      8743112.,  8909096.,  8509032.,  8676808.,  8844584.,  9012360.,
      7631216.,  7775792.,  7920368.,  8064944.,  6642520.,  6763640.,
      6884760.,  7005880.,  5541920.,  5639328.,  5736736.,  5834144.,
      6821960.,  6942440.,  7062920.,  7183400.,  8280606.,  8432006.,
      8583406.,  8734806.,  9872860.,  10055500., 10238140., 10420780.,
      11600002., 11814202., 12028402., 12242602., 11729146., 11945586.,
      12162026., 12378466., 11858290., 12076970., 12295650., 12514330.,
      11987434., 12208354., 12429274., 12650194., 10436188., 10626508.,
      10816828., 11007148., 8735462.,  8894862.,  9054262.,  9213662.,
      6883976.,  7012136.,  7140296.,  7268456.,  7975728.,  8127984.,
      8280240.,  8432496.,  9722676.,  9913956.,  10105236., 10296516.,
      11636456., 11867144., 12097832., 12328520., 13713484., 13975772.,
      14238060., 14500348., 13815772., 14072556., 14329340., 14586124.,
      13885292., 14136572., 14387852., 14639132., 13922044., 14167820.,
      14413596., 14659372., 12002792., 12209928., 12417064., 12624200.,
      9899300.,  10067412., 10235524., 10403636., 7610032.,  7738736.,
      7867440.,  7996144.,  9491416.,  9645240.,  9799064.,  9952888.,
      11546106., 11739506., 11932906., 12126306., 13772436., 14005860.,
      14239284., 14472708., 15937702., 16203406., 16469110., 16734814.,
      15834190., 16094838., 16355486., 16616134., 15697910., 15953502.,
      16209094., 16464686., 15528862., 15779398., 16029934., 16280470.,
      13234196., 13445604., 13657012., 13868420., 10748946., 10920778.,
      11092610., 11264442., 8071320.,  8203128.,  8334936.,  8466744.,
      9325464.,  9464440.,  9603416.,  9742392.,  11219626., 11394466.,
      11569306., 11744146., 13270580., 13481732., 13692884., 13904036.,
      15016246., 15255966., 15495686., 15735406., 14683358., 14918022.,
      15152686., 15387350., 14317702., 14547310., 14776918., 15006526.,
      13919278., 14143830., 14368382., 14592934., 11643828., 11832964.,
      12022100., 12211236., 9192642.,  9345914.,  9499186.,  9652458.,
      6563928.,  6680888.,  6797848.,  6914808.,  8242008.,  8366136.,
      8490264.,  8614392.,  9746266.,  9902546.,  10058826., 10215106.,
      11392468., 11581348., 11770228., 11959108., 12489158., 12702894.,
      12916630., 13130366., 11926894., 12135574., 12344254., 12552934.,
      11331862., 11535486., 11739110., 11942734., 10704062., 10902630.,
      11101198., 11299766., 8677204.,  8844068.,  9010932.,  9177796.,
      6489458.,  6624170.,  6758882.,  6893594.,  4139032.,  4241144.,
      4343256.,  4445368.,  6241048.,  6350328.,  6459608.,  6568888.,
      7126026.,  7263746.,  7401466.,  7539186.,  8138100.,  8304708.,
      8471316.,  8637924.,  8356438.,  8544190.,  8731942.,  8919694.,
      7564798.,  7747494.,  7930190.,  8112886.,  6740390.,  6918030.,
      7095670.,  7273310.,  5883214.,  6055798.,  6228382.,  6400966.,
      5382900.,  5527492.,  5672084.,  5816676.,  4736546.,  4852698.,
      4968850.,  5085002.,  3942360.,  4029624.,  4116888.,  4204152.,
      3245616.,  3328240.,  3410864.,  3493488.,  4281332.,  4385572.,
      4489812.,  4594052.,  5416808.,  5543048.,  5669288.,  5795528.,
      6550156.,  6690588.,  6831020.,  6971452.,  6572060.,  6706988.,
      6841916.,  6976844.,  6561196.,  6690620.,  6820044.,  6949468.,
      6517564.,  6641484.,  6765404.,  6889324.,  5672552.,  5775240.,
      5877928.,  5980616.,  4710372.,  4791444.,  4872516.,  4953588.,
      3629488.,  3688560.,  3747632.,  3806704.,  3179400.,  3232808.,
      3286216.,  3339624.,  4038702.,  4106262.,  4173822.,  4241382.,
      4966076.,  5048108.,  5130140.,  5212172.,  5630002.,  5718634.,
      5807266.,  5895898.,  5404330.,  5487010.,  5569690.,  5652370.,
      5145890.,  5222618.,  5299346.,  5376074.,  4854682.,  4925458.,
      4996234.,  5067010.,  3980092.,  4037036.,  4093980.,  4150924.,
      3021558.,  3064350.,  3107142.,  3149934.,  1977800.,  2006120.,
      2034440.,  2062760.,  1776416.,  1798048.,  1819680.,  1841312.,
      2114232.,  2141912.,  2169592.,  2197272.,  2484080.,  2518064.,
      2552048.,  2586032.,  2886984.,  2927528.,  2968072.,  3008616.,
      2996136.,  3038472.,  3080808.,  3123144.,  3105288.,  3149416.,
      3193544.,  3237672.,  3214440.,  3260360.,  3306280.,  3352200.,
      2774384.,  2814512.,  2854640.,  2894768.,  2287960.,  2322040.,
      2356120.,  2390200.,  1754144.,  1781920.,  1809696.,  1837472.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 512.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow7Stride1, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      70.,      110.,     150.,     260.,     404.,     548.,
      692.,     946.,     1258.,    1570.,    1882.,    2344.,    2888.,
      3432.,    3976.,    4520.,    5064.,    5608.,    6152.,    6696.,
      7240.,    7784.,    8328.,    8872.,    9416.,    9960.,    10504.,
      9898.,    10402.,   10906.,   11410.,   8932.,    9332.,    9732.,
      10132.,   5718.,    5950.,    6182.,    6414.,    1340.,    1676.,
      2012.,    2348.,    5896.,    6696.,    7496.,    8296.,    14180.,
      15572.,   16964.,   18356.,   26704.,   28816.,   30928.,   33040.,
      35152.,   37264.,   39376.,   41488.,   43600.,   45712.,   47824.,
      49936.,   52048.,   54160.,   56272.,   58384.,   49748.,   51524.,
      53300.,   55076.,   40648.,   41960.,   43272.,   44584.,   24236.,
      24956.,   25676.,   26396.,   11098.,   11986.,   12874.,   13762.,
      31244.,   33212.,   35180.,   37148.,   61206.,   64446.,   67686.,
      70926.,   101752.,  106456.,  111160.,  115864.,  120568.,  125272.,
      129976.,  134680.,  139384.,  144088.,  148792.,  153496.,  158200.,
      162904.,  167608.,  172312.,  141054.,  144870.,  148686.,  152502.,
      109484.,  112220.,  114956.,  117692.,  62722.,   64186.,   65650.,
      67114.,   36472.,   38168.,   39864.,   41560.,   90640.,   94288.,
      97936.,   101584.,  163528.,  169384.,  175240.,  181096.,  256160.,
      264480.,  272800.,  281120.,  289440.,  297760.,  306080.,  314400.,
      322720.,  331040.,  339360.,  347680.,  356000.,  364320.,  372640.,
      380960.,  305320.,  311944.,  318568.,  325192.,  229776.,  234448.,
      239120.,  243792.,  128344.,  130808.,  133272.,  135736.,  83960.,
      85656.,   87352.,   89048.,   192784.,  196432.,  200080.,  203728.,
      327496.,  333352.,  339208.,  345064.,  489120.,  497440.,  505760.,
      514080.,  522400.,  530720.,  539040.,  547360.,  555680.,  564000.,
      572320.,  580640.,  588960.,  597280.,  605600.,  613920.,  490792.,
      497416.,  504040.,  510664.,  360592.,  365264.,  369936.,  374608.,
      197336.,  199800.,  202264.,  204728.,  131448.,  133144.,  134840.,
      136536.,  294928.,  298576.,  302224.,  305872.,  491464.,  497320.,
      503176.,  509032.,  722080.,  730400.,  738720.,  747040.,  755360.,
      763680.,  772000.,  780320.,  788640.,  796960.,  805280.,  813600.,
      821920.,  830240.,  838560.,  846880.,  676264.,  682888.,  689512.,
      696136.,  491408.,  496080.,  500752.,  505424.,  266328.,  268792.,
      271256.,  273720.,  178936.,  180632.,  182328.,  184024.,  397072.,
      400720.,  404368.,  408016.,  655432.,  661288.,  667144.,  673000.,
      955040.,  963360.,  971680.,  980000.,  988320.,  996640.,  1004960.,
      1013280., 1021600., 1029920., 1038240., 1046560., 1054880., 1063200.,
      1071520., 1079840., 861736.,  868360.,  874984.,  881608.,  622224.,
      626896.,  631568.,  636240.,  335320.,  337784.,  340248.,  342712.,
      218554.,  220210.,  221866.,  223522.,  470732.,  474236.,  477740.,
      481244.,  757302.,  762846.,  768390.,  773934.,  1079032., 1086808.,
      1094584., 1102360., 1110136., 1117912., 1125688., 1133464., 1141240.,
      1149016., 1156792., 1164568., 1172344., 1180120., 1187896., 1195672.,
      938526.,  944646.,  950766.,  956886.,  665708.,  669980.,  674252.,
      678524.,  353122.,  355354.,  357586.,  359818.,  206716.,  208076.,
      209436.,  210796.,  438664.,  441512.,  444360.,  447208.,  696356.,
      700820.,  705284.,  709748.,  980304.,  986512.,  992720.,  998928.,
      1005136., 1011344., 1017552., 1023760., 1029968., 1036176., 1042384.,
      1048592., 1054800., 1061008., 1067216., 1073424., 834836.,  839684.,
      844532.,  849380.,  586056.,  589416.,  592776.,  596136.,  307948.,
      309692.,  311436.,  313180.,  136254.,  137062.,  137870.,  138678.,
      286532.,  288212.,  289892.,  291572.,  451090.,  453706.,  456322.,
      458938.,  630184.,  633800.,  637416.,  641032.,  644648.,  648264.,
      651880.,  655496.,  659112.,  662728.,  666344.,  669960.,  673576.,
      677192.,  680808.,  684424.,  529162.,  531970.,  534778.,  537586.,
      368932.,  370868.,  372804.,  374740.,  192630.,  193630.,  194630.,
      195630.,  670.,     1734.,    2798.,    3862.,    5636.,    7828.,
      10020.,   12212.,   15154.,   18538.,   21922.,   25306.,   29480.,
      34120.,   38760.,   43400.,   48040.,   52680.,   57320.,   61960.,
      66600.,   71240.,   75880.,   80520.,   85160.,   89800.,   94440.,
      99080.,   73258.,   76834.,   80410.,   83986.,   55268.,   57716.,
      60164.,   62612.,   30934.,   32190.,   33446.,   34702.,   31292.,
      33676.,   36060.,   38444.,   73992.,   78888.,   83784.,   88680.,
      128612.,  136148.,  143684.,  151220.,  195664.,  205968.,  216272.,
      226576.,  236880.,  247184.,  257488.,  267792.,  278096.,  288400.,
      298704.,  309008.,  319312.,  329616.,  339920.,  350224.,  262484.,
      270404.,  278324.,  286244.,  190664.,  196072.,  201480.,  206888.,
      103340.,  106108.,  108876.,  111644.,  99034.,   102994.,  106954.,
      110914.,  219404.,  227516.,  235628.,  243740.,  361878.,  374334.,
      386790.,  399246.,  527224.,  544216.,  561208.,  578200.,  595192.,
      612184.,  629176.,  646168.,  663160.,  680152.,  697144.,  714136.,
      731128.,  748120.,  765112.,  782104.,  589182.,  602214.,  615246.,
      628278.,  420524.,  429404.,  438284.,  447164.,  224386.,  228922.,
      233458.,  237994.,  211064.,  216856.,  222648.,  228440.,  456208.,
      468048.,  479888.,  491728.,  736456.,  754600.,  772744.,  790888.,
      1052832., 1077536., 1102240., 1126944., 1151648., 1176352., 1201056.,
      1225760., 1250464., 1275168., 1299872., 1324576., 1349280., 1373984.,
      1398688., 1423392., 1074856., 1093768., 1112680., 1131592., 759184.,
      772048.,  784912.,  797776.,  401240.,  407800.,  414360.,  420920.,
      373240.,  379032.,  384824.,  390616.,  787728.,  799568.,  811408.,
      823248.,  1244488., 1262632., 1280776., 1298920., 1744544., 1769248.,
      1793952., 1818656., 1843360., 1868064., 1892768., 1917472., 1942176.,
      1966880., 1991584., 2016288., 2040992., 2065696., 2090400., 2115104.,
      1604392., 1623304., 1642216., 1661128., 1119376., 1132240., 1145104.,
      1157968., 584920.,  591480.,  598040.,  604600.,  535416.,  541208.,
      547000.,  552792.,  1119248., 1131088., 1142928., 1154768., 1752520.,
      1770664., 1788808., 1806952., 2436256., 2460960., 2485664., 2510368.,
      2535072., 2559776., 2584480., 2609184., 2633888., 2658592., 2683296.,
      2708000., 2732704., 2757408., 2782112., 2806816., 2133928., 2152840.,
      2171752., 2190664., 1479568., 1492432., 1505296., 1518160., 768600.,
      775160.,  781720.,  788280.,  697592.,  703384.,  709176.,  714968.,
      1450768., 1462608., 1474448., 1486288., 2260552., 2278696., 2296840.,
      2314984., 3127968., 3152672., 3177376., 3202080., 3226784., 3251488.,
      3276192., 3300896., 3325600., 3350304., 3375008., 3399712., 3424416.,
      3449120., 3473824., 3498528., 2663464., 2682376., 2701288., 2720200.,
      1839760., 1852624., 1865488., 1878352., 952280.,  958840.,  965400.,
      971960.,  650554.,  655282.,  660010.,  664738.,  1347020., 1356668.,
      1366316., 1375964., 2090166., 2104926., 2119686., 2134446., 2880760.,
      2900824., 2920888., 2940952., 2961016., 2981080., 3001144., 3021208.,
      3041272., 3061336., 3081400., 3101464., 3121528., 3141592., 3161656.,
      3181720., 2418846., 2434182., 2449518., 2464854., 1664876., 1675292.,
      1685708., 1696124., 858850.,  864154.,  869458.,  874762.,  523388.,
      526796.,  530204.,  533612.,  1080200., 1087144., 1094088., 1101032.,
      1670948., 1681556., 1692164., 1702772., 2296144., 2310544., 2324944.,
      2339344., 2353744., 2368144., 2382544., 2396944., 2411344., 2425744.,
      2440144., 2454544., 2468944., 2483344., 2497744., 2512144., 1907732.,
      1918724., 1929716., 1940708., 1309512., 1316968., 1324424., 1331880.,
      673772.,  677564.,  681356.,  685148.,  308926.,  310758.,  312590.,
      314422.,  635972.,  639700.,  643428.,  647156.,  981394.,  987082.,
      992770.,  998458.,  1345448., 1353160., 1360872., 1368584., 1376296.,
      1384008., 1391720., 1399432., 1407144., 1414856., 1422568., 1430280.,
      1437992., 1445704., 1453416., 1461128., 1108618., 1114498., 1120378.,
      1126258., 759332.,  763316.,  767300.,  771284.,  389878.,  391902.,
      393926.,  395950.,  1310.,    3398.,    5486.,    7574.,    11012.,
      15252.,   19492.,   23732.,   29362.,   35818.,   42274.,   48730.,
      56616.,   65352.,   74088.,   82824.,   91560.,   100296.,  109032.,
      117768.,  126504.,  135240.,  143976.,  152712.,  161448.,  170184.,
      178920.,  187656.,  136618.,  143266.,  149914.,  156562.,  101604.,
      106100.,  110596.,  115092.,  56150.,   58430.,   60710.,   62990.,
      61244.,   65676.,   70108.,   74540.,   142088.,  151080.,  160072.,
      169064.,  243044.,  256724.,  270404.,  284084.,  364624.,  383120.,
      401616.,  420112.,  438608.,  457104.,  475600.,  494096.,  512592.,
      531088.,  549584.,  568080.,  586576.,  605072.,  623568.,  642064.,
      475220.,  489284.,  503348.,  517412.,  340680.,  350184.,  359688.,
      369192.,  182444.,  187260.,  192076.,  196892.,  186970.,  194002.,
      201034.,  208066.,  407564.,  421820.,  436076.,  450332.,  662550.,
      684222.,  705894.,  727566.,  952696.,  981976.,  1011256., 1040536.,
      1069816., 1099096., 1128376., 1157656., 1186936., 1216216., 1245496.,
      1274776., 1304056., 1333336., 1362616., 1391896., 1037310., 1059558.,
      1081806., 1104054., 731564.,  746588.,  761612.,  776636.,  386050.,
      393658.,  401266.,  408874.,  385656.,  395544.,  405432.,  415320.,
      821776.,  841808.,  861840.,  881872.,  1309384., 1339816., 1370248.,
      1400680., 1849504., 1890592., 1931680., 1972768., 2013856., 2054944.,
      2096032., 2137120., 2178208., 2219296., 2260384., 2301472., 2342560.,
      2383648., 2424736., 2465824., 1844392., 1875592., 1906792., 1937992.,
      1288592., 1309648., 1330704., 1351760., 674136.,  684792.,  695448.,
      706104.,  662520.,  672408.,  682296.,  692184.,  1382672., 1402704.,
      1422736., 1442768., 2161480., 2191912., 2222344., 2252776., 2999968.,
      3041056., 3082144., 3123232., 3164320., 3205408., 3246496., 3287584.,
      3328672., 3369760., 3410848., 3451936., 3493024., 3534112., 3575200.,
      3616288., 2717992., 2749192., 2780392., 2811592., 1878160., 1899216.,
      1920272., 1941328., 972504.,  983160.,  993816.,  1004472., 939384.,
      949272.,  959160.,  969048.,  1943568., 1963600., 1983632., 2003664.,
      3013576., 3044008., 3074440., 3104872., 4150432., 4191520., 4232608.,
      4273696., 4314784., 4355872., 4396960., 4438048., 4479136., 4520224.,
      4561312., 4602400., 4643488., 4684576., 4725664., 4766752., 3591592.,
      3622792., 3653992., 3685192., 2467728., 2488784., 2509840., 2530896.,
      1270872., 1281528., 1292184., 1302840., 1216248., 1226136., 1236024.,
      1245912., 2504464., 2524496., 2544528., 2564560., 3865672., 3896104.,
      3926536., 3956968., 5300896., 5341984., 5383072., 5424160., 5465248.,
      5506336., 5547424., 5588512., 5629600., 5670688., 5711776., 5752864.,
      5793952., 5835040., 5876128., 5917216., 4465192., 4496392., 4527592.,
      4558792., 3057296., 3078352., 3099408., 3120464., 1569240., 1579896.,
      1590552., 1601208., 1082554., 1090354., 1098154., 1105954., 2223308.,
      2239100., 2254892., 2270684., 3423030., 3447006., 3470982., 3494958.,
      4682488., 4714840., 4747192., 4779544., 4811896., 4844248., 4876600.,
      4908952., 4941304., 4973656., 5006008., 5038360., 5070712., 5103064.,
      5135416., 5167768., 3899166., 3923718., 3948270., 3972822., 2664044.,
      2680604., 2697164., 2713724., 1364578., 1372954., 1381330., 1389706.,
      840060.,  845516.,  850972.,  856428.,  1721736., 1732776., 1743816.,
      1754856., 2645540., 2662292., 2679044., 2695796., 3611984., 3634576.,
      3657168., 3679760., 3702352., 3724944., 3747536., 3770128., 3792720.,
      3815312., 3837904., 3860496., 3883088., 3905680., 3928272., 3950864.,
      2980628., 2997764., 3014900., 3032036., 2032968., 2044520., 2056072.,
      2067624., 1039596., 1045436., 1051276., 1057116., 481598.,  484454.,
      487310.,  490166.,  985412.,  991188.,  996964.,  1002740., 1511698.,
      1520458., 1529218., 1537978., 2060712., 2072520., 2084328., 2096136.,
      2107944., 2119752., 2131560., 2143368., 2155176., 2166984., 2178792.,
      2190600., 2202408., 2214216., 2226024., 2237832., 1688074., 1697026.,
      1705978., 1714930., 1149732., 1155764., 1161796., 1167828., 587126.,
      590174.,  593222.,  596270.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int features = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, features, padding,
                                max_input_val);
}
