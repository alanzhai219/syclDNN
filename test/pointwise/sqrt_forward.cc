/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_pointwise_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "portdnn/pointwise/direction.h"
#include "portdnn/pointwise/operators.h"

#include "test/pointwise/pointwise_fixture.h"
#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"

using namespace sycldnn;  // NOLINT(google-build-using-namespace)

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using TypeBackendPairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;

using GTestTypePairs = sycldnn::types::ToGTestTypes<TypeBackendPairs>::type;

template <typename DataType>
using SqrtForward =
    PointwiseFixture<DataType, pointwise::Sqrt, pointwise::Forward>;
TYPED_TEST_SUITE(SqrtForward, GTestTypePairs);
TYPED_TEST(SqrtForward, Shape_1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> input = iota_initialised_data<DataType>(1, 1);
  const std::vector<DataType> exp_out = {1.};
  this->test_pointwise(input, exp_out);
}
TYPED_TEST(SqrtForward, Shape_8x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> input = iota_initialised_data<DataType>(8, 8);
  const std::vector<DataType> exp_out = {1.,
                                         1.4142135623730951,
                                         1.7320508075688772,
                                         2.,
                                         2.23606797749979,
                                         2.449489742783178,
                                         2.6457513110645907,
                                         2.8284271247461903};
  this->test_pointwise(input, exp_out);
}
TYPED_TEST(SqrtForward, Shape_9x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> input = iota_initialised_data<DataType>(9, 9);
  const std::vector<DataType> exp_out = {1.,
                                         1.4142135623730951,
                                         1.7320508075688772,
                                         2.,
                                         2.23606797749979,
                                         2.449489742783178,
                                         2.6457513110645907,
                                         2.8284271247461903,
                                         3.};
  this->test_pointwise(input, exp_out);
}
TYPED_TEST(SqrtForward, Shape_10x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> input = iota_initialised_data<DataType>(10, 10);
  const std::vector<DataType> exp_out = {1.,
                                         1.4142135623730951,
                                         1.7320508075688772,
                                         2.,
                                         2.23606797749979,
                                         2.449489742783178,
                                         2.6457513110645907,
                                         2.8284271247461903,
                                         3.,
                                         3.1622776601683795};
  this->test_pointwise(input, exp_out);
}
