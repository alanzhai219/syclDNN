/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_reduce_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>
#include <vector>

#include "portdnn/reduce/operators.h"
#include "test/reduce/fixture.h"
#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::AllBackendTypes;

using TypeBackendPairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;

using GTestTypePair = sycldnn::types::ToGTestTypes<TypeBackendPairs>::type;

template <typename Pair>
using ReduceMin = ReduceFixture<Pair, sycldnn::reduce::Min>;
TYPED_TEST_SUITE(ReduceMin, GTestTypePair);
TYPED_TEST(ReduceMin, Batch1Outer1Inner1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1.};
  const int batches = 1;
  const int outer = 1;
  const int inner = 1;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch1Outer1Inner11) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1., 2., 3., 4.,  5., 6.,
                                         7., 8., 9., 10., 11.};
  const int batches = 1;
  const int outer = 1;
  const int inner = 11;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch1Outer11Inner1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1.};
  const int batches = 1;
  const int outer = 11;
  const int inner = 1;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch1Outer11Inner11) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1., 2., 3., 4.,  5., 6.,
                                         7., 8., 9., 10., 11.};
  const int batches = 1;
  const int outer = 11;
  const int inner = 11;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch2Outer1Inner1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1., 2.};
  const int batches = 2;
  const int outer = 1;
  const int inner = 1;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch2Outer1Inner11) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,
                                         9.,  10., 11., 12., 13., 14., 15., 16.,
                                         17., 18., 19., 20., 21., 22.};
  const int batches = 2;
  const int outer = 1;
  const int inner = 11;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch2Outer11Inner1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {1., 12.};
  const int batches = 2;
  const int outer = 11;
  const int inner = 1;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
TYPED_TEST(ReduceMin, Batch2Outer11Inner11) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   3.,   4.,   5.,   6.,   7.,   8.,   9.,   10.,  11.,
      122., 123., 124., 125., 126., 127., 128., 129., 130., 131., 132.};
  const int batches = 2;
  const int outer = 11;
  const int inner = 11;
  const DataType max_input_val = 2048.0;
  this->run(exp_out, batches, outer, inner, max_input_val);
}
