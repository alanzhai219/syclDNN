/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using ForwardWindow5Stride1 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 1>;
TYPED_TEST_SUITE(ForwardWindow5Stride1, GTestTypePairs);
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554., 2142., 2760., 3030., 2460., 1869., 2636., 3564., 4510.,
      4820., 3860., 2894., 3850., 5140., 6425., 6750., 5350., 3970.,
      5110., 6760., 8375., 8700., 6850., 5050., 3632., 4756., 5830.,
      6040., 4700., 3422., 2292., 2958., 3570., 3690., 2820., 2013.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425., 6750., 8375., 8700.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 6988.,  7264.,  9136.,  9512.,  11180., 11660.,
      11580., 12080., 8992.,  9400.,  6532.,  6844.,  4350.,  4584.,  5598.,
      5916.,  6735.,  7140.,  6960.,  7380.,  5298.,  5640.,  3765.,  4026.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500.,
                                         16225., 16750., 16850., 17400.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568.,  10635.,
      10770., 10905., 11040., 11670., 11820., 11970., 12120., 9462.,  9588.,
      9714.,  9840.,  7179.,  7278.,  7377.,  7476.,  10148., 10280., 10412.,
      10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040.,
      18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072.,
      11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980.,
      20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600.,
      27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880.,
      19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925.,
      32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500.,
      26950., 27400., 19165., 19510., 19855., 20200., 13700., 13976., 14252.,
      14528., 17896., 18272., 18648., 19024., 21880., 22360., 22840., 23320.,
      22660., 23160., 23660., 24160., 17576., 17984., 18392., 18800., 12752.,
      13064., 13376., 13688., 8466.,  8700.,  8934.,  9168.,  10878., 11196.,
      11514., 11832., 13065., 13470., 13875., 14280., 13500., 13920., 14340.,
      14760., 10254., 10596., 10938., 11280., 7269.,  7530.,  7791.,  8052.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000.,
      31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,  6216.,  7932.,  8568.,  10245., 11040., 11295., 12120., 9180.,
      9840.,  6981.,  7476.,  9896.,  10544., 13392., 14256., 16960., 18040.,
      18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460.,
      20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880.,
      19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020.,
      27400., 19165., 20200., 13712., 14528., 17936., 19024., 21960., 23320.,
      22760., 24160., 17680., 18800., 12848., 13688., 8547.,  9168.,  11004.,
      11832., 13245., 14280., 13695., 14760., 10428., 11280., 7413.,  8052.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000.,
                                         31825., 33500., 33075., 34800.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343., 11478., 12288., 12432., 15672., 15864., 16932., 17136., 20235.,
      20490., 21810., 22080., 22305., 22590., 23940., 24240., 18120., 18360.,
      19428., 19680., 13773., 13962., 14754., 14952., 19540., 19792., 20824.,
      21088., 26432., 26784., 28144., 28512., 33460., 33920., 35600., 36080.,
      35820., 36320., 38040., 38560., 28672., 29088., 30448., 30880., 21484.,
      21808., 22816., 23152., 28745., 29150., 30380., 30800., 38360., 38920.,
      40540., 41120., 47925., 48650., 50650., 51400., 50375., 51150., 53200.,
      54000., 39880., 40520., 42140., 42800., 29555., 30050., 31250., 31760.,
      38285., 38870., 40280., 40880., 50600., 51400., 53260., 54080., 62625.,
      63650., 65950., 67000., 65075., 66150., 68500., 69600., 51160., 52040.,
      53900., 54800., 37655., 38330., 39710., 40400., 26884., 27424., 28504.,
      29056., 35136., 35872., 37296., 38048., 42980., 43920., 45680., 46640.,
      44540., 45520., 47320., 48320., 34560., 35360., 36784., 37600., 25084.,
      25696., 26752., 27376., 16635., 17094., 17868., 18336., 21384., 22008.,
      23028., 23664., 25695., 26490., 27750., 28560., 26565., 27390., 28680.,
      29520., 20184., 20856., 21876., 22560., 14313., 14826., 15582., 16104.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925., 48650., 50650., 51400., 50375., 51150., 53200., 54000.,
      62625., 63650., 65950., 67000., 65075., 66150., 68500., 69600.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      53228.,  53768.,  54308.,  54848.,  56456.,  57008.,  57560.,  58112.,
      69536.,  70272.,  71008.,  71744.,  73840.,  74592.,  75344.,  76096.,
      85020.,  85960.,  86900.,  87840.,  90400.,  91360.,  92320.,  93280.,
      88100.,  89080.,  90060.,  91040.,  93640.,  94640.,  95640.,  96640.,
      68320.,  69120.,  69920.,  70720.,  72752.,  73568.,  74384.,  75200.,
      49556.,  50168.,  50780.,  51392.,  52880.,  53504.,  54128.,  54752.,
      32811.,  33270.,  33729.,  34188.,  35268.,  35736.,  36204.,  36672.,
      42144.,  42768.,  43392.,  44016.,  45420.,  46056.,  46692.,  47328.,
      50595.,  51390.,  52185.,  52980.,  54690.,  55500.,  56310.,  57120.,
      52305.,  53130.,  53955.,  54780.,  56520.,  57360.,  58200.,  59040.,
      39696.,  40368.,  41040.,  41712.,  43068.,  43752.,  44436.,  45120.,
      28113.,  28626.,  29139.,  29652.,  30642.,  31164.,  31686.,  32208.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      53252.,  54848.,  56468.,  58112.,  69616.,  71744.,  73904.,  76096.,
      85180.,  87840.,  90540.,  93280.,  88300.,  91040.,  93820.,  96640.,
      68528.,  70720.,  72944.,  75200.,  49748.,  51392.,  53060.,  54752.,
      32973.,  34188.,  35421.,  36672.,  42396.,  44016.,  45660.,  47328.,
      50955.,  52980.,  55035.,  57120.,  52695.,  54780.,  56895.,  59040.,
      40044.,  41712.,  43404.,  45120.,  28401.,  29652.,  30921.,  32208.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,  44058.,  45642.,  45912.,  47523.,  47802.,  49440.,  49728.,
      60612.,  60984.,  63072.,  63456.,  65580.,  65976.,  68136.,  68544.,
      78375.,  78870.,  81450.,  81960.,  84585.,  85110.,  87780.,  88320.,
      86595.,  87150.,  89790.,  90360.,  93045.,  93630.,  96360.,  96960.,
      70404.,  70872.,  72960.,  73440.,  75564.,  76056.,  78216.,  78720.,
      53553.,  53922.,  55470.,  55848.,  57423.,  57810.,  59412.,  59808.,
      76156.,  76648.,  78664.,  79168.,  81220.,  81736.,  83824.,  84352.,
      103088., 103776., 106432., 107136., 109840., 110560., 113312., 114048.,
      130580., 131480., 134760., 135680., 139020., 139960., 143360., 144320.,
      139940., 140920., 144280., 145280., 148700., 149720., 153200., 154240.,
      112048., 112864., 115520., 116352., 119056., 119904., 122656., 123520.,
      83980.,  84616.,  86584.,  87232.,  89236.,  89896.,  91936.,  92608.,
      112595., 113390., 115790., 116600., 119045., 119870., 122360., 123200.,
      150300., 151400., 154560., 155680., 158900., 160040., 163320., 164480.,
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      156380., 157640., 160800., 162080., 165300., 166600., 169880., 171200.,
      115895., 116870., 119210., 120200., 122585., 123590., 126020., 127040.,
      150395., 151550., 154310., 155480., 158285., 159470., 162320., 163520.,
      198780., 200360., 204000., 205600., 209300., 210920., 214680., 216320.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.,
      201020., 202760., 206400., 208160., 211860., 213640., 217400., 219200.,
      147935., 149270., 151970., 153320., 156065., 157430., 160220., 161600.,
      105436., 106504., 108616., 109696., 111844., 112936., 115120., 116224.,
      137776., 139232., 142016., 143488., 146320., 147808., 150688., 152192.,
      168500., 170360., 173800., 175680., 179180., 181080., 184640., 186560.,
      174660., 176600., 180120., 182080., 185660., 187640., 191280., 193280.,
      135472., 137056., 139840., 141440., 144272., 145888., 148768., 150400.,
      98284.,  99496.,  101560., 102784., 104884., 106120., 108256., 109504.,
      65037.,  65946.,  67458.,  68376.,  69915.,  70842.,  72408.,  73344.,
      83556.,  84792.,  86784.,  88032.,  90060.,  91320.,  93384.,  94656.,
      100335., 101910., 104370., 105960., 108465., 110070., 112620., 114240.,
      103755., 105390., 107910., 109560., 112125., 113790., 116400., 118080.,
      78756.,  80088.,  82080.,  83424.,  85452.,  86808.,  88872.,  90240.,
      55785.,  56802.,  58278.,  59304.,  60807.,  61842.,  63372.,  64416.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,  87594.,  87855.,  88116.,  91014.,  91284.,  91554.,  91824.,
      94767.,  95046.,  95325.,  95604.,  98592.,  98880.,  99168.,  99456.,
      120852., 121224., 121596., 121968., 125760., 126144., 126528., 126912.,
      130764., 131160., 131556., 131952., 135864., 136272., 136680., 137088.,
      156255., 156750., 157245., 157740., 162390., 162900., 163410., 163920.,
      168645., 169170., 169695., 170220., 175020., 175560., 176100., 176640.,
      172635., 173190., 173745., 174300., 179010., 179580., 180150., 180720.,
      185505., 186090., 186675., 187260., 192120., 192720., 193320., 193920.,
      140340., 140808., 141276., 141744., 145440., 145920., 146400., 146880.,
      150636., 151128., 151620., 152112., 155928., 156432., 156936., 157440.,
      106737., 107106., 107475., 107844., 110562., 110940., 111318., 111696.,
      114459., 114846., 115233., 115620., 118428., 118824., 119220., 119616.,
      151820., 152312., 152804., 153296., 156824., 157328., 157832., 158336.,
      161924., 162440., 162956., 163472., 167120., 167648., 168176., 168704.,
      205488., 206176., 206864., 207552., 212160., 212864., 213568., 214272.,
      218960., 219680., 220400., 221120., 225888., 226624., 227360., 228096.,
      260260., 261160., 262060., 262960., 268600., 269520., 270440., 271360.,
      277100., 278040., 278980., 279920., 285760., 286720., 287680., 288640.,
      278900., 279880., 280860., 281840., 287560., 288560., 289560., 290560.,
      296380., 297400., 298420., 299440., 305360., 306400., 307440., 308480.,
      223280., 224096., 224912., 225728., 230208., 231040., 231872., 232704.,
      237264., 238112., 238960., 239808., 244448., 245312., 246176., 247040.,
      167324., 167960., 168596., 169232., 172520., 173168., 173816., 174464.,
      177812., 178472., 179132., 179792., 183200., 183872., 184544., 185216.,
      224395., 225190., 225985., 226780., 230770., 231580., 232390., 233200.,
      237265., 238090., 238915., 239740., 243880., 244720., 245560., 246400.,
      299500., 300600., 301700., 302800., 308000., 309120., 310240., 311360.,
      316660., 317800., 318940., 320080., 325480., 326640., 327800., 328960.,
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      311500., 312760., 314020., 315280., 320320., 321600., 322880., 324160.,
      329300., 330600., 331900., 333200., 338440., 339760., 341080., 342400.,
      230815., 231790., 232765., 233740., 237430., 238420., 239410., 240400.,
      244165., 245170., 246175., 247180., 251020., 252040., 253060., 254080.,
      299635., 300790., 301945., 303100., 307450., 308620., 309790., 310960.,
      315385., 316570., 317755., 318940., 323440., 324640., 325840., 327040.,
      395980., 397560., 399140., 400720., 406400., 408000., 409600., 411200.,
      416980., 418600., 420220., 421840., 427720., 429360., 431000., 432640.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.,
      400300., 402040., 403780., 405520., 411040., 412800., 414560., 416320.,
      421940., 423720., 425500., 427280., 433000., 434800., 436600., 438400.,
      294535., 295870., 297205., 298540., 302590., 303940., 305290., 306640.,
      310765., 312130., 313495., 314860., 319060., 320440., 321820., 323200.,
      209804., 210872., 211940., 213008., 216152., 217232., 218312., 219392.,
      222596., 223688., 224780., 225872., 229136., 230240., 231344., 232448.,
      274096., 275552., 277008., 278464., 282560., 284032., 285504., 286976.,
      291152., 292640., 294128., 295616., 299872., 301376., 302880., 304384.,
      335140., 337000., 338860., 340720., 345720., 347600., 349480., 351360.,
      356460., 358360., 360260., 362160., 367360., 369280., 371200., 373120.,
      347380., 349320., 351260., 353200., 358280., 360240., 362200., 364160.,
      369340., 371320., 373300., 375280., 380560., 382560., 384560., 386560.,
      269360., 270944., 272528., 274112., 278080., 279680., 281280., 282880.,
      286928., 288544., 290160., 291776., 295904., 297536., 299168., 300800.,
      195356., 196568., 197780., 198992., 201896., 203120., 204344., 205568.,
      208532., 209768., 211004., 212240., 215264., 216512., 217760., 219008.,
      129165., 130074., 130983., 131892., 133998., 134916., 135834., 136752.,
      138903., 139830., 140757., 141684., 143880., 144816., 145752., 146688.,
      165876., 167112., 168348., 169584., 172320., 173568., 174816., 176064.,
      178860., 180120., 181380., 182640., 185496., 186768., 188040., 189312.,
      199095., 200670., 202245., 203820., 207150., 208740., 210330., 211920.,
      215325., 216930., 218535., 220140., 223620., 225240., 226860., 228480.,
      205875., 207510., 209145., 210780., 214170., 215820., 217470., 219120.,
      222585., 224250., 225915., 227580., 231120., 232800., 234480., 236160.,
      156180., 157512., 158844., 160176., 162816., 164160., 165504., 166848.,
      169548., 170904., 172260., 173616., 176376., 177744., 179112., 180480.,
      110553., 111570., 112587., 113604., 115530., 116556., 117582., 118608.,
      120579., 121614., 122649., 123684., 125700., 126744., 127788., 128832.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.};
  const std::array<int, 4> in_shape = {{1, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755., 2404., 3080., 3350., 3620., 2920., 2205., 3008.,  4048.,
      5100., 5410., 5720., 4560., 3404., 4420., 5880., 7325.,  7650.,
      7975., 6300., 4660., 5890., 7770., 9600., 9925., 10250., 8050.,
      5920., 4190., 5472., 6690., 6900., 7110., 5520., 4010.,  2646.,
      3406., 4100., 4220., 4340., 3310., 2358.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325., 7650., 7975.,
                                         9600., 9925., 10250.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 8062.,  8380.,  10512., 10944., 12830., 13380., 13230.,
      13800., 13630., 14220., 10560., 11040., 7654.,  8020.,  5022.,  5292.,
      6446.,  6812.,  7735.,  8200.,  7960.,  8440.,  8185.,  8680.,  6218.,
      6620.,  4410.,  4716.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {14225., 14650., 14850., 15300.,
                                         15475., 15950., 18600., 19200.,
                                         19225., 19850., 19850., 20500.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616.,  11870.,
      12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120.,
      14300., 14480., 11230., 11380., 11530., 11680., 8469.,  8586.,  8703.,
      8820.,  11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192.,
      19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950.,
      22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220.,
      13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190.,
      23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600.,
      30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740.,
      18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140.,
      30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075.,
      39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200.,
      22465., 22870., 23275., 23680., 15806., 16124., 16442., 16760., 20592.,
      21024., 21456., 21888., 25110., 25660., 26210., 26760., 25890., 26460.,
      27030., 27600., 26670., 27260., 27850., 28440., 20640., 21120., 21600.,
      22080., 14942., 15308., 15674., 16040., 9774.,  10044., 10314., 10584.,
      12526., 12892., 13258., 13624., 15005., 15470., 15935., 16400., 15440.,
      15920., 16400., 16880., 15875., 16370., 16865., 17360., 12034., 12436.,
      12838., 13240., 8514.,  8820.,  9126.,  9432.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600.,
      30475., 30950., 31425., 31900., 36600., 37200., 37800., 38400.,
      37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,  7020.,  8956.,  9616.,  11495., 12320., 12545., 13400., 13595.,
      14480., 10972., 11680., 8289.,  8820.,  11348., 12032., 15280., 16192.,
      19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884.,
      13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600.,
      30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620.,
      31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200.,
      22525., 23680., 15860., 16760., 20688., 21888., 25260., 26760., 26060.,
      27600., 26860., 28440., 20816., 22080., 15092., 16040., 9891.,  10584.,
      12700., 13624., 15245., 16400., 15695., 16880., 16145., 17360., 12268.,
      13240., 8703.,  9432.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {27825., 29300., 29075., 30600.,
                                         30325., 31900., 36575., 38400.,
                                         37825., 39700., 39075., 41000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897., 13050., 13878., 14040., 17696., 17912., 19004., 19232., 22705.,
      22990., 24340., 24640., 24775., 25090., 26470., 26800., 26845., 27190.,
      28600., 28960., 21656., 21944., 23060., 23360., 16353., 16578., 17406.,
      17640., 22408., 22696., 23764., 24064., 30160., 30560., 31968., 32384.,
      38000., 38520., 40260., 40800., 40360., 40920., 42700., 43280., 42720.,
      43320., 45140., 45760., 34032., 34528., 35968., 36480., 25384., 25768.,
      26836., 27232., 33125., 33590., 34880., 35360., 44040., 44680., 46380.,
      47040., 54825., 55650., 57750., 58600., 57275., 58150., 60300., 61200.,
      59725., 60650., 62850., 63800., 47120., 47880., 49620., 50400., 34805.,
      35390., 36680., 37280., 44255., 44930., 46430., 47120., 58320., 59240.,
      61220., 62160., 71975., 73150., 75600., 76800., 74425., 75650., 78150.,
      79400., 76875., 78150., 80700., 82000., 60280., 61320., 63340., 64400.,
      44255., 45050., 46550., 47360., 31096., 31720., 32884., 33520., 40528.,
      41376., 42912., 43776., 49440., 50520., 52420., 53520., 51000., 52120.,
      54060., 55200., 52560., 53720., 55700., 56880., 40688., 41632., 43200.,
      44160., 29464., 30184., 31348., 32080., 19251., 19782., 20628., 21168.,
      24680., 25400., 26516., 27248., 29575., 30490., 31870., 32800., 30445.,
      31390., 32800., 33760., 31315., 32290., 33730., 34720., 23744., 24536.,
      25676., 26480., 16803., 17406., 18252., 18864.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825., 55650., 57750., 58600., 57275., 58150., 60300., 61200.,
      59725., 60650., 62850., 63800., 71975., 73150., 75600., 76800.,
      74425., 75650., 78150., 79400., 76875., 78150., 80700., 82000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      61568.,  62192.,  62816.,  63440.,  65132.,  65768.,  66404.,  67040.,
      80208.,  81056.,  81904.,  82752.,  84960.,  85824.,  86688.,  87552.,
      97800.,  98880.,  99960.,  101040., 103740., 104840., 105940., 107040.,
      100880., 102000., 103120., 104240., 106980., 108120., 109260., 110400.,
      103960., 105120., 106280., 107440., 110220., 111400., 112580., 113760.,
      80432.,  81376.,  82320.,  83264.,  85440.,  86400.,  87360.,  88320.,
      58208.,  58928.,  59648.,  60368.,  61964.,  62696.,  63428.,  64160.,
      37971.,  38502.,  39033.,  39564.,  40716.,  41256.,  41796.,  42336.,
      48640.,  49360.,  50080.,  50800.,  52300.,  53032.,  53764.,  54496.,
      58235.,  59150.,  60065.,  60980.,  62810.,  63740.,  64670.,  65600.,
      59945.,  60890.,  61835.,  62780.,  64640.,  65600.,  66560.,  67520.,
      61655.,  62630.,  63605.,  64580.,  66470.,  67460.,  68450.,  69440.,
      46696.,  47488.,  48280.,  49072.,  50548.,  51352.,  52156.,  52960.,
      33003.,  33606.,  34209.,  34812.,  35892.,  36504.,  37116.,  37728.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      61676.,  63440.,  65228.,  67040.,  80400.,  82752.,  85136.,  87552.,
      98100.,  101040., 104020., 107040., 101220., 104240., 107300., 110400.,
      104340., 107440., 110580., 113760., 80784.,  83264.,  85776.,  88320.,
      58508.,  60368.,  62252.,  64160.,  38205.,  39564.,  40941.,  42336.,
      48988.,  50800.,  52636.,  54496.,  58715.,  60980.,  63275.,  65600.,
      60455.,  62780.,  65135.,  67520.,  62195.,  64580.,  66995.,  69440.,
      47164.,  49072.,  51004.,  52960.,  33381.,  34812.,  36261.,  37728.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,  50274.,  51894.,  52200.,  53847.,  54162.,  55836.,  56160.,
      68660.,  69080.,  71216.,  71648.,  73820.,  74264.,  76472.,  76928.,
      88195.,  88750.,  91390.,  91960.,  94645.,  95230.,  97960.,  98560.,
      96415.,  97030.,  99730.,  100360., 103105., 103750., 106540., 107200.,
      104635., 105310., 108070., 108760., 111565., 112270., 115120., 115840.,
      84452.,  85016.,  87200.,  87776.,  89996.,  90584.,  92840.,  93440.,
      63801.,  64242.,  65862.,  66312.,  67959.,  68418.,  70092.,  70560.,
      87556.,  88120.,  90208.,  90784.,  92908.,  93496.,  95656.,  96256.,
      117904., 118688., 121440., 122240., 125040., 125856., 128704., 129536.,
      148620., 149640., 153040., 154080., 157540., 158600., 162120., 163200.,
      157980., 159080., 162560., 163680., 167220., 168360., 171960., 173120.,
      167340., 168520., 172080., 173280., 176900., 178120., 181800., 183040.,
      133328., 134304., 137120., 138112., 140976., 141984., 144896., 145920.,
      99460.,  100216., 102304., 103072., 105196., 105976., 108136., 108928.,
      129995., 130910., 133430., 134360., 136925., 137870., 140480., 141440.,
      172860., 174120., 177440., 178720., 182100., 183400., 186840., 188160.,
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      185100., 186600., 190000., 191520., 194980., 196520., 200040., 201600.,
      136715., 137870., 140390., 141560., 144125., 145310., 147920., 149120.,
      174095., 175430., 178370., 179720., 182705., 184070., 187100., 188480.,
      229420., 231240., 235120., 236960., 240900., 242760., 246760., 248640.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.,
      237180., 239240., 243200., 245280., 249300., 251400., 255480., 257600.,
      174095., 175670., 178610., 180200., 183185., 184790., 187820., 189440.,
      122116., 123352., 125632., 126880., 129196., 130456., 132808., 134080.,
      159120., 160800., 163808., 165504., 168560., 170272., 173376., 175104.,
      194060., 196200., 199920., 202080., 205860., 208040., 211880., 214080.,
      200220., 202440., 206240., 208480., 212340., 214600., 218520., 220800.,
      206380., 208680., 212560., 214880., 218820., 221160., 225160., 227520.,
      159696., 161568., 164640., 166528., 169648., 171552., 174720., 176640.,
      115588., 117016., 119296., 120736., 123052., 124504., 126856., 128320.,
      75357.,  76410.,  78066.,  79128.,  80811.,  81882.,  83592.,  84672.,
      96548.,  97976.,  100160., 101600., 103820., 105272., 107528., 108992.,
      115615., 117430., 120130., 121960., 124705., 126550., 129340., 131200.,
      119035., 120910., 123670., 125560., 128365., 130270., 133120., 135040.,
      122455., 124390., 127210., 129160., 132025., 133990., 136900., 138880.,
      92756.,  94328.,  96560.,  98144.,  100412., 102008., 104312., 105920.,
      65565.,  66762.,  68418.,  69624.,  71307.,  72522.,  74232.,  75456.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,  99954.,  100251., 100548., 103482., 103788., 104094., 104400.,
      107379., 107694., 108009., 108324., 111348., 111672., 111996., 112320.,
      136900., 137320., 137740., 138160., 142000., 142432., 142864., 143296.,
      147196., 147640., 148084., 148528., 152488., 152944., 153400., 153856.,
      175835., 176390., 176945., 177500., 182210., 182780., 183350., 183920.,
      188705., 189290., 189875., 190460., 195320., 195920., 196520., 197120.,
      192215., 192830., 193445., 194060., 198830., 199460., 200090., 200720.,
      205565., 206210., 206855., 207500., 212420., 213080., 213740., 214400.,
      208595., 209270., 209945., 210620., 215450., 216140., 216830., 217520.,
      222425., 223130., 223835., 224540., 229520., 230240., 230960., 231680.,
      168340., 168904., 169468., 170032., 173824., 174400., 174976., 175552.,
      179404., 179992., 180580., 181168., 185080., 185680., 186280., 186880.,
      127161., 127602., 128043., 128484., 131274., 131724., 132174., 132624.,
      135459., 135918., 136377., 136836., 139716., 140184., 140652., 141120.,
      174548., 175112., 175676., 176240., 179840., 180416., 180992., 181568.,
      185228., 185816., 186404., 186992., 190712., 191312., 191912., 192512.,
      235024., 235808., 236592., 237376., 242080., 242880., 243680., 244480.,
      249264., 250080., 250896., 251712., 256576., 257408., 258240., 259072.,
      296220., 297240., 298260., 299280., 305040., 306080., 307120., 308160.,
      314020., 315080., 316140., 317200., 323160., 324240., 325320., 326400.,
      314860., 315960., 317060., 318160., 324000., 325120., 326240., 327360.,
      333300., 334440., 335580., 336720., 342760., 343920., 345080., 346240.,
      333500., 334680., 335860., 337040., 342960., 344160., 345360., 346560.,
      352580., 353800., 355020., 356240., 362360., 363600., 364840., 366080.,
      265680., 266656., 267632., 268608., 273248., 274240., 275232., 276224.,
      280944., 281952., 282960., 283968., 288768., 289792., 290816., 291840.,
      198164., 198920., 199676., 200432., 203840., 204608., 205376., 206144.,
      209612., 210392., 211172., 211952., 215480., 216272., 217064., 217856.,
      259075., 259990., 260905., 261820., 265930., 266860., 267790., 268720.,
      272905., 273850., 274795., 275740., 280000., 280960., 281920., 282880.,
      344460., 345720., 346980., 348240., 353600., 354880., 356160., 357440.,
      362900., 364200., 365500., 366800., 372360., 373680., 375000., 376320.,
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      368700., 370200., 371700., 373200., 378480., 380000., 381520., 383040.,
      388420., 389960., 391500., 393040., 398520., 400080., 401640., 403200.,
      272275., 273430., 274585., 275740., 279610., 280780., 281950., 283120.,
      287065., 288250., 289435., 290620., 294640., 295840., 297040., 298240.,
      346855., 348190., 349525., 350860., 355390., 356740., 358090., 359440.,
      364045., 365410., 366775., 368140., 372820., 374200., 375580., 376960.,
      457020., 458840., 460660., 462480., 468400., 470240., 472080., 473920.,
      479940., 481800., 483660., 485520., 491640., 493520., 495400., 497280.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.,
      472300., 474360., 476420., 478480., 484320., 486400., 488480., 490560.,
      496500., 498600., 500700., 502800., 508840., 510960., 513080., 515200.,
      346615., 348190., 349765., 351340., 355630., 357220., 358810., 360400.,
      364765., 366370., 367975., 369580., 374020., 375640., 377260., 378880.,
      242996., 244232., 245468., 246704., 250016., 251264., 252512., 253760.,
      257132., 258392., 259652., 260912., 264344., 265616., 266888., 268160.,
      316560., 318240., 319920., 321600., 325920., 327616., 329312., 331008.,
      335408., 337120., 338832., 340544., 345024., 346752., 348480., 350208.,
      385980., 388120., 390260., 392400., 397680., 399840., 402000., 404160.,
      409540., 411720., 413900., 416080., 421560., 423760., 425960., 428160.,
      398220., 400440., 402660., 404880., 410240., 412480., 414720., 416960.,
      422420., 424680., 426940., 429200., 434760., 437040., 439320., 441600.,
      410460., 412760., 415060., 417360., 422800., 425120., 427440., 429760.,
      435300., 437640., 439980., 442320., 447960., 450320., 452680., 455040.,
      317520., 319392., 321264., 323136., 327392., 329280., 331168., 333056.,
      337392., 339296., 341200., 343104., 347520., 349440., 351360., 353280.,
      229748., 231176., 232604., 234032., 237152., 238592., 240032., 241472.,
      244652., 246104., 247556., 249008., 252248., 253712., 255176., 256640.,
      149661., 150714., 151767., 152820., 155070., 156132., 157194., 158256.,
      160551., 161622., 162693., 163764., 166104., 167184., 168264., 169344.,
      191668., 193096., 194524., 195952., 198880., 200320., 201760., 203200.,
      206188., 207640., 209092., 210544., 213592., 215056., 216520., 217984.,
      229415., 231230., 233045., 234860., 238430., 240260., 242090., 243920.,
      247565., 249410., 251255., 253100., 256820., 258680., 260540., 262400.,
      236195., 238070., 239945., 241820., 245450., 247340., 249230., 251120.,
      254825., 256730., 258635., 260540., 264320., 266240., 268160., 270080.,
      242975., 244910., 246845., 248780., 252470., 254420., 256370., 258320.,
      262085., 264050., 266015., 267980., 271820., 273800., 275780., 277760.,
      183940., 185512., 187084., 188656., 191536., 193120., 194704., 196288.,
      199228., 200824., 202420., 204016., 207016., 208624., 210232., 211840.,
      129933., 131130., 132327., 133524., 135630., 136836., 138042., 139248.,
      141399., 142614., 143829., 145044., 147240., 148464., 149688., 150912.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.};
  const std::array<int, 4> in_shape = {{1, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956., 2666., 3400., 3670., 3940., 4210., 3380.,  2541.,  3380.,  4532.,
      5690., 6000., 6310., 6620., 5260., 3914., 4990.,  6620.,  8225.,  8550.,
      8875., 9200., 7250., 5350., 6670., 8780., 10825., 11150., 11475., 11800.,
      9250., 6790., 4748., 6188., 7550., 7760., 7970.,  8180.,  6340.,  4598.,
      3000., 3854., 4630., 4750., 4870., 4990., 3800.,  2703.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8550.,  8875.,  9200.,
                                         10825., 11150., 11475., 11800.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 9136.,  9496.,  11888., 12376., 14480., 15100., 14880., 15520.,
      15280., 15940., 15680., 16360., 12128., 12680., 8776.,  9196.,  5694.,
      6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,  9185.,  9740.,
      9410.,  9980.,  7138.,  7600.,  5055.,  5406.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,  7644.,  7734.,  7824.,  10286., 10412., 10538., 10664., 13105.,
      13270., 13435., 13600., 14140., 14320., 14500., 14680., 15175., 15370.,
      15565., 15760., 16210., 16420., 16630., 16840., 12998., 13172., 13346.,
      13520., 9759.,  9894.,  10029., 10164., 13016., 13184., 13352., 13520.,
      17432., 17664., 17896., 18128., 21860., 22160., 22460., 22760., 23040.,
      23360., 23680., 24000., 24220., 24560., 24900., 25240., 25400., 25760.,
      26120., 26480., 20152., 20448., 20744., 21040., 14972., 15200., 15428.,
      15656., 19150., 19420., 19690., 19960., 25370., 25740., 26110., 26480.,
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925.,
      34450., 34975., 35500., 35150., 35700., 36250., 36800., 27650., 28100.,
      28550., 29000., 20365., 20710., 21055., 21400., 25510., 25900., 26290.,
      26680., 33530., 34060., 34590., 35120., 41275., 41950., 42625., 43300.,
      42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950.,
      45700., 46450., 47200., 35170., 35780., 36390., 37000., 25765., 26230.,
      26695., 27160., 17912., 18272., 18632., 18992., 23288., 23776., 24264.,
      24752., 28340., 28960., 29580., 30200., 29120., 29760., 30400., 31040.,
      29900., 30560., 31220., 31880., 30680., 31360., 32040., 32720., 23704.,
      24256., 24808., 25360., 17132., 17552., 17972., 18392., 11082., 11388.,
      11694., 12000., 14174., 14588., 15002., 15416., 16945., 17470., 17995.,
      18520., 17380., 17920., 18460., 19000., 17815., 18370., 18925., 19480.,
      18250., 18820., 19390., 19960., 13814., 14276., 14738., 15200., 9759.,
      10110., 10461., 10812.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200.,
      33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800.,
      41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600.,
      43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,  7824.,  9980.,  10664., 12745., 13600., 13795., 14680., 14845.,
      15760., 15895., 16840., 12764., 13520., 9597.,  10164., 12800., 13520.,
      17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160.,
      26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480.,
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620.,
      29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300.,
      42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885.,
      27160., 18008., 18992., 23440., 24752., 28560., 30200., 29360., 31040.,
      30160., 31880., 30960., 32720., 23952., 25360., 17336., 18392., 11235.,
      12000., 14396., 15416., 17245., 18520., 17695., 19000., 18145., 19480.,
      18595., 19960., 14108., 15200., 9993.,  10812.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800.,
      41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451., 14622., 15468., 15648., 19720., 19960., 21076., 21328., 25175.,
      25490., 26870., 27200., 27245., 27590., 29000., 29360., 29315., 29690.,
      31130., 31520., 31385., 31790., 33260., 33680., 25192., 25528., 26692.,
      27040., 18933., 19194., 20058., 20328., 25276., 25600., 26704., 27040.,
      33888., 34336., 35792., 36256., 42540., 43120., 44920., 45520., 44900.,
      45520., 47360., 48000., 47260., 47920., 49800., 50480., 49620., 50320.,
      52240., 52960., 39392., 39968., 41488., 42080., 29284., 29728., 30856.,
      31312., 37505., 38030., 39380., 39920., 49720., 50440., 52220., 52960.,
      61725., 62650., 64850., 65800., 64175., 65150., 67400., 68400., 66625.,
      67650., 69950., 71000., 69075., 70150., 72500., 73600., 54360., 55240.,
      57100., 58000., 40055., 40730., 42110., 42800., 50225., 50990., 52580.,
      53360., 66040., 67080., 69180., 70240., 81325., 82650., 85250., 86600.,
      83775., 85150., 87800., 89200., 86225., 87650., 90350., 91800., 88675.,
      90150., 92900., 94400., 69400., 70600., 72780., 74000., 50855., 51770.,
      53390., 54320., 35308., 36016., 37264., 37984., 45920., 46880., 48528.,
      49504., 55900., 57120., 59160., 60400., 57460., 58720., 60800., 62080.,
      59020., 60320., 62440., 63760., 60580., 61920., 64080., 65440., 46816.,
      47904., 49616., 50720., 33844., 34672., 35944., 36784., 21867., 22470.,
      23388., 24000., 27976., 28792., 30004., 30832., 33455., 34490., 35990.,
      37040., 34325., 35390., 36920., 38000., 35195., 36290., 37850., 38960.,
      36065., 37190., 38780., 39920., 27304., 28216., 29476., 30400., 19293.,
      19986., 20922., 21624.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725., 62650., 64850., 65800., 64175., 65150., 67400., 68400.,
      66625., 67650., 69950., 71000., 69075., 70150., 72500., 73600.,
      81325., 82650., 85250., 86600., 83775., 85150., 87800., 89200.,
      86225., 87650., 90350., 91800., 88675., 90150., 92900., 94400.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      69908.,  70616.,  71324.,  72032.,  73808.,  74528.,  75248.,  75968.,
      90880.,  91840.,  92800.,  93760.,  96080.,  97056.,  98032.,  99008.,
      110580., 111800., 113020., 114240., 117080., 118320., 119560., 120800.,
      113660., 114920., 116180., 117440., 120320., 121600., 122880., 124160.,
      116740., 118040., 119340., 120640., 123560., 124880., 126200., 127520.,
      119820., 121160., 122500., 123840., 126800., 128160., 129520., 130880.,
      92544.,  93632.,  94720.,  95808.,  98128.,  99232.,  100336., 101440.,
      66860.,  67688.,  68516.,  69344.,  71048.,  71888.,  72728.,  73568.,
      43131.,  43734.,  44337.,  44940.,  46164.,  46776.,  47388.,  48000.,
      55136.,  55952.,  56768.,  57584.,  59180.,  60008.,  60836.,  61664.,
      65875.,  66910.,  67945.,  68980.,  70930.,  71980.,  73030.,  74080.,
      67585.,  68650.,  69715.,  70780.,  72760.,  73840.,  74920.,  76000.,
      69295.,  70390.,  71485.,  72580.,  74590.,  75700.,  76810.,  77920.,
      71005.,  72130.,  73255.,  74380.,  76420.,  77560.,  78700.,  79840.,
      53696.,  54608.,  55520.,  56432.,  58028.,  58952.,  59876.,  60800.,
      37893.,  38586.,  39279.,  39972.,  41142.,  41844.,  42546.,  43248.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      70100.,  72032.,  73988.,  75968.,  91184.,  93760.,  96368.,  99008.,
      111020., 114240., 117500., 120800., 114140., 117440., 120780., 124160.,
      117260., 120640., 124060., 127520., 120380., 123840., 127340., 130880.,
      93040.,  95808.,  98608.,  101440., 67268.,  69344.,  71444.,  73568.,
      43437.,  44940.,  46461.,  48000.,  55580.,  57584.,  59612.,  61664.,
      66475.,  68980.,  71515.,  74080.,  68215.,  70780.,  73375.,  76000.,
      69955.,  72580.,  75235.,  77920.,  71695.,  74380.,  77095.,  79840.,
      54284.,  56432.,  58604.,  60800.,  38361.,  39972.,  41601.,  43248.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,  56490.,  58146.,  58488.,  60171.,  60522.,  62232.,  62592.,
      76708.,  77176.,  79360.,  79840.,  82060.,  82552.,  84808.,  85312.,
      98015.,  98630.,  101330., 101960., 104705., 105350., 108140., 108800.,
      106235., 106910., 109670., 110360., 113165., 113870., 116720., 117440.,
      114455., 115190., 118010., 118760., 121625., 122390., 125300., 126080.,
      122675., 123470., 126350., 127160., 130085., 130910., 133880., 134720.,
      98500.,  99160.,  101440., 102112., 104428., 105112., 107464., 108160.,
      74049.,  74562.,  76254.,  76776.,  78495.,  79026.,  80772.,  81312.,
      98956.,  99592.,  101752., 102400., 104596., 105256., 107488., 108160.,
      132720., 133600., 136448., 137344., 140240., 141152., 144096., 145024.,
      166660., 167800., 171320., 172480., 176060., 177240., 180880., 182080.,
      176020., 177240., 180840., 182080., 185740., 187000., 190720., 192000.,
      185380., 186680., 190360., 191680., 195420., 196760., 200560., 201920.,
      194740., 196120., 199880., 201280., 205100., 206520., 210400., 211840.,
      154608., 155744., 158720., 159872., 162896., 164064., 167136., 168320.,
      114940., 115816., 118024., 118912., 121156., 122056., 124336., 125248.,
      147395., 148430., 151070., 152120., 154805., 155870., 158600., 159680.,
      195420., 196840., 200320., 201760., 205300., 206760., 210360., 211840.,
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      213820., 215560., 219200., 220960., 224660., 226440., 230200., 232000.,
      157535., 158870., 161570., 162920., 165665., 167030., 169820., 171200.,
      197795., 199310., 202430., 203960., 207125., 208670., 211880., 213440.,
      260060., 262120., 266240., 268320., 272500., 274600., 278840., 280960.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.,
      273340., 275720., 280000., 282400., 286740., 289160., 293560., 296000.,
      200255., 202070., 205250., 207080., 210305., 212150., 215420., 217280.,
      138796., 140200., 142648., 144064., 146548., 147976., 150496., 151936.,
      180464., 182368., 185600., 187520., 190800., 192736., 196064., 198016.,
      219620., 222040., 226040., 228480., 232540., 235000., 239120., 241600.,
      225780., 228280., 232360., 234880., 239020., 241560., 245760., 248320.,
      231940., 234520., 238680., 241280., 245500., 248120., 252400., 255040.,
      238100., 240760., 245000., 247680., 251980., 254680., 259040., 261760.,
      183920., 186080., 189440., 191616., 195024., 197216., 200672., 202880.,
      132892., 134536., 137032., 138688., 141220., 142888., 145456., 147136.,
      85677.,  86874.,  88674.,  89880.,  91707.,  92922.,  94776.,  96000.,
      109540., 111160., 113536., 115168., 117580., 119224., 121672., 123328.,
      130895., 132950., 135890., 137960., 140945., 143030., 146060., 148160.,
      134315., 136430., 139430., 141560., 144605., 146750., 149840., 152000.,
      137735., 139910., 142970., 145160., 148265., 150470., 153620., 155840.,
      141155., 143390., 146510., 148760., 151925., 154190., 157400., 159680.,
      106756., 108568., 111040., 112864., 115372., 117208., 119752., 121600.,
      75345.,  76722.,  78558.,  79944.,  81807.,  83202.,  85092.,  86496.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981., 112314., 112647., 112980., 115950., 116292., 116634., 116976.,
      119991., 120342., 120693., 121044., 124104., 124464., 124824., 125184.,
      152948., 153416., 153884., 154352., 158240., 158720., 159200., 159680.,
      163628., 164120., 164612., 165104., 169112., 169616., 170120., 170624.,
      195415., 196030., 196645., 197260., 202030., 202660., 203290., 203920.,
      208765., 209410., 210055., 210700., 215620., 216280., 216940., 217600.,
      211795., 212470., 213145., 213820., 218650., 219340., 220030., 220720.,
      225625., 226330., 227035., 227740., 232720., 233440., 234160., 234880.,
      228175., 228910., 229645., 230380., 235270., 236020., 236770., 237520.,
      242485., 243250., 244015., 244780., 249820., 250600., 251380., 252160.,
      244555., 245350., 246145., 246940., 251890., 252700., 253510., 254320.,
      259345., 260170., 260995., 261820., 266920., 267760., 268600., 269440.,
      196340., 197000., 197660., 198320., 202208., 202880., 203552., 204224.,
      208172., 208856., 209540., 210224., 214232., 214928., 215624., 216320.,
      147585., 148098., 148611., 149124., 151986., 152508., 153030., 153552.,
      156459., 156990., 157521., 158052., 161004., 161544., 162084., 162624.,
      197276., 197912., 198548., 199184., 202856., 203504., 204152., 204800.,
      208532., 209192., 209852., 210512., 214304., 214976., 215648., 216320.,
      264560., 265440., 266320., 267200., 272000., 272896., 273792., 274688.,
      279568., 280480., 281392., 282304., 287264., 288192., 289120., 290048.,
      332180., 333320., 334460., 335600., 341480., 342640., 343800., 344960.,
      350940., 352120., 353300., 354480., 360560., 361760., 362960., 364160.,
      350820., 352040., 353260., 354480., 360440., 361680., 362920., 364160.,
      370220., 371480., 372740., 374000., 380160., 381440., 382720., 384000.,
      369460., 370760., 372060., 373360., 379400., 380720., 382040., 383360.,
      389500., 390840., 392180., 393520., 399760., 401120., 402480., 403840.,
      388100., 389480., 390860., 392240., 398360., 399760., 401160., 402560.,
      408780., 410200., 411620., 413040., 419360., 420800., 422240., 423680.,
      308080., 309216., 310352., 311488., 316288., 317440., 318592., 319744.,
      324624., 325792., 326960., 328128., 333088., 334272., 335456., 336640.,
      229004., 229880., 230756., 231632., 235160., 236048., 236936., 237824.,
      241412., 242312., 243212., 244112., 247760., 248672., 249584., 250496.,
      293755., 294790., 295825., 296860., 301090., 302140., 303190., 304240.,
      308545., 309610., 310675., 311740., 316120., 317200., 318280., 319360.,
      389420., 390840., 392260., 393680., 399200., 400640., 402080., 403520.,
      409140., 410600., 412060., 413520., 419240., 420720., 422200., 423680.,
      483425., 485250., 487075., 488900., 495650., 497500., 499350., 501200.,
      508075., 509950., 511825., 513700., 520700., 522600., 524500., 526400.,
      502725., 504650., 506575., 508500., 515350., 517300., 519250., 521200.,
      528175., 530150., 532125., 534100., 541200., 543200., 545200., 547200.,
      522025., 524050., 526075., 528100., 535050., 537100., 539150., 541200.,
      548275., 550350., 552425., 554500., 561700., 563800., 565900., 568000.,
      541325., 543450., 545575., 547700., 554750., 556900., 559050., 561200.,
      568375., 570550., 572725., 574900., 582200., 584400., 586600., 588800.,
      425900., 427640., 429380., 431120., 436640., 438400., 440160., 441920.,
      447540., 449320., 451100., 452880., 458600., 460400., 462200., 464000.,
      313735., 315070., 316405., 317740., 321790., 323140., 324490., 325840.,
      329965., 331330., 332695., 334060., 338260., 339640., 341020., 342400.,
      394075., 395590., 397105., 398620., 403330., 404860., 406390., 407920.,
      412705., 414250., 415795., 417340., 422200., 423760., 425320., 426880.,
      518060., 520120., 522180., 524240., 530400., 532480., 534560., 536640.,
      542900., 545000., 547100., 549200., 555560., 557680., 559800., 561920.,
      637825., 640450., 643075., 645700., 653250., 655900., 658550., 661200.,
      668875., 671550., 674225., 676900., 684700., 687400., 690100., 692800.,
      657125., 659850., 662575., 665300., 672950., 675700., 678450., 681200.,
      688975., 691750., 694525., 697300., 705200., 708000., 710800., 713600.,
      676425., 679250., 682075., 684900., 692650., 695500., 698350., 701200.,
      709075., 711950., 714825., 717700., 725700., 728600., 731500., 734400.,
      695725., 698650., 701575., 704500., 712350., 715300., 718250., 721200.,
      729175., 732150., 735125., 738100., 746200., 749200., 752200., 755200.,
      544300., 546680., 549060., 551440., 557600., 560000., 562400., 564800.,
      571060., 573480., 575900., 578320., 584680., 587120., 589560., 592000.,
      398695., 400510., 402325., 404140., 408670., 410500., 412330., 414160.,
      418765., 420610., 422455., 424300., 428980., 430840., 432700., 434560.,
      276188., 277592., 278996., 280400., 283880., 285296., 286712., 288128.,
      291668., 293096., 294524., 295952., 299552., 300992., 302432., 303872.,
      359024., 360928., 362832., 364736., 369280., 371200., 373120., 375040.,
      379664., 381600., 383536., 385472., 390176., 392128., 394080., 396032.,
      436820., 439240., 441660., 444080., 449640., 452080., 454520., 456960.,
      462620., 465080., 467540., 470000., 475760., 478240., 480720., 483200.,
      449060., 451560., 454060., 456560., 462200., 464720., 467240., 469760.,
      475500., 478040., 480580., 483120., 488960., 491520., 494080., 496640.,
      461300., 463880., 466460., 469040., 474760., 477360., 479960., 482560.,
      488380., 491000., 493620., 496240., 502160., 504800., 507440., 510080.,
      473540., 476200., 478860., 481520., 487320., 490000., 492680., 495360.,
      501260., 503960., 506660., 509360., 515360., 518080., 520800., 523520.,
      365680., 367840., 370000., 372160., 376704., 378880., 381056., 383232.,
      387856., 390048., 392240., 394432., 399136., 401344., 403552., 405760.,
      264140., 265784., 267428., 269072., 272408., 274064., 275720., 277376.,
      280772., 282440., 284108., 285776., 289232., 290912., 292592., 294272.,
      170157., 171354., 172551., 173748., 176142., 177348., 178554., 179760.,
      182199., 183414., 184629., 185844., 188328., 189552., 190776., 192000.,
      217460., 219080., 220700., 222320., 225440., 227072., 228704., 230336.,
      233516., 235160., 236804., 238448., 241688., 243344., 245000., 246656.,
      259735., 261790., 263845., 265900., 269710., 271780., 273850., 275920.,
      279805., 281890., 283975., 286060., 290020., 292120., 294220., 296320.,
      266515., 268630., 270745., 272860., 276730., 278860., 280990., 283120.,
      287065., 289210., 291355., 293500., 297520., 299680., 301840., 304000.,
      273295., 275470., 277645., 279820., 283750., 285940., 288130., 290320.,
      294325., 296530., 298735., 300940., 305020., 307240., 309460., 311680.,
      280075., 282310., 284545., 286780., 290770., 293020., 295270., 297520.,
      301585., 303850., 306115., 308380., 312520., 314800., 317080., 319360.,
      211700., 213512., 215324., 217136., 220256., 222080., 223904., 225728.,
      228908., 230744., 232580., 234416., 237656., 239504., 241352., 243200.,
      149313., 150690., 152067., 153444., 155730., 157116., 158502., 159888.,
      162219., 163614., 165009., 166404., 168780., 170184., 171588., 172992.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425., 485250., 487075., 488900., 495650., 497500., 499350., 501200.,
      508075., 509950., 511825., 513700., 520700., 522600., 524500., 526400.,
      502725., 504650., 506575., 508500., 515350., 517300., 519250., 521200.,
      528175., 530150., 532125., 534100., 541200., 543200., 545200., 547200.,
      522025., 524050., 526075., 528100., 535050., 537100., 539150., 541200.,
      548275., 550350., 552425., 554500., 561700., 563800., 565900., 568000.,
      541325., 543450., 545575., 547700., 554750., 556900., 559050., 561200.,
      568375., 570550., 572725., 574900., 582200., 584400., 586600., 588800.,
      637825., 640450., 643075., 645700., 653250., 655900., 658550., 661200.,
      668875., 671550., 674225., 676900., 684700., 687400., 690100., 692800.,
      657125., 659850., 662575., 665300., 672950., 675700., 678450., 681200.,
      688975., 691750., 694525., 697300., 705200., 708000., 710800., 713600.,
      676425., 679250., 682075., 684900., 692650., 695500., 698350., 701200.,
      709075., 711950., 714825., 717700., 725700., 728600., 731500., 734400.,
      695725., 698650., 701575., 704500., 712350., 715300., 718250., 721200.,
      729175., 732150., 735125., 738100., 746200., 749200., 752200., 755200.};
  const std::array<int, 4> in_shape = {{1, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142., 2760., 3030., 2460., 1869., 2636., 3564., 4510.,
      4820.,  3860., 2894., 3850., 5140., 6425., 6750., 5350., 3970.,
      5110.,  6760., 8375., 8700., 6850., 5050., 6370., 8380., 10325.,
      10650., 8350., 6130., 4460., 5812., 7090., 7300., 5660., 4106.,
      2778.,  3570., 4290., 4410., 3360., 2391.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425., 6750.,  8375.,
                                         8700., 10325., 10650.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 8572.,  8920.,  11152.,
      11624., 13580., 14180., 13980., 14600., 10816., 11320., 7828.,  8212.,
      5268.,  5556.,  6750.,  7140.,  8085.,  8580.,  8310.,  8820.,  6306.,
      6720.,  4467.,  4782.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {12475., 12850., 13100., 13500.,
                                         16225., 16750., 16850., 17400.,
                                         19975., 20650., 20600., 21300.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568.,  10635.,
      10770., 10905., 11040., 11670., 11820., 11970., 12120., 9462.,  9588.,
      9714.,  9840.,  7179.,  7278.,  7377.,  7476.,  10148., 10280., 10412.,
      10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040.,
      18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072.,
      11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980.,
      20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600.,
      27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880.,
      19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925.,
      32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500.,
      26950., 27400., 19165., 19510., 19855., 20200., 24310., 24700., 25090.,
      25480., 31930., 32460., 32990., 33520., 39275., 39950., 40625., 41300.,
      40500., 41200., 41900., 42600., 31690., 32260., 32830., 33400., 23215.,
      23650., 24085., 24520., 16796., 17144., 17492., 17840., 21832., 22304.,
      22776., 23248., 26560., 27160., 27760., 28360., 27340., 27960., 28580.,
      29200., 21128., 21632., 22136., 22640., 15272., 15656., 16040., 16424.,
      10248., 10536., 10824., 11112., 13110., 13500., 13890., 14280., 15675.,
      16170., 16665., 17160., 16110., 16620., 17130., 17640., 12198., 12612.,
      13026., 13440., 8619.,  8934.,  9249.,  9564.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000.,
      31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800.,
      39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,  6216.,  7932.,  8568.,  10245., 11040., 11295., 12120., 9180.,
      9840.,  6981.,  7476.,  9896.,  10544., 13392., 14256., 16960., 18040.,
      18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460.,
      20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880.,
      19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020.,
      27400., 19165., 20200., 24295., 25480., 31940., 33520., 39325., 41300.,
      40575., 42600., 31780., 33400., 23305., 24520., 16880., 17840., 21968.,
      23248., 26760., 28360., 27560., 29200., 21328., 22640., 15440., 16424.,
      10383., 11112., 13308., 14280., 15945., 17160., 16395., 17640., 12444.,
      13440., 8817.,  9564.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {24325., 25700., 25575., 27000.,
                                         31825., 33500., 33075., 34800.,
                                         39325., 41300., 40575., 42600.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343., 11478., 12288., 12432., 15672., 15864., 16932., 17136., 20235.,
      20490., 21810., 22080., 22305., 22590., 23940., 24240., 18120., 18360.,
      19428., 19680., 13773., 13962., 14754., 14952., 19540., 19792., 20824.,
      21088., 26432., 26784., 28144., 28512., 33460., 33920., 35600., 36080.,
      35820., 36320., 38040., 38560., 28672., 29088., 30448., 30880., 21484.,
      21808., 22816., 23152., 28745., 29150., 30380., 30800., 38360., 38920.,
      40540., 41120., 47925., 48650., 50650., 51400., 50375., 51150., 53200.,
      54000., 39880., 40520., 42140., 42800., 29555., 30050., 31250., 31760.,
      38285., 38870., 40280., 40880., 50600., 51400., 53260., 54080., 62625.,
      63650., 65950., 67000., 65075., 66150., 68500., 69600., 51160., 52040.,
      53900., 54800., 37655., 38330., 39710., 40400., 47825., 48590., 50180.,
      50960., 62840., 63880., 65980., 67040., 77325., 78650., 81250., 82600.,
      79775., 81150., 83800., 85200., 62440., 63560., 65660., 66800., 45755.,
      46610., 48170., 49040., 33076., 33760., 34984., 35680., 43008., 43936.,
      45552., 46496., 52340., 53520., 55520., 56720., 53900., 55120., 57160.,
      58400., 41664., 42656., 44272., 45280., 30124., 30880., 32080., 32848.,
      20199., 20766., 21648., 22224., 25848., 26616., 27780., 28560., 30915.,
      31890., 33330., 34320., 31785., 32790., 34260., 35280., 24072., 24888.,
      26052., 26880., 17013., 17634., 18498., 19128.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925., 48650., 50650., 51400., 50375., 51150., 53200., 54000.,
      62625., 63650., 65950., 67000., 65075., 66150., 68500., 69600.,
      77325., 78650., 81250., 82600., 79775., 81150., 83800., 85200.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      94885.,  95650.,  96415.,  97180.,  99580.,  100360., 101140., 101920.,
      124640., 125680., 126720., 127760., 130900., 131960., 133020., 134080.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      123760., 124880., 126000., 127120., 130180., 131320., 132460., 133600.,
      90655.,  91510.,  92365.,  93220.,  95470.,  96340.,  97210.,  98080.,
      65468.,  66152.,  66836.,  67520.,  69272.,  69968.,  70664.,  71360.,
      85088.,  86016.,  86944.,  87872.,  90160.,  91104.,  92048.,  92992.,
      103500., 104680., 105860., 107040., 109840., 111040., 112240., 113440.,
      106580., 107800., 109020., 110240., 113080., 114320., 115560., 116800.,
      82336.,  83328.,  84320.,  85312.,  87536.,  88544.,  89552.,  90560.,
      59492.,  60248.,  61004.,  61760.,  63392.,  64160.,  64928.,  65696.,
      39831.,  40398.,  40965.,  41532.,  42720.,  43296.,  43872.,  44448.,
      50928.,  51696.,  52464.,  53232.,  54780.,  55560.,  56340.,  57120.,
      60855.,  61830.,  62805.,  63780.,  65670.,  66660.,  67650.,  68640.,
      62565.,  63570.,  64575.,  65580.,  67500.,  68520.,  69540.,  70560.,
      47328.,  48144.,  48960.,  49776.,  51276.,  52104.,  52932.,  53760.,
      33405.,  34026.,  34647.,  35268.,  36366.,  36996.,  37626.,  38256.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      94855.,  97180.,  99535.,  101920., 124660., 127760., 130900., 134080.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      123940., 127120., 130340., 133600., 90835.,  93220.,  95635.,  98080.,
      65636.,  67520.,  69428.,  71360.,  85360.,  87872.,  90416.,  92992.,
      103900., 107040., 110220., 113440., 107020., 110240., 113500., 116800.,
      82736.,  85312.,  87920.,  90560.,  59828.,  61760.,  63716.,  65696.,
      40101.,  41532.,  42981.,  44448.,  51324.,  53232.,  55164.,  57120.,
      61395.,  63780.,  66195.,  68640.,  63135.,  65580.,  68055.,  70560.,
      47820.,  49776.,  51756.,  53760.,  33801.,  35268.,  36753.,  38256.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,  44058.,  45642.,  45912.,  47523.,  47802.,  49440.,  49728.,
      60612.,  60984.,  63072.,  63456.,  65580.,  65976.,  68136.,  68544.,
      78375.,  78870.,  81450.,  81960.,  84585.,  85110.,  87780.,  88320.,
      86595.,  87150.,  89790.,  90360.,  93045.,  93630.,  96360.,  96960.,
      70404.,  70872.,  72960.,  73440.,  75564.,  76056.,  78216.,  78720.,
      53553.,  53922.,  55470.,  55848.,  57423.,  57810.,  59412.,  59808.,
      76156.,  76648.,  78664.,  79168.,  81220.,  81736.,  83824.,  84352.,
      103088., 103776., 106432., 107136., 109840., 110560., 113312., 114048.,
      130580., 131480., 134760., 135680., 139020., 139960., 143360., 144320.,
      139940., 140920., 144280., 145280., 148700., 149720., 153200., 154240.,
      112048., 112864., 115520., 116352., 119056., 119904., 122656., 123520.,
      83980.,  84616.,  86584.,  87232.,  89236.,  89896.,  91936.,  92608.,
      112595., 113390., 115790., 116600., 119045., 119870., 122360., 123200.,
      150300., 151400., 154560., 155680., 158900., 160040., 163320., 164480.,
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      156380., 157640., 160800., 162080., 165300., 166600., 169880., 171200.,
      115895., 116870., 119210., 120200., 122585., 123590., 126020., 127040.,
      150395., 151550., 154310., 155480., 158285., 159470., 162320., 163520.,
      198780., 200360., 204000., 205600., 209300., 210920., 214680., 216320.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.,
      201020., 202760., 206400., 208160., 211860., 213640., 217400., 219200.,
      147935., 149270., 151970., 153320., 156065., 157430., 160220., 161600.,
      188195., 189710., 192830., 194360., 197525., 199070., 202280., 203840.,
      247260., 249320., 253440., 255520., 259700., 261800., 266040., 268160.,
      304225., 306850., 311950., 314600., 319775., 322450., 327700., 330400.,
      313925., 316650., 321850., 324600., 329875., 332650., 338000., 340800.,
      245660., 247880., 252000., 254240., 258420., 260680., 264920., 267200.,
      179975., 181670., 184730., 186440., 189545., 191270., 194420., 196160.,
      129916., 131272., 133672., 135040., 137476., 138856., 141328., 142720.,
      168880., 170720., 173888., 175744., 178960., 180832., 184096., 185984.,
      205460., 207800., 211720., 214080., 218060., 220440., 224480., 226880.,
      211620., 214040., 218040., 220480., 224540., 227000., 231120., 233600.,
      163504., 165472., 168640., 170624., 173840., 175840., 179104., 181120.,
      118156., 119656., 122008., 123520., 125908., 127432., 129856., 131392.,
      79077.,  80202.,  81930.,  83064.,  84819.,  85962.,  87744.,  88896.,
      101124., 102648., 104928., 106464., 108780., 110328., 112680., 114240.,
      120855., 122790., 125610., 127560., 130425., 132390., 135300., 137280.,
      124275., 126270., 129150., 131160., 134085., 136110., 139080., 141120.,
      94020.,  95640.,  97920.,  99552.,  101868., 103512., 105864., 107520.,
      66369.,  67602.,  69294.,  70536.,  72255.,  73506.,  75252.,  76512.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.,
      304225., 306850., 311950., 314600., 319775., 322450., 327700., 330400.,
      313925., 316650., 321850., 324600., 329875., 332650., 338000., 340800.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,  87594.,  87855.,  88116.,  91014.,  91284.,  91554.,  91824.,
      94767.,  95046.,  95325.,  95604.,  98592.,  98880.,  99168.,  99456.,
      120852., 121224., 121596., 121968., 125760., 126144., 126528., 126912.,
      130764., 131160., 131556., 131952., 135864., 136272., 136680., 137088.,
      156255., 156750., 157245., 157740., 162390., 162900., 163410., 163920.,
      168645., 169170., 169695., 170220., 175020., 175560., 176100., 176640.,
      172635., 173190., 173745., 174300., 179010., 179580., 180150., 180720.,
      185505., 186090., 186675., 187260., 192120., 192720., 193320., 193920.,
      140340., 140808., 141276., 141744., 145440., 145920., 146400., 146880.,
      150636., 151128., 151620., 152112., 155928., 156432., 156936., 157440.,
      106737., 107106., 107475., 107844., 110562., 110940., 111318., 111696.,
      114459., 114846., 115233., 115620., 118428., 118824., 119220., 119616.,
      151820., 152312., 152804., 153296., 156824., 157328., 157832., 158336.,
      161924., 162440., 162956., 163472., 167120., 167648., 168176., 168704.,
      205488., 206176., 206864., 207552., 212160., 212864., 213568., 214272.,
      218960., 219680., 220400., 221120., 225888., 226624., 227360., 228096.,
      260260., 261160., 262060., 262960., 268600., 269520., 270440., 271360.,
      277100., 278040., 278980., 279920., 285760., 286720., 287680., 288640.,
      278900., 279880., 280860., 281840., 287560., 288560., 289560., 290560.,
      296380., 297400., 298420., 299440., 305360., 306400., 307440., 308480.,
      223280., 224096., 224912., 225728., 230208., 231040., 231872., 232704.,
      237264., 238112., 238960., 239808., 244448., 245312., 246176., 247040.,
      167324., 167960., 168596., 169232., 172520., 173168., 173816., 174464.,
      177812., 178472., 179132., 179792., 183200., 183872., 184544., 185216.,
      224395., 225190., 225985., 226780., 230770., 231580., 232390., 233200.,
      237265., 238090., 238915., 239740., 243880., 244720., 245560., 246400.,
      299500., 300600., 301700., 302800., 308000., 309120., 310240., 311360.,
      316660., 317800., 318940., 320080., 325480., 326640., 327800., 328960.,
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      311500., 312760., 314020., 315280., 320320., 321600., 322880., 324160.,
      329300., 330600., 331900., 333200., 338440., 339760., 341080., 342400.,
      230815., 231790., 232765., 233740., 237430., 238420., 239410., 240400.,
      244165., 245170., 246175., 247180., 251020., 252040., 253060., 254080.,
      299635., 300790., 301945., 303100., 307450., 308620., 309790., 310960.,
      315385., 316570., 317755., 318940., 323440., 324640., 325840., 327040.,
      395980., 397560., 399140., 400720., 406400., 408000., 409600., 411200.,
      416980., 418600., 420220., 421840., 427720., 429360., 431000., 432640.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.,
      400300., 402040., 403780., 405520., 411040., 412800., 414560., 416320.,
      421940., 423720., 425500., 427280., 433000., 434800., 436600., 438400.,
      294535., 295870., 297205., 298540., 302590., 303940., 305290., 306640.,
      310765., 312130., 313495., 314860., 319060., 320440., 321820., 323200.,
      374875., 376390., 377905., 379420., 384130., 385660., 387190., 388720.,
      393505., 395050., 396595., 398140., 403000., 404560., 406120., 407680.,
      492460., 494520., 496580., 498640., 504800., 506880., 508960., 511040.,
      517300., 519400., 521500., 523600., 529960., 532080., 534200., 536320.,
      605825., 608450., 611075., 613700., 621250., 623900., 626550., 629200.,
      636875., 639550., 642225., 644900., 652700., 655400., 658100., 660800.,
      625125., 627850., 630575., 633300., 640950., 643700., 646450., 649200.,
      656975., 659750., 662525., 665300., 673200., 676000., 678800., 681600.,
      489100., 491320., 493540., 495760., 501760., 504000., 506240., 508480.,
      514580., 516840., 519100., 521360., 527560., 529840., 532120., 534400.,
      358255., 359950., 361645., 363340., 367750., 369460., 371170., 372880.,
      377365., 379090., 380815., 382540., 387100., 388840., 390580., 392320.,
      258476., 259832., 261188., 262544., 265976., 267344., 268712., 270080.,
      273572., 274952., 276332., 277712., 281264., 282656., 284048., 285440.,
      335920., 337760., 339600., 341440., 345920., 347776., 349632., 351488.,
      356048., 357920., 359792., 361664., 366304., 368192., 370080., 371968.,
      408580., 410920., 413260., 415600., 421080., 423440., 425800., 428160.,
      433740., 436120., 438500., 440880., 446560., 448960., 451360., 453760.,
      420820., 423240., 425660., 428080., 433640., 436080., 438520., 440960.,
      446620., 449080., 451540., 454000., 459760., 462240., 464720., 467200.,
      325040., 327008., 328976., 330944., 335296., 337280., 339264., 341248.,
      345680., 347680., 349680., 351680., 356192., 358208., 360224., 362240.,
      234812., 236312., 237812., 239312., 242504., 244016., 245528., 247040.,
      250292., 251816., 253340., 254864., 258176., 259712., 261248., 262784.,
      157029., 158154., 159279., 160404., 162726., 163860., 164994., 166128.,
      168495., 169638., 170781., 171924., 174336., 175488., 176640., 177792.,
      200724., 202248., 203772., 205296., 208320., 209856., 211392., 212928.,
      216012., 217560., 219108., 220656., 223800., 225360., 226920., 228480.,
      239775., 241710., 243645., 245580., 249270., 251220., 253170., 255120.,
      258885., 260850., 262815., 264780., 268620., 270600., 272580., 274560.,
      246555., 248550., 250545., 252540., 256290., 258300., 260310., 262320.,
      266145., 268170., 270195., 272220., 276120., 278160., 280200., 282240.,
      186420., 188040., 189660., 191280., 194208., 195840., 197472., 199104.,
      202092., 203736., 205380., 207024., 210072., 211728., 213384., 215040.,
      131505., 132738., 133971., 135204., 137346., 138588., 139830., 141072.,
      143259., 144510., 145761., 147012., 149244., 150504., 151764., 153024.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.,
      605825., 608450., 611075., 613700., 621250., 623900., 626550., 629200.,
      636875., 639550., 642225., 644900., 652700., 655400., 658100., 660800.,
      625125., 627850., 630575., 633300., 640950., 643700., 646450., 649200.,
      656975., 659750., 662525., 665300., 673200., 676000., 678800., 681600.};
  const std::array<int, 4> in_shape = {{1, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350., 3620., 2920.,  2205., 3008., 4048., 5100.,
      5410.,  5720.,  4560.,  3404., 4420., 5880.,  7325., 7650., 7975., 6300.,
      4660.,  5890.,  7770.,  9600., 9925., 10250., 8050., 5920., 7360., 9660.,
      11875., 12200., 12525., 9800., 7180., 5156.,  6704., 8160., 8370., 8580.,
      6640.,  4808.,  3213.,  4120., 4940., 5060.,  5180., 3940., 2799.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7650.,  7975.,  9600., 9925.,
                                         10250., 11875., 12200., 12525.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 9910.,  10312.,
      12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688.,
      13280., 9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,
      9535.,  10120., 9760.,  10360., 7394.,  7880.,  5229.,  5598.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616.,  11870.,
      12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120.,
      14300., 14480., 11230., 11380., 11530., 11680., 8469.,  8586.,  8703.,
      8820.,  11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192.,
      19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950.,
      22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220.,
      13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190.,
      23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600.,
      30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740.,
      18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140.,
      30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075.,
      39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200.,
      22465., 22870., 23275., 23680., 28090., 28540., 28990., 29440., 36810.,
      37420., 38030., 38640., 45175., 45950., 46725., 47500., 46400., 47200.,
      48000., 48800., 47625., 48450., 49275., 50100., 37190., 37860., 38530.,
      39200., 27190., 27700., 28210., 28720., 19418., 19820., 20222., 20624.,
      25184., 25728., 26272., 26816., 30570., 31260., 31950., 32640., 31350.,
      32060., 32770., 33480., 32130., 32860., 33590., 34320., 24784., 25376.,
      25968., 26560., 17882., 18332., 18782., 19232., 11853., 12186., 12519.,
      12852., 15130., 15580., 16030., 16480., 18050., 18620., 19190., 19760.,
      18485., 19070., 19655., 20240., 18920., 19520., 20120., 20720., 14302.,
      14788., 15274., 15760., 10089., 10458., 10827., 11196.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600., 30475.,
      30950., 31425., 31900., 36600., 37200., 37800., 38400., 37825., 38450.,
      39075., 39700., 39050., 39700., 40350., 41000., 45175., 45950., 46725.,
      47500., 46400., 47200., 48000., 48800., 47625., 48450., 49275., 50100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,  7020.,  8956.,  9616.,  11495., 12320., 12545., 13400., 13595.,
      14480., 10972., 11680., 8289.,  8820.,  11348., 12032., 15280., 16192.,
      19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884.,
      13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600.,
      30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620.,
      31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200.,
      22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575.,
      48800., 47825., 50100., 37380., 39200., 27355., 28720., 19556., 20624.,
      25392., 26816., 30860., 32640., 31660., 33480., 32460., 34320., 25072.,
      26560., 18116., 19232., 12033., 12852., 15388., 16480., 18395., 19760.,
      18845., 20240., 19295., 20720., 14620., 15760., 10341., 11196.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400., 37825.,
      39700., 39075., 41000., 45325., 47500., 46575., 48800., 47825., 50100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897., 13050., 13878., 14040., 17696., 17912.,  19004., 19232., 22705.,
      22990., 24340., 24640., 24775., 25090., 26470.,  26800., 26845., 27190.,
      28600., 28960., 21656., 21944., 23060., 23360.,  16353., 16578., 17406.,
      17640., 22408., 22696., 23764., 24064., 30160.,  30560., 31968., 32384.,
      38000., 38520., 40260., 40800., 40360., 40920.,  42700., 43280., 42720.,
      43320., 45140., 45760., 34032., 34528., 35968.,  36480., 25384., 25768.,
      26836., 27232., 33125., 33590., 34880., 35360.,  44040., 44680., 46380.,
      47040., 54825., 55650., 57750., 58600., 57275.,  58150., 60300., 61200.,
      59725., 60650., 62850., 63800., 47120., 47880.,  49620., 50400., 34805.,
      35390., 36680., 37280., 44255., 44930., 46430.,  47120., 58320., 59240.,
      61220., 62160., 71975., 73150., 75600., 76800.,  74425., 75650., 78150.,
      79400., 76875., 78150., 80700., 82000., 60280.,  61320., 63340., 64400.,
      44255., 45050., 46550., 47360., 55385., 56270.,  57980., 58880., 72600.,
      73800., 76060., 77280., 89125., 90650., 93450.,  95000., 91575., 93150.,
      96000., 97600., 94025., 95650., 98550., 100200., 73440., 74760., 77060.,
      78400., 53705., 54710., 56420., 57440., 38320.,  39112., 40444., 41248.,
      49712., 50784., 52544., 53632., 60360., 61720.,  63900., 65280., 61920.,
      63320., 65540., 66960., 63480., 64920., 67180.,  68640., 48976., 50144.,
      51936., 53120., 35344., 36232., 37564., 38464.,  23409., 24066., 25038.,
      25704., 29888., 30776., 32060., 32960., 35665.,  36790., 38380., 39520.,
      36535., 37690., 39310., 40480., 37405., 38590.,  40240., 41440., 28280.,
      29240., 30548., 31520., 19953., 20682., 21654.,  22392.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825., 55650., 57750., 58600., 57275., 58150., 60300., 61200., 59725.,
      60650., 62850., 63800., 71975., 73150., 75600., 76800., 74425., 75650.,
      78150., 79400., 76875., 78150., 80700., 82000., 89125., 90650., 93450.,
      95000., 91575., 93150., 96000., 97600., 94025., 95650., 98550., 100200.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      109885., 110770., 111655., 112540., 115060., 115960., 116860., 117760.,
      144000., 145200., 146400., 147600., 150900., 152120., 153340., 154560.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      145560., 146880., 148200., 149520., 152780., 154120., 155460., 156800.,
      106405., 107410., 108415., 109420., 111820., 112840., 113860., 114880.,
      75848.,  76640.,  77432.,  78224.,  80084.,  80888.,  81692.,  82496.,
      98352.,  99424.,  100496., 101568., 104000., 105088., 106176., 107264.,
      119360., 120720., 122080., 123440., 126420., 127800., 129180., 130560.,
      122440., 123840., 125240., 126640., 129660., 131080., 132500., 133920.,
      125520., 126960., 128400., 129840., 132900., 134360., 135820., 137280.,
      96784.,  97952.,  99120.,  100288., 102688., 103872., 105056., 106240.,
      69800.,  70688.,  71576.,  72464.,  74228.,  75128.,  76028.,  76928.,
      46161.,  46818.,  47475.,  48132.,  49410.,  50076.,  50742.,  51408.,
      58888.,  59776.,  60664.,  61552.,  63220.,  64120.,  65020.,  65920.,
      70205.,  71330.,  72455.,  73580.,  75620.,  76760.,  77900.,  79040.,
      71915.,  73070.,  74225.,  75380.,  77450.,  78620.,  79790.,  80960.,
      73625.,  74810.,  75995.,  77180.,  79280.,  80480.,  81680.,  82880.,
      55600.,  56560.,  57520.,  58480.,  60124.,  61096.,  62068.,  63040.,
      39177.,  39906.,  40635.,  41364.,  42570.,  43308.,  44046.,  44784.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      109975., 112540., 115135., 117760., 144180., 147600., 151060., 154560.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 145940., 149520., 153140., 156800.,
      106735., 109420., 112135., 114880., 76124.,  78224.,  80348.,  82496.,
      98768.,  101568., 104400., 107264., 119940., 123440., 126980., 130560.,
      123060., 126640., 130260., 133920., 126180., 129840., 133540., 137280.,
      97360.,  100288., 103248., 106240., 70268.,  72464.,  74684.,  76928.,
      46521.,  48132.,  49761.,  51408.,  59404.,  61552.,  63724.,  65920.,
      70895.,  73580.,  76295.,  79040.,  72635.,  75380.,  78155.,  80960.,
      74375.,  77180.,  80015.,  82880.,  56236.,  58480.,  60748.,  63040.,
      39681.,  41364.,  43065.,  44784.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,  50274.,  51894.,  52200.,  53847.,  54162.,  55836.,  56160.,
      68660.,  69080.,  71216.,  71648.,  73820.,  74264.,  76472.,  76928.,
      88195.,  88750.,  91390.,  91960.,  94645.,  95230.,  97960.,  98560.,
      96415.,  97030.,  99730.,  100360., 103105., 103750., 106540., 107200.,
      104635., 105310., 108070., 108760., 111565., 112270., 115120., 115840.,
      84452.,  85016.,  87200.,  87776.,  89996.,  90584.,  92840.,  93440.,
      63801.,  64242.,  65862.,  66312.,  67959.,  68418.,  70092.,  70560.,
      87556.,  88120.,  90208.,  90784.,  92908.,  93496.,  95656.,  96256.,
      117904., 118688., 121440., 122240., 125040., 125856., 128704., 129536.,
      148620., 149640., 153040., 154080., 157540., 158600., 162120., 163200.,
      157980., 159080., 162560., 163680., 167220., 168360., 171960., 173120.,
      167340., 168520., 172080., 173280., 176900., 178120., 181800., 183040.,
      133328., 134304., 137120., 138112., 140976., 141984., 144896., 145920.,
      99460.,  100216., 102304., 103072., 105196., 105976., 108136., 108928.,
      129995., 130910., 133430., 134360., 136925., 137870., 140480., 141440.,
      172860., 174120., 177440., 178720., 182100., 183400., 186840., 188160.,
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      185100., 186600., 190000., 191520., 194980., 196520., 200040., 201600.,
      136715., 137870., 140390., 141560., 144125., 145310., 147920., 149120.,
      174095., 175430., 178370., 179720., 182705., 184070., 187100., 188480.,
      229420., 231240., 235120., 236960., 240900., 242760., 246760., 248640.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.,
      237180., 239240., 243200., 245280., 249300., 251400., 255480., 257600.,
      174095., 175670., 178610., 180200., 183185., 184790., 187820., 189440.,
      218195., 219950., 223310., 225080., 228485., 230270., 233720., 235520.,
      285980., 288360., 292800., 295200., 299700., 302120., 306680., 309120.,
      351025., 354050., 359550., 362600., 368175., 371250., 376900., 380000.,
      360725., 363850., 369450., 372600., 378275., 381450., 387200., 390400.,
      370425., 373650., 379350., 382600., 388375., 391650., 397500., 400800.,
      289260., 291880., 296400., 299040., 303620., 306280., 310920., 313600.,
      211475., 213470., 216830., 218840., 222245., 224270., 227720., 229760.,
      150676., 152248., 154864., 156448., 159100., 160696., 163384., 164992.,
      195408., 197536., 200992., 203136., 206640., 208800., 212352., 214528.,
      237180., 239880., 244160., 246880., 251220., 253960., 258360., 261120.,
      243340., 246120., 250480., 253280., 257700., 260520., 265000., 267840.,
      249500., 252360., 256800., 259680., 264180., 267080., 271640., 274560.,
      192400., 194720., 198240., 200576., 204144., 206496., 210112., 212480.,
      138772., 140536., 143152., 144928., 147580., 149368., 152056., 153856.,
      91737.,  93042.,  94950.,  96264.,  98199.,  99522.,  101484., 102816.,
      117044., 118808., 121328., 123104., 125660., 127448., 130040., 131840.,
      139555., 141790., 144910., 147160., 150325., 152590., 155800., 158080.,
      142975., 145270., 148450., 150760., 153985., 156310., 159580., 161920.,
      146395., 148750., 151990., 154360., 157645., 160030., 163360., 165760.,
      110564., 112472., 115040., 116960., 119564., 121496., 124136., 126080.,
      77913.,  79362.,  81270.,  82728.,  84663.,  86130.,  88092.,  89568.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.,
      351025., 354050., 359550., 362600., 368175., 371250., 376900., 380000.,
      360725., 363850., 369450., 372600., 378275., 381450., 387200., 390400.,
      370425., 373650., 379350., 382600., 388375., 391650., 397500., 400800.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,  99954.,  100251., 100548., 103482., 103788., 104094., 104400.,
      107379., 107694., 108009., 108324., 111348., 111672., 111996., 112320.,
      136900., 137320., 137740., 138160., 142000., 142432., 142864., 143296.,
      147196., 147640., 148084., 148528., 152488., 152944., 153400., 153856.,
      175835., 176390., 176945., 177500., 182210., 182780., 183350., 183920.,
      188705., 189290., 189875., 190460., 195320., 195920., 196520., 197120.,
      192215., 192830., 193445., 194060., 198830., 199460., 200090., 200720.,
      205565., 206210., 206855., 207500., 212420., 213080., 213740., 214400.,
      208595., 209270., 209945., 210620., 215450., 216140., 216830., 217520.,
      222425., 223130., 223835., 224540., 229520., 230240., 230960., 231680.,
      168340., 168904., 169468., 170032., 173824., 174400., 174976., 175552.,
      179404., 179992., 180580., 181168., 185080., 185680., 186280., 186880.,
      127161., 127602., 128043., 128484., 131274., 131724., 132174., 132624.,
      135459., 135918., 136377., 136836., 139716., 140184., 140652., 141120.,
      174548., 175112., 175676., 176240., 179840., 180416., 180992., 181568.,
      185228., 185816., 186404., 186992., 190712., 191312., 191912., 192512.,
      235024., 235808., 236592., 237376., 242080., 242880., 243680., 244480.,
      249264., 250080., 250896., 251712., 256576., 257408., 258240., 259072.,
      296220., 297240., 298260., 299280., 305040., 306080., 307120., 308160.,
      314020., 315080., 316140., 317200., 323160., 324240., 325320., 326400.,
      314860., 315960., 317060., 318160., 324000., 325120., 326240., 327360.,
      333300., 334440., 335580., 336720., 342760., 343920., 345080., 346240.,
      333500., 334680., 335860., 337040., 342960., 344160., 345360., 346560.,
      352580., 353800., 355020., 356240., 362360., 363600., 364840., 366080.,
      265680., 266656., 267632., 268608., 273248., 274240., 275232., 276224.,
      280944., 281952., 282960., 283968., 288768., 289792., 290816., 291840.,
      198164., 198920., 199676., 200432., 203840., 204608., 205376., 206144.,
      209612., 210392., 211172., 211952., 215480., 216272., 217064., 217856.,
      259075., 259990., 260905., 261820., 265930., 266860., 267790., 268720.,
      272905., 273850., 274795., 275740., 280000., 280960., 281920., 282880.,
      344460., 345720., 346980., 348240., 353600., 354880., 356160., 357440.,
      362900., 364200., 365500., 366800., 372360., 373680., 375000., 376320.,
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      368700., 370200., 371700., 373200., 378480., 380000., 381520., 383040.,
      388420., 389960., 391500., 393040., 398520., 400080., 401640., 403200.,
      272275., 273430., 274585., 275740., 279610., 280780., 281950., 283120.,
      287065., 288250., 289435., 290620., 294640., 295840., 297040., 298240.,
      346855., 348190., 349525., 350860., 355390., 356740., 358090., 359440.,
      364045., 365410., 366775., 368140., 372820., 374200., 375580., 376960.,
      457020., 458840., 460660., 462480., 468400., 470240., 472080., 473920.,
      479940., 481800., 483660., 485520., 491640., 493520., 495400., 497280.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.,
      472300., 474360., 476420., 478480., 484320., 486400., 488480., 490560.,
      496500., 498600., 500700., 502800., 508840., 510960., 513080., 515200.,
      346615., 348190., 349765., 351340., 355630., 357220., 358810., 360400.,
      364765., 366370., 367975., 369580., 374020., 375640., 377260., 378880.,
      434635., 436390., 438145., 439900., 444850., 446620., 448390., 450160.,
      455185., 456970., 458755., 460540., 465640., 467440., 469240., 471040.,
      569580., 571960., 574340., 576720., 583200., 585600., 588000., 590400.,
      596980., 599400., 601820., 604240., 610920., 613360., 615800., 618240.,
      699025., 702050., 705075., 708100., 716050., 719100., 722150., 725200.,
      733275., 736350., 739425., 742500., 750700., 753800., 756900., 760000.,
      718325., 721450., 724575., 727700., 735750., 738900., 742050., 745200.,
      753375., 756550., 759725., 762900., 771200., 774400., 777600., 780800.,
      737625., 740850., 744075., 747300., 755450., 758700., 761950., 765200.,
      773475., 776750., 780025., 783300., 791700., 795000., 798300., 801600.,
      575900., 578520., 581140., 583760., 590160., 592800., 595440., 598080.,
      604580., 607240., 609900., 612560., 619160., 621840., 624520., 627200.,
      420955., 422950., 424945., 426940., 431650., 433660., 435670., 437680.,
      442465., 444490., 446515., 448540., 453400., 455440., 457480., 459520.,
      299780., 301352., 302924., 304496., 308144., 309728., 311312., 312896.,
      316604., 318200., 319796., 321392., 325160., 326768., 328376., 329984.,
      388688., 390816., 392944., 395072., 399840., 401984., 404128., 406272.,
      411120., 413280., 415440., 417600., 422528., 424704., 426880., 429056.,
      471660., 474360., 477060., 479760., 485600., 488320., 491040., 493760.,
      499700., 502440., 505180., 507920., 513960., 516720., 519480., 522240.,
      483900., 486680., 489460., 492240., 498160., 500960., 503760., 506560.,
      512580., 515400., 518220., 521040., 527160., 530000., 532840., 535680.,
      496140., 499000., 501860., 504720., 510720., 513600., 516480., 519360.,
      525460., 528360., 531260., 534160., 540360., 543280., 546200., 549120.,
      382480., 384800., 387120., 389440., 394144., 396480., 398816., 401152.,
      405936., 408288., 410640., 412992., 417856., 420224., 422592., 424960.,
      275780., 277544., 279308., 281072., 284528., 286304., 288080., 289856.,
      293372., 295160., 296948., 298736., 302312., 304112., 305912., 307712.,
      182169., 183474., 184779., 186084., 188586., 189900., 191214., 192528.,
      195075., 196398., 197721., 199044., 201636., 202968., 204300., 205632.,
      232324., 234088., 235852., 237616., 240880., 242656., 244432., 246208.,
      249532., 251320., 253108., 254896., 258280., 260080., 261880., 263680.,
      276875., 279110., 281345., 283580., 287570., 289820., 292070., 294320.,
      298385., 300650., 302915., 305180., 309320., 311600., 313880., 316160.,
      283655., 285950., 288245., 290540., 294590., 296900., 299210., 301520.,
      305645., 307970., 310295., 312620., 316820., 319160., 321500., 323840.,
      290435., 292790., 295145., 297500., 301610., 303980., 306350., 308720.,
      312905., 315290., 317675., 320060., 324320., 326720., 329120., 331520.,
      219220., 221128., 223036., 224944., 228160., 230080., 232000., 233920.,
      237196., 239128., 241060., 242992., 246328., 248272., 250216., 252160.,
      154377., 155826., 157275., 158724., 161082., 162540., 163998., 165456.,
      167859., 169326., 170793., 172260., 174708., 176184., 177660., 179136.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.,
      699025., 702050., 705075., 708100., 716050., 719100., 722150., 725200.,
      733275., 736350., 739425., 742500., 750700., 753800., 756900., 760000.,
      718325., 721450., 724575., 727700., 735750., 738900., 742050., 745200.,
      753375., 756550., 759725., 762900., 771200., 774400., 777600., 780800.,
      737625., 740850., 744075., 747300., 755450., 758700., 761950., 765200.,
      773475., 776750., 780025., 783300., 791700., 795000., 798300., 801600.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956., 2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,
      3380., 4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,
      4990., 6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,
      6670., 8780.,  10825., 11150., 11475., 11800., 9250.,  6790.,
      8350., 10940., 13425., 13750., 14075., 14400., 11250., 8230.,
      5852., 7596.,  9230.,  9440.,  9650.,  9860.,  7620.,  5510.,
      3648., 4670.,  5590.,  5710.,  5830.,  5950.,  4520.,  3207.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {8225.,  8550.,  8875.,  9200.,
                                         10825., 11150., 11475., 11800.,
                                         13425., 13750., 14075., 14400.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500.,
      27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 11248.,
      11704., 14576., 15192., 17680., 18460., 18080., 18880., 18480., 19300.,
      18880., 19720., 14560., 15240., 10504., 11020., 6918.,  7296.,  8830.,
      9340.,  10535., 11180., 10760., 11420., 10985., 11660., 11210., 11900.,
      8482.,  9040.,  5991.,  6414.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.,
      25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,  7644.,  7734.,  7824.,  10286., 10412., 10538., 10664., 13105.,
      13270., 13435., 13600., 14140., 14320., 14500., 14680., 15175., 15370.,
      15565., 15760., 16210., 16420., 16630., 16840., 12998., 13172., 13346.,
      13520., 9759.,  9894.,  10029., 10164., 13016., 13184., 13352., 13520.,
      17432., 17664., 17896., 18128., 21860., 22160., 22460., 22760., 23040.,
      23360., 23680., 24000., 24220., 24560., 24900., 25240., 25400., 25760.,
      26120., 26480., 20152., 20448., 20744., 21040., 14972., 15200., 15428.,
      15656., 19150., 19420., 19690., 19960., 25370., 25740., 26110., 26480.,
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925.,
      34450., 34975., 35500., 35150., 35700., 36250., 36800., 27650., 28100.,
      28550., 29000., 20365., 20710., 21055., 21400., 25510., 25900., 26290.,
      26680., 33530., 34060., 34590., 35120., 41275., 41950., 42625., 43300.,
      42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950.,
      45700., 46450., 47200., 35170., 35780., 36390., 37000., 25765., 26230.,
      26695., 27160., 31870., 32380., 32890., 33400., 41690., 42380., 43070.,
      43760., 51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000.,
      53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600., 42690.,
      43460., 44230., 45000., 31165., 31750., 32335., 32920., 22040., 22496.,
      22952., 23408., 28536., 29152., 29768., 30384., 34580., 35360., 36140.,
      36920., 35360., 36160., 36960., 37760., 36140., 36960., 37780., 38600.,
      36920., 37760., 38600., 39440., 28440., 29120., 29800., 30480., 20492.,
      21008., 21524., 22040., 13458., 13836., 14214., 14592., 17150., 17660.,
      18170., 18680., 20425., 21070., 21715., 22360., 20860., 21520., 22180.,
      22840., 21295., 21970., 22645., 23320., 21730., 22420., 23110., 23800.,
      16406., 16964., 17522., 18080., 11559., 11982., 12405., 12828.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200.,
      33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800.,
      41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600.,
      43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200.,
      51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000.,
      53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,  7824.,  9980.,  10664., 12745., 13600., 13795., 14680., 14845.,
      15760., 15895., 16840., 12764., 13520., 9597.,  10164., 12800., 13520.,
      17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160.,
      26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480.,
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620.,
      29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300.,
      42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885.,
      27160., 31975., 33400., 41860., 43760., 51325., 53700., 52575., 55000.,
      53825., 56300., 55075., 57600., 42980., 45000., 31405., 32920., 22232.,
      23408., 28816., 30384., 34960., 36920., 35760., 37760., 36560., 38600.,
      37360., 39440., 28816., 30480., 20792., 22040., 13683., 14592., 17468.,
      18680., 20845., 22360., 21295., 22840., 21745., 23320., 22195., 23800.,
      16796., 18080., 11865., 12828.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800.,
      41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200.,
      51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451.,  14622.,  15468.,  15648.,  19720.,  19960.,  21076.,  21328.,
      25175.,  25490.,  26870.,  27200.,  27245.,  27590.,  29000.,  29360.,
      29315.,  29690.,  31130.,  31520.,  31385.,  31790.,  33260.,  33680.,
      25192.,  25528.,  26692.,  27040.,  18933.,  19194.,  20058.,  20328.,
      25276.,  25600.,  26704.,  27040.,  33888.,  34336.,  35792.,  36256.,
      42540.,  43120.,  44920.,  45520.,  44900.,  45520.,  47360.,  48000.,
      47260.,  47920.,  49800.,  50480.,  49620.,  50320.,  52240.,  52960.,
      39392.,  39968.,  41488.,  42080.,  29284.,  29728.,  30856.,  31312.,
      37505.,  38030.,  39380.,  39920.,  49720.,  50440.,  52220.,  52960.,
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      54360.,  55240.,  57100.,  58000.,  40055.,  40730.,  42110.,  42800.,
      50225.,  50990.,  52580.,  53360.,  66040.,  67080.,  69180.,  70240.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      69400.,  70600.,  72780.,  74000.,  50855.,  51770.,  53390.,  54320.,
      62945.,  63950.,  65780.,  66800.,  82360.,  83720.,  86140.,  87520.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      84440.,  85960.,  88460.,  90000.,  61655.,  62810.,  64670.,  65840.,
      43564.,  44464.,  45904.,  46816.,  56416.,  57632.,  59536.,  60768.,
      68380.,  69920.,  72280.,  73840.,  69940.,  71520.,  73920.,  75520.,
      71500.,  73120.,  75560.,  77200.,  73060.,  74720.,  77200.,  78880.,
      56288.,  57632.,  59600.,  60960.,  40564.,  41584.,  43048.,  44080.,
      26619.,  27366.,  28428.,  29184.,  33928.,  34936.,  36340.,  37360.,
      40415.,  41690.,  43430.,  44720.,  41285.,  42590.,  44360.,  45680.,
      42155.,  43490.,  45290.,  46640.,  43025.,  44390.,  46220.,  47600.,
      32488.,  33592.,  35044.,  36160.,  22893.,  23730.,  24810.,  25656.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      124885., 125890., 126895., 127900., 130540., 131560., 132580., 133600.,
      163360., 164720., 166080., 167440., 170900., 172280., 173660., 175040.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      167360., 168880., 170400., 171920., 175380., 176920., 178460., 180000.,
      122155., 123310., 124465., 125620., 128170., 129340., 130510., 131680.,
      86228.,  87128.,  88028.,  88928.,  90896.,  91808.,  92720.,  93632.,
      111616., 112832., 114048., 115264., 117840., 119072., 120304., 121536.,
      135220., 136760., 138300., 139840., 143000., 144560., 146120., 147680.,
      138300., 139880., 141460., 143040., 146240., 147840., 149440., 151040.,
      141380., 143000., 144620., 146240., 149480., 151120., 152760., 154400.,
      144460., 146120., 147780., 149440., 152720., 154400., 156080., 157760.,
      111232., 112576., 113920., 115264., 117840., 119200., 120560., 121920.,
      80108.,  81128.,  82148.,  83168.,  85064.,  86096.,  87128.,  88160.,
      52491.,  53238.,  53985.,  54732.,  56100.,  56856.,  57612.,  58368.,
      66848.,  67856.,  68864.,  69872.,  71660.,  72680.,  73700.,  74720.,
      79555.,  80830.,  82105.,  83380.,  85570.,  86860.,  88150.,  89440.,
      81265.,  82570.,  83875.,  85180.,  87400.,  88720.,  90040.,  91360.,
      82975.,  84310.,  85645.,  86980.,  89230.,  90580.,  91930.,  93280.,
      84685.,  86050.,  87415.,  88780.,  91060.,  92440.,  93820.,  95200.,
      63872.,  64976.,  66080.,  67184.,  68972.,  70088.,  71204.,  72320.,
      44949.,  45786.,  46623.,  47460.,  48774.,  49620.,  50466.,  51312.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      125095., 127900., 130735., 133600., 163700., 167440., 171220., 175040.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      167940., 171920., 175940., 180000., 122635., 125620., 128635., 131680.,
      86612.,  88928.,  91268.,  93632.,  112176., 115264., 118384., 121536.,
      135980., 139840., 143740., 147680., 139100., 143040., 147020., 151040.,
      142220., 146240., 150300., 154400., 145340., 149440., 153580., 157760.,
      111984., 115264., 118576., 121920., 80708.,  83168.,  85652.,  88160.,
      52941.,  54732.,  56541.,  58368.,  67484.,  69872.,  72284.,  74720.,
      80395.,  83380.,  86395.,  89440.,  82135.,  85180.,  88255.,  91360.,
      83875.,  86980.,  90115.,  93280.,  85615.,  88780.,  91975.,  95200.,
      64652.,  67184.,  69740.,  72320.,  45561.,  47460.,  49377.,  51312.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,  56490.,  58146.,  58488.,  60171.,  60522.,  62232.,  62592.,
      76708.,  77176.,  79360.,  79840.,  82060.,  82552.,  84808.,  85312.,
      98015.,  98630.,  101330., 101960., 104705., 105350., 108140., 108800.,
      106235., 106910., 109670., 110360., 113165., 113870., 116720., 117440.,
      114455., 115190., 118010., 118760., 121625., 122390., 125300., 126080.,
      122675., 123470., 126350., 127160., 130085., 130910., 133880., 134720.,
      98500.,  99160.,  101440., 102112., 104428., 105112., 107464., 108160.,
      74049.,  74562.,  76254.,  76776.,  78495.,  79026.,  80772.,  81312.,
      98956.,  99592.,  101752., 102400., 104596., 105256., 107488., 108160.,
      132720., 133600., 136448., 137344., 140240., 141152., 144096., 145024.,
      166660., 167800., 171320., 172480., 176060., 177240., 180880., 182080.,
      176020., 177240., 180840., 182080., 185740., 187000., 190720., 192000.,
      185380., 186680., 190360., 191680., 195420., 196760., 200560., 201920.,
      194740., 196120., 199880., 201280., 205100., 206520., 210400., 211840.,
      154608., 155744., 158720., 159872., 162896., 164064., 167136., 168320.,
      114940., 115816., 118024., 118912., 121156., 122056., 124336., 125248.,
      147395., 148430., 151070., 152120., 154805., 155870., 158600., 159680.,
      195420., 196840., 200320., 201760., 205300., 206760., 210360., 211840.,
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      213820., 215560., 219200., 220960., 224660., 226440., 230200., 232000.,
      157535., 158870., 161570., 162920., 165665., 167030., 169820., 171200.,
      197795., 199310., 202430., 203960., 207125., 208670., 211880., 213440.,
      260060., 262120., 266240., 268320., 272500., 274600., 278840., 280960.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.,
      273340., 275720., 280000., 282400., 286740., 289160., 293560., 296000.,
      200255., 202070., 205250., 207080., 210305., 212150., 215420., 217280.,
      248195., 250190., 253790., 255800., 259445., 261470., 265160., 267200.,
      324700., 327400., 332160., 334880., 339700., 342440., 347320., 350080.,
      397825., 401250., 407150., 410600., 416575., 420050., 426100., 429600.,
      407525., 411050., 417050., 420600., 426675., 430250., 436400., 440000.,
      417225., 420850., 426950., 430600., 436775., 440450., 446700., 450400.,
      426925., 430650., 436850., 440600., 446875., 450650., 457000., 460800.,
      332860., 335880., 340800., 343840., 348820., 351880., 356920., 360000.,
      242975., 245270., 248930., 251240., 254945., 257270., 261020., 263360.,
      171436., 173224., 176056., 177856., 180724., 182536., 185440., 187264.,
      221936., 224352., 228096., 230528., 234320., 236768., 240608., 243072.,
      268900., 271960., 276600., 279680., 284380., 287480., 292240., 295360.,
      275060., 278200., 282920., 286080., 290860., 294040., 298880., 302080.,
      281220., 284440., 289240., 292480., 297340., 300600., 305520., 308800.,
      287380., 290680., 295560., 298880., 303820., 307160., 312160., 315520.,
      221296., 223968., 227840., 230528., 234448., 237152., 241120., 243840.,
      159388., 161416., 164296., 166336., 169252., 171304., 174256., 176320.,
      104397., 105882., 107970., 109464., 111579., 113082., 115224., 116736.,
      132964., 134968., 137728., 139744., 142540., 144568., 147400., 149440.,
      158255., 160790., 164210., 166760., 170225., 172790., 176300., 178880.,
      161675., 164270., 167750., 170360., 173885., 176510., 180080., 182720.,
      165095., 167750., 171290., 173960., 177545., 180230., 183860., 186560.,
      168515., 171230., 174830., 177560., 181205., 183950., 187640., 190400.,
      127108., 129304., 132160., 134368., 137260., 139480., 142408., 144640.,
      89457.,  91122.,  93246.,  94920.,  97071.,  98754.,  100932., 102624.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.,
      397825., 401250., 407150., 410600., 416575., 420050., 426100., 429600.,
      407525., 411050., 417050., 420600., 426675., 430250., 436400., 440000.,
      417225., 420850., 426950., 430600., 436775., 440450., 446700., 450400.,
      426925., 430650., 436850., 440600., 446875., 450650., 457000., 460800.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981., 112314., 112647., 112980., 115950., 116292., 116634., 116976.,
      119991., 120342., 120693., 121044., 124104., 124464., 124824., 125184.,
      152948., 153416., 153884., 154352., 158240., 158720., 159200., 159680.,
      163628., 164120., 164612., 165104., 169112., 169616., 170120., 170624.,
      195415., 196030., 196645., 197260., 202030., 202660., 203290., 203920.,
      208765., 209410., 210055., 210700., 215620., 216280., 216940., 217600.,
      211795., 212470., 213145., 213820., 218650., 219340., 220030., 220720.,
      225625., 226330., 227035., 227740., 232720., 233440., 234160., 234880.,
      228175., 228910., 229645., 230380., 235270., 236020., 236770., 237520.,
      242485., 243250., 244015., 244780., 249820., 250600., 251380., 252160.,
      244555., 245350., 246145., 246940., 251890., 252700., 253510., 254320.,
      259345., 260170., 260995., 261820., 266920., 267760., 268600., 269440.,
      196340., 197000., 197660., 198320., 202208., 202880., 203552., 204224.,
      208172., 208856., 209540., 210224., 214232., 214928., 215624., 216320.,
      147585., 148098., 148611., 149124., 151986., 152508., 153030., 153552.,
      156459., 156990., 157521., 158052., 161004., 161544., 162084., 162624.,
      197276., 197912., 198548., 199184., 202856., 203504., 204152., 204800.,
      208532., 209192., 209852., 210512., 214304., 214976., 215648., 216320.,
      264560., 265440., 266320., 267200., 272000., 272896., 273792., 274688.,
      279568., 280480., 281392., 282304., 287264., 288192., 289120., 290048.,
      332180., 333320., 334460., 335600., 341480., 342640., 343800., 344960.,
      350940., 352120., 353300., 354480., 360560., 361760., 362960., 364160.,
      350820., 352040., 353260., 354480., 360440., 361680., 362920., 364160.,
      370220., 371480., 372740., 374000., 380160., 381440., 382720., 384000.,
      369460., 370760., 372060., 373360., 379400., 380720., 382040., 383360.,
      389500., 390840., 392180., 393520., 399760., 401120., 402480., 403840.,
      388100., 389480., 390860., 392240., 398360., 399760., 401160., 402560.,
      408780., 410200., 411620., 413040., 419360., 420800., 422240., 423680.,
      308080., 309216., 310352., 311488., 316288., 317440., 318592., 319744.,
      324624., 325792., 326960., 328128., 333088., 334272., 335456., 336640.,
      229004., 229880., 230756., 231632., 235160., 236048., 236936., 237824.,
      241412., 242312., 243212., 244112., 247760., 248672., 249584., 250496.,
      293755., 294790., 295825., 296860., 301090., 302140., 303190., 304240.,
      308545., 309610., 310675., 311740., 316120., 317200., 318280., 319360.,
      389420., 390840., 392260., 393680., 399200., 400640., 402080., 403520.,
      409140., 410600., 412060., 413520., 419240., 420720., 422200., 423680.,
      483425., 485250., 487075., 488900., 495650., 497500., 499350., 501200.,
      508075., 509950., 511825., 513700., 520700., 522600., 524500., 526400.,
      502725., 504650., 506575., 508500., 515350., 517300., 519250., 521200.,
      528175., 530150., 532125., 534100., 541200., 543200., 545200., 547200.,
      522025., 524050., 526075., 528100., 535050., 537100., 539150., 541200.,
      548275., 550350., 552425., 554500., 561700., 563800., 565900., 568000.,
      541325., 543450., 545575., 547700., 554750., 556900., 559050., 561200.,
      568375., 570550., 572725., 574900., 582200., 584400., 586600., 588800.,
      425900., 427640., 429380., 431120., 436640., 438400., 440160., 441920.,
      447540., 449320., 451100., 452880., 458600., 460400., 462200., 464000.,
      313735., 315070., 316405., 317740., 321790., 323140., 324490., 325840.,
      329965., 331330., 332695., 334060., 338260., 339640., 341020., 342400.,
      394075., 395590., 397105., 398620., 403330., 404860., 406390., 407920.,
      412705., 414250., 415795., 417340., 422200., 423760., 425320., 426880.,
      518060., 520120., 522180., 524240., 530400., 532480., 534560., 536640.,
      542900., 545000., 547100., 549200., 555560., 557680., 559800., 561920.,
      637825., 640450., 643075., 645700., 653250., 655900., 658550., 661200.,
      668875., 671550., 674225., 676900., 684700., 687400., 690100., 692800.,
      657125., 659850., 662575., 665300., 672950., 675700., 678450., 681200.,
      688975., 691750., 694525., 697300., 705200., 708000., 710800., 713600.,
      676425., 679250., 682075., 684900., 692650., 695500., 698350., 701200.,
      709075., 711950., 714825., 717700., 725700., 728600., 731500., 734400.,
      695725., 698650., 701575., 704500., 712350., 715300., 718250., 721200.,
      729175., 732150., 735125., 738100., 746200., 749200., 752200., 755200.,
      544300., 546680., 549060., 551440., 557600., 560000., 562400., 564800.,
      571060., 573480., 575900., 578320., 584680., 587120., 589560., 592000.,
      398695., 400510., 402325., 404140., 408670., 410500., 412330., 414160.,
      418765., 420610., 422455., 424300., 428980., 430840., 432700., 434560.,
      494395., 496390., 498385., 500380., 505570., 507580., 509590., 511600.,
      516865., 518890., 520915., 522940., 528280., 530320., 532360., 534400.,
      646700., 649400., 652100., 654800., 661600., 664320., 667040., 669760.,
      676660., 679400., 682140., 684880., 691880., 694640., 697400., 700160.,
      792225., 795650., 799075., 802500., 810850., 814300., 817750., 821200.,
      829675., 833150., 836625., 840100., 848700., 852200., 855700., 859200.,
      811525., 815050., 818575., 822100., 830550., 834100., 837650., 841200.,
      849775., 853350., 856925., 860500., 869200., 872800., 876400., 880000.,
      830825., 834450., 838075., 841700., 850250., 853900., 857550., 861200.,
      869875., 873550., 877225., 880900., 889700., 893400., 897100., 900800.,
      850125., 853850., 857575., 861300., 869950., 873700., 877450., 881200.,
      889975., 893750., 897525., 901300., 910200., 914000., 917800., 921600.,
      662700., 665720., 668740., 671760., 678560., 681600., 684640., 687680.,
      694580., 697640., 700700., 703760., 710760., 713840., 716920., 720000.,
      483655., 485950., 488245., 490540., 495550., 497860., 500170., 502480.,
      507565., 509890., 512215., 514540., 519700., 522040., 524380., 526720.,
      341084., 342872., 344660., 346448., 350312., 352112., 353912., 355712.,
      359636., 361448., 363260., 365072., 369056., 370880., 372704., 374528.,
      441456., 443872., 446288., 448704., 453760., 456192., 458624., 461056.,
      466192., 468640., 471088., 473536., 478752., 481216., 483680., 486144.,
      534740., 537800., 540860., 543920., 550120., 553200., 556280., 559360.,
      565660., 568760., 571860., 574960., 581360., 584480., 587600., 590720.,
      546980., 550120., 553260., 556400., 562680., 565840., 569000., 572160.,
      578540., 581720., 584900., 588080., 594560., 597760., 600960., 604160.,
      559220., 562440., 565660., 568880., 575240., 578480., 581720., 584960.,
      591420., 594680., 597940., 601200., 607760., 611040., 614320., 617600.,
      571460., 574760., 578060., 581360., 587800., 591120., 594440., 597760.,
      604300., 607640., 610980., 614320., 620960., 624320., 627680., 631040.,
      439920., 442592., 445264., 447936., 452992., 455680., 458368., 461056.,
      466192., 468896., 471600., 474304., 479520., 482240., 484960., 487680.,
      316748., 318776., 320804., 322832., 326552., 328592., 330632., 332672.,
      336452., 338504., 340556., 342608., 346448., 348512., 350576., 352640.,
      207309., 208794., 210279., 211764., 214446., 215940., 217434., 218928.,
      221655., 223158., 224661., 226164., 228936., 230448., 231960., 233472.,
      263924., 265928., 267932., 269936., 273440., 275456., 277472., 279488.,
      283052., 285080., 287108., 289136., 292760., 294800., 296840., 298880.,
      313975., 316510., 319045., 321580., 325870., 328420., 330970., 333520.,
      337885., 340450., 343015., 345580., 350020., 352600., 355180., 357760.,
      320755., 323350., 325945., 328540., 332890., 335500., 338110., 340720.,
      345145., 347770., 350395., 353020., 357520., 360160., 362800., 365440.,
      327535., 330190., 332845., 335500., 339910., 342580., 345250., 347920.,
      352405., 355090., 357775., 360460., 365020., 367720., 370420., 373120.,
      334315., 337030., 339745., 342460., 346930., 349660., 352390., 355120.,
      359665., 362410., 365155., 367900., 372520., 375280., 378040., 380800.,
      252020., 254216., 256412., 258608., 262112., 264320., 266528., 268736.,
      272300., 274520., 276740., 278960., 282584., 284816., 287048., 289280.,
      177249., 178914., 180579., 182244., 184818., 186492., 188166., 189840.,
      192459., 194142., 195825., 197508., 200172., 201864., 203556., 205248.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425., 485250., 487075., 488900., 495650., 497500., 499350., 501200.,
      508075., 509950., 511825., 513700., 520700., 522600., 524500., 526400.,
      502725., 504650., 506575., 508500., 515350., 517300., 519250., 521200.,
      528175., 530150., 532125., 534100., 541200., 543200., 545200., 547200.,
      522025., 524050., 526075., 528100., 535050., 537100., 539150., 541200.,
      548275., 550350., 552425., 554500., 561700., 563800., 565900., 568000.,
      541325., 543450., 545575., 547700., 554750., 556900., 559050., 561200.,
      568375., 570550., 572725., 574900., 582200., 584400., 586600., 588800.,
      637825., 640450., 643075., 645700., 653250., 655900., 658550., 661200.,
      668875., 671550., 674225., 676900., 684700., 687400., 690100., 692800.,
      657125., 659850., 662575., 665300., 672950., 675700., 678450., 681200.,
      688975., 691750., 694525., 697300., 705200., 708000., 710800., 713600.,
      676425., 679250., 682075., 684900., 692650., 695500., 698350., 701200.,
      709075., 711950., 714825., 717700., 725700., 728600., 731500., 734400.,
      695725., 698650., 701575., 704500., 712350., 715300., 718250., 721200.,
      729175., 732150., 735125., 738100., 746200., 749200., 752200., 755200.,
      792225., 795650., 799075., 802500., 810850., 814300., 817750., 821200.,
      829675., 833150., 836625., 840100., 848700., 852200., 855700., 859200.,
      811525., 815050., 818575., 822100., 830550., 834100., 837650., 841200.,
      849775., 853350., 856925., 860500., 869200., 872800., 876400., 880000.,
      830825., 834450., 838075., 841700., 850250., 853900., 857550., 861200.,
      869875., 873550., 877225., 880900., 889700., 893400., 897100., 900800.,
      850125., 853850., 857575., 861300., 869950., 873700., 877450., 881200.,
      889975., 893750., 897525., 901300., 910200., 914000., 917800., 921600.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554., 2142.,  2760.,  3030.,  2460., 1869., 2636.,  3564.,  4510., 4820.,
      3860., 2894.,  3850.,  5140.,  6425., 6750., 5350.,  3970.,  5110., 6760.,
      8375., 8700.,  6850.,  5050.,  6370., 8380., 10325., 10650., 8350., 6130.,
      7630., 10000., 12275., 12600., 9850., 7210., 5288.,  6868.,  8350., 8560.,
      6620., 4790.,  3264.,  4182.,  5010., 5130., 3900.,  2769.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425.,  6750.,  8375.,  8700.,
                                         10325., 10650., 12275., 12600.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 14780., 15260., 19350.,
      20000., 23725., 24550., 24350., 25200., 19010., 19700., 13895., 14420.,
      10156., 10576., 13168., 13736., 15980., 16700., 16380., 17120., 12640.,
      13240., 9124.,  9580.,  6186.,  6528.,  7902.,  8364.,  9435.,  10020.,
      9660.,  10260., 7314.,  7800.,  5169.,  5538.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400.,
      19975., 20650., 20600., 21300., 23725., 24550., 24350., 25200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,  6072.,  6144.,  6216.,  8262.,  8364.,  8466.,  8568.,  10635.,
      10770., 10905., 11040., 11670., 11820., 11970., 12120., 9462.,  9588.,
      9714.,  9840.,  7179.,  7278.,  7377.,  7476.,  10148., 10280., 10412.,
      10544., 13704., 13888., 14072., 14256., 17320., 17560., 17800., 18040.,
      18500., 18760., 19020., 19280., 14792., 15008., 15224., 15440., 11072.,
      11240., 11408., 11576., 14770., 14980., 15190., 15400., 19690., 19980.,
      20270., 20560., 24575., 24950., 25325., 25700., 25800., 26200., 26600.,
      27000., 20410., 20740., 21070., 21400., 15115., 15370., 15625., 15880.,
      19540., 19840., 20140., 20440., 25810., 26220., 26630., 27040., 31925.,
      32450., 32975., 33500., 33150., 33700., 34250., 34800., 26050., 26500.,
      26950., 27400., 19165., 19510., 19855., 20200., 24310., 24700., 25090.,
      25480., 31930., 32460., 32990., 33520., 39275., 39950., 40625., 41300.,
      40500., 41200., 41900., 42600., 31690., 32260., 32830., 33400., 23215.,
      23650., 24085., 24520., 29080., 29560., 30040., 30520., 38050., 38700.,
      39350., 40000., 46625., 47450., 48275., 49100., 47850., 48700., 49550.,
      50400., 37330., 38020., 38710., 39400., 27265., 27790., 28315., 28840.,
      19892., 20312., 20732., 21152., 25768., 26336., 26904., 27472., 31240.,
      31960., 32680., 33400., 32020., 32760., 33500., 34240., 24680., 25280.,
      25880., 26480., 17792., 18248., 18704., 19160., 12030., 12372., 12714.,
      13056., 15342., 15804., 16266., 16728., 18285., 18870., 19455., 20040.,
      18720., 19320., 19920., 20520., 14142., 14628., 15114., 15600., 9969.,
      10338., 10707., 11076.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575., 24950., 25325., 25700., 25800., 26200., 26600., 27000.,
      31925., 32450., 32975., 33500., 33150., 33700., 34250., 34800.,
      39275., 39950., 40625., 41300., 40500., 41200., 41900., 42600.,
      46625., 47450., 48275., 49100., 47850., 48700., 49550., 50400.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,  6216.,  7932.,  8568.,  10245., 11040., 11295., 12120., 9180.,
      9840.,  6981.,  7476.,  9896.,  10544., 13392., 14256., 16960., 18040.,
      18160., 19280., 14544., 15440., 10904., 11576., 14575., 15400., 19460.,
      20560., 24325., 25700., 25575., 27000., 20260., 21400., 15025., 15880.,
      19435., 20440., 25700., 27040., 31825., 33500., 33075., 34800., 26020.,
      27400., 19165., 20200., 24295., 25480., 31940., 33520., 39325., 41300.,
      40575., 42600., 31780., 33400., 23305., 24520., 29155., 30520., 38180.,
      40000., 46825., 49100., 48075., 50400., 37540., 39400., 27445., 28840.,
      20048., 21152., 26000., 27472., 31560., 33400., 32360., 34240., 24976.,
      26480., 18032., 19160., 12219., 13056., 15612., 16728., 18645., 20040.,
      19095., 20520., 14460., 15600., 10221., 11076.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24325., 25700., 25575., 27000., 31825., 33500., 33075., 34800.,
      39325., 41300., 40575., 42600., 46825., 49100., 48075., 50400.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343.,  11478., 12288., 12432., 15672., 15864., 16932., 17136., 20235.,
      20490.,  21810., 22080., 22305., 22590., 23940., 24240., 18120., 18360.,
      19428.,  19680., 13773., 13962., 14754., 14952., 19540., 19792., 20824.,
      21088.,  26432., 26784., 28144., 28512., 33460., 33920., 35600., 36080.,
      35820.,  36320., 38040., 38560., 28672., 29088., 30448., 30880., 21484.,
      21808.,  22816., 23152., 28745., 29150., 30380., 30800., 38360., 38920.,
      40540.,  41120., 47925., 48650., 50650., 51400., 50375., 51150., 53200.,
      54000.,  39880., 40520., 42140., 42800., 29555., 30050., 31250., 31760.,
      38285.,  38870., 40280., 40880., 50600., 51400., 53260., 54080., 62625.,
      63650.,  65950., 67000., 65075., 66150., 68500., 69600., 51160., 52040.,
      53900.,  54800., 37655., 38330., 39710., 40400., 47825., 48590., 50180.,
      50960.,  62840., 63880., 65980., 67040., 77325., 78650., 81250., 82600.,
      79775.,  81150., 83800., 85200., 62440., 63560., 65660., 66800., 45755.,
      46610.,  48170., 49040., 57365., 58310., 60080., 61040., 75080., 76360.,
      78700.,  80000., 92025., 93650., 96550., 98200., 94475., 96150., 99100.,
      100800., 73720., 75080., 77420., 78800., 53855., 54890., 56630., 57680.,
      39268.,  40096., 41464., 42304., 50880., 52000., 53808., 54944., 61700.,
      63120.,  65360., 66800., 63260., 64720., 67000., 68480., 48768., 49952.,
      51760.,  52960., 35164., 36064., 37408., 38320., 23763., 24438., 25428.,
      26112.,  30312., 31224., 32532., 33456., 36135., 37290., 38910., 40080.,
      37005.,  38190., 39840., 41040., 27960., 28920., 30228., 31200., 19713.,
      20442.,  21414., 22152.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925., 48650., 50650., 51400., 50375., 51150., 53200., 54000.,
      62625., 63650., 65950., 67000., 65075., 66150., 68500., 69600.,
      77325., 78650., 81250., 82600., 79775., 81150., 83800., 85200.,
      92025., 93650., 96550., 98200., 94475., 96150., 99100., 100800.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      94885.,  95650.,  96415.,  97180.,  99580.,  100360., 101140., 101920.,
      124640., 125680., 126720., 127760., 130900., 131960., 133020., 134080.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      123760., 124880., 126000., 127120., 130180., 131320., 132460., 133600.,
      90655.,  91510.,  92365.,  93220.,  95470.,  96340.,  97210.,  98080.,
      113785., 114730., 115675., 116620., 119200., 120160., 121120., 122080.,
      148880., 150160., 151440., 152720., 156100., 157400., 158700., 160000.,
      182425., 184050., 185675., 187300., 191450., 193100., 194750., 196400.,
      187275., 188950., 190625., 192300., 196500., 198200., 199900., 201600.,
      146080., 147440., 148800., 150160., 153460., 154840., 156220., 157600.,
      106675., 107710., 108745., 109780., 112210., 113260., 114310., 115360.,
      77708.,  78536.,  79364.,  80192.,  82088.,  82928.,  83768.,  84608.,
      100640., 101760., 102880., 104000., 106480., 107616., 108752., 109888.,
      121980., 123400., 124820., 126240., 129280., 130720., 132160., 133600.,
      125060., 126520., 127980., 129440., 132520., 134000., 135480., 136960.,
      96352.,  97536.,  98720.,  99904.,  102320., 103520., 104720., 105920.,
      69428.,  70328.,  71228.,  72128.,  73904.,  74816.,  75728.,  76640.,
      46851.,  47526.,  48201.,  48876.,  50172.,  50856.,  51540.,  52224.,
      59712.,  60624.,  61536.,  62448.,  64140.,  65064.,  65988.,  66912.,
      71115.,  72270.,  73425.,  74580.,  76650.,  77820.,  78990.,  80160.,
      72825.,  74010.,  75195.,  76380.,  78480.,  79680.,  80880.,  82080.,
      54960.,  55920.,  56880.,  57840.,  59484.,  60456.,  61428.,  62400.,
      38697.,  39426.,  40155.,  40884.,  42090.,  42828.,  43566.,  44304.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      182425., 184050., 185675., 187300., 191450., 193100., 194750., 196400.,
      187275., 188950., 190625., 192300., 196500., 198200., 199900., 201600.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      94855.,  97180.,  99535.,  101920., 124660., 127760., 130900., 134080.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      123940., 127120., 130340., 133600., 90835.,  93220.,  95635.,  98080.,
      113935., 116620., 119335., 122080., 149140., 152720., 156340., 160000.,
      182825., 187300., 191825., 196400., 187725., 192300., 196925., 201600.,
      146500., 150160., 153860., 157600., 107035., 109780., 112555., 115360.,
      78020.,  80192.,  82388.,  84608.,  101104., 104000., 106928., 109888.,
      122620., 126240., 129900., 133600., 125740., 129440., 133180., 136960.,
      96944.,  99904.,  102896., 105920., 69908.,  72128.,  74372.,  76640.,
      47229.,  48876.,  50541.,  52224.,  60252.,  62448.,  64668.,  66912.,
      71835.,  74580.,  77355.,  80160.,  73575.,  76380.,  79215.,  82080.,
      55596.,  57840.,  60108.,  62400.,  39201.,  40884.,  42585.,  44304.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      182825., 187300., 191825., 196400., 187725., 192300., 196925., 201600.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,  44058.,  45642.,  45912.,  47523.,  47802.,  49440.,  49728.,
      60612.,  60984.,  63072.,  63456.,  65580.,  65976.,  68136.,  68544.,
      78375.,  78870.,  81450.,  81960.,  84585.,  85110.,  87780.,  88320.,
      86595.,  87150.,  89790.,  90360.,  93045.,  93630.,  96360.,  96960.,
      70404.,  70872.,  72960.,  73440.,  75564.,  76056.,  78216.,  78720.,
      53553.,  53922.,  55470.,  55848.,  57423.,  57810.,  59412.,  59808.,
      76156.,  76648.,  78664.,  79168.,  81220.,  81736.,  83824.,  84352.,
      103088., 103776., 106432., 107136., 109840., 110560., 113312., 114048.,
      130580., 131480., 134760., 135680., 139020., 139960., 143360., 144320.,
      139940., 140920., 144280., 145280., 148700., 149720., 153200., 154240.,
      112048., 112864., 115520., 116352., 119056., 119904., 122656., 123520.,
      83980.,  84616.,  86584.,  87232.,  89236.,  89896.,  91936.,  92608.,
      112595., 113390., 115790., 116600., 119045., 119870., 122360., 123200.,
      150300., 151400., 154560., 155680., 158900., 160040., 163320., 164480.,
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      156380., 157640., 160800., 162080., 165300., 166600., 169880., 171200.,
      115895., 116870., 119210., 120200., 122585., 123590., 126020., 127040.,
      150395., 151550., 154310., 155480., 158285., 159470., 162320., 163520.,
      198780., 200360., 204000., 205600., 209300., 210920., 214680., 216320.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.,
      201020., 202760., 206400., 208160., 211860., 213640., 217400., 219200.,
      147935., 149270., 151970., 153320., 156065., 157430., 160220., 161600.,
      188195., 189710., 192830., 194360., 197525., 199070., 202280., 203840.,
      247260., 249320., 253440., 255520., 259700., 261800., 266040., 268160.,
      304225., 306850., 311950., 314600., 319775., 322450., 327700., 330400.,
      313925., 316650., 321850., 324600., 329875., 332650., 338000., 340800.,
      245660., 247880., 252000., 254240., 258420., 260680., 264920., 267200.,
      179975., 181670., 184730., 186440., 189545., 191270., 194420., 196160.,
      225995., 227870., 231350., 233240., 236765., 238670., 242240., 244160.,
      295740., 298280., 302880., 305440., 310100., 312680., 317400., 320000.,
      362425., 365650., 371350., 374600., 380375., 383650., 389500., 392800.,
      372125., 375450., 381250., 384600., 390475., 393850., 399800., 403200.,
      290300., 293000., 297600., 300320., 304980., 307720., 312440., 315200.,
      212015., 214070., 217490., 219560., 223025., 225110., 228620., 230720.,
      154396., 156040., 158728., 160384., 163108., 164776., 167536., 169216.,
      199984., 202208., 205760., 208000., 211600., 213856., 217504., 219776.,
      242420., 245240., 249640., 252480., 256940., 259800., 264320., 267200.,
      248580., 251480., 255960., 258880., 263420., 266360., 270960., 273920.,
      191536., 193888., 197440., 199808., 203408., 205792., 209440., 211840.,
      138028., 139816., 142456., 144256., 146932., 148744., 151456., 153280.,
      93117.,  94458.,  96402.,  97752.,  99723.,  101082., 103080., 104448.,
      118692., 120504., 123072., 124896., 127500., 129336., 131976., 133824.,
      141375., 143670., 146850., 149160., 152385., 154710., 157980., 160320.,
      144795., 147150., 150390., 152760., 156045., 158430., 161760., 164160.,
      109284., 111192., 113760., 115680., 118284., 120216., 122856., 124800.,
      76953.,  78402.,  80310.,  81768.,  83703.,  85170.,  87132.,  88608.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825., 189250., 193150., 194600., 198575., 200050., 204100., 205600.,
      197525., 199050., 203050., 204600., 208675., 210250., 214400., 216000.,
      246025., 248050., 252550., 254600., 259175., 261250., 265900., 268000.,
      255725., 257850., 262450., 264600., 269275., 271450., 276200., 278400.,
      304225., 306850., 311950., 314600., 319775., 322450., 327700., 330400.,
      313925., 316650., 321850., 324600., 329875., 332650., 338000., 340800.,
      362425., 365650., 371350., 374600., 380375., 383650., 389500., 392800.,
      372125., 375450., 381250., 384600., 390475., 393850., 399800., 403200.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,  87594.,  87855.,  88116.,  91014.,  91284.,  91554.,  91824.,
      94767.,  95046.,  95325.,  95604.,  98592.,  98880.,  99168.,  99456.,
      120852., 121224., 121596., 121968., 125760., 126144., 126528., 126912.,
      130764., 131160., 131556., 131952., 135864., 136272., 136680., 137088.,
      156255., 156750., 157245., 157740., 162390., 162900., 163410., 163920.,
      168645., 169170., 169695., 170220., 175020., 175560., 176100., 176640.,
      172635., 173190., 173745., 174300., 179010., 179580., 180150., 180720.,
      185505., 186090., 186675., 187260., 192120., 192720., 193320., 193920.,
      140340., 140808., 141276., 141744., 145440., 145920., 146400., 146880.,
      150636., 151128., 151620., 152112., 155928., 156432., 156936., 157440.,
      106737., 107106., 107475., 107844., 110562., 110940., 111318., 111696.,
      114459., 114846., 115233., 115620., 118428., 118824., 119220., 119616.,
      151820., 152312., 152804., 153296., 156824., 157328., 157832., 158336.,
      161924., 162440., 162956., 163472., 167120., 167648., 168176., 168704.,
      205488., 206176., 206864., 207552., 212160., 212864., 213568., 214272.,
      218960., 219680., 220400., 221120., 225888., 226624., 227360., 228096.,
      260260., 261160., 262060., 262960., 268600., 269520., 270440., 271360.,
      277100., 278040., 278980., 279920., 285760., 286720., 287680., 288640.,
      278900., 279880., 280860., 281840., 287560., 288560., 289560., 290560.,
      296380., 297400., 298420., 299440., 305360., 306400., 307440., 308480.,
      223280., 224096., 224912., 225728., 230208., 231040., 231872., 232704.,
      237264., 238112., 238960., 239808., 244448., 245312., 246176., 247040.,
      167324., 167960., 168596., 169232., 172520., 173168., 173816., 174464.,
      177812., 178472., 179132., 179792., 183200., 183872., 184544., 185216.,
      224395., 225190., 225985., 226780., 230770., 231580., 232390., 233200.,
      237265., 238090., 238915., 239740., 243880., 244720., 245560., 246400.,
      299500., 300600., 301700., 302800., 308000., 309120., 310240., 311360.,
      316660., 317800., 318940., 320080., 325480., 326640., 327800., 328960.,
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      311500., 312760., 314020., 315280., 320320., 321600., 322880., 324160.,
      329300., 330600., 331900., 333200., 338440., 339760., 341080., 342400.,
      230815., 231790., 232765., 233740., 237430., 238420., 239410., 240400.,
      244165., 245170., 246175., 247180., 251020., 252040., 253060., 254080.,
      299635., 300790., 301945., 303100., 307450., 308620., 309790., 310960.,
      315385., 316570., 317755., 318940., 323440., 324640., 325840., 327040.,
      395980., 397560., 399140., 400720., 406400., 408000., 409600., 411200.,
      416980., 418600., 420220., 421840., 427720., 429360., 431000., 432640.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.,
      400300., 402040., 403780., 405520., 411040., 412800., 414560., 416320.,
      421940., 423720., 425500., 427280., 433000., 434800., 436600., 438400.,
      294535., 295870., 297205., 298540., 302590., 303940., 305290., 306640.,
      310765., 312130., 313495., 314860., 319060., 320440., 321820., 323200.,
      374875., 376390., 377905., 379420., 384130., 385660., 387190., 388720.,
      393505., 395050., 396595., 398140., 403000., 404560., 406120., 407680.,
      492460., 494520., 496580., 498640., 504800., 506880., 508960., 511040.,
      517300., 519400., 521500., 523600., 529960., 532080., 534200., 536320.,
      605825., 608450., 611075., 613700., 621250., 623900., 626550., 629200.,
      636875., 639550., 642225., 644900., 652700., 655400., 658100., 660800.,
      625125., 627850., 630575., 633300., 640950., 643700., 646450., 649200.,
      656975., 659750., 662525., 665300., 673200., 676000., 678800., 681600.,
      489100., 491320., 493540., 495760., 501760., 504000., 506240., 508480.,
      514580., 516840., 519100., 521360., 527560., 529840., 532120., 534400.,
      358255., 359950., 361645., 363340., 367750., 369460., 371170., 372880.,
      377365., 379090., 380815., 382540., 387100., 388840., 390580., 392320.,
      450115., 451990., 453865., 455740., 460810., 462700., 464590., 466480.,
      471625., 473530., 475435., 477340., 482560., 484480., 486400., 488320.,
      588940., 591480., 594020., 596560., 603200., 605760., 608320., 610880.,
      617620., 620200., 622780., 625360., 632200., 634800., 637400., 640000.,
      721625., 724850., 728075., 731300., 739450., 742700., 745950., 749200.,
      757475., 760750., 764025., 767300., 775700., 779000., 782300., 785600.,
      740925., 744250., 747575., 750900., 759150., 762500., 765850., 769200.,
      777575., 780950., 784325., 787700., 796200., 799600., 803000., 806400.,
      577900., 580600., 583300., 586000., 592480., 595200., 597920., 600640.,
      607220., 609960., 612700., 615440., 622120., 624880., 627640., 630400.,
      421975., 424030., 426085., 428140., 432910., 434980., 437050., 439120.,
      443965., 446050., 448135., 450220., 455140., 457240., 459340., 461440.,
      307148., 308792., 310436., 312080., 315800., 317456., 319112., 320768.,
      324548., 326216., 327884., 329552., 333392., 335072., 336752., 338432.,
      397744., 399968., 402192., 404416., 409280., 411520., 413760., 416000.,
      420944., 423200., 425456., 427712., 432736., 435008., 437280., 439552.,
      482020., 484840., 487660., 490480., 496440., 499280., 502120., 504960.,
      511020., 513880., 516740., 519600., 525760., 528640., 531520., 534400.,
      494260., 497160., 500060., 502960., 509000., 511920., 514840., 517760.,
      523900., 526840., 529780., 532720., 538960., 541920., 544880., 547840.,
      380720., 383072., 385424., 387776., 392512., 394880., 397248., 399616.,
      404432., 406816., 409200., 411584., 416480., 418880., 421280., 423680.,
      274268., 276056., 277844., 279632., 283112., 284912., 286712., 288512.,
      292052., 293864., 295676., 297488., 301088., 302912., 304736., 306560.,
      184893., 186234., 187575., 188916., 191454., 192804., 194154., 195504.,
      198087., 199446., 200805., 202164., 204792., 206160., 207528., 208896.,
      235572., 237384., 239196., 241008., 244320., 246144., 247968., 249792.,
      253164., 255000., 256836., 258672., 262104., 263952., 265800., 267648.,
      280455., 282750., 285045., 287340., 291390., 293700., 296010., 298320.,
      302445., 304770., 307095., 309420., 313620., 315960., 318300., 320640.,
      287235., 289590., 291945., 294300., 298410., 300780., 303150., 305520.,
      309705., 312090., 314475., 316860., 321120., 323520., 325920., 328320.,
      216660., 218568., 220476., 222384., 225600., 227520., 229440., 231360.,
      234636., 236568., 238500., 240432., 243768., 245712., 247656., 249600.,
      152457., 153906., 155355., 156804., 159162., 160620., 162078., 163536.,
      165939., 167406., 168873., 170340., 172788., 174264., 175740., 177216.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225., 375650., 377075., 378500., 384850., 386300., 387750., 389200.,
      395675., 397150., 398625., 400100., 406700., 408200., 409700., 411200.,
      393525., 395050., 396575., 398100., 404550., 406100., 407650., 409200.,
      415775., 417350., 418925., 420500., 427200., 428800., 430400., 432000.,
      490025., 492050., 494075., 496100., 503050., 505100., 507150., 509200.,
      516275., 518350., 520425., 522500., 529700., 531800., 533900., 536000.,
      509325., 511450., 513575., 515700., 522750., 524900., 527050., 529200.,
      536375., 538550., 540725., 542900., 550200., 552400., 554600., 556800.,
      605825., 608450., 611075., 613700., 621250., 623900., 626550., 629200.,
      636875., 639550., 642225., 644900., 652700., 655400., 658100., 660800.,
      625125., 627850., 630575., 633300., 640950., 643700., 646450., 649200.,
      656975., 659750., 662525., 665300., 673200., 676000., 678800., 681600.,
      721625., 724850., 728075., 731300., 739450., 742700., 745950., 749200.,
      757475., 760750., 764025., 767300., 775700., 779000., 782300., 785600.,
      740925., 744250., 747575., 750900., 759150., 762500., 765850., 769200.,
      777575., 780950., 784325., 787700., 796200., 799600., 803000., 806400.};
  const std::array<int, 4> in_shape = {{1, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080., 3350., 3620.,  2920.,  2205.,  3008.,
      4048.,  5100.,  5410., 5720., 4560.,  3404.,  4420.,  5880.,
      7325.,  7650.,  7975., 6300., 4660.,  5890.,  7770.,  9600.,
      9925.,  10250., 8050., 5920., 7360.,  9660.,  11875., 12200.,
      12525., 9800.,  7180., 8830., 11550., 14150., 14475., 14800.,
      11550., 8440.,  6122., 7936., 9630.,  9840.,  10050., 7760.,
      5606.,  3780.,  4834., 5780., 5900.,  6020.,  4570.,  3240.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {7325.,  7650.,  7975.,  9600.,
                                         9925.,  10250., 11875., 12200.,
                                         12525., 14150., 14475., 14800.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 17105., 17660.,
      22350., 23100., 27350., 28300., 27975., 28950., 28600., 29600., 22290.,
      23100., 16265., 16880., 11758., 12244., 15216., 15872., 18430., 19260.,
      18830., 19680., 19230., 20100., 14816., 15520., 10678., 11212., 7164.,
      7560.,  9134.,  9668.,  10885., 11560., 11110., 11800., 11335., 12040.,
      8570.,  9140.,  6048.,  6480.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200.,
      19225., 19850., 19850., 20500., 22975., 23750., 23600., 24400.,
      24225., 25050., 27350., 28300., 27975., 28950., 28600., 29600.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,  6858.,  6939.,  7020.,  9274.,  9388.,  9502.,  9616.,  11870.,
      12020., 12170., 12320., 12905., 13070., 13235., 13400., 13940., 14120.,
      14300., 14480., 11230., 11380., 11530., 11680., 8469.,  8586.,  8703.,
      8820.,  11582., 11732., 11882., 12032., 15568., 15776., 15984., 16192.,
      19590., 19860., 20130., 20400., 20770., 21060., 21350., 21640., 21950.,
      22260., 22570., 22880., 17472., 17728., 17984., 18240., 13022., 13220.,
      13418., 13616., 16960., 17200., 17440., 17680., 22530., 22860., 23190.,
      23520., 28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600.,
      30475., 30950., 31425., 31900., 24030., 24420., 24810., 25200., 17740.,
      18040., 18340., 18640., 22525., 22870., 23215., 23560., 29670., 30140.,
      30610., 31080., 36600., 37200., 37800., 38400., 37825., 38450., 39075.,
      39700., 39050., 39700., 40350., 41000., 30610., 31140., 31670., 32200.,
      22465., 22870., 23275., 23680., 28090., 28540., 28990., 29440., 36810.,
      37420., 38030., 38640., 45175., 45950., 46725., 47500., 46400., 47200.,
      48000., 48800., 47625., 48450., 49275., 50100., 37190., 37860., 38530.,
      39200., 27190., 27700., 28210., 28720., 33655., 34210., 34765., 35320.,
      43950., 44700., 45450., 46200., 53750., 54700., 55650., 56600., 54975.,
      55950., 56925., 57900., 56200., 57200., 58200., 59200., 43770., 44580.,
      45390., 46200., 31915., 32530., 33145., 33760., 23030., 23516., 24002.,
      24488., 29776., 30432., 31088., 31744., 36030., 36860., 37690., 38520.,
      36810., 37660., 38510., 39360., 37590., 38460., 39330., 40200., 28928.,
      29632., 30336., 31040., 20822., 21356., 21890., 22424., 13932., 14328.,
      14724., 15120., 17734., 18268., 18802., 19336., 21095., 21770., 22445.,
      23120., 21530., 22220., 22910., 23600., 21965., 22670., 23375., 24080.,
      16570., 17140., 17710., 18280., 11664., 12096., 12528., 12960.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025., 28450., 28875., 29300., 29250., 29700., 30150., 30600.,
      30475., 30950., 31425., 31900., 36600., 37200., 37800., 38400.,
      37825., 38450., 39075., 39700., 39050., 39700., 40350., 41000.,
      45175., 45950., 46725., 47500., 46400., 47200., 48000., 48800.,
      47625., 48450., 49275., 50100., 53750., 54700., 55650., 56600.,
      54975., 55950., 56925., 57900., 56200., 57200., 58200., 59200.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,  7020.,  8956.,  9616.,  11495., 12320., 12545., 13400., 13595.,
      14480., 10972., 11680., 8289.,  8820.,  11348., 12032., 15280., 16192.,
      19260., 20400., 20460., 21640., 21660., 22880., 17264., 18240., 12884.,
      13616., 16795., 17680., 22340., 23520., 27825., 29300., 29075., 30600.,
      30325., 31900., 23940., 25200., 17695., 18640., 22465., 23560., 29620.,
      31080., 36575., 38400., 37825., 39700., 39075., 41000., 30660., 32200.,
      22525., 23680., 28135., 29440., 36900., 38640., 45325., 47500., 46575.,
      48800., 47825., 50100., 37380., 39200., 27355., 28720., 33805., 35320.,
      44180., 46200., 54075., 56600., 55325., 57900., 56575., 59200., 44100.,
      46200., 32185., 33760., 23252., 24488., 30096., 31744., 36460., 38520.,
      37260., 39360., 38060., 40200., 29328., 31040., 21140., 22424., 14175.,
      15120., 18076., 19336., 21545., 23120., 21995., 23600., 22445., 24080.,
      16972., 18280., 11979., 12960.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825., 29300., 29075., 30600., 30325., 31900., 36575., 38400.,
      37825., 39700., 39075., 41000., 45325., 47500., 46575., 48800.,
      47825., 50100., 54075., 56600., 55325., 57900., 56575., 59200.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897.,  13050.,  13878.,  14040.,  17696.,  17912.,  19004.,  19232.,
      22705.,  22990.,  24340.,  24640.,  24775.,  25090.,  26470.,  26800.,
      26845.,  27190.,  28600.,  28960.,  21656.,  21944.,  23060.,  23360.,
      16353.,  16578.,  17406.,  17640.,  22408.,  22696.,  23764.,  24064.,
      30160.,  30560.,  31968.,  32384.,  38000.,  38520.,  40260.,  40800.,
      40360.,  40920.,  42700.,  43280.,  42720.,  43320.,  45140.,  45760.,
      34032.,  34528.,  35968.,  36480.,  25384.,  25768.,  26836.,  27232.,
      33125.,  33590.,  34880.,  35360.,  44040.,  44680.,  46380.,  47040.,
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  47120.,  47880.,  49620.,  50400.,
      34805.,  35390.,  36680.,  37280.,  44255.,  44930.,  46430.,  47120.,
      58320.,  59240.,  61220.,  62160.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      60280.,  61320.,  63340.,  64400.,  44255.,  45050.,  46550.,  47360.,
      55385.,  56270.,  57980.,  58880.,  72600.,  73800.,  76060.,  77280.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 73440.,  74760.,  77060.,  78400.,
      53705.,  54710.,  56420.,  57440.,  66515.,  67610.,  69530.,  70640.,
      86880.,  88360.,  90900.,  92400.,  106275., 108150., 111300., 113200.,
      108725., 110650., 113850., 115800., 111175., 113150., 116400., 118400.,
      86600.,  88200.,  90780.,  92400.,  63155.,  64370.,  66290.,  67520.,
      45544.,  46504.,  48004.,  48976.,  58896.,  60192.,  62176.,  63488.,
      71280.,  72920.,  75380.,  77040.,  72840.,  74520.,  77020.,  78720.,
      74400.,  76120.,  78660.,  80400.,  57264.,  58656.,  60672.,  62080.,
      41224.,  42280.,  43780.,  44848.,  27567.,  28350.,  29448.,  30240.,
      35096.,  36152.,  37604.,  38672.,  41755.,  43090.,  44890.,  46240.,
      42625.,  43990.,  45820.,  47200.,  43495.,  44890.,  46750.,  48160.,
      32816.,  33944.,  35420.,  36560.,  23103.,  23958.,  25056.,  25920.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 106275., 108150., 111300., 113200.,
      108725., 110650., 113850., 115800., 111175., 113150., 116400., 118400.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      109885., 110770., 111655., 112540., 115060., 115960., 116860., 117760.,
      144000., 145200., 146400., 147600., 150900., 152120., 153340., 154560.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      145560., 146880., 148200., 149520., 152780., 154120., 155460., 156800.,
      106405., 107410., 108415., 109420., 111820., 112840., 113860., 114880.,
      131935., 133030., 134125., 135220., 137950., 139060., 140170., 141280.,
      172280., 173760., 175240., 176720., 180300., 181800., 183300., 184800.,
      210675., 212550., 214425., 216300., 220700., 222600., 224500., 226400.,
      215525., 217450., 219375., 221300., 225750., 227700., 229650., 231600.,
      220375., 222350., 224325., 226300., 230800., 232800., 234800., 236800.,
      171600., 173200., 174800., 176400., 179940., 181560., 183180., 184800.,
      125095., 126310., 127525., 128740., 131350., 132580., 133810., 135040.,
      90128.,  91088.,  92048.,  93008.,  95036.,  96008.,  96980.,  97952.,
      116496., 117792., 119088., 120384., 123040., 124352., 125664., 126976.,
      140920., 142560., 144200., 145840., 149100., 150760., 152420., 154080.,
      144000., 145680., 147360., 149040., 152340., 154040., 155740., 157440.,
      147080., 148800., 150520., 152240., 155580., 157320., 159060., 160800.,
      113136., 114528., 115920., 117312., 119936., 121344., 122752., 124160.,
      81392.,  82448.,  83504.,  84560.,  86492.,  87560.,  88628.,  89696.,
      54351.,  55134.,  55917.,  56700.,  58104.,  58896.,  59688.,  60480.,
      69136.,  70192.,  71248.,  72304.,  74140.,  75208.,  76276.,  77344.,
      82175.,  83510.,  84845.,  86180.,  88430.,  89780.,  91130.,  92480.,
      83885.,  85250.,  86615.,  87980.,  90260.,  91640.,  93020.,  94400.,
      85595.,  86990.,  88385.,  89780.,  92090.,  93500.,  94910.,  96320.,
      64504.,  65632.,  66760.,  67888.,  69700.,  70840.,  71980.,  73120.,
      45351.,  46206.,  47061.,  47916.,  49248.,  50112.,  50976.,  51840.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      210675., 212550., 214425., 216300., 220700., 222600., 224500., 226400.,
      215525., 217450., 219375., 221300., 225750., 227700., 229650., 231600.,
      220375., 222350., 224325., 226300., 230800., 232800., 234800., 236800.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      109975., 112540., 115135., 117760., 144180., 147600., 151060., 154560.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 145940., 149520., 153140., 156800.,
      106735., 109420., 112135., 114880., 132235., 135220., 138235., 141280.,
      172740., 176720., 180740., 184800., 211325., 216300., 221325., 226400.,
      216225., 221300., 226425., 231600., 221125., 226300., 231525., 236800.,
      172260., 176400., 180580., 184800., 125635., 128740., 131875., 135040.,
      90572.,  93008.,  95468.,  97952.,  117136., 120384., 123664., 126976.,
      141780., 145840., 149940., 154080., 144900., 149040., 153220., 157440.,
      148020., 152240., 156500., 160800., 113936., 117312., 120720., 124160.,
      82028.,  84560.,  87116.,  89696.,  54837.,  56700.,  58581.,  60480.,
      69820.,  72304.,  74812.,  77344.,  83075.,  86180.,  89315.,  92480.,
      84815.,  87980.,  91175.,  94400.,  86555.,  89780.,  93035.,  96320.,
      65308.,  67888.,  70492.,  73120.,  45981.,  47916.,  49869.,  51840.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 211325., 216300., 221325., 226400.,
      216225., 221300., 226425., 231600., 221125., 226300., 231525., 236800.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,  50274.,  51894.,  52200.,  53847.,  54162.,  55836.,  56160.,
      68660.,  69080.,  71216.,  71648.,  73820.,  74264.,  76472.,  76928.,
      88195.,  88750.,  91390.,  91960.,  94645.,  95230.,  97960.,  98560.,
      96415.,  97030.,  99730.,  100360., 103105., 103750., 106540., 107200.,
      104635., 105310., 108070., 108760., 111565., 112270., 115120., 115840.,
      84452.,  85016.,  87200.,  87776.,  89996.,  90584.,  92840.,  93440.,
      63801.,  64242.,  65862.,  66312.,  67959.,  68418.,  70092.,  70560.,
      87556.,  88120.,  90208.,  90784.,  92908.,  93496.,  95656.,  96256.,
      117904., 118688., 121440., 122240., 125040., 125856., 128704., 129536.,
      148620., 149640., 153040., 154080., 157540., 158600., 162120., 163200.,
      157980., 159080., 162560., 163680., 167220., 168360., 171960., 173120.,
      167340., 168520., 172080., 173280., 176900., 178120., 181800., 183040.,
      133328., 134304., 137120., 138112., 140976., 141984., 144896., 145920.,
      99460.,  100216., 102304., 103072., 105196., 105976., 108136., 108928.,
      129995., 130910., 133430., 134360., 136925., 137870., 140480., 141440.,
      172860., 174120., 177440., 178720., 182100., 183400., 186840., 188160.,
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      185100., 186600., 190000., 191520., 194980., 196520., 200040., 201600.,
      136715., 137870., 140390., 141560., 144125., 145310., 147920., 149120.,
      174095., 175430., 178370., 179720., 182705., 184070., 187100., 188480.,
      229420., 231240., 235120., 236960., 240900., 242760., 246760., 248640.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.,
      237180., 239240., 243200., 245280., 249300., 251400., 255480., 257600.,
      174095., 175670., 178610., 180200., 183185., 184790., 187820., 189440.,
      218195., 219950., 223310., 225080., 228485., 230270., 233720., 235520.,
      285980., 288360., 292800., 295200., 299700., 302120., 306680., 309120.,
      351025., 354050., 359550., 362600., 368175., 371250., 376900., 380000.,
      360725., 363850., 369450., 372600., 378275., 381450., 387200., 390400.,
      370425., 373650., 379350., 382600., 388375., 391650., 397500., 400800.,
      289260., 291880., 296400., 299040., 303620., 306280., 310920., 313600.,
      211475., 213470., 216830., 218840., 222245., 224270., 227720., 229760.,
      262295., 264470., 268250., 270440., 274265., 276470., 280340., 282560.,
      342540., 345480., 350480., 353440., 358500., 361480., 366600., 369600.,
      418925., 422650., 428850., 432600., 438875., 442650., 449000., 452800.,
      428625., 432450., 438750., 442600., 448975., 452850., 459300., 463200.,
      438325., 442250., 448650., 452600., 459075., 463050., 469600., 473600.,
      341340., 344520., 349600., 352800., 357940., 361160., 366360., 369600.,
      248855., 251270., 255050., 257480., 261305., 263750., 267620., 270080.,
      179236., 181144., 184096., 186016., 189004., 190936., 193960., 195904.,
      231696., 234272., 238176., 240768., 244720., 247328., 251328., 253952.,
      280300., 283560., 288400., 291680., 296580., 299880., 304840., 308160.,
      286460., 289800., 294720., 298080., 303060., 306440., 311480., 314880.,
      292620., 296040., 301040., 304480., 309540., 313000., 318120., 321600.,
      225104., 227872., 231840., 234624., 238640., 241440., 245504., 248320.,
      161956., 164056., 167008., 169120., 172108., 174232., 177256., 179392.,
      108117., 109674., 111834., 113400., 115587., 117162., 119376., 120960.,
      137540., 139640., 142496., 144608., 147500., 149624., 152552., 154688.,
      163495., 166150., 169690., 172360., 175945., 178630., 182260., 184960.,
      166915., 169630., 173230., 175960., 179605., 182350., 186040., 188800.,
      170335., 173110., 176770., 179560., 183265., 186070., 189820., 192640.,
      128372., 130616., 133520., 135776., 138716., 140984., 143960., 146240.,
      90261.,  91962.,  94122.,  95832.,  98019.,  99738.,  101952., 103680.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225., 216850., 220950., 222600., 226775., 228450., 232700., 234400.,
      224925., 226650., 230850., 232600., 236875., 238650., 243000., 244800.,
      234625., 236450., 240750., 242600., 246975., 248850., 253300., 255200.,
      283125., 285450., 290250., 292600., 297475., 299850., 304800., 307200.,
      292825., 295250., 300150., 302600., 307575., 310050., 315100., 317600.,
      302525., 305050., 310050., 312600., 317675., 320250., 325400., 328000.,
      351025., 354050., 359550., 362600., 368175., 371250., 376900., 380000.,
      360725., 363850., 369450., 372600., 378275., 381450., 387200., 390400.,
      370425., 373650., 379350., 382600., 388375., 391650., 397500., 400800.,
      418925., 422650., 428850., 432600., 438875., 442650., 449000., 452800.,
      428625., 432450., 438750., 442600., 448975., 452850., 459300., 463200.,
      438325., 442250., 448650., 452600., 459075., 463050., 469600., 473600.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,  99954.,  100251., 100548., 103482., 103788., 104094., 104400.,
      107379., 107694., 108009., 108324., 111348., 111672., 111996., 112320.,
      136900., 137320., 137740., 138160., 142000., 142432., 142864., 143296.,
      147196., 147640., 148084., 148528., 152488., 152944., 153400., 153856.,
      175835., 176390., 176945., 177500., 182210., 182780., 183350., 183920.,
      188705., 189290., 189875., 190460., 195320., 195920., 196520., 197120.,
      192215., 192830., 193445., 194060., 198830., 199460., 200090., 200720.,
      205565., 206210., 206855., 207500., 212420., 213080., 213740., 214400.,
      208595., 209270., 209945., 210620., 215450., 216140., 216830., 217520.,
      222425., 223130., 223835., 224540., 229520., 230240., 230960., 231680.,
      168340., 168904., 169468., 170032., 173824., 174400., 174976., 175552.,
      179404., 179992., 180580., 181168., 185080., 185680., 186280., 186880.,
      127161., 127602., 128043., 128484., 131274., 131724., 132174., 132624.,
      135459., 135918., 136377., 136836., 139716., 140184., 140652., 141120.,
      174548., 175112., 175676., 176240., 179840., 180416., 180992., 181568.,
      185228., 185816., 186404., 186992., 190712., 191312., 191912., 192512.,
      235024., 235808., 236592., 237376., 242080., 242880., 243680., 244480.,
      249264., 250080., 250896., 251712., 256576., 257408., 258240., 259072.,
      296220., 297240., 298260., 299280., 305040., 306080., 307120., 308160.,
      314020., 315080., 316140., 317200., 323160., 324240., 325320., 326400.,
      314860., 315960., 317060., 318160., 324000., 325120., 326240., 327360.,
      333300., 334440., 335580., 336720., 342760., 343920., 345080., 346240.,
      333500., 334680., 335860., 337040., 342960., 344160., 345360., 346560.,
      352580., 353800., 355020., 356240., 362360., 363600., 364840., 366080.,
      265680., 266656., 267632., 268608., 273248., 274240., 275232., 276224.,
      280944., 281952., 282960., 283968., 288768., 289792., 290816., 291840.,
      198164., 198920., 199676., 200432., 203840., 204608., 205376., 206144.,
      209612., 210392., 211172., 211952., 215480., 216272., 217064., 217856.,
      259075., 259990., 260905., 261820., 265930., 266860., 267790., 268720.,
      272905., 273850., 274795., 275740., 280000., 280960., 281920., 282880.,
      344460., 345720., 346980., 348240., 353600., 354880., 356160., 357440.,
      362900., 364200., 365500., 366800., 372360., 373680., 375000., 376320.,
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      368700., 370200., 371700., 373200., 378480., 380000., 381520., 383040.,
      388420., 389960., 391500., 393040., 398520., 400080., 401640., 403200.,
      272275., 273430., 274585., 275740., 279610., 280780., 281950., 283120.,
      287065., 288250., 289435., 290620., 294640., 295840., 297040., 298240.,
      346855., 348190., 349525., 350860., 355390., 356740., 358090., 359440.,
      364045., 365410., 366775., 368140., 372820., 374200., 375580., 376960.,
      457020., 458840., 460660., 462480., 468400., 470240., 472080., 473920.,
      479940., 481800., 483660., 485520., 491640., 493520., 495400., 497280.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.,
      472300., 474360., 476420., 478480., 484320., 486400., 488480., 490560.,
      496500., 498600., 500700., 502800., 508840., 510960., 513080., 515200.,
      346615., 348190., 349765., 351340., 355630., 357220., 358810., 360400.,
      364765., 366370., 367975., 369580., 374020., 375640., 377260., 378880.,
      434635., 436390., 438145., 439900., 444850., 446620., 448390., 450160.,
      455185., 456970., 458755., 460540., 465640., 467440., 469240., 471040.,
      569580., 571960., 574340., 576720., 583200., 585600., 588000., 590400.,
      596980., 599400., 601820., 604240., 610920., 613360., 615800., 618240.,
      699025., 702050., 705075., 708100., 716050., 719100., 722150., 725200.,
      733275., 736350., 739425., 742500., 750700., 753800., 756900., 760000.,
      718325., 721450., 724575., 727700., 735750., 738900., 742050., 745200.,
      753375., 756550., 759725., 762900., 771200., 774400., 777600., 780800.,
      737625., 740850., 744075., 747300., 755450., 758700., 761950., 765200.,
      773475., 776750., 780025., 783300., 791700., 795000., 798300., 801600.,
      575900., 578520., 581140., 583760., 590160., 592800., 595440., 598080.,
      604580., 607240., 609900., 612560., 619160., 621840., 624520., 627200.,
      420955., 422950., 424945., 426940., 431650., 433660., 435670., 437680.,
      442465., 444490., 446515., 448540., 453400., 455440., 457480., 459520.,
      522415., 524590., 526765., 528940., 534310., 536500., 538690., 540880.,
      546325., 548530., 550735., 552940., 558460., 560680., 562900., 565120.,
      682140., 685080., 688020., 690960., 698000., 700960., 703920., 706880.,
      714020., 717000., 719980., 722960., 730200., 733200., 736200., 739200.,
      834125., 837850., 841575., 845300., 853950., 857700., 861450., 865200.,
      873975., 877750., 881525., 885300., 894200., 898000., 901800., 905600.,
      853425., 857250., 861075., 864900., 873650., 877500., 881350., 885200.,
      894075., 897950., 901825., 905700., 914700., 918600., 922500., 926400.,
      872725., 876650., 880575., 884500., 893350., 897300., 901250., 905200.,
      914175., 918150., 922125., 926100., 935200., 939200., 943200., 947200.,
      679500., 682680., 685860., 689040., 696000., 699200., 702400., 705600.,
      712660., 715880., 719100., 722320., 729480., 732720., 735960., 739200.,
      495295., 497710., 500125., 502540., 507670., 510100., 512530., 514960.,
      520165., 522610., 525055., 527500., 532780., 535240., 537700., 540160.,
      356564., 358472., 360380., 362288., 366272., 368192., 370112., 372032.,
      376076., 378008., 379940., 381872., 385976., 387920., 389864., 391808.,
      460816., 463392., 465968., 468544., 473760., 476352., 478944., 481536.,
      486832., 489440., 492048., 494656., 500032., 502656., 505280., 507904.,
      557340., 560600., 563860., 567120., 573520., 576800., 580080., 583360.,
      589860., 593160., 596460., 599760., 606360., 609680., 613000., 616320.,
      569580., 572920., 576260., 579600., 586080., 589440., 592800., 596160.,
      602740., 606120., 609500., 612880., 619560., 622960., 626360., 629760.,
      581820., 585240., 588660., 592080., 598640., 602080., 605520., 608960.,
      615620., 619080., 622540., 626000., 632760., 636240., 639720., 643200.,
      447440., 450208., 452976., 455744., 460896., 463680., 466464., 469248.,
      474480., 477280., 480080., 482880., 488192., 491008., 493824., 496640.,
      321812., 323912., 326012., 328112., 331904., 334016., 336128., 338240.,
      342092., 344216., 346340., 348464., 352376., 354512., 356648., 358784.,
      214677., 216234., 217791., 219348., 222102., 223668., 225234., 226800.,
      229599., 231174., 232749., 234324., 237168., 238752., 240336., 241920.,
      272980., 275080., 277180., 279280., 282880., 284992., 287104., 289216.,
      292876., 295000., 297124., 299248., 302968., 305104., 307240., 309376.,
      324335., 326990., 329645., 332300., 336710., 339380., 342050., 344720.,
      349205., 351890., 354575., 357260., 361820., 364520., 367220., 369920.,
      331115., 333830., 336545., 339260., 343730., 346460., 349190., 351920.,
      356465., 359210., 361955., 364700., 369320., 372080., 374840., 377600.,
      337895., 340670., 343445., 346220., 350750., 353540., 356330., 359120.,
      363725., 366530., 369335., 372140., 376820., 379640., 382460., 385280.,
      254500., 256744., 258988., 261232., 264784., 267040., 269296., 271552.,
      275164., 277432., 279700., 281968., 285640., 287920., 290200., 292480.,
      178821., 180522., 182223., 183924., 186534., 188244., 189954., 191664.,
      194319., 196038., 197757., 199476., 202176., 203904., 205632., 207360.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825., 430450., 432075., 433700., 440250., 441900., 443550., 445200.,
      451875., 453550., 455225., 456900., 463700., 465400., 467100., 468800.,
      448125., 449850., 451575., 453300., 459950., 461700., 463450., 465200.,
      471975., 473750., 475525., 477300., 484200., 486000., 487800., 489600.,
      467425., 469250., 471075., 472900., 479650., 481500., 483350., 485200.,
      492075., 493950., 495825., 497700., 504700., 506600., 508500., 510400.,
      563925., 566250., 568575., 570900., 578150., 580500., 582850., 585200.,
      592575., 594950., 597325., 599700., 607200., 609600., 612000., 614400.,
      583225., 585650., 588075., 590500., 597850., 600300., 602750., 605200.,
      612675., 615150., 617625., 620100., 627700., 630200., 632700., 635200.,
      602525., 605050., 607575., 610100., 617550., 620100., 622650., 625200.,
      632775., 635350., 637925., 640500., 648200., 650800., 653400., 656000.,
      699025., 702050., 705075., 708100., 716050., 719100., 722150., 725200.,
      733275., 736350., 739425., 742500., 750700., 753800., 756900., 760000.,
      718325., 721450., 724575., 727700., 735750., 738900., 742050., 745200.,
      753375., 756550., 759725., 762900., 771200., 774400., 777600., 780800.,
      737625., 740850., 744075., 747300., 755450., 758700., 761950., 765200.,
      773475., 776750., 780025., 783300., 791700., 795000., 798300., 801600.,
      834125., 837850., 841575., 845300., 853950., 857700., 861450., 865200.,
      873975., 877750., 881525., 885300., 894200., 898000., 901800., 905600.,
      853425., 857250., 861075., 864900., 873650., 877500., 881350., 885200.,
      894075., 897950., 901825., 905700., 914700., 918600., 922500., 926400.,
      872725., 876650., 880575., 884500., 893350., 897300., 901250., 905200.,
      914175., 918150., 922125., 926100., 935200., 939200., 943200., 947200.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,
      3380.,  4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,
      4990.,  6620.,  8225.,  8550.,  8875.,  9200.,  7250.,  5350.,
      6670.,  8780.,  10825., 11150., 11475., 11800., 9250.,  6790.,
      8350.,  10940., 13425., 13750., 14075., 14400., 11250., 8230.,
      10030., 13100., 16025., 16350., 16675., 17000., 13250., 9670.,
      6956.,  9004.,  10910., 11120., 11330., 11540., 8900.,  6422.,
      4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,  3711.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 16190., 16700., 21190., 21880., 25975., 26850., 26600., 27500.,
      27225., 28150., 27850., 28800., 21730., 22500., 15875., 16460., 19430.,
      20060., 25350., 26200., 30975., 32050., 31600., 32700., 32225., 33350.,
      32850., 34000., 25570., 26500., 18635., 19340., 13360., 13912., 17264.,
      18008., 20880., 21820., 21280., 22240., 21680., 22660., 22080., 23080.,
      16992., 17800., 12232., 12844., 8142.,  8592.,  10366., 10972., 12335.,
      13100., 12560., 13340., 12785., 13580., 13010., 13820., 9826.,  10480.,
      6927.,  7422.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.,
      25975., 26850., 26600., 27500., 27225., 28150., 27850., 28800.,
      30975., 32050., 31600., 32700., 32225., 33350., 32850., 34000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,  7644.,  7734.,  7824.,  10286., 10412., 10538., 10664., 13105.,
      13270., 13435., 13600., 14140., 14320., 14500., 14680., 15175., 15370.,
      15565., 15760., 16210., 16420., 16630., 16840., 12998., 13172., 13346.,
      13520., 9759.,  9894.,  10029., 10164., 13016., 13184., 13352., 13520.,
      17432., 17664., 17896., 18128., 21860., 22160., 22460., 22760., 23040.,
      23360., 23680., 24000., 24220., 24560., 24900., 25240., 25400., 25760.,
      26120., 26480., 20152., 20448., 20744., 21040., 14972., 15200., 15428.,
      15656., 19150., 19420., 19690., 19960., 25370., 25740., 26110., 26480.,
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200., 33925.,
      34450., 34975., 35500., 35150., 35700., 36250., 36800., 27650., 28100.,
      28550., 29000., 20365., 20710., 21055., 21400., 25510., 25900., 26290.,
      26680., 33530., 34060., 34590., 35120., 41275., 41950., 42625., 43300.,
      42500., 43200., 43900., 44600., 43725., 44450., 45175., 45900., 44950.,
      45700., 46450., 47200., 35170., 35780., 36390., 37000., 25765., 26230.,
      26695., 27160., 31870., 32380., 32890., 33400., 41690., 42380., 43070.,
      43760., 51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000.,
      53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600., 42690.,
      43460., 44230., 45000., 31165., 31750., 32335., 32920., 38230., 38860.,
      39490., 40120., 49850., 50700., 51550., 52400., 60875., 61950., 63025.,
      64100., 62100., 63200., 64300., 65400., 63325., 64450., 65575., 66700.,
      64550., 65700., 66850., 68000., 50210., 51140., 52070., 53000., 36565.,
      37270., 37975., 38680., 26168., 26720., 27272., 27824., 33784., 34528.,
      35272., 36016., 40820., 41760., 42700., 43640., 41600., 42560., 43520.,
      44480., 42380., 43360., 44340., 45320., 43160., 44160., 45160., 46160.,
      33176., 33984., 34792., 35600., 23852., 24464., 25076., 25688., 15834.,
      16284., 16734., 17184., 20126., 20732., 21338., 21944., 23905., 24670.,
      25435., 26200., 24340., 25120., 25900., 26680., 24775., 25570., 26365.,
      27160., 25210., 26020., 26830., 27640., 18998., 19652., 20306., 20960.,
      13359., 13854., 14349., 14844.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475., 31950., 32425., 32900., 32700., 33200., 33700., 34200.,
      33925., 34450., 34975., 35500., 35150., 35700., 36250., 36800.,
      41275., 41950., 42625., 43300., 42500., 43200., 43900., 44600.,
      43725., 44450., 45175., 45900., 44950., 45700., 46450., 47200.,
      51075., 51950., 52825., 53700., 52300., 53200., 54100., 55000.,
      53525., 54450., 55375., 56300., 54750., 55700., 56650., 57600.,
      60875., 61950., 63025., 64100., 62100., 63200., 64300., 65400.,
      63325., 64450., 65575., 66700., 64550., 65700., 66850., 68000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,  7824.,  9980.,  10664., 12745., 13600., 13795., 14680., 14845.,
      15760., 15895., 16840., 12764., 13520., 9597.,  10164., 12800., 13520.,
      17168., 18128., 21560., 22760., 22760., 24000., 23960., 25240., 25160.,
      26480., 19984., 21040., 14864., 15656., 19015., 19960., 25220., 26480.,
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800., 27620.,
      29000., 20365., 21400., 25495., 26680., 33540., 35120., 41325., 43300.,
      42575., 44600., 43825., 45900., 45075., 47200., 35300., 37000., 25885.,
      27160., 31975., 33400., 41860., 43760., 51325., 53700., 52575., 55000.,
      53825., 56300., 55075., 57600., 42980., 45000., 31405., 32920., 38455.,
      40120., 50180., 52400., 61325., 64100., 62575., 65400., 63825., 66700.,
      65075., 68000., 50660., 53000., 36925., 38680., 26456., 27824., 34192.,
      36016., 41360., 43640., 42160., 44480., 42960., 45320., 43760., 46160.,
      33680., 35600., 24248., 25688., 16131., 17184., 20540., 21944., 24445.,
      26200., 24895., 26680., 25345., 27160., 25795., 27640., 19484., 20960.,
      13737., 14844.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325., 32900., 32575., 34200., 33825., 35500., 35075., 36800.,
      41325., 43300., 42575., 44600., 43825., 45900., 45075., 47200.,
      51325., 53700., 52575., 55000., 53825., 56300., 55075., 57600.,
      61325., 64100., 62575., 65400., 63825., 66700., 65075., 68000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451.,  14622.,  15468.,  15648.,  19720.,  19960.,  21076.,  21328.,
      25175.,  25490.,  26870.,  27200.,  27245.,  27590.,  29000.,  29360.,
      29315.,  29690.,  31130.,  31520.,  31385.,  31790.,  33260.,  33680.,
      25192.,  25528.,  26692.,  27040.,  18933.,  19194.,  20058.,  20328.,
      25276.,  25600.,  26704.,  27040.,  33888.,  34336.,  35792.,  36256.,
      42540.,  43120.,  44920.,  45520.,  44900.,  45520.,  47360.,  48000.,
      47260.,  47920.,  49800.,  50480.,  49620.,  50320.,  52240.,  52960.,
      39392.,  39968.,  41488.,  42080.,  29284.,  29728.,  30856.,  31312.,
      37505.,  38030.,  39380.,  39920.,  49720.,  50440.,  52220.,  52960.,
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      54360.,  55240.,  57100.,  58000.,  40055.,  40730.,  42110.,  42800.,
      50225.,  50990.,  52580.,  53360.,  66040.,  67080.,  69180.,  70240.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      69400.,  70600.,  72780.,  74000.,  50855.,  51770.,  53390.,  54320.,
      62945.,  63950.,  65780.,  66800.,  82360.,  83720.,  86140.,  87520.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      84440.,  85960.,  88460.,  90000.,  61655.,  62810.,  64670.,  65840.,
      75665.,  76910.,  78980.,  80240.,  98680.,  100360., 103100., 104800.,
      120525., 122650., 126050., 128200., 122975., 125150., 128600., 130800.,
      125425., 127650., 131150., 133400., 127875., 130150., 133700., 136000.,
      99480.,  101320., 104140., 106000., 72455.,  73850.,  75950.,  77360.,
      51820.,  52912.,  54544.,  55648.,  66912.,  68384.,  70544.,  72032.,
      80860.,  82720.,  85400.,  87280.,  82420.,  84320.,  87040.,  88960.,
      83980.,  85920.,  88680.,  90640.,  85540.,  87520.,  90320.,  92320.,
      65760.,  67360.,  69584.,  71200.,  47284.,  48496.,  50152.,  51376.,
      31371.,  32262.,  33468.,  34368.,  39880.,  41080.,  42676.,  43888.,
      47375.,  48890.,  50870.,  52400.,  48245.,  49790.,  51800.,  53360.,
      49115.,  50690.,  52730.,  54320.,  49985.,  51590.,  53660.,  55280.,
      37672.,  38968.,  40612.,  41920.,  26493.,  27474.,  28698.,  29688.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      120525., 122650., 126050., 128200., 122975., 125150., 128600., 130800.,
      125425., 127650., 131150., 133400., 127875., 130150., 133700., 136000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      124885., 125890., 126895., 127900., 130540., 131560., 132580., 133600.,
      163360., 164720., 166080., 167440., 170900., 172280., 173660., 175040.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      167360., 168880., 170400., 171920., 175380., 176920., 178460., 180000.,
      122155., 123310., 124465., 125620., 128170., 129340., 130510., 131680.,
      150085., 151330., 152575., 153820., 156700., 157960., 159220., 160480.,
      195680., 197360., 199040., 200720., 204500., 206200., 207900., 209600.,
      238925., 241050., 243175., 245300., 249950., 252100., 254250., 256400.,
      243775., 245950., 248125., 250300., 255000., 257200., 259400., 261600.,
      248625., 250850., 253075., 255300., 260050., 262300., 264550., 266800.,
      253475., 255750., 258025., 260300., 265100., 267400., 269700., 272000.,
      197120., 198960., 200800., 202640., 206420., 208280., 210140., 212000.,
      143515., 144910., 146305., 147700., 150490., 151900., 153310., 154720.,
      102548., 103640., 104732., 105824., 107984., 109088., 110192., 111296.,
      132352., 133824., 135296., 136768., 139600., 141088., 142576., 144064.,
      159860., 161720., 163580., 165440., 168920., 170800., 172680., 174560.,
      162940., 164840., 166740., 168640., 172160., 174080., 176000., 177920.,
      166020., 167960., 169900., 171840., 175400., 177360., 179320., 181280.,
      169100., 171080., 173060., 175040., 178640., 180640., 182640., 184640.,
      129920., 131520., 133120., 134720., 137552., 139168., 140784., 142400.,
      93356.,  94568.,  95780.,  96992.,  99080.,  100304., 101528., 102752.,
      61851.,  62742.,  63633.,  64524.,  66036.,  66936.,  67836.,  68736.,
      78560.,  79760.,  80960.,  82160.,  84140.,  85352.,  86564.,  87776.,
      93235.,  94750.,  96265.,  97780.,  100210., 101740., 103270., 104800.,
      94945.,  96490.,  98035.,  99580.,  102040., 103600., 105160., 106720.,
      96655.,  98230.,  99805.,  101380., 103870., 105460., 107050., 108640.,
      98365.,  99970.,  101575., 103180., 105700., 107320., 108940., 110560.,
      74048.,  75344.,  76640.,  77936.,  79916.,  81224.,  82532.,  83840.,
      52005.,  52986.,  53967.,  54948.,  56406.,  57396.,  58386.,  59376.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      238925., 241050., 243175., 245300., 249950., 252100., 254250., 256400.,
      243775., 245950., 248125., 250300., 255000., 257200., 259400., 261600.,
      248625., 250850., 253075., 255300., 260050., 262300., 264550., 266800.,
      253475., 255750., 258025., 260300., 265100., 267400., 269700., 272000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      125095., 127900., 130735., 133600., 163700., 167440., 171220., 175040.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      167940., 171920., 175940., 180000., 122635., 125620., 128635., 131680.,
      150535., 153820., 157135., 160480., 196340., 200720., 205140., 209600.,
      239825., 245300., 250825., 256400., 244725., 250300., 255925., 261600.,
      249625., 255300., 261025., 266800., 254525., 260300., 266125., 272000.,
      198020., 202640., 207300., 212000., 144235., 147700., 151195., 154720.,
      103124., 105824., 108548., 111296., 133168., 136768., 140400., 144064.,
      160940., 165440., 169980., 174560., 164060., 168640., 173260., 177920.,
      167180., 171840., 176540., 181280., 170300., 175040., 179820., 184640.,
      130928., 134720., 138544., 142400., 94148.,  96992.,  99860.,  102752.,
      62445.,  64524.,  66621.,  68736.,  79388.,  82160.,  84956.,  87776.,
      94315.,  97780.,  101275., 104800., 96055.,  99580.,  103135., 106720.,
      97795.,  101380., 104995., 108640., 99535.,  103180., 106855., 110560.,
      75020.,  77936.,  80876.,  83840.,  52761.,  54948.,  57153.,  59376.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      239825., 245300., 250825., 256400., 244725., 250300., 255925., 261600.,
      249625., 255300., 261025., 266800., 254525., 260300., 266125., 272000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,  56490.,  58146.,  58488.,  60171.,  60522.,  62232.,  62592.,
      76708.,  77176.,  79360.,  79840.,  82060.,  82552.,  84808.,  85312.,
      98015.,  98630.,  101330., 101960., 104705., 105350., 108140., 108800.,
      106235., 106910., 109670., 110360., 113165., 113870., 116720., 117440.,
      114455., 115190., 118010., 118760., 121625., 122390., 125300., 126080.,
      122675., 123470., 126350., 127160., 130085., 130910., 133880., 134720.,
      98500.,  99160.,  101440., 102112., 104428., 105112., 107464., 108160.,
      74049.,  74562.,  76254.,  76776.,  78495.,  79026.,  80772.,  81312.,
      98956.,  99592.,  101752., 102400., 104596., 105256., 107488., 108160.,
      132720., 133600., 136448., 137344., 140240., 141152., 144096., 145024.,
      166660., 167800., 171320., 172480., 176060., 177240., 180880., 182080.,
      176020., 177240., 180840., 182080., 185740., 187000., 190720., 192000.,
      185380., 186680., 190360., 191680., 195420., 196760., 200560., 201920.,
      194740., 196120., 199880., 201280., 205100., 206520., 210400., 211840.,
      154608., 155744., 158720., 159872., 162896., 164064., 167136., 168320.,
      114940., 115816., 118024., 118912., 121156., 122056., 124336., 125248.,
      147395., 148430., 151070., 152120., 154805., 155870., 158600., 159680.,
      195420., 196840., 200320., 201760., 205300., 206760., 210360., 211840.,
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      213820., 215560., 219200., 220960., 224660., 226440., 230200., 232000.,
      157535., 158870., 161570., 162920., 165665., 167030., 169820., 171200.,
      197795., 199310., 202430., 203960., 207125., 208670., 211880., 213440.,
      260060., 262120., 266240., 268320., 272500., 274600., 278840., 280960.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.,
      273340., 275720., 280000., 282400., 286740., 289160., 293560., 296000.,
      200255., 202070., 205250., 207080., 210305., 212150., 215420., 217280.,
      248195., 250190., 253790., 255800., 259445., 261470., 265160., 267200.,
      324700., 327400., 332160., 334880., 339700., 342440., 347320., 350080.,
      397825., 401250., 407150., 410600., 416575., 420050., 426100., 429600.,
      407525., 411050., 417050., 420600., 426675., 430250., 436400., 440000.,
      417225., 420850., 426950., 430600., 436775., 440450., 446700., 450400.,
      426925., 430650., 436850., 440600., 446875., 450650., 457000., 460800.,
      332860., 335880., 340800., 343840., 348820., 351880., 356920., 360000.,
      242975., 245270., 248930., 251240., 254945., 257270., 261020., 263360.,
      298595., 301070., 305150., 307640., 311765., 314270., 318440., 320960.,
      389340., 392680., 398080., 401440., 406900., 410280., 415800., 419200.,
      475425., 479650., 486350., 490600., 497375., 501650., 508500., 512800.,
      485125., 489450., 496250., 500600., 507475., 511850., 518800., 523200.,
      494825., 499250., 506150., 510600., 517575., 522050., 529100., 533600.,
      504525., 509050., 516050., 520600., 527675., 532250., 539400., 544000.,
      392380., 396040., 401600., 405280., 410900., 414600., 420280., 424000.,
      285695., 288470., 292610., 295400., 299585., 302390., 306620., 309440.,
      204076., 206248., 209464., 211648., 214900., 217096., 220384., 222592.,
      263408., 266336., 270592., 273536., 277840., 280800., 285152., 288128.,
      318180., 321880., 327160., 330880., 336220., 339960., 345360., 349120.,
      324340., 328120., 333480., 337280., 342700., 346520., 352000., 355840.,
      330500., 334360., 339800., 343680., 349180., 353080., 358640., 362560.,
      336660., 340600., 346120., 350080., 355660., 359640., 365280., 369280.,
      258672., 261856., 266240., 269440., 273872., 277088., 281568., 284800.,
      185884., 188296., 191560., 193984., 197284., 199720., 203056., 205504.,
      123117., 124890., 127266., 129048., 131451., 133242., 135672., 137472.,
      156388., 158776., 161920., 164320., 167500., 169912., 173128., 175552.,
      185615., 188630., 192530., 195560., 199505., 202550., 206540., 209600.,
      189035., 192110., 196070., 199160., 203165., 206270., 210320., 213440.,
      192455., 195590., 199610., 202760., 206825., 209990., 214100., 217280.,
      195875., 199070., 203150., 206360., 210485., 213710., 217880., 221120.,
      147460., 150040., 153280., 155872., 159148., 161752., 165064., 167680.,
      103569., 105522., 107934., 109896., 112335., 114306., 116772., 118752.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625., 244450., 248750., 250600., 254975., 256850., 261300., 263200.,
      252325., 254250., 258650., 260600., 265075., 267050., 271600., 273600.,
      262025., 264050., 268550., 270600., 275175., 277250., 281900., 284000.,
      271725., 273850., 278450., 280600., 285275., 287450., 292200., 294400.,
      320225., 322850., 327950., 330600., 335775., 338450., 343700., 346400.,
      329925., 332650., 337850., 340600., 345875., 348650., 354000., 356800.,
      339625., 342450., 347750., 350600., 355975., 358850., 364300., 367200.,
      349325., 352250., 357650., 360600., 366075., 369050., 374600., 377600.,
      397825., 401250., 407150., 410600., 416575., 420050., 426100., 429600.,
      407525., 411050., 417050., 420600., 426675., 430250., 436400., 440000.,
      417225., 420850., 426950., 430600., 436775., 440450., 446700., 450400.,
      426925., 430650., 436850., 440600., 446875., 450650., 457000., 460800.,
      475425., 479650., 486350., 490600., 497375., 501650., 508500., 512800.,
      485125., 489450., 496250., 500600., 507475., 511850., 518800., 523200.,
      494825., 499250., 506150., 510600., 517575., 522050., 529100., 533600.,
      504525., 509050., 516050., 520600., 527675., 532250., 539400., 544000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981.,  112314.,  112647.,  112980.,  115950.,  116292.,  116634.,
      116976.,  119991.,  120342.,  120693.,  121044.,  124104.,  124464.,
      124824.,  125184.,  152948.,  153416.,  153884.,  154352.,  158240.,
      158720.,  159200.,  159680.,  163628.,  164120.,  164612.,  165104.,
      169112.,  169616.,  170120.,  170624.,  195415.,  196030.,  196645.,
      197260.,  202030.,  202660.,  203290.,  203920.,  208765.,  209410.,
      210055.,  210700.,  215620.,  216280.,  216940.,  217600.,  211795.,
      212470.,  213145.,  213820.,  218650.,  219340.,  220030.,  220720.,
      225625.,  226330.,  227035.,  227740.,  232720.,  233440.,  234160.,
      234880.,  228175.,  228910.,  229645.,  230380.,  235270.,  236020.,
      236770.,  237520.,  242485.,  243250.,  244015.,  244780.,  249820.,
      250600.,  251380.,  252160.,  244555.,  245350.,  246145.,  246940.,
      251890.,  252700.,  253510.,  254320.,  259345.,  260170.,  260995.,
      261820.,  266920.,  267760.,  268600.,  269440.,  196340.,  197000.,
      197660.,  198320.,  202208.,  202880.,  203552.,  204224.,  208172.,
      208856.,  209540.,  210224.,  214232.,  214928.,  215624.,  216320.,
      147585.,  148098.,  148611.,  149124.,  151986.,  152508.,  153030.,
      153552.,  156459.,  156990.,  157521.,  158052.,  161004.,  161544.,
      162084.,  162624.,  197276.,  197912.,  198548.,  199184.,  202856.,
      203504.,  204152.,  204800.,  208532.,  209192.,  209852.,  210512.,
      214304.,  214976.,  215648.,  216320.,  264560.,  265440.,  266320.,
      267200.,  272000.,  272896.,  273792.,  274688.,  279568.,  280480.,
      281392.,  282304.,  287264.,  288192.,  289120.,  290048.,  332180.,
      333320.,  334460.,  335600.,  341480.,  342640.,  343800.,  344960.,
      350940.,  352120.,  353300.,  354480.,  360560.,  361760.,  362960.,
      364160.,  350820.,  352040.,  353260.,  354480.,  360440.,  361680.,
      362920.,  364160.,  370220.,  371480.,  372740.,  374000.,  380160.,
      381440.,  382720.,  384000.,  369460.,  370760.,  372060.,  373360.,
      379400.,  380720.,  382040.,  383360.,  389500.,  390840.,  392180.,
      393520.,  399760.,  401120.,  402480.,  403840.,  388100.,  389480.,
      390860.,  392240.,  398360.,  399760.,  401160.,  402560.,  408780.,
      410200.,  411620.,  413040.,  419360.,  420800.,  422240.,  423680.,
      308080.,  309216.,  310352.,  311488.,  316288.,  317440.,  318592.,
      319744.,  324624.,  325792.,  326960.,  328128.,  333088.,  334272.,
      335456.,  336640.,  229004.,  229880.,  230756.,  231632.,  235160.,
      236048.,  236936.,  237824.,  241412.,  242312.,  243212.,  244112.,
      247760.,  248672.,  249584.,  250496.,  293755.,  294790.,  295825.,
      296860.,  301090.,  302140.,  303190.,  304240.,  308545.,  309610.,
      310675.,  311740.,  316120.,  317200.,  318280.,  319360.,  389420.,
      390840.,  392260.,  393680.,  399200.,  400640.,  402080.,  403520.,
      409140.,  410600.,  412060.,  413520.,  419240.,  420720.,  422200.,
      423680.,  483425.,  485250.,  487075.,  488900.,  495650.,  497500.,
      499350.,  501200.,  508075.,  509950.,  511825.,  513700.,  520700.,
      522600.,  524500.,  526400.,  502725.,  504650.,  506575.,  508500.,
      515350.,  517300.,  519250.,  521200.,  528175.,  530150.,  532125.,
      534100.,  541200.,  543200.,  545200.,  547200.,  522025.,  524050.,
      526075.,  528100.,  535050.,  537100.,  539150.,  541200.,  548275.,
      550350.,  552425.,  554500.,  561700.,  563800.,  565900.,  568000.,
      541325.,  543450.,  545575.,  547700.,  554750.,  556900.,  559050.,
      561200.,  568375.,  570550.,  572725.,  574900.,  582200.,  584400.,
      586600.,  588800.,  425900.,  427640.,  429380.,  431120.,  436640.,
      438400.,  440160.,  441920.,  447540.,  449320.,  451100.,  452880.,
      458600.,  460400.,  462200.,  464000.,  313735.,  315070.,  316405.,
      317740.,  321790.,  323140.,  324490.,  325840.,  329965.,  331330.,
      332695.,  334060.,  338260.,  339640.,  341020.,  342400.,  394075.,
      395590.,  397105.,  398620.,  403330.,  404860.,  406390.,  407920.,
      412705.,  414250.,  415795.,  417340.,  422200.,  423760.,  425320.,
      426880.,  518060.,  520120.,  522180.,  524240.,  530400.,  532480.,
      534560.,  536640.,  542900.,  545000.,  547100.,  549200.,  555560.,
      557680.,  559800.,  561920.,  637825.,  640450.,  643075.,  645700.,
      653250.,  655900.,  658550.,  661200.,  668875.,  671550.,  674225.,
      676900.,  684700.,  687400.,  690100.,  692800.,  657125.,  659850.,
      662575.,  665300.,  672950.,  675700.,  678450.,  681200.,  688975.,
      691750.,  694525.,  697300.,  705200.,  708000.,  710800.,  713600.,
      676425.,  679250.,  682075.,  684900.,  692650.,  695500.,  698350.,
      701200.,  709075.,  711950.,  714825.,  717700.,  725700.,  728600.,
      731500.,  734400.,  695725.,  698650.,  701575.,  704500.,  712350.,
      715300.,  718250.,  721200.,  729175.,  732150.,  735125.,  738100.,
      746200.,  749200.,  752200.,  755200.,  544300.,  546680.,  549060.,
      551440.,  557600.,  560000.,  562400.,  564800.,  571060.,  573480.,
      575900.,  578320.,  584680.,  587120.,  589560.,  592000.,  398695.,
      400510.,  402325.,  404140.,  408670.,  410500.,  412330.,  414160.,
      418765.,  420610.,  422455.,  424300.,  428980.,  430840.,  432700.,
      434560.,  494395.,  496390.,  498385.,  500380.,  505570.,  507580.,
      509590.,  511600.,  516865.,  518890.,  520915.,  522940.,  528280.,
      530320.,  532360.,  534400.,  646700.,  649400.,  652100.,  654800.,
      661600.,  664320.,  667040.,  669760.,  676660.,  679400.,  682140.,
      684880.,  691880.,  694640.,  697400.,  700160.,  792225.,  795650.,
      799075.,  802500.,  810850.,  814300.,  817750.,  821200.,  829675.,
      833150.,  836625.,  840100.,  848700.,  852200.,  855700.,  859200.,
      811525.,  815050.,  818575.,  822100.,  830550.,  834100.,  837650.,
      841200.,  849775.,  853350.,  856925.,  860500.,  869200.,  872800.,
      876400.,  880000.,  830825.,  834450.,  838075.,  841700.,  850250.,
      853900.,  857550.,  861200.,  869875.,  873550.,  877225.,  880900.,
      889700.,  893400.,  897100.,  900800.,  850125.,  853850.,  857575.,
      861300.,  869950.,  873700.,  877450.,  881200.,  889975.,  893750.,
      897525.,  901300.,  910200.,  914000.,  917800.,  921600.,  662700.,
      665720.,  668740.,  671760.,  678560.,  681600.,  684640.,  687680.,
      694580.,  697640.,  700700.,  703760.,  710760.,  713840.,  716920.,
      720000.,  483655.,  485950.,  488245.,  490540.,  495550.,  497860.,
      500170.,  502480.,  507565.,  509890.,  512215.,  514540.,  519700.,
      522040.,  524380.,  526720.,  594715.,  597190.,  599665.,  602140.,
      607810.,  610300.,  612790.,  615280.,  621025.,  623530.,  626035.,
      628540.,  634360.,  636880.,  639400.,  641920.,  775340.,  778680.,
      782020.,  785360.,  792800.,  796160.,  799520.,  802880.,  810420.,
      813800.,  817180.,  820560.,  828200.,  831600.,  835000.,  838400.,
      946625.,  950850.,  955075.,  959300.,  968450.,  972700.,  976950.,
      981200.,  990475.,  994750.,  999025.,  1003300., 1012700., 1017000.,
      1021300., 1025600., 965925.,  970250.,  974575.,  978900.,  988150.,
      992500.,  996850.,  1001200., 1010575., 1014950., 1019325., 1023700.,
      1033200., 1037600., 1042000., 1046400., 985225.,  989650.,  994075.,
      998500.,  1007850., 1012300., 1016750., 1021200., 1030675., 1035150.,
      1039625., 1044100., 1053700., 1058200., 1062700., 1067200., 1004525.,
      1009050., 1013575., 1018100., 1027550., 1032100., 1036650., 1041200.,
      1050775., 1055350., 1059925., 1064500., 1074200., 1078800., 1083400.,
      1088000., 781100.,  784760.,  788420.,  792080.,  799520.,  803200.,
      806880.,  810560.,  818100.,  821800.,  825500.,  829200.,  836840.,
      840560.,  844280.,  848000.,  568615.,  571390.,  574165.,  576940.,
      582430.,  585220.,  588010.,  590800.,  596365.,  599170.,  601975.,
      604780.,  610420.,  613240.,  616060.,  618880.,  405980.,  408152.,
      410324.,  412496.,  416744.,  418928.,  421112.,  423296.,  427604.,
      429800.,  431996.,  434192.,  438560.,  440768.,  442976.,  445184.,
      523888.,  526816.,  529744.,  532672.,  538240.,  541184.,  544128.,
      547072.,  552720.,  555680.,  558640.,  561600.,  567328.,  570304.,
      573280.,  576256.,  632660.,  636360.,  640060.,  643760.,  650600.,
      654320.,  658040.,  661760.,  668700.,  672440.,  676180.,  679920.,
      686960.,  690720.,  694480.,  698240.,  644900.,  648680.,  652460.,
      656240.,  663160.,  666960.,  670760.,  674560.,  681580.,  685400.,
      689220.,  693040.,  700160.,  704000.,  707840.,  711680.,  657140.,
      661000.,  664860.,  668720.,  675720.,  679600.,  683480.,  687360.,
      694460.,  698360.,  702260.,  706160.,  713360.,  717280.,  721200.,
      725120.,  669380.,  673320.,  677260.,  681200.,  688280.,  692240.,
      696200.,  700160.,  707340.,  711320.,  715300.,  719280.,  726560.,
      730560.,  734560.,  738560.,  514160.,  517344.,  520528.,  523712.,
      529280.,  532480.,  535680.,  538880.,  544528.,  547744.,  550960.,
      554176.,  559904.,  563136.,  566368.,  569600.,  369356.,  371768.,
      374180.,  376592.,  380696.,  383120.,  385544.,  387968.,  392132.,
      394568.,  397004.,  399440.,  403664.,  406112.,  408560.,  411008.,
      244461.,  246234.,  248007.,  249780.,  252750.,  254532.,  256314.,
      258096.,  261111.,  262902.,  264693.,  266484.,  269544.,  271344.,
      273144.,  274944.,  310388.,  312776.,  315164.,  317552.,  321440.,
      323840.,  326240.,  328640.,  332588.,  335000.,  337412.,  339824.,
      343832.,  346256.,  348680.,  351104.,  368215.,  371230.,  374245.,
      377260.,  382030.,  385060.,  388090.,  391120.,  395965.,  399010.,
      402055.,  405100.,  410020.,  413080.,  416140.,  419200.,  374995.,
      378070.,  381145.,  384220.,  389050.,  392140.,  395230.,  398320.,
      403225.,  406330.,  409435.,  412540.,  417520.,  420640.,  423760.,
      426880.,  381775.,  384910.,  388045.,  391180.,  396070.,  399220.,
      402370.,  405520.,  410485.,  413650.,  416815.,  419980.,  425020.,
      428200.,  431380.,  434560.,  388555.,  391750.,  394945.,  398140.,
      403090.,  406300.,  409510.,  412720.,  417745.,  420970.,  424195.,
      427420.,  432520.,  435760.,  439000.,  442240.,  292340.,  294920.,
      297500.,  300080.,  303968.,  306560.,  309152.,  311744.,  315692.,
      318296.,  320900.,  323504.,  327512.,  330128.,  332744.,  335360.,
      205185.,  207138.,  209091.,  211044.,  213906.,  215868.,  217830.,
      219792.,  222699.,  224670.,  226641.,  228612.,  231564.,  233544.,
      235524.,  237504.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425.,  485250.,  487075.,  488900.,  495650.,  497500.,  499350.,
      501200.,  508075.,  509950.,  511825.,  513700.,  520700.,  522600.,
      524500.,  526400.,  502725.,  504650.,  506575.,  508500.,  515350.,
      517300.,  519250.,  521200.,  528175.,  530150.,  532125.,  534100.,
      541200.,  543200.,  545200.,  547200.,  522025.,  524050.,  526075.,
      528100.,  535050.,  537100.,  539150.,  541200.,  548275.,  550350.,
      552425.,  554500.,  561700.,  563800.,  565900.,  568000.,  541325.,
      543450.,  545575.,  547700.,  554750.,  556900.,  559050.,  561200.,
      568375.,  570550.,  572725.,  574900.,  582200.,  584400.,  586600.,
      588800.,  637825.,  640450.,  643075.,  645700.,  653250.,  655900.,
      658550.,  661200.,  668875.,  671550.,  674225.,  676900.,  684700.,
      687400.,  690100.,  692800.,  657125.,  659850.,  662575.,  665300.,
      672950.,  675700.,  678450.,  681200.,  688975.,  691750.,  694525.,
      697300.,  705200.,  708000.,  710800.,  713600.,  676425.,  679250.,
      682075.,  684900.,  692650.,  695500.,  698350.,  701200.,  709075.,
      711950.,  714825.,  717700.,  725700.,  728600.,  731500.,  734400.,
      695725.,  698650.,  701575.,  704500.,  712350.,  715300.,  718250.,
      721200.,  729175.,  732150.,  735125.,  738100.,  746200.,  749200.,
      752200.,  755200.,  792225.,  795650.,  799075.,  802500.,  810850.,
      814300.,  817750.,  821200.,  829675.,  833150.,  836625.,  840100.,
      848700.,  852200.,  855700.,  859200.,  811525.,  815050.,  818575.,
      822100.,  830550.,  834100.,  837650.,  841200.,  849775.,  853350.,
      856925.,  860500.,  869200.,  872800.,  876400.,  880000.,  830825.,
      834450.,  838075.,  841700.,  850250.,  853900.,  857550.,  861200.,
      869875.,  873550.,  877225.,  880900.,  889700.,  893400.,  897100.,
      900800.,  850125.,  853850.,  857575.,  861300.,  869950.,  873700.,
      877450.,  881200.,  889975.,  893750.,  897525.,  901300.,  910200.,
      914000.,  917800.,  921600.,  946625.,  950850.,  955075.,  959300.,
      968450.,  972700.,  976950.,  981200.,  990475.,  994750.,  999025.,
      1003300., 1012700., 1017000., 1021300., 1025600., 965925.,  970250.,
      974575.,  978900.,  988150.,  992500.,  996850.,  1001200., 1010575.,
      1014950., 1019325., 1023700., 1033200., 1037600., 1042000., 1046400.,
      985225.,  989650.,  994075.,  998500.,  1007850., 1012300., 1016750.,
      1021200., 1030675., 1035150., 1039625., 1044100., 1053700., 1058200.,
      1062700., 1067200., 1004525., 1009050., 1013575., 1018100., 1027550.,
      1032100., 1036650., 1041200., 1050775., 1055350., 1059925., 1064500.,
      1074200., 1078800., 1083400., 1088000.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  3632.,  4756.,  5830.,
      6040.,  4700.,  3422.,  2292.,  2958.,  3570.,  3690.,  2820.,  2013.,
      7710.,  10134., 12480., 12750., 10020., 7377.,  9764.,  12780., 15670.,
      15980., 12500., 9158.,  11410., 14860., 18125., 18450., 14350., 10450.,
      12670., 16480., 20075., 20400., 15850., 11530., 8600.,  11092., 13390.,
      13600., 10460., 7526.,  5208.,  6630.,  7890.,  8010.,  6060.,  4281.,
      13866., 18126., 22200., 22470., 17580., 12885., 16892., 21996., 26830.,
      27140., 21140., 15422., 18970., 24580., 29825., 30150., 23350., 16930.,
      20230., 26200., 31775., 32100., 24850., 18010., 13568., 17428., 20950.,
      21160., 16220., 11630., 8124.,  10302., 12210., 12330., 9300.,  6549.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {6425.,  6750.,  8375.,  8700.,
                                         18125., 18450., 20075., 20400.,
                                         29825., 30150., 31775., 32100.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 6988.,  7264.,  9136.,  9512.,  11180., 11660.,
      11580., 12080., 8992.,  9400.,  6532.,  6844.,  4350.,  4584.,  5598.,
      5916.,  6735.,  7140.,  6960.,  7380.,  5298.,  5640.,  3765.,  4026.,
      15024., 15420., 19734., 20268., 24285., 24960., 24810., 25500., 19482.,
      20040., 14331., 14754., 18964., 19528., 24800., 25560., 30380., 31340.,
      30980., 31960., 24208., 25000., 17716., 18316., 22070., 22820., 28710.,
      29720., 34975., 36250., 35600., 36900., 27650., 28700., 20105., 20900.,
      24500., 25340., 31830., 32960., 38725., 40150., 39350., 40800., 30530.,
      31700., 22175., 23060., 16492., 17200., 21232., 22184., 25580., 26780.,
      25980., 27200., 19936., 20920., 14308., 15052., 9858.,  10416., 12510.,
      13260., 14835., 15780., 15060., 16020., 11346., 12120., 7977.,  8562.,
      27012., 27732., 35286., 36252., 43185., 44400., 43710., 44940., 34170.,
      35160., 25023., 25770., 32788., 33784., 42656., 43992., 51980., 53660.,
      52580., 54280., 40912., 42280., 29812., 30844., 36650., 37940., 47430.,
      49160., 57475., 59650., 58100., 60300., 44930., 46700., 32525., 33860.,
      39080., 40460., 50550., 52400., 61225., 63550., 61850., 64200., 47810.,
      49700., 34595., 36020., 25996., 27136., 33328., 34856., 39980., 41900.,
      40380., 42320., 30880., 32440., 22084., 23260., 15366., 16248., 19422.,
      20604., 22935., 24420., 23160., 24660., 17394., 18600., 12189., 13098.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400.,
      34975., 36250., 35600., 36900., 38725., 40150., 39350., 40800.,
      57475., 59650., 58100., 60300., 61225., 63550., 61850., 64200.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,   6072.,   6144.,   6216.,   8262.,   8364.,   8466.,   8568.,
      10635.,  10770.,  10905.,  11040.,  11670.,  11820.,  11970.,  12120.,
      9462.,   9588.,   9714.,   9840.,   7179.,   7278.,   7377.,   7476.,
      10148.,  10280.,  10412.,  10544.,  13704.,  13888.,  14072.,  14256.,
      17320.,  17560.,  17800.,  18040.,  18500.,  18760.,  19020.,  19280.,
      14792.,  15008.,  15224.,  15440.,  11072.,  11240.,  11408.,  11576.,
      14770.,  14980.,  15190.,  15400.,  19690.,  19980.,  20270.,  20560.,
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      20410.,  20740.,  21070.,  21400.,  15115.,  15370.,  15625.,  15880.,
      19540.,  19840.,  20140.,  20440.,  25810.,  26220.,  26630.,  27040.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      26050.,  26500.,  26950.,  27400.,  19165.,  19510.,  19855.,  20200.,
      13700.,  13976.,  14252.,  14528.,  17896.,  18272.,  18648.,  19024.,
      21880.,  22360.,  22840.,  23320.,  22660.,  23160.,  23660.,  24160.,
      17576.,  17984.,  18392.,  18800.,  12752.,  13064.,  13376.,  13688.,
      8466.,   8700.,   8934.,   9168.,   10878.,  11196.,  11514.,  11832.,
      13065.,  13470.,  13875.,  14280.,  13500.,  13920.,  14340.,  14760.,
      10254.,  10596.,  10938.,  11280.,  7269.,   7530.,   7791.,   8052.,
      29652.,  30048.,  30444.,  30840.,  38934.,  39468.,  40002.,  40536.,
      47895.,  48570.,  49245.,  49920.,  48930.,  49620.,  50310.,  51000.,
      38406.,  38964.,  39522.,  40080.,  28239.,  28662.,  29085.,  29508.,
      37364.,  37928.,  38492.,  39056.,  48840.,  49600.,  50360.,  51120.,
      59800.,  60760.,  61720.,  62680.,  60980.,  61960.,  62940.,  63920.,
      47624.,  48416.,  49208.,  50000.,  34832.,  35432.,  36032.,  36632.,
      43390.,  44140.,  44890.,  45640.,  56410.,  57420.,  58430.,  59440.,
      68675.,  69950.,  71225.,  72500.,  69900.,  71200.,  72500.,  73800.,
      54250.,  55300.,  56350.,  57400.,  39415.,  40210.,  41005.,  41800.,
      48160.,  49000.,  49840.,  50680.,  62530.,  63660.,  64790.,  65920.,
      76025.,  77450.,  78875.,  80300.,  77250.,  78700.,  80150.,  81600.,
      59890.,  61060.,  62230.,  63400.,  43465.,  44350.,  45235.,  46120.,
      32276.,  32984.,  33692.,  34400.,  41512.,  42464.,  43416.,  44368.,
      49960.,  51160.,  52360.,  53560.,  50740.,  51960.,  53180.,  54400.,
      38888.,  39872.,  40856.,  41840.,  27872.,  28616.,  29360.,  30104.,
      19158.,  19716.,  20274.,  20832.,  24270.,  25020.,  25770.,  26520.,
      28725.,  29670.,  30615.,  31560.,  29160.,  30120.,  31080.,  32040.,
      21918.,  22692.,  23466.,  24240.,  15369.,  15954.,  16539.,  17124.,
      53304.,  54024.,  54744.,  55464.,  69606.,  70572.,  71538.,  72504.,
      85155.,  86370.,  87585.,  88800.,  86190.,  87420.,  88650.,  89880.,
      67350.,  68340.,  69330.,  70320.,  49299.,  50046.,  50793.,  51540.,
      64580.,  65576.,  66572.,  67568.,  83976.,  85312.,  86648.,  87984.,
      102280., 103960., 105640., 107320., 103460., 105160., 106860., 108560.,
      80456.,  81824.,  83192.,  84560.,  58592.,  59624.,  60656.,  61688.,
      72010.,  73300.,  74590.,  75880.,  93130.,  94860.,  96590.,  98320.,
      112775., 114950., 117125., 119300., 114000., 116200., 118400., 120600.,
      88090.,  89860.,  91630.,  93400.,  63715.,  65050.,  66385.,  67720.,
      76780.,  78160.,  79540.,  80920.,  99250.,  101100., 102950., 104800.,
      120125., 122450., 124775., 127100., 121350., 123700., 126050., 128400.,
      93730.,  95620.,  97510.,  99400.,  67765.,  69190.,  70615.,  72040.,
      50852.,  51992.,  53132.,  54272.,  65128.,  66656.,  68184.,  69712.,
      78040.,  79960.,  81880.,  83800.,  78820.,  80760.,  82700.,  84640.,
      60200.,  61760.,  63320.,  64880.,  42992.,  44168.,  45344.,  46520.,
      29850.,  30732.,  31614.,  32496.,  37662.,  38844.,  40026.,  41208.,
      44385.,  45870.,  47355.,  48840.,  44820.,  46320.,  47820.,  49320.,
      33582.,  34788.,  35994.,  37200.,  23469.,  24378.,  25287.,  26196.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      68675.,  69950.,  71225.,  72500.,  69900.,  71200.,  72500.,  73800.,
      76025.,  77450.,  78875.,  80300.,  77250.,  78700.,  80150.,  81600.,
      112775., 114950., 117125., 119300., 114000., 116200., 118400., 120600.,
      120125., 122450., 124775., 127100., 121350., 123700., 126050., 128400.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,   6216.,   7932.,   8568.,   10245.,  11040.,  11295.,  12120.,
      9180.,   9840.,   6981.,   7476.,   9896.,   10544.,  13392.,  14256.,
      16960.,  18040.,  18160.,  19280.,  14544.,  15440.,  10904.,  11576.,
      14575.,  15400.,  19460.,  20560.,  24325.,  25700.,  25575.,  27000.,
      20260.,  21400.,  15025.,  15880.,  19435.,  20440.,  25700.,  27040.,
      31825.,  33500.,  33075.,  34800.,  26020.,  27400.,  19165.,  20200.,
      13712.,  14528.,  17936.,  19024.,  21960.,  23320.,  22760.,  24160.,
      17680.,  18800.,  12848.,  13688.,  8547.,   9168.,   11004.,  11832.,
      13245.,  14280.,  13695.,  14760.,  10428.,  11280.,  7413.,   8052.,
      29715.,  30840.,  39036.,  40536.,  48045.,  49920.,  49095.,  51000.,
      38556.,  40080.,  28365.,  29508.,  37544.,  39056.,  49104.,  51120.,
      60160.,  62680.,  61360.,  63920.,  47952.,  50000.,  35096.,  36632.,
      43735.,  45640.,  56900.,  59440.,  69325.,  72500.,  70575.,  73800.,
      54820.,  57400.,  39865.,  41800.,  48595.,  50680.,  63140.,  65920.,
      76825.,  80300.,  78075.,  81600.,  60580.,  63400.,  44005.,  46120.,
      32720.,  34400.,  42128.,  44368.,  50760.,  53560.,  51560.,  54400.,
      39568.,  41840.,  28400.,  30104.,  19563.,  20832.,  24828.,  26520.,
      29445.,  31560.,  29895.,  32040.,  22524.,  24240.,  15837.,  17124.,
      53691.,  55464.,  70140.,  72504.,  85845.,  88800.,  86895.,  89880.,
      67932.,  70320.,  49749.,  51540.,  65192.,  67568.,  84816.,  87984.,
      103360., 107320., 104560., 108560., 81360.,  84560.,  59288.,  61688.,
      72895.,  75880.,  94340.,  98320.,  114325., 119300., 115575., 120600.,
      89380.,  93400.,  64705.,  67720.,  77755.,  80920.,  100580., 104800.,
      121825., 127100., 123075., 128400., 95140.,  99400.,  68845.,  72040.,
      51728.,  54272.,  66320.,  69712.,  79560.,  83800.,  80360.,  84640.,
      61456.,  64880.,  43952.,  46520.,  30579.,  32496.,  38652.,  41208.,
      45645.,  48840.,  46095.,  49320.,  34620.,  37200.,  24261.,  26196.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24325.,  25700.,  25575.,  27000.,  31825.,  33500.,  33075.,  34800.,
      69325.,  72500.,  70575.,  73800.,  76825.,  80300.,  78075.,  81600.,
      114325., 119300., 115575., 120600., 121825., 127100., 123075., 128400.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343.,  11478.,  12288.,  12432.,  15672.,  15864.,  16932.,  17136.,
      20235.,  20490.,  21810.,  22080.,  22305.,  22590.,  23940.,  24240.,
      18120.,  18360.,  19428.,  19680.,  13773.,  13962.,  14754.,  14952.,
      19540.,  19792.,  20824.,  21088.,  26432.,  26784.,  28144.,  28512.,
      33460.,  33920.,  35600.,  36080.,  35820.,  36320.,  38040.,  38560.,
      28672.,  29088.,  30448.,  30880.,  21484.,  21808.,  22816.,  23152.,
      28745.,  29150.,  30380.,  30800.,  38360.,  38920.,  40540.,  41120.,
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      39880.,  40520.,  42140.,  42800.,  29555.,  30050.,  31250.,  31760.,
      38285.,  38870.,  40280.,  40880.,  50600.,  51400.,  53260.,  54080.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      51160.,  52040.,  53900.,  54800.,  37655.,  38330.,  39710.,  40400.,
      26884.,  27424.,  28504.,  29056.,  35136.,  35872.,  37296.,  38048.,
      42980.,  43920.,  45680.,  46640.,  44540.,  45520.,  47320.,  48320.,
      34560.,  35360.,  36784.,  37600.,  25084.,  25696.,  26752.,  27376.,
      16635.,  17094.,  17868.,  18336.,  21384.,  22008.,  23028.,  23664.,
      25695.,  26490.,  27750.,  28560.,  26565.,  27390.,  28680.,  29520.,
      20184.,  20856.,  21876.,  22560.,  14313.,  14826.,  15582.,  16104.,
      58647.,  59430.,  60888.,  61680.,  77016.,  78072.,  80004.,  81072.,
      94755.,  96090.,  98490.,  99840.,  96825.,  98190.,  100620., 102000.,
      76008.,  77112.,  79044.,  80160.,  55893.,  56730.,  58170.,  59016.,
      73972.,  75088.,  76984.,  78112.,  96704.,  98208.,  100720., 102240.,
      118420., 120320., 123440., 125360., 120780., 122720., 125880., 127840.,
      94336.,  95904.,  98416.,  100000., 69004.,  70192.,  72064.,  73264.,
      85985.,  87470.,  89780.,  91280.,  111800., 113800., 116860., 118880.,
      136125., 138650., 142450., 145000., 138575., 141150., 145000., 147600.,
      107560., 109640., 112700., 114800., 78155.,  79730.,  82010.,  83600.,
      95525.,  97190.,  99680.,  101360., 124040., 126280., 129580., 131840.,
      150825., 153650., 157750., 160600., 153275., 156150., 160300., 163200.,
      118840., 121160., 124460., 126800., 86255.,  88010.,  90470.,  92240.,
      64036.,  65440.,  67384.,  68800.,  82368.,  84256.,  86832.,  88736.,
      99140.,  101520., 104720., 107120., 100700., 103120., 106360., 108800.,
      77184.,  79136.,  81712.,  83680.,  55324.,  56800.,  58720.,  60208.,
      38019.,  39126.,  40548.,  41664.,  48168.,  49656.,  51540.,  53040.,
      57015.,  58890.,  61230.,  63120.,  57885.,  59790.,  62160.,  64080.,
      43512.,  45048.,  46932.,  48480.,  30513.,  31674.,  33078.,  34248.,
      105951., 107382., 109488., 110928., 138360., 140280., 143076., 145008.,
      169275., 171690., 175170., 177600., 171345., 173790., 177300., 179760.,
      133896., 135864., 138660., 140640., 98013.,  99498.,  101586., 103080.,
      128404., 130384., 133144., 135136., 166976., 169632., 173296., 175968.,
      203380., 206720., 211280., 214640., 205740., 209120., 213720., 217120.,
      160000., 162720., 166384., 169120., 116524., 118576., 121312., 123376.,
      143225., 145790., 149180., 151760., 185240., 188680., 193180., 196640.,
      224325., 228650., 234250., 238600., 226775., 231150., 236800., 241200.,
      175240., 178760., 183260., 186800., 126755., 129410., 132770., 135440.,
      152765., 155510., 159080., 161840., 197480., 201160., 205900., 209600.,
      239025., 243650., 249550., 254200., 241475., 246150., 252100., 256800.,
      186520., 190280., 195020., 198800., 134855., 137690., 141230., 144080.,
      101188., 103456., 106264., 108544., 129600., 132640., 136368., 139424.,
      155300., 159120., 163760., 167600., 156860., 160720., 165400., 169280.,
      119808., 122912., 126640., 129760., 85564.,  87904.,  90688.,  93040.,
      59403.,  61158.,  63228.,  64992.,  74952.,  77304.,  80052.,  82416.,
      88335.,  91290.,  94710.,  97680.,  89205.,  92190.,  95640.,  98640.,
      66840.,  69240.,  71988.,  74400.,  46713.,  48522.,  50574.,  52392.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      136125., 138650., 142450., 145000., 138575., 141150., 145000., 147600.,
      150825., 153650., 157750., 160600., 153275., 156150., 160300., 163200.,
      224325., 228650., 234250., 238600., 226775., 231150., 236800., 241200.,
      239025., 243650., 249550., 254200., 241475., 246150., 252100., 256800.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      53228.,  53768.,  54308.,  54848.,  56456.,  57008.,  57560.,  58112.,
      69536.,  70272.,  71008.,  71744.,  73840.,  74592.,  75344.,  76096.,
      85020.,  85960.,  86900.,  87840.,  90400.,  91360.,  92320.,  93280.,
      88100.,  89080.,  90060.,  91040.,  93640.,  94640.,  95640.,  96640.,
      68320.,  69120.,  69920.,  70720.,  72752.,  73568.,  74384.,  75200.,
      49556.,  50168.,  50780.,  51392.,  52880.,  53504.,  54128.,  54752.,
      32811.,  33270.,  33729.,  34188.,  35268.,  35736.,  36204.,  36672.,
      42144.,  42768.,  43392.,  44016.,  45420.,  46056.,  46692.,  47328.,
      50595.,  51390.,  52185.,  52980.,  54690.,  55500.,  56310.,  57120.,
      52305.,  53130.,  53955.,  54780.,  56520.,  57360.,  58200.,  59040.,
      39696.,  40368.,  41040.,  41712.,  43068.,  43752.,  44436.,  45120.,
      28113.,  28626.,  29139.,  29652.,  30642.,  31164.,  31686.,  32208.,
      116511., 117294., 118077., 118860., 120984., 121776., 122568., 123360.,
      152976., 154032., 155088., 156144., 158940., 160008., 161076., 162144.,
      188175., 189510., 190845., 192180., 195630., 196980., 198330., 199680.,
      192285., 193650., 195015., 196380., 199860., 201240., 202620., 204000.,
      150912., 152016., 153120., 154224., 156972., 158088., 159204., 160320.,
      110949., 111786., 112623., 113460., 115494., 116340., 117186., 118032.,
      146828., 147944., 149060., 150176., 152840., 153968., 155096., 156224.,
      191904., 193408., 194912., 196416., 199920., 201440., 202960., 204480.,
      234940., 236840., 238740., 240640., 244960., 246880., 248800., 250720.,
      239620., 241560., 243500., 245440., 249800., 251760., 253720., 255680.,
      187104., 188672., 190240., 191808., 195248., 196832., 198416., 200000.,
      136820., 138008., 139196., 140384., 142928., 144128., 145328., 146528.,
      170485., 171970., 173455., 174940., 178060., 179560., 181060., 182560.,
      221600., 223600., 225600., 227600., 231700., 233720., 235740., 237760.,
      269725., 272250., 274775., 277300., 282350., 284900., 287450., 290000.,
      274575., 277150., 279725., 282300., 287400., 290000., 292600., 295200.,
      213040., 215120., 217200., 219280., 223300., 225400., 227500., 229600.,
      154735., 156310., 157885., 159460., 162430., 164020., 165610., 167200.,
      189385., 191050., 192715., 194380., 197680., 199360., 201040., 202720.,
      245840., 248080., 250320., 252560., 256900., 259160., 261420., 263680.,
      298825., 301650., 304475., 307300., 312650., 315500., 318350., 321200.,
      303675., 306550., 309425., 312300., 317700., 320600., 323500., 326400.,
      235360., 237680., 240000., 242320., 246580., 248920., 251260., 253600.,
      170755., 172510., 174265., 176020., 179170., 180940., 182710., 184480.,
      126668., 128072., 129476., 130880., 133352., 134768., 136184., 137600.,
      162848., 164736., 166624., 168512., 171760., 173664., 175568., 177472.,
      195900., 198280., 200660., 203040., 207040., 209440., 211840., 214240.,
      198980., 201400., 203820., 206240., 210280., 212720., 215160., 217600.,
      152416., 154368., 156320., 158272., 161456., 163424., 165392., 167360.,
      109172., 110648., 112124., 113600., 115952., 117440., 118928., 120416.,
      74931.,  76038.,  77145.,  78252.,  79980.,  81096.,  82212.,  83328.,
      94848.,  96336.,  97824.,  99312.,  101580., 103080., 104580., 106080.,
      112155., 114030., 115905., 117780., 120570., 122460., 124350., 126240.,
      113865., 115770., 117675., 119580., 122400., 124320., 126240., 128160.,
      85488.,  87024.,  88560.,  90096.,  92316.,  93864.,  95412.,  96960.,
      59865.,  61026.,  62187.,  63348.,  64986.,  66156.,  67326.,  68496.,
      210471., 211902., 213333., 214764., 217536., 218976., 220416., 221856.,
      274800., 276720., 278640., 280560., 284220., 286152., 288084., 290016.,
      336135., 338550., 340965., 343380., 347910., 350340., 352770., 355200.,
      340245., 342690., 345135., 347580., 352140., 354600., 357060., 359520.,
      265824., 267792., 269760., 271728., 275340., 277320., 279300., 281280.,
      194541., 196026., 197511., 198996., 201678., 203172., 204666., 206160.,
      254828., 256808., 258788., 260768., 264296., 266288., 268280., 270272.,
      331296., 333952., 336608., 339264., 343920., 346592., 349264., 351936.,
      403420., 406760., 410100., 413440., 419200., 422560., 425920., 429280.,
      408100., 411480., 414860., 418240., 424040., 427440., 430840., 434240.,
      317280., 320000., 322720., 325440., 330032., 332768., 335504., 338240.,
      230996., 233048., 235100., 237152., 240560., 242624., 244688., 246752.,
      283885., 286450., 289015., 291580., 295780., 298360., 300940., 303520.,
      367040., 370480., 373920., 377360., 382900., 386360., 389820., 393280.,
      444325., 448650., 452975., 457300., 464150., 468500., 472850., 477200.,
      449175., 453550., 457925., 462300., 469200., 473600., 478000., 482400.,
      346960., 350480., 354000., 357520., 362980., 366520., 370060., 373600.,
      250855., 253510., 256165., 258820., 262870., 265540., 268210., 270880.,
      302785., 305530., 308275., 311020., 315400., 318160., 320920., 323680.,
      391280., 394960., 398640., 402320., 408100., 411800., 415500., 419200.,
      473425., 478050., 482675., 487300., 494450., 499100., 503750., 508400.,
      478275., 482950., 487625., 492300., 499500., 504200., 508900., 513600.,
      369280., 373040., 376800., 380560., 386260., 390040., 393820., 397600.,
      266875., 269710., 272545., 275380., 279610., 282460., 285310., 288160.,
      200108., 202376., 204644., 206912., 210248., 212528., 214808., 217088.,
      256160., 259200., 262240., 265280., 269680., 272736., 275792., 278848.,
      306780., 310600., 314420., 318240., 323680., 327520., 331360., 335200.,
      309860., 313720., 317580., 321440., 326920., 330800., 334680., 338560.,
      236512., 239616., 242720., 245824., 250160., 253280., 256400., 259520.,
      168788., 171128., 173468., 175808., 179024., 181376., 183728., 186080.,
      117051., 118806., 120561., 122316., 124692., 126456., 128220., 129984.,
      147552., 149904., 152256., 154608., 157740., 160104., 162468., 164832.,
      173715., 176670., 179625., 182580., 186450., 189420., 192390., 195360.,
      175425., 178410., 181395., 184380., 188280., 191280., 194280., 197280.,
      131280., 133680., 136080., 138480., 141564., 143976., 146388., 148800.,
      91617.,  93426.,  95235.,  97044.,  99330.,  101148., 102966., 104784.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      269725., 272250., 274775., 277300., 282350., 284900., 287450., 290000.,
      274575., 277150., 279725., 282300., 287400., 290000., 292600., 295200.,
      298825., 301650., 304475., 307300., 312650., 315500., 318350., 321200.,
      303675., 306550., 309425., 312300., 317700., 320600., 323500., 326400.,
      444325., 448650., 452975., 457300., 464150., 468500., 472850., 477200.,
      449175., 453550., 457925., 462300., 469200., 473600., 478000., 482400.,
      473425., 478050., 482675., 487300., 494450., 499100., 503750., 508400.,
      478275., 482950., 487625., 492300., 499500., 504200., 508900., 513600.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      53252.,  54848.,  56468.,  58112.,  69616.,  71744.,  73904.,  76096.,
      85180.,  87840.,  90540.,  93280.,  88300.,  91040.,  93820.,  96640.,
      68528.,  70720.,  72944.,  75200.,  49748.,  51392.,  53060.,  54752.,
      32973.,  34188.,  35421.,  36672.,  42396.,  44016.,  45660.,  47328.,
      50955.,  52980.,  55035.,  57120.,  52695.,  54780.,  56895.,  59040.,
      40044.,  41712.,  43404.,  45120.,  28401.,  29652.,  30921.,  32208.,
      116637., 118860., 121101., 123360., 153180., 156144., 159132., 162144.,
      188475., 192180., 195915., 199680., 192615., 196380., 200175., 204000.,
      151212., 154224., 157260., 160320., 111201., 113460., 115737., 118032.,
      147188., 150176., 153188., 156224., 192432., 196416., 200432., 204480.,
      235660., 240640., 245660., 250720., 240380., 245440., 250540., 255680.,
      187760., 191808., 195888., 200000., 137348., 140384., 143444., 146528.,
      171175., 174940., 178735., 182560., 222580., 227600., 232660., 237760.,
      271025., 277300., 283625., 290000., 275925., 282300., 288725., 295200.,
      214180., 219280., 224420., 229600., 155635., 159460., 163315., 167200.,
      190255., 194380., 198535., 202720., 247060., 252560., 258100., 263680.,
      300425., 307300., 314225., 321200., 305325., 312300., 319325., 326400.,
      236740., 242320., 247940., 253600., 171835., 176020., 180235., 184480.,
      127556., 130880., 134228., 137600., 164080., 168512., 172976., 177472.,
      197500., 203040., 208620., 214240., 200620., 206240., 211900., 217600.,
      153776., 158272., 162800., 167360., 110228., 113600., 116996., 120416.,
      75741.,  78252.,  80781.,  83328.,  95964.,  99312.,  102684., 106080.,
      113595., 117780., 121995., 126240., 115335., 119580., 123855., 128160.,
      86700.,  90096.,  93516.,  96960.,  60801.,  63348.,  65913.,  68496.,
      211245., 214764., 218301., 221856., 275868., 280560., 285276., 290016.,
      337515., 343380., 349275., 355200., 341655., 347580., 353535., 359520.,
      266988., 271728., 276492., 281280., 195441., 198996., 202569., 206160.,
      256052., 260768., 265508., 270272., 332976., 339264., 345584., 351936.,
      405580., 413440., 421340., 429280., 410300., 418240., 426220., 434240.,
      319088., 325440., 331824., 338240., 232388., 237152., 241940., 246752.,
      285655., 291580., 297535., 303520., 369460., 377360., 385300., 393280.,
      447425., 457300., 467225., 477200., 452325., 462300., 472325., 482400.,
      349540., 357520., 365540., 373600., 252835., 258820., 264835., 270880.,
      304735., 311020., 317335., 323680., 393940., 402320., 410740., 419200.,
      476825., 487300., 497825., 508400., 481725., 492300., 502925., 513600.,
      372100., 380560., 389060., 397600., 269035., 275380., 281755., 288160.,
      201860., 206912., 211988., 217088., 258544., 265280., 272048., 278848.,
      309820., 318240., 326700., 335200., 312940., 321440., 329980., 338560.,
      239024., 245824., 252656., 259520., 170708., 175808., 180932., 186080.,
      118509., 122316., 126141., 129984., 149532., 154608., 159708., 164832.,
      176235., 182580., 188955., 195360., 177975., 184380., 190815., 197280.,
      133356., 138480., 143628., 148800., 93201.,  97044.,  100905., 104784.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      271025., 277300., 283625., 290000., 275925., 282300., 288725., 295200.,
      300425., 307300., 314225., 321200., 305325., 312300., 319325., 326400.,
      447425., 457300., 467225., 477200., 452325., 462300., 472325., 482400.,
      476825., 487300., 497825., 508400., 481725., 492300., 502925., 513600.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,  44058.,  45642.,  45912.,  47523.,  47802.,   49440.,   49728.,
      60612.,  60984.,  63072.,  63456.,  65580.,  65976.,   68136.,   68544.,
      78375.,  78870.,  81450.,  81960.,  84585.,  85110.,   87780.,   88320.,
      86595.,  87150.,  89790.,  90360.,  93045.,  93630.,   96360.,   96960.,
      70404.,  70872.,  72960.,  73440.,  75564.,  76056.,   78216.,   78720.,
      53553.,  53922.,  55470.,  55848.,  57423.,  57810.,   59412.,   59808.,
      76156.,  76648.,  78664.,  79168.,  81220.,  81736.,   83824.,   84352.,
      103088., 103776., 106432., 107136., 109840., 110560.,  113312.,  114048.,
      130580., 131480., 134760., 135680., 139020., 139960.,  143360.,  144320.,
      139940., 140920., 144280., 145280., 148700., 149720.,  153200.,  154240.,
      112048., 112864., 115520., 116352., 119056., 119904.,  122656.,  123520.,
      83980.,  84616.,  86584.,  87232.,  89236.,  89896.,   91936.,   92608.,
      112595., 113390., 115790., 116600., 119045., 119870.,  122360.,  123200.,
      150300., 151400., 154560., 155680., 158900., 160040.,  163320.,  164480.,
      187825., 189250., 193150., 194600., 198575., 200050.,  204100.,  205600.,
      197525., 199050., 203050., 204600., 208675., 210250.,  214400.,  216000.,
      156380., 157640., 160800., 162080., 165300., 166600.,  169880.,  171200.,
      115895., 116870., 119210., 120200., 122585., 123590.,  126020.,  127040.,
      150395., 151550., 154310., 155480., 158285., 159470.,  162320.,  163520.,
      198780., 200360., 204000., 205600., 209300., 210920.,  214680.,  216320.,
      246025., 248050., 252550., 254600., 259175., 261250.,  265900.,  268000.,
      255725., 257850., 262450., 264600., 269275., 271450.,  276200.,  278400.,
      201020., 202760., 206400., 208160., 211860., 213640.,  217400.,  219200.,
      147935., 149270., 151970., 153320., 156065., 157430.,  160220.,  161600.,
      105436., 106504., 108616., 109696., 111844., 112936.,  115120.,  116224.,
      137776., 139232., 142016., 143488., 146320., 147808.,  150688.,  152192.,
      168500., 170360., 173800., 175680., 179180., 181080.,  184640.,  186560.,
      174660., 176600., 180120., 182080., 185660., 187640.,  191280.,  193280.,
      135472., 137056., 139840., 141440., 144272., 145888.,  148768.,  150400.,
      98284.,  99496.,  101560., 102784., 104884., 106120.,  108256.,  109504.,
      65037.,  65946.,  67458.,  68376.,  69915.,  70842.,   72408.,   73344.,
      83556.,  84792.,  86784.,  88032.,  90060.,  91320.,   93384.,   94656.,
      100335., 101910., 104370., 105960., 108465., 110070.,  112620.,  114240.,
      103755., 105390., 107910., 109560., 112125., 113790.,  116400.,  118080.,
      78756.,  80088.,  82080.,  83424.,  85452.,  86808.,   88872.,   90240.,
      55785.,  56802.,  58278.,  59304.,  60807.,  61842.,   63372.,   64416.,
      231717., 233274., 236154., 237720., 240627., 242202.,  245136.,  246720.,
      304260., 306360., 310176., 312288., 316140., 318264.,  322152.,  324288.,
      374295., 376950., 381690., 384360., 389145., 391830.,  396660.,  399360.,
      382515., 385230., 390030., 392760., 397605., 400350.,  405240.,  408000.,
      300228., 302424., 306240., 308448., 312300., 314520.,  318408.,  320640.,
      220737., 222402., 225246., 226920., 229791., 231474.,  234372.,  236064.,
      292156., 294376., 298120., 300352., 304132., 306376.,  310192.,  312448.,
      381872., 384864., 389824., 392832., 397840., 400864.,  405920.,  408960.,
      467540., 471320., 477480., 481280., 487500., 491320.,  497600.,  501440.,
      476900., 480760., 487000., 490880., 497180., 501080.,  507440.,  511360.,
      372400., 375520., 380480., 383616., 388624., 391776.,  396832.,  400000.,
      272332., 274696., 278392., 280768., 284500., 286888.,  290656.,  293056.,
      339395., 342350., 346910., 349880., 354485., 357470.,  362120.,  365120.,
      441180., 445160., 451200., 455200., 461300., 465320.,  471480.,  475520.,
      537025., 542050., 549550., 554600., 562175., 567250.,  574900.,  580000.,
      546725., 551850., 559450., 564600., 572275., 577450.,  585200.,  590400.,
      424220., 428360., 434400., 438560., 444660., 448840.,  455000.,  459200.,
      308135., 311270., 315770., 318920., 323465., 326630.,  331220.,  334400.,
      377195., 380510., 385430., 388760., 393725., 397070.,  402080.,  405440.,
      489660., 494120., 500640., 505120., 511700., 516200.,  522840.,  527360.,
      595225., 600850., 608950., 614600., 622775., 628450.,  636700.,  642400.,
      604925., 610650., 618850., 624600., 632875., 638650.,  647000.,  652800.,
      468860., 473480., 480000., 484640., 491220., 495880.,  502520.,  507200.,
      340175., 343670., 348530., 352040., 356945., 360470.,  365420.,  368960.,
      252316., 255112., 258952., 261760., 265636., 268456.,  272368.,  275200.,
      324400., 328160., 333248., 337024., 342160., 345952.,  351136.,  354944.,
      390260., 395000., 401320., 406080., 412460., 417240.,  423680.,  428480.,
      396420., 401240., 407640., 412480., 418940., 423800.,  430320.,  435200.,
      303664., 307552., 312640., 316544., 321680., 325600.,  330784.,  334720.,
      217516., 220456., 224248., 227200., 231028., 233992.,  237856.,  240832.,
      149277., 151482., 154290., 156504., 159339., 161562.,  164424.,  166656.,
      188964., 191928., 195648., 198624., 202380., 205368.,  209160.,  212160.,
      223455., 227190., 231810., 235560., 240225., 243990.,  248700.,  252480.,
      226875., 230670., 235350., 239160., 243885., 247710.,  252480.,  256320.,
      170340., 173400., 177120., 180192., 183948., 187032.,  190824.,  193920.,
      119289., 121602., 124374., 126696., 129495., 131826.,  134652.,  136992.,
      419637., 422490., 426666., 429528., 433731., 436602.,  440832.,  443712.,
      547908., 551736., 557280., 561120., 566700., 570552.,  576168.,  580032.,
      670215., 675030., 681930., 686760., 693705., 698550.,  705540.,  710400.,
      678435., 683310., 690270., 695160., 702165., 707070.,  714120.,  719040.,
      530052., 533976., 539520., 543456., 549036., 552984.,  558600.,  562560.,
      387921., 390882., 395022., 397992., 402159., 405138.,  409332.,  412320.,
      508156., 512104., 517576., 521536., 527044., 531016.,  536560.,  540544.,
      660656., 665952., 673216., 678528., 685840., 691168.,  698528.,  703872.,
      804500., 811160., 820200., 826880., 835980., 842680.,  851840.,  858560.,
      813860., 820600., 829720., 836480., 845660., 852440.,  861680.,  868480.,
      632752., 638176., 645440., 650880., 658192., 663648.,  671008.,  676480.,
      460684., 464776., 470200., 474304., 479764., 483880.,  489376.,  493504.,
      566195., 571310., 578030., 583160., 589925., 595070.,  601880.,  607040.,
      732060., 738920., 747840., 754720., 763700., 770600.,  779640.,  786560.,
      886225., 894850., 905950., 914600., 925775., 934450.,  945700.,  954400.,
      895925., 904650., 915850., 924600., 935875., 944650.,  956000.,  964800.,
      692060., 699080., 708000., 715040., 724020., 731080.,  740120.,  747200.,
      500375., 505670., 512330., 517640., 524345., 529670.,  536420.,  541760.,
      603995., 609470., 616550., 622040., 629165., 634670.,  641840.,  647360.,
      780540., 787880., 797280., 804640., 814100., 821480.,  831000.,  838400.,
      944425., 953650., 965350., 974600., 986375., 995650.,  1007500., 1016800.,
      954125., 963450., 975250., 984600., 996475., 1005850., 1017800., 1027200.,
      736700., 744200., 753600., 761120., 770580., 778120.,  787640.,  795200.,
      532415., 538070., 545090., 550760., 557825., 563510.,  570620.,  576320.,
      399196., 403720., 409288., 413824., 419428., 423976.,  429616.,  434176.,
      511024., 517088., 524480., 530560., 538000., 544096.,  551584.,  557696.,
      612020., 619640., 628840., 636480., 645740., 653400.,  662720.,  670400.,
      618180., 625880., 635160., 642880., 652220., 659960.,  669360.,  677120.,
      471856., 478048., 485440., 491648., 499088., 505312.,  512800.,  519040.,
      336748., 341416., 346936., 351616., 357172., 361864.,  367456.,  372160.,
      233517., 237018., 241122., 244632., 248763., 252282.,  256440.,  259968.,
      294372., 299064., 304512., 309216., 314700., 319416.,  324936.,  329664.,
      346575., 352470., 359250., 365160., 371985., 377910.,  384780.,  390720.,
      349995., 355950., 362790., 368760., 375645., 381630.,  388560.,  394560.,
      261924., 266712., 272160., 276960., 282444., 287256.,  292776.,  297600.,
      182793., 186402., 190470., 194088., 198183., 201810.,  205932.,  209568.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825., 189250., 193150.,  194600.,  198575., 200050., 204100.,
      205600., 197525., 199050.,  203050.,  204600., 208675., 210250.,
      214400., 216000., 246025.,  248050.,  252550., 254600., 259175.,
      261250., 265900., 268000.,  255725.,  257850., 262450., 264600.,
      269275., 271450., 276200.,  278400.,  537025., 542050., 549550.,
      554600., 562175., 567250.,  574900.,  580000., 546725., 551850.,
      559450., 564600., 572275.,  577450.,  585200., 590400., 595225.,
      600850., 608950., 614600.,  622775.,  628450., 636700., 642400.,
      604925., 610650., 618850.,  624600.,  632875., 638650., 647000.,
      652800., 886225., 894850.,  905950.,  914600., 925775., 934450.,
      945700., 954400., 895925.,  904650.,  915850., 924600., 935875.,
      944650., 956000., 964800.,  944425.,  953650., 965350., 974600.,
      986375., 995650., 1007500., 1016800., 954125., 963450., 975250.,
      984600., 996475., 1005850., 1017800., 1027200.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,   87594.,   87855.,   88116.,   91014.,   91284.,   91554.,
      91824.,   94767.,   95046.,   95325.,   95604.,   98592.,   98880.,
      99168.,   99456.,   120852.,  121224.,  121596.,  121968.,  125760.,
      126144.,  126528.,  126912.,  130764.,  131160.,  131556.,  131952.,
      135864.,  136272.,  136680.,  137088.,  156255.,  156750.,  157245.,
      157740.,  162390.,  162900.,  163410.,  163920.,  168645.,  169170.,
      169695.,  170220.,  175020.,  175560.,  176100.,  176640.,  172635.,
      173190.,  173745.,  174300.,  179010.,  179580.,  180150.,  180720.,
      185505.,  186090.,  186675.,  187260.,  192120.,  192720.,  193320.,
      193920.,  140340.,  140808.,  141276.,  141744.,  145440.,  145920.,
      146400.,  146880.,  150636.,  151128.,  151620.,  152112.,  155928.,
      156432.,  156936.,  157440.,  106737.,  107106.,  107475.,  107844.,
      110562.,  110940.,  111318.,  111696.,  114459.,  114846.,  115233.,
      115620.,  118428.,  118824.,  119220.,  119616.,  151820.,  152312.,
      152804.,  153296.,  156824.,  157328.,  157832.,  158336.,  161924.,
      162440.,  162956.,  163472.,  167120.,  167648.,  168176.,  168704.,
      205488.,  206176.,  206864.,  207552.,  212160.,  212864.,  213568.,
      214272.,  218960.,  219680.,  220400.,  221120.,  225888.,  226624.,
      227360.,  228096.,  260260.,  261160.,  262060.,  262960.,  268600.,
      269520.,  270440.,  271360.,  277100.,  278040.,  278980.,  279920.,
      285760.,  286720.,  287680.,  288640.,  278900.,  279880.,  280860.,
      281840.,  287560.,  288560.,  289560.,  290560.,  296380.,  297400.,
      298420.,  299440.,  305360.,  306400.,  307440.,  308480.,  223280.,
      224096.,  224912.,  225728.,  230208.,  231040.,  231872.,  232704.,
      237264.,  238112.,  238960.,  239808.,  244448.,  245312.,  246176.,
      247040.,  167324.,  167960.,  168596.,  169232.,  172520.,  173168.,
      173816.,  174464.,  177812.,  178472.,  179132.,  179792.,  183200.,
      183872.,  184544.,  185216.,  224395.,  225190.,  225985.,  226780.,
      230770.,  231580.,  232390.,  233200.,  237265.,  238090.,  238915.,
      239740.,  243880.,  244720.,  245560.,  246400.,  299500.,  300600.,
      301700.,  302800.,  308000.,  309120.,  310240.,  311360.,  316660.,
      317800.,  318940.,  320080.,  325480.,  326640.,  327800.,  328960.,
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  311500.,  312760.,  314020.,
      315280.,  320320.,  321600.,  322880.,  324160.,  329300.,  330600.,
      331900.,  333200.,  338440.,  339760.,  341080.,  342400.,  230815.,
      231790.,  232765.,  233740.,  237430.,  238420.,  239410.,  240400.,
      244165.,  245170.,  246175.,  247180.,  251020.,  252040.,  253060.,
      254080.,  299635.,  300790.,  301945.,  303100.,  307450.,  308620.,
      309790.,  310960.,  315385.,  316570.,  317755.,  318940.,  323440.,
      324640.,  325840.,  327040.,  395980.,  397560.,  399140.,  400720.,
      406400.,  408000.,  409600.,  411200.,  416980.,  418600.,  420220.,
      421840.,  427720.,  429360.,  431000.,  432640.,  490025.,  492050.,
      494075.,  496100.,  503050.,  505100.,  507150.,  509200.,  516275.,
      518350.,  520425.,  522500.,  529700.,  531800.,  533900.,  536000.,
      509325.,  511450.,  513575.,  515700.,  522750.,  524900.,  527050.,
      529200.,  536375.,  538550.,  540725.,  542900.,  550200.,  552400.,
      554600.,  556800.,  400300.,  402040.,  403780.,  405520.,  411040.,
      412800.,  414560.,  416320.,  421940.,  423720.,  425500.,  427280.,
      433000.,  434800.,  436600.,  438400.,  294535.,  295870.,  297205.,
      298540.,  302590.,  303940.,  305290.,  306640.,  310765.,  312130.,
      313495.,  314860.,  319060.,  320440.,  321820.,  323200.,  209804.,
      210872.,  211940.,  213008.,  216152.,  217232.,  218312.,  219392.,
      222596.,  223688.,  224780.,  225872.,  229136.,  230240.,  231344.,
      232448.,  274096.,  275552.,  277008.,  278464.,  282560.,  284032.,
      285504.,  286976.,  291152.,  292640.,  294128.,  295616.,  299872.,
      301376.,  302880.,  304384.,  335140.,  337000.,  338860.,  340720.,
      345720.,  347600.,  349480.,  351360.,  356460.,  358360.,  360260.,
      362160.,  367360.,  369280.,  371200.,  373120.,  347380.,  349320.,
      351260.,  353200.,  358280.,  360240.,  362200.,  364160.,  369340.,
      371320.,  373300.,  375280.,  380560.,  382560.,  384560.,  386560.,
      269360.,  270944.,  272528.,  274112.,  278080.,  279680.,  281280.,
      282880.,  286928.,  288544.,  290160.,  291776.,  295904.,  297536.,
      299168.,  300800.,  195356.,  196568.,  197780.,  198992.,  201896.,
      203120.,  204344.,  205568.,  208532.,  209768.,  211004.,  212240.,
      215264.,  216512.,  217760.,  219008.,  129165.,  130074.,  130983.,
      131892.,  133998.,  134916.,  135834.,  136752.,  138903.,  139830.,
      140757.,  141684.,  143880.,  144816.,  145752.,  146688.,  165876.,
      167112.,  168348.,  169584.,  172320.,  173568.,  174816.,  176064.,
      178860.,  180120.,  181380.,  182640.,  185496.,  186768.,  188040.,
      189312.,  199095.,  200670.,  202245.,  203820.,  207150.,  208740.,
      210330.,  211920.,  215325.,  216930.,  218535.,  220140.,  223620.,
      225240.,  226860.,  228480.,  205875.,  207510.,  209145.,  210780.,
      214170.,  215820.,  217470.,  219120.,  222585.,  224250.,  225915.,
      227580.,  231120.,  232800.,  234480.,  236160.,  156180.,  157512.,
      158844.,  160176.,  162816.,  164160.,  165504.,  166848.,  169548.,
      170904.,  172260.,  173616.,  176376.,  177744.,  179112.,  180480.,
      110553.,  111570.,  112587.,  113604.,  115530.,  116556.,  117582.,
      118608.,  120579.,  121614.,  122649.,  123684.,  125700.,  126744.,
      127788.,  128832.,  461877.,  463434.,  464991.,  466548.,  470742.,
      472308.,  473874.,  475440.,  479679.,  481254.,  482829.,  484404.,
      488688.,  490272.,  491856.,  493440.,  606420.,  608520.,  610620.,
      612720.,  618240.,  620352.,  622464.,  624576.,  630156.,  632280.,
      634404.,  636528.,  642168.,  644304.,  646440.,  648576.,  745935.,
      748590.,  751245.,  753900.,  760710.,  763380.,  766050.,  768720.,
      775605.,  778290.,  780975.,  783660.,  790620.,  793320.,  796020.,
      798720.,  762315.,  765030.,  767745.,  770460.,  777330.,  780060.,
      782790.,  785520.,  792465.,  795210.,  797955.,  800700.,  807720.,
      810480.,  813240.,  816000.,  598260.,  600456.,  602652.,  604848.,
      610272.,  612480.,  614688.,  616896.,  622380.,  624600.,  626820.,
      629040.,  634584.,  636816.,  639048.,  641280.,  439809.,  441474.,
      443139.,  444804.,  448818.,  450492.,  452166.,  453840.,  457899.,
      459582.,  461265.,  462948.,  467052.,  468744.,  470436.,  472128.,
      582092.,  584312.,  586532.,  588752.,  594008.,  596240.,  598472.,
      600704.,  606020.,  608264.,  610508.,  612752.,  618128.,  620384.,
      622640.,  624896.,  760752.,  763744.,  766736.,  769728.,  776640.,
      779648.,  782656.,  785664.,  792656.,  795680.,  798704.,  801728.,
      808800.,  811840.,  814880.,  817920.,  931300.,  935080.,  938860.,
      942640.,  951160.,  954960.,  958760.,  962560.,  971180.,  975000.,
      978820.,  982640.,  991360.,  995200.,  999040.,  1002880., 949940.,
      953800.,  957660.,  961520.,  970120.,  974000.,  977880.,  981760.,
      990460.,  994360.,  998260.,  1002160., 1010960., 1014880., 1018800.,
      1022720., 741680.,  744800.,  747920.,  751040.,  757824.,  760960.,
      764096.,  767232.,  774096.,  777248.,  780400.,  783552.,  790496.,
      793664.,  796832.,  800000.,  542300.,  544664.,  547028.,  549392.,
      554408.,  556784.,  559160.,  561536.,  566612.,  569000.,  571388.,
      573776.,  578912.,  581312.,  583712.,  586112.,  675835.,  678790.,
      681745.,  684700.,  690850.,  693820.,  696790.,  699760.,  705985.,
      708970.,  711955.,  714940.,  721240.,  724240.,  727240.,  730240.,
      878380.,  882360.,  886340.,  890320.,  898400.,  902400.,  906400.,
      910400.,  918580.,  922600.,  926620.,  930640.,  938920.,  942960.,
      947000.,  951040.,  1069025., 1074050., 1079075., 1084100., 1094050.,
      1099100., 1104150., 1109200., 1119275., 1124350., 1129425., 1134500.,
      1144700., 1149800., 1154900., 1160000., 1088325., 1093450., 1098575.,
      1103700., 1113750., 1118900., 1124050., 1129200., 1139375., 1144550.,
      1149725., 1154900., 1165200., 1170400., 1175600., 1180800., 844300.,
      848440.,  852580.,  856720.,  864640.,  868800.,  872960.,  877120.,
      885140.,  889320.,  893500.,  897680.,  905800.,  910000.,  914200.,
      918400.,  613135.,  616270.,  619405.,  622540.,  628390.,  631540.,
      634690.,  637840.,  643765.,  646930.,  650095.,  653260.,  659260.,
      662440.,  665620.,  668800.,  751075.,  754390.,  757705.,  761020.,
      767530.,  770860.,  774190.,  777520.,  784105.,  787450.,  790795.,
      794140.,  800800.,  804160.,  807520.,  810880.,  974860.,  979320.,
      983780.,  988240.,  996800.,  1001280., 1005760., 1010240., 1018900.,
      1023400., 1027900., 1032400., 1041160., 1045680., 1050200., 1054720.,
      1184825., 1190450., 1196075., 1201700., 1212250., 1217900., 1223550.,
      1229200., 1239875., 1245550., 1251225., 1256900., 1267700., 1273400.,
      1279100., 1284800., 1204125., 1209850., 1215575., 1221300., 1231950.,
      1237700., 1243450., 1249200., 1259975., 1265750., 1271525., 1277300.,
      1288200., 1294000., 1299800., 1305600., 933100.,  937720.,  942340.,
      946960.,  955360.,  960000.,  964640.,  969280.,  977780.,  982440.,
      987100.,  991760.,  1000360., 1005040., 1009720., 1014400., 676855.,
      680350.,  683845.,  687340.,  693550.,  697060.,  700570.,  704080.,
      710365.,  713890.,  717415.,  720940.,  727300.,  730840.,  734380.,
      737920.,  501836.,  504632.,  507428.,  510224.,  515096.,  517904.,
      520712.,  523520.,  528452.,  531272.,  534092.,  536912.,  541904.,
      544736.,  547568.,  550400.,  645040.,  648800.,  652560.,  656320.,
      662720.,  666496.,  670272.,  674048.,  680528.,  684320.,  688112.,
      691904.,  698464.,  702272.,  706080.,  709888.,  775780.,  780520.,
      785260.,  790000.,  797880.,  802640.,  807400.,  812160.,  820140.,
      824920.,  829700.,  834480.,  842560.,  847360.,  852160.,  856960.,
      788020.,  792840.,  797660.,  802480.,  810440.,  815280.,  820120.,
      824960.,  833020.,  837880.,  842740.,  847600.,  855760.,  860640.,
      865520.,  870400.,  603440.,  607328.,  611216.,  615104.,  621376.,
      625280.,  629184.,  633088.,  639440.,  643360.,  647280.,  651200.,
      657632.,  661568.,  665504.,  669440.,  432092.,  435032.,  437972.,
      440912.,  445544.,  448496.,  451448.,  454400.,  459092.,  462056.,
      465020.,  467984.,  472736.,  475712.,  478688.,  481664.,  296349.,
      298554.,  300759.,  302964.,  306366.,  308580.,  310794.,  313008.,
      316455.,  318678.,  320901.,  323124.,  326616.,  328848.,  331080.,
      333312.,  374964.,  377928.,  380892.,  383856.,  388320.,  391296.,
      394272.,  397248.,  401772.,  404760.,  407748.,  410736.,  415320.,
      418320.,  421320.,  424320.,  443175.,  446910.,  450645.,  454380.,
      459870.,  463620.,  467370.,  471120.,  476685.,  480450.,  484215.,
      487980.,  493620.,  497400.,  501180.,  504960.,  449955.,  453750.,
      457545.,  461340.,  466890.,  470700.,  474510.,  478320.,  483945.,
      487770.,  491595.,  495420.,  501120.,  504960.,  508800.,  512640.,
      337620.,  340680.,  343740.,  346800.,  351168.,  354240.,  357312.,
      360384.,  364812.,  367896.,  370980.,  374064.,  378552.,  381648.,
      384744.,  387840.,  236265.,  238578.,  240891.,  243204.,  246426.,
      248748.,  251070.,  253392.,  256659.,  258990.,  261321.,  263652.,
      266964.,  269304.,  271644.,  273984.,  836421.,  839274.,  842127.,
      844980.,  850470.,  853332.,  856194.,  859056.,  864591.,  867462.,
      870333.,  873204.,  878784.,  881664.,  884544.,  887424.,  1091988.,
      1095816., 1099644., 1103472., 1110720., 1114560., 1118400., 1122240.,
      1129548., 1133400., 1137252., 1141104., 1148472., 1152336., 1156200.,
      1160064., 1335615., 1340430., 1345245., 1350060., 1359030., 1363860.,
      1368690., 1373520., 1382565., 1387410., 1392255., 1397100., 1406220.,
      1411080., 1415940., 1420800., 1351995., 1356870., 1361745., 1366620.,
      1375650., 1380540., 1385430., 1390320., 1399425., 1404330., 1409235.,
      1414140., 1423320., 1428240., 1433160., 1438080., 1056180., 1060104.,
      1064028., 1067952., 1075104., 1079040., 1082976., 1086912., 1094124.,
      1098072., 1102020., 1105968., 1113240., 1117200., 1121160., 1125120.,
      772881.,  775842.,  778803.,  781764.,  787074.,  790044.,  793014.,
      795984.,  801339.,  804318.,  807297.,  810276.,  815676.,  818664.,
      821652.,  824640.,  1012364., 1016312., 1020260., 1024208., 1031192.,
      1035152., 1039112., 1043072., 1050116., 1054088., 1058060., 1062032.,
      1069136., 1073120., 1077104., 1081088., 1316016., 1321312., 1326608.,
      1331904., 1341120., 1346432., 1351744., 1357056., 1366352., 1371680.,
      1377008., 1382336., 1391712., 1397056., 1402400., 1407744., 1602340.,
      1609000., 1615660., 1622320., 1633720., 1640400., 1647080., 1653760.,
      1665260., 1671960., 1678660., 1685360., 1696960., 1703680., 1710400.,
      1717120., 1620980., 1627720., 1634460., 1641200., 1652680., 1659440.,
      1666200., 1672960., 1684540., 1691320., 1698100., 1704880., 1716560.,
      1723360., 1730160., 1736960., 1260080., 1265504., 1270928., 1276352.,
      1285440., 1290880., 1296320., 1301760., 1310928., 1316384., 1321840.,
      1327296., 1336544., 1342016., 1347488., 1352960., 917276.,  921368.,
      925460.,  929552.,  936296.,  940400.,  944504.,  948608.,  955412.,
      959528.,  963644.,  967760.,  974624.,  978752.,  982880.,  987008.,
      1127275., 1132390., 1137505., 1142620., 1150930., 1156060., 1161190.,
      1166320., 1174705., 1179850., 1184995., 1190140., 1198600., 1203760.,
      1208920., 1214080., 1457260., 1464120., 1470980., 1477840., 1488800.,
      1495680., 1502560., 1509440., 1520500., 1527400., 1534300., 1541200.,
      1552360., 1559280., 1566200., 1573120., 1763825., 1772450., 1781075.,
      1789700., 1803250., 1811900., 1820550., 1829200., 1842875., 1851550.,
      1860225., 1868900., 1882700., 1891400., 1900100., 1908800., 1783125.,
      1791850., 1800575., 1809300., 1822950., 1831700., 1840450., 1849200.,
      1862975., 1871750., 1880525., 1889300., 1903200., 1912000., 1920800.,
      1929600., 1377100., 1384120., 1391140., 1398160., 1408960., 1416000.,
      1423040., 1430080., 1440980., 1448040., 1455100., 1462160., 1473160.,
      1480240., 1487320., 1494400., 995455.,  1000750., 1006045., 1011340.,
      1019350., 1024660., 1029970., 1035280., 1043365., 1048690., 1054015.,
      1059340., 1067500., 1072840., 1078180., 1083520., 1202515., 1207990.,
      1213465., 1218940., 1227610., 1233100., 1238590., 1244080., 1252825.,
      1258330., 1263835., 1269340., 1278160., 1283680., 1289200., 1294720.,
      1553740., 1561080., 1568420., 1575760., 1587200., 1594560., 1601920.,
      1609280., 1620820., 1628200., 1635580., 1642960., 1654600., 1662000.,
      1669400., 1676800., 1879625., 1888850., 1898075., 1907300., 1921450.,
      1930700., 1939950., 1949200., 1963475., 1972750., 1982025., 1991300.,
      2005700., 2015000., 2024300., 2033600., 1898925., 1908250., 1917575.,
      1926900., 1941150., 1950500., 1959850., 1969200., 1983575., 1992950.,
      2002325., 2011700., 2026200., 2035600., 2045000., 2054400., 1465900.,
      1473400., 1480900., 1488400., 1499680., 1507200., 1514720., 1522240.,
      1533620., 1541160., 1548700., 1556240., 1567720., 1575280., 1582840.,
      1590400., 1059175., 1064830., 1070485., 1076140., 1084510., 1090180.,
      1095850., 1101520., 1109965., 1115650., 1121335., 1127020., 1135540.,
      1141240., 1146940., 1152640., 793868.,  798392.,  802916.,  807440.,
      814040.,  818576.,  823112.,  827648.,  834308.,  838856.,  843404.,
      847952.,  854672.,  859232.,  863792.,  868352.,  1015984., 1022048.,
      1028112., 1034176., 1042880., 1048960., 1055040., 1061120., 1069904.,
      1076000., 1082096., 1088192., 1097056., 1103168., 1109280., 1115392.,
      1216420., 1224040., 1231660., 1239280., 1250040., 1257680., 1265320.,
      1272960., 1283820., 1291480., 1299140., 1306800., 1317760., 1325440.,
      1333120., 1340800., 1228660., 1236360., 1244060., 1251760., 1262600.,
      1270320., 1278040., 1285760., 1296700., 1304440., 1312180., 1319920.,
      1330960., 1338720., 1346480., 1354240., 937520.,  943712.,  949904.,
      956096.,  964672.,  970880.,  977088.,  983296.,  991952.,  998176.,
      1004400., 1010624., 1019360., 1025600., 1031840., 1038080., 668828.,
      673496.,  678164.,  682832.,  689192.,  693872.,  698552.,  703232.,
      709652.,  714344.,  719036.,  723728.,  730208.,  734912.,  739616.,
      744320.,  463533.,  467034.,  470535.,  474036.,  478734.,  482244.,
      485754.,  489264.,  494007.,  497526.,  501045.,  504564.,  509352.,
      512880.,  516408.,  519936.,  584052.,  588744.,  593436.,  598128.,
      604320.,  609024.,  613728.,  618432.,  624684.,  629400.,  634116.,
      638832.,  645144.,  649872.,  654600.,  659328.,  687255.,  693150.,
      699045.,  704940.,  712590.,  718500.,  724410.,  730320.,  738045.,
      743970.,  749895.,  755820.,  763620.,  769560.,  775500.,  781440.,
      694035.,  699990.,  705945.,  711900.,  719610.,  725580.,  731550.,
      737520.,  745305.,  751290.,  757275.,  763260.,  771120.,  777120.,
      783120.,  789120.,  519060.,  523848.,  528636.,  533424.,  539520.,
      544320.,  549120.,  553920.,  560076.,  564888.,  569700.,  574512.,
      580728.,  585552.,  590376.,  595200.,  361977.,  365586.,  369195.,
      372804.,  377322.,  380940.,  384558.,  388176.,  392739.,  396366.,
      399993.,  403620.,  408228.,  411864.,  415500.,  419136.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  490025.,  492050.,  494075.,
      496100.,  503050.,  505100.,  507150.,  509200.,  516275.,  518350.,
      520425.,  522500.,  529700.,  531800.,  533900.,  536000.,  509325.,
      511450.,  513575.,  515700.,  522750.,  524900.,  527050.,  529200.,
      536375.,  538550.,  540725.,  542900.,  550200.,  552400.,  554600.,
      556800.,  1069025., 1074050., 1079075., 1084100., 1094050., 1099100.,
      1104150., 1109200., 1119275., 1124350., 1129425., 1134500., 1144700.,
      1149800., 1154900., 1160000., 1088325., 1093450., 1098575., 1103700.,
      1113750., 1118900., 1124050., 1129200., 1139375., 1144550., 1149725.,
      1154900., 1165200., 1170400., 1175600., 1180800., 1184825., 1190450.,
      1196075., 1201700., 1212250., 1217900., 1223550., 1229200., 1239875.,
      1245550., 1251225., 1256900., 1267700., 1273400., 1279100., 1284800.,
      1204125., 1209850., 1215575., 1221300., 1231950., 1237700., 1243450.,
      1249200., 1259975., 1265750., 1271525., 1277300., 1288200., 1294000.,
      1299800., 1305600., 1763825., 1772450., 1781075., 1789700., 1803250.,
      1811900., 1820550., 1829200., 1842875., 1851550., 1860225., 1868900.,
      1882700., 1891400., 1900100., 1908800., 1783125., 1791850., 1800575.,
      1809300., 1822950., 1831700., 1840450., 1849200., 1862975., 1871750.,
      1880525., 1889300., 1903200., 1912000., 1920800., 1929600., 1879625.,
      1888850., 1898075., 1907300., 1921450., 1930700., 1939950., 1949200.,
      1963475., 1972750., 1982025., 1991300., 2005700., 2015000., 2024300.,
      2033600., 1898925., 1908250., 1917575., 1926900., 1941150., 1950500.,
      1959850., 1969200., 1983575., 1992950., 2002325., 2011700., 2026200.,
      2035600., 2045000., 2054400.};
  const std::array<int, 4> in_shape = {{3, 6, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  4190.,  5472.,  6690.,  6900.,  7110.,  5520.,  4010.,  2646.,
      3406.,  4100.,  4220.,  4340.,  3310.,  2358.,  8937.,  11728., 14420.,
      14690., 14960., 11740., 8631.,  11324., 14800., 18120., 18430., 18740.,
      14640., 10712., 13240., 17220., 20975., 21300., 21625., 16800., 12220.,
      14710., 19110., 23250., 23575., 23900., 18550., 13480., 9986.,  12864.,
      15510., 15720., 15930., 12240., 8798.,  6048.,  7690.,  9140.,  9260.,
      9380.,  7090.,  5004.,  16119., 21052., 25760., 26030., 26300., 20560.,
      15057., 19640., 25552., 31140., 31450., 31760., 24720., 18020., 22060.,
      28560., 34625., 34950., 35275., 27300., 19780., 23530., 30450., 36900.,
      37225., 37550., 29050., 21040., 15782., 20256., 24330., 24540., 24750.,
      18960., 13586., 9450.,  11974., 14180., 14300., 14420., 10870., 7650.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7650.,  7975.,  9600.,  9925.,  10250., 20975., 21300., 21625.,
      23250., 23575., 23900., 34625., 34950., 35275., 36900., 37225., 37550.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 8062.,  8380.,  10512., 10944., 12830., 13380., 13230.,
      13800., 13630., 14220., 10560., 11040., 7654.,  8020.,  5022.,  5292.,
      6446.,  6812.,  7735.,  8200.,  7960.,  8440.,  8185.,  8680.,  6218.,
      6620.,  4410.,  4716.,  17415., 17874., 22838., 23456., 28060., 28840.,
      28585., 29380., 29110., 29920., 22826., 23480., 16767., 17262., 21994.,
      22648., 28720., 29600., 35130., 36240., 35730., 36860., 36330., 37480.,
      28352., 29280., 20722., 21424., 25610., 26480., 33270., 34440., 40475.,
      41950., 41100., 42600., 41725., 43250., 32370., 33600., 23510., 24440.,
      28445., 29420., 36910., 38220., 44850., 46500., 45475., 47150., 46100.,
      47800., 35730., 37100., 25925., 26960., 19150., 19972., 24624., 25728.,
      29630., 31020., 30030., 31440., 30430., 31860., 23328., 24480., 16726.,
      17596., 11448., 12096., 14510., 15380., 17185., 18280., 17410., 18520.,
      17635., 18760., 13274., 14180., 9324.,  10008., 31401., 32238., 40982.,
      42104., 50110., 51520., 50635., 52060., 51160., 52600., 39962., 41120.,
      29241., 30114., 38122., 39280., 49552., 51104., 60330., 62280., 60930.,
      62900., 61530., 63520., 47840., 49440., 34834., 36040., 42620., 44120.,
      55110., 57120., 66725., 69250., 67350., 69900., 67975., 70550., 52530.,
      54600., 38000., 39560., 45455., 47060., 58750., 60900., 71100., 73800.,
      71725., 74450., 72350., 75100., 55890., 58100., 40415., 42080., 30238.,
      31564., 38736., 40512., 46430., 48660., 46830., 49080., 47230., 49500.,
      36096., 37920., 25798., 27172., 17874., 18900., 22574., 23948., 26635.,
      28360., 26860., 28600., 27085., 28840., 20330., 21740., 14238., 15300.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 40475., 41950., 41100., 42600., 41725., 43250.,
      44850., 46500., 45475., 47150., 46100., 47800., 66725., 69250., 67350.,
      69900., 67975., 70550., 71100., 73800., 71725., 74450., 72350., 75100.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,   6858.,   6939.,   7020.,   9274.,   9388.,   9502.,   9616.,
      11870.,  12020.,  12170.,  12320.,  12905.,  13070.,  13235.,  13400.,
      13940.,  14120.,  14300.,  14480.,  11230.,  11380.,  11530.,  11680.,
      8469.,   8586.,   8703.,   8820.,   11582.,  11732.,  11882.,  12032.,
      15568.,  15776.,  15984.,  16192.,  19590.,  19860.,  20130.,  20400.,
      20770.,  21060.,  21350.,  21640.,  21950.,  22260.,  22570.,  22880.,
      17472.,  17728.,  17984.,  18240.,  13022.,  13220.,  13418.,  13616.,
      16960.,  17200.,  17440.,  17680.,  22530.,  22860.,  23190.,  23520.,
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  24030.,  24420.,  24810.,  25200.,
      17740.,  18040.,  18340.,  18640.,  22525.,  22870.,  23215.,  23560.,
      29670.,  30140.,  30610.,  31080.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      30610.,  31140.,  31670.,  32200.,  22465.,  22870.,  23275.,  23680.,
      15806.,  16124.,  16442.,  16760.,  20592.,  21024.,  21456.,  21888.,
      25110.,  25660.,  26210.,  26760.,  25890.,  26460.,  27030.,  27600.,
      26670.,  27260.,  27850.,  28440.,  20640.,  21120.,  21600.,  22080.,
      14942.,  15308.,  15674.,  16040.,  9774.,   10044.,  10314.,  10584.,
      12526.,  12892.,  13258.,  13624.,  15005.,  15470.,  15935.,  16400.,
      15440.,  15920.,  16400.,  16880.,  15875.,  16370.,  16865.,  17360.,
      12034.,  12436.,  12838.,  13240.,  8514.,   8820.,   9126.,   9432.,
      34371.,  34830.,  35289.,  35748.,  45058.,  45676.,  46294.,  46912.,
      55340.,  56120.,  56900.,  57680.,  56375.,  57170.,  57965.,  58760.,
      57410.,  58220.,  59030.,  59840.,  44998.,  45652.,  46306.,  46960.,
      33039.,  33534.,  34029.,  34524.,  43334.,  43988.,  44642.,  45296.,
      56560.,  57440.,  58320.,  59200.,  69150.,  70260.,  71370.,  72480.,
      70330.,  71460.,  72590.,  73720.,  71510.,  72660.,  73810.,  74960.,
      55776.,  56704.,  57632.,  58560.,  40742.,  41444.,  42146.,  42848.,
      50350.,  51220.,  52090.,  52960.,  65370.,  66540.,  67710.,  68880.,
      79475.,  80950.,  82425.,  83900.,  80700.,  82200.,  83700.,  85200.,
      81925.,  83450.,  84975.,  86500.,  63510.,  64740.,  65970.,  67200.,
      46090.,  47020.,  47950.,  48880.,  55915.,  56890.,  57865.,  58840.,
      72510.,  73820.,  75130.,  76440.,  88050.,  89700.,  91350.,  93000.,
      89275.,  90950.,  92625.,  94300.,  90500.,  92200.,  93900.,  95600.,
      70090.,  71460.,  72830.,  74200.,  50815.,  51850.,  52885.,  53920.,
      37478.,  38300.,  39122.,  39944.,  48144.,  49248.,  50352.,  51456.,
      57870.,  59260.,  60650.,  62040.,  58650.,  60060.,  61470.,  62880.,
      59430.,  60860.,  62290.,  63720.,  45504.,  46656.,  47808.,  48960.,
      32582.,  33452.,  34322.,  35192.,  22248.,  22896.,  23544.,  24192.,
      28150.,  29020.,  29890.,  30760.,  33275.,  34370.,  35465.,  36560.,
      33710.,  34820.,  35930.,  37040.,  34145.,  35270.,  36395.,  37520.,
      25642.,  26548.,  27454.,  28360.,  17964.,  18648.,  19332.,  20016.,
      61965.,  62802.,  63639.,  64476.,  80842.,  81964.,  83086.,  84208.,
      98810.,  100220., 101630., 103040., 99845.,  101270., 102695., 104120.,
      100880., 102320., 103760., 105200., 78766.,  79924.,  81082.,  82240.,
      57609.,  58482.,  59355.,  60228.,  75086.,  76244.,  77402.,  78560.,
      97552.,  99104.,  100656., 102208., 118710., 120660., 122610., 124560.,
      119890., 121860., 123830., 125800., 121070., 123060., 125050., 127040.,
      94080.,  95680.,  97280.,  98880.,  68462.,  69668.,  70874.,  72080.,
      83740.,  85240.,  86740.,  88240.,  108210., 110220., 112230., 114240.,
      130925., 133450., 135975., 138500., 132150., 134700., 137250., 139800.,
      133375., 135950., 138525., 141100., 102990., 105060., 107130., 109200.,
      74440.,  76000.,  77560.,  79120.,  89305.,  90910.,  92515.,  94120.,
      115350., 117500., 119650., 121800., 139500., 142200., 144900., 147600.,
      140725., 143450., 146175., 148900., 141950., 144700., 147450., 150200.,
      109570., 111780., 113990., 116200., 79165.,  80830.,  82495.,  84160.,
      59150.,  60476.,  61802.,  63128.,  75696.,  77472.,  79248.,  81024.,
      90630.,  92860.,  95090.,  97320.,  91410.,  93660.,  95910.,  98160.,
      92190.,  94460.,  96730.,  99000.,  70368.,  72192.,  74016.,  75840.,
      50222.,  51596.,  52970.,  54344.,  34722.,  35748.,  36774.,  37800.,
      43774.,  45148.,  46522.,  47896.,  51545.,  53270.,  54995.,  56720.,
      51980.,  53720.,  55460.,  57200.,  52415.,  54170.,  55925.,  57680.,
      39250.,  40660.,  42070.,  43480.,  27414.,  28476.,  29538.,  30600.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      79475.,  80950.,  82425.,  83900.,  80700.,  82200.,  83700.,  85200.,
      81925.,  83450.,  84975.,  86500.,  88050.,  89700.,  91350.,  93000.,
      89275.,  90950.,  92625.,  94300.,  90500.,  92200.,  93900.,  95600.,
      130925., 133450., 135975., 138500., 132150., 134700., 137250., 139800.,
      133375., 135950., 138525., 141100., 139500., 142200., 144900., 147600.,
      140725., 143450., 146175., 148900., 141950., 144700., 147450., 150200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,   7020.,   8956.,   9616.,   11495.,  12320.,  12545.,  13400.,
      13595.,  14480.,  10972.,  11680.,  8289.,   8820.,   11348.,  12032.,
      15280.,  16192.,  19260.,  20400.,  20460.,  21640.,  21660.,  22880.,
      17264.,  18240.,  12884.,  13616.,  16795.,  17680.,  22340.,  23520.,
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  23940.,  25200.,
      17695.,  18640.,  22465.,  23560.,  29620.,  31080.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  30660.,  32200.,  22525.,  23680.,
      15860.,  16760.,  20688.,  21888.,  25260.,  26760.,  26060.,  27600.,
      26860.,  28440.,  20816.,  22080.,  15092.,  16040.,  9891.,   10584.,
      12700.,  13624.,  15245.,  16400.,  15695.,  16880.,  16145.,  17360.,
      12268.,  13240.,  8703.,   9432.,   34497.,  35748.,  45244.,  46912.,
      55595.,  57680.,  56645.,  58760.,  57695.,  59840.,  45244.,  46960.,
      33237.,  34524.,  43604.,  45296.,  56944.,  59200.,  69660.,  72480.,
      70860.,  73720.,  72060.,  74960.,  56240.,  58560.,  41108.,  42848.,
      50815.,  52960.,  66020.,  68880.,  80325.,  83900.,  81575.,  85200.,
      82825.,  86500.,  64260.,  67200.,  46675.,  48880.,  56485.,  58840.,
      73300.,  76440.,  89075.,  93000.,  90325.,  94300.,  91575.,  95600.,
      70980.,  74200.,  51505.,  53920.,  38036.,  39944.,  48912.,  51456.,
      58860.,  62040.,  59660.,  62880.,  60460.,  63720.,  46352.,  48960.,
      33236.,  35192.,  22743.,  24192.,  28828.,  30760.,  34145.,  36560.,
      34595.,  37040.,  35045.,  37520.,  26380.,  28360.,  18531.,  20016.,
      62469.,  64476.,  81532.,  84208.,  99695.,  103040., 100745., 104120.,
      101795., 105200., 79516.,  82240.,  58185.,  60228.,  75860.,  78560.,
      98608.,  102208., 120060., 124560., 121260., 125800., 122460., 127040.,
      95216.,  98880.,  69332.,  72080.,  84835.,  88240.,  109700., 114240.,
      132825., 138500., 134075., 139800., 135325., 141100., 104580., 109200.,
      75655.,  79120.,  90505.,  94120.,  116980., 121800., 141575., 147600.,
      142825., 148900., 144075., 150200., 111300., 116200., 80485.,  84160.,
      60212.,  63128.,  77136.,  81024.,  92460.,  97320.,  93260.,  98160.,
      94060.,  99000.,  71888.,  75840.,  51380.,  54344.,  35595.,  37800.,
      44956.,  47896.,  53045.,  56720.,  53495.,  57200.,  53945.,  57680.,
      40492.,  43480.,  28359.,  30600.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  80325.,  83900.,  81575.,  85200.,
      82825.,  86500.,  89075.,  93000.,  90325.,  94300.,  91575.,  95600.,
      132825., 138500., 134075., 139800., 135325., 141100., 141575., 147600.,
      142825., 148900., 144075., 150200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897.,  13050.,  13878.,  14040.,  17696.,  17912.,  19004.,  19232.,
      22705.,  22990.,  24340.,  24640.,  24775.,  25090.,  26470.,  26800.,
      26845.,  27190.,  28600.,  28960.,  21656.,  21944.,  23060.,  23360.,
      16353.,  16578.,  17406.,  17640.,  22408.,  22696.,  23764.,  24064.,
      30160.,  30560.,  31968.,  32384.,  38000.,  38520.,  40260.,  40800.,
      40360.,  40920.,  42700.,  43280.,  42720.,  43320.,  45140.,  45760.,
      34032.,  34528.,  35968.,  36480.,  25384.,  25768.,  26836.,  27232.,
      33125.,  33590.,  34880.,  35360.,  44040.,  44680.,  46380.,  47040.,
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  47120.,  47880.,  49620.,  50400.,
      34805.,  35390.,  36680.,  37280.,  44255.,  44930.,  46430.,  47120.,
      58320.,  59240.,  61220.,  62160.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      60280.,  61320.,  63340.,  64400.,  44255.,  45050.,  46550.,  47360.,
      31096.,  31720.,  32884.,  33520.,  40528.,  41376.,  42912.,  43776.,
      49440.,  50520.,  52420.,  53520.,  51000.,  52120.,  54060.,  55200.,
      52560.,  53720.,  55700.,  56880.,  40688.,  41632.,  43200.,  44160.,
      29464.,  30184.,  31348.,  32080.,  19251.,  19782.,  20628.,  21168.,
      24680.,  25400.,  26516.,  27248.,  29575.,  30490.,  31870.,  32800.,
      30445.,  31390.,  32800.,  33760.,  31315.,  32290.,  33730.,  34720.,
      23744.,  24536.,  25676.,  26480.,  16803.,  17406.,  18252.,  18864.,
      68085.,  68994.,  70578.,  71496.,  89264.,  90488.,  92588.,  93824.,
      109645., 111190., 113800., 115360., 111715., 113290., 115930., 117520.,
      113785., 115390., 118060., 119680., 89192.,  90488.,  92612.,  93920.,
      65493.,  66474.,  68058.,  69048.,  85912.,  87208.,  89284.,  90592.,
      112144., 113888., 116640., 118400., 137120., 139320., 142740., 144960.,
      139480., 141720., 145180., 147440., 141840., 144120., 147620., 149920.,
      110640., 112480., 115264., 117120., 80824.,  82216.,  84292.,  85696.,
      99905.,  101630., 104180., 105920., 129720., 132040., 135420., 137760.,
      157725., 160650., 164850., 167800., 160175., 163150., 167400., 170400.,
      162625., 165650., 169950., 173000., 126080., 128520., 131940., 134400.,
      91505.,  93350.,  95900.,  97760.,  111035., 112970., 115730., 117680.,
      144000., 146600., 150260., 152880., 174875., 178150., 182700., 186000.,
      177325., 180650., 185250., 188600., 179775., 183150., 187800., 191200.,
      139240., 141960., 145660., 148400., 100955., 103010., 105770., 107840.,
      74440.,  76072.,  78244.,  79888.,  95632.,  97824.,  100704., 102912.,
      114960., 117720., 121300., 124080., 116520., 119320., 122940., 125760.,
      118080., 120920., 124580., 127440., 90416.,  92704.,  95616.,  97920.,
      64744.,  66472.,  68644.,  70384.,  44199.,  45486.,  47088.,  48384.,
      55928.,  57656.,  59780.,  61520.,  66115.,  68290.,  70930.,  73120.,
      66985.,  69190.,  71860.,  74080.,  67855.,  70090.,  72790.,  75040.,
      50960.,  52760.,  54908.,  56720.,  35703.,  37062.,  38664.,  40032.,
      123273., 124938., 127278., 128952., 160832., 163064., 166172., 168416.,
      196585., 199390., 203260., 206080., 198655., 201490., 205390., 208240.,
      200725., 203590., 207520., 210400., 156728., 159032., 162164., 164480.,
      114633., 116370., 118710., 120456., 149416., 151720., 154804., 157120.,
      194128., 197216., 201312., 204416., 236240., 240120., 245220., 249120.,
      238600., 242520., 247660., 251600., 240960., 244920., 250100., 254080.,
      187248., 190432., 194560., 197760., 136264., 138664., 141748., 144160.,
      166685., 169670., 173480., 176480., 215400., 219400., 224460., 228480.,
      260625., 265650., 271950., 277000., 263075., 268150., 274500., 279600.,
      265525., 270650., 277050., 282200., 205040., 209160., 214260., 218400.,
      148205., 151310., 155120., 158240., 177815., 181010., 185030., 188240.,
      229680., 233960., 239300., 243600., 277775., 283150., 289800., 295200.,
      280225., 285650., 292350., 297800., 282675., 288150., 294900., 300400.,
      218200., 222600., 227980., 232400., 157655., 160970., 164990., 168320.,
      117784., 120424., 123604., 126256., 150736., 154272., 158496., 162048.,
      180480., 184920., 190180., 194640., 182040., 186520., 191820., 196320.,
      183600., 188120., 193460., 198000., 140144., 143776., 148032., 151680.,
      100024., 102760., 105940., 108688., 69147.,  71190.,  73548.,  75600.,
      87176.,  89912.,  93044.,  95792.,  102655., 106090., 109990., 113440.,
      103525., 106990., 110920., 114400., 104395., 107890., 111850., 115360.,
      78176.,  80984.,  84140.,  86960.,  54603.,  56718.,  59076.,  61200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      157725., 160650., 164850., 167800., 160175., 163150., 167400., 170400.,
      162625., 165650., 169950., 173000., 174875., 178150., 182700., 186000.,
      177325., 180650., 185250., 188600., 179775., 183150., 187800., 191200.,
      260625., 265650., 271950., 277000., 263075., 268150., 274500., 279600.,
      265525., 270650., 277050., 282200., 277775., 283150., 289800., 295200.,
      280225., 285650., 292350., 297800., 282675., 288150., 294900., 300400.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      61568.,  62192.,  62816.,  63440.,  65132.,  65768.,  66404.,  67040.,
      80208.,  81056.,  81904.,  82752.,  84960.,  85824.,  86688.,  87552.,
      97800.,  98880.,  99960.,  101040., 103740., 104840., 105940., 107040.,
      100880., 102000., 103120., 104240., 106980., 108120., 109260., 110400.,
      103960., 105120., 106280., 107440., 110220., 111400., 112580., 113760.,
      80432.,  81376.,  82320.,  83264.,  85440.,  86400.,  87360.,  88320.,
      58208.,  58928.,  59648.,  60368.,  61964.,  62696.,  63428.,  64160.,
      37971.,  38502.,  39033.,  39564.,  40716.,  41256.,  41796.,  42336.,
      48640.,  49360.,  50080.,  50800.,  52300.,  53032.,  53764.,  54496.,
      58235.,  59150.,  60065.,  60980.,  62810.,  63740.,  64670.,  65600.,
      59945.,  60890.,  61835.,  62780.,  64640.,  65600.,  66560.,  67520.,
      61655.,  62630.,  63605.,  64580.,  66470.,  67460.,  68450.,  69440.,
      46696.,  47488.,  48280.,  49072.,  50548.,  51352.,  52156.,  52960.,
      33003.,  33606.,  34209.,  34812.,  35892.,  36504.,  37116.,  37728.,
      135261., 136170., 137079., 137988., 140238., 141156., 142074., 142992.,
      177304., 178528., 179752., 180976., 183940., 185176., 186412., 187648.,
      217745., 219290., 220835., 222380., 226040., 227600., 229160., 230720.,
      221855., 223430., 225005., 226580., 230270., 231860., 233450., 235040.,
      225965., 227570., 229175., 230780., 234500., 236120., 237740., 239360.,
      177088., 178384., 179680., 180976., 183916., 185224., 186532., 187840.,
      130005., 130986., 131967., 132948., 135126., 136116., 137106., 138096.,
      170528., 171824., 173120., 174416., 177260., 178568., 179876., 181184.,
      222544., 224288., 226032., 227776., 231520., 233280., 235040., 236800.,
      272040., 274240., 276440., 278640., 283260., 285480., 287700., 289920.,
      276720., 278960., 281200., 283440., 288100., 290360., 292620., 294880.,
      281400., 283680., 285960., 288240., 292940., 295240., 297540., 299840.,
      219440., 221280., 223120., 224960., 228672., 230528., 232384., 234240.,
      160256., 161648., 163040., 164432., 167180., 168584., 169988., 171392.,
      198085., 199810., 201535., 203260., 206620., 208360., 210100., 211840.,
      257120., 259440., 261760., 264080., 268500., 270840., 273180., 275520.,
      312525., 315450., 318375., 321300., 326750., 329700., 332650., 335600.,
      317375., 320350., 323325., 326300., 331800., 334800., 337800., 340800.,
      322225., 325250., 328275., 331300., 336850., 339900., 342950., 346000.,
      249720., 252160., 254600., 257040., 261420., 263880., 266340., 268800.,
      181165., 183010., 184855., 186700., 189940., 191800., 193660., 195520.,
      220135., 222070., 224005., 225940., 229510., 231460., 233410., 235360.,
      285400., 288000., 290600., 293200., 297900., 300520., 303140., 305760.,
      346475., 349750., 353025., 356300., 362100., 365400., 368700., 372000.,
      351325., 354650., 357975., 361300., 367150., 370500., 373850., 377200.,
      356175., 359550., 362925., 366300., 372200., 375600., 379000., 382400.,
      275760., 278480., 281200., 283920., 288580., 291320., 294060., 296800.,
      199855., 201910., 203965., 206020., 209470., 211540., 213610., 215680.,
      147248., 148880., 150512., 152144., 154844., 156488., 158132., 159776.,
      189072., 191264., 193456., 195648., 199200., 201408., 203616., 205824.,
      227160., 229920., 232680., 235440., 239820., 242600., 245380., 248160.,
      230240., 233040., 235840., 238640., 243060., 245880., 248700., 251520.,
      233320., 236160., 239000., 241840., 246300., 249160., 252020., 254880.,
      178544., 180832., 183120., 185408., 188928., 191232., 193536., 195840.,
      127760., 129488., 131216., 132944., 135548., 137288., 139028., 140768.,
      87111.,  88398.,  89685.,  90972.,  92880.,  94176.,  95472.,  96768.,
      110128., 111856., 113584., 115312., 117820., 119560., 121300., 123040.,
      130055., 132230., 134405., 136580., 139670., 141860., 144050., 146240.,
      131765., 133970., 136175., 138380., 141500., 143720., 145940., 148160.,
      133475., 135710., 137945., 140180., 143330., 145580., 147830., 150080.,
      100120., 101920., 103720., 105520., 108004., 109816., 111628., 113440.,
      70047.,  71406.,  72765.,  74124.,  75960.,  77328.,  78696.,  80064.,
      244881., 246546., 248211., 249876., 252882., 254556., 256230., 257904.,
      319432., 321664., 323896., 326128., 330100., 332344., 334588., 336832.,
      390365., 393170., 395975., 398780., 403700., 406520., 409340., 412160.,
      394475., 397310., 400145., 402980., 407930., 410780., 413630., 416480.,
      398585., 401450., 404315., 407180., 412160., 415040., 417920., 420800.,
      311152., 313456., 315760., 318064., 322012., 324328., 326644., 328960.,
      227529., 229266., 231003., 232740., 235674., 237420., 239166., 240912.,
      296528., 298832., 301136., 303440., 307292., 309608., 311924., 314240.,
      385168., 388256., 391344., 394432., 399520., 402624., 405728., 408832.,
      468600., 472480., 476360., 480240., 486540., 490440., 494340., 498240.,
      473280., 477200., 481120., 485040., 491380., 495320., 499260., 503200.,
      477960., 481920., 485880., 489840., 496220., 500200., 504180., 508160.,
      371312., 374496., 377680., 380864., 385920., 389120., 392320., 395520.,
      270128., 272528., 274928., 277328., 281084., 283496., 285908., 288320.,
      330385., 333370., 336355., 339340., 343960., 346960., 349960., 352960.,
      426800., 430800., 434800., 438800., 444900., 448920., 452940., 456960.,
      516225., 521250., 526275., 531300., 538850., 543900., 548950., 554000.,
      521075., 526150., 531225., 536300., 543900., 549000., 554100., 559200.,
      525925., 531050., 536175., 541300., 548950., 554100., 559250., 564400.,
      405960., 410080., 414200., 418320., 424380., 428520., 432660., 436800.,
      293305., 296410., 299515., 302620., 307120., 310240., 313360., 316480.,
      352435., 355630., 358825., 362020., 366850., 370060., 373270., 376480.,
      455080., 459360., 463640., 467920., 474300., 478600., 482900., 487200.,
      550175., 555550., 560925., 566300., 574200., 579600., 585000., 590400.,
      555025., 560450., 565875., 571300., 579250., 584700., 590150., 595600.,
      559875., 565350., 570825., 576300., 584300., 589800., 595300., 600800.,
      432000., 436400., 440800., 445200., 451540., 455960., 460380., 464800.,
      311995., 315310., 318625., 321940., 326650., 329980., 333310., 336640.,
      232928., 235568., 238208., 240848., 244556., 247208., 249860., 252512.,
      297936., 301472., 305008., 308544., 313440., 316992., 320544., 324096.,
      356520., 360960., 365400., 369840., 375900., 380360., 384820., 389280.,
      359600., 364080., 368560., 373040., 379140., 383640., 388140., 392640.,
      362680., 367200., 371720., 376240., 382380., 386920., 391460., 396000.,
      276656., 280288., 283920., 287552., 292416., 296064., 299712., 303360.,
      197312., 200048., 202784., 205520., 209132., 211880., 214628., 217376.,
      136251., 138294., 140337., 142380., 145044., 147096., 149148., 151200.,
      171616., 174352., 177088., 179824., 183340., 186088., 188836., 191584.,
      201875., 205310., 208745., 212180., 216530., 219980., 223430., 226880.,
      203585., 207050., 210515., 213980., 218360., 221840., 225320., 228800.,
      205295., 208790., 212285., 215780., 220190., 223700., 227210., 230720.,
      153544., 156352., 159160., 161968., 165460., 168280., 171100., 173920.,
      107091., 109206., 111321., 113436., 116028., 118152., 120276., 122400.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      312525., 315450., 318375., 321300., 326750., 329700., 332650., 335600.,
      317375., 320350., 323325., 326300., 331800., 334800., 337800., 340800.,
      322225., 325250., 328275., 331300., 336850., 339900., 342950., 346000.,
      346475., 349750., 353025., 356300., 362100., 365400., 368700., 372000.,
      351325., 354650., 357975., 361300., 367150., 370500., 373850., 377200.,
      356175., 359550., 362925., 366300., 372200., 375600., 379000., 382400.,
      516225., 521250., 526275., 531300., 538850., 543900., 548950., 554000.,
      521075., 526150., 531225., 536300., 543900., 549000., 554100., 559200.,
      525925., 531050., 536175., 541300., 548950., 554100., 559250., 564400.,
      550175., 555550., 560925., 566300., 574200., 579600., 585000., 590400.,
      555025., 560450., 565875., 571300., 579250., 584700., 590150., 595600.,
      559875., 565350., 570825., 576300., 584300., 589800., 595300., 600800.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      61676.,  63440.,  65228.,  67040.,  80400.,  82752.,  85136.,  87552.,
      98100.,  101040., 104020., 107040., 101220., 104240., 107300., 110400.,
      104340., 107440., 110580., 113760., 80784.,  83264.,  85776.,  88320.,
      58508.,  60368.,  62252.,  64160.,  38205.,  39564.,  40941.,  42336.,
      48988.,  50800.,  52636.,  54496.,  58715.,  60980.,  63275.,  65600.,
      60455.,  62780.,  65135.,  67520.,  62195.,  64580.,  66995.,  69440.,
      47164.,  49072.,  51004.,  52960.,  33381.,  34812.,  36261.,  37728.,
      135513., 137988., 140481., 142992., 177676., 180976., 184300., 187648.,
      218255., 222380., 226535., 230720., 222395., 226580., 230795., 235040.,
      226535., 230780., 235055., 239360., 177580., 180976., 184396., 187840.,
      130401., 132948., 135513., 138096., 171068., 174416., 177788., 181184.,
      223312., 227776., 232272., 236800., 273060., 278640., 284260., 289920.,
      277780., 283440., 289140., 294880., 282500., 288240., 294020., 299840.,
      220368., 224960., 229584., 234240., 160988., 164432., 167900., 171392.,
      199015., 203260., 207535., 211840., 258420., 264080., 269780., 275520.,
      314225., 321300., 328425., 335600., 319125., 326300., 333525., 340800.,
      324025., 331300., 338625., 346000., 251220., 257040., 262900., 268800.,
      182335., 186700., 191095., 195520., 221275., 225940., 230635., 235360.,
      286980., 293200., 299460., 305760., 348525., 356300., 364125., 372000.,
      353425., 361300., 369225., 377200., 358325., 366300., 374325., 382400.,
      277540., 283920., 290340., 296800., 201235., 206020., 210835., 215680.,
      148364., 152144., 155948., 159776., 190608., 195648., 200720., 205824.,
      229140., 235440., 241780., 248160., 232260., 238640., 245060., 251520.,
      235380., 241840., 248340., 254880., 180240., 185408., 190608., 195840.,
      129068., 132944., 136844., 140768., 88101.,  90972.,  93861.,  96768.,
      111484., 115312., 119164., 123040., 131795., 136580., 141395., 146240.,
      133535., 138380., 143255., 148160., 135275., 140180., 145115., 150080.,
      101596., 105520., 109468., 113440., 71181.,  74124.,  77085.,  80064.,
      245889., 249876., 253881., 257904., 320812., 326128., 331468., 336832.,
      392135., 398780., 405455., 412160., 396275., 402980., 409715., 416480.,
      400415., 407180., 413975., 420800., 312652., 318064., 323500., 328960.,
      228681., 232740., 236817., 240912., 298076., 303440., 308828., 314240.,
      387280., 394432., 401616., 408832., 471300., 480240., 489220., 498240.,
      476020., 485040., 494100., 503200., 480740., 489840., 498980., 508160.,
      373584., 380864., 388176., 395520., 271868., 277328., 282812., 288320.,
      332575., 339340., 346135., 352960., 429780., 438800., 447860., 456960.,
      520025., 531300., 542625., 554000., 524925., 536300., 547725., 559200.,
      529825., 541300., 552825., 564400., 409140., 418320., 427540., 436800.,
      295735., 302620., 309535., 316480., 354835., 362020., 369235., 376480.,
      458340., 467920., 477540., 487200., 554325., 566300., 578325., 590400.,
      559225., 571300., 583425., 595600., 564125., 576300., 588525., 600800.,
      435460., 445200., 454980., 464800., 314635., 321940., 329275., 336640.,
      235052., 240848., 246668., 252512., 300816., 308544., 316304., 324096.,
      360180., 369840., 379540., 389280., 363300., 373040., 382820., 392640.,
      366420., 376240., 386100., 396000., 279696., 287552., 295440., 303360.,
      199628., 205520., 211436., 217376., 137997., 142380., 146781., 151200.,
      173980., 179824., 185692., 191584., 204875., 212180., 219515., 226880.,
      206615., 213980., 221375., 228800., 208355., 215780., 223235., 230720.,
      156028., 161968., 167932., 173920., 108981., 113436., 117909., 122400.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      314225., 321300., 328425., 335600., 319125., 326300., 333525., 340800.,
      324025., 331300., 338625., 346000., 348525., 356300., 364125., 372000.,
      353425., 361300., 369225., 377200., 358325., 366300., 374325., 382400.,
      520025., 531300., 542625., 554000., 524925., 536300., 547725., 559200.,
      529825., 541300., 552825., 564400., 554325., 566300., 578325., 590400.,
      559225., 571300., 583425., 595600., 564125., 576300., 588525., 600800.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,   50274.,   51894.,   52200.,   53847.,   54162.,   55836.,
      56160.,   68660.,   69080.,   71216.,   71648.,   73820.,   74264.,
      76472.,   76928.,   88195.,   88750.,   91390.,   91960.,   94645.,
      95230.,   97960.,   98560.,   96415.,   97030.,   99730.,   100360.,
      103105.,  103750.,  106540.,  107200.,  104635.,  105310.,  108070.,
      108760.,  111565.,  112270.,  115120.,  115840.,  84452.,   85016.,
      87200.,   87776.,   89996.,   90584.,   92840.,   93440.,   63801.,
      64242.,   65862.,   66312.,   67959.,   68418.,   70092.,   70560.,
      87556.,   88120.,   90208.,   90784.,   92908.,   93496.,   95656.,
      96256.,   117904.,  118688.,  121440.,  122240.,  125040.,  125856.,
      128704.,  129536.,  148620.,  149640.,  153040.,  154080.,  157540.,
      158600.,  162120.,  163200.,  157980.,  159080.,  162560.,  163680.,
      167220.,  168360.,  171960.,  173120.,  167340.,  168520.,  172080.,
      173280.,  176900.,  178120.,  181800.,  183040.,  133328.,  134304.,
      137120.,  138112.,  140976.,  141984.,  144896.,  145920.,  99460.,
      100216.,  102304.,  103072.,  105196.,  105976.,  108136.,  108928.,
      129995.,  130910.,  133430.,  134360.,  136925.,  137870.,  140480.,
      141440.,  172860.,  174120.,  177440.,  178720.,  182100.,  183400.,
      186840.,  188160.,  215225.,  216850.,  220950.,  222600.,  226775.,
      228450.,  232700.,  234400.,  224925.,  226650.,  230850.,  232600.,
      236875.,  238650.,  243000.,  244800.,  234625.,  236450.,  240750.,
      242600.,  246975.,  248850.,  253300.,  255200.,  185100.,  186600.,
      190000.,  191520.,  194980.,  196520.,  200040.,  201600.,  136715.,
      137870.,  140390.,  141560.,  144125.,  145310.,  147920.,  149120.,
      174095.,  175430.,  178370.,  179720.,  182705.,  184070.,  187100.,
      188480.,  229420.,  231240.,  235120.,  236960.,  240900.,  242760.,
      246760.,  248640.,  283125.,  285450.,  290250.,  292600.,  297475.,
      299850.,  304800.,  307200.,  292825.,  295250.,  300150.,  302600.,
      307575.,  310050.,  315100.,  317600.,  302525.,  305050.,  310050.,
      312600.,  317675.,  320250.,  325400.,  328000.,  237180.,  239240.,
      243200.,  245280.,  249300.,  251400.,  255480.,  257600.,  174095.,
      175670.,  178610.,  180200.,  183185.,  184790.,  187820.,  189440.,
      122116.,  123352.,  125632.,  126880.,  129196.,  130456.,  132808.,
      134080.,  159120.,  160800.,  163808.,  165504.,  168560.,  170272.,
      173376.,  175104.,  194060.,  196200.,  199920.,  202080.,  205860.,
      208040.,  211880.,  214080.,  200220.,  202440.,  206240.,  208480.,
      212340.,  214600.,  218520.,  220800.,  206380.,  208680.,  212560.,
      214880.,  218820.,  221160.,  225160.,  227520.,  159696.,  161568.,
      164640.,  166528.,  169648.,  171552.,  174720.,  176640.,  115588.,
      117016.,  119296.,  120736.,  123052.,  124504.,  126856.,  128320.,
      75357.,   76410.,   78066.,   79128.,   80811.,   81882.,   83592.,
      84672.,   96548.,   97976.,   100160.,  101600.,  103820.,  105272.,
      107528.,  108992.,  115615.,  117430.,  120130.,  121960.,  124705.,
      126550.,  129340.,  131200.,  119035.,  120910.,  123670.,  125560.,
      128365.,  130270.,  133120.,  135040.,  122455.,  124390.,  127210.,
      129160.,  132025.,  133990.,  136900.,  138880.,  92756.,   94328.,
      96560.,   98144.,   100412.,  102008.,  104312.,  105920.,  65565.,
      66762.,   68418.,   69624.,   71307.,   72522.,   74232.,   75456.,
      269217.,  271026.,  274158.,  275976.,  279135.,  280962.,  284148.,
      285984.,  352916.,  355352.,  359504.,  361952.,  366140.,  368600.,
      372824.,  375296.,  433435.,  436510.,  441670.,  444760.,  449965.,
      453070.,  458320.,  461440.,  441655.,  444790.,  450010.,  453160.,
      458425.,  461590.,  466900.,  470080.,  449875.,  453070.,  458350.,
      461560.,  466885.,  470110.,  475480.,  478720.,  352580.,  355160.,
      359360.,  361952.,  366188.,  368792.,  373064.,  375680.,  258849.,
      260802.,  263934.,  265896.,  269055.,  271026.,  274212.,  276192.,
      339556.,  342136.,  346240.,  348832.,  352972.,  355576.,  359752.,
      362368.,  443152.,  446624.,  452064.,  455552.,  461040.,  464544.,
      470080.,  473600.,  541740.,  546120.,  552880.,  557280.,  564100.,
      568520.,  575400.,  579840.,  551100.,  555560.,  562400.,  566880.,
      573780.,  578280.,  585240.,  589760.,  560460.,  565000.,  571920.,
      576480.,  583460.,  588040.,  595080.,  599680.,  437072.,  440736.,
      446240.,  449920.,  455472.,  459168.,  464768.,  468480.,  319204.,
      321976.,  326080.,  328864.,  333004.,  335800.,  339976.,  342784.,
      394595.,  398030.,  403070.,  406520.,  411605.,  415070.,  420200.,
      423680.,  512220.,  516840.,  523520.,  528160.,  534900.,  539560.,
      546360.,  551040.,  622625.,  628450.,  636750.,  642600.,  650975.,
      656850.,  665300.,  671200.,  632325.,  638250.,  646650.,  652600.,
      661075.,  667050.,  675600.,  681600.,  642025.,  648050.,  656550.,
      662600.,  671175.,  677250.,  685900.,  692000.,  497580.,  502440.,
      509200.,  514080.,  520900.,  525800.,  532680.,  537600.,  360995.,
      364670.,  369710.,  373400.,  378485.,  382190.,  387320.,  391040.,
      438695.,  442550.,  448010.,  451880.,  457385.,  461270.,  466820.,
      470720.,  568780.,  573960.,  581200.,  586400.,  593700.,  598920.,
      606280.,  611520.,  690525.,  697050.,  706050.,  712600.,  721675.,
      728250.,  737400.,  744000.,  700225.,  706850.,  715950.,  722600.,
      731775.,  738450.,  747700.,  754400.,  709925.,  716650.,  725850.,
      732600.,  741875.,  748650.,  758000.,  764800.,  549660.,  555080.,
      562400.,  567840.,  575220.,  580680.,  588120.,  593600.,  398375.,
      402470.,  407930.,  412040.,  417545.,  421670.,  427220.,  431360.,
      293476.,  296728.,  301024.,  304288.,  308620.,  311896.,  316264.,
      319552.,  376848.,  381216.,  386912.,  391296.,  397040.,  401440.,
      407232.,  411648.,  452780.,  458280.,  465360.,  470880.,  478020.,
      483560.,  490760.,  496320.,  458940.,  464520.,  471680.,  477280.,
      484500.,  490120.,  497400.,  503040.,  465100.,  470760.,  478000.,
      483680.,  490980.,  496680.,  504040.,  509760.,  355920.,  360480.,
      366240.,  370816.,  376624.,  381216.,  387072.,  391680.,  254692.,
      258136.,  262432.,  265888.,  270220.,  273688.,  278056.,  281536.,
      173637.,  176202.,  179370.,  181944.,  185139.,  187722.,  190944.,
      193536.,  219524.,  222968.,  227168.,  230624.,  234860.,  238328.,
      242600.,  246080.,  259255.,  263590.,  268810.,  273160.,  278425.,
      282790.,  288100.,  292480.,  262675.,  267070.,  272350.,  276760.,
      282085.,  286510.,  291880.,  296320.,  266095.,  270550.,  275890.,
      280360.,  285745.,  290230.,  295660.,  300160.,  199604.,  203192.,
      207440.,  211040.,  215324.,  218936.,  223256.,  226880.,  139653.,
      142362.,  145530.,  148248.,  151443.,  154170.,  157392.,  160128.,
      488457.,  491778.,  496422.,  499752.,  504423.,  507762.,  512460.,
      515808.,  637172.,  641624.,  647792.,  652256.,  658460.,  662936.,
      669176.,  673664.,  778675.,  784270.,  791950.,  797560.,  805285.,
      810910.,  818680.,  824320.,  786895.,  792550.,  800290.,  805960.,
      813745.,  819430.,  827260.,  832960.,  795115.,  800830.,  808630.,
      814360.,  822205.,  827950.,  835840.,  841600.,  620708.,  625304.,
      631520.,  636128.,  642380.,  647000.,  653288.,  657920.,  453897.,
      457362.,  462006.,  465480.,  470151.,  473634.,  478332.,  481824.,
      591556.,  596152.,  602272.,  606880.,  613036.,  617656.,  623848.,
      628480.,  768400.,  774560.,  782688.,  788864.,  797040.,  803232.,
      811456.,  817664.,  934860.,  942600.,  952720.,  960480.,  970660.,
      978440.,  988680.,  996480.,  944220.,  952040.,  962240.,  970080.,
      980340.,  988200.,  998520.,  1006400., 953580.,  961480.,  971760.,
      979680.,  990020.,  997960.,  1008360., 1016320., 740816.,  747168.,
      755360.,  761728.,  769968.,  776352.,  784640.,  791040.,  538948.,
      543736.,  549856.,  554656.,  560812.,  565624.,  571816.,  576640.,
      659195.,  665150.,  672710.,  678680.,  686285.,  692270.,  699920.,
      705920.,  851580.,  859560.,  869600.,  877600.,  887700.,  895720.,
      905880.,  913920.,  1030025., 1040050., 1052550., 1062600., 1075175.,
      1085250., 1097900., 1108000., 1039725., 1049850., 1062450., 1072600.,
      1085275., 1095450., 1108200., 1118400., 1049425., 1059650., 1072350.,
      1082600., 1095375., 1105650., 1118500., 1128800., 810060.,  818280.,
      828400.,  836640.,  846820.,  855080.,  865320.,  873600.,  585275.,
      591470.,  599030.,  605240.,  612845.,  619070.,  626720.,  632960.,
      703295.,  709670.,  717650.,  724040.,  732065.,  738470.,  746540.,
      752960.,  908140.,  916680.,  927280.,  935840.,  946500.,  955080.,
      965800.,  974400.,  1097925., 1108650., 1121850., 1132600., 1145875.,
      1156650., 1170000., 1180800., 1107625., 1118450., 1131750., 1142600.,
      1155975., 1166850., 1180300., 1191200., 1117325., 1128250., 1141650.,
      1152600., 1166075., 1177050., 1190600., 1201600., 862140.,  870920.,
      881600.,  890400.,  901140.,  909960.,  920760.,  929600.,  622655.,
      629270.,  637250.,  643880.,  651905.,  658550.,  666620.,  673280.,
      464836.,  470104.,  476416.,  481696.,  488044.,  493336.,  499720.,
      505024.,  594576.,  601632.,  610016.,  617088.,  625520.,  632608.,
      641088.,  648192.,  711500.,  720360.,  730800.,  739680.,  750180.,
      759080.,  769640.,  778560.,  717660.,  726600.,  737120.,  746080.,
      756660.,  765640.,  776280.,  785280.,  723820.,  732840.,  743440.,
      752480.,  763140.,  772200.,  782920.,  792000.,  552144.,  559392.,
      567840.,  575104.,  583600.,  590880.,  599424.,  606720.,  393796.,
      399256.,  405568.,  411040.,  417388.,  422872.,  429256.,  434752.,
      271917.,  275994.,  280674.,  284760.,  289467.,  293562.,  298296.,
      302400.,  342500.,  347960.,  354176.,  359648.,  365900.,  371384.,
      377672.,  383168.,  402895.,  409750.,  417490.,  424360.,  432145.,
      439030.,  446860.,  453760.,  406315.,  413230.,  421030.,  427960.,
      435805.,  442750.,  450640.,  457600.,  409735.,  416710.,  424570.,
      431560.,  439465.,  446470.,  454420.,  461440.,  306452.,  312056.,
      318320.,  323936.,  330236.,  335864.,  342200.,  347840.,  213741.,
      217962.,  222642.,  226872.,  231579.,  235818.,  240552.,  244800.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225.,  216850.,  220950.,  222600.,  226775.,  228450.,  232700.,
      234400.,  224925.,  226650.,  230850.,  232600.,  236875.,  238650.,
      243000.,  244800.,  234625.,  236450.,  240750.,  242600.,  246975.,
      248850.,  253300.,  255200.,  283125.,  285450.,  290250.,  292600.,
      297475.,  299850.,  304800.,  307200.,  292825.,  295250.,  300150.,
      302600.,  307575.,  310050.,  315100.,  317600.,  302525.,  305050.,
      310050.,  312600.,  317675.,  320250.,  325400.,  328000.,  622625.,
      628450.,  636750.,  642600.,  650975.,  656850.,  665300.,  671200.,
      632325.,  638250.,  646650.,  652600.,  661075.,  667050.,  675600.,
      681600.,  642025.,  648050.,  656550.,  662600.,  671175.,  677250.,
      685900.,  692000.,  690525.,  697050.,  706050.,  712600.,  721675.,
      728250.,  737400.,  744000.,  700225.,  706850.,  715950.,  722600.,
      731775.,  738450.,  747700.,  754400.,  709925.,  716650.,  725850.,
      732600.,  741875.,  748650.,  758000.,  764800.,  1030025., 1040050.,
      1052550., 1062600., 1075175., 1085250., 1097900., 1108000., 1039725.,
      1049850., 1062450., 1072600., 1085275., 1095450., 1108200., 1118400.,
      1049425., 1059650., 1072350., 1082600., 1095375., 1105650., 1118500.,
      1128800., 1097925., 1108650., 1121850., 1132600., 1145875., 1156650.,
      1170000., 1180800., 1107625., 1118450., 1131750., 1142600., 1155975.,
      1166850., 1180300., 1191200., 1117325., 1128250., 1141650., 1152600.,
      1166075., 1177050., 1190600., 1201600.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,   99954.,   100251.,  100548.,  103482.,  103788.,  104094.,
      104400.,  107379.,  107694.,  108009.,  108324.,  111348.,  111672.,
      111996.,  112320.,  136900.,  137320.,  137740.,  138160.,  142000.,
      142432.,  142864.,  143296.,  147196.,  147640.,  148084.,  148528.,
      152488.,  152944.,  153400.,  153856.,  175835.,  176390.,  176945.,
      177500.,  182210.,  182780.,  183350.,  183920.,  188705.,  189290.,
      189875.,  190460.,  195320.,  195920.,  196520.,  197120.,  192215.,
      192830.,  193445.,  194060.,  198830.,  199460.,  200090.,  200720.,
      205565.,  206210.,  206855.,  207500.,  212420.,  213080.,  213740.,
      214400.,  208595.,  209270.,  209945.,  210620.,  215450.,  216140.,
      216830.,  217520.,  222425.,  223130.,  223835.,  224540.,  229520.,
      230240.,  230960.,  231680.,  168340.,  168904.,  169468.,  170032.,
      173824.,  174400.,  174976.,  175552.,  179404.,  179992.,  180580.,
      181168.,  185080.,  185680.,  186280.,  186880.,  127161.,  127602.,
      128043.,  128484.,  131274.,  131724.,  132174.,  132624.,  135459.,
      135918.,  136377.,  136836.,  139716.,  140184.,  140652.,  141120.,
      174548.,  175112.,  175676.,  176240.,  179840.,  180416.,  180992.,
      181568.,  185228.,  185816.,  186404.,  186992.,  190712.,  191312.,
      191912.,  192512.,  235024.,  235808.,  236592.,  237376.,  242080.,
      242880.,  243680.,  244480.,  249264.,  250080.,  250896.,  251712.,
      256576.,  257408.,  258240.,  259072.,  296220.,  297240.,  298260.,
      299280.,  305040.,  306080.,  307120.,  308160.,  314020.,  315080.,
      316140.,  317200.,  323160.,  324240.,  325320.,  326400.,  314860.,
      315960.,  317060.,  318160.,  324000.,  325120.,  326240.,  327360.,
      333300.,  334440.,  335580.,  336720.,  342760.,  343920.,  345080.,
      346240.,  333500.,  334680.,  335860.,  337040.,  342960.,  344160.,
      345360.,  346560.,  352580.,  353800.,  355020.,  356240.,  362360.,
      363600.,  364840.,  366080.,  265680.,  266656.,  267632.,  268608.,
      273248.,  274240.,  275232.,  276224.,  280944.,  281952.,  282960.,
      283968.,  288768.,  289792.,  290816.,  291840.,  198164.,  198920.,
      199676.,  200432.,  203840.,  204608.,  205376.,  206144.,  209612.,
      210392.,  211172.,  211952.,  215480.,  216272.,  217064.,  217856.,
      259075.,  259990.,  260905.,  261820.,  265930.,  266860.,  267790.,
      268720.,  272905.,  273850.,  274795.,  275740.,  280000.,  280960.,
      281920.,  282880.,  344460.,  345720.,  346980.,  348240.,  353600.,
      354880.,  356160.,  357440.,  362900.,  364200.,  365500.,  366800.,
      372360.,  373680.,  375000.,  376320.,  428825.,  430450.,  432075.,
      433700.,  440250.,  441900.,  443550.,  445200.,  451875.,  453550.,
      455225.,  456900.,  463700.,  465400.,  467100.,  468800.,  448125.,
      449850.,  451575.,  453300.,  459950.,  461700.,  463450.,  465200.,
      471975.,  473750.,  475525.,  477300.,  484200.,  486000.,  487800.,
      489600.,  467425.,  469250.,  471075.,  472900.,  479650.,  481500.,
      483350.,  485200.,  492075.,  493950.,  495825.,  497700.,  504700.,
      506600.,  508500.,  510400.,  368700.,  370200.,  371700.,  373200.,
      378480.,  380000.,  381520.,  383040.,  388420.,  389960.,  391500.,
      393040.,  398520.,  400080.,  401640.,  403200.,  272275.,  273430.,
      274585.,  275740.,  279610.,  280780.,  281950.,  283120.,  287065.,
      288250.,  289435.,  290620.,  294640.,  295840.,  297040.,  298240.,
      346855.,  348190.,  349525.,  350860.,  355390.,  356740.,  358090.,
      359440.,  364045.,  365410.,  366775.,  368140.,  372820.,  374200.,
      375580.,  376960.,  457020.,  458840.,  460660.,  462480.,  468400.,
      470240.,  472080.,  473920.,  479940.,  481800.,  483660.,  485520.,
      491640.,  493520.,  495400.,  497280.,  563925.,  566250.,  568575.,
      570900.,  578150.,  580500.,  582850.,  585200.,  592575.,  594950.,
      597325.,  599700.,  607200.,  609600.,  612000.,  614400.,  583225.,
      585650.,  588075.,  590500.,  597850.,  600300.,  602750.,  605200.,
      612675.,  615150.,  617625.,  620100.,  627700.,  630200.,  632700.,
      635200.,  602525.,  605050.,  607575.,  610100.,  617550.,  620100.,
      622650.,  625200.,  632775.,  635350.,  637925.,  640500.,  648200.,
      650800.,  653400.,  656000.,  472300.,  474360.,  476420.,  478480.,
      484320.,  486400.,  488480.,  490560.,  496500.,  498600.,  500700.,
      502800.,  508840.,  510960.,  513080.,  515200.,  346615.,  348190.,
      349765.,  351340.,  355630.,  357220.,  358810.,  360400.,  364765.,
      366370.,  367975.,  369580.,  374020.,  375640.,  377260.,  378880.,
      242996.,  244232.,  245468.,  246704.,  250016.,  251264.,  252512.,
      253760.,  257132.,  258392.,  259652.,  260912.,  264344.,  265616.,
      266888.,  268160.,  316560.,  318240.,  319920.,  321600.,  325920.,
      327616.,  329312.,  331008.,  335408.,  337120.,  338832.,  340544.,
      345024.,  346752.,  348480.,  350208.,  385980.,  388120.,  390260.,
      392400.,  397680.,  399840.,  402000.,  404160.,  409540.,  411720.,
      413900.,  416080.,  421560.,  423760.,  425960.,  428160.,  398220.,
      400440.,  402660.,  404880.,  410240.,  412480.,  414720.,  416960.,
      422420.,  424680.,  426940.,  429200.,  434760.,  437040.,  439320.,
      441600.,  410460.,  412760.,  415060.,  417360.,  422800.,  425120.,
      427440.,  429760.,  435300.,  437640.,  439980.,  442320.,  447960.,
      450320.,  452680.,  455040.,  317520.,  319392.,  321264.,  323136.,
      327392.,  329280.,  331168.,  333056.,  337392.,  339296.,  341200.,
      343104.,  347520.,  349440.,  351360.,  353280.,  229748.,  231176.,
      232604.,  234032.,  237152.,  238592.,  240032.,  241472.,  244652.,
      246104.,  247556.,  249008.,  252248.,  253712.,  255176.,  256640.,
      149661.,  150714.,  151767.,  152820.,  155070.,  156132.,  157194.,
      158256.,  160551.,  161622.,  162693.,  163764.,  166104.,  167184.,
      168264.,  169344.,  191668.,  193096.,  194524.,  195952.,  198880.,
      200320.,  201760.,  203200.,  206188.,  207640.,  209092.,  210544.,
      213592.,  215056.,  216520.,  217984.,  229415.,  231230.,  233045.,
      234860.,  238430.,  240260.,  242090.,  243920.,  247565.,  249410.,
      251255.,  253100.,  256820.,  258680.,  260540.,  262400.,  236195.,
      238070.,  239945.,  241820.,  245450.,  247340.,  249230.,  251120.,
      254825.,  256730.,  258635.,  260540.,  264320.,  266240.,  268160.,
      270080.,  242975.,  244910.,  246845.,  248780.,  252470.,  254420.,
      256370.,  258320.,  262085.,  264050.,  266015.,  267980.,  271820.,
      273800.,  275780.,  277760.,  183940.,  185512.,  187084.,  188656.,
      191536.,  193120.,  194704.,  196288.,  199228.,  200824.,  202420.,
      204016.,  207016.,  208624.,  210232.,  211840.,  129933.,  131130.,
      132327.,  133524.,  135630.,  136836.,  138042.,  139248.,  141399.,
      142614.,  143829.,  145044.,  147240.,  148464.,  149688.,  150912.,
      536625.,  538434.,  540243.,  542052.,  546498.,  548316.,  550134.,
      551952.,  556443.,  558270.,  560097.,  561924.,  566460.,  568296.,
      570132.,  571968.,  703396.,  705832.,  708268.,  710704.,  716560.,
      719008.,  721456.,  723904.,  729820.,  732280.,  734740.,  737200.,
      743176.,  745648.,  748120.,  750592.,  863795.,  866870.,  869945.,
      873020.,  880250.,  883340.,  886430.,  889520.,  896825.,  899930.,
      903035.,  906140.,  913520.,  916640.,  919760.,  922880.,  880175.,
      883310.,  886445.,  889580.,  896870.,  900020.,  903170.,  906320.,
      913685.,  916850.,  920015.,  923180.,  930620.,  933800.,  936980.,
      940160.,  896555.,  899750.,  902945.,  906140.,  913490.,  916700.,
      919910.,  923120.,  930545.,  933770.,  936995.,  940220.,  947720.,
      950960.,  954200.,  957440.,  702580.,  705160.,  707740.,  710320.,
      716128.,  718720.,  721312.,  723904.,  729772.,  732376.,  734980.,
      737584.,  743512.,  746128.,  748744.,  751360.,  515745.,  517698.,
      519651.,  521604.,  525906.,  527868.,  529830.,  531792.,  536139.,
      538110.,  540081.,  542052.,  546444.,  548424.,  550404.,  552384.,
      676532.,  679112.,  681692.,  684272.,  689888.,  692480.,  695072.,
      697664.,  703340.,  705944.,  708548.,  711152.,  716888.,  719504.,
      722120.,  724736.,  882832.,  886304.,  889776.,  893248.,  900640.,
      904128.,  907616.,  911104.,  918576.,  922080.,  925584.,  929088.,
      936640.,  940160.,  943680.,  947200.,  1079100., 1083480., 1087860.,
      1092240., 1101360., 1105760., 1110160., 1114560., 1123780., 1128200.,
      1132620., 1137040., 1146360., 1150800., 1155240., 1159680., 1097740.,
      1102200., 1106660., 1111120., 1120320., 1124800., 1129280., 1133760.,
      1143060., 1147560., 1152060., 1156560., 1165960., 1170480., 1175000.,
      1179520., 1116380., 1120920., 1125460., 1130000., 1139280., 1143840.,
      1148400., 1152960., 1162340., 1166920., 1171500., 1176080., 1185560.,
      1190160., 1194760., 1199360., 870480.,  874144.,  877808.,  881472.,
      888800.,  892480.,  896160.,  899840.,  907248.,  910944.,  914640.,
      918336.,  925824.,  929536.,  933248.,  936960.,  635636.,  638408.,
      641180.,  643952.,  649376.,  652160.,  654944.,  657728.,  663212.,
      666008.,  668804.,  671600.,  677144.,  679952.,  682760.,  685568.,
      785755.,  789190.,  792625.,  796060.,  802690.,  806140.,  809590.,
      813040.,  819745.,  823210.,  826675.,  830140.,  836920.,  840400.,
      843880.,  847360.,  1019820., 1024440., 1029060., 1033680., 1042400.,
      1047040., 1051680., 1056320., 1065140., 1069800., 1074460., 1079120.,
      1088040., 1092720., 1097400., 1102080., 1239425., 1245250., 1251075.,
      1256900., 1267650., 1273500., 1279350., 1285200., 1296075., 1301950.,
      1307825., 1313700., 1324700., 1330600., 1336500., 1342400., 1258725.,
      1264650., 1270575., 1276500., 1287350., 1293300., 1299250., 1305200.,
      1316175., 1322150., 1328125., 1334100., 1345200., 1351200., 1357200.,
      1363200., 1278025., 1284050., 1290075., 1296100., 1307050., 1313100.,
      1319150., 1325200., 1336275., 1342350., 1348425., 1354500., 1365700.,
      1371800., 1377900., 1384000., 990300.,  995160.,  1000020., 1004880.,
      1013520., 1018400., 1023280., 1028160., 1036900., 1041800., 1046700.,
      1051600., 1060440., 1065360., 1070280., 1075200., 718315.,  721990.,
      725665.,  729340.,  735730.,  739420.,  743110.,  746800.,  753265.,
      756970.,  760675.,  764380.,  770920.,  774640.,  778360.,  782080.,
      873535.,  877390.,  881245.,  885100.,  892150.,  896020.,  899890.,
      903760.,  910885.,  914770.,  918655.,  922540.,  929740.,  933640.,
      937540.,  941440.,  1132380., 1137560., 1142740., 1147920., 1157200.,
      1162400., 1167600., 1172800., 1182180., 1187400., 1192620., 1197840.,
      1207320., 1212560., 1217800., 1223040., 1374525., 1381050., 1387575.,
      1394100., 1405550., 1412100., 1418650., 1425200., 1436775., 1443350.,
      1449925., 1456500., 1468200., 1474800., 1481400., 1488000., 1393825.,
      1400450., 1407075., 1413700., 1425250., 1431900., 1438550., 1445200.,
      1456875., 1463550., 1470225., 1476900., 1488700., 1495400., 1502100.,
      1508800., 1413125., 1419850., 1426575., 1433300., 1444950., 1451700.,
      1458450., 1465200., 1476975., 1483750., 1490525., 1497300., 1509200.,
      1516000., 1522800., 1529600., 1093900., 1099320., 1104740., 1110160.,
      1119360., 1124800., 1130240., 1135680., 1144980., 1150440., 1155900.,
      1161360., 1170760., 1176240., 1181720., 1187200., 792655.,  796750.,
      800845.,  804940.,  811750.,  815860.,  819970.,  824080.,  830965.,
      835090.,  839215.,  843340.,  850300.,  854440.,  858580.,  862720.,
      583700.,  586952.,  590204.,  593456.,  598784.,  602048.,  605312.,
      608576.,  613964.,  617240.,  620516.,  623792.,  629240.,  632528.,
      635816.,  639104.,  749328.,  753696.,  758064.,  762432.,  769440.,
      773824.,  778208.,  782592.,  789680.,  794080.,  798480.,  802880.,
      810048.,  814464.,  818880.,  823296.,  900060.,  905560.,  911060.,
      916560.,  925200.,  930720.,  936240.,  941760.,  950500.,  956040.,
      961580.,  967120.,  975960.,  981520.,  987080.,  992640.,  912300.,
      917880.,  923460.,  929040.,  937760.,  943360.,  948960.,  954560.,
      963380.,  969000.,  974620.,  980240.,  989160.,  994800.,  1000440.,
      1006080., 924540.,  930200.,  935860.,  941520.,  950320.,  956000.,
      961680.,  967360.,  976260.,  981960.,  987660.,  993360.,  1002360.,
      1008080., 1013800., 1019520., 707280.,  711840.,  716400.,  720960.,
      727904.,  732480.,  737056.,  741632.,  748656.,  753248.,  757840.,
      762432.,  769536.,  774144.,  778752.,  783360.,  505940.,  509384.,
      512828.,  516272.,  521408.,  524864.,  528320.,  531776.,  536972.,
      540440.,  543908.,  547376.,  552632.,  556112.,  559592.,  563072.,
      344709.,  347274.,  349839.,  352404.,  356166.,  358740.,  361314.,
      363888.,  367695.,  370278.,  372861.,  375444.,  379296.,  381888.,
      384480.,  387072.,  435604.,  439048.,  442492.,  445936.,  450880.,
      454336.,  457792.,  461248.,  466252.,  469720.,  473188.,  476656.,
      481720.,  485200.,  488680.,  492160.,  514175.,  518510.,  522845.,
      527180.,  533270.,  537620.,  541970.,  546320.,  552485.,  556850.,
      561215.,  565580.,  571820.,  576200.,  580580.,  584960.,  520955.,
      525350.,  529745.,  534140.,  540290.,  544700.,  549110.,  553520.,
      559745.,  564170.,  568595.,  573020.,  579320.,  583760.,  588200.,
      592640.,  527735.,  532190.,  536645.,  541100.,  547310.,  551780.,
      556250.,  560720.,  567005.,  571490.,  575975.,  580460.,  586820.,
      591320.,  595820.,  600320.,  395620.,  399208.,  402796.,  406384.,
      411280.,  414880.,  418480.,  422080.,  427036.,  430648.,  434260.,
      437872.,  442888.,  446512.,  450136.,  453760.,  276597.,  279306.,
      282015.,  284724.,  288342.,  291060.,  293778.,  296496.,  300159.,
      302886.,  305613.,  308340.,  312048.,  314784.,  317520.,  320256.,
      973593.,  976914.,  980235.,  983556.,  989514.,  992844.,  996174.,
      999504.,  1005507., 1008846., 1012185., 1015524., 1021572., 1024920.,
      1028268., 1031616., 1269892., 1274344., 1278796., 1283248., 1291120.,
      1295584., 1300048., 1304512., 1312444., 1316920., 1321396., 1325872.,
      1333864., 1338352., 1342840., 1347328., 1551755., 1557350., 1562945.,
      1568540., 1578290., 1583900., 1589510., 1595120., 1604945., 1610570.,
      1616195., 1621820., 1631720., 1637360., 1643000., 1648640., 1568135.,
      1573790., 1579445., 1585100., 1594910., 1600580., 1606250., 1611920.,
      1621805., 1627490., 1633175., 1638860., 1648820., 1654520., 1660220.,
      1665920., 1584515., 1590230., 1595945., 1601660., 1611530., 1617260.,
      1622990., 1628720., 1638665., 1644410., 1650155., 1655900., 1665920.,
      1671680., 1677440., 1683200., 1236820., 1241416., 1246012., 1250608.,
      1258432., 1263040., 1267648., 1272256., 1280140., 1284760., 1289380.,
      1294000., 1301944., 1306576., 1311208., 1315840., 904329.,  907794.,
      911259.,  914724.,  920538.,  924012.,  927486.,  930960.,  936819.,
      940302.,  943785.,  947268.,  953172.,  956664.,  960156.,  963648.,
      1178516., 1183112., 1187708., 1192304., 1199936., 1204544., 1209152.,
      1213760., 1221452., 1226072., 1230692., 1235312., 1243064., 1247696.,
      1252328., 1256960., 1530640., 1536800., 1542960., 1549120., 1559200.,
      1565376., 1571552., 1577728., 1587888., 1594080., 1600272., 1606464.,
      1616704., 1622912., 1629120., 1635328., 1861980., 1869720., 1877460.,
      1885200., 1897680., 1905440., 1913200., 1920960., 1933540., 1941320.,
      1949100., 1956880., 1969560., 1977360., 1985160., 1992960., 1880620.,
      1888440., 1896260., 1904080., 1916640., 1924480., 1932320., 1940160.,
      1952820., 1960680., 1968540., 1976400., 1989160., 1997040., 2004920.,
      2012800., 1899260., 1907160., 1915060., 1922960., 1935600., 1943520.,
      1951440., 1959360., 1972100., 1980040., 1987980., 1995920., 2008760.,
      2016720., 2024680., 2032640., 1475280., 1481632., 1487984., 1494336.,
      1504352., 1510720., 1517088., 1523456., 1533552., 1539936., 1546320.,
      1552704., 1562880., 1569280., 1575680., 1582080., 1073108., 1077896.,
      1082684., 1087472., 1094912., 1099712., 1104512., 1109312., 1116812.,
      1121624., 1126436., 1131248., 1138808., 1143632., 1148456., 1153280.,
      1312435., 1318390., 1324345., 1330300., 1339450., 1345420., 1351390.,
      1357360., 1366585., 1372570., 1378555., 1384540., 1393840., 1399840.,
      1405840., 1411840., 1695180., 1703160., 1711140., 1719120., 1731200.,
      1739200., 1747200., 1755200., 1767380., 1775400., 1783420., 1791440.,
      1803720., 1811760., 1819800., 1827840., 2050025., 2060050., 2070075.,
      2080100., 2095050., 2105100., 2115150., 2125200., 2140275., 2150350.,
      2160425., 2170500., 2185700., 2195800., 2205900., 2216000., 2069325.,
      2079450., 2089575., 2099700., 2114750., 2124900., 2135050., 2145200.,
      2160375., 2170550., 2180725., 2190900., 2206200., 2216400., 2226600.,
      2236800., 2088625., 2098850., 2109075., 2119300., 2134450., 2144700.,
      2154950., 2165200., 2180475., 2190750., 2201025., 2211300., 2226700.,
      2237000., 2247300., 2257600., 1611900., 1620120., 1628340., 1636560.,
      1648560., 1656800., 1665040., 1673280., 1685380., 1693640., 1701900.,
      1710160., 1722360., 1730640., 1738920., 1747200., 1164355., 1170550.,
      1176745., 1182940., 1191850., 1198060., 1204270., 1210480., 1219465.,
      1225690., 1231915., 1238140., 1247200., 1253440., 1259680., 1265920.,
      1400215., 1406590., 1412965., 1419340., 1428910., 1435300., 1441690.,
      1448080., 1457725., 1464130., 1470535., 1476940., 1486660., 1493080.,
      1499500., 1505920., 1807740., 1816280., 1824820., 1833360., 1846000.,
      1854560., 1863120., 1871680., 1884420., 1893000., 1901580., 1910160.,
      1923000., 1931600., 1940200., 1948800., 2185125., 2195850., 2206575.,
      2217300., 2232950., 2243700., 2254450., 2265200., 2280975., 2291750.,
      2302525., 2313300., 2329200., 2340000., 2350800., 2361600., 2204425.,
      2215250., 2226075., 2236900., 2252650., 2263500., 2274350., 2285200.,
      2301075., 2311950., 2322825., 2333700., 2349700., 2360600., 2371500.,
      2382400., 2223725., 2234650., 2245575., 2256500., 2272350., 2283300.,
      2294250., 2305200., 2321175., 2332150., 2343125., 2354100., 2370200.,
      2381200., 2392200., 2403200., 1715500., 1724280., 1733060., 1741840.,
      1754400., 1763200., 1772000., 1780800., 1793460., 1802280., 1811100.,
      1819920., 1832680., 1841520., 1850360., 1859200., 1238695., 1245310.,
      1251925., 1258540., 1267870., 1274500., 1281130., 1287760., 1297165.,
      1303810., 1310455., 1317100., 1326580., 1333240., 1339900., 1346560.,
      924404.,  929672.,  934940.,  940208.,  947552.,  952832.,  958112.,
      963392.,  970796.,  976088.,  981380.,  986672.,  994136.,  999440.,
      1004744., 1010048., 1182096., 1189152., 1196208., 1203264., 1212960.,
      1220032., 1227104., 1234176., 1243952., 1251040., 1258128., 1265216.,
      1275072., 1282176., 1289280., 1296384., 1414140., 1423000., 1431860.,
      1440720., 1452720., 1461600., 1470480., 1479360., 1491460., 1500360.,
      1509260., 1518160., 1530360., 1539280., 1548200., 1557120., 1426380.,
      1435320., 1444260., 1453200., 1465280., 1474240., 1483200., 1492160.,
      1504340., 1513320., 1522300., 1531280., 1543560., 1552560., 1561560.,
      1570560., 1438620., 1447640., 1456660., 1465680., 1477840., 1486880.,
      1495920., 1504960., 1517220., 1526280., 1535340., 1544400., 1556760.,
      1565840., 1574920., 1584000., 1097040., 1104288., 1111536., 1118784.,
      1128416., 1135680., 1142944., 1150208., 1159920., 1167200., 1174480.,
      1181760., 1191552., 1198848., 1206144., 1213440., 782132.,  787592.,
      793052.,  798512.,  805664.,  811136.,  816608.,  822080.,  829292.,
      834776.,  840260.,  845744.,  853016.,  858512.,  864008.,  869504.,
      539757.,  543834.,  547911.,  551988.,  557262.,  561348.,  565434.,
      569520.,  574839.,  578934.,  583029.,  587124.,  592488.,  596592.,
      600696.,  604800.,  679540.,  685000.,  690460.,  695920.,  702880.,
      708352.,  713824.,  719296.,  726316.,  731800.,  737284.,  742768.,
      749848.,  755344.,  760840.,  766336.,  798935.,  805790.,  812645.,
      819500.,  828110.,  834980.,  841850.,  848720.,  857405.,  864290.,
      871175.,  878060.,  886820.,  893720.,  900620.,  907520.,  805715.,
      812630.,  819545.,  826460.,  835130.,  842060.,  848990.,  855920.,
      864665.,  871610.,  878555.,  885500.,  894320.,  901280.,  908240.,
      915200.,  812495.,  819470.,  826445.,  833420.,  842150.,  849140.,
      856130.,  863120.,  871925.,  878930.,  885935.,  892940.,  901820.,
      908840.,  915860.,  922880.,  607300.,  612904.,  618508.,  624112.,
      631024.,  636640.,  642256.,  647872.,  654844.,  660472.,  666100.,
      671728.,  678760.,  684400.,  690040.,  695680.,  423261.,  427482.,
      431703.,  435924.,  441054.,  445284.,  449514.,  453744.,  458919.,
      463158.,  467397.,  471636.,  476856.,  481104.,  485352.,  489600.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825.,  430450.,  432075.,  433700.,  440250.,  441900.,  443550.,
      445200.,  451875.,  453550.,  455225.,  456900.,  463700.,  465400.,
      467100.,  468800.,  448125.,  449850.,  451575.,  453300.,  459950.,
      461700.,  463450.,  465200.,  471975.,  473750.,  475525.,  477300.,
      484200.,  486000.,  487800.,  489600.,  467425.,  469250.,  471075.,
      472900.,  479650.,  481500.,  483350.,  485200.,  492075.,  493950.,
      495825.,  497700.,  504700.,  506600.,  508500.,  510400.,  563925.,
      566250.,  568575.,  570900.,  578150.,  580500.,  582850.,  585200.,
      592575.,  594950.,  597325.,  599700.,  607200.,  609600.,  612000.,
      614400.,  583225.,  585650.,  588075.,  590500.,  597850.,  600300.,
      602750.,  605200.,  612675.,  615150.,  617625.,  620100.,  627700.,
      630200.,  632700.,  635200.,  602525.,  605050.,  607575.,  610100.,
      617550.,  620100.,  622650.,  625200.,  632775.,  635350.,  637925.,
      640500.,  648200.,  650800.,  653400.,  656000.,  1239425., 1245250.,
      1251075., 1256900., 1267650., 1273500., 1279350., 1285200., 1296075.,
      1301950., 1307825., 1313700., 1324700., 1330600., 1336500., 1342400.,
      1258725., 1264650., 1270575., 1276500., 1287350., 1293300., 1299250.,
      1305200., 1316175., 1322150., 1328125., 1334100., 1345200., 1351200.,
      1357200., 1363200., 1278025., 1284050., 1290075., 1296100., 1307050.,
      1313100., 1319150., 1325200., 1336275., 1342350., 1348425., 1354500.,
      1365700., 1371800., 1377900., 1384000., 1374525., 1381050., 1387575.,
      1394100., 1405550., 1412100., 1418650., 1425200., 1436775., 1443350.,
      1449925., 1456500., 1468200., 1474800., 1481400., 1488000., 1393825.,
      1400450., 1407075., 1413700., 1425250., 1431900., 1438550., 1445200.,
      1456875., 1463550., 1470225., 1476900., 1488700., 1495400., 1502100.,
      1508800., 1413125., 1419850., 1426575., 1433300., 1444950., 1451700.,
      1458450., 1465200., 1476975., 1483750., 1490525., 1497300., 1509200.,
      1516000., 1522800., 1529600., 2050025., 2060050., 2070075., 2080100.,
      2095050., 2105100., 2115150., 2125200., 2140275., 2150350., 2160425.,
      2170500., 2185700., 2195800., 2205900., 2216000., 2069325., 2079450.,
      2089575., 2099700., 2114750., 2124900., 2135050., 2145200., 2160375.,
      2170550., 2180725., 2190900., 2206200., 2216400., 2226600., 2236800.,
      2088625., 2098850., 2109075., 2119300., 2134450., 2144700., 2154950.,
      2165200., 2180475., 2190750., 2201025., 2211300., 2226700., 2237000.,
      2247300., 2257600., 2185125., 2195850., 2206575., 2217300., 2232950.,
      2243700., 2254450., 2265200., 2280975., 2291750., 2302525., 2313300.,
      2329200., 2340000., 2350800., 2361600., 2204425., 2215250., 2226075.,
      2236900., 2252650., 2263500., 2274350., 2285200., 2301075., 2311950.,
      2322825., 2333700., 2349700., 2360600., 2371500., 2382400., 2223725.,
      2234650., 2245575., 2256500., 2272350., 2283300., 2294250., 2305200.,
      2321175., 2332150., 2343125., 2354100., 2370200., 2381200., 2392200.,
      2403200.};
  const std::array<int, 4> in_shape = {{3, 6, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790.,  4748.,  6188.,  7550.,  7760.,
      7970.,  8180.,  6340.,  4598.,  3000.,  3854.,  4630.,  4750.,  4870.,
      4990.,  3800.,  2703.,  10164., 13322., 16360., 16630., 16900., 17170.,
      13460., 9885.,  12884., 16820., 20570., 20880., 21190., 21500., 16780.,
      12266., 15070., 19580., 23825., 24150., 24475., 24800., 19250., 13990.,
      16750., 21740., 26425., 26750., 27075., 27400., 21250., 15430., 11372.,
      14636., 17630., 17840., 18050., 18260., 14020., 10070., 6888.,  8750.,
      10390., 10510., 10630., 10750., 8120.,  5727.,  18372., 23978., 29320.,
      29590., 29860., 30130., 23540., 17229., 22388., 29108., 35450., 35760.,
      36070., 36380., 28300., 20618., 25150., 32540., 39425., 39750., 40075.,
      40400., 31250., 22630., 26830., 34700., 42025., 42350., 42675., 43000.,
      33250., 24070., 17996., 23084., 27710., 27920., 28130., 28340., 21700.,
      15542., 10776., 13646., 16150., 16270., 16390., 16510., 12440., 8751.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      23825., 24150., 24475., 24800., 26425., 26750., 27075., 27400.,
      39425., 39750., 40075., 40400., 42025., 42350., 42675., 43000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,  3912.,  5206.,  5332.,  6635.,  6800.,  7160.,  7340.,  7685.,
      7880.,  8210.,  8420.,  6586.,  6760.,  4947.,  5082.,  6592.,  6760.,
      8832.,  9064.,  11080., 11380., 11680., 12000., 12280., 12620., 12880.,
      13240., 10224., 10520., 7600.,  7828.,  9710.,  9980.,  12870., 13240.,
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400., 14050.,
      14500., 10355., 10700., 12950., 13340., 17030., 17560., 20975., 21650.,
      21600., 22300., 22225., 22950., 22850., 23600., 17890., 18500., 13115.,
      13580., 9136.,  9496.,  11888., 12376., 14480., 15100., 14880., 15520.,
      15280., 15940., 15680., 16360., 12128., 12680., 8776.,  9196.,  5694.,
      6000.,  7294.,  7708.,  8735.,  9260.,  8960.,  9500.,  9185.,  9740.,
      9410.,  9980.,  7138.,  7600.,  5055.,  5406.,  19806., 20328., 25942.,
      26644., 31835., 32720., 32360., 33260., 32885., 33800., 33410., 34340.,
      26170., 26920., 19203., 19770., 25024., 25768., 32640., 33640., 39880.,
      41140., 40480., 41760., 41080., 42380., 41680., 43000., 32496., 33560.,
      23728., 24532., 29150., 30140., 37830., 39160., 45975., 47650., 46600.,
      48300., 47225., 48950., 47850., 49600., 37090., 38500., 26915., 27980.,
      32390., 33500., 41990., 43480., 50975., 52850., 51600., 53500., 52225.,
      54150., 52850., 54800., 40930., 42500., 29675., 30860., 21808., 22744.,
      28016., 29272., 33680., 35260., 34080., 35680., 34480., 36100., 34880.,
      36520., 26720., 28040., 19144., 20140., 13038., 13776., 16510., 17500.,
      19535., 20780., 19760., 21020., 19985., 21260., 20210., 21500., 15202.,
      16240., 10671., 11454., 35790., 36744., 46678., 47956., 57035., 58640.,
      57560., 59180., 58085., 59720., 58610., 60260., 45754., 47080., 33459.,
      34458., 43456., 44776., 56448., 58216., 68680., 70900., 69280., 71520.,
      69880., 72140., 70480., 72760., 54768., 56600., 39856., 41236., 48590.,
      50300., 62790., 65080., 75975., 78850., 76600., 79500., 77225., 80150.,
      77850., 80800., 60130., 62500., 43475., 45260., 51830., 53660., 66950.,
      69400., 80975., 84050., 81600., 84700., 82225., 85350., 82850., 86000.,
      63970., 66500., 46235., 48140., 34480., 35992., 44144., 46168., 52880.,
      55420., 53280., 55840., 53680., 56260., 54080., 56680., 41312., 43400.,
      29512., 31084., 20382., 21552., 25726., 27292., 30335., 32300., 30560.,
      32540., 30785., 32780., 31010., 33020., 23266., 24880., 16287., 17502.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100., 17225., 17750., 17850., 18400.,
      20975., 21650., 21600., 22300., 22225., 22950., 22850., 23600.,
      45975., 47650., 46600., 48300., 47225., 48950., 47850., 49600.,
      50975., 52850., 51600., 53500., 52225., 54150., 52850., 54800.,
      75975., 78850., 76600., 79500., 77225., 80150., 77850., 80800.,
      80975., 84050., 81600., 84700., 82225., 85350., 82850., 86000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,   7644.,   7734.,   7824.,   10286.,  10412.,  10538.,  10664.,
      13105.,  13270.,  13435.,  13600.,  14140.,  14320.,  14500.,  14680.,
      15175.,  15370.,  15565.,  15760.,  16210.,  16420.,  16630.,  16840.,
      12998.,  13172.,  13346.,  13520.,  9759.,   9894.,   10029.,  10164.,
      13016.,  13184.,  13352.,  13520.,  17432.,  17664.,  17896.,  18128.,
      21860.,  22160.,  22460.,  22760.,  23040.,  23360.,  23680.,  24000.,
      24220.,  24560.,  24900.,  25240.,  25400.,  25760.,  26120.,  26480.,
      20152.,  20448.,  20744.,  21040.,  14972.,  15200.,  15428.,  15656.,
      19150.,  19420.,  19690.,  19960.,  25370.,  25740.,  26110.,  26480.,
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      27650.,  28100.,  28550.,  29000.,  20365.,  20710.,  21055.,  21400.,
      25510.,  25900.,  26290.,  26680.,  33530.,  34060.,  34590.,  35120.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      35170.,  35780.,  36390.,  37000.,  25765.,  26230.,  26695.,  27160.,
      17912.,  18272.,  18632.,  18992.,  23288.,  23776.,  24264.,  24752.,
      28340.,  28960.,  29580.,  30200.,  29120.,  29760.,  30400.,  31040.,
      29900.,  30560.,  31220.,  31880.,  30680.,  31360.,  32040.,  32720.,
      23704.,  24256.,  24808.,  25360.,  17132.,  17552.,  17972.,  18392.,
      11082.,  11388.,  11694.,  12000.,  14174.,  14588.,  15002.,  15416.,
      16945.,  17470.,  17995.,  18520.,  17380.,  17920.,  18460.,  19000.,
      17815.,  18370.,  18925.,  19480.,  18250.,  18820.,  19390.,  19960.,
      13814.,  14276.,  14738.,  15200.,  9759.,   10110.,  10461.,  10812.,
      39090.,  39612.,  40134.,  40656.,  51182.,  51884.,  52586.,  53288.,
      62785.,  63670.,  64555.,  65440.,  63820.,  64720.,  65620.,  66520.,
      64855.,  65770.,  66685.,  67600.,  65890.,  66820.,  67750.,  68680.,
      51590.,  52340.,  53090.,  53840.,  37839.,  38406.,  38973.,  39540.,
      49304.,  50048.,  50792.,  51536.,  64280.,  65280.,  66280.,  67280.,
      78500.,  79760.,  81020.,  82280.,  79680.,  80960.,  82240.,  83520.,
      80860.,  82160.,  83460.,  84760.,  82040.,  83360.,  84680.,  86000.,
      63928.,  64992.,  66056.,  67120.,  46652.,  47456.,  48260.,  49064.,
      57310.,  58300.,  59290.,  60280.,  74330.,  75660.,  76990.,  78320.,
      90275.,  91950.,  93625.,  95300.,  91500.,  93200.,  94900.,  96600.,
      92725.,  94450.,  96175.,  97900.,  93950.,  95700.,  97450.,  99200.,
      72770.,  74180.,  75590.,  77000.,  52765.,  53830.,  54895.,  55960.,
      63670.,  64780.,  65890.,  67000.,  82490.,  83980.,  85470.,  86960.,
      100075., 101950., 103825., 105700., 101300., 103200., 105100., 107000.,
      102525., 104450., 106375., 108300., 103750., 105700., 107650., 109600.,
      80290.,  81860.,  83430.,  85000.,  58165.,  59350.,  60535.,  61720.,
      42680.,  43616.,  44552.,  45488.,  54776.,  56032.,  57288.,  58544.,
      65780.,  67360.,  68940.,  70520.,  66560.,  68160.,  69760.,  71360.,
      67340.,  68960.,  70580.,  72200.,  68120.,  69760.,  71400.,  73040.,
      52120.,  53440.,  54760.,  56080.,  37292.,  38288.,  39284.,  40280.,
      25338.,  26076.,  26814.,  27552.,  32030.,  33020.,  34010.,  35000.,
      37825.,  39070.,  40315.,  41560.,  38260.,  39520.,  40780.,  42040.,
      38695.,  39970.,  41245.,  42520.,  39130.,  40420.,  41710.,  43000.,
      29366.,  30404.,  31442.,  32480.,  20559.,  21342.,  22125.,  22908.,
      70626.,  71580.,  72534.,  73488.,  92078.,  93356.,  94634.,  95912.,
      112465., 114070., 115675., 117280., 113500., 115120., 116740., 118360.,
      114535., 116170., 117805., 119440., 115570., 117220., 118870., 120520.,
      90182.,  91508.,  92834.,  94160.,  65919.,  66918.,  67917.,  68916.,
      85592.,  86912.,  88232.,  89552.,  111128., 112896., 114664., 116432.,
      135140., 137360., 139580., 141800., 136320., 138560., 140800., 143040.,
      137500., 139760., 142020., 144280., 138680., 140960., 143240., 145520.,
      107704., 109536., 111368., 113200., 78332.,  79712.,  81092.,  82472.,
      95470.,  97180.,  98890.,  100600., 123290., 125580., 127870., 130160.,
      149075., 151950., 154825., 157700., 150300., 153200., 156100., 159000.,
      151525., 154450., 157375., 160300., 152750., 155700., 158650., 161600.,
      117890., 120260., 122630., 125000., 85165.,  86950.,  88735.,  90520.,
      101830., 103660., 105490., 107320., 131450., 133900., 136350., 138800.,
      158875., 161950., 165025., 168100., 160100., 163200., 166300., 169400.,
      161325., 164450., 167575., 170700., 162550., 165700., 168850., 172000.,
      125410., 127940., 130470., 133000., 90565.,  92470.,  94375.,  96280.,
      67448.,  68960.,  70472.,  71984.,  86264.,  88288.,  90312.,  92336.,
      103220., 105760., 108300., 110840., 104000., 106560., 109120., 111680.,
      104780., 107360., 109940., 112520., 105560., 108160., 110760., 113360.,
      80536.,  82624.,  84712.,  86800.,  57452.,  59024.,  60596.,  62168.,
      39594.,  40764.,  41934.,  43104.,  49886.,  51452.,  53018.,  54584.,
      58705.,  60670.,  62635.,  64600.,  59140.,  61120.,  63100.,  65080.,
      59575.,  61570.,  63565.,  65560.,  60010.,  62020.,  64030.,  66040.,
      44918.,  46532.,  48146.,  49760.,  31359.,  32574.,  33789.,  35004.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      90275.,  91950.,  93625.,  95300.,  91500.,  93200.,  94900.,  96600.,
      92725.,  94450.,  96175.,  97900.,  93950.,  95700.,  97450.,  99200.,
      100075., 101950., 103825., 105700., 101300., 103200., 105100., 107000.,
      102525., 104450., 106375., 108300., 103750., 105700., 107650., 109600.,
      149075., 151950., 154825., 157700., 150300., 153200., 156100., 159000.,
      151525., 154450., 157375., 160300., 152750., 155700., 158650., 161600.,
      158875., 161950., 165025., 168100., 160100., 163200., 166300., 169400.,
      161325., 164450., 167575., 170700., 162550., 165700., 168850., 172000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,   7824.,   9980.,   10664.,  12745.,  13600.,  13795.,  14680.,
      14845.,  15760.,  15895.,  16840.,  12764.,  13520.,  9597.,   10164.,
      12800.,  13520.,  17168.,  18128.,  21560.,  22760.,  22760.,  24000.,
      23960.,  25240.,  25160.,  26480.,  19984.,  21040.,  14864.,  15656.,
      19015.,  19960.,  25220.,  26480.,  31325.,  32900.,  32575.,  34200.,
      33825.,  35500.,  35075.,  36800.,  27620.,  29000.,  20365.,  21400.,
      25495.,  26680.,  33540.,  35120.,  41325.,  43300.,  42575.,  44600.,
      43825.,  45900.,  45075.,  47200.,  35300.,  37000.,  25885.,  27160.,
      18008.,  18992.,  23440.,  24752.,  28560.,  30200.,  29360.,  31040.,
      30160.,  31880.,  30960.,  32720.,  23952.,  25360.,  17336.,  18392.,
      11235.,  12000.,  14396.,  15416.,  17245.,  18520.,  17695.,  19000.,
      18145.,  19480.,  18595.,  19960.,  14108.,  15200.,  9993.,   10812.,
      39279.,  40656.,  51452.,  53288.,  63145.,  65440.,  64195.,  66520.,
      65245.,  67600.,  66295.,  68680.,  51932.,  53840.,  38109.,  39540.,
      49664.,  51536.,  64784.,  67280.,  79160.,  82280.,  80360.,  83520.,
      81560.,  84760.,  82760.,  86000.,  64528.,  67120.,  47120.,  49064.,
      57895.,  60280.,  75140.,  78320.,  91325.,  95300.,  92575.,  96600.,
      93825.,  97900.,  95075.,  99200.,  73700.,  77000.,  53485.,  55960.,
      64375.,  67000.,  83460.,  86960.,  101325., 105700., 102575., 107000.,
      103825., 108300., 105075., 109600., 81380.,  85000.,  59005.,  61720.,
      43352.,  45488.,  55696.,  58544.,  66960.,  70520.,  67760.,  71360.,
      68560.,  72200.,  69360.,  73040.,  53136.,  56080.,  38072.,  40280.,
      25923.,  27552.,  32828.,  35000.,  38845.,  41560.,  39295.,  42040.,
      39745.,  42520.,  40195.,  43000.,  30236.,  32480.,  21225.,  22908.,
      71247.,  73488.,  92924.,  95912.,  113545., 117280., 114595., 118360.,
      115645., 119440., 116695., 120520., 91100.,  94160.,  66621.,  68916.,
      86528.,  89552.,  112400., 116432., 136760., 141800., 137960., 143040.,
      139160., 144280., 140360., 145520., 109072., 113200., 79376.,  82472.,
      96775.,  100600., 125060., 130160., 151325., 157700., 152575., 159000.,
      153825., 160300., 155075., 161600., 119780., 125000., 86605.,  90520.,
      103255., 107320., 133380., 138800., 161325., 168100., 162575., 169400.,
      163825., 170700., 165075., 172000., 127460., 133000., 92125.,  96280.,
      68696.,  71984.,  87952.,  92336.,  105360., 110840., 106160., 111680.,
      106960., 112520., 107760., 113360., 82320.,  86800.,  58808.,  62168.,
      40611.,  43104.,  51260.,  54584.,  60445.,  64600.,  60895.,  65080.,
      61345.,  65560.,  61795.,  66040.,  46364.,  49760.,  32457.,  35004.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325.,  32900.,  32575.,  34200.,  33825.,  35500.,  35075.,  36800.,
      41325.,  43300.,  42575.,  44600.,  43825.,  45900.,  45075.,  47200.,
      91325.,  95300.,  92575.,  96600.,  93825.,  97900.,  95075.,  99200.,
      101325., 105700., 102575., 107000., 103825., 108300., 105075., 109600.,
      151325., 157700., 152575., 159000., 153825., 160300., 155075., 161600.,
      161325., 168100., 162575., 169400., 163825., 170700., 165075., 172000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451.,  14622.,  15468.,  15648.,  19720.,  19960.,  21076.,  21328.,
      25175.,  25490.,  26870.,  27200.,  27245.,  27590.,  29000.,  29360.,
      29315.,  29690.,  31130.,  31520.,  31385.,  31790.,  33260.,  33680.,
      25192.,  25528.,  26692.,  27040.,  18933.,  19194.,  20058.,  20328.,
      25276.,  25600.,  26704.,  27040.,  33888.,  34336.,  35792.,  36256.,
      42540.,  43120.,  44920.,  45520.,  44900.,  45520.,  47360.,  48000.,
      47260.,  47920.,  49800.,  50480.,  49620.,  50320.,  52240.,  52960.,
      39392.,  39968.,  41488.,  42080.,  29284.,  29728.,  30856.,  31312.,
      37505.,  38030.,  39380.,  39920.,  49720.,  50440.,  52220.,  52960.,
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      54360.,  55240.,  57100.,  58000.,  40055.,  40730.,  42110.,  42800.,
      50225.,  50990.,  52580.,  53360.,  66040.,  67080.,  69180.,  70240.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      69400.,  70600.,  72780.,  74000.,  50855.,  51770.,  53390.,  54320.,
      35308.,  36016.,  37264.,  37984.,  45920.,  46880.,  48528.,  49504.,
      55900.,  57120.,  59160.,  60400.,  57460.,  58720.,  60800.,  62080.,
      59020.,  60320.,  62440.,  63760.,  60580.,  61920.,  64080.,  65440.,
      46816.,  47904.,  49616.,  50720.,  33844.,  34672.,  35944.,  36784.,
      21867.,  22470.,  23388.,  24000.,  27976.,  28792.,  30004.,  30832.,
      33455.,  34490.,  35990.,  37040.,  34325.,  35390.,  36920.,  38000.,
      35195.,  36290.,  37850.,  38960.,  36065.,  37190.,  38780.,  39920.,
      27304.,  28216.,  29476.,  30400.,  19293.,  19986.,  20922.,  21624.,
      77523.,  78558.,  80268.,  81312.,  101512., 102904., 105172., 106576.,
      124535., 126290., 129110., 130880., 126605., 128390., 131240., 133040.,
      128675., 130490., 133370., 135200., 130745., 132590., 135500., 137360.,
      102376., 103864., 106180., 107680., 75093.,  76218.,  77946.,  79080.,
      97852.,  99328.,  101584., 103072., 127584., 129568., 132560., 134560.,
      155820., 158320., 162040., 164560., 158180., 160720., 164480., 167040.,
      160540., 163120., 166920., 169520., 162900., 165520., 169360., 172000.,
      126944., 129056., 132112., 134240., 92644.,  94240.,  96520.,  98128.,
      113825., 115790., 118580., 120560., 147640., 150280., 153980., 156640.,
      179325., 182650., 187250., 190600., 181775., 185150., 189800., 193200.,
      184225., 187650., 192350., 195800., 186675., 190150., 194900., 198400.,
      144600., 147400., 151180., 154000., 104855., 106970., 109790., 111920.,
      126545., 128750., 131780., 134000., 163960., 166920., 170940., 173920.,
      198925., 202650., 207650., 211400., 201375., 205150., 210200., 214000.,
      203825., 207650., 212750., 216600., 206275., 210150., 215300., 219200.,
      159640., 162760., 166860., 170000., 115655., 118010., 121070., 123440.,
      84844.,  86704.,  89104.,  90976.,  108896., 111392., 114576., 117088.,
      130780., 133920., 137880., 141040., 132340., 135520., 139520., 142720.,
      133900., 137120., 141160., 144400., 135460., 138720., 142800., 146080.,
      103648., 106272., 109520., 112160., 74164.,  76144.,  78568.,  80560.,
      50379.,  51846.,  53628.,  55104.,  63688.,  65656.,  68020.,  70000.,
      75215.,  77690.,  80630.,  83120.,  76085.,  78590.,  81560.,  84080.,
      76955.,  79490.,  82490.,  85040.,  77825.,  80390.,  83420.,  86000.,
      58408.,  60472.,  62884.,  64960.,  40893.,  42450.,  44250.,  45816.,
      140595., 142494., 145068., 146976., 183304., 185848., 189268., 191824.,
      223895., 227090., 231350., 234560., 225965., 229190., 233480., 236720.,
      228035., 231290., 235610., 238880., 230105., 233390., 237740., 241040.,
      179560., 182200., 185668., 188320., 131253., 133242., 135834., 137832.,
      170428., 173056., 176464., 179104., 221280., 224800., 229328., 232864.,
      269100., 273520., 279160., 283600., 271460., 275920., 281600., 286080.,
      273820., 278320., 284040., 288560., 276180., 280720., 286480., 291040.,
      214496., 218144., 222736., 226400., 156004., 158752., 162184., 164944.,
      190145., 193550., 197780., 201200., 245560., 250120., 255740., 260320.,
      296925., 302650., 309650., 315400., 299375., 305150., 312200., 318000.,
      301825., 307650., 314750., 320600., 304275., 310150., 317300., 323200.,
      234840., 239560., 245260., 250000., 169655., 173210., 177470., 181040.,
      202865., 206510., 210980., 214640., 261880., 266760., 272700., 277600.,
      316525., 322650., 330050., 336200., 318975., 325150., 332600., 338800.,
      321425., 327650., 335150., 341400., 323875., 330150., 337700., 344000.,
      249880., 254920., 260940., 266000., 180455., 184250., 188750., 192560.,
      134380., 137392., 140944., 143968., 171872., 175904., 180624., 184672.,
      205660., 210720., 216600., 221680., 207220., 212320., 218240., 223360.,
      208780., 213920., 219880., 225040., 210340., 215520., 221520., 226720.,
      160480., 164640., 169424., 173600., 114484., 117616., 121192., 124336.,
      78891.,  81222.,  83868.,  86208.,  99400.,  102520., 106036., 109168.,
      116975., 120890., 125270., 129200., 117845., 121790., 126200., 130160.,
      118715., 122690., 127130., 131120., 119585., 123590., 128060., 132080.,
      89512.,  92728.,  96292.,  99520.,  62493.,  64914.,  67578.,  70008.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      179325., 182650., 187250., 190600., 181775., 185150., 189800., 193200.,
      184225., 187650., 192350., 195800., 186675., 190150., 194900., 198400.,
      198925., 202650., 207650., 211400., 201375., 205150., 210200., 214000.,
      203825., 207650., 212750., 216600., 206275., 210150., 215300., 219200.,
      296925., 302650., 309650., 315400., 299375., 305150., 312200., 318000.,
      301825., 307650., 314750., 320600., 304275., 310150., 317300., 323200.,
      316525., 322650., 330050., 336200., 318975., 325150., 332600., 338800.,
      321425., 327650., 335150., 341400., 323875., 330150., 337700., 344000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      69908.,  70616.,  71324.,  72032.,  73808.,  74528.,  75248.,  75968.,
      90880.,  91840.,  92800.,  93760.,  96080.,  97056.,  98032.,  99008.,
      110580., 111800., 113020., 114240., 117080., 118320., 119560., 120800.,
      113660., 114920., 116180., 117440., 120320., 121600., 122880., 124160.,
      116740., 118040., 119340., 120640., 123560., 124880., 126200., 127520.,
      119820., 121160., 122500., 123840., 126800., 128160., 129520., 130880.,
      92544.,  93632.,  94720.,  95808.,  98128.,  99232.,  100336., 101440.,
      66860.,  67688.,  68516.,  69344.,  71048.,  71888.,  72728.,  73568.,
      43131.,  43734.,  44337.,  44940.,  46164.,  46776.,  47388.,  48000.,
      55136.,  55952.,  56768.,  57584.,  59180.,  60008.,  60836.,  61664.,
      65875.,  66910.,  67945.,  68980.,  70930.,  71980.,  73030.,  74080.,
      67585.,  68650.,  69715.,  70780.,  72760.,  73840.,  74920.,  76000.,
      69295.,  70390.,  71485.,  72580.,  74590.,  75700.,  76810.,  77920.,
      71005.,  72130.,  73255.,  74380.,  76420.,  77560.,  78700.,  79840.,
      53696.,  54608.,  55520.,  56432.,  58028.,  58952.,  59876.,  60800.,
      37893.,  38586.,  39279.,  39972.,  41142.,  41844.,  42546.,  43248.,
      154011., 155046., 156081., 157116., 159492., 160536., 161580., 162624.,
      201632., 203024., 204416., 205808., 208940., 210344., 211748., 213152.,
      247315., 249070., 250825., 252580., 256450., 258220., 259990., 261760.,
      251425., 253210., 254995., 256780., 260680., 262480., 264280., 266080.,
      255535., 257350., 259165., 260980., 264910., 266740., 268570., 270400.,
      259645., 261490., 263335., 265180., 269140., 271000., 272860., 274720.,
      203264., 204752., 206240., 207728., 210860., 212360., 213860., 215360.,
      149061., 150186., 151311., 152436., 154758., 155892., 157026., 158160.,
      194228., 195704., 197180., 198656., 201680., 203168., 204656., 206144.,
      253184., 255168., 257152., 259136., 263120., 265120., 267120., 269120.,
      309140., 311640., 314140., 316640., 321560., 324080., 326600., 329120.,
      313820., 316360., 318900., 321440., 326400., 328960., 331520., 334080.,
      318500., 321080., 323660., 326240., 331240., 333840., 336440., 339040.,
      323180., 325800., 328420., 331040., 336080., 338720., 341360., 344000.,
      251776., 253888., 256000., 258112., 262096., 264224., 266352., 268480.,
      183692., 185288., 186884., 188480., 191432., 193040., 194648., 196256.,
      225685., 227650., 229615., 231580., 235180., 237160., 239140., 241120.,
      292640., 295280., 297920., 300560., 305300., 307960., 310620., 313280.,
      355325., 358650., 361975., 365300., 371150., 374500., 377850., 381200.,
      360175., 363550., 366925., 370300., 376200., 379600., 383000., 386400.,
      365025., 368450., 371875., 375300., 381250., 384700., 388150., 391600.,
      369875., 373350., 376825., 380300., 386300., 389800., 393300., 396800.,
      286400., 289200., 292000., 294800., 299540., 302360., 305180., 308000.,
      207595., 209710., 211825., 213940., 217450., 219580., 221710., 223840.,
      250885., 253090., 255295., 257500., 261340., 263560., 265780., 268000.,
      324960., 327920., 330880., 333840., 338900., 341880., 344860., 347840.,
      394125., 397850., 401575., 405300., 411550., 415300., 419050., 422800.,
      398975., 402750., 406525., 410300., 416600., 420400., 424200., 428000.,
      403825., 407650., 411475., 415300., 421650., 425500., 429350., 433200.,
      408675., 412550., 416425., 420300., 426700., 430600., 434500., 438400.,
      316160., 319280., 322400., 325520., 330580., 333720., 336860., 340000.,
      228955., 231310., 233665., 236020., 239770., 242140., 244510., 246880.,
      167828., 169688., 171548., 173408., 176336., 178208., 180080., 181952.,
      215296., 217792., 220288., 222784., 226640., 229152., 231664., 234176.,
      258420., 261560., 264700., 267840., 272600., 275760., 278920., 282080.,
      261500., 264680., 267860., 271040., 275840., 279040., 282240., 285440.,
      264580., 267800., 271020., 274240., 279080., 282320., 285560., 288800.,
      267660., 270920., 274180., 277440., 282320., 285600., 288880., 292160.,
      204672., 207296., 209920., 212544., 216400., 219040., 221680., 224320.,
      146348., 148328., 150308., 152288., 155144., 157136., 159128., 161120.,
      99291.,  100758., 102225., 103692., 105780., 107256., 108732., 110208.,
      125408., 127376., 129344., 131312., 134060., 136040., 138020., 140000.,
      147955., 150430., 152905., 155380., 158770., 161260., 163750., 166240.,
      149665., 152170., 154675., 157180., 160600., 163120., 165640., 168160.,
      151375., 153910., 156445., 158980., 162430., 164980., 167530., 170080.,
      153085., 155650., 158215., 160780., 164260., 166840., 169420., 172000.,
      114752., 116816., 118880., 120944., 123692., 125768., 127844., 129920.,
      80229.,  81786.,  83343.,  84900.,  86934.,  88500.,  90066.,  91632.,
      279291., 281190., 283089., 284988., 288228., 290136., 292044., 293952.,
      364064., 366608., 369152., 371696., 375980., 378536., 381092., 383648.,
      444595., 447790., 450985., 454180., 459490., 462700., 465910., 469120.,
      448705., 451930., 455155., 458380., 463720., 466960., 470200., 473440.,
      452815., 456070., 459325., 462580., 467950., 471220., 474490., 477760.,
      456925., 460210., 463495., 466780., 472180., 475480., 478780., 482080.,
      356480., 359120., 361760., 364400., 368684., 371336., 373988., 376640.,
      260517., 262506., 264495., 266484., 269670., 271668., 273666., 275664.,
      338228., 340856., 343484., 346112., 350288., 352928., 355568., 358208.,
      439040., 442560., 446080., 449600., 455120., 458656., 462192., 465728.,
      533780., 538200., 542620., 547040., 553880., 558320., 562760., 567200.,
      538460., 542920., 547380., 551840., 558720., 563200., 567680., 572160.,
      543140., 547640., 552140., 556640., 563560., 568080., 572600., 577120.,
      547820., 552360., 556900., 561440., 568400., 572960., 577520., 582080.,
      425344., 428992., 432640., 436288., 441808., 445472., 449136., 452800.,
      309260., 312008., 314756., 317504., 321608., 324368., 327128., 329888.,
      376885., 380290., 383695., 387100., 392140., 395560., 398980., 402400.,
      486560., 491120., 495680., 500240., 506900., 511480., 516060., 520640.,
      588125., 593850., 599575., 605300., 613550., 619300., 625050., 630800.,
      592975., 598750., 604525., 610300., 618600., 624400., 630200., 636000.,
      597825., 603650., 609475., 615300., 623650., 629500., 635350., 641200.,
      602675., 608550., 614425., 620300., 628700., 634600., 640500., 646400.,
      464960., 469680., 474400., 479120., 485780., 490520., 495260., 500000.,
      335755., 339310., 342865., 346420., 351370., 354940., 358510., 362080.,
      402085., 405730., 409375., 413020., 418300., 421960., 425620., 429280.,
      518880., 523760., 528640., 533520., 540500., 545400., 550300., 555200.,
      626925., 633050., 639175., 645300., 653950., 660100., 666250., 672400.,
      631775., 637950., 644125., 650300., 659000., 665200., 671400., 677600.,
      636625., 642850., 649075., 655300., 664050., 670300., 676550., 682800.,
      641475., 647750., 654025., 660300., 669100., 675400., 681700., 688000.,
      494720., 499760., 504800., 509840., 516820., 521880., 526940., 532000.,
      357115., 360910., 364705., 368500., 373690., 377500., 381310., 385120.,
      265748., 268760., 271772., 274784., 278864., 281888., 284912., 287936.,
      339712., 343744., 347776., 351808., 357200., 361248., 365296., 369344.,
      406260., 411320., 416380., 421440., 428120., 433200., 438280., 443360.,
      409340., 414440., 419540., 424640., 431360., 436480., 441600., 446720.,
      412420., 417560., 422700., 427840., 434600., 439760., 444920., 450080.,
      415500., 420680., 425860., 431040., 437840., 443040., 448240., 453440.,
      316800., 320960., 325120., 329280., 334672., 338848., 343024., 347200.,
      225836., 228968., 232100., 235232., 239240., 242384., 245528., 248672.,
      155451., 157782., 160113., 162444., 165396., 167736., 170076., 172416.,
      195680., 198800., 201920., 205040., 208940., 212072., 215204., 218336.,
      230035., 233950., 237865., 241780., 246610., 250540., 254470., 258400.,
      231745., 235690., 239635., 243580., 248440., 252400., 256360., 260320.,
      233455., 237430., 241405., 245380., 250270., 254260., 258250., 262240.,
      235165., 239170., 243175., 247180., 252100., 256120., 260140., 264160.,
      175808., 179024., 182240., 185456., 189356., 192584., 195812., 199040.,
      122565., 124986., 127407., 129828., 132726., 135156., 137586., 140016.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      355325., 358650., 361975., 365300., 371150., 374500., 377850., 381200.,
      360175., 363550., 366925., 370300., 376200., 379600., 383000., 386400.,
      365025., 368450., 371875., 375300., 381250., 384700., 388150., 391600.,
      369875., 373350., 376825., 380300., 386300., 389800., 393300., 396800.,
      394125., 397850., 401575., 405300., 411550., 415300., 419050., 422800.,
      398975., 402750., 406525., 410300., 416600., 420400., 424200., 428000.,
      403825., 407650., 411475., 415300., 421650., 425500., 429350., 433200.,
      408675., 412550., 416425., 420300., 426700., 430600., 434500., 438400.,
      588125., 593850., 599575., 605300., 613550., 619300., 625050., 630800.,
      592975., 598750., 604525., 610300., 618600., 624400., 630200., 636000.,
      597825., 603650., 609475., 615300., 623650., 629500., 635350., 641200.,
      602675., 608550., 614425., 620300., 628700., 634600., 640500., 646400.,
      626925., 633050., 639175., 645300., 653950., 660100., 666250., 672400.,
      631775., 637950., 644125., 650300., 659000., 665200., 671400., 677600.,
      636625., 642850., 649075., 655300., 664050., 670300., 676550., 682800.,
      641475., 647750., 654025., 660300., 669100., 675400., 681700., 688000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      70100.,  72032.,  73988.,  75968.,  91184.,  93760.,  96368.,  99008.,
      111020., 114240., 117500., 120800., 114140., 117440., 120780., 124160.,
      117260., 120640., 124060., 127520., 120380., 123840., 127340., 130880.,
      93040.,  95808.,  98608.,  101440., 67268.,  69344.,  71444.,  73568.,
      43437.,  44940.,  46461.,  48000.,  55580.,  57584.,  59612.,  61664.,
      66475.,  68980.,  71515.,  74080.,  68215.,  70780.,  73375.,  76000.,
      69955.,  72580.,  75235.,  77920.,  71695.,  74380.,  77095.,  79840.,
      54284.,  56432.,  58604.,  60800.,  38361.,  39972.,  41601.,  43248.,
      154389., 157116., 159861., 162624., 202172., 205808., 209468., 213152.,
      248035., 252580., 257155., 261760., 252175., 256780., 261415., 266080.,
      256315., 260980., 265675., 270400., 260455., 265180., 269935., 274720.,
      203948., 207728., 211532., 215360., 149601., 152436., 155289., 158160.,
      194948., 198656., 202388., 206144., 254192., 259136., 264112., 269120.,
      310460., 316640., 322860., 329120., 315180., 321440., 327740., 334080.,
      319900., 326240., 332620., 339040., 324620., 331040., 337500., 344000.,
      252976., 258112., 263280., 268480., 184628., 188480., 192356., 196256.,
      226855., 231580., 236335., 241120., 294260., 300560., 306900., 313280.,
      357425., 365300., 373225., 381200., 362325., 370300., 378325., 386400.,
      367225., 375300., 383425., 391600., 372125., 380300., 388525., 396800.,
      288260., 294800., 301380., 308000., 209035., 213940., 218875., 223840.,
      252295., 257500., 262735., 268000., 326900., 333840., 340820., 347840.,
      396625., 405300., 414025., 422800., 401525., 410300., 419125., 428000.,
      406425., 415300., 424225., 433200., 411325., 420300., 429325., 438400.,
      318340., 325520., 332740., 340000., 230635., 236020., 241435., 246880.,
      169172., 173408., 177668., 181952., 217136., 222784., 228464., 234176.,
      260780., 267840., 274940., 282080., 263900., 271040., 278220., 285440.,
      267020., 274240., 281500., 288800., 270140., 277440., 284780., 292160.,
      206704., 212544., 218416., 224320., 147908., 152288., 156692., 161120.,
      100461., 103692., 106941., 110208., 127004., 131312., 135644., 140000.,
      149995., 155380., 160795., 166240., 151735., 157180., 162655., 168160.,
      153475., 158980., 164515., 170080., 155215., 160780., 166375., 172000.,
      116492., 120944., 125420., 129920., 81561.,  84900.,  88257.,  91632.,
      280533., 284988., 289461., 293952., 365756., 371696., 377660., 383648.,
      446755., 454180., 461635., 469120., 450895., 458380., 465895., 473440.,
      455035., 462580., 470155., 477760., 459175., 466780., 474415., 482080.,
      358316., 364400., 370508., 376640., 261921., 266484., 271065., 275664.,
      340100., 346112., 352148., 358208., 441584., 449600., 457648., 465728.,
      537020., 547040., 557100., 567200., 541740., 551840., 561980., 572160.,
      546460., 556640., 566860., 577120., 551180., 561440., 571740., 582080.,
      428080., 436288., 444528., 452800., 311348., 317504., 323684., 329888.,
      379495., 387100., 394735., 402400., 490100., 500240., 510420., 520640.,
      592625., 605300., 618025., 630800., 597525., 610300., 623125., 636000.,
      602425., 615300., 628225., 641200., 607325., 620300., 633325., 646400.,
      468740., 479120., 489540., 500000., 338635., 346420., 354235., 362080.,
      404935., 413020., 421135., 429280., 522740., 533520., 544340., 555200.,
      631825., 645300., 658825., 672400., 636725., 650300., 663925., 677600.,
      641625., 655300., 669025., 682800., 646525., 660300., 674125., 688000.,
      498820., 509840., 520900., 532000., 360235., 368500., 376795., 385120.,
      268244., 274784., 281348., 287936., 343088., 351808., 360560., 369344.,
      410540., 421440., 432380., 443360., 413660., 424640., 435660., 446720.,
      416780., 427840., 438940., 450080., 419900., 431040., 442220., 453440.,
      320368., 329280., 338224., 347200., 228548., 235232., 241940., 248672.,
      157485., 162444., 167421., 172416., 198428., 205040., 211676., 218336.,
      233515., 241780., 250075., 258400., 235255., 243580., 251935., 260320.,
      236995., 245380., 253795., 262240., 238735., 247180., 255655., 264160.,
      178700., 185456., 192236., 199040., 124761., 129828., 134913., 140016.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      357425., 365300., 373225., 381200., 362325., 370300., 378325., 386400.,
      367225., 375300., 383425., 391600., 372125., 380300., 388525., 396800.,
      396625., 405300., 414025., 422800., 401525., 410300., 419125., 428000.,
      406425., 415300., 424225., 433200., 411325., 420300., 429325., 438400.,
      592625., 605300., 618025., 630800., 597525., 610300., 623125., 636000.,
      602425., 615300., 628225., 641200., 607325., 620300., 633325., 646400.,
      631825., 645300., 658825., 672400., 636725., 650300., 663925., 677600.,
      641625., 655300., 669025., 682800., 646525., 660300., 674125., 688000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,   56490.,   58146.,   58488.,   60171.,   60522.,   62232.,
      62592.,   76708.,   77176.,   79360.,   79840.,   82060.,   82552.,
      84808.,   85312.,   98015.,   98630.,   101330.,  101960.,  104705.,
      105350.,  108140.,  108800.,  106235.,  106910.,  109670.,  110360.,
      113165.,  113870.,  116720.,  117440.,  114455.,  115190.,  118010.,
      118760.,  121625.,  122390.,  125300.,  126080.,  122675.,  123470.,
      126350.,  127160.,  130085.,  130910.,  133880.,  134720.,  98500.,
      99160.,   101440.,  102112.,  104428.,  105112.,  107464.,  108160.,
      74049.,   74562.,   76254.,   76776.,   78495.,   79026.,   80772.,
      81312.,   98956.,   99592.,   101752.,  102400.,  104596.,  105256.,
      107488.,  108160.,  132720.,  133600.,  136448.,  137344.,  140240.,
      141152.,  144096.,  145024.,  166660.,  167800.,  171320.,  172480.,
      176060.,  177240.,  180880.,  182080.,  176020.,  177240.,  180840.,
      182080.,  185740.,  187000.,  190720.,  192000.,  185380.,  186680.,
      190360.,  191680.,  195420.,  196760.,  200560.,  201920.,  194740.,
      196120.,  199880.,  201280.,  205100.,  206520.,  210400.,  211840.,
      154608.,  155744.,  158720.,  159872.,  162896.,  164064.,  167136.,
      168320.,  114940.,  115816.,  118024.,  118912.,  121156.,  122056.,
      124336.,  125248.,  147395.,  148430.,  151070.,  152120.,  154805.,
      155870.,  158600.,  159680.,  195420.,  196840.,  200320.,  201760.,
      205300.,  206760.,  210360.,  211840.,  242625.,  244450.,  248750.,
      250600.,  254975.,  256850.,  261300.,  263200.,  252325.,  254250.,
      258650.,  260600.,  265075.,  267050.,  271600.,  273600.,  262025.,
      264050.,  268550.,  270600.,  275175.,  277250.,  281900.,  284000.,
      271725.,  273850.,  278450.,  280600.,  285275.,  287450.,  292200.,
      294400.,  213820.,  215560.,  219200.,  220960.,  224660.,  226440.,
      230200.,  232000.,  157535.,  158870.,  161570.,  162920.,  165665.,
      167030.,  169820.,  171200.,  197795.,  199310.,  202430.,  203960.,
      207125.,  208670.,  211880.,  213440.,  260060.,  262120.,  266240.,
      268320.,  272500.,  274600.,  278840.,  280960.,  320225.,  322850.,
      327950.,  330600.,  335775.,  338450.,  343700.,  346400.,  329925.,
      332650.,  337850.,  340600.,  345875.,  348650.,  354000.,  356800.,
      339625.,  342450.,  347750.,  350600.,  355975.,  358850.,  364300.,
      367200.,  349325.,  352250.,  357650.,  360600.,  366075.,  369050.,
      374600.,  377600.,  273340.,  275720.,  280000.,  282400.,  286740.,
      289160.,  293560.,  296000.,  200255.,  202070.,  205250.,  207080.,
      210305.,  212150.,  215420.,  217280.,  138796.,  140200.,  142648.,
      144064.,  146548.,  147976.,  150496.,  151936.,  180464.,  182368.,
      185600.,  187520.,  190800.,  192736.,  196064.,  198016.,  219620.,
      222040.,  226040.,  228480.,  232540.,  235000.,  239120.,  241600.,
      225780.,  228280.,  232360.,  234880.,  239020.,  241560.,  245760.,
      248320.,  231940.,  234520.,  238680.,  241280.,  245500.,  248120.,
      252400.,  255040.,  238100.,  240760.,  245000.,  247680.,  251980.,
      254680.,  259040.,  261760.,  183920.,  186080.,  189440.,  191616.,
      195024.,  197216.,  200672.,  202880.,  132892.,  134536.,  137032.,
      138688.,  141220.,  142888.,  145456.,  147136.,  85677.,   86874.,
      88674.,   89880.,   91707.,   92922.,   94776.,   96000.,   109540.,
      111160.,  113536.,  115168.,  117580.,  119224.,  121672.,  123328.,
      130895.,  132950.,  135890.,  137960.,  140945.,  143030.,  146060.,
      148160.,  134315.,  136430.,  139430.,  141560.,  144605.,  146750.,
      149840.,  152000.,  137735.,  139910.,  142970.,  145160.,  148265.,
      150470.,  153620.,  155840.,  141155.,  143390.,  146510.,  148760.,
      151925.,  154190.,  157400.,  159680.,  106756.,  108568.,  111040.,
      112864.,  115372.,  117208.,  119752.,  121600.,  75345.,   76722.,
      78558.,   79944.,   81807.,   83202.,   85092.,   86496.,   306717.,
      308778.,  312162.,  314232.,  317643.,  319722.,  323160.,  325248.,
      401572.,  404344.,  408832.,  411616.,  416140.,  418936.,  423496.,
      426304.,  492575.,  496070.,  501650.,  505160.,  510785.,  514310.,
      519980.,  523520.,  500795.,  504350.,  509990.,  513560.,  519245.,
      522830.,  528560.,  532160.,  509015.,  512630.,  518330.,  521960.,
      527705.,  531350.,  537140.,  540800.,  517235.,  520910.,  526670.,
      530360.,  536165.,  539870.,  545720.,  549440.,  404932.,  407896.,
      412480.,  415456.,  420076.,  423064.,  427720.,  430720.,  296961.,
      299202.,  302622.,  304872.,  308319.,  310578.,  314052.,  316320.,
      386956.,  389896.,  394360.,  397312.,  401812.,  404776.,  409312.,
      412288.,  504432.,  508384.,  514304.,  518272.,  524240.,  528224.,
      534240.,  538240.,  615940.,  620920.,  628280.,  633280.,  640700.,
      645720.,  653200.,  658240.,  625300.,  630360.,  637800.,  642880.,
      650380.,  655480.,  663040.,  668160.,  634660.,  639800.,  647320.,
      652480.,  660060.,  665240.,  672880.,  678080.,  644020.,  649240.,
      656840.,  662080.,  669740.,  675000.,  682720.,  688000.,  501744.,
      505952.,  512000.,  516224.,  522320.,  526560.,  532704.,  536960.,
      366076.,  369256.,  373768.,  376960.,  381508.,  384712.,  389296.,
      392512.,  449795.,  453710.,  459230.,  463160.,  468725.,  472670.,
      478280.,  482240.,  583260.,  588520.,  595840.,  601120.,  608500.,
      613800.,  621240.,  626560.,  708225.,  714850.,  723950.,  730600.,
      739775.,  746450.,  755700.,  762400.,  717925.,  724650.,  733850.,
      740600.,  749875.,  756650.,  766000.,  772800.,  727625.,  734450.,
      743750.,  750600.,  759975.,  766850.,  776300.,  783200.,  737325.,
      744250.,  753650.,  760600.,  770075.,  777050.,  786600.,  793600.,
      570940.,  576520.,  584000.,  589600.,  597140.,  602760.,  610360.,
      616000.,  413855.,  418070.,  423650.,  427880.,  433505.,  437750.,
      443420.,  447680.,  500195.,  504590.,  510590.,  515000.,  521045.,
      525470.,  531560.,  536000.,  647900.,  653800.,  661760.,  667680.,
      675700.,  681640.,  689720.,  695680.,  785825.,  793250.,  803150.,
      810600.,  820575.,  828050.,  838100.,  845600.,  795525.,  803050.,
      813050.,  820600.,  830675.,  838250.,  848400.,  856000.,  805225.,
      812850.,  822950.,  830600.,  840775.,  848450.,  858700.,  866400.,
      814925.,  822650.,  832850.,  840600.,  850875.,  858650.,  869000.,
      876800.,  630460.,  636680.,  644800.,  651040.,  659220.,  665480.,
      673720.,  680000.,  456575.,  461270.,  467330.,  472040.,  478145.,
      482870.,  489020.,  493760.,  334636.,  338344.,  343096.,  346816.,
      351604.,  355336.,  360160.,  363904.,  429296.,  434272.,  440576.,
      445568.,  451920.,  456928.,  463328.,  468352.,  515300.,  521560.,
      529400.,  535680.,  543580.,  549880.,  557840.,  564160.,  521460.,
      527800.,  535720.,  542080.,  550060.,  556440.,  564480.,  570880.,
      527620.,  534040.,  542040.,  548480.,  556540.,  563000.,  571120.,
      577600.,  533780.,  540280.,  548360.,  554880.,  563020.,  569560.,
      577760.,  584320.,  408176.,  413408.,  419840.,  425088.,  431568.,
      436832.,  443360.,  448640.,  291868.,  295816.,  300616.,  304576.,
      309412.,  313384.,  318256.,  322240.,  197997.,  200922.,  204450.,
      207384.,  210939.,  213882.,  217464.,  220416.,  250084.,  254008.,
      258688.,  262624.,  267340.,  271288.,  276040.,  280000.,  295055.,
      299990.,  305810.,  310760.,  316625.,  321590.,  327500.,  332480.,
      298475.,  303470.,  309350.,  314360.,  320285.,  325310.,  331280.,
      336320.,  301895.,  306950.,  312890.,  317960.,  323945.,  329030.,
      335060.,  340160.,  305315.,  310430.,  316430.,  321560.,  327605.,
      332750.,  338840.,  344000.,  228868.,  232984.,  237760.,  241888.,
      246700.,  250840.,  255688.,  259840.,  160017.,  163122.,  166686.,
      169800.,  173391.,  176514.,  180132.,  183264.,  557277.,  561066.,
      566178.,  569976.,  575115.,  578922.,  584088.,  587904.,  726436.,
      731512.,  738304.,  743392.,  750220.,  755320.,  762184.,  767296.,
      887135.,  893510.,  901970.,  908360.,  916865.,  923270.,  931820.,
      938240.,  895355.,  901790.,  910310.,  916760.,  925325.,  931790.,
      940400.,  946880.,  903575.,  910070.,  918650.,  925160.,  933785.,
      940310.,  948980.,  955520.,  911795.,  918350.,  926990.,  933560.,
      942245.,  948830.,  957560.,  964160.,  711364.,  716632.,  723520.,
      728800.,  735724.,  741016.,  747976.,  753280.,  519873.,  523842.,
      528990.,  532968.,  538143.,  542130.,  547332.,  551328.,  674956.,
      680200.,  686968.,  692224.,  699028.,  704296.,  711136.,  716416.,
      876144.,  883168.,  892160.,  899200.,  908240.,  915296.,  924384.,
      931456.,  1065220., 1074040., 1085240., 1094080., 1105340., 1114200.,
      1125520., 1134400., 1074580., 1083480., 1094760., 1103680., 1115020.,
      1123960., 1135360., 1144320., 1083940., 1092920., 1104280., 1113280.,
      1124700., 1133720., 1145200., 1154240., 1093300., 1102360., 1113800.,
      1122880., 1134380., 1143480., 1155040., 1164160., 848880.,  856160.,
      865280.,  872576.,  881744.,  889056.,  898272.,  905600.,  617212.,
      622696.,  629512.,  635008.,  641860.,  647368.,  654256.,  659776.,
      752195.,  758990.,  767390.,  774200.,  782645.,  789470.,  797960.,
      804800.,  971100.,  980200.,  991360.,  1000480., 1011700., 1020840.,
      1032120., 1041280., 1173825., 1185250., 1199150., 1210600., 1224575.,
      1236050., 1250100., 1261600., 1183525., 1195050., 1209050., 1220600.,
      1234675., 1246250., 1260400., 1272000., 1193225., 1204850., 1218950.,
      1230600., 1244775., 1256450., 1270700., 1282400., 1202925., 1214650.,
      1228850., 1240600., 1254875., 1266650., 1281000., 1292800., 928060.,
      937480.,  948800.,  958240.,  969620.,  979080.,  990520.,  1000000.,
      670175.,  677270.,  685730.,  692840.,  701345.,  708470.,  717020.,
      724160.,  802595.,  809870.,  818750.,  826040.,  834965.,  842270.,
      851240.,  858560.,  1035740., 1045480., 1057280., 1067040., 1078900.,
      1088680., 1100600., 1110400., 1251425., 1263650., 1278350., 1290600.,
      1305375., 1317650., 1332500., 1344800., 1261125., 1273450., 1288250.,
      1300600., 1315475., 1327850., 1342800., 1355200., 1270825., 1283250.,
      1298150., 1310600., 1325575., 1338050., 1353100., 1365600., 1280525.,
      1293050., 1308050., 1320600., 1335675., 1348250., 1363400., 1376000.,
      987580.,  997640.,  1009600., 1019680., 1031700., 1041800., 1053880.,
      1064000., 712895.,  720470.,  729410.,  737000.,  745985.,  753590.,
      762620.,  770240.,  530476.,  536488.,  543544.,  549568.,  556660.,
      562696.,  569824.,  575872.,  678128.,  686176.,  695552.,  703616.,
      713040.,  721120.,  730592.,  738688.,  810980.,  821080.,  832760.,
      842880.,  854620.,  864760.,  876560.,  886720.,  817140.,  827320.,
      839080.,  849280.,  861100.,  871320.,  883200.,  893440.,  823300.,
      833560.,  845400.,  855680.,  867580.,  877880.,  889840.,  900160.,
      829460.,  839800.,  851720.,  862080.,  874060.,  884440.,  896480.,
      906880.,  632432.,  640736.,  650240.,  658560.,  668112.,  676448.,
      686048.,  694400.,  450844.,  457096.,  464200.,  470464.,  477604.,
      483880.,  491056.,  497344.,  310317.,  314970.,  320226.,  324888.,
      330171.,  334842.,  340152.,  344832.,  390628.,  396856.,  403840.,
      410080.,  417100.,  423352.,  430408.,  436672.,  459215.,  467030.,
      475730.,  483560.,  492305.,  500150.,  508940.,  516800.,  462635.,
      470510.,  479270.,  487160.,  495965.,  503870.,  512720.,  520640.,
      466055.,  473990.,  482810.,  490760.,  499625.,  507590.,  516500.,
      524480.,  469475.,  477470.,  486350.,  494360.,  503285.,  511310.,
      520280.,  528320.,  350980.,  357400.,  364480.,  370912.,  378028.,
      384472.,  391624.,  398080.,  244689.,  249522.,  254814.,  259656.,
      264975.,  269826.,  275172.,  280032.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625.,  244450.,  248750.,  250600.,  254975.,  256850.,  261300.,
      263200.,  252325.,  254250.,  258650.,  260600.,  265075.,  267050.,
      271600.,  273600.,  262025.,  264050.,  268550.,  270600.,  275175.,
      277250.,  281900.,  284000.,  271725.,  273850.,  278450.,  280600.,
      285275.,  287450.,  292200.,  294400.,  320225.,  322850.,  327950.,
      330600.,  335775.,  338450.,  343700.,  346400.,  329925.,  332650.,
      337850.,  340600.,  345875.,  348650.,  354000.,  356800.,  339625.,
      342450.,  347750.,  350600.,  355975.,  358850.,  364300.,  367200.,
      349325.,  352250.,  357650.,  360600.,  366075.,  369050.,  374600.,
      377600.,  708225.,  714850.,  723950.,  730600.,  739775.,  746450.,
      755700.,  762400.,  717925.,  724650.,  733850.,  740600.,  749875.,
      756650.,  766000.,  772800.,  727625.,  734450.,  743750.,  750600.,
      759975.,  766850.,  776300.,  783200.,  737325.,  744250.,  753650.,
      760600.,  770075.,  777050.,  786600.,  793600.,  785825.,  793250.,
      803150.,  810600.,  820575.,  828050.,  838100.,  845600.,  795525.,
      803050.,  813050.,  820600.,  830675.,  838250.,  848400.,  856000.,
      805225.,  812850.,  822950.,  830600.,  840775.,  848450.,  858700.,
      866400.,  814925.,  822650.,  832850.,  840600.,  850875.,  858650.,
      869000.,  876800.,  1173825., 1185250., 1199150., 1210600., 1224575.,
      1236050., 1250100., 1261600., 1183525., 1195050., 1209050., 1220600.,
      1234675., 1246250., 1260400., 1272000., 1193225., 1204850., 1218950.,
      1230600., 1244775., 1256450., 1270700., 1282400., 1202925., 1214650.,
      1228850., 1240600., 1254875., 1266650., 1281000., 1292800., 1251425.,
      1263650., 1278350., 1290600., 1305375., 1317650., 1332500., 1344800.,
      1261125., 1273450., 1288250., 1300600., 1315475., 1327850., 1342800.,
      1355200., 1270825., 1283250., 1298150., 1310600., 1325575., 1338050.,
      1353100., 1365600., 1280525., 1293050., 1308050., 1320600., 1335675.,
      1348250., 1363400., 1376000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981.,  112314.,  112647.,  112980.,  115950.,  116292.,  116634.,
      116976.,  119991.,  120342.,  120693.,  121044.,  124104.,  124464.,
      124824.,  125184.,  152948.,  153416.,  153884.,  154352.,  158240.,
      158720.,  159200.,  159680.,  163628.,  164120.,  164612.,  165104.,
      169112.,  169616.,  170120.,  170624.,  195415.,  196030.,  196645.,
      197260.,  202030.,  202660.,  203290.,  203920.,  208765.,  209410.,
      210055.,  210700.,  215620.,  216280.,  216940.,  217600.,  211795.,
      212470.,  213145.,  213820.,  218650.,  219340.,  220030.,  220720.,
      225625.,  226330.,  227035.,  227740.,  232720.,  233440.,  234160.,
      234880.,  228175.,  228910.,  229645.,  230380.,  235270.,  236020.,
      236770.,  237520.,  242485.,  243250.,  244015.,  244780.,  249820.,
      250600.,  251380.,  252160.,  244555.,  245350.,  246145.,  246940.,
      251890.,  252700.,  253510.,  254320.,  259345.,  260170.,  260995.,
      261820.,  266920.,  267760.,  268600.,  269440.,  196340.,  197000.,
      197660.,  198320.,  202208.,  202880.,  203552.,  204224.,  208172.,
      208856.,  209540.,  210224.,  214232.,  214928.,  215624.,  216320.,
      147585.,  148098.,  148611.,  149124.,  151986.,  152508.,  153030.,
      153552.,  156459.,  156990.,  157521.,  158052.,  161004.,  161544.,
      162084.,  162624.,  197276.,  197912.,  198548.,  199184.,  202856.,
      203504.,  204152.,  204800.,  208532.,  209192.,  209852.,  210512.,
      214304.,  214976.,  215648.,  216320.,  264560.,  265440.,  266320.,
      267200.,  272000.,  272896.,  273792.,  274688.,  279568.,  280480.,
      281392.,  282304.,  287264.,  288192.,  289120.,  290048.,  332180.,
      333320.,  334460.,  335600.,  341480.,  342640.,  343800.,  344960.,
      350940.,  352120.,  353300.,  354480.,  360560.,  361760.,  362960.,
      364160.,  350820.,  352040.,  353260.,  354480.,  360440.,  361680.,
      362920.,  364160.,  370220.,  371480.,  372740.,  374000.,  380160.,
      381440.,  382720.,  384000.,  369460.,  370760.,  372060.,  373360.,
      379400.,  380720.,  382040.,  383360.,  389500.,  390840.,  392180.,
      393520.,  399760.,  401120.,  402480.,  403840.,  388100.,  389480.,
      390860.,  392240.,  398360.,  399760.,  401160.,  402560.,  408780.,
      410200.,  411620.,  413040.,  419360.,  420800.,  422240.,  423680.,
      308080.,  309216.,  310352.,  311488.,  316288.,  317440.,  318592.,
      319744.,  324624.,  325792.,  326960.,  328128.,  333088.,  334272.,
      335456.,  336640.,  229004.,  229880.,  230756.,  231632.,  235160.,
      236048.,  236936.,  237824.,  241412.,  242312.,  243212.,  244112.,
      247760.,  248672.,  249584.,  250496.,  293755.,  294790.,  295825.,
      296860.,  301090.,  302140.,  303190.,  304240.,  308545.,  309610.,
      310675.,  311740.,  316120.,  317200.,  318280.,  319360.,  389420.,
      390840.,  392260.,  393680.,  399200.,  400640.,  402080.,  403520.,
      409140.,  410600.,  412060.,  413520.,  419240.,  420720.,  422200.,
      423680.,  483425.,  485250.,  487075.,  488900.,  495650.,  497500.,
      499350.,  501200.,  508075.,  509950.,  511825.,  513700.,  520700.,
      522600.,  524500.,  526400.,  502725.,  504650.,  506575.,  508500.,
      515350.,  517300.,  519250.,  521200.,  528175.,  530150.,  532125.,
      534100.,  541200.,  543200.,  545200.,  547200.,  522025.,  524050.,
      526075.,  528100.,  535050.,  537100.,  539150.,  541200.,  548275.,
      550350.,  552425.,  554500.,  561700.,  563800.,  565900.,  568000.,
      541325.,  543450.,  545575.,  547700.,  554750.,  556900.,  559050.,
      561200.,  568375.,  570550.,  572725.,  574900.,  582200.,  584400.,
      586600.,  588800.,  425900.,  427640.,  429380.,  431120.,  436640.,
      438400.,  440160.,  441920.,  447540.,  449320.,  451100.,  452880.,
      458600.,  460400.,  462200.,  464000.,  313735.,  315070.,  316405.,
      317740.,  321790.,  323140.,  324490.,  325840.,  329965.,  331330.,
      332695.,  334060.,  338260.,  339640.,  341020.,  342400.,  394075.,
      395590.,  397105.,  398620.,  403330.,  404860.,  406390.,  407920.,
      412705.,  414250.,  415795.,  417340.,  422200.,  423760.,  425320.,
      426880.,  518060.,  520120.,  522180.,  524240.,  530400.,  532480.,
      534560.,  536640.,  542900.,  545000.,  547100.,  549200.,  555560.,
      557680.,  559800.,  561920.,  637825.,  640450.,  643075.,  645700.,
      653250.,  655900.,  658550.,  661200.,  668875.,  671550.,  674225.,
      676900.,  684700.,  687400.,  690100.,  692800.,  657125.,  659850.,
      662575.,  665300.,  672950.,  675700.,  678450.,  681200.,  688975.,
      691750.,  694525.,  697300.,  705200.,  708000.,  710800.,  713600.,
      676425.,  679250.,  682075.,  684900.,  692650.,  695500.,  698350.,
      701200.,  709075.,  711950.,  714825.,  717700.,  725700.,  728600.,
      731500.,  734400.,  695725.,  698650.,  701575.,  704500.,  712350.,
      715300.,  718250.,  721200.,  729175.,  732150.,  735125.,  738100.,
      746200.,  749200.,  752200.,  755200.,  544300.,  546680.,  549060.,
      551440.,  557600.,  560000.,  562400.,  564800.,  571060.,  573480.,
      575900.,  578320.,  584680.,  587120.,  589560.,  592000.,  398695.,
      400510.,  402325.,  404140.,  408670.,  410500.,  412330.,  414160.,
      418765.,  420610.,  422455.,  424300.,  428980.,  430840.,  432700.,
      434560.,  276188.,  277592.,  278996.,  280400.,  283880.,  285296.,
      286712.,  288128.,  291668.,  293096.,  294524.,  295952.,  299552.,
      300992.,  302432.,  303872.,  359024.,  360928.,  362832.,  364736.,
      369280.,  371200.,  373120.,  375040.,  379664.,  381600.,  383536.,
      385472.,  390176.,  392128.,  394080.,  396032.,  436820.,  439240.,
      441660.,  444080.,  449640.,  452080.,  454520.,  456960.,  462620.,
      465080.,  467540.,  470000.,  475760.,  478240.,  480720.,  483200.,
      449060.,  451560.,  454060.,  456560.,  462200.,  464720.,  467240.,
      469760.,  475500.,  478040.,  480580.,  483120.,  488960.,  491520.,
      494080.,  496640.,  461300.,  463880.,  466460.,  469040.,  474760.,
      477360.,  479960.,  482560.,  488380.,  491000.,  493620.,  496240.,
      502160.,  504800.,  507440.,  510080.,  473540.,  476200.,  478860.,
      481520.,  487320.,  490000.,  492680.,  495360.,  501260.,  503960.,
      506660.,  509360.,  515360.,  518080.,  520800.,  523520.,  365680.,
      367840.,  370000.,  372160.,  376704.,  378880.,  381056.,  383232.,
      387856.,  390048.,  392240.,  394432.,  399136.,  401344.,  403552.,
      405760.,  264140.,  265784.,  267428.,  269072.,  272408.,  274064.,
      275720.,  277376.,  280772.,  282440.,  284108.,  285776.,  289232.,
      290912.,  292592.,  294272.,  170157.,  171354.,  172551.,  173748.,
      176142.,  177348.,  178554.,  179760.,  182199.,  183414.,  184629.,
      185844.,  188328.,  189552.,  190776.,  192000.,  217460.,  219080.,
      220700.,  222320.,  225440.,  227072.,  228704.,  230336.,  233516.,
      235160.,  236804.,  238448.,  241688.,  243344.,  245000.,  246656.,
      259735.,  261790.,  263845.,  265900.,  269710.,  271780.,  273850.,
      275920.,  279805.,  281890.,  283975.,  286060.,  290020.,  292120.,
      294220.,  296320.,  266515.,  268630.,  270745.,  272860.,  276730.,
      278860.,  280990.,  283120.,  287065.,  289210.,  291355.,  293500.,
      297520.,  299680.,  301840.,  304000.,  273295.,  275470.,  277645.,
      279820.,  283750.,  285940.,  288130.,  290320.,  294325.,  296530.,
      298735.,  300940.,  305020.,  307240.,  309460.,  311680.,  280075.,
      282310.,  284545.,  286780.,  290770.,  293020.,  295270.,  297520.,
      301585.,  303850.,  306115.,  308380.,  312520.,  314800.,  317080.,
      319360.,  211700.,  213512.,  215324.,  217136.,  220256.,  222080.,
      223904.,  225728.,  228908.,  230744.,  232580.,  234416.,  237656.,
      239504.,  241352.,  243200.,  149313.,  150690.,  152067.,  153444.,
      155730.,  157116.,  158502.,  159888.,  162219.,  163614.,  165009.,
      166404.,  168780.,  170184.,  171588.,  172992.,  611373.,  613434.,
      615495.,  617556.,  622254.,  624324.,  626394.,  628464.,  633207.,
      635286.,  637365.,  639444.,  644232.,  646320.,  648408.,  650496.,
      800372.,  803144.,  805916.,  808688.,  814880.,  817664.,  820448.,
      823232.,  829484.,  832280.,  835076.,  837872.,  844184.,  846992.,
      849800.,  852608.,  981655.,  985150.,  988645.,  992140.,  999790.,
      1003300., 1006810., 1010320., 1018045., 1021570., 1025095., 1028620.,
      1036420., 1039960., 1043500., 1047040., 998035.,  1001590., 1005145.,
      1008700., 1016410., 1019980., 1023550., 1027120., 1034905., 1038490.,
      1042075., 1045660., 1053520., 1057120., 1060720., 1064320., 1014415.,
      1018030., 1021645., 1025260., 1033030., 1036660., 1040290., 1043920.,
      1051765., 1055410., 1059055., 1062700., 1070620., 1074280., 1077940.,
      1081600., 1030795., 1034470., 1038145., 1041820., 1049650., 1053340.,
      1057030., 1060720., 1068625., 1072330., 1076035., 1079740., 1087720.,
      1091440., 1095160., 1098880., 806900.,  809864.,  812828.,  815792.,
      821984.,  824960.,  827936.,  830912.,  837164.,  840152.,  843140.,
      846128.,  852440.,  855440.,  858440.,  861440.,  591681.,  593922.,
      596163.,  598404.,  602994.,  605244.,  607494.,  609744.,  614379.,
      616638.,  618897.,  621156.,  625836.,  628104.,  630372.,  632640.,
      770972.,  773912.,  776852.,  779792.,  785768.,  788720.,  791672.,
      794624.,  800660.,  803624.,  806588.,  809552.,  815648.,  818624.,
      821600.,  824576.,  1004912., 1008864., 1012816., 1016768., 1024640.,
      1028608., 1032576., 1036544., 1044496., 1048480., 1052464., 1056448.,
      1064480., 1068480., 1072480., 1076480., 1226900., 1231880., 1236860.,
      1241840., 1251560., 1256560., 1261560., 1266560., 1276380., 1281400.,
      1286420., 1291440., 1301360., 1306400., 1311440., 1316480., 1245540.,
      1250600., 1255660., 1260720., 1270520., 1275600., 1280680., 1285760.,
      1295660., 1300760., 1305860., 1310960., 1320960., 1326080., 1331200.,
      1336320., 1264180., 1269320., 1274460., 1279600., 1289480., 1294640.,
      1299800., 1304960., 1314940., 1320120., 1325300., 1330480., 1340560.,
      1345760., 1350960., 1356160., 1282820., 1288040., 1293260., 1298480.,
      1308440., 1313680., 1318920., 1324160., 1334220., 1339480., 1344740.,
      1350000., 1360160., 1365440., 1370720., 1376000., 999280.,  1003488.,
      1007696., 1011904., 1019776., 1024000., 1028224., 1032448., 1040400.,
      1044640., 1048880., 1053120., 1061152., 1065408., 1069664., 1073920.,
      728972.,  732152.,  735332.,  738512.,  744344.,  747536.,  750728.,
      753920.,  759812.,  763016.,  766220.,  769424.,  775376.,  778592.,
      781808.,  785024.,  895675.,  899590.,  903505.,  907420.,  914530.,
      918460.,  922390.,  926320.,  933505.,  937450.,  941395.,  945340.,
      952600.,  956560.,  960520.,  964480.,  1161260., 1166520., 1171780.,
      1177040., 1186400., 1191680., 1196960., 1202240., 1211700., 1217000.,
      1222300., 1227600., 1237160., 1242480., 1247800., 1253120., 1409825.,
      1416450., 1423075., 1429700., 1441250., 1447900., 1454550., 1461200.,
      1472875., 1479550., 1486225., 1492900., 1504700., 1511400., 1518100.,
      1524800., 1429125., 1435850., 1442575., 1449300., 1460950., 1467700.,
      1474450., 1481200., 1492975., 1499750., 1506525., 1513300., 1525200.,
      1532000., 1538800., 1545600., 1448425., 1455250., 1462075., 1468900.,
      1480650., 1487500., 1494350., 1501200., 1513075., 1519950., 1526825.,
      1533700., 1545700., 1552600., 1559500., 1566400., 1467725., 1474650.,
      1481575., 1488500., 1500350., 1507300., 1514250., 1521200., 1533175.,
      1540150., 1547125., 1554100., 1566200., 1573200., 1580200., 1587200.,
      1136300., 1141880., 1147460., 1153040., 1162400., 1168000., 1173600.,
      1179200., 1188660., 1194280., 1199900., 1205520., 1215080., 1220720.,
      1226360., 1232000., 823495.,  827710.,  831925.,  836140.,  843070.,
      847300.,  851530.,  855760.,  862765.,  867010.,  871255.,  875500.,
      882580.,  886840.,  891100.,  895360.,  995995.,  1000390., 1004785.,
      1009180., 1016770., 1021180., 1025590., 1030000., 1037665., 1042090.,
      1046515., 1050940., 1058680., 1063120., 1067560., 1072000., 1289900.,
      1295800., 1301700., 1307600., 1317600., 1323520., 1329440., 1335360.,
      1345460., 1351400., 1357340., 1363280., 1373480., 1379440., 1385400.,
      1391360., 1564225., 1571650., 1579075., 1586500., 1598850., 1606300.,
      1613750., 1621200., 1633675., 1641150., 1648625., 1656100., 1668700.,
      1676200., 1683700., 1691200., 1583525., 1591050., 1598575., 1606100.,
      1618550., 1626100., 1633650., 1641200., 1653775., 1661350., 1668925.,
      1676500., 1689200., 1696800., 1704400., 1712000., 1602825., 1610450.,
      1618075., 1625700., 1638250., 1645900., 1653550., 1661200., 1673875.,
      1681550., 1689225., 1696900., 1709700., 1717400., 1725100., 1732800.,
      1622125., 1629850., 1637575., 1645300., 1657950., 1665700., 1673450.,
      1681200., 1693975., 1701750., 1709525., 1717300., 1730200., 1738000.,
      1745800., 1753600., 1254700., 1260920., 1267140., 1273360., 1283360.,
      1289600., 1295840., 1302080., 1312180., 1318440., 1324700., 1330960.,
      1341160., 1347440., 1353720., 1360000., 908455.,  913150.,  917845.,
      922540.,  929950.,  934660.,  939370.,  944080.,  951565.,  956290.,
      961015.,  965740.,  973300.,  978040.,  982780.,  987520.,  665564.,
      669272.,  672980.,  676688.,  682472.,  686192.,  689912.,  693632.,
      699476.,  703208.,  706940.,  710672.,  716576.,  720320.,  724064.,
      727808.,  853616.,  858592.,  863568.,  868544.,  876160.,  881152.,
      886144.,  891136.,  898832.,  903840.,  908848.,  913856.,  921632.,
      926656.,  931680.,  936704.,  1024340., 1030600., 1036860., 1043120.,
      1052520., 1058800., 1065080., 1071360., 1080860., 1087160., 1093460.,
      1099760., 1109360., 1115680., 1122000., 1128320., 1036580., 1042920.,
      1049260., 1055600., 1065080., 1071440., 1077800., 1084160., 1093740.,
      1100120., 1106500., 1112880., 1122560., 1128960., 1135360., 1141760.,
      1048820., 1055240., 1061660., 1068080., 1077640., 1084080., 1090520.,
      1096960., 1106620., 1113080., 1119540., 1126000., 1135760., 1142240.,
      1148720., 1155200., 1061060., 1067560., 1074060., 1080560., 1090200.,
      1096720., 1103240., 1109760., 1119500., 1126040., 1132580., 1139120.,
      1148960., 1155520., 1162080., 1168640., 811120.,  816352.,  821584.,
      826816.,  834432.,  839680.,  844928.,  850176.,  857872.,  863136.,
      868400.,  873664.,  881440.,  886720.,  892000.,  897280.,  579788.,
      583736.,  587684.,  591632.,  597272.,  601232.,  605192.,  609152.,
      614852.,  618824.,  622796.,  626768.,  632528.,  636512.,  640496.,
      644480.,  393069.,  395994.,  398919.,  401844.,  405966.,  408900.,
      411834.,  414768.,  418935.,  421878.,  424821.,  427764.,  431976.,
      434928.,  437880.,  440832.,  496244.,  500168.,  504092.,  508016.,
      513440.,  517376.,  521312.,  525248.,  530732.,  534680.,  538628.,
      542576.,  548120.,  552080.,  556040.,  560000.,  585175.,  590110.,
      595045.,  599980.,  606670.,  611620.,  616570.,  621520.,  628285.,
      633250.,  638215.,  643180.,  650020.,  655000.,  659980.,  664960.,
      591955.,  596950.,  601945.,  606940.,  613690.,  618700.,  623710.,
      628720.,  635545.,  640570.,  645595.,  650620.,  657520.,  662560.,
      667600.,  672640.,  598735.,  603790.,  608845.,  613900.,  620710.,
      625780.,  630850.,  635920.,  642805.,  647890.,  652975.,  658060.,
      665020.,  670120.,  675220.,  680320.,  605515.,  610630.,  615745.,
      620860.,  627730.,  632860.,  637990.,  643120.,  650065.,  655210.,
      660355.,  665500.,  672520.,  677680.,  682840.,  688000.,  453620.,
      457736.,  461852.,  465968.,  471392.,  475520.,  479648.,  483776.,
      489260.,  493400.,  497540.,  501680.,  507224.,  511376.,  515528.,
      519680.,  316929.,  320034.,  323139.,  326244.,  330258.,  333372.,
      336486.,  339600.,  343659.,  346782.,  349905.,  353028.,  357132.,
      360264.,  363396.,  366528.,  1110765., 1114554., 1118343., 1122132.,
      1128558., 1132356., 1136154., 1139952., 1146423., 1150230., 1154037.,
      1157844., 1164360., 1168176., 1171992., 1175808., 1447796., 1452872.,
      1457948., 1463024., 1471520., 1476608., 1481696., 1486784., 1495340.,
      1500440., 1505540., 1510640., 1519256., 1524368., 1529480., 1534592.,
      1767895., 1774270., 1780645., 1787020., 1797550., 1803940., 1810330.,
      1816720., 1827325., 1833730., 1840135., 1846540., 1857220., 1863640.,
      1870060., 1876480., 1784275., 1790710., 1797145., 1803580., 1814170.,
      1820620., 1827070., 1833520., 1844185., 1850650., 1857115., 1863580.,
      1874320., 1880800., 1887280., 1893760., 1800655., 1807150., 1813645.,
      1820140., 1830790., 1837300., 1843810., 1850320., 1861045., 1867570.,
      1874095., 1880620., 1891420., 1897960., 1904500., 1911040., 1817035.,
      1823590., 1830145., 1836700., 1847410., 1853980., 1860550., 1867120.,
      1877905., 1884490., 1891075., 1897660., 1908520., 1915120., 1921720.,
      1928320., 1417460., 1422728., 1427996., 1433264., 1441760., 1447040.,
      1452320., 1457600., 1466156., 1471448., 1476740., 1482032., 1490648.,
      1495952., 1501256., 1506560., 1035777., 1039746., 1043715., 1047684.,
      1054002., 1057980., 1061958., 1065936., 1072299., 1076286., 1080273.,
      1084260., 1090668., 1094664., 1098660., 1102656., 1344668., 1349912.,
      1355156., 1360400., 1368680., 1373936., 1379192., 1384448., 1392788.,
      1398056., 1403324., 1408592., 1416992., 1422272., 1427552., 1432832.,
      1745264., 1752288., 1759312., 1766336., 1777280., 1784320., 1791360.,
      1798400., 1809424., 1816480., 1823536., 1830592., 1841696., 1848768.,
      1855840., 1862912., 2121620., 2130440., 2139260., 2148080., 2161640.,
      2170480., 2179320., 2188160., 2201820., 2210680., 2219540., 2228400.,
      2242160., 2251040., 2259920., 2268800., 2140260., 2149160., 2158060.,
      2166960., 2180600., 2189520., 2198440., 2207360., 2221100., 2230040.,
      2238980., 2247920., 2261760., 2270720., 2279680., 2288640., 2158900.,
      2167880., 2176860., 2185840., 2199560., 2208560., 2217560., 2226560.,
      2240380., 2249400., 2258420., 2267440., 2281360., 2290400., 2299440.,
      2308480., 2177540., 2186600., 2195660., 2204720., 2218520., 2227600.,
      2236680., 2245760., 2259660., 2268760., 2277860., 2286960., 2300960.,
      2310080., 2319200., 2328320., 1690480., 1697760., 1705040., 1712320.,
      1723264., 1730560., 1737856., 1745152., 1756176., 1763488., 1770800.,
      1778112., 1789216., 1796544., 1803872., 1811200., 1228940., 1234424.,
      1239908., 1245392., 1253528., 1259024., 1264520., 1270016., 1278212.,
      1283720., 1289228., 1294736., 1302992., 1308512., 1314032., 1319552.,
      1497595., 1504390., 1511185., 1517980., 1527970., 1534780., 1541590.,
      1548400., 1558465., 1565290., 1572115., 1578940., 1589080., 1595920.,
      1602760., 1609600., 1933100., 1942200., 1951300., 1960400., 1973600.,
      1982720., 1991840., 2000960., 2014260., 2023400., 2032540., 2041680.,
      2055080., 2064240., 2073400., 2082560., 2336225., 2347650., 2359075.,
      2370500., 2386850., 2398300., 2409750., 2421200., 2437675., 2449150.,
      2460625., 2472100., 2488700., 2500200., 2511700., 2523200., 2355525.,
      2367050., 2378575., 2390100., 2406550., 2418100., 2429650., 2441200.,
      2457775., 2469350., 2480925., 2492500., 2509200., 2520800., 2532400.,
      2544000., 2374825., 2386450., 2398075., 2409700., 2426250., 2437900.,
      2449550., 2461200., 2477875., 2489550., 2501225., 2512900., 2529700.,
      2541400., 2553100., 2564800., 2394125., 2405850., 2417575., 2429300.,
      2445950., 2457700., 2469450., 2481200., 2497975., 2509750., 2521525.,
      2533300., 2550200., 2562000., 2573800., 2585600., 1846700., 1856120.,
      1865540., 1874960., 1888160., 1897600., 1907040., 1916480., 1929780.,
      1939240., 1948700., 1958160., 1971560., 1981040., 1990520., 2000000.,
      1333255., 1340350., 1347445., 1354540., 1364350., 1371460., 1378570.,
      1385680., 1395565., 1402690., 1409815., 1416940., 1426900., 1434040.,
      1441180., 1448320., 1597915., 1605190., 1612465., 1619740., 1630210.,
      1637500., 1644790., 1652080., 1662625., 1669930., 1677235., 1684540.,
      1695160., 1702480., 1709800., 1717120., 2061740., 2071480., 2081220.,
      2090960., 2104800., 2114560., 2124320., 2134080., 2148020., 2157800.,
      2167580., 2177360., 2191400., 2201200., 2211000., 2220800., 2490625.,
      2502850., 2515075., 2527300., 2544450., 2556700., 2568950., 2581200.,
      2598475., 2610750., 2623025., 2635300., 2652700., 2665000., 2677300.,
      2689600., 2509925., 2522250., 2534575., 2546900., 2564150., 2576500.,
      2588850., 2601200., 2618575., 2630950., 2643325., 2655700., 2673200.,
      2685600., 2698000., 2710400., 2529225., 2541650., 2554075., 2566500.,
      2583850., 2596300., 2608750., 2621200., 2638675., 2651150., 2663625.,
      2676100., 2693700., 2706200., 2718700., 2731200., 2548525., 2561050.,
      2573575., 2586100., 2603550., 2616100., 2628650., 2641200., 2658775.,
      2671350., 2683925., 2696500., 2714200., 2726800., 2739400., 2752000.,
      1965100., 1975160., 1985220., 1995280., 2009120., 2019200., 2029280.,
      2039360., 2053300., 2063400., 2073500., 2083600., 2097640., 2107760.,
      2117880., 2128000., 1418215., 1425790., 1433365., 1440940., 1451230.,
      1458820., 1466410., 1474000., 1484365., 1491970., 1499575., 1507180.,
      1517620., 1525240., 1532860., 1540480., 1054940., 1060952., 1066964.,
      1072976., 1081064., 1087088., 1093112., 1099136., 1107284., 1113320.,
      1119356., 1125392., 1133600., 1139648., 1145696., 1151744., 1348208.,
      1356256., 1364304., 1372352., 1383040., 1391104., 1399168., 1407232.,
      1418000., 1426080., 1434160., 1442240., 1453088., 1461184., 1469280.,
      1477376., 1611860., 1621960., 1632060., 1642160., 1655400., 1665520.,
      1675640., 1685760., 1699100., 1709240., 1719380., 1729520., 1742960.,
      1753120., 1763280., 1773440., 1624100., 1634280., 1644460., 1654640.,
      1667960., 1678160., 1688360., 1698560., 1711980., 1722200., 1732420.,
      1742640., 1756160., 1766400., 1776640., 1786880., 1636340., 1646600.,
      1656860., 1667120., 1680520., 1690800., 1701080., 1711360., 1724860.,
      1735160., 1745460., 1755760., 1769360., 1779680., 1790000., 1800320.,
      1648580., 1658920., 1669260., 1679600., 1693080., 1703440., 1713800.,
      1724160., 1737740., 1748120., 1758500., 1768880., 1782560., 1792960.,
      1803360., 1813760., 1256560., 1264864., 1273168., 1281472., 1292160.,
      1300480., 1308800., 1317120., 1327888., 1336224., 1344560., 1352896.,
      1363744., 1372096., 1380448., 1388800., 895436.,  901688.,  907940.,
      914192.,  922136.,  928400.,  934664.,  940928.,  948932.,  955208.,
      961484.,  967760.,  975824.,  982112.,  988400.,  994688.,  615981.,
      620634.,  625287.,  629940.,  635790.,  640452.,  645114.,  649776.,
      655671.,  660342.,  665013.,  669684.,  675624.,  680304.,  684984.,
      689664.,  775028.,  781256.,  787484.,  793712.,  801440.,  807680.,
      813920.,  820160.,  827948.,  834200.,  840452.,  846704.,  854552.,
      860816.,  867080.,  873344.,  910615.,  918430.,  926245.,  934060.,
      943630.,  951460.,  959290.,  967120.,  976765.,  984610.,  992455.,
      1000300., 1010020., 1017880., 1025740., 1033600., 917395.,  925270.,
      933145.,  941020.,  950650.,  958540.,  966430.,  974320.,  984025.,
      991930.,  999835.,  1007740., 1017520., 1025440., 1033360., 1041280.,
      924175.,  932110.,  940045.,  947980.,  957670.,  965620.,  973570.,
      981520.,  991285.,  999250.,  1007215., 1015180., 1025020., 1033000.,
      1040980., 1048960., 930955.,  938950.,  946945.,  954940.,  964690.,
      972700.,  980710.,  988720.,  998545.,  1006570., 1014595., 1022620.,
      1032520., 1040560., 1048600., 1056640., 695540.,  701960.,  708380.,
      714800.,  722528.,  728960.,  735392.,  741824.,  749612.,  756056.,
      762500.,  768944.,  776792.,  783248.,  789704.,  796160.,  484545.,
      489378.,  494211.,  499044.,  504786.,  509628.,  514470.,  519312.,
      525099.,  529950.,  534801.,  539652.,  545484.,  550344.,  555204.,
      560064.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x6x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425.,  485250.,  487075.,  488900.,  495650.,  497500.,  499350.,
      501200.,  508075.,  509950.,  511825.,  513700.,  520700.,  522600.,
      524500.,  526400.,  502725.,  504650.,  506575.,  508500.,  515350.,
      517300.,  519250.,  521200.,  528175.,  530150.,  532125.,  534100.,
      541200.,  543200.,  545200.,  547200.,  522025.,  524050.,  526075.,
      528100.,  535050.,  537100.,  539150.,  541200.,  548275.,  550350.,
      552425.,  554500.,  561700.,  563800.,  565900.,  568000.,  541325.,
      543450.,  545575.,  547700.,  554750.,  556900.,  559050.,  561200.,
      568375.,  570550.,  572725.,  574900.,  582200.,  584400.,  586600.,
      588800.,  637825.,  640450.,  643075.,  645700.,  653250.,  655900.,
      658550.,  661200.,  668875.,  671550.,  674225.,  676900.,  684700.,
      687400.,  690100.,  692800.,  657125.,  659850.,  662575.,  665300.,
      672950.,  675700.,  678450.,  681200.,  688975.,  691750.,  694525.,
      697300.,  705200.,  708000.,  710800.,  713600.,  676425.,  679250.,
      682075.,  684900.,  692650.,  695500.,  698350.,  701200.,  709075.,
      711950.,  714825.,  717700.,  725700.,  728600.,  731500.,  734400.,
      695725.,  698650.,  701575.,  704500.,  712350.,  715300.,  718250.,
      721200.,  729175.,  732150.,  735125.,  738100.,  746200.,  749200.,
      752200.,  755200.,  1409825., 1416450., 1423075., 1429700., 1441250.,
      1447900., 1454550., 1461200., 1472875., 1479550., 1486225., 1492900.,
      1504700., 1511400., 1518100., 1524800., 1429125., 1435850., 1442575.,
      1449300., 1460950., 1467700., 1474450., 1481200., 1492975., 1499750.,
      1506525., 1513300., 1525200., 1532000., 1538800., 1545600., 1448425.,
      1455250., 1462075., 1468900., 1480650., 1487500., 1494350., 1501200.,
      1513075., 1519950., 1526825., 1533700., 1545700., 1552600., 1559500.,
      1566400., 1467725., 1474650., 1481575., 1488500., 1500350., 1507300.,
      1514250., 1521200., 1533175., 1540150., 1547125., 1554100., 1566200.,
      1573200., 1580200., 1587200., 1564225., 1571650., 1579075., 1586500.,
      1598850., 1606300., 1613750., 1621200., 1633675., 1641150., 1648625.,
      1656100., 1668700., 1676200., 1683700., 1691200., 1583525., 1591050.,
      1598575., 1606100., 1618550., 1626100., 1633650., 1641200., 1653775.,
      1661350., 1668925., 1676500., 1689200., 1696800., 1704400., 1712000.,
      1602825., 1610450., 1618075., 1625700., 1638250., 1645900., 1653550.,
      1661200., 1673875., 1681550., 1689225., 1696900., 1709700., 1717400.,
      1725100., 1732800., 1622125., 1629850., 1637575., 1645300., 1657950.,
      1665700., 1673450., 1681200., 1693975., 1701750., 1709525., 1717300.,
      1730200., 1738000., 1745800., 1753600., 2336225., 2347650., 2359075.,
      2370500., 2386850., 2398300., 2409750., 2421200., 2437675., 2449150.,
      2460625., 2472100., 2488700., 2500200., 2511700., 2523200., 2355525.,
      2367050., 2378575., 2390100., 2406550., 2418100., 2429650., 2441200.,
      2457775., 2469350., 2480925., 2492500., 2509200., 2520800., 2532400.,
      2544000., 2374825., 2386450., 2398075., 2409700., 2426250., 2437900.,
      2449550., 2461200., 2477875., 2489550., 2501225., 2512900., 2529700.,
      2541400., 2553100., 2564800., 2394125., 2405850., 2417575., 2429300.,
      2445950., 2457700., 2469450., 2481200., 2497975., 2509750., 2521525.,
      2533300., 2550200., 2562000., 2573800., 2585600., 2490625., 2502850.,
      2515075., 2527300., 2544450., 2556700., 2568950., 2581200., 2598475.,
      2610750., 2623025., 2635300., 2652700., 2665000., 2677300., 2689600.,
      2509925., 2522250., 2534575., 2546900., 2564150., 2576500., 2588850.,
      2601200., 2618575., 2630950., 2643325., 2655700., 2673200., 2685600.,
      2698000., 2710400., 2529225., 2541650., 2554075., 2566500., 2583850.,
      2596300., 2608750., 2621200., 2638675., 2651150., 2663625., 2676100.,
      2693700., 2706200., 2718700., 2731200., 2548525., 2561050., 2573575.,
      2586100., 2603550., 2616100., 2628650., 2641200., 2658775., 2671350.,
      2683925., 2696500., 2714200., 2726800., 2739400., 2752000.};
  const std::array<int, 4> in_shape = {{3, 6, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380.,  10325.,
      10650., 8350.,  6130.,  4460.,  5812.,  7090.,  7300.,  5660.,  4106.,
      2778.,  3570.,  4290.,  4410.,  3360.,  2391.,  8736.,  11466., 14100.,
      14370., 11280., 8295.,  10952., 14316., 17530., 17840., 13940., 10202.,
      12670., 16480., 20075., 20400., 15850., 11530., 13930., 18100., 22025.,
      22350., 17350., 12610., 15190., 19720., 23975., 24300., 18850., 13690.,
      10256., 13204., 15910., 16120., 12380., 8894.,  6180.,  7854.,  9330.,
      9450.,  7140.,  5037.,  15918., 20790., 25440., 25710., 20100., 14721.,
      19268., 25068., 30550., 30860., 24020., 17510., 21490., 27820., 33725.,
      34050., 26350., 19090., 22750., 29440., 35675., 36000., 27850., 20170.,
      24010., 31060., 37625., 37950., 29350., 21250., 16052., 20596., 24730.,
      24940., 19100., 13682., 9582.,  12138., 14370., 14490., 10920., 7683.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6425.,  6750.,  8375.,  8700.,  10325., 10650., 20075., 20400., 22025.,
      22350., 23975., 24300., 33725., 34050., 35675., 36000., 37625., 37950.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 8572.,  8920.,  11152.,
      11624., 13580., 14180., 13980., 14600., 10816., 11320., 7828.,  8212.,
      5268.,  5556.,  6750.,  7140.,  8085.,  8580.,  8310.,  8820.,  6306.,
      6720.,  4467.,  4782.,  17022., 17472., 22326., 22932., 27435., 28200.,
      27960., 28740., 21930., 22560., 16113., 16590., 21268., 21904., 27776.,
      28632., 33980., 35060., 34580., 35680., 26992., 27880., 19732., 20404.,
      24500., 25340., 31830., 32960., 38725., 40150., 39350., 40800., 30530.,
      31700., 22175., 23060., 26930., 27860., 34950., 36200., 42475., 44050.,
      43100., 44700., 33410., 34700., 24245., 25220., 29360., 30380., 38070.,
      39440., 46225., 47950., 46850., 48600., 36290., 37700., 26315., 27380.,
      19660., 20512., 25264., 26408., 30380., 31820., 30780., 32240., 23584.,
      24760., 16900., 17788., 11694., 12360., 14814., 15708., 17535., 18660.,
      17760., 18900., 13362., 14280., 9381.,  10074., 31008., 31836., 40470.,
      41580., 49485., 50880., 50010., 51420., 39066., 40200., 28587., 29442.,
      37396., 38536., 48608., 50136., 59180., 61100., 59780., 61720., 46480.,
      48040., 33844., 35020., 41510., 42980., 53670., 55640., 64975., 67450.,
      65600., 68100., 50690., 52700., 36665., 38180., 43940., 45500., 56790.,
      58880., 68725., 71350., 69350., 72000., 53570., 55700., 38735., 40340.,
      46370., 48020., 59910., 62120., 72475., 75250., 73100., 75900., 56450.,
      58700., 40805., 42500., 30748., 32104., 39376., 41192., 47180., 49460.,
      47580., 49880., 36352., 38200., 25972., 27364., 18120., 19164., 22878.,
      24276., 26985., 28740., 27210., 28980., 20418., 21840., 14295., 15366.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400., 19975.,
      20650., 20600., 21300., 38725., 40150., 39350., 40800., 42475., 44050.,
      43100., 44700., 46225., 47950., 46850., 48600., 64975., 67450., 65600.,
      68100., 68725., 71350., 69350., 72000., 72475., 75250., 73100., 75900.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,   6072.,   6144.,   6216.,   8262.,   8364.,   8466.,   8568.,
      10635.,  10770.,  10905.,  11040.,  11670.,  11820.,  11970.,  12120.,
      9462.,   9588.,   9714.,   9840.,   7179.,   7278.,   7377.,   7476.,
      10148.,  10280.,  10412.,  10544.,  13704.,  13888.,  14072.,  14256.,
      17320.,  17560.,  17800.,  18040.,  18500.,  18760.,  19020.,  19280.,
      14792.,  15008.,  15224.,  15440.,  11072.,  11240.,  11408.,  11576.,
      14770.,  14980.,  15190.,  15400.,  19690.,  19980.,  20270.,  20560.,
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      20410.,  20740.,  21070.,  21400.,  15115.,  15370.,  15625.,  15880.,
      19540.,  19840.,  20140.,  20440.,  25810.,  26220.,  26630.,  27040.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      26050.,  26500.,  26950.,  27400.,  19165.,  19510.,  19855.,  20200.,
      24310.,  24700.,  25090.,  25480.,  31930.,  32460.,  32990.,  33520.,
      39275.,  39950.,  40625.,  41300.,  40500.,  41200.,  41900.,  42600.,
      31690.,  32260.,  32830.,  33400.,  23215.,  23650.,  24085.,  24520.,
      16796.,  17144.,  17492.,  17840.,  21832.,  22304.,  22776.,  23248.,
      26560.,  27160.,  27760.,  28360.,  27340.,  27960.,  28580.,  29200.,
      21128.,  21632.,  22136.,  22640.,  15272.,  15656.,  16040.,  16424.,
      10248.,  10536.,  10824.,  11112.,  13110.,  13500.,  13890.,  14280.,
      15675.,  16170.,  16665.,  17160.,  16110.,  16620.,  17130.,  17640.,
      12198.,  12612.,  13026.,  13440.,  8619.,   8934.,   9249.,   9564.,
      33594.,  34044.,  34494.,  34944.,  44046.,  44652.,  45258.,  45864.,
      54105.,  54870.,  55635.,  56400.,  55140.,  55920.,  56700.,  57480.,
      43230.,  43860.,  44490.,  45120.,  31749.,  32226.,  32703.,  33180.,
      41900.,  42536.,  43172.,  43808.,  54696.,  55552.,  56408.,  57264.,
      66880.,  67960.,  69040.,  70120.,  68060.,  69160.,  70260.,  71360.,
      53096.,  53984.,  54872.,  55760.,  38792.,  39464.,  40136.,  40808.,
      48160.,  49000.,  49840.,  50680.,  62530.,  63660.,  64790.,  65920.,
      76025.,  77450.,  78875.,  80300.,  77250.,  78700.,  80150.,  81600.,
      59890.,  61060.,  62230.,  63400.,  43465.,  44350.,  45235.,  46120.,
      52930.,  53860.,  54790.,  55720.,  68650.,  69900.,  71150.,  72400.,
      83375.,  84950.,  86525.,  88100.,  84600.,  86200.,  87800.,  89400.,
      65530.,  66820.,  68110.,  69400.,  47515.,  48490.,  49465.,  50440.,
      57700.,  58720.,  59740.,  60760.,  74770.,  76140.,  77510.,  78880.,
      90725.,  92450.,  94175.,  95900.,  91950.,  93700.,  95450.,  97200.,
      71170.,  72580.,  73990.,  75400.,  51565.,  52630.,  53695.,  54760.,
      38468.,  39320.,  40172.,  41024.,  49384.,  50528.,  51672.,  52816.,
      59320.,  60760.,  62200.,  63640.,  60100.,  61560.,  63020.,  64480.,
      45992.,  47168.,  48344.,  49520.,  32912.,  33800.,  34688.,  35576.,
      22722.,  23388.,  24054.,  24720.,  28734.,  29628.,  30522.,  31416.,
      33945.,  35070.,  36195.,  37320.,  34380.,  35520.,  36660.,  37800.,
      25806.,  26724.,  27642.,  28560.,  18069.,  18762.,  19455.,  20148.,
      61188.,  62016.,  62844.,  63672.,  79830.,  80940.,  82050.,  83160.,
      97575.,  98970.,  100365., 101760., 98610.,  100020., 101430., 102840.,
      76998.,  78132.,  79266.,  80400.,  56319.,  57174.,  58029.,  58884.,
      73652.,  74792.,  75932.,  77072.,  95688.,  97216.,  98744.,  100272.,
      116440., 118360., 120280., 122200., 117620., 119560., 121500., 123440.,
      91400.,  92960.,  94520.,  96080.,  66512.,  67688.,  68864.,  70040.,
      81550.,  83020.,  84490.,  85960.,  105370., 107340., 109310., 111280.,
      127475., 129950., 132425., 134900., 128700., 131200., 133700., 136200.,
      99370.,  101380., 103390., 105400., 71815.,  73330.,  74845.,  76360.,
      86320.,  87880.,  89440.,  91000.,  111490., 113580., 115670., 117760.,
      134825., 137450., 140075., 142700., 136050., 138700., 141350., 144000.,
      105010., 107140., 109270., 111400., 75865.,  77470.,  79075.,  80680.,
      91090.,  92740.,  94390.,  96040.,  117610., 119820., 122030., 124240.,
      142175., 144950., 147725., 150500., 143400., 146200., 149000., 151800.,
      110650., 112900., 115150., 117400., 79915.,  81610.,  83305.,  85000.,
      60140.,  61496.,  62852.,  64208.,  76936.,  78752.,  80568.,  82384.,
      92080.,  94360.,  96640.,  98920.,  92860.,  95160.,  97460.,  99760.,
      70856.,  72704.,  74552.,  76400.,  50552.,  51944.,  53336.,  54728.,
      35196.,  36240.,  37284.,  38328.,  44358.,  45756.,  47154.,  48552.,
      52215.,  53970.,  55725.,  57480.,  52650.,  54420.,  56190.,  57960.,
      39414.,  40836.,  42258.,  43680.,  27519.,  28590.,  29661.,  30732.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      39275.,  39950.,  40625.,  41300.,  40500.,  41200.,  41900.,  42600.,
      76025.,  77450.,  78875.,  80300.,  77250.,  78700.,  80150.,  81600.,
      83375.,  84950.,  86525.,  88100.,  84600.,  86200.,  87800.,  89400.,
      90725.,  92450.,  94175.,  95900.,  91950.,  93700.,  95450.,  97200.,
      127475., 129950., 132425., 134900., 128700., 131200., 133700., 136200.,
      134825., 137450., 140075., 142700., 136050., 138700., 141350., 144000.,
      142175., 144950., 147725., 150500., 143400., 146200., 149000., 151800.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,   6216.,   7932.,   8568.,   10245.,  11040.,  11295.,  12120.,
      9180.,   9840.,   6981.,   7476.,   9896.,   10544.,  13392.,  14256.,
      16960.,  18040.,  18160.,  19280.,  14544.,  15440.,  10904.,  11576.,
      14575.,  15400.,  19460.,  20560.,  24325.,  25700.,  25575.,  27000.,
      20260.,  21400.,  15025.,  15880.,  19435.,  20440.,  25700.,  27040.,
      31825.,  33500.,  33075.,  34800.,  26020.,  27400.,  19165.,  20200.,
      24295.,  25480.,  31940.,  33520.,  39325.,  41300.,  40575.,  42600.,
      31780.,  33400.,  23305.,  24520.,  16880.,  17840.,  21968.,  23248.,
      26760.,  28360.,  27560.,  29200.,  21328.,  22640.,  15440.,  16424.,
      10383.,  11112.,  13308.,  14280.,  15945.,  17160.,  16395.,  17640.,
      12444.,  13440.,  8817.,   9564.,   33711.,  34944.,  44220.,  45864.,
      54345.,  56400.,  55395.,  57480.,  43452.,  45120.,  31929.,  33180.,
      42152.,  43808.,  55056.,  57264.,  67360.,  70120.,  68560.,  71360.,
      53520.,  55760.,  39128.,  40808.,  48595.,  50680.,  63140.,  65920.,
      76825.,  80300.,  78075.,  81600.,  60580.,  63400.,  44005.,  46120.,
      53455.,  55720.,  69380.,  72400.,  84325.,  88100.,  85575.,  89400.,
      66340.,  69400.,  48145.,  50440.,  58315.,  60760.,  75620.,  78880.,
      91825.,  95900.,  93075.,  97200.,  72100.,  75400.,  52285.,  54760.,
      39056.,  41024.,  50192.,  52816.,  60360.,  63640.,  61160.,  64480.,
      46864.,  49520.,  33584.,  35576.,  23235.,  24720.,  29436.,  31416.,
      34845.,  37320.,  35295.,  37800.,  26556.,  28560.,  18645.,  20148.,
      61683.,  63672.,  80508.,  83160.,  98445.,  101760., 99495.,  102840.,
      77724.,  80400.,  56877.,  58884.,  74408.,  77072.,  96720.,  100272.,
      117760., 122200., 118960., 123440., 92496.,  96080.,  67352.,  70040.,
      82615.,  85960.,  106820., 111280., 129325., 134900., 130575., 136200.,
      100900., 105400., 72985.,  76360.,  87475.,  91000.,  113060., 117760.,
      136825., 142700., 138075., 144000., 106660., 111400., 77125.,  80680.,
      92335.,  96040.,  119300., 124240., 144325., 150500., 145575., 151800.,
      112420., 117400., 81265.,  85000.,  61232.,  64208.,  78416.,  82384.,
      93960.,  98920.,  94760.,  99760.,  72400.,  76400.,  51728.,  54728.,
      36087.,  38328.,  45564.,  48552.,  53745.,  57480.,  54195.,  57960.,
      40668.,  43680.,  28473.,  30732.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24325.,  25700.,  25575.,  27000.,  31825.,  33500.,  33075.,  34800.,
      39325.,  41300.,  40575.,  42600.,  76825.,  80300.,  78075.,  81600.,
      84325.,  88100.,  85575.,  89400.,  91825.,  95900.,  93075.,  97200.,
      129325., 134900., 130575., 136200., 136825., 142700., 138075., 144000.,
      144325., 150500., 145575., 151800.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343.,  11478.,  12288.,  12432.,  15672.,  15864.,  16932.,  17136.,
      20235.,  20490.,  21810.,  22080.,  22305.,  22590.,  23940.,  24240.,
      18120.,  18360.,  19428.,  19680.,  13773.,  13962.,  14754.,  14952.,
      19540.,  19792.,  20824.,  21088.,  26432.,  26784.,  28144.,  28512.,
      33460.,  33920.,  35600.,  36080.,  35820.,  36320.,  38040.,  38560.,
      28672.,  29088.,  30448.,  30880.,  21484.,  21808.,  22816.,  23152.,
      28745.,  29150.,  30380.,  30800.,  38360.,  38920.,  40540.,  41120.,
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      39880.,  40520.,  42140.,  42800.,  29555.,  30050.,  31250.,  31760.,
      38285.,  38870.,  40280.,  40880.,  50600.,  51400.,  53260.,  54080.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      51160.,  52040.,  53900.,  54800.,  37655.,  38330.,  39710.,  40400.,
      47825.,  48590.,  50180.,  50960.,  62840.,  63880.,  65980.,  67040.,
      77325.,  78650.,  81250.,  82600.,  79775.,  81150.,  83800.,  85200.,
      62440.,  63560.,  65660.,  66800.,  45755.,  46610.,  48170.,  49040.,
      33076.,  33760.,  34984.,  35680.,  43008.,  43936.,  45552.,  46496.,
      52340.,  53520.,  55520.,  56720.,  53900.,  55120.,  57160.,  58400.,
      41664.,  42656.,  44272.,  45280.,  30124.,  30880.,  32080.,  32848.,
      20199.,  20766.,  21648.,  22224.,  25848.,  26616.,  27780.,  28560.,
      30915.,  31890.,  33330.,  34320.,  31785.,  32790.,  34260.,  35280.,
      24072.,  24888.,  26052.,  26880.,  17013.,  17634.,  18498.,  19128.,
      66531.,  67422.,  68988.,  69888.,  87240.,  88440.,  90516.,  91728.,
      107175., 108690., 111270., 112800., 109245., 110790., 113400., 114960.,
      85656.,  86904.,  88980.,  90240.,  62913.,  63858.,  65406.,  66360.,
      83044.,  84304.,  86344.,  87616.,  108416., 110112., 112816., 114528.,
      132580., 134720., 138080., 140240., 134940., 137120., 140520., 142720.,
      105280., 107040., 109744., 111520., 76924.,  78256.,  80272.,  81616.,
      95525.,  97190.,  99680.,  101360., 124040., 126280., 129580., 131840.,
      150825., 153650., 157750., 160600., 153275., 156150., 160300., 163200.,
      118840., 121160., 124460., 126800., 86255.,  88010.,  90470.,  92240.,
      105065., 106910., 109580., 111440., 136280., 138760., 142300., 144800.,
      165525., 168650., 173050., 176200., 167975., 171150., 175600., 178800.,
      130120., 132680., 136220., 138800., 94355.,  96290.,  98930.,  100880.,
      114605., 116630., 119480., 121520., 148520., 151240., 155020., 157760.,
      180225., 183650., 188350., 191800., 182675., 186150., 190900., 194400.,
      141400., 144200., 147980., 150800., 102455., 104570., 107390., 109520.,
      76420.,  78112.,  80344.,  82048.,  98112.,  100384., 103344., 105632.,
      117860., 120720., 124400., 127280., 119420., 122320., 126040., 128960.,
      91392.,  93728.,  96688.,  99040.,  65404.,  67168.,  69376.,  71152.,
      45147.,  46470.,  48108.,  49440.,  57096.,  58872.,  61044.,  62832.,
      67455.,  69690.,  72390.,  74640.,  68325.,  70590.,  73320.,  75600.,
      51288.,  53112.,  55284.,  57120.,  35913.,  37290.,  38910.,  40296.,
      121719., 123366., 125688., 127344., 158808., 161016., 164100., 166320.,
      194115., 196890., 200730., 203520., 196185., 198990., 202860., 205680.,
      153192., 155448., 158532., 160800., 112053., 113754., 116058., 117768.,
      146548., 148816., 151864., 154144., 190400., 193440., 197488., 200544.,
      231700., 235520., 240560., 244400., 234060., 237920., 243000., 246880.,
      181888., 184992., 189040., 192160., 132364., 134704., 137728., 140080.,
      162305., 165230., 168980., 171920., 209720., 213640., 218620., 222560.,
      253725., 258650., 264850., 269800., 256175., 261150., 267400., 272400.,
      197800., 201800., 206780., 210800., 142955., 145970., 149690., 152720.,
      171845., 174950., 178880., 182000., 221960., 226120., 231340., 235520.,
      268425., 273650., 280150., 285400., 270875., 276150., 282700., 288000.,
      209080., 213320., 218540., 222800., 151055., 154250., 158150., 161360.,
      181385., 184670., 188780., 192080., 234200., 238600., 244060., 248480.,
      283125., 288650., 295450., 301000., 285575., 291150., 298000., 303600.,
      220360., 224840., 230300., 234800., 159155., 162530., 166610., 170000.,
      119764., 122464., 125704., 128416., 153216., 156832., 161136., 164768.,
      183380., 187920., 193280., 197840., 184940., 189520., 194920., 199520.,
      141120., 144800., 149104., 152800., 100684., 103456., 106672., 109456.,
      70095.,  72174.,  74568.,  76656.,  88344.,  91128.,  94308.,  97104.,
      103995., 107490., 111450., 114960., 104865., 108390., 112380., 115920.,
      78504.,  81336.,  84516.,  87360.,  54813.,  56946.,  59322.,  61464.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      77325.,  78650.,  81250.,  82600.,  79775.,  81150.,  83800.,  85200.,
      150825., 153650., 157750., 160600., 153275., 156150., 160300., 163200.,
      165525., 168650., 173050., 176200., 167975., 171150., 175600., 178800.,
      180225., 183650., 188350., 191800., 182675., 186150., 190900., 194400.,
      253725., 258650., 264850., 269800., 256175., 261150., 267400., 272400.,
      268425., 273650., 280150., 285400., 270875., 276150., 282700., 288000.,
      283125., 288650., 295450., 301000., 285575., 291150., 298000., 303600.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      94885.,  95650.,  96415.,  97180.,  99580.,  100360., 101140., 101920.,
      124640., 125680., 126720., 127760., 130900., 131960., 133020., 134080.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      123760., 124880., 126000., 127120., 130180., 131320., 132460., 133600.,
      90655.,  91510.,  92365.,  93220.,  95470.,  96340.,  97210.,  98080.,
      65468.,  66152.,  66836.,  67520.,  69272.,  69968.,  70664.,  71360.,
      85088.,  86016.,  86944.,  87872.,  90160.,  91104.,  92048.,  92992.,
      103500., 104680., 105860., 107040., 109840., 111040., 112240., 113440.,
      106580., 107800., 109020., 110240., 113080., 114320., 115560., 116800.,
      82336.,  83328.,  84320.,  85312.,  87536.,  88544.,  89552.,  90560.,
      59492.,  60248.,  61004.,  61760.,  63392.,  64160.,  64928.,  65696.,
      39831.,  40398.,  40965.,  41532.,  42720.,  43296.,  43872.,  44448.,
      50928.,  51696.,  52464.,  53232.,  54780.,  55560.,  56340.,  57120.,
      60855.,  61830.,  62805.,  63780.,  65670.,  66660.,  67650.,  68640.,
      62565.,  63570.,  64575.,  65580.,  67500.,  68520.,  69540.,  70560.,
      47328.,  48144.,  48960.,  49776.,  51276.,  52104.,  52932.,  53760.,
      33405.,  34026.,  34647.,  35268.,  36366.,  36996.,  37626.,  38256.,
      132171., 133062., 133953., 134844., 137076., 137976., 138876., 139776.,
      173280., 174480., 175680., 176880., 179820., 181032., 182244., 183456.,
      212835., 214350., 215865., 217380., 221010., 222540., 224070., 225600.,
      216945., 218490., 220035., 221580., 225240., 226800., 228360., 229920.,
      170064., 171312., 172560., 173808., 176700., 177960., 179220., 180480.,
      124881., 125826., 126771., 127716., 129858., 130812., 131766., 132720.,
      164828., 166088., 167348., 168608., 171416., 172688., 173960., 175232.,
      215136., 216832., 218528., 220224., 223920., 225632., 227344., 229056.,
      263020., 265160., 267300., 269440., 274000., 276160., 278320., 280480.,
      267700., 269880., 272060., 274240., 278840., 281040., 283240., 285440.,
      208800., 210560., 212320., 214080., 217712., 219488., 221264., 223040.,
      152516., 153848., 155180., 156512., 159200., 160544., 161888., 163232.,
      189385., 191050., 192715., 194380., 197680., 199360., 201040., 202720.,
      245840., 248080., 250320., 252560., 256900., 259160., 261420., 263680.,
      298825., 301650., 304475., 307300., 312650., 315500., 318350., 321200.,
      303675., 306550., 309425., 312300., 317700., 320600., 323500., 326400.,
      235360., 237680., 240000., 242320., 246580., 248920., 251260., 253600.,
      170755., 172510., 174265., 176020., 179170., 180940., 182710., 184480.,
      208285., 210130., 211975., 213820., 217300., 219160., 221020., 222880.,
      270080., 272560., 275040., 277520., 282100., 284600., 287100., 289600.,
      327925., 331050., 334175., 337300., 342950., 346100., 349250., 352400.,
      332775., 335950., 339125., 342300., 348000., 351200., 354400., 357600.,
      257680., 260240., 262800., 265360., 269860., 272440., 275020., 277600.,
      186775., 188710., 190645., 192580., 195910., 197860., 199810., 201760.,
      227185., 229210., 231235., 233260., 236920., 238960., 241000., 243040.,
      294320., 297040., 299760., 302480., 307300., 310040., 312780., 315520.,
      357025., 360450., 363875., 367300., 373250., 376700., 380150., 383600.,
      361875., 365350., 368825., 372300., 378300., 381800., 385300., 388800.,
      280000., 282800., 285600., 288400., 293140., 295960., 298780., 301600.,
      202795., 204910., 207025., 209140., 212650., 214780., 216910., 219040.,
      151148., 152840., 154532., 156224., 158984., 160688., 162392., 164096.,
      193952., 196224., 198496., 200768., 204400., 206688., 208976., 211264.,
      232860., 235720., 238580., 241440., 245920., 248800., 251680., 254560.,
      235940., 238840., 241740., 244640., 249160., 252080., 255000., 257920.,
      180448., 182784., 185120., 187456., 191024., 193376., 195728., 198080.,
      129044., 130808., 132572., 134336., 136976., 138752., 140528., 142304.,
      88971.,  90294.,  91617.,  92940.,  94884.,  96216.,  97548.,  98880.,
      112416., 114192., 115968., 117744., 120300., 122088., 123876., 125664.,
      132675., 134910., 137145., 139380., 142530., 144780., 147030., 149280.,
      134385., 136650., 138915., 141180., 144360., 146640., 148920., 151200.,
      100752., 102576., 104400., 106224., 108732., 110568., 112404., 114240.,
      70449.,  71826.,  73203.,  74580.,  76434.,  77820.,  79206.,  80592.,
      241791., 243438., 245085., 246732., 249720., 251376., 253032., 254688.,
      315408., 317616., 319824., 322032., 325980., 328200., 330420., 332640.,
      385455., 388230., 391005., 393780., 398670., 401460., 404250., 407040.,
      389565., 392370., 395175., 397980., 402900., 405720., 408540., 411360.,
      304128., 306384., 308640., 310896., 314796., 317064., 319332., 321600.,
      222405., 224106., 225807., 227508., 230406., 232116., 233826., 235536.,
      290828., 293096., 295364., 297632., 301448., 303728., 306008., 308288.,
      377760., 380800., 383840., 386880., 391920., 394976., 398032., 401088.,
      459580., 463400., 467220., 471040., 477280., 481120., 484960., 488800.,
      464260., 468120., 471980., 475840., 482120., 486000., 489880., 493760.,
      360672., 363776., 366880., 369984., 374960., 378080., 381200., 384320.,
      262388., 264728., 267068., 269408., 273104., 275456., 277808., 280160.,
      321685., 324610., 327535., 330460., 335020., 337960., 340900., 343840.,
      415520., 419440., 423360., 427280., 433300., 437240., 441180., 445120.,
      502525., 507450., 512375., 517300., 524750., 529700., 534650., 539600.,
      507375., 512350., 517325., 522300., 529800., 534800., 539800., 544800.,
      391600., 395600., 399600., 403600., 409540., 413560., 417580., 421600.,
      282895., 285910., 288925., 291940., 296350., 299380., 302410., 305440.,
      340585., 343690., 346795., 349900., 354640., 357760., 360880., 364000.,
      439760., 443920., 448080., 452240., 458500., 462680., 466860., 471040.,
      531625., 536850., 542075., 547300., 555050., 560300., 565550., 570800.,
      536475., 541750., 547025., 552300., 560100., 565400., 570700., 576000.,
      413920., 418160., 422400., 426640., 432820., 437080., 441340., 445600.,
      298915., 302110., 305305., 308500., 313090., 316300., 319510., 322720.,
      359485., 362770., 366055., 369340., 374260., 377560., 380860., 384160.,
      464000., 468400., 472800., 477200., 483700., 488120., 492540., 496960.,
      560725., 566250., 571775., 577300., 585350., 590900., 596450., 602000.,
      565575., 571150., 576725., 582300., 590400., 596000., 601600., 607200.,
      436240., 440720., 445200., 449680., 456100., 460600., 465100., 469600.,
      314935., 318310., 321685., 325060., 329830., 333220., 336610., 340000.,
      236828., 239528., 242228., 244928., 248696., 251408., 254120., 256832.,
      302816., 306432., 310048., 313664., 318640., 322272., 325904., 329536.,
      362220., 366760., 371300., 375840., 382000., 386560., 391120., 395680.,
      365300., 369880., 374460., 379040., 385240., 389840., 394440., 399040.,
      278560., 282240., 285920., 289600., 294512., 298208., 301904., 305600.,
      198596., 201368., 204140., 206912., 210560., 213344., 216128., 218912.,
      138111., 140190., 142269., 144348., 147048., 149136., 151224., 153312.,
      173904., 176688., 179472., 182256., 185820., 188616., 191412., 194208.,
      204495., 207990., 211485., 214980., 219390., 222900., 226410., 229920.,
      206205., 209730., 213255., 216780., 221220., 224760., 228300., 231840.,
      154176., 157008., 159840., 162672., 166188., 169032., 171876., 174720.,
      107493., 109626., 111759., 113892., 116502., 118644., 120786., 122928.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      298825., 301650., 304475., 307300., 312650., 315500., 318350., 321200.,
      303675., 306550., 309425., 312300., 317700., 320600., 323500., 326400.,
      327925., 331050., 334175., 337300., 342950., 346100., 349250., 352400.,
      332775., 335950., 339125., 342300., 348000., 351200., 354400., 357600.,
      357025., 360450., 363875., 367300., 373250., 376700., 380150., 383600.,
      361875., 365350., 368825., 372300., 378300., 381800., 385300., 388800.,
      502525., 507450., 512375., 517300., 524750., 529700., 534650., 539600.,
      507375., 512350., 517325., 522300., 529800., 534800., 539800., 544800.,
      531625., 536850., 542075., 547300., 555050., 560300., 565550., 570800.,
      536475., 541750., 547025., 552300., 560100., 565400., 570700., 576000.,
      560725., 566250., 571775., 577300., 585350., 590900., 596450., 602000.,
      565575., 571150., 576725., 582300., 590400., 596000., 601600., 607200.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      94855.,  97180.,  99535.,  101920., 124660., 127760., 130900., 134080.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      123940., 127120., 130340., 133600., 90835.,  93220.,  95635.,  98080.,
      65636.,  67520.,  69428.,  71360.,  85360.,  87872.,  90416.,  92992.,
      103900., 107040., 110220., 113440., 107020., 110240., 113500., 116800.,
      82736.,  85312.,  87920.,  90560.,  59828.,  61760.,  63716.,  65696.,
      40101.,  41532.,  42981.,  44448.,  51324.,  53232.,  55164.,  57120.,
      61395.,  63780.,  66195.,  68640.,  63135.,  65580.,  68055.,  70560.,
      47820.,  49776.,  51756.,  53760.,  33801.,  35268.,  36753.,  38256.,
      132405., 134844., 137301., 139776., 173628., 176880., 180156., 183456.,
      213315., 217380., 221475., 225600., 217455., 221580., 225735., 229920.,
      170508., 173808., 177132., 180480., 125241., 127716., 130209., 132720.,
      165332., 168608., 171908., 175232., 215856., 220224., 224624., 229056.,
      263980., 269440., 274940., 280480., 268700., 274240., 279820., 285440.,
      209648., 214080., 218544., 223040., 153188., 156512., 159860., 163232.,
      190255., 194380., 198535., 202720., 247060., 252560., 258100., 263680.,
      300425., 307300., 314225., 321200., 305325., 312300., 319325., 326400.,
      236740., 242320., 247940., 253600., 171835., 176020., 180235., 184480.,
      209335., 213820., 218335., 222880., 271540., 277520., 283540., 289600.,
      329825., 337300., 344825., 352400., 334725., 342300., 349925., 357600.,
      259300., 265360., 271460., 277600., 188035., 192580., 197155., 201760.,
      228415., 233260., 238135., 243040., 296020., 302480., 308980., 315520.,
      359225., 367300., 375425., 383600., 364125., 372300., 380525., 388800.,
      281860., 288400., 294980., 301600., 204235., 209140., 214075., 219040.,
      152324., 156224., 160148., 164096., 195568., 200768., 206000., 211264.,
      234940., 241440., 247980., 254560., 238060., 244640., 251260., 257920.,
      182192., 187456., 192752., 198080., 130388., 134336., 138308., 142304.,
      89997.,  92940.,  95901.,  98880.,  113820., 117744., 121692., 125664.,
      134475., 139380., 144315., 149280., 136215., 141180., 146175., 151200.,
      102252., 106224., 110220., 114240., 71601.,  74580.,  77577.,  80592.,
      242781., 246732., 250701., 254688., 316764., 322032., 327324., 332640.,
      387195., 393780., 400395., 407040., 391335., 397980., 404655., 411360.,
      305580., 310896., 316236., 321600., 223521., 227508., 231513., 235536.,
      292340., 297632., 302948., 308288., 379824., 386880., 393968., 401088.,
      462220., 471040., 479900., 488800., 466940., 475840., 484780., 493760.,
      362864., 369984., 377136., 384320., 264068., 269408., 274772., 280160.,
      323815., 330460., 337135., 343840., 418420., 427280., 436180., 445120.,
      506225., 517300., 528425., 539600., 511125., 522300., 533525., 544800.,
      394660., 403600., 412580., 421600., 285235., 291940., 298675., 305440.,
      342895., 349900., 356935., 364000., 442900., 452240., 461620., 471040.,
      535625., 547300., 559025., 570800., 540525., 552300., 564125., 576000.,
      417220., 426640., 436100., 445600., 301435., 308500., 315595., 322720.,
      361975., 369340., 376735., 384160., 467380., 477200., 487060., 496960.,
      565025., 577300., 589625., 602000., 569925., 582300., 594725., 607200.,
      439780., 449680., 459620., 469600., 317635., 325060., 332515., 340000.,
      239012., 244928., 250868., 256832., 305776., 313664., 321584., 329536.,
      365980., 375840., 385740., 395680., 369100., 379040., 389020., 399040.,
      281648., 289600., 297584., 305600., 200948., 206912., 212900., 218912.,
      139893., 144348., 148821., 153312., 176316., 182256., 188220., 194208.,
      207555., 214980., 222435., 229920., 209295., 216780., 224295., 231840.,
      156684., 162672., 168684., 174720., 109401., 113892., 118401., 122928.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      300425., 307300., 314225., 321200., 305325., 312300., 319325., 326400.,
      329825., 337300., 344825., 352400., 334725., 342300., 349925., 357600.,
      359225., 367300., 375425., 383600., 364125., 372300., 380525., 388800.,
      506225., 517300., 528425., 539600., 511125., 522300., 533525., 544800.,
      535625., 547300., 559025., 570800., 540525., 552300., 564125., 576000.,
      565025., 577300., 589625., 602000., 569925., 582300., 594725., 607200.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,   44058.,   45642.,   45912.,   47523.,   47802.,   49440.,
      49728.,   60612.,   60984.,   63072.,   63456.,   65580.,   65976.,
      68136.,   68544.,   78375.,   78870.,   81450.,   81960.,   84585.,
      85110.,   87780.,   88320.,   86595.,   87150.,   89790.,   90360.,
      93045.,   93630.,   96360.,   96960.,   70404.,   70872.,   72960.,
      73440.,   75564.,   76056.,   78216.,   78720.,   53553.,   53922.,
      55470.,   55848.,   57423.,   57810.,   59412.,   59808.,   76156.,
      76648.,   78664.,   79168.,   81220.,   81736.,   83824.,   84352.,
      103088.,  103776.,  106432.,  107136.,  109840.,  110560.,  113312.,
      114048.,  130580.,  131480.,  134760.,  135680.,  139020.,  139960.,
      143360.,  144320.,  139940.,  140920.,  144280.,  145280.,  148700.,
      149720.,  153200.,  154240.,  112048.,  112864.,  115520.,  116352.,
      119056.,  119904.,  122656.,  123520.,  83980.,   84616.,   86584.,
      87232.,   89236.,   89896.,   91936.,   92608.,   112595.,  113390.,
      115790.,  116600.,  119045.,  119870.,  122360.,  123200.,  150300.,
      151400.,  154560.,  155680.,  158900.,  160040.,  163320.,  164480.,
      187825.,  189250.,  193150.,  194600.,  198575.,  200050.,  204100.,
      205600.,  197525.,  199050.,  203050.,  204600.,  208675.,  210250.,
      214400.,  216000.,  156380.,  157640.,  160800.,  162080.,  165300.,
      166600.,  169880.,  171200.,  115895.,  116870.,  119210.,  120200.,
      122585.,  123590.,  126020.,  127040.,  150395.,  151550.,  154310.,
      155480.,  158285.,  159470.,  162320.,  163520.,  198780.,  200360.,
      204000.,  205600.,  209300.,  210920.,  214680.,  216320.,  246025.,
      248050.,  252550.,  254600.,  259175.,  261250.,  265900.,  268000.,
      255725.,  257850.,  262450.,  264600.,  269275.,  271450.,  276200.,
      278400.,  201020.,  202760.,  206400.,  208160.,  211860.,  213640.,
      217400.,  219200.,  147935.,  149270.,  151970.,  153320.,  156065.,
      157430.,  160220.,  161600.,  188195.,  189710.,  192830.,  194360.,
      197525.,  199070.,  202280.,  203840.,  247260.,  249320.,  253440.,
      255520.,  259700.,  261800.,  266040.,  268160.,  304225.,  306850.,
      311950.,  314600.,  319775.,  322450.,  327700.,  330400.,  313925.,
      316650.,  321850.,  324600.,  329875.,  332650.,  338000.,  340800.,
      245660.,  247880.,  252000.,  254240.,  258420.,  260680.,  264920.,
      267200.,  179975.,  181670.,  184730.,  186440.,  189545.,  191270.,
      194420.,  196160.,  129916.,  131272.,  133672.,  135040.,  137476.,
      138856.,  141328.,  142720.,  168880.,  170720.,  173888.,  175744.,
      178960.,  180832.,  184096.,  185984.,  205460.,  207800.,  211720.,
      214080.,  218060.,  220440.,  224480.,  226880.,  211620.,  214040.,
      218040.,  220480.,  224540.,  227000.,  231120.,  233600.,  163504.,
      165472.,  168640.,  170624.,  173840.,  175840.,  179104.,  181120.,
      118156.,  119656.,  122008.,  123520.,  125908.,  127432.,  129856.,
      131392.,  79077.,   80202.,   81930.,   83064.,   84819.,   85962.,
      87744.,   88896.,   101124.,  102648.,  104928.,  106464.,  108780.,
      110328.,  112680.,  114240.,  120855.,  122790.,  125610.,  127560.,
      130425.,  132390.,  135300.,  137280.,  124275.,  126270.,  129150.,
      131160.,  134085.,  136110.,  139080.,  141120.,  94020.,   95640.,
      97920.,   99552.,   101868.,  103512.,  105864.,  107520.,  66369.,
      67602.,   69294.,   70536.,   72255.,   73506.,   75252.,   76512.,
      263037.,  264810.,  267906.,  269688.,  272811.,  274602.,  277752.,
      279552.,  344868.,  347256.,  351360.,  353760.,  357900.,  360312.,
      364488.,  366912.,  423615.,  426630.,  431730.,  434760.,  439905.,
      442950.,  448140.,  451200.,  431835.,  434910.,  440070.,  443160.,
      448365.,  451470.,  456720.,  459840.,  338532.,  341016.,  345120.,
      347616.,  351756.,  354264.,  358440.,  360960.,  248601.,  250482.,
      253542.,  255432.,  258519.,  260418.,  263532.,  265440.,  328156.,
      330664.,  334696.,  337216.,  341284.,  343816.,  347920.,  350464.,
      428336.,  431712.,  437056.,  440448.,  445840.,  449248.,  454688.,
      458112.,  523700.,  527960.,  534600.,  538880.,  545580.,  549880.,
      556640.,  560960.,  533060.,  537400.,  544120.,  548480.,  555260.,
      559640.,  566480.,  570880.,  415792.,  419296.,  424640.,  428160.,
      433552.,  437088.,  442528.,  446080.,  303724.,  306376.,  310360.,
      313024.,  317044.,  319720.,  323776.,  326464.,  377195.,  380510.,
      385430.,  388760.,  393725.,  397070.,  402080.,  405440.,  489660.,
      494120.,  500640.,  505120.,  511700.,  516200.,  522840.,  527360.,
      595225.,  600850.,  608950.,  614600.,  622775.,  628450.,  636700.,
      642400.,  604925.,  610650.,  618850.,  624600.,  632875.,  638650.,
      647000.,  652800.,  468860.,  473480.,  480000.,  484640.,  491220.,
      495880.,  502520.,  507200.,  340175.,  343670.,  348530.,  352040.,
      356945.,  360470.,  365420.,  368960.,  414995.,  418670.,  423950.,
      427640.,  432965.,  436670.,  442040.,  445760.,  538140.,  543080.,
      550080.,  555040.,  562100.,  567080.,  574200.,  579200.,  653425.,
      659650.,  668350.,  674600.,  683375.,  689650.,  698500.,  704800.,
      663125.,  669450.,  678250.,  684600.,  693475.,  699850.,  708800.,
      715200.,  513500.,  518600.,  525600.,  530720.,  537780.,  542920.,
      550040.,  555200.,  372215.,  376070.,  381290.,  385160.,  390425.,
      394310.,  399620.,  403520.,  452795.,  456830.,  462470.,  466520.,
      472205.,  476270.,  482000.,  486080.,  586620.,  592040.,  599520.,
      604960.,  612500.,  617960.,  625560.,  631040.,  711625.,  718450.,
      727750.,  734600.,  743975.,  750850.,  760300.,  767200.,  721325.,
      728250.,  737650.,  744600.,  754075.,  761050.,  770600.,  777600.,
      558140.,  563720.,  571200.,  576800.,  584340.,  589960.,  597560.,
      603200.,  404255.,  408470.,  414050.,  418280.,  423905.,  428150.,
      433820.,  438080.,  301276.,  304648.,  309064.,  312448.,  316900.,
      320296.,  324784.,  328192.,  386608.,  391136.,  396992.,  401536.,
      407440.,  412000.,  417952.,  422528.,  464180.,  469880.,  477160.,
      482880.,  490220.,  495960.,  503360.,  509120.,  470340.,  476120.,
      483480.,  489280.,  496700.,  502520.,  510000.,  515840.,  359728.,
      364384.,  370240.,  374912.,  380816.,  385504.,  391456.,  396160.,
      257260.,  260776.,  265144.,  268672.,  273076.,  276616.,  281056.,
      284608.,  177357.,  179994.,  183234.,  185880.,  189147.,  191802.,
      195096.,  197760.,  224100.,  227640.,  231936.,  235488.,  239820.,
      243384.,  247752.,  251328.,  264495.,  268950.,  274290.,  278760.,
      284145.,  288630.,  294060.,  298560.,  267915.,  272430.,  277830.,
      282360.,  287805.,  292350.,  297840.,  302400.,  200868.,  204504.,
      208800.,  212448.,  216780.,  220440.,  224808.,  228480.,  140457.,
      143202.,  146406.,  149160.,  152391.,  155154.,  158412.,  161184.,
      482277.,  485562.,  490170.,  493464.,  498099.,  501402.,  506064.,
      509376.,  629124.,  633528.,  639648.,  644064.,  650220.,  654648.,
      660840.,  665280.,  768855.,  774390.,  782010.,  787560.,  795225.,
      800790.,  808500.,  814080.,  777075.,  782670.,  790350.,  795960.,
      803685.,  809310.,  817080.,  822720.,  606660.,  611160.,  617280.,
      621792.,  627948.,  632472.,  638664.,  643200.,  443649.,  447042.,
      451614.,  455016.,  459615.,  463026.,  467652.,  471072.,  580156.,
      584680.,  590728.,  595264.,  601348.,  605896.,  612016.,  616576.,
      753584.,  759648.,  767680.,  773760.,  781840.,  787936.,  796064.,
      802176.,  916820.,  924440.,  934440.,  942080.,  952140.,  959800.,
      969920.,  977600.,  926180.,  933880.,  943960.,  951680.,  961820.,
      969560.,  979760.,  987520.,  719536.,  725728.,  733760.,  739968.,
      748048.,  754272.,  762400.,  768640.,  523468.,  528136.,  534136.,
      538816.,  544852.,  549544.,  555616.,  560320.,  641795.,  647630.,
      655070.,  660920.,  668405.,  674270.,  681800.,  687680.,  829020.,
      836840.,  846720.,  854560.,  864500.,  872360.,  882360.,  890240.,
      1002625., 1012450., 1024750., 1034600., 1046975., 1056850., 1069300.,
      1079200., 1012325., 1022250., 1034650., 1044600., 1057075., 1067050.,
      1079600., 1089600., 781340.,  789320.,  799200.,  807200.,  817140.,
      825160.,  835160.,  843200.,  564455.,  570470.,  577850.,  583880.,
      591305.,  597350.,  604820.,  610880.,  679595.,  685790.,  693590.,
      699800.,  707645.,  713870.,  721760.,  728000.,  877500.,  885800.,
      896160.,  904480.,  914900.,  923240.,  933720.,  942080.,  1060825.,
      1071250., 1084150., 1094600., 1107575., 1118050., 1131100., 1141600.,
      1070525., 1081050., 1094050., 1104600., 1117675., 1128250., 1141400.,
      1152000., 825980.,  834440.,  844800.,  853280.,  863700.,  872200.,
      882680.,  891200.,  596495.,  602870.,  610610.,  617000.,  624785.,
      631190.,  639020.,  645440.,  717395.,  723950.,  732110.,  738680.,
      746885.,  753470.,  761720.,  768320.,  925980.,  934760.,  945600.,
      954400.,  965300.,  974120.,  985080.,  993920.,  1119025., 1130050.,
      1143550., 1154600., 1168175., 1179250., 1192900., 1204000., 1128725.,
      1139850., 1153450., 1164600., 1178275., 1189450., 1203200., 1214400.,
      870620.,  879560.,  890400.,  899360.,  910260.,  919240.,  930200.,
      939200.,  628535.,  635270.,  643370.,  650120.,  658265.,  665030.,
      673220.,  680000.,  472636.,  478024.,  484456.,  489856.,  496324.,
      501736.,  508240.,  513664.,  604336.,  611552.,  620096.,  627328.,
      635920.,  643168.,  651808.,  659072.,  722900.,  731960.,  742600.,
      751680.,  762380.,  771480.,  782240.,  791360.,  729060.,  738200.,
      748920.,  758080.,  768860.,  778040.,  788880.,  798080.,  555952.,
      563296.,  571840.,  579200.,  587792.,  595168.,  603808.,  611200.,
      396364.,  401896.,  408280.,  413824.,  420244.,  425800.,  432256.,
      437824.,  275637.,  279786.,  284538.,  288696.,  293475.,  297642.,
      302448.,  306624.,  347076.,  352632.,  358944.,  364512.,  370860.,
      376440.,  382824.,  388416.,  408135.,  415110.,  422970.,  429960.,
      437865.,  444870.,  452820.,  459840.,  411555.,  418590.,  426510.,
      433560.,  441525.,  448590.,  456600.,  463680.,  307716.,  313368.,
      319680.,  325344.,  331692.,  337368.,  343752.,  349440.,  214545.,
      218802.,  223518.,  227784.,  232527.,  236802.,  241572.,  245856.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825.,  189250.,  193150.,  194600.,  198575.,  200050.,  204100.,
      205600.,  197525.,  199050.,  203050.,  204600.,  208675.,  210250.,
      214400.,  216000.,  246025.,  248050.,  252550.,  254600.,  259175.,
      261250.,  265900.,  268000.,  255725.,  257850.,  262450.,  264600.,
      269275.,  271450.,  276200.,  278400.,  304225.,  306850.,  311950.,
      314600.,  319775.,  322450.,  327700.,  330400.,  313925.,  316650.,
      321850.,  324600.,  329875.,  332650.,  338000.,  340800.,  595225.,
      600850.,  608950.,  614600.,  622775.,  628450.,  636700.,  642400.,
      604925.,  610650.,  618850.,  624600.,  632875.,  638650.,  647000.,
      652800.,  653425.,  659650.,  668350.,  674600.,  683375.,  689650.,
      698500.,  704800.,  663125.,  669450.,  678250.,  684600.,  693475.,
      699850.,  708800.,  715200.,  711625.,  718450.,  727750.,  734600.,
      743975.,  750850.,  760300.,  767200.,  721325.,  728250.,  737650.,
      744600.,  754075.,  761050.,  770600.,  777600.,  1002625., 1012450.,
      1024750., 1034600., 1046975., 1056850., 1069300., 1079200., 1012325.,
      1022250., 1034650., 1044600., 1057075., 1067050., 1079600., 1089600.,
      1060825., 1071250., 1084150., 1094600., 1107575., 1118050., 1131100.,
      1141600., 1070525., 1081050., 1094050., 1104600., 1117675., 1128250.,
      1141400., 1152000., 1119025., 1130050., 1143550., 1154600., 1168175.,
      1179250., 1192900., 1204000., 1128725., 1139850., 1153450., 1164600.,
      1178275., 1189450., 1203200., 1214400.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,   87594.,   87855.,   88116.,   91014.,   91284.,   91554.,
      91824.,   94767.,   95046.,   95325.,   95604.,   98592.,   98880.,
      99168.,   99456.,   120852.,  121224.,  121596.,  121968.,  125760.,
      126144.,  126528.,  126912.,  130764.,  131160.,  131556.,  131952.,
      135864.,  136272.,  136680.,  137088.,  156255.,  156750.,  157245.,
      157740.,  162390.,  162900.,  163410.,  163920.,  168645.,  169170.,
      169695.,  170220.,  175020.,  175560.,  176100.,  176640.,  172635.,
      173190.,  173745.,  174300.,  179010.,  179580.,  180150.,  180720.,
      185505.,  186090.,  186675.,  187260.,  192120.,  192720.,  193320.,
      193920.,  140340.,  140808.,  141276.,  141744.,  145440.,  145920.,
      146400.,  146880.,  150636.,  151128.,  151620.,  152112.,  155928.,
      156432.,  156936.,  157440.,  106737.,  107106.,  107475.,  107844.,
      110562.,  110940.,  111318.,  111696.,  114459.,  114846.,  115233.,
      115620.,  118428.,  118824.,  119220.,  119616.,  151820.,  152312.,
      152804.,  153296.,  156824.,  157328.,  157832.,  158336.,  161924.,
      162440.,  162956.,  163472.,  167120.,  167648.,  168176.,  168704.,
      205488.,  206176.,  206864.,  207552.,  212160.,  212864.,  213568.,
      214272.,  218960.,  219680.,  220400.,  221120.,  225888.,  226624.,
      227360.,  228096.,  260260.,  261160.,  262060.,  262960.,  268600.,
      269520.,  270440.,  271360.,  277100.,  278040.,  278980.,  279920.,
      285760.,  286720.,  287680.,  288640.,  278900.,  279880.,  280860.,
      281840.,  287560.,  288560.,  289560.,  290560.,  296380.,  297400.,
      298420.,  299440.,  305360.,  306400.,  307440.,  308480.,  223280.,
      224096.,  224912.,  225728.,  230208.,  231040.,  231872.,  232704.,
      237264.,  238112.,  238960.,  239808.,  244448.,  245312.,  246176.,
      247040.,  167324.,  167960.,  168596.,  169232.,  172520.,  173168.,
      173816.,  174464.,  177812.,  178472.,  179132.,  179792.,  183200.,
      183872.,  184544.,  185216.,  224395.,  225190.,  225985.,  226780.,
      230770.,  231580.,  232390.,  233200.,  237265.,  238090.,  238915.,
      239740.,  243880.,  244720.,  245560.,  246400.,  299500.,  300600.,
      301700.,  302800.,  308000.,  309120.,  310240.,  311360.,  316660.,
      317800.,  318940.,  320080.,  325480.,  326640.,  327800.,  328960.,
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  311500.,  312760.,  314020.,
      315280.,  320320.,  321600.,  322880.,  324160.,  329300.,  330600.,
      331900.,  333200.,  338440.,  339760.,  341080.,  342400.,  230815.,
      231790.,  232765.,  233740.,  237430.,  238420.,  239410.,  240400.,
      244165.,  245170.,  246175.,  247180.,  251020.,  252040.,  253060.,
      254080.,  299635.,  300790.,  301945.,  303100.,  307450.,  308620.,
      309790.,  310960.,  315385.,  316570.,  317755.,  318940.,  323440.,
      324640.,  325840.,  327040.,  395980.,  397560.,  399140.,  400720.,
      406400.,  408000.,  409600.,  411200.,  416980.,  418600.,  420220.,
      421840.,  427720.,  429360.,  431000.,  432640.,  490025.,  492050.,
      494075.,  496100.,  503050.,  505100.,  507150.,  509200.,  516275.,
      518350.,  520425.,  522500.,  529700.,  531800.,  533900.,  536000.,
      509325.,  511450.,  513575.,  515700.,  522750.,  524900.,  527050.,
      529200.,  536375.,  538550.,  540725.,  542900.,  550200.,  552400.,
      554600.,  556800.,  400300.,  402040.,  403780.,  405520.,  411040.,
      412800.,  414560.,  416320.,  421940.,  423720.,  425500.,  427280.,
      433000.,  434800.,  436600.,  438400.,  294535.,  295870.,  297205.,
      298540.,  302590.,  303940.,  305290.,  306640.,  310765.,  312130.,
      313495.,  314860.,  319060.,  320440.,  321820.,  323200.,  374875.,
      376390.,  377905.,  379420.,  384130.,  385660.,  387190.,  388720.,
      393505.,  395050.,  396595.,  398140.,  403000.,  404560.,  406120.,
      407680.,  492460.,  494520.,  496580.,  498640.,  504800.,  506880.,
      508960.,  511040.,  517300.,  519400.,  521500.,  523600.,  529960.,
      532080.,  534200.,  536320.,  605825.,  608450.,  611075.,  613700.,
      621250.,  623900.,  626550.,  629200.,  636875.,  639550.,  642225.,
      644900.,  652700.,  655400.,  658100.,  660800.,  625125.,  627850.,
      630575.,  633300.,  640950.,  643700.,  646450.,  649200.,  656975.,
      659750.,  662525.,  665300.,  673200.,  676000.,  678800.,  681600.,
      489100.,  491320.,  493540.,  495760.,  501760.,  504000.,  506240.,
      508480.,  514580.,  516840.,  519100.,  521360.,  527560.,  529840.,
      532120.,  534400.,  358255.,  359950.,  361645.,  363340.,  367750.,
      369460.,  371170.,  372880.,  377365.,  379090.,  380815.,  382540.,
      387100.,  388840.,  390580.,  392320.,  258476.,  259832.,  261188.,
      262544.,  265976.,  267344.,  268712.,  270080.,  273572.,  274952.,
      276332.,  277712.,  281264.,  282656.,  284048.,  285440.,  335920.,
      337760.,  339600.,  341440.,  345920.,  347776.,  349632.,  351488.,
      356048.,  357920.,  359792.,  361664.,  366304.,  368192.,  370080.,
      371968.,  408580.,  410920.,  413260.,  415600.,  421080.,  423440.,
      425800.,  428160.,  433740.,  436120.,  438500.,  440880.,  446560.,
      448960.,  451360.,  453760.,  420820.,  423240.,  425660.,  428080.,
      433640.,  436080.,  438520.,  440960.,  446620.,  449080.,  451540.,
      454000.,  459760.,  462240.,  464720.,  467200.,  325040.,  327008.,
      328976.,  330944.,  335296.,  337280.,  339264.,  341248.,  345680.,
      347680.,  349680.,  351680.,  356192.,  358208.,  360224.,  362240.,
      234812.,  236312.,  237812.,  239312.,  242504.,  244016.,  245528.,
      247040.,  250292.,  251816.,  253340.,  254864.,  258176.,  259712.,
      261248.,  262784.,  157029.,  158154.,  159279.,  160404.,  162726.,
      163860.,  164994.,  166128.,  168495.,  169638.,  170781.,  171924.,
      174336.,  175488.,  176640.,  177792.,  200724.,  202248.,  203772.,
      205296.,  208320.,  209856.,  211392.,  212928.,  216012.,  217560.,
      219108.,  220656.,  223800.,  225360.,  226920.,  228480.,  239775.,
      241710.,  243645.,  245580.,  249270.,  251220.,  253170.,  255120.,
      258885.,  260850.,  262815.,  264780.,  268620.,  270600.,  272580.,
      274560.,  246555.,  248550.,  250545.,  252540.,  256290.,  258300.,
      260310.,  262320.,  266145.,  268170.,  270195.,  272220.,  276120.,
      278160.,  280200.,  282240.,  186420.,  188040.,  189660.,  191280.,
      194208.,  195840.,  197472.,  199104.,  202092.,  203736.,  205380.,
      207024.,  210072.,  211728.,  213384.,  215040.,  131505.,  132738.,
      133971.,  135204.,  137346.,  138588.,  139830.,  141072.,  143259.,
      144510.,  145761.,  147012.,  149244.,  150504.,  151764.,  153024.,
      524301.,  526074.,  527847.,  529620.,  534030.,  535812.,  537594.,
      539376.,  543831.,  545622.,  547413.,  549204.,  553704.,  555504.,
      557304.,  559104.,  687348.,  689736.,  692124.,  694512.,  700320.,
      702720.,  705120.,  707520.,  713388.,  715800.,  718212.,  720624.,
      726552.,  728976.,  731400.,  733824.,  844215.,  847230.,  850245.,
      853260.,  860430.,  863460.,  866490.,  869520.,  876765.,  879810.,
      882855.,  885900.,  893220.,  896280.,  899340.,  902400.,  860595.,
      863670.,  866745.,  869820.,  877050.,  880140.,  883230.,  886320.,
      893625.,  896730.,  899835.,  902940.,  910320.,  913440.,  916560.,
      919680.,  674580.,  677064.,  679548.,  682032.,  687744.,  690240.,
      692736.,  695232.,  701004.,  703512.,  706020.,  708528.,  714360.,
      716880.,  719400.,  721920.,  495321.,  497202.,  499083.,  500964.,
      505194.,  507084.,  508974.,  510864.,  515139.,  517038.,  518937.,
      520836.,  525156.,  527064.,  528972.,  530880.,  653804.,  656312.,
      658820.,  661328.,  666872.,  669392.,  671912.,  674432.,  680036.,
      682568.,  685100.,  687632.,  693296.,  695840.,  698384.,  700928.,
      853296.,  856672.,  860048.,  863424.,  870720.,  874112.,  877504.,
      880896.,  888272.,  891680.,  895088.,  898496.,  905952.,  909376.,
      912800.,  916224.,  1043140., 1047400., 1051660., 1055920., 1064920.,
      1069200., 1073480., 1077760., 1086860., 1091160., 1095460., 1099760.,
      1108960., 1113280., 1117600., 1121920., 1061780., 1066120., 1070460.,
      1074800., 1083880., 1088240., 1092600., 1096960., 1106140., 1110520.,
      1114900., 1119280., 1128560., 1132960., 1137360., 1141760., 828080.,
      831584.,  835088.,  838592.,  845760.,  849280.,  852800.,  856320.,
      863568.,  867104.,  870640.,  874176.,  881504.,  885056.,  888608.,
      892160.,  604796.,  607448.,  610100.,  612752.,  618056.,  620720.,
      623384.,  626048.,  631412.,  634088.,  636764.,  639440.,  644864.,
      647552.,  650240.,  652928.,  751075.,  754390.,  757705.,  761020.,
      767530.,  770860.,  774190.,  777520.,  784105.,  787450.,  790795.,
      794140.,  800800.,  804160.,  807520.,  810880.,  974860.,  979320.,
      983780.,  988240.,  996800.,  1001280., 1005760., 1010240., 1018900.,
      1023400., 1027900., 1032400., 1041160., 1045680., 1050200., 1054720.,
      1184825., 1190450., 1196075., 1201700., 1212250., 1217900., 1223550.,
      1229200., 1239875., 1245550., 1251225., 1256900., 1267700., 1273400.,
      1279100., 1284800., 1204125., 1209850., 1215575., 1221300., 1231950.,
      1237700., 1243450., 1249200., 1259975., 1265750., 1271525., 1277300.,
      1288200., 1294000., 1299800., 1305600., 933100.,  937720.,  942340.,
      946960.,  955360.,  960000.,  964640.,  969280.,  977780.,  982440.,
      987100.,  991760.,  1000360., 1005040., 1009720., 1014400., 676855.,
      680350.,  683845.,  687340.,  693550.,  697060.,  700570.,  704080.,
      710365.,  713890.,  717415.,  720940.,  727300.,  730840.,  734380.,
      737920.,  826315.,  829990.,  833665.,  837340.,  844210.,  847900.,
      851590.,  855280.,  862225.,  865930.,  869635.,  873340.,  880360.,
      884080.,  887800.,  891520.,  1071340., 1076280., 1081220., 1086160.,
      1095200., 1100160., 1105120., 1110080., 1119220., 1124200., 1129180.,
      1134160., 1143400., 1148400., 1153400., 1158400., 1300625., 1306850.,
      1313075., 1319300., 1330450., 1336700., 1342950., 1349200., 1360475.,
      1366750., 1373025., 1379300., 1390700., 1397000., 1403300., 1409600.,
      1319925., 1326250., 1332575., 1338900., 1350150., 1356500., 1362850.,
      1369200., 1380575., 1386950., 1393325., 1399700., 1411200., 1417600.,
      1424000., 1430400., 1021900., 1027000., 1032100., 1037200., 1046080.,
      1051200., 1056320., 1061440., 1070420., 1075560., 1080700., 1085840.,
      1094920., 1100080., 1105240., 1110400., 740575.,  744430.,  748285.,
      752140.,  758710.,  762580.,  766450.,  770320.,  776965.,  780850.,
      784735.,  788620.,  795340.,  799240.,  803140.,  807040.,  901555.,
      905590.,  909625.,  913660.,  920890.,  924940.,  928990.,  933040.,
      940345.,  944410.,  948475.,  952540.,  959920.,  964000.,  968080.,
      972160.,  1167820., 1173240., 1178660., 1184080., 1193600., 1199040.,
      1204480., 1209920., 1219540., 1225000., 1230460., 1235920., 1245640.,
      1251120., 1256600., 1262080., 1416425., 1423250., 1430075., 1436900.,
      1448650., 1455500., 1462350., 1469200., 1481075., 1487950., 1494825.,
      1501700., 1513700., 1520600., 1527500., 1534400., 1435725., 1442650.,
      1449575., 1456500., 1468350., 1475300., 1482250., 1489200., 1501175.,
      1508150., 1515125., 1522100., 1534200., 1541200., 1548200., 1555200.,
      1110700., 1116280., 1121860., 1127440., 1136800., 1142400., 1148000.,
      1153600., 1163060., 1168680., 1174300., 1179920., 1189480., 1195120.,
      1200760., 1206400., 804295.,  808510.,  812725.,  816940.,  823870.,
      828100.,  832330.,  836560.,  843565.,  847810.,  852055.,  856300.,
      863380.,  867640.,  871900.,  876160.,  599180.,  602552.,  605924.,
      609296.,  614744.,  618128.,  621512.,  624896.,  630404.,  633800.,
      637196.,  640592.,  646160.,  649568.,  652976.,  656384.,  768688.,
      773216.,  777744.,  782272.,  789440.,  793984.,  798528.,  803072.,
      810320.,  814880.,  819440.,  824000.,  831328.,  835904.,  840480.,
      845056.,  922660.,  928360.,  934060.,  939760.,  948600.,  954320.,
      960040.,  965760.,  974700.,  980440.,  986180.,  991920.,  1000960.,
      1006720., 1012480., 1018240., 934900.,  940680.,  946460.,  952240.,
      961160.,  966960.,  972760.,  978560.,  987580.,  993400.,  999220.,
      1005040., 1014160., 1020000., 1025840., 1031680., 714800.,  719456.,
      724112.,  728768.,  735808.,  740480.,  745152.,  749824.,  756944.,
      761632.,  766320.,  771008.,  778208.,  782912.,  787616.,  792320.,
      511004.,  514520.,  518036.,  521552.,  526760.,  530288.,  533816.,
      537344.,  542612.,  546152.,  549692.,  553232.,  558560.,  562112.,
      565664.,  569216.,  352077.,  354714.,  357351.,  359988.,  363822.,
      366468.,  369114.,  371760.,  375639.,  378294.,  380949.,  383604.,
      387528.,  390192.,  392856.,  395520.,  444660.,  448200.,  451740.,
      455280.,  460320.,  463872.,  467424.,  470976.,  476076.,  479640.,
      483204.,  486768.,  491928.,  495504.,  499080.,  502656.,  524535.,
      528990.,  533445.,  537900.,  544110.,  548580.,  553050.,  557520.,
      563805.,  568290.,  572775.,  577260.,  583620.,  588120.,  592620.,
      597120.,  531315.,  535830.,  540345.,  544860.,  551130.,  555660.,
      560190.,  564720.,  571065.,  575610.,  580155.,  584700.,  591120.,
      595680.,  600240.,  604800.,  398100.,  401736.,  405372.,  409008.,
      413952.,  417600.,  421248.,  424896.,  429900.,  433560.,  437220.,
      440880.,  445944.,  449616.,  453288.,  456960.,  278169.,  280914.,
      283659.,  286404.,  290058.,  292812.,  295566.,  298320.,  302019.,
      304782.,  307545.,  310308.,  314052.,  316824.,  319596.,  322368.,
      961269.,  964554.,  967839.,  971124.,  977046.,  980340.,  983634.,
      986928.,  992895.,  996198.,  999501.,  1002804., 1008816., 1012128.,
      1015440., 1018752., 1253844., 1258248., 1262652., 1267056., 1274880.,
      1279296., 1283712., 1288128., 1296012., 1300440., 1304868., 1309296.,
      1317240., 1321680., 1326120., 1330560., 1532175., 1537710., 1543245.,
      1548780., 1558470., 1564020., 1569570., 1575120., 1584885., 1590450.,
      1596015., 1601580., 1611420., 1617000., 1622580., 1628160., 1548555.,
      1554150., 1559745., 1565340., 1575090., 1580700., 1586310., 1591920.,
      1601745., 1607370., 1612995., 1618620., 1628520., 1634160., 1639800.,
      1645440., 1208820., 1213320., 1217820., 1222320., 1230048., 1234560.,
      1239072., 1243584., 1251372., 1255896., 1260420., 1264944., 1272792.,
      1277328., 1281864., 1286400., 883905.,  887298.,  890691.,  894084.,
      899826.,  903228.,  906630.,  910032.,  915819.,  919230.,  922641.,
      926052.,  931884.,  935304.,  938724.,  942144.,  1155788., 1160312.,
      1164836., 1169360., 1176920., 1181456., 1185992., 1190528., 1198148.,
      1202696., 1207244., 1211792., 1219472., 1224032., 1228592., 1233152.,
      1501104., 1507168., 1513232., 1519296., 1529280., 1535360., 1541440.,
      1547520., 1557584., 1563680., 1569776., 1575872., 1586016., 1592128.,
      1598240., 1604352., 1826020., 1833640., 1841260., 1848880., 1861240.,
      1868880., 1876520., 1884160., 1896620., 1904280., 1911940., 1919600.,
      1932160., 1939840., 1947520., 1955200., 1844660., 1852360., 1860060.,
      1867760., 1880200., 1887920., 1895640., 1903360., 1915900., 1923640.,
      1931380., 1939120., 1951760., 1959520., 1967280., 1975040., 1432880.,
      1439072., 1445264., 1451456., 1461312., 1467520., 1473728., 1479936.,
      1489872., 1496096., 1502320., 1508544., 1518560., 1524800., 1531040.,
      1537280., 1042268., 1046936., 1051604., 1056272., 1063592., 1068272.,
      1072952., 1077632., 1085012., 1089704., 1094396., 1099088., 1106528.,
      1111232., 1115936., 1120640., 1277755., 1283590., 1289425., 1295260.,
      1304290., 1310140., 1315990., 1321840., 1330945., 1336810., 1342675.,
      1348540., 1357720., 1363600., 1369480., 1375360., 1650220., 1658040.,
      1665860., 1673680., 1685600., 1693440., 1701280., 1709120., 1721140.,
      1729000., 1736860., 1744720., 1756840., 1764720., 1772600., 1780480.,
      1995425., 2005250., 2015075., 2024900., 2039650., 2049500., 2059350.,
      2069200., 2084075., 2093950., 2103825., 2113700., 2128700., 2138600.,
      2148500., 2158400., 2014725., 2024650., 2034575., 2044500., 2059350.,
      2069300., 2079250., 2089200., 2104175., 2114150., 2124125., 2134100.,
      2149200., 2159200., 2169200., 2179200., 1554700., 1562680., 1570660.,
      1578640., 1590400., 1598400., 1606400., 1614400., 1626260., 1634280.,
      1642300., 1650320., 1662280., 1670320., 1678360., 1686400., 1122895.,
      1128910., 1134925., 1140940., 1149670., 1155700., 1161730., 1167760.,
      1176565., 1182610., 1188655., 1194700., 1203580., 1209640., 1215700.,
      1221760., 1352995., 1359190., 1365385., 1371580., 1380970., 1387180.,
      1393390., 1399600., 1409065., 1415290., 1421515., 1427740., 1437280.,
      1443520., 1449760., 1456000., 1746700., 1755000., 1763300., 1771600.,
      1784000., 1792320., 1800640., 1808960., 1821460., 1829800., 1838140.,
      1846480., 1859080., 1867440., 1875800., 1884160., 2111225., 2121650.,
      2132075., 2142500., 2157850., 2168300., 2178750., 2189200., 2204675.,
      2215150., 2225625., 2236100., 2251700., 2262200., 2272700., 2283200.,
      2130525., 2141050., 2151575., 2162100., 2177550., 2188100., 2198650.,
      2209200., 2224775., 2235350., 2245925., 2256500., 2272200., 2282800.,
      2293400., 2304000., 1643500., 1651960., 1660420., 1668880., 1681120.,
      1689600., 1698080., 1706560., 1718900., 1727400., 1735900., 1744400.,
      1756840., 1765360., 1773880., 1782400., 1186615., 1192990., 1199365.,
      1205740., 1214830., 1221220., 1227610., 1234000., 1243165., 1249570.,
      1255975., 1262380., 1271620., 1278040., 1284460., 1290880., 1428235.,
      1434790., 1441345., 1447900., 1457650., 1464220., 1470790., 1477360.,
      1487185., 1493770., 1500355., 1506940., 1516840., 1523440., 1530040.,
      1536640., 1843180., 1851960., 1860740., 1869520., 1882400., 1891200.,
      1900000., 1908800., 1921780., 1930600., 1939420., 1948240., 1961320.,
      1970160., 1979000., 1987840., 2227025., 2238050., 2249075., 2260100.,
      2276050., 2287100., 2298150., 2309200., 2325275., 2336350., 2347425.,
      2358500., 2374700., 2385800., 2396900., 2408000., 2246325., 2257450.,
      2268575., 2279700., 2295750., 2306900., 2318050., 2329200., 2345375.,
      2356550., 2367725., 2378900., 2395200., 2406400., 2417600., 2428800.,
      1732300., 1741240., 1750180., 1759120., 1771840., 1780800., 1789760.,
      1798720., 1811540., 1820520., 1829500., 1838480., 1851400., 1860400.,
      1869400., 1878400., 1250335., 1257070., 1263805., 1270540., 1279990.,
      1286740., 1293490., 1300240., 1309765., 1316530., 1323295., 1330060.,
      1339660., 1346440., 1353220., 1360000., 939884.,  945272.,  950660.,
      956048.,  963512.,  968912.,  974312.,  979712.,  987236.,  992648.,
      998060.,  1003472., 1011056., 1016480., 1021904., 1027328., 1201456.,
      1208672., 1215888., 1223104., 1232960., 1240192., 1247424., 1254656.,
      1264592., 1271840., 1279088., 1286336., 1296352., 1303616., 1310880.,
      1318144., 1436740., 1445800., 1454860., 1463920., 1476120., 1485200.,
      1494280., 1503360., 1515660., 1524760., 1533860., 1542960., 1555360.,
      1564480., 1573600., 1582720., 1448980., 1458120., 1467260., 1476400.,
      1488680., 1497840., 1507000., 1516160., 1528540., 1537720., 1546900.,
      1556080., 1568560., 1577760., 1586960., 1596160., 1104560., 1111904.,
      1119248., 1126592., 1136320., 1143680., 1151040., 1158400., 1168208.,
      1175584., 1182960., 1190336., 1200224., 1207616., 1215008., 1222400.,
      787196.,  792728.,  798260.,  803792.,  811016.,  816560.,  822104.,
      827648.,  834932.,  840488.,  846044.,  851600.,  858944.,  864512.,
      870080.,  875648.,  547125.,  551274.,  555423.,  559572.,  564918.,
      569076.,  573234.,  577392.,  582783.,  586950.,  591117.,  595284.,
      600720.,  604896.,  609072.,  613248.,  688596.,  694152.,  699708.,
      705264.,  712320.,  717888.,  723456.,  729024.,  736140.,  741720.,
      747300.,  752880.,  760056.,  765648.,  771240.,  776832.,  809295.,
      816270.,  823245.,  830220.,  838950.,  845940.,  852930.,  859920.,
      868725.,  875730.,  882735.,  889740.,  898620.,  905640.,  912660.,
      919680.,  816075.,  823110.,  830145.,  837180.,  845970.,  853020.,
      860070.,  867120.,  875985.,  883050.,  890115.,  897180.,  906120.,
      913200.,  920280.,  927360.,  609780.,  615432.,  621084.,  626736.,
      633696.,  639360.,  645024.,  650688.,  657708.,  663384.,  669060.,
      674736.,  681816.,  687504.,  693192.,  698880.,  424833.,  429090.,
      433347.,  437604.,  442770.,  447036.,  451302.,  455568.,  460779.,
      465054.,  469329.,  473604.,  478860.,  483144.,  487428.,  491712.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  490025.,  492050.,  494075.,
      496100.,  503050.,  505100.,  507150.,  509200.,  516275.,  518350.,
      520425.,  522500.,  529700.,  531800.,  533900.,  536000.,  509325.,
      511450.,  513575.,  515700.,  522750.,  524900.,  527050.,  529200.,
      536375.,  538550.,  540725.,  542900.,  550200.,  552400.,  554600.,
      556800.,  605825.,  608450.,  611075.,  613700.,  621250.,  623900.,
      626550.,  629200.,  636875.,  639550.,  642225.,  644900.,  652700.,
      655400.,  658100.,  660800.,  625125.,  627850.,  630575.,  633300.,
      640950.,  643700.,  646450.,  649200.,  656975.,  659750.,  662525.,
      665300.,  673200.,  676000.,  678800.,  681600.,  1184825., 1190450.,
      1196075., 1201700., 1212250., 1217900., 1223550., 1229200., 1239875.,
      1245550., 1251225., 1256900., 1267700., 1273400., 1279100., 1284800.,
      1204125., 1209850., 1215575., 1221300., 1231950., 1237700., 1243450.,
      1249200., 1259975., 1265750., 1271525., 1277300., 1288200., 1294000.,
      1299800., 1305600., 1300625., 1306850., 1313075., 1319300., 1330450.,
      1336700., 1342950., 1349200., 1360475., 1366750., 1373025., 1379300.,
      1390700., 1397000., 1403300., 1409600., 1319925., 1326250., 1332575.,
      1338900., 1350150., 1356500., 1362850., 1369200., 1380575., 1386950.,
      1393325., 1399700., 1411200., 1417600., 1424000., 1430400., 1416425.,
      1423250., 1430075., 1436900., 1448650., 1455500., 1462350., 1469200.,
      1481075., 1487950., 1494825., 1501700., 1513700., 1520600., 1527500.,
      1534400., 1435725., 1442650., 1449575., 1456500., 1468350., 1475300.,
      1482250., 1489200., 1501175., 1508150., 1515125., 1522100., 1534200.,
      1541200., 1548200., 1555200., 1995425., 2005250., 2015075., 2024900.,
      2039650., 2049500., 2059350., 2069200., 2084075., 2093950., 2103825.,
      2113700., 2128700., 2138600., 2148500., 2158400., 2014725., 2024650.,
      2034575., 2044500., 2059350., 2069300., 2079250., 2089200., 2104175.,
      2114150., 2124125., 2134100., 2149200., 2159200., 2169200., 2179200.,
      2111225., 2121650., 2132075., 2142500., 2157850., 2168300., 2178750.,
      2189200., 2204675., 2215150., 2225625., 2236100., 2251700., 2262200.,
      2272700., 2283200., 2130525., 2141050., 2151575., 2162100., 2177550.,
      2188100., 2198650., 2209200., 2224775., 2235350., 2245925., 2256500.,
      2272200., 2282800., 2293400., 2304000., 2227025., 2238050., 2249075.,
      2260100., 2276050., 2287100., 2298150., 2309200., 2325275., 2336350.,
      2347425., 2358500., 2374700., 2385800., 2396900., 2408000., 2246325.,
      2257450., 2268575., 2279700., 2295750., 2306900., 2318050., 2329200.,
      2345375., 2356550., 2367725., 2378900., 2395200., 2406400., 2417600.,
      2428800.};
  const std::array<int, 4> in_shape = {{3, 7, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  7360.,  9660.,  11875., 12200., 12525., 9800.,  7180.,  5156.,
      6704.,  8160.,  8370.,  8580.,  6640.,  4808.,  3213.,  4120.,  4940.,
      5060.,  5180.,  3940.,  2799.,  10134., 13282., 16310., 16580., 16850.,
      13210., 9702.,  12710., 16592., 20290., 20600., 20910., 16320., 11930.,
      14710., 19110., 23250., 23575., 23900., 18550., 13480., 16180., 21000.,
      25525., 25850., 26175., 20300., 14740., 17650., 22890., 27800., 28125.,
      28450., 22050., 16000., 11918., 15328., 18450., 18660., 18870., 14480.,
      10394., 7182.,  9118.,  10820., 10940., 11060., 8350.,  5886.,  18513.,
      24160., 29540., 29810., 30080., 23500., 17199., 22412., 29136., 35480.,
      35790., 36100., 28080., 20456., 25000., 32340., 39175., 39500., 39825.,
      30800., 22300., 26470., 34230., 41450., 41775., 42100., 32550., 23560.,
      27940., 36120., 43725., 44050., 44375., 34300., 24820., 18680., 23952.,
      28740., 28950., 29160., 22320., 15980., 11151., 14116., 16700., 16820.,
      16940., 12760., 8973.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7650.,  7975.,  9600.,  9925.,  10250., 11875., 12200., 12525.,
      23250., 23575., 23900., 25525., 25850., 26175., 27800., 28125., 28450.,
      39175., 39500., 39825., 41450., 41775., 42100., 43725., 44050., 44375.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,  4808.,  6010.,  6160.,  6535.,  6700.,  7060.,
      7240.,  5690.,  5840.,  4293.,  4410.,  5866.,  6016.,  7888.,  8096.,
      9930.,  10200., 10530., 10820., 11130., 11440., 8864.,  9120.,  6610.,
      6808.,  8600.,  8840.,  11430., 11760., 14225., 14650., 14850., 15300.,
      15475., 15950., 12210., 12600., 9020.,  9320.,  11435., 11780., 15070.,
      15540., 18600., 19200., 19225., 19850., 19850., 20500., 15570., 16100.,
      11435., 11840., 14270., 14720., 18710., 19320., 22975., 23750., 23600.,
      24400., 24225., 25050., 18930., 19600., 13850., 14360., 9910.,  10312.,
      12864., 13408., 15630., 16320., 16030., 16740., 16430., 17160., 12688.,
      13280., 9166.,  9616.,  6093.,  6426.,  7790.,  8240.,  9310.,  9880.,
      9535.,  10120., 9760.,  10360., 7394.,  7880.,  5229.,  5598.,  19746.,
      20268., 25862., 26564., 31735., 32620., 32260., 33160., 32785., 33700.,
      25682., 26420., 18846., 19404., 24682., 25420., 32192., 33184., 39330.,
      40580., 39930., 41200., 40530., 41820., 31600., 32640., 23074., 23860.,
      28445., 29420., 36910., 38220., 44850., 46500., 45475., 47150., 46100.,
      47800., 35730., 37100., 25925., 26960., 31280., 32360., 40550., 42000.,
      49225., 51050., 49850., 51700., 50475., 52350., 39090., 40600., 28340.,
      29480., 34115., 35300., 44190., 45780., 53600., 55600., 54225., 56250.,
      54850., 56900., 42450., 44100., 30755., 32000., 22846., 23836., 29328.,
      30656., 35230., 36900., 35630., 37320., 36030., 37740., 27584., 28960.,
      19750., 20788., 13590., 14364., 17198., 18236., 20335., 21640., 20560.,
      21880., 20785., 22120., 15626., 16700., 10962., 11772., 36063., 37026.,
      47030., 48320., 57460., 59080., 57985., 59620., 58510., 60160., 45674.,
      47000., 33399., 34398., 43498., 44824., 56496., 58272., 68730., 70960.,
      69330., 71580., 69930., 72200., 54336., 56160., 39538., 40912., 48290.,
      50000., 62390., 64680., 75475., 78350., 76100., 79000., 76725., 79650.,
      59250., 61600., 42830., 44600., 51125., 52940., 66030., 68460., 79850.,
      82900., 80475., 83550., 81100., 84200., 62610., 65100., 45245., 47120.,
      53960., 55880., 69670., 72240., 84225., 87450., 84850., 88100., 85475.,
      88750., 65970., 68600., 47660., 49640., 35782., 37360., 45792., 47904.,
      54830., 57480., 55230., 57900., 55630., 58320., 42480., 44640., 30334.,
      31960., 21087., 22302., 26606., 28232., 31360., 33400., 31585., 33640.,
      31810., 33880., 23858., 25520., 16695., 17946.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300., 15475., 15950., 18600., 19200., 19225.,
      19850., 19850., 20500., 22975., 23750., 23600., 24400., 24225., 25050.,
      44850., 46500., 45475., 47150., 46100., 47800., 49225., 51050., 49850.,
      51700., 50475., 52350., 53600., 55600., 54225., 56250., 54850., 56900.,
      75475., 78350., 76100., 79000., 76725., 79650., 79850., 82900., 80475.,
      83550., 81100., 84200., 84225., 87450., 84850., 88100., 85475., 88750.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,   6858.,   6939.,   7020.,   9274.,   9388.,   9502.,   9616.,
      11870.,  12020.,  12170.,  12320.,  12905.,  13070.,  13235.,  13400.,
      13940.,  14120.,  14300.,  14480.,  11230.,  11380.,  11530.,  11680.,
      8469.,   8586.,   8703.,   8820.,   11582.,  11732.,  11882.,  12032.,
      15568.,  15776.,  15984.,  16192.,  19590.,  19860.,  20130.,  20400.,
      20770.,  21060.,  21350.,  21640.,  21950.,  22260.,  22570.,  22880.,
      17472.,  17728.,  17984.,  18240.,  13022.,  13220.,  13418.,  13616.,
      16960.,  17200.,  17440.,  17680.,  22530.,  22860.,  23190.,  23520.,
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  24030.,  24420.,  24810.,  25200.,
      17740.,  18040.,  18340.,  18640.,  22525.,  22870.,  23215.,  23560.,
      29670.,  30140.,  30610.,  31080.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      30610.,  31140.,  31670.,  32200.,  22465.,  22870.,  23275.,  23680.,
      28090.,  28540.,  28990.,  29440.,  36810.,  37420.,  38030.,  38640.,
      45175.,  45950.,  46725.,  47500.,  46400.,  47200.,  48000.,  48800.,
      47625.,  48450.,  49275.,  50100.,  37190.,  37860.,  38530.,  39200.,
      27190.,  27700.,  28210.,  28720.,  19418.,  19820.,  20222.,  20624.,
      25184.,  25728.,  26272.,  26816.,  30570.,  31260.,  31950.,  32640.,
      31350.,  32060.,  32770.,  33480.,  32130.,  32860.,  33590.,  34320.,
      24784.,  25376.,  25968.,  26560.,  17882.,  18332.,  18782.,  19232.,
      11853.,  12186.,  12519.,  12852.,  15130.,  15580.,  16030.,  16480.,
      18050.,  18620.,  19190.,  19760.,  18485.,  19070.,  19655.,  20240.,
      18920.,  19520.,  20120.,  20720.,  14302.,  14788.,  15274.,  15760.,
      10089.,  10458.,  10827.,  11196.,  38970.,  39492.,  40014.,  40536.,
      51022.,  51724.,  52426.,  53128.,  62585.,  63470.,  64355.,  65240.,
      63620.,  64520.,  65420.,  66320.,  64655.,  65570.,  66485.,  67400.,
      50626.,  51364.,  52102.,  52840.,  37134.,  37692.,  38250.,  38808.,
      48626.,  49364.,  50102.,  50840.,  63392.,  64384.,  65376.,  66368.,
      77410.,  78660.,  79910.,  81160.,  78590.,  79860.,  81130.,  82400.,
      79770.,  81060.,  82350.,  83640.,  62160.,  63200.,  64240.,  65280.,
      45362.,  46148.,  46934.,  47720.,  55915.,  56890.,  57865.,  58840.,
      72510.,  73820.,  75130.,  76440.,  88050.,  89700.,  91350.,  93000.,
      89275.,  90950.,  92625.,  94300.,  90500.,  92200.,  93900.,  95600.,
      70090.,  71460.,  72830.,  74200.,  50815.,  51850.,  52885.,  53920.,
      61480.,  62560.,  63640.,  64720.,  79650.,  81100.,  82550.,  84000.,
      96625.,  98450.,  100275., 102100., 97850.,  99700.,  101550., 103400.,
      99075.,  100950., 102825., 104700., 76670.,  78180.,  79690.,  81200.,
      55540.,  56680.,  57820.,  58960.,  67045.,  68230.,  69415.,  70600.,
      86790.,  88380.,  89970.,  91560.,  105200., 107200., 109200., 111200.,
      106425., 108450., 110475., 112500., 107650., 109700., 111750., 113800.,
      83250.,  84900.,  86550.,  88200.,  60265.,  61510.,  62755.,  64000.,
      44702.,  45692.,  46682.,  47672.,  57328.,  58656.,  59984.,  61312.,
      68790.,  70460.,  72130.,  73800.,  69570.,  71260.,  72950.,  74640.,
      70350.,  72060.,  73770.,  75480.,  53792.,  55168.,  56544.,  57920.,
      38462.,  39500.,  40538.,  41576.,  26406.,  27180.,  27954.,  28728.,
      33358.,  34396.,  35434.,  36472.,  39365.,  40670.,  41975.,  43280.,
      39800.,  41120.,  42440.,  43760.,  40235.,  41570.,  42905.,  44240.,
      30178.,  31252.,  32326.,  33400.,  21114.,  21924.,  22734.,  23544.,
      71163.,  72126.,  73089.,  74052.,  92770.,  94060.,  95350.,  96640.,
      113300., 114920., 116540., 118160., 114335., 115970., 117605., 119240.,
      115370., 117020., 118670., 120320., 90022.,  91348.,  92674.,  94000.,
      65799.,  66798.,  67797.,  68796.,  85670.,  86996.,  88322.,  89648.,
      111216., 112992., 114768., 116544., 135230., 137460., 139690., 141920.,
      136410., 138660., 140910., 143160., 137590., 139860., 142130., 144400.,
      106848., 108672., 110496., 112320., 77702.,  79076.,  80450.,  81824.,
      94870.,  96580.,  98290.,  100000., 122490., 124780., 127070., 129360.,
      148075., 150950., 153825., 156700., 149300., 152200., 155100., 158000.,
      150525., 153450., 156375., 159300., 116150., 118500., 120850., 123200.,
      83890.,  85660.,  87430.,  89200.,  100435., 102250., 104065., 105880.,
      129630., 132060., 134490., 136920., 156650., 159700., 162750., 165800.,
      157875., 160950., 164025., 167100., 159100., 162200., 165300., 168400.,
      122730., 125220., 127710., 130200., 88615.,  90490.,  92365.,  94240.,
      106000., 107920., 109840., 111760., 136770., 139340., 141910., 144480.,
      165225., 168450., 171675., 174900., 166450., 169700., 172950., 176200.,
      167675., 170950., 174225., 177500., 129310., 131940., 134570., 137200.,
      93340.,  95320.,  97300.,  99280.,  69986.,  71564.,  73142.,  74720.,
      89472.,  91584.,  93696.,  95808.,  107010., 109660., 112310., 114960.,
      107790., 110460., 113130., 115800., 108570., 111260., 113950., 116640.,
      82800.,  84960.,  87120.,  89280.,  59042.,  60668.,  62294.,  63920.,
      40959.,  42174.,  43389.,  44604.,  51586.,  53212.,  54838.,  56464.,
      60680.,  62720.,  64760.,  66800.,  61115.,  63170.,  65225.,  67280.,
      61550.,  63620.,  65690.,  67760.,  46054.,  47716.,  49378.,  51040.,
      32139.,  33390.,  34641.,  35892.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      45175.,  45950.,  46725.,  47500.,  46400.,  47200.,  48000.,  48800.,
      47625.,  48450.,  49275.,  50100.,  88050.,  89700.,  91350.,  93000.,
      89275.,  90950.,  92625.,  94300.,  90500.,  92200.,  93900.,  95600.,
      96625.,  98450.,  100275., 102100., 97850.,  99700.,  101550., 103400.,
      99075.,  100950., 102825., 104700., 105200., 107200., 109200., 111200.,
      106425., 108450., 110475., 112500., 107650., 109700., 111750., 113800.,
      148075., 150950., 153825., 156700., 149300., 152200., 155100., 158000.,
      150525., 153450., 156375., 159300., 156650., 159700., 162750., 165800.,
      157875., 160950., 164025., 167100., 159100., 162200., 165300., 168400.,
      165225., 168450., 171675., 174900., 166450., 169700., 172950., 176200.,
      167675., 170950., 174225., 177500.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,   7020.,   8956.,   9616.,   11495.,  12320.,  12545.,  13400.,
      13595.,  14480.,  10972.,  11680.,  8289.,   8820.,   11348.,  12032.,
      15280.,  16192.,  19260.,  20400.,  20460.,  21640.,  21660.,  22880.,
      17264.,  18240.,  12884.,  13616.,  16795.,  17680.,  22340.,  23520.,
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  23940.,  25200.,
      17695.,  18640.,  22465.,  23560.,  29620.,  31080.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  30660.,  32200.,  22525.,  23680.,
      28135.,  29440.,  36900.,  38640.,  45325.,  47500.,  46575.,  48800.,
      47825.,  50100.,  37380.,  39200.,  27355.,  28720.,  19556.,  20624.,
      25392.,  26816.,  30860.,  32640.,  31660.,  33480.,  32460.,  34320.,
      25072.,  26560.,  18116.,  19232.,  12033.,  12852.,  15388.,  16480.,
      18395.,  19760.,  18845.,  20240.,  19295.,  20720.,  14620.,  15760.,
      10341.,  11196.,  39159.,  40536.,  51292.,  53128.,  62945.,  65240.,
      63995.,  66320.,  65045.,  67400.,  50956.,  52840.,  37395.,  38808.,
      48980.,  50840.,  63888.,  66368.,  78060.,  81160.,  79260.,  82400.,
      80460.,  83640.,  62736.,  65280.,  45812.,  47720.,  56485.,  58840.,
      73300.,  76440.,  89075.,  93000.,  90325.,  94300.,  91575.,  95600.,
      70980.,  74200.,  51505.,  53920.,  62155.,  64720.,  80580.,  84000.,
      97825.,  102100., 99075.,  103400., 100325., 104700., 77700.,  81200.,
      56335.,  58960.,  67825.,  70600.,  87860.,  91560.,  106575., 111200.,
      107825., 112500., 109075., 113800., 84420.,  88200.,  61165.,  64000.,
      45428.,  47672.,  58320.,  61312.,  70060.,  73800.,  70860.,  74640.,
      71660.,  75480.,  54864.,  57920.,  39284.,  41576.,  27027.,  28728.,
      34204.,  36472.,  40445.,  43280.,  40895.,  43760.,  41345.,  44240.,
      31084.,  33400.,  21807.,  23544.,  71793.,  74052.,  93628.,  96640.,
      114395., 118160., 115445., 119240., 116495., 120320., 90940.,  94000.,
      66501.,  68796.,  86612.,  89648.,  112496., 116544., 136860., 141920.,
      138060., 143160., 139260., 144400., 108208., 112320., 78740.,  81824.,
      96175.,  100000., 124260., 129360., 150325., 156700., 151575., 158000.,
      152825., 159300., 118020., 123200., 85315.,  89200.,  101845., 105880.,
      131540., 136920., 159075., 165800., 160325., 167100., 161575., 168400.,
      124740., 130200., 90145.,  94240.,  107515., 111760., 138820., 144480.,
      167825., 174900., 169075., 176200., 170325., 177500., 131460., 137200.,
      94975.,  99280.,  71300.,  74720.,  91248.,  95808.,  109260., 114960.,
      110060., 115800., 110860., 116640., 84656.,  89280.,  60452.,  63920.,
      42021.,  44604.,  53020.,  56464.,  62495.,  66800.,  62945.,  67280.,
      63395.,  67760.,  47548.,  51040.,  33273.,  35892.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  45325.,  47500.,  46575.,  48800.,
      47825.,  50100.,  89075.,  93000.,  90325.,  94300.,  91575.,  95600.,
      97825.,  102100., 99075.,  103400., 100325., 104700., 106575., 111200.,
      107825., 112500., 109075., 113800., 150325., 156700., 151575., 158000.,
      152825., 159300., 159075., 165800., 160325., 167100., 161575., 168400.,
      167825., 174900., 169075., 176200., 170325., 177500.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897.,  13050.,  13878.,  14040.,  17696.,  17912.,  19004.,  19232.,
      22705.,  22990.,  24340.,  24640.,  24775.,  25090.,  26470.,  26800.,
      26845.,  27190.,  28600.,  28960.,  21656.,  21944.,  23060.,  23360.,
      16353.,  16578.,  17406.,  17640.,  22408.,  22696.,  23764.,  24064.,
      30160.,  30560.,  31968.,  32384.,  38000.,  38520.,  40260.,  40800.,
      40360.,  40920.,  42700.,  43280.,  42720.,  43320.,  45140.,  45760.,
      34032.,  34528.,  35968.,  36480.,  25384.,  25768.,  26836.,  27232.,
      33125.,  33590.,  34880.,  35360.,  44040.,  44680.,  46380.,  47040.,
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  47120.,  47880.,  49620.,  50400.,
      34805.,  35390.,  36680.,  37280.,  44255.,  44930.,  46430.,  47120.,
      58320.,  59240.,  61220.,  62160.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      60280.,  61320.,  63340.,  64400.,  44255.,  45050.,  46550.,  47360.,
      55385.,  56270.,  57980.,  58880.,  72600.,  73800.,  76060.,  77280.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 73440.,  74760.,  77060.,  78400.,
      53705.,  54710.,  56420.,  57440.,  38320.,  39112.,  40444.,  41248.,
      49712.,  50784.,  52544.,  53632.,  60360.,  61720.,  63900.,  65280.,
      61920.,  63320.,  65540.,  66960.,  63480.,  64920.,  67180.,  68640.,
      48976.,  50144.,  51936.,  53120.,  35344.,  36232.,  37564.,  38464.,
      23409.,  24066.,  25038.,  25704.,  29888.,  30776.,  32060.,  32960.,
      35665.,  36790.,  38380.,  39520.,  36535.,  37690.,  39310.,  40480.,
      37405.,  38590.,  40240.,  41440.,  28280.,  29240.,  30548.,  31520.,
      19953.,  20682.,  21654.,  22392.,  77283.,  78318.,  80028.,  81072.,
      101192., 102584., 104852., 106256., 124135., 125890., 128710., 130480.,
      126205., 127990., 130840., 132640., 128275., 130090., 132970., 134800.,
      100448., 101912., 104204., 105680., 73683.,  74790.,  76500.,  77616.,
      96496.,  97960.,  100204., 101680., 125808., 127776., 130752., 132736.,
      153640., 156120., 159820., 162320., 156000., 158520., 162260., 164800.,
      158360., 160920., 164700., 167280., 123408., 125472., 128480., 130560.,
      90064.,  91624.,  93868.,  95440.,  111035., 112970., 115730., 117680.,
      144000., 146600., 150260., 152880., 174875., 178150., 182700., 186000.,
      177325., 180650., 185250., 188600., 179775., 183150., 187800., 191200.,
      139240., 141960., 145660., 148400., 100955., 103010., 105770., 107840.,
      122165., 124310., 127280., 129440., 158280., 161160., 165100., 168000.,
      192025., 195650., 200550., 204200., 194475., 198150., 203100., 206800.,
      196925., 200650., 205650., 209400., 152400., 155400., 159380., 162400.,
      110405., 112670., 115640., 117920., 133295., 135650., 138830., 141200.,
      172560., 175720., 179940., 183120., 209175., 213150., 218400., 222400.,
      211625., 215650., 220950., 225000., 214075., 218150., 223500., 227600.,
      165560., 168840., 173100., 176400., 119855., 122330., 125510., 128000.,
      88888.,  90856.,  93364.,  95344.,  114000., 116640., 119968., 122624.,
      136800., 140120., 144260., 147600., 138360., 141720., 145900., 149280.,
      139920., 143320., 147540., 150960., 106992., 109728., 113088., 115840.,
      76504.,  78568.,  81076.,  83152.,  52515.,  54054.,  55908.,  57456.,
      66344.,  68408.,  70868.,  72944.,  78295.,  80890.,  83950.,  86560.,
      79165.,  81790.,  84880.,  87520.,  80035.,  82690.,  85810.,  88480.,
      60032.,  62168.,  64652.,  66800.,  42003.,  43614.,  45468.,  47088.,
      141669., 143586., 146178., 148104., 184688., 187256., 190700., 193280.,
      225565., 228790., 233080., 236320., 227635., 230890., 235210., 238480.,
      229705., 232990., 237340., 240640., 179240., 181880., 185348., 188000.,
      131013., 133002., 135594., 137592., 170584., 173224., 176644., 179296.,
      221456., 224992., 229536., 233088., 269280., 273720., 279380., 283840.,
      271640., 276120., 281820., 286320., 274000., 278520., 284260., 288800.,
      212784., 216416., 220992., 224640., 154744., 157480., 160900., 163648.,
      188945., 192350., 196580., 200000., 243960., 248520., 254140., 258720.,
      294925., 300650., 307650., 313400., 297375., 303150., 310200., 316000.,
      299825., 305650., 312750., 318600., 231360., 236040., 241700., 246400.,
      167105., 170630., 174860., 178400., 200075., 203690., 208130., 211760.,
      258240., 263080., 268980., 273840., 312075., 318150., 325500., 331600.,
      314525., 320650., 328050., 334200., 316975., 323150., 330600., 336800.,
      244520., 249480., 255420., 260400., 176555., 180290., 184730., 188480.,
      211205., 215030., 219680., 223520., 272520., 277640., 283820., 288960.,
      329225., 335650., 343350., 349800., 331675., 338150., 345900., 352400.,
      334125., 340650., 348450., 355000., 257680., 262920., 269140., 274400.,
      186005., 189950., 194600., 198560., 139456., 142600., 146284., 149440.,
      178288., 182496., 187392., 191616., 213240., 218520., 224620., 229920.,
      214800., 220120., 226260., 231600., 216360., 221720., 227900., 233280.,
      165008., 169312., 174240., 178560., 117664., 120904., 124588., 127840.,
      81621.,  84042.,  86778.,  89208.,  102800., 106040., 109676., 112928.,
      120925., 124990., 129520., 133600., 121795., 125890., 130450., 134560.,
      122665., 126790., 131380., 135520., 91784.,  95096.,  98756.,  102080.,
      64053.,  66546.,  69282.,  71784.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 174875., 178150., 182700., 186000.,
      177325., 180650., 185250., 188600., 179775., 183150., 187800., 191200.,
      192025., 195650., 200550., 204200., 194475., 198150., 203100., 206800.,
      196925., 200650., 205650., 209400., 209175., 213150., 218400., 222400.,
      211625., 215650., 220950., 225000., 214075., 218150., 223500., 227600.,
      294925., 300650., 307650., 313400., 297375., 303150., 310200., 316000.,
      299825., 305650., 312750., 318600., 312075., 318150., 325500., 331600.,
      314525., 320650., 328050., 334200., 316975., 323150., 330600., 336800.,
      329225., 335650., 343350., 349800., 331675., 338150., 345900., 352400.,
      334125., 340650., 348450., 355000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      109885., 110770., 111655., 112540., 115060., 115960., 116860., 117760.,
      144000., 145200., 146400., 147600., 150900., 152120., 153340., 154560.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      145560., 146880., 148200., 149520., 152780., 154120., 155460., 156800.,
      106405., 107410., 108415., 109420., 111820., 112840., 113860., 114880.,
      75848.,  76640.,  77432.,  78224.,  80084.,  80888.,  81692.,  82496.,
      98352.,  99424.,  100496., 101568., 104000., 105088., 106176., 107264.,
      119360., 120720., 122080., 123440., 126420., 127800., 129180., 130560.,
      122440., 123840., 125240., 126640., 129660., 131080., 132500., 133920.,
      125520., 126960., 128400., 129840., 132900., 134360., 135820., 137280.,
      96784.,  97952.,  99120.,  100288., 102688., 103872., 105056., 106240.,
      69800.,  70688.,  71576.,  72464.,  74228.,  75128.,  76028.,  76928.,
      46161.,  46818.,  47475.,  48132.,  49410.,  50076.,  50742.,  51408.,
      58888.,  59776.,  60664.,  61552.,  63220.,  64120.,  65020.,  65920.,
      70205.,  71330.,  72455.,  73580.,  75620.,  76760.,  77900.,  79040.,
      71915.,  73070.,  74225.,  75380.,  77450.,  78620.,  79790.,  80960.,
      73625.,  74810.,  75995.,  77180.,  79280.,  80480.,  81680.,  82880.,
      55600.,  56560.,  57520.,  58480.,  60124.,  61096.,  62068.,  63040.,
      39177.,  39906.,  40635.,  41364.,  42570.,  43308.,  44046.,  44784.,
      153531., 154566., 155601., 156636., 159012., 160056., 161100., 162144.,
      200992., 202384., 203776., 205168., 208300., 209704., 211108., 212512.,
      246515., 248270., 250025., 251780., 255650., 257420., 259190., 260960.,
      250625., 252410., 254195., 255980., 259880., 261680., 263480., 265280.,
      254735., 256550., 258365., 260180., 264110., 265940., 267770., 269600.,
      199432., 200896., 202360., 203824., 206932., 208408., 209884., 211360.,
      146259., 147366., 148473., 149580., 151884., 153000., 154116., 155232.,
      191528., 192992., 194456., 195920., 198932., 200408., 201884., 203360.,
      249648., 251616., 253584., 255552., 259520., 261504., 263488., 265472.,
      304800., 307280., 309760., 312240., 317140., 319640., 322140., 324640.,
      309480., 312000., 314520., 317040., 321980., 324520., 327060., 329600.,
      314160., 316720., 319280., 321840., 326820., 329400., 331980., 334560.,
      244752., 246816., 248880., 250944., 254880., 256960., 259040., 261120.,
      178568., 180128., 181688., 183248., 186164., 187736., 189308., 190880.,
      220135., 222070., 224005., 225940., 229510., 231460., 233410., 235360.,
      285400., 288000., 290600., 293200., 297900., 300520., 303140., 305760.,
      346475., 349750., 353025., 356300., 362100., 365400., 368700., 372000.,
      351325., 354650., 357975., 361300., 367150., 370500., 373850., 377200.,
      356175., 359550., 362925., 366300., 372200., 375600., 379000., 382400.,
      275760., 278480., 281200., 283920., 288580., 291320., 294060., 296800.,
      199855., 201910., 203965., 206020., 209470., 211540., 213610., 215680.,
      242185., 244330., 246475., 248620., 252400., 254560., 256720., 258880.,
      313680., 316560., 319440., 322320., 327300., 330200., 333100., 336000.,
      380425., 384050., 387675., 391300., 397450., 401100., 404750., 408400.,
      385275., 388950., 392625., 396300., 402500., 406200., 409900., 413600.,
      390125., 393850., 397575., 401300., 407550., 411300., 415050., 418800.,
      301800., 304800., 307800., 310800., 315740., 318760., 321780., 324800.,
      218545., 220810., 223075., 225340., 229000., 231280., 233560., 235840.,
      264235., 266590., 268945., 271300., 275290., 277660., 280030., 282400.,
      341960., 345120., 348280., 351440., 356700., 359880., 363060., 366240.,
      414375., 418350., 422325., 426300., 432800., 436800., 440800., 444800.,
      419225., 423250., 427275., 431300., 437850., 441900., 445950., 450000.,
      424075., 428150., 432225., 436300., 442900., 447000., 451100., 455200.,
      327840., 331120., 334400., 337680., 342900., 346200., 349500., 352800.,
      237235., 239710., 242185., 244660., 248530., 251020., 253510., 256000.,
      175808., 177776., 179744., 181712., 184748., 186728., 188708., 190688.,
      225360., 228000., 230640., 233280., 237280., 239936., 242592., 245248.,
      270280., 273600., 276920., 280240., 285180., 288520., 291860., 295200.,
      273360., 276720., 280080., 283440., 288420., 291800., 295180., 298560.,
      276440., 279840., 283240., 286640., 291660., 295080., 298500., 301920.,
      211248., 213984., 216720., 219456., 223424., 226176., 228928., 231680.,
      150944., 153008., 155072., 157136., 160076., 162152., 164228., 166304.,
      103491., 105030., 106569., 108108., 110268., 111816., 113364., 114912.,
      130624., 132688., 134752., 136816., 139660., 141736., 143812., 145888.,
      153995., 156590., 159185., 161780., 165290., 167900., 170510., 173120.,
      155705., 158330., 160955., 163580., 167120., 169760., 172400., 175040.,
      157415., 160070., 162725., 165380., 168950., 171620., 174290., 176960.,
      117928., 120064., 122200., 124336., 127156., 129304., 131452., 133600.,
      82395.,  84006.,  85617.,  87228.,  89316.,  90936.,  92556.,  94176.,
      281421., 283338., 285255., 287172., 290430., 292356., 294282., 296208.,
      366808., 369376., 371944., 374512., 378820., 381400., 383980., 386560.,
      447905., 451130., 454355., 457580., 462920., 466160., 469400., 472640.,
      452015., 455270., 458525., 461780., 467150., 470420., 473690., 476960.,
      456125., 459410., 462695., 465980., 471380., 474680., 477980., 481280.,
      355840., 358480., 361120., 363760., 368044., 370696., 373348., 376000.,
      260037., 262026., 264015., 266004., 269190., 271188., 273186., 275184.,
      338528., 341168., 343808., 346448., 350636., 353288., 355940., 358592.,
      439376., 442912., 446448., 449984., 455520., 459072., 462624., 466176.,
      534120., 538560., 543000., 547440., 554300., 558760., 563220., 567680.,
      538800., 543280., 547760., 552240., 559140., 563640., 568140., 572640.,
      543480., 548000., 552520., 557040., 563980., 568520., 573060., 577600.,
      421936., 425568., 429200., 432832., 438336., 441984., 445632., 449280.,
      306752., 309488., 312224., 314960., 319052., 321800., 324548., 327296.,
      374485., 377890., 381295., 384700., 389740., 393160., 396580., 400000.,
      483360., 487920., 492480., 497040., 503700., 508280., 512860., 517440.,
      584125., 589850., 595575., 601300., 609550., 615300., 621050., 626800.,
      588975., 594750., 600525., 606300., 614600., 620400., 626200., 632000.,
      593825., 599650., 605475., 611300., 619650., 625500., 631350., 637200.,
      458040., 462720., 467400., 472080., 478700., 483400., 488100., 492800.,
      330685., 334210., 337735., 341260., 346180., 349720., 353260., 356800.,
      396535., 400150., 403765., 407380., 412630., 416260., 419890., 423520.,
      511640., 516480., 521320., 526160., 533100., 537960., 542820., 547680.,
      618075., 624150., 630225., 636300., 644900., 651000., 657100., 663200.,
      622925., 629050., 635175., 641300., 649950., 656100., 662250., 668400.,
      627775., 633950., 640125., 646300., 655000., 661200., 667400., 673600.,
      484080., 489040., 494000., 498960., 505860., 510840., 515820., 520800.,
      349375., 353110., 356845., 360580., 365710., 369460., 373210., 376960.,
      418585., 422410., 426235., 430060., 435520., 439360., 443200., 447040.,
      539920., 545040., 550160., 555280., 562500., 567640., 572780., 577920.,
      652025., 658450., 664875., 671300., 680250., 686700., 693150., 699600.,
      656875., 663350., 669825., 676300., 685300., 691800., 698300., 704800.,
      661725., 668250., 674775., 681300., 690350., 696900., 703450., 710000.,
      510120., 515360., 520600., 525840., 533020., 538280., 543540., 548800.,
      368065., 372010., 375955., 379900., 385240., 389200., 393160., 397120.,
      275768., 278912., 282056., 285200., 289412., 292568., 295724., 298880.,
      352368., 356576., 360784., 364992., 370560., 374784., 379008., 383232.,
      421200., 426480., 431760., 437040., 443940., 449240., 454540., 459840.,
      424280., 429600., 434920., 440240., 447180., 452520., 457860., 463200.,
      427360., 432720., 438080., 443440., 450420., 455800., 461180., 466560.,
      325712., 330016., 334320., 338624., 344160., 348480., 352800., 357120.,
      232088., 235328., 238568., 241808., 245924., 249176., 252428., 255680.,
      160821., 163242., 165663., 168084., 171126., 173556., 175986., 178416.,
      202360., 205600., 208840., 212080., 216100., 219352., 222604., 225856.,
      237785., 241850., 245915., 249980., 254960., 259040., 263120., 267200.,
      239495., 243590., 247685., 251780., 256790., 260900., 265010., 269120.,
      241205., 245330., 249455., 253580., 258620., 262760., 266900., 271040.,
      180256., 183568., 186880., 190192., 194188., 197512., 200836., 204160.,
      125613., 128106., 130599., 133092., 136062., 138564., 141066., 143568.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      346475., 349750., 353025., 356300., 362100., 365400., 368700., 372000.,
      351325., 354650., 357975., 361300., 367150., 370500., 373850., 377200.,
      356175., 359550., 362925., 366300., 372200., 375600., 379000., 382400.,
      380425., 384050., 387675., 391300., 397450., 401100., 404750., 408400.,
      385275., 388950., 392625., 396300., 402500., 406200., 409900., 413600.,
      390125., 393850., 397575., 401300., 407550., 411300., 415050., 418800.,
      414375., 418350., 422325., 426300., 432800., 436800., 440800., 444800.,
      419225., 423250., 427275., 431300., 437850., 441900., 445950., 450000.,
      424075., 428150., 432225., 436300., 442900., 447000., 451100., 455200.,
      584125., 589850., 595575., 601300., 609550., 615300., 621050., 626800.,
      588975., 594750., 600525., 606300., 614600., 620400., 626200., 632000.,
      593825., 599650., 605475., 611300., 619650., 625500., 631350., 637200.,
      618075., 624150., 630225., 636300., 644900., 651000., 657100., 663200.,
      622925., 629050., 635175., 641300., 649950., 656100., 662250., 668400.,
      627775., 633950., 640125., 646300., 655000., 661200., 667400., 673600.,
      652025., 658450., 664875., 671300., 680250., 686700., 693150., 699600.,
      656875., 663350., 669825., 676300., 685300., 691800., 698300., 704800.,
      661725., 668250., 674775., 681300., 690350., 696900., 703450., 710000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      109975., 112540., 115135., 117760., 144180., 147600., 151060., 154560.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 145940., 149520., 153140., 156800.,
      106735., 109420., 112135., 114880., 76124.,  78224.,  80348.,  82496.,
      98768.,  101568., 104400., 107264., 119940., 123440., 126980., 130560.,
      123060., 126640., 130260., 133920., 126180., 129840., 133540., 137280.,
      97360.,  100288., 103248., 106240., 70268.,  72464.,  74684.,  76928.,
      46521.,  48132.,  49761.,  51408.,  59404.,  61552.,  63724.,  65920.,
      70895.,  73580.,  76295.,  79040.,  72635.,  75380.,  78155.,  80960.,
      74375.,  77180.,  80015.,  82880.,  56236.,  58480.,  60748.,  63040.,
      39681.,  41364.,  43065.,  44784.,  153909., 156636., 159381., 162144.,
      201532., 205168., 208828., 212512., 247235., 251780., 256355., 260960.,
      251375., 255980., 260615., 265280., 255515., 260180., 264875., 269600.,
      200092., 203824., 207580., 211360., 146781., 149580., 152397., 155232.,
      192236., 195920., 199628., 203360., 250640., 255552., 260496., 265472.,
      306100., 312240., 318420., 324640., 310820., 317040., 323300., 329600.,
      315540., 321840., 328180., 334560., 245904., 250944., 256016., 261120.,
      179468., 183248., 187052., 190880., 221275., 225940., 230635., 235360.,
      286980., 293200., 299460., 305760., 348525., 356300., 364125., 372000.,
      353425., 361300., 369225., 377200., 358325., 366300., 374325., 382400.,
      277540., 283920., 290340., 296800., 201235., 206020., 210835., 215680.,
      243535., 248620., 253735., 258880., 315540., 322320., 329140., 336000.,
      382825., 391300., 399825., 408400., 387725., 396300., 404925., 413600.,
      392625., 401300., 410025., 418800., 303860., 310800., 317780., 324800.,
      220135., 225340., 230575., 235840., 265795., 271300., 276835., 282400.,
      344100., 351440., 358820., 366240., 417125., 426300., 435525., 444800.,
      422025., 431300., 440625., 450000., 426925., 436300., 445725., 455200.,
      330180., 337680., 345220., 352800., 239035., 244660., 250315., 256000.,
      177260., 181712., 186188., 190688., 227344., 233280., 239248., 245248.,
      272820., 280240., 287700., 295200., 275940., 283440., 290980., 298560.,
      279060., 286640., 294260., 301920., 213392., 219456., 225552., 231680.,
      152588., 157136., 161708., 166304., 104733., 108108., 111501., 114912.,
      132316., 136816., 141340., 145888., 156155., 161780., 167435., 173120.,
      157895., 163580., 169295., 175040., 159635., 165380., 171155., 176960.,
      119740., 124336., 128956., 133600., 83781.,  87228.,  90693.,  94176.,
      282681., 287172., 291681., 296208., 368524., 374512., 380524., 386560.,
      450095., 457580., 465095., 472640., 454235., 461780., 469355., 476960.,
      458375., 465980., 473615., 481280., 357676., 363760., 369868., 376000.,
      261441., 266004., 270585., 275184., 340412., 346448., 352508., 358592.,
      441936., 449984., 458064., 466176., 537380., 547440., 557540., 567680.,
      542100., 552240., 562420., 572640., 546820., 557040., 567300., 577600.,
      424656., 432832., 441040., 449280., 308828., 314960., 321116., 327296.,
      377095., 384700., 392335., 400000., 486900., 497040., 507220., 517440.,
      588625., 601300., 614025., 626800., 593525., 606300., 619125., 632000.,
      598425., 611300., 624225., 637200., 461780., 472080., 482420., 492800.,
      333535., 341260., 349015., 356800., 399355., 407380., 415435., 423520.,
      515460., 526160., 536900., 547680., 622925., 636300., 649725., 663200.,
      627825., 641300., 654825., 668400., 632725., 646300., 659925., 673600.,
      488100., 498960., 509860., 520800., 352435., 360580., 368755., 376960.,
      421615., 430060., 438535., 447040., 544020., 555280., 566580., 577920.,
      657225., 671300., 685425., 699600., 662125., 676300., 690525., 704800.,
      667025., 681300., 695625., 710000., 514420., 525840., 537300., 548800.,
      371335., 379900., 388495., 397120., 278396., 285200., 292028., 298880.,
      355920., 364992., 374096., 383232., 425700., 437040., 448420., 459840.,
      428820., 440240., 451700., 463200., 431940., 443440., 454980., 466560.,
      329424., 338624., 347856., 357120., 234908., 241808., 248732., 255680.,
      162945., 168084., 173241., 178416., 205228., 212080., 218956., 225856.,
      241415., 249980., 258575., 267200., 243155., 251780., 260435., 269120.,
      244895., 253580., 262295., 271040., 183244., 190192., 197164., 204160.,
      127881., 133092., 138321., 143568.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 348525., 356300., 364125., 372000.,
      353425., 361300., 369225., 377200., 358325., 366300., 374325., 382400.,
      382825., 391300., 399825., 408400., 387725., 396300., 404925., 413600.,
      392625., 401300., 410025., 418800., 417125., 426300., 435525., 444800.,
      422025., 431300., 440625., 450000., 426925., 436300., 445725., 455200.,
      588625., 601300., 614025., 626800., 593525., 606300., 619125., 632000.,
      598425., 611300., 624225., 637200., 622925., 636300., 649725., 663200.,
      627825., 641300., 654825., 668400., 632725., 646300., 659925., 673600.,
      657225., 671300., 685425., 699600., 662125., 676300., 690525., 704800.,
      667025., 681300., 695625., 710000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,   50274.,   51894.,   52200.,   53847.,   54162.,   55836.,
      56160.,   68660.,   69080.,   71216.,   71648.,   73820.,   74264.,
      76472.,   76928.,   88195.,   88750.,   91390.,   91960.,   94645.,
      95230.,   97960.,   98560.,   96415.,   97030.,   99730.,   100360.,
      103105.,  103750.,  106540.,  107200.,  104635.,  105310.,  108070.,
      108760.,  111565.,  112270.,  115120.,  115840.,  84452.,   85016.,
      87200.,   87776.,   89996.,   90584.,   92840.,   93440.,   63801.,
      64242.,   65862.,   66312.,   67959.,   68418.,   70092.,   70560.,
      87556.,   88120.,   90208.,   90784.,   92908.,   93496.,   95656.,
      96256.,   117904.,  118688.,  121440.,  122240.,  125040.,  125856.,
      128704.,  129536.,  148620.,  149640.,  153040.,  154080.,  157540.,
      158600.,  162120.,  163200.,  157980.,  159080.,  162560.,  163680.,
      167220.,  168360.,  171960.,  173120.,  167340.,  168520.,  172080.,
      173280.,  176900.,  178120.,  181800.,  183040.,  133328.,  134304.,
      137120.,  138112.,  140976.,  141984.,  144896.,  145920.,  99460.,
      100216.,  102304.,  103072.,  105196.,  105976.,  108136.,  108928.,
      129995.,  130910.,  133430.,  134360.,  136925.,  137870.,  140480.,
      141440.,  172860.,  174120.,  177440.,  178720.,  182100.,  183400.,
      186840.,  188160.,  215225.,  216850.,  220950.,  222600.,  226775.,
      228450.,  232700.,  234400.,  224925.,  226650.,  230850.,  232600.,
      236875.,  238650.,  243000.,  244800.,  234625.,  236450.,  240750.,
      242600.,  246975.,  248850.,  253300.,  255200.,  185100.,  186600.,
      190000.,  191520.,  194980.,  196520.,  200040.,  201600.,  136715.,
      137870.,  140390.,  141560.,  144125.,  145310.,  147920.,  149120.,
      174095.,  175430.,  178370.,  179720.,  182705.,  184070.,  187100.,
      188480.,  229420.,  231240.,  235120.,  236960.,  240900.,  242760.,
      246760.,  248640.,  283125.,  285450.,  290250.,  292600.,  297475.,
      299850.,  304800.,  307200.,  292825.,  295250.,  300150.,  302600.,
      307575.,  310050.,  315100.,  317600.,  302525.,  305050.,  310050.,
      312600.,  317675.,  320250.,  325400.,  328000.,  237180.,  239240.,
      243200.,  245280.,  249300.,  251400.,  255480.,  257600.,  174095.,
      175670.,  178610.,  180200.,  183185.,  184790.,  187820.,  189440.,
      218195.,  219950.,  223310.,  225080.,  228485.,  230270.,  233720.,
      235520.,  285980.,  288360.,  292800.,  295200.,  299700.,  302120.,
      306680.,  309120.,  351025.,  354050.,  359550.,  362600.,  368175.,
      371250.,  376900.,  380000.,  360725.,  363850.,  369450.,  372600.,
      378275.,  381450.,  387200.,  390400.,  370425.,  373650.,  379350.,
      382600.,  388375.,  391650.,  397500.,  400800.,  289260.,  291880.,
      296400.,  299040.,  303620.,  306280.,  310920.,  313600.,  211475.,
      213470.,  216830.,  218840.,  222245.,  224270.,  227720.,  229760.,
      150676.,  152248.,  154864.,  156448.,  159100.,  160696.,  163384.,
      164992.,  195408.,  197536.,  200992.,  203136.,  206640.,  208800.,
      212352.,  214528.,  237180.,  239880.,  244160.,  246880.,  251220.,
      253960.,  258360.,  261120.,  243340.,  246120.,  250480.,  253280.,
      257700.,  260520.,  265000.,  267840.,  249500.,  252360.,  256800.,
      259680.,  264180.,  267080.,  271640.,  274560.,  192400.,  194720.,
      198240.,  200576.,  204144.,  206496.,  210112.,  212480.,  138772.,
      140536.,  143152.,  144928.,  147580.,  149368.,  152056.,  153856.,
      91737.,   93042.,   94950.,   96264.,   98199.,   99522.,   101484.,
      102816.,  117044.,  118808.,  121328.,  123104.,  125660.,  127448.,
      130040.,  131840.,  139555.,  141790.,  144910.,  147160.,  150325.,
      152590.,  155800.,  158080.,  142975.,  145270.,  148450.,  150760.,
      153985.,  156310.,  159580.,  161920.,  146395.,  148750.,  151990.,
      154360.,  157645.,  160030.,  163360.,  165760.,  110564.,  112472.,
      115040.,  116960.,  119564.,  121496.,  124136.,  126080.,  77913.,
      79362.,   81270.,   82728.,   84663.,   86130.,   88092.,   89568.,
      305757.,  307818.,  311202.,  313272.,  316683.,  318762.,  322200.,
      324288.,  400292.,  403064.,  407552.,  410336.,  414860.,  417656.,
      422216.,  425024.,  490975.,  494470.,  500050.,  503560.,  509185.,
      512710.,  518380.,  521920.,  499195.,  502750.,  508390.,  511960.,
      517645.,  521230.,  526960.,  530560.,  507415.,  511030.,  516730.,
      520360.,  526105.,  529750.,  535540.,  539200.,  397268.,  400184.,
      404720.,  407648.,  412220.,  415160.,  419768.,  422720.,  291357.,
      293562.,  296946.,  299160.,  302571.,  304794.,  308232.,  310464.,
      381556.,  384472.,  388912.,  391840.,  396316.,  399256.,  403768.,
      406720.,  497360.,  501280.,  507168.,  511104.,  517040.,  520992.,
      526976.,  530944.,  607260.,  612200.,  619520.,  624480.,  631860.,
      636840.,  644280.,  649280.,  616620.,  621640.,  629040.,  634080.,
      641540.,  646600.,  654120.,  659200.,  625980.,  631080.,  638560.,
      643680.,  651220.,  656360.,  663960.,  669120.,  487696.,  491808.,
      497760.,  501888.,  507888.,  512032.,  518080.,  522240.,  355828.,
      358936.,  363376.,  366496.,  370972.,  374104.,  378616.,  381760.,
      438695.,  442550.,  448010.,  451880.,  457385.,  461270.,  466820.,
      470720.,  568780.,  573960.,  581200.,  586400.,  593700.,  598920.,
      606280.,  611520.,  690525.,  697050.,  706050.,  712600.,  721675.,
      728250.,  737400.,  744000.,  700225.,  706850.,  715950.,  722600.,
      731775.,  738450.,  747700.,  754400.,  709925.,  716650.,  725850.,
      732600.,  741875.,  748650.,  758000.,  764800.,  549660.,  555080.,
      562400.,  567840.,  575220.,  580680.,  588120.,  593600.,  398375.,
      402470.,  407930.,  412040.,  417545.,  421670.,  427220.,  431360.,
      482795.,  487070.,  492950.,  497240.,  503165.,  507470.,  513440.,
      517760.,  625340.,  631080.,  638880.,  644640.,  652500.,  658280.,
      666200.,  672000.,  758425.,  765650.,  775350.,  782600.,  792375.,
      799650.,  809500.,  816800.,  768125.,  775450.,  785250.,  792600.,
      802475.,  809850.,  819800.,  827200.,  777825.,  785250.,  795150.,
      802600.,  812575.,  820050.,  830100.,  837600.,  601740.,  607720.,
      615600.,  621600.,  629540.,  635560.,  643560.,  649600.,  435755.,
      440270.,  446150.,  450680.,  456605.,  461150.,  467120.,  471680.,
      526895.,  531590.,  537890.,  542600.,  548945.,  553670.,  560060.,
      564800.,  681900.,  688200.,  696560.,  702880.,  711300.,  717640.,
      726120.,  732480.,  826325.,  834250.,  844650.,  852600.,  863075.,
      871050.,  881600.,  889600.,  836025.,  844050.,  854550.,  862600.,
      873175.,  881250.,  891900.,  900000.,  845725.,  853850.,  864450.,
      872600.,  883275.,  891450.,  902200.,  910400.,  653820.,  660360.,
      668800.,  675360.,  683860.,  690440.,  699000.,  705600.,  473135.,
      478070.,  484370.,  489320.,  495665.,  500630.,  507020.,  512000.,
      350596.,  354520.,  359488.,  363424.,  368428.,  372376.,  377416.,
      381376.,  449424.,  454688.,  461280.,  466560.,  473200.,  478496.,
      485184.,  490496.,  539020.,  545640.,  553840.,  560480.,  568740.,
      575400.,  583720.,  590400.,  545180.,  551880.,  560160.,  566880.,
      575220.,  581960.,  590360.,  597120.,  551340.,  558120.,  566480.,
      573280.,  581700.,  588520.,  597000.,  603840.,  421328.,  426784.,
      433440.,  438912.,  445616.,  451104.,  457856.,  463360.,  301060.,
      305176.,  310144.,  314272.,  319276.,  323416.,  328456.,  332608.,
      206397.,  209466.,  213138.,  216216.,  219915.,  223002.,  226728.,
      229824.,  260516.,  264632.,  269504.,  273632.,  278540.,  282680.,
      287624.,  291776.,  307135.,  312310.,  318370.,  323560.,  329665.,
      334870.,  341020.,  346240.,  310555.,  315790.,  321910.,  327160.,
      333325.,  338590.,  344800.,  350080.,  313975.,  319270.,  325450.,
      330760.,  336985.,  342310.,  348580.,  353920.,  235220.,  239480.,
      244400.,  248672.,  253628.,  257912.,  262904.,  267200.,  164349.,
      167562.,  171234.,  174456.,  178155.,  181386.,  185112.,  188352.,
      561537.,  565362.,  570510.,  574344.,  579519.,  583362.,  588564.,
      592416.,  731924.,  737048.,  743888.,  749024.,  755900.,  761048.,
      767960.,  773120.,  893755.,  900190.,  908710.,  915160.,  923725.,
      930190.,  938800.,  945280.,  901975.,  908470.,  917050.,  923560.,
      932185.,  938710.,  947380.,  953920.,  910195.,  916750.,  925390.,
      931960.,  940645.,  947230.,  955960.,  962560.,  710084.,  715352.,
      722240.,  727520.,  734444.,  739736.,  746696.,  752000.,  518913.,
      522882.,  528030.,  532008.,  537183.,  541170.,  546372.,  550368.,
      675556.,  680824.,  687616.,  692896.,  699724.,  705016.,  711880.,
      717184.,  876816.,  883872.,  892896.,  899968.,  909040.,  916128.,
      925248.,  932352.,  1065900., 1074760., 1086000., 1094880., 1106180.,
      1115080., 1126440., 1135360., 1075260., 1084200., 1095520., 1104480.,
      1115860., 1124840., 1136280., 1145280., 1084620., 1093640., 1105040.,
      1114080., 1125540., 1134600., 1146120., 1155200., 842064.,  849312.,
      858400.,  865664.,  874800.,  882080.,  891264.,  898560.,  612196.,
      617656.,  624448.,  629920.,  636748.,  642232.,  649096.,  654592.,
      747395.,  754190.,  762590.,  769400.,  777845.,  784670.,  793160.,
      800000.,  964700.,  973800.,  984960.,  994080.,  1005300., 1014440.,
      1025720., 1034880., 1165825., 1177250., 1191150., 1202600., 1216575.,
      1228050., 1242100., 1253600., 1175525., 1187050., 1201050., 1212600.,
      1226675., 1238250., 1252400., 1264000., 1185225., 1196850., 1210950.,
      1222600., 1236775., 1248450., 1262700., 1274400., 914220.,  923560.,
      934800.,  944160.,  955460.,  964840.,  976200.,  985600.,  660035.,
      667070.,  675470.,  682520.,  690965.,  698030.,  706520.,  713600.,
      791495.,  798710.,  807530.,  814760.,  823625.,  830870.,  839780.,
      847040.,  1021260., 1030920., 1042640., 1052320., 1064100., 1073800.,
      1085640., 1095360., 1233725., 1245850., 1260450., 1272600., 1287275.,
      1299450., 1314200., 1326400., 1243425., 1255650., 1270350., 1282600.,
      1297375., 1309650., 1324500., 1336800., 1253125., 1265450., 1280250.,
      1292600., 1307475., 1319850., 1334800., 1347200., 966300.,  976200.,
      988000.,  997920.,  1009780., 1019720., 1031640., 1041600., 697415.,
      704870.,  713690.,  721160.,  730025.,  737510.,  746420.,  753920.,
      835595.,  843230.,  852470.,  860120.,  869405.,  877070.,  886400.,
      894080.,  1077820., 1088040., 1100320., 1110560., 1122900., 1133160.,
      1145560., 1155840., 1301625., 1314450., 1329750., 1342600., 1357975.,
      1370850., 1386300., 1399200., 1311325., 1324250., 1339650., 1352600.,
      1368075., 1381050., 1396600., 1409600., 1321025., 1334050., 1349550.,
      1362600., 1378175., 1391250., 1406900., 1420000., 1018380., 1028840.,
      1041200., 1051680., 1064100., 1074600., 1087080., 1097600., 734795.,
      742670.,  751910.,  759800.,  769085.,  776990.,  786320.,  794240.,
      550516.,  556792.,  564112.,  570400.,  577756.,  584056.,  591448.,
      597760.,  703440.,  711840.,  721568.,  729984.,  739760.,  748192.,
      758016.,  766464.,  840860.,  851400.,  863520.,  874080.,  886260.,
      896840.,  909080.,  919680.,  847020.,  857640.,  869840.,  880480.,
      892740.,  903400.,  915720.,  926400.,  853180.,  863880.,  876160.,
      886880.,  899220.,  909960.,  922360.,  933120.,  650256.,  658848.,
      668640.,  677248.,  687088.,  695712.,  705600.,  714240.,  463348.,
      469816.,  477136.,  483616.,  490972.,  497464.,  504856.,  511360.,
      321057.,  325890.,  331326.,  336168.,  341631.,  346482.,  351972.,
      356832.,  403988.,  410456.,  417680.,  424160.,  431420.,  437912.,
      445208.,  451712.,  474715.,  482830.,  491830.,  499960.,  509005.,
      517150.,  526240.,  534400.,  478135.,  486310.,  495370.,  503560.,
      512665.,  520870.,  530020.,  538240.,  481555.,  489790.,  498910.,
      507160.,  516325.,  524590.,  533800.,  542080.,  359876.,  366488.,
      373760.,  380384.,  387692.,  394328.,  401672.,  408320.,  250785.,
      255762.,  261198.,  266184.,  271647.,  276642.,  282132.,  287136.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225.,  216850.,  220950.,  222600.,  226775.,  228450.,  232700.,
      234400.,  224925.,  226650.,  230850.,  232600.,  236875.,  238650.,
      243000.,  244800.,  234625.,  236450.,  240750.,  242600.,  246975.,
      248850.,  253300.,  255200.,  283125.,  285450.,  290250.,  292600.,
      297475.,  299850.,  304800.,  307200.,  292825.,  295250.,  300150.,
      302600.,  307575.,  310050.,  315100.,  317600.,  302525.,  305050.,
      310050.,  312600.,  317675.,  320250.,  325400.,  328000.,  351025.,
      354050.,  359550.,  362600.,  368175.,  371250.,  376900.,  380000.,
      360725.,  363850.,  369450.,  372600.,  378275.,  381450.,  387200.,
      390400.,  370425.,  373650.,  379350.,  382600.,  388375.,  391650.,
      397500.,  400800.,  690525.,  697050.,  706050.,  712600.,  721675.,
      728250.,  737400.,  744000.,  700225.,  706850.,  715950.,  722600.,
      731775.,  738450.,  747700.,  754400.,  709925.,  716650.,  725850.,
      732600.,  741875.,  748650.,  758000.,  764800.,  758425.,  765650.,
      775350.,  782600.,  792375.,  799650.,  809500.,  816800.,  768125.,
      775450.,  785250.,  792600.,  802475.,  809850.,  819800.,  827200.,
      777825.,  785250.,  795150.,  802600.,  812575.,  820050.,  830100.,
      837600.,  826325.,  834250.,  844650.,  852600.,  863075.,  871050.,
      881600.,  889600.,  836025.,  844050.,  854550.,  862600.,  873175.,
      881250.,  891900.,  900000.,  845725.,  853850.,  864450.,  872600.,
      883275.,  891450.,  902200.,  910400.,  1165825., 1177250., 1191150.,
      1202600., 1216575., 1228050., 1242100., 1253600., 1175525., 1187050.,
      1201050., 1212600., 1226675., 1238250., 1252400., 1264000., 1185225.,
      1196850., 1210950., 1222600., 1236775., 1248450., 1262700., 1274400.,
      1233725., 1245850., 1260450., 1272600., 1287275., 1299450., 1314200.,
      1326400., 1243425., 1255650., 1270350., 1282600., 1297375., 1309650.,
      1324500., 1336800., 1253125., 1265450., 1280250., 1292600., 1307475.,
      1319850., 1334800., 1347200., 1301625., 1314450., 1329750., 1342600.,
      1357975., 1370850., 1386300., 1399200., 1311325., 1324250., 1339650.,
      1352600., 1368075., 1381050., 1396600., 1409600., 1321025., 1334050.,
      1349550., 1362600., 1378175., 1391250., 1406900., 1420000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,   99954.,   100251.,  100548.,  103482.,  103788.,  104094.,
      104400.,  107379.,  107694.,  108009.,  108324.,  111348.,  111672.,
      111996.,  112320.,  136900.,  137320.,  137740.,  138160.,  142000.,
      142432.,  142864.,  143296.,  147196.,  147640.,  148084.,  148528.,
      152488.,  152944.,  153400.,  153856.,  175835.,  176390.,  176945.,
      177500.,  182210.,  182780.,  183350.,  183920.,  188705.,  189290.,
      189875.,  190460.,  195320.,  195920.,  196520.,  197120.,  192215.,
      192830.,  193445.,  194060.,  198830.,  199460.,  200090.,  200720.,
      205565.,  206210.,  206855.,  207500.,  212420.,  213080.,  213740.,
      214400.,  208595.,  209270.,  209945.,  210620.,  215450.,  216140.,
      216830.,  217520.,  222425.,  223130.,  223835.,  224540.,  229520.,
      230240.,  230960.,  231680.,  168340.,  168904.,  169468.,  170032.,
      173824.,  174400.,  174976.,  175552.,  179404.,  179992.,  180580.,
      181168.,  185080.,  185680.,  186280.,  186880.,  127161.,  127602.,
      128043.,  128484.,  131274.,  131724.,  132174.,  132624.,  135459.,
      135918.,  136377.,  136836.,  139716.,  140184.,  140652.,  141120.,
      174548.,  175112.,  175676.,  176240.,  179840.,  180416.,  180992.,
      181568.,  185228.,  185816.,  186404.,  186992.,  190712.,  191312.,
      191912.,  192512.,  235024.,  235808.,  236592.,  237376.,  242080.,
      242880.,  243680.,  244480.,  249264.,  250080.,  250896.,  251712.,
      256576.,  257408.,  258240.,  259072.,  296220.,  297240.,  298260.,
      299280.,  305040.,  306080.,  307120.,  308160.,  314020.,  315080.,
      316140.,  317200.,  323160.,  324240.,  325320.,  326400.,  314860.,
      315960.,  317060.,  318160.,  324000.,  325120.,  326240.,  327360.,
      333300.,  334440.,  335580.,  336720.,  342760.,  343920.,  345080.,
      346240.,  333500.,  334680.,  335860.,  337040.,  342960.,  344160.,
      345360.,  346560.,  352580.,  353800.,  355020.,  356240.,  362360.,
      363600.,  364840.,  366080.,  265680.,  266656.,  267632.,  268608.,
      273248.,  274240.,  275232.,  276224.,  280944.,  281952.,  282960.,
      283968.,  288768.,  289792.,  290816.,  291840.,  198164.,  198920.,
      199676.,  200432.,  203840.,  204608.,  205376.,  206144.,  209612.,
      210392.,  211172.,  211952.,  215480.,  216272.,  217064.,  217856.,
      259075.,  259990.,  260905.,  261820.,  265930.,  266860.,  267790.,
      268720.,  272905.,  273850.,  274795.,  275740.,  280000.,  280960.,
      281920.,  282880.,  344460.,  345720.,  346980.,  348240.,  353600.,
      354880.,  356160.,  357440.,  362900.,  364200.,  365500.,  366800.,
      372360.,  373680.,  375000.,  376320.,  428825.,  430450.,  432075.,
      433700.,  440250.,  441900.,  443550.,  445200.,  451875.,  453550.,
      455225.,  456900.,  463700.,  465400.,  467100.,  468800.,  448125.,
      449850.,  451575.,  453300.,  459950.,  461700.,  463450.,  465200.,
      471975.,  473750.,  475525.,  477300.,  484200.,  486000.,  487800.,
      489600.,  467425.,  469250.,  471075.,  472900.,  479650.,  481500.,
      483350.,  485200.,  492075.,  493950.,  495825.,  497700.,  504700.,
      506600.,  508500.,  510400.,  368700.,  370200.,  371700.,  373200.,
      378480.,  380000.,  381520.,  383040.,  388420.,  389960.,  391500.,
      393040.,  398520.,  400080.,  401640.,  403200.,  272275.,  273430.,
      274585.,  275740.,  279610.,  280780.,  281950.,  283120.,  287065.,
      288250.,  289435.,  290620.,  294640.,  295840.,  297040.,  298240.,
      346855.,  348190.,  349525.,  350860.,  355390.,  356740.,  358090.,
      359440.,  364045.,  365410.,  366775.,  368140.,  372820.,  374200.,
      375580.,  376960.,  457020.,  458840.,  460660.,  462480.,  468400.,
      470240.,  472080.,  473920.,  479940.,  481800.,  483660.,  485520.,
      491640.,  493520.,  495400.,  497280.,  563925.,  566250.,  568575.,
      570900.,  578150.,  580500.,  582850.,  585200.,  592575.,  594950.,
      597325.,  599700.,  607200.,  609600.,  612000.,  614400.,  583225.,
      585650.,  588075.,  590500.,  597850.,  600300.,  602750.,  605200.,
      612675.,  615150.,  617625.,  620100.,  627700.,  630200.,  632700.,
      635200.,  602525.,  605050.,  607575.,  610100.,  617550.,  620100.,
      622650.,  625200.,  632775.,  635350.,  637925.,  640500.,  648200.,
      650800.,  653400.,  656000.,  472300.,  474360.,  476420.,  478480.,
      484320.,  486400.,  488480.,  490560.,  496500.,  498600.,  500700.,
      502800.,  508840.,  510960.,  513080.,  515200.,  346615.,  348190.,
      349765.,  351340.,  355630.,  357220.,  358810.,  360400.,  364765.,
      366370.,  367975.,  369580.,  374020.,  375640.,  377260.,  378880.,
      434635.,  436390.,  438145.,  439900.,  444850.,  446620.,  448390.,
      450160.,  455185.,  456970.,  458755.,  460540.,  465640.,  467440.,
      469240.,  471040.,  569580.,  571960.,  574340.,  576720.,  583200.,
      585600.,  588000.,  590400.,  596980.,  599400.,  601820.,  604240.,
      610920.,  613360.,  615800.,  618240.,  699025.,  702050.,  705075.,
      708100.,  716050.,  719100.,  722150.,  725200.,  733275.,  736350.,
      739425.,  742500.,  750700.,  753800.,  756900.,  760000.,  718325.,
      721450.,  724575.,  727700.,  735750.,  738900.,  742050.,  745200.,
      753375.,  756550.,  759725.,  762900.,  771200.,  774400.,  777600.,
      780800.,  737625.,  740850.,  744075.,  747300.,  755450.,  758700.,
      761950.,  765200.,  773475.,  776750.,  780025.,  783300.,  791700.,
      795000.,  798300.,  801600.,  575900.,  578520.,  581140.,  583760.,
      590160.,  592800.,  595440.,  598080.,  604580.,  607240.,  609900.,
      612560.,  619160.,  621840.,  624520.,  627200.,  420955.,  422950.,
      424945.,  426940.,  431650.,  433660.,  435670.,  437680.,  442465.,
      444490.,  446515.,  448540.,  453400.,  455440.,  457480.,  459520.,
      299780.,  301352.,  302924.,  304496.,  308144.,  309728.,  311312.,
      312896.,  316604.,  318200.,  319796.,  321392.,  325160.,  326768.,
      328376.,  329984.,  388688.,  390816.,  392944.,  395072.,  399840.,
      401984.,  404128.,  406272.,  411120.,  413280.,  415440.,  417600.,
      422528.,  424704.,  426880.,  429056.,  471660.,  474360.,  477060.,
      479760.,  485600.,  488320.,  491040.,  493760.,  499700.,  502440.,
      505180.,  507920.,  513960.,  516720.,  519480.,  522240.,  483900.,
      486680.,  489460.,  492240.,  498160.,  500960.,  503760.,  506560.,
      512580.,  515400.,  518220.,  521040.,  527160.,  530000.,  532840.,
      535680.,  496140.,  499000.,  501860.,  504720.,  510720.,  513600.,
      516480.,  519360.,  525460.,  528360.,  531260.,  534160.,  540360.,
      543280.,  546200.,  549120.,  382480.,  384800.,  387120.,  389440.,
      394144.,  396480.,  398816.,  401152.,  405936.,  408288.,  410640.,
      412992.,  417856.,  420224.,  422592.,  424960.,  275780.,  277544.,
      279308.,  281072.,  284528.,  286304.,  288080.,  289856.,  293372.,
      295160.,  296948.,  298736.,  302312.,  304112.,  305912.,  307712.,
      182169.,  183474.,  184779.,  186084.,  188586.,  189900.,  191214.,
      192528.,  195075.,  196398.,  197721.,  199044.,  201636.,  202968.,
      204300.,  205632.,  232324.,  234088.,  235852.,  237616.,  240880.,
      242656.,  244432.,  246208.,  249532.,  251320.,  253108.,  254896.,
      258280.,  260080.,  261880.,  263680.,  276875.,  279110.,  281345.,
      283580.,  287570.,  289820.,  292070.,  294320.,  298385.,  300650.,
      302915.,  305180.,  309320.,  311600.,  313880.,  316160.,  283655.,
      285950.,  288245.,  290540.,  294590.,  296900.,  299210.,  301520.,
      305645.,  307970.,  310295.,  312620.,  316820.,  319160.,  321500.,
      323840.,  290435.,  292790.,  295145.,  297500.,  301610.,  303980.,
      306350.,  308720.,  312905.,  315290.,  317675.,  320060.,  324320.,
      326720.,  329120.,  331520.,  219220.,  221128.,  223036.,  224944.,
      228160.,  230080.,  232000.,  233920.,  237196.,  239128.,  241060.,
      242992.,  246328.,  248272.,  250216.,  252160.,  154377.,  155826.,
      157275.,  158724.,  161082.,  162540.,  163998.,  165456.,  167859.,
      169326.,  170793.,  172260.,  174708.,  176184.,  177660.,  179136.,
      609453.,  611514.,  613575.,  615636.,  620334.,  622404.,  624474.,
      626544.,  631287.,  633366.,  635445.,  637524.,  642312.,  644400.,
      646488.,  648576.,  797812.,  800584.,  803356.,  806128.,  812320.,
      815104.,  817888.,  820672.,  826924.,  829720.,  832516.,  835312.,
      841624.,  844432.,  847240.,  850048.,  978455.,  981950.,  985445.,
      988940.,  996590.,  1000100., 1003610., 1007120., 1014845., 1018370.,
      1021895., 1025420., 1033220., 1036760., 1040300., 1043840., 994835.,
      998390.,  1001945., 1005500., 1013210., 1016780., 1020350., 1023920.,
      1031705., 1035290., 1038875., 1042460., 1050320., 1053920., 1057520.,
      1061120., 1011215., 1014830., 1018445., 1022060., 1029830., 1033460.,
      1037090., 1040720., 1048565., 1052210., 1055855., 1059500., 1067420.,
      1071080., 1074740., 1078400., 791620.,  794536.,  797452.,  800368.,
      806512.,  809440.,  812368.,  815296.,  821500.,  824440.,  827380.,
      830320.,  836584.,  839536.,  842488.,  845440.,  580509.,  582714.,
      584919.,  587124.,  591678.,  593892.,  596106.,  598320.,  602919.,
      605142.,  607365.,  609588.,  614232.,  616464.,  618696.,  620928.,
      760196.,  763112.,  766028.,  768944.,  774896.,  777824.,  780752.,
      783680.,  789692.,  792632.,  795572.,  798512.,  804584.,  807536.,
      810488.,  813440.,  990800.,  994720.,  998640.,  1002560., 1010400.,
      1014336., 1018272., 1022208., 1030128., 1034080., 1038032., 1041984.,
      1049984., 1053952., 1057920., 1061888., 1209580., 1214520., 1219460.,
      1224400., 1234080., 1239040., 1244000., 1248960., 1258740., 1263720.,
      1268700., 1273680., 1283560., 1288560., 1293560., 1298560., 1228220.,
      1233240., 1238260., 1243280., 1253040., 1258080., 1263120., 1268160.,
      1278020., 1283080., 1288140., 1293200., 1303160., 1308240., 1313320.,
      1318400., 1246860., 1251960., 1257060., 1262160., 1272000., 1277120.,
      1282240., 1287360., 1297300., 1302440., 1307580., 1312720., 1322760.,
      1327920., 1333080., 1338240., 971280.,  975392.,  979504.,  983616.,
      991392.,  995520.,  999648.,  1003776., 1011632., 1015776., 1019920.,
      1024064., 1032000., 1036160., 1040320., 1044480., 708548.,  711656.,
      714764.,  717872.,  723632.,  726752.,  729872.,  732992.,  738812.,
      741944.,  745076.,  748208.,  754088.,  757232.,  760376.,  763520.,
      873535.,  877390.,  881245.,  885100.,  892150.,  896020.,  899890.,
      903760.,  910885.,  914770.,  918655.,  922540.,  929740.,  933640.,
      937540.,  941440.,  1132380., 1137560., 1142740., 1147920., 1157200.,
      1162400., 1167600., 1172800., 1182180., 1187400., 1192620., 1197840.,
      1207320., 1212560., 1217800., 1223040., 1374525., 1381050., 1387575.,
      1394100., 1405550., 1412100., 1418650., 1425200., 1436775., 1443350.,
      1449925., 1456500., 1468200., 1474800., 1481400., 1488000., 1393825.,
      1400450., 1407075., 1413700., 1425250., 1431900., 1438550., 1445200.,
      1456875., 1463550., 1470225., 1476900., 1488700., 1495400., 1502100.,
      1508800., 1413125., 1419850., 1426575., 1433300., 1444950., 1451700.,
      1458450., 1465200., 1476975., 1483750., 1490525., 1497300., 1509200.,
      1516000., 1522800., 1529600., 1093900., 1099320., 1104740., 1110160.,
      1119360., 1124800., 1130240., 1135680., 1144980., 1150440., 1155900.,
      1161360., 1170760., 1176240., 1181720., 1187200., 792655.,  796750.,
      800845.,  804940.,  811750.,  815860.,  819970.,  824080.,  830965.,
      835090.,  839215.,  843340.,  850300.,  854440.,  858580.,  862720.,
      961315.,  965590.,  969865.,  974140.,  981610.,  985900.,  990190.,
      994480.,  1002025., 1006330., 1010635., 1014940., 1022560., 1026880.,
      1031200., 1035520., 1244940., 1250680., 1256420., 1262160., 1272000.,
      1277760., 1283520., 1289280., 1299220., 1305000., 1310780., 1316560.,
      1326600., 1332400., 1338200., 1344000., 1509625., 1516850., 1524075.,
      1531300., 1543450., 1550700., 1557950., 1565200., 1577475., 1584750.,
      1592025., 1599300., 1611700., 1619000., 1626300., 1633600., 1528925.,
      1536250., 1543575., 1550900., 1563150., 1570500., 1577850., 1585200.,
      1597575., 1604950., 1612325., 1619700., 1632200., 1639600., 1647000.,
      1654400., 1548225., 1555650., 1563075., 1570500., 1582850., 1590300.,
      1597750., 1605200., 1617675., 1625150., 1632625., 1640100., 1652700.,
      1660200., 1667700., 1675200., 1197500., 1203480., 1209460., 1215440.,
      1225200., 1231200., 1237200., 1243200., 1253060., 1259080., 1265100.,
      1271120., 1281080., 1287120., 1293160., 1299200., 866995.,  871510.,
      876025.,  880540.,  887770.,  892300.,  896830.,  901360.,  908665.,
      913210.,  917755.,  922300.,  929680.,  934240.,  938800.,  943360.,
      1049095., 1053790., 1058485., 1063180., 1071070., 1075780., 1080490.,
      1085200., 1093165., 1097890., 1102615., 1107340., 1115380., 1120120.,
      1124860., 1129600., 1357500., 1363800., 1370100., 1376400., 1386800.,
      1393120., 1399440., 1405760., 1416260., 1422600., 1428940., 1435280.,
      1445880., 1452240., 1458600., 1464960., 1644725., 1652650., 1660575.,
      1668500., 1681350., 1689300., 1697250., 1705200., 1718175., 1726150.,
      1734125., 1742100., 1755200., 1763200., 1771200., 1779200., 1664025.,
      1672050., 1680075., 1688100., 1701050., 1709100., 1717150., 1725200.,
      1738275., 1746350., 1754425., 1762500., 1775700., 1783800., 1791900.,
      1800000., 1683325., 1691450., 1699575., 1707700., 1720750., 1728900.,
      1737050., 1745200., 1758375., 1766550., 1774725., 1782900., 1796200.,
      1804400., 1812600., 1820800., 1301100., 1307640., 1314180., 1320720.,
      1331040., 1337600., 1344160., 1350720., 1361140., 1367720., 1374300.,
      1380880., 1391400., 1398000., 1404600., 1411200., 941335.,  946270.,
      951205.,  956140.,  963790.,  968740.,  973690.,  978640.,  986365.,
      991330.,  996295.,  1001260., 1009060., 1014040., 1019020., 1024000.,
      697268.,  701192.,  705116.,  709040.,  715040.,  718976.,  722912.,
      726848.,  732908.,  736856.,  740804.,  744752.,  750872.,  754832.,
      758792.,  762752.,  893584.,  898848.,  904112.,  909376.,  917280.,
      922560.,  927840.,  933120.,  941104.,  946400.,  951696.,  956992.,
      965056.,  970368.,  975680.,  980992.,  1071420., 1078040., 1084660.,
      1091280., 1101040., 1107680., 1114320., 1120960., 1130820., 1137480.,
      1144140., 1150800., 1160760., 1167440., 1174120., 1180800., 1083660.,
      1090360., 1097060., 1103760., 1113600., 1120320., 1127040., 1133760.,
      1143700., 1150440., 1157180., 1163920., 1173960., 1180720., 1187480.,
      1194240., 1095900., 1102680., 1109460., 1116240., 1126160., 1132960.,
      1139760., 1146560., 1156580., 1163400., 1170220., 1177040., 1187160.,
      1194000., 1200840., 1207680., 837200.,  842656.,  848112.,  853568.,
      861408.,  866880.,  872352.,  877824.,  885744.,  891232.,  896720.,
      902208.,  910208.,  915712.,  921216.,  926720.,  598004.,  602120.,
      606236.,  610352.,  616160.,  620288.,  624416.,  628544.,  634412.,
      638552.,  642692.,  646832.,  652760.,  656912.,  661064.,  665216.,
      409725.,  412794.,  415863.,  418932.,  423198.,  426276.,  429354.,
      432432.,  436743.,  439830.,  442917.,  446004.,  450360.,  453456.,
      456552.,  459648.,  516916.,  521032.,  525148.,  529264.,  534880.,
      539008.,  543136.,  547264.,  552940.,  557080.,  561220.,  565360.,
      571096.,  575248.,  579400.,  583552.,  609095.,  614270.,  619445.,
      624620.,  631550.,  636740.,  641930.,  647120.,  654125.,  659330.,
      664535.,  669740.,  676820.,  682040.,  687260.,  692480.,  615875.,
      621110.,  626345.,  631580.,  638570.,  643820.,  649070.,  654320.,
      661385.,  666650.,  671915.,  677180.,  684320.,  689600.,  694880.,
      700160.,  622655.,  627950.,  633245.,  638540.,  645590.,  650900.,
      656210.,  661520.,  668645.,  673970.,  679295.,  684620.,  691820.,
      697160.,  702500.,  707840.,  466180.,  470440.,  474700.,  478960.,
      484528.,  488800.,  493072.,  497344.,  502972.,  507256.,  511540.,
      515824.,  521512.,  525808.,  530104.,  534400.,  325485.,  328698.,
      331911.,  335124.,  339246.,  342468.,  345690.,  348912.,  353079.,
      356310.,  359541.,  362772.,  366984.,  370224.,  373464.,  376704.,
      1119249., 1123074., 1126899., 1130724., 1137186., 1141020., 1144854.,
      1148688., 1155195., 1159038., 1162881., 1166724., 1173276., 1177128.,
      1180980., 1184832., 1458724., 1463848., 1468972., 1474096., 1482640.,
      1487776., 1492912., 1498048., 1506652., 1511800., 1516948., 1522096.,
      1530760., 1535920., 1541080., 1546240., 1781075., 1787510., 1793945.,
      1800380., 1810970., 1817420., 1823870., 1830320., 1840985., 1847450.,
      1853915., 1860380., 1871120., 1877600., 1884080., 1890560., 1797455.,
      1803950., 1810445., 1816940., 1827590., 1834100., 1840610., 1847120.,
      1857845., 1864370., 1870895., 1877420., 1888220., 1894760., 1901300.,
      1907840., 1813835., 1820390., 1826945., 1833500., 1844210., 1850780.,
      1857350., 1863920., 1874705., 1881290., 1887875., 1894460., 1905320.,
      1911920., 1918520., 1925120., 1414900., 1420168., 1425436., 1430704.,
      1439200., 1444480., 1449760., 1455040., 1463596., 1468888., 1474180.,
      1479472., 1488088., 1493392., 1498696., 1504000., 1033857., 1037826.,
      1041795., 1045764., 1052082., 1056060., 1060038., 1064016., 1070379.,
      1074366., 1078353., 1082340., 1088748., 1092744., 1096740., 1100736.,
      1345844., 1351112., 1356380., 1361648., 1369952., 1375232., 1380512.,
      1385792., 1394156., 1399448., 1404740., 1410032., 1418456., 1423760.,
      1429064., 1434368., 1746576., 1753632., 1760688., 1767744., 1778720.,
      1785792., 1792864., 1799936., 1810992., 1818080., 1825168., 1832256.,
      1843392., 1850496., 1857600., 1864704., 2122940., 2131800., 2140660.,
      2149520., 2163120., 2172000., 2180880., 2189760., 2203460., 2212360.,
      2221260., 2230160., 2243960., 2252880., 2261800., 2270720., 2141580.,
      2150520., 2159460., 2168400., 2182080., 2191040., 2200000., 2208960.,
      2222740., 2231720., 2240700., 2249680., 2263560., 2272560., 2281560.,
      2290560., 2160220., 2169240., 2178260., 2187280., 2201040., 2210080.,
      2219120., 2228160., 2242020., 2251080., 2260140., 2269200., 2283160.,
      2292240., 2301320., 2310400., 1676880., 1684128., 1691376., 1698624.,
      1709536., 1716800., 1724064., 1731328., 1742320., 1749600., 1756880.,
      1764160., 1775232., 1782528., 1789824., 1797120., 1218932., 1224392.,
      1229852., 1235312., 1243424., 1248896., 1254368., 1259840., 1268012.,
      1273496., 1278980., 1284464., 1292696., 1298192., 1303688., 1309184.,
      1487995., 1494790., 1501585., 1508380., 1518370., 1525180., 1531990.,
      1538800., 1548865., 1555690., 1562515., 1569340., 1579480., 1586320.,
      1593160., 1600000., 1920300., 1929400., 1938500., 1947600., 1960800.,
      1969920., 1979040., 1988160., 2001460., 2010600., 2019740., 2028880.,
      2042280., 2051440., 2060600., 2069760., 2320225., 2331650., 2343075.,
      2354500., 2370850., 2382300., 2393750., 2405200., 2421675., 2433150.,
      2444625., 2456100., 2472700., 2484200., 2495700., 2507200., 2339525.,
      2351050., 2362575., 2374100., 2390550., 2402100., 2413650., 2425200.,
      2441775., 2453350., 2464925., 2476500., 2493200., 2504800., 2516400.,
      2528000., 2358825., 2370450., 2382075., 2393700., 2410250., 2421900.,
      2433550., 2445200., 2461875., 2473550., 2485225., 2496900., 2513700.,
      2525400., 2537100., 2548800., 1819100., 1828440., 1837780., 1847120.,
      1860240., 1869600., 1878960., 1888320., 1901540., 1910920., 1920300.,
      1929680., 1943000., 1952400., 1961800., 1971200., 1313035., 1320070.,
      1327105., 1334140., 1343890., 1350940., 1357990., 1365040., 1374865.,
      1381930., 1388995., 1396060., 1405960., 1413040., 1420120., 1427200.,
      1575775., 1582990., 1590205., 1597420., 1607830., 1615060., 1622290.,
      1629520., 1640005., 1647250., 1654495., 1661740., 1672300., 1679560.,
      1686820., 1694080., 2032860., 2042520., 2052180., 2061840., 2075600.,
      2085280., 2094960., 2104640., 2118500., 2128200., 2137900., 2147600.,
      2161560., 2171280., 2181000., 2190720., 2455325., 2467450., 2479575.,
      2491700., 2508750., 2520900., 2533050., 2545200., 2562375., 2574550.,
      2586725., 2598900., 2616200., 2628400., 2640600., 2652800., 2474625.,
      2486850., 2499075., 2511300., 2528450., 2540700., 2552950., 2565200.,
      2582475., 2594750., 2607025., 2619300., 2636700., 2649000., 2661300.,
      2673600., 2493925., 2506250., 2518575., 2530900., 2548150., 2560500.,
      2572850., 2585200., 2602575., 2614950., 2627325., 2639700., 2657200.,
      2669600., 2682000., 2694400., 1922700., 1932600., 1942500., 1952400.,
      1966080., 1976000., 1985920., 1995840., 2009620., 2019560., 2029500.,
      2039440., 2053320., 2063280., 2073240., 2083200., 1387375., 1394830.,
      1402285., 1409740., 1419910., 1427380., 1434850., 1442320., 1452565.,
      1460050., 1467535., 1475020., 1485340., 1492840., 1500340., 1507840.,
      1663555., 1671190., 1678825., 1686460., 1697290., 1704940., 1712590.,
      1720240., 1731145., 1738810., 1746475., 1754140., 1765120., 1772800.,
      1780480., 1788160., 2145420., 2155640., 2165860., 2176080., 2190400.,
      2200640., 2210880., 2221120., 2235540., 2245800., 2256060., 2266320.,
      2280840., 2291120., 2301400., 2311680., 2590425., 2603250., 2616075.,
      2628900., 2646650., 2659500., 2672350., 2685200., 2703075., 2715950.,
      2728825., 2741700., 2759700., 2772600., 2785500., 2798400., 2609725.,
      2622650., 2635575., 2648500., 2666350., 2679300., 2692250., 2705200.,
      2723175., 2736150., 2749125., 2762100., 2780200., 2793200., 2806200.,
      2819200., 2629025., 2642050., 2655075., 2668100., 2686050., 2699100.,
      2712150., 2725200., 2743275., 2756350., 2769425., 2782500., 2800700.,
      2813800., 2826900., 2840000., 2026300., 2036760., 2047220., 2057680.,
      2071920., 2082400., 2092880., 2103360., 2117700., 2128200., 2138700.,
      2149200., 2163640., 2174160., 2184680., 2195200., 1461715., 1469590.,
      1477465., 1485340., 1495930., 1503820., 1511710., 1519600., 1530265.,
      1538170., 1546075., 1553980., 1564720., 1572640., 1580560., 1588480.,
      1094756., 1101032., 1107308., 1113584., 1121936., 1128224., 1134512.,
      1140800., 1149212., 1155512., 1161812., 1168112., 1176584., 1182896.,
      1189208., 1195520., 1398480., 1406880., 1415280., 1423680., 1434720.,
      1443136., 1451552., 1459968., 1471088., 1479520., 1487952., 1496384.,
      1507584., 1516032., 1524480., 1532928., 1671180., 1681720., 1692260.,
      1702800., 1716480., 1727040., 1737600., 1748160., 1761940., 1772520.,
      1783100., 1793680., 1807560., 1818160., 1828760., 1839360., 1683420.,
      1694040., 1704660., 1715280., 1729040., 1739680., 1750320., 1760960.,
      1774820., 1785480., 1796140., 1806800., 1820760., 1831440., 1842120.,
      1852800., 1695660., 1706360., 1717060., 1727760., 1741600., 1752320.,
      1763040., 1773760., 1787700., 1798440., 1809180., 1819920., 1833960.,
      1844720., 1855480., 1866240., 1291920., 1300512., 1309104., 1317696.,
      1328672., 1337280., 1345888., 1354496., 1365552., 1374176., 1382800.,
      1391424., 1402560., 1411200., 1419840., 1428480., 920228.,  926696.,
      933164.,  939632.,  947792.,  954272.,  960752.,  967232.,  975452.,
      981944.,  988436.,  994928.,  1003208., 1009712., 1016216., 1022720.,
      637281.,  642114.,  646947.,  651780.,  657810.,  662652.,  667494.,
      672336.,  678411.,  683262.,  688113.,  692964.,  699084.,  703944.,
      708804.,  713664.,  801508.,  807976.,  814444.,  820912.,  828880.,
      835360.,  841840.,  848320.,  856348.,  862840.,  869332.,  875824.,
      883912.,  890416.,  896920.,  903424.,  941315.,  949430.,  957545.,
      965660.,  975530.,  983660.,  991790.,  999920.,  1009865., 1018010.,
      1026155., 1034300., 1044320., 1052480., 1060640., 1068800., 948095.,
      956270.,  964445.,  972620.,  982550.,  990740.,  998930.,  1007120.,
      1017125., 1025330., 1033535., 1041740., 1051820., 1060040., 1068260.,
      1076480., 954875.,  963110.,  971345.,  979580.,  989570.,  997820.,
      1006070., 1014320., 1024385., 1032650., 1040915., 1049180., 1059320.,
      1067600., 1075880., 1084160., 713140.,  719752.,  726364.,  732976.,
      740896.,  747520.,  754144.,  760768.,  768748.,  775384.,  782020.,
      788656.,  796696.,  803344.,  809992.,  816640.,  496593.,  501570.,
      506547.,  511524.,  517410.,  522396.,  527382.,  532368.,  538299.,
      543294.,  548289.,  553284.,  559260.,  564264.,  569268.,  574272.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825.,  430450.,  432075.,  433700.,  440250.,  441900.,  443550.,
      445200.,  451875.,  453550.,  455225.,  456900.,  463700.,  465400.,
      467100.,  468800.,  448125.,  449850.,  451575.,  453300.,  459950.,
      461700.,  463450.,  465200.,  471975.,  473750.,  475525.,  477300.,
      484200.,  486000.,  487800.,  489600.,  467425.,  469250.,  471075.,
      472900.,  479650.,  481500.,  483350.,  485200.,  492075.,  493950.,
      495825.,  497700.,  504700.,  506600.,  508500.,  510400.,  563925.,
      566250.,  568575.,  570900.,  578150.,  580500.,  582850.,  585200.,
      592575.,  594950.,  597325.,  599700.,  607200.,  609600.,  612000.,
      614400.,  583225.,  585650.,  588075.,  590500.,  597850.,  600300.,
      602750.,  605200.,  612675.,  615150.,  617625.,  620100.,  627700.,
      630200.,  632700.,  635200.,  602525.,  605050.,  607575.,  610100.,
      617550.,  620100.,  622650.,  625200.,  632775.,  635350.,  637925.,
      640500.,  648200.,  650800.,  653400.,  656000.,  699025.,  702050.,
      705075.,  708100.,  716050.,  719100.,  722150.,  725200.,  733275.,
      736350.,  739425.,  742500.,  750700.,  753800.,  756900.,  760000.,
      718325.,  721450.,  724575.,  727700.,  735750.,  738900.,  742050.,
      745200.,  753375.,  756550.,  759725.,  762900.,  771200.,  774400.,
      777600.,  780800.,  737625.,  740850.,  744075.,  747300.,  755450.,
      758700.,  761950.,  765200.,  773475.,  776750.,  780025.,  783300.,
      791700.,  795000.,  798300.,  801600.,  1374525., 1381050., 1387575.,
      1394100., 1405550., 1412100., 1418650., 1425200., 1436775., 1443350.,
      1449925., 1456500., 1468200., 1474800., 1481400., 1488000., 1393825.,
      1400450., 1407075., 1413700., 1425250., 1431900., 1438550., 1445200.,
      1456875., 1463550., 1470225., 1476900., 1488700., 1495400., 1502100.,
      1508800., 1413125., 1419850., 1426575., 1433300., 1444950., 1451700.,
      1458450., 1465200., 1476975., 1483750., 1490525., 1497300., 1509200.,
      1516000., 1522800., 1529600., 1509625., 1516850., 1524075., 1531300.,
      1543450., 1550700., 1557950., 1565200., 1577475., 1584750., 1592025.,
      1599300., 1611700., 1619000., 1626300., 1633600., 1528925., 1536250.,
      1543575., 1550900., 1563150., 1570500., 1577850., 1585200., 1597575.,
      1604950., 1612325., 1619700., 1632200., 1639600., 1647000., 1654400.,
      1548225., 1555650., 1563075., 1570500., 1582850., 1590300., 1597750.,
      1605200., 1617675., 1625150., 1632625., 1640100., 1652700., 1660200.,
      1667700., 1675200., 1644725., 1652650., 1660575., 1668500., 1681350.,
      1689300., 1697250., 1705200., 1718175., 1726150., 1734125., 1742100.,
      1755200., 1763200., 1771200., 1779200., 1664025., 1672050., 1680075.,
      1688100., 1701050., 1709100., 1717150., 1725200., 1738275., 1746350.,
      1754425., 1762500., 1775700., 1783800., 1791900., 1800000., 1683325.,
      1691450., 1699575., 1707700., 1720750., 1728900., 1737050., 1745200.,
      1758375., 1766550., 1774725., 1782900., 1796200., 1804400., 1812600.,
      1820800., 2320225., 2331650., 2343075., 2354500., 2370850., 2382300.,
      2393750., 2405200., 2421675., 2433150., 2444625., 2456100., 2472700.,
      2484200., 2495700., 2507200., 2339525., 2351050., 2362575., 2374100.,
      2390550., 2402100., 2413650., 2425200., 2441775., 2453350., 2464925.,
      2476500., 2493200., 2504800., 2516400., 2528000., 2358825., 2370450.,
      2382075., 2393700., 2410250., 2421900., 2433550., 2445200., 2461875.,
      2473550., 2485225., 2496900., 2513700., 2525400., 2537100., 2548800.,
      2455325., 2467450., 2479575., 2491700., 2508750., 2520900., 2533050.,
      2545200., 2562375., 2574550., 2586725., 2598900., 2616200., 2628400.,
      2640600., 2652800., 2474625., 2486850., 2499075., 2511300., 2528450.,
      2540700., 2552950., 2565200., 2582475., 2594750., 2607025., 2619300.,
      2636700., 2649000., 2661300., 2673600., 2493925., 2506250., 2518575.,
      2530900., 2548150., 2560500., 2572850., 2585200., 2602575., 2614950.,
      2627325., 2639700., 2657200., 2669600., 2682000., 2694400., 2590425.,
      2603250., 2616075., 2628900., 2646650., 2659500., 2672350., 2685200.,
      2703075., 2715950., 2728825., 2741700., 2759700., 2772600., 2785500.,
      2798400., 2609725., 2622650., 2635575., 2648500., 2666350., 2679300.,
      2692250., 2705200., 2723175., 2736150., 2749125., 2762100., 2780200.,
      2793200., 2806200., 2819200., 2629025., 2642050., 2655075., 2668100.,
      2686050., 2699100., 2712150., 2725200., 2743275., 2756350., 2769425.,
      2782500., 2800700., 2813800., 2826900., 2840000.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790.,  8350.,  10940., 13425., 13750.,
      14075., 14400., 11250., 8230.,  5852.,  7596.,  9230.,  9440.,  9650.,
      9860.,  7620.,  5510.,  3648.,  4670.,  5590.,  5710.,  5830.,  5950.,
      4520.,  3207.,  11532., 15098., 18520., 18790., 19060., 19330., 15140.,
      11109., 14468., 18868., 23050., 23360., 23670., 23980., 18700., 13658.,
      16750., 21740., 26425., 26750., 27075., 27400., 21250., 15430., 18430.,
      23900., 29025., 29350., 29675., 30000., 23250., 16870., 20110., 26060.,
      31625., 31950., 32275., 32600., 25250., 18310., 13580., 17452., 20990.,
      21200., 21410., 21620., 16580., 11894., 8184.,  10382., 12310., 12430.,
      12550., 12670., 9560.,  6735.,  21108., 27530., 33640., 33910., 34180.,
      34450., 26900., 19677., 25556., 33204., 40410., 40720., 41030., 41340.,
      32140., 23402., 28510., 36860., 44625., 44950., 45275., 45600., 35250.,
      25510., 30190., 39020., 47225., 47550., 47875., 48200., 37250., 26950.,
      31870., 41180., 49825., 50150., 50475., 50800., 39250., 28390., 21308.,
      27308., 32750., 32960., 33170., 33380., 25540., 18278., 12720., 16094.,
      19030., 19150., 19270., 19390., 14600., 10263.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800., 13425.,
      13750., 14075., 14400., 26425., 26750., 27075., 27400., 29025., 29350.,
      29675., 30000., 31625., 31950., 32275., 32600., 44625., 44950., 45275.,
      45600., 47225., 47550., 47875., 48200., 49825., 50150., 50475., 50800.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,   3912.,  5206.,   5332.,  6635.,  6800.,  7160.,  7340.,   7685.,
      7880.,   8210.,  8420.,   6586.,  6760.,  4947.,  5082.,  6592.,   6760.,
      8832.,   9064.,  11080.,  11380., 11680., 12000., 12280., 12620.,  12880.,
      13240.,  10224., 10520.,  7600.,  7828.,  9710.,  9980.,  12870.,  13240.,
      15975.,  16450., 16600.,  17100., 17225., 17750., 17850., 18400.,  14050.,
      14500.,  10355., 10700.,  12950., 13340., 17030., 17560., 20975.,  21650.,
      21600.,  22300., 22225.,  22950., 22850., 23600., 17890., 18500.,  13115.,
      13580.,  16190., 16700.,  21190., 21880., 25975., 26850., 26600.,  27500.,
      27225.,  28150., 27850.,  28800., 21730., 22500., 15875., 16460.,  11248.,
      11704.,  14576., 15192.,  17680., 18460., 18080., 18880., 18480.,  19300.,
      18880.,  19720., 14560.,  15240., 10504., 11020., 6918.,  7296.,   8830.,
      9340.,   10535., 11180.,  10760., 11420., 10985., 11660., 11210.,  11900.,
      8482.,   9040.,  5991.,   6414.,  22470., 23064., 29398., 30196.,  36035.,
      37040.,  36560., 37580.,  37085., 38120., 37610., 38660., 29434.,  30280.,
      21579.,  22218., 28096.,  28936., 36608., 37736., 44680., 46100.,  45280.,
      46720.,  45880., 47340.,  46480., 47960., 36208., 37400., 26416.,  27316.,
      32390.,  33500., 41990.,  43480., 50975., 52850., 51600., 53500.,  52225.,
      54150.,  52850., 54800.,  40930., 42500., 29675., 30860., 35630.,  36860.,
      46150.,  47800., 55975.,  58050., 56600., 58700., 57225., 59350.,  57850.,
      60000.,  44770., 46500.,  32435., 33740., 38870., 40220., 50310.,  52120.,
      60975.,  63250., 61600.,  63900., 62225., 64550., 62850., 65200.,  48610.,
      50500.,  35195., 36620.,  26032., 27160., 33392., 34904., 40080.,  41980.,
      40480.,  42400., 40880.,  42820., 41280., 43240., 31584., 33160.,  22600.,
      23788.,  15486., 16368.,  19582., 20764., 23135., 24620., 23360.,  24860.,
      23585.,  25100., 23810.,  25340., 17890., 19120., 12543., 13470.,  41118.,
      42216.,  53590., 55060.,  65435., 67280., 65960., 67820., 66485.,  68360.,
      67010.,  68900., 52282.,  53800., 38211., 39354., 49600., 51112.,  64384.,
      66408.,  78280., 80820.,  78880., 81440., 79480., 82060., 80080.,  82680.,
      62192.,  64280., 45232.,  46804., 55070., 57020., 71110., 73720.,  85975.,
      89250.,  86600., 89900.,  87225., 90550., 87850., 91200., 67810.,  70500.,
      48995.,  51020., 58310.,  60380., 75270., 78040., 90975., 94450.,  91600.,
      95100.,  92225., 95750.,  92850., 96400., 71650., 74500., 51755.,  53900.,
      61550.,  63740., 79430.,  82360., 95975., 99650., 96600., 100300., 97225.,
      100950., 97850., 101600., 75490., 78500., 54515., 56780., 40816.,  42616.,
      52208.,  54616., 62480.,  65500., 62880., 65920., 63280., 66340.,  63680.,
      66760.,  48608., 51080.,  34696., 36556., 24054., 25440., 30334.,  32188.,
      35735.,  38060., 35960.,  38300., 36185., 38540., 36410., 38780.,  27298.,
      29200.,  19095., 20526.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975., 16450., 16600., 17100.,  17225., 17750.,  17850., 18400.,
      20975., 21650., 21600., 22300.,  22225., 22950.,  22850., 23600.,
      25975., 26850., 26600., 27500.,  27225., 28150.,  27850., 28800.,
      50975., 52850., 51600., 53500.,  52225., 54150.,  52850., 54800.,
      55975., 58050., 56600., 58700.,  57225., 59350.,  57850., 60000.,
      60975., 63250., 61600., 63900.,  62225., 64550.,  62850., 65200.,
      85975., 89250., 86600., 89900.,  87225., 90550.,  87850., 91200.,
      90975., 94450., 91600., 95100.,  92225., 95750.,  92850., 96400.,
      95975., 99650., 96600., 100300., 97225., 100950., 97850., 101600.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,   7644.,   7734.,   7824.,   10286.,  10412.,  10538.,  10664.,
      13105.,  13270.,  13435.,  13600.,  14140.,  14320.,  14500.,  14680.,
      15175.,  15370.,  15565.,  15760.,  16210.,  16420.,  16630.,  16840.,
      12998.,  13172.,  13346.,  13520.,  9759.,   9894.,   10029.,  10164.,
      13016.,  13184.,  13352.,  13520.,  17432.,  17664.,  17896.,  18128.,
      21860.,  22160.,  22460.,  22760.,  23040.,  23360.,  23680.,  24000.,
      24220.,  24560.,  24900.,  25240.,  25400.,  25760.,  26120.,  26480.,
      20152.,  20448.,  20744.,  21040.,  14972.,  15200.,  15428.,  15656.,
      19150.,  19420.,  19690.,  19960.,  25370.,  25740.,  26110.,  26480.,
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      27650.,  28100.,  28550.,  29000.,  20365.,  20710.,  21055.,  21400.,
      25510.,  25900.,  26290.,  26680.,  33530.,  34060.,  34590.,  35120.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      35170.,  35780.,  36390.,  37000.,  25765.,  26230.,  26695.,  27160.,
      31870.,  32380.,  32890.,  33400.,  41690.,  42380.,  43070.,  43760.,
      51075.,  51950.,  52825.,  53700.,  52300.,  53200.,  54100.,  55000.,
      53525.,  54450.,  55375.,  56300.,  54750.,  55700.,  56650.,  57600.,
      42690.,  43460.,  44230.,  45000.,  31165.,  31750.,  32335.,  32920.,
      22040.,  22496.,  22952.,  23408.,  28536.,  29152.,  29768.,  30384.,
      34580.,  35360.,  36140.,  36920.,  35360.,  36160.,  36960.,  37760.,
      36140.,  36960.,  37780.,  38600.,  36920.,  37760.,  38600.,  39440.,
      28440.,  29120.,  29800.,  30480.,  20492.,  21008.,  21524.,  22040.,
      13458.,  13836.,  14214.,  14592.,  17150.,  17660.,  18170.,  18680.,
      20425.,  21070.,  21715.,  22360.,  20860.,  21520.,  22180.,  22840.,
      21295.,  21970.,  22645.,  23320.,  21730.,  22420.,  23110.,  23800.,
      16406.,  16964.,  17522.,  18080.,  11559.,  11982.,  12405.,  12828.,
      44346.,  44940.,  45534.,  46128.,  57998.,  58796.,  59594.,  60392.,
      71065.,  72070.,  73075.,  74080.,  72100.,  73120.,  74140.,  75160.,
      73135.,  74170.,  75205.,  76240.,  74170.,  75220.,  76270.,  77320.,
      58022.,  58868.,  59714.,  60560.,  42519.,  43158.,  43797.,  44436.,
      55352.,  56192.,  57032.,  57872.,  72088.,  73216.,  74344.,  75472.,
      87940.,  89360.,  90780.,  92200.,  89120.,  90560.,  92000.,  93440.,
      90300.,  91760.,  93220.,  94680.,  91480.,  92960.,  94440.,  95920.,
      71224.,  72416.,  73608.,  74800.,  51932.,  52832.,  53732.,  54632.,
      63670.,  64780.,  65890.,  67000.,  82490.,  83980.,  85470.,  86960.,
      100075., 101950., 103825., 105700., 101300., 103200., 105100., 107000.,
      102525., 104450., 106375., 108300., 103750., 105700., 107650., 109600.,
      80290.,  81860.,  83430.,  85000.,  58165.,  59350.,  60535.,  61720.,
      70030.,  71260.,  72490.,  73720.,  90650.,  92300.,  93950.,  95600.,
      109875., 111950., 114025., 116100., 111100., 113200., 115300., 117400.,
      112325., 114450., 116575., 118700., 113550., 115700., 117850., 120000.,
      87810.,  89540.,  91270.,  93000.,  63565.,  64870.,  66175.,  67480.,
      76390.,  77740.,  79090.,  80440.,  98810.,  100620., 102430., 104240.,
      119675., 121950., 124225., 126500., 120900., 123200., 125500., 127800.,
      122125., 124450., 126775., 129100., 123350., 125700., 128050., 130400.,
      95330.,  97220.,  99110.,  101000., 68965.,  70390.,  71815.,  73240.,
      50936.,  52064.,  53192.,  54320.,  65272.,  66784.,  68296.,  69808.,
      78260.,  80160.,  82060.,  83960.,  79040.,  80960.,  82880.,  84800.,
      79820.,  81760.,  83700.,  85640.,  80600.,  82560.,  84520.,  86480.,
      61592.,  63168.,  64744.,  66320.,  44012.,  45200.,  46388.,  47576.,
      30090.,  30972.,  31854.,  32736.,  37982.,  39164.,  40346.,  41528.,
      44785.,  46270.,  47755.,  49240.,  45220.,  46720.,  48220.,  49720.,
      45655.,  47170.,  48685.,  50200.,  46090.,  47620.,  49150.,  50680.,
      34550.,  35780.,  37010.,  38240.,  24159.,  25086.,  26013.,  26940.,
      81138.,  82236.,  83334.,  84432.,  105710., 107180., 108650., 110120.,
      129025., 130870., 132715., 134560., 130060., 131920., 133780., 135640.,
      131095., 132970., 134845., 136720., 132130., 134020., 135910., 137800.,
      103046., 104564., 106082., 107600., 75279.,  76422.,  77565.,  78708.,
      97688.,  99200.,  100712., 102224., 126744., 128768., 130792., 132816.,
      154020., 156560., 159100., 161640., 155200., 157760., 160320., 162880.,
      156380., 158960., 161540., 164120., 157560., 160160., 162760., 165360.,
      122296., 124384., 126472., 128560., 88892.,  90464.,  92036.,  93608.,
      108190., 110140., 112090., 114040., 139610., 142220., 144830., 147440.,
      168675., 171950., 175225., 178500., 169900., 173200., 176500., 179800.,
      171125., 174450., 177775., 181100., 172350., 175700., 179050., 182400.,
      132930., 135620., 138310., 141000., 95965.,  97990.,  100015., 102040.,
      114550., 116620., 118690., 120760., 147770., 150540., 153310., 156080.,
      178475., 181950., 185425., 188900., 179700., 183200., 186700., 190200.,
      180925., 184450., 187975., 191500., 182150., 185700., 189250., 192800.,
      140450., 143300., 146150., 149000., 101365., 103510., 105655., 107800.,
      120910., 123100., 125290., 127480., 155930., 158860., 161790., 164720.,
      188275., 191950., 195625., 199300., 189500., 193200., 196900., 200600.,
      190725., 194450., 198175., 201900., 191950., 195700., 199450., 203200.,
      147970., 150980., 153990., 157000., 106765., 109030., 111295., 113560.,
      79832.,  81632.,  83432.,  85232.,  102008., 104416., 106824., 109232.,
      121940., 124960., 127980., 131000., 122720., 125760., 128800., 131840.,
      123500., 126560., 129620., 132680., 124280., 127360., 130440., 133520.,
      94744.,  97216.,  99688.,  102160., 67532.,  69392.,  71252.,  73112.,
      46722.,  48108.,  49494.,  50880.,  58814.,  60668.,  62522.,  64376.,
      69145.,  71470.,  73795.,  76120.,  69580.,  71920.,  74260.,  76600.,
      70015.,  72370.,  74725.,  77080.,  70450.,  72820.,  75190.,  77560.,
      52694.,  54596.,  56498.,  58400.,  36759.,  38190.,  39621.,  41052.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      51075.,  51950.,  52825.,  53700.,  52300.,  53200.,  54100.,  55000.,
      53525.,  54450.,  55375.,  56300.,  54750.,  55700.,  56650.,  57600.,
      100075., 101950., 103825., 105700., 101300., 103200., 105100., 107000.,
      102525., 104450., 106375., 108300., 103750., 105700., 107650., 109600.,
      109875., 111950., 114025., 116100., 111100., 113200., 115300., 117400.,
      112325., 114450., 116575., 118700., 113550., 115700., 117850., 120000.,
      119675., 121950., 124225., 126500., 120900., 123200., 125500., 127800.,
      122125., 124450., 126775., 129100., 123350., 125700., 128050., 130400.,
      168675., 171950., 175225., 178500., 169900., 173200., 176500., 179800.,
      171125., 174450., 177775., 181100., 172350., 175700., 179050., 182400.,
      178475., 181950., 185425., 188900., 179700., 183200., 186700., 190200.,
      180925., 184450., 187975., 191500., 182150., 185700., 189250., 192800.,
      188275., 191950., 195625., 199300., 189500., 193200., 196900., 200600.,
      190725., 194450., 198175., 201900., 191950., 195700., 199450., 203200.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,   7824.,   9980.,   10664.,  12745.,  13600.,  13795.,  14680.,
      14845.,  15760.,  15895.,  16840.,  12764.,  13520.,  9597.,   10164.,
      12800.,  13520.,  17168.,  18128.,  21560.,  22760.,  22760.,  24000.,
      23960.,  25240.,  25160.,  26480.,  19984.,  21040.,  14864.,  15656.,
      19015.,  19960.,  25220.,  26480.,  31325.,  32900.,  32575.,  34200.,
      33825.,  35500.,  35075.,  36800.,  27620.,  29000.,  20365.,  21400.,
      25495.,  26680.,  33540.,  35120.,  41325.,  43300.,  42575.,  44600.,
      43825.,  45900.,  45075.,  47200.,  35300.,  37000.,  25885.,  27160.,
      31975.,  33400.,  41860.,  43760.,  51325.,  53700.,  52575.,  55000.,
      53825.,  56300.,  55075.,  57600.,  42980.,  45000.,  31405.,  32920.,
      22232.,  23408.,  28816.,  30384.,  34960.,  36920.,  35760.,  37760.,
      36560.,  38600.,  37360.,  39440.,  28816.,  30480.,  20792.,  22040.,
      13683.,  14592.,  17468.,  18680.,  20845.,  22360.,  21295.,  22840.,
      21745.,  23320.,  22195.,  23800.,  16796.,  18080.,  11865.,  12828.,
      44607.,  46128.,  58364.,  60392.,  71545.,  74080.,  72595.,  75160.,
      73645.,  76240.,  74695.,  77320.,  58460.,  60560.,  42861.,  44436.,
      55808.,  57872.,  72720.,  75472.,  88760.,  92200.,  89960.,  93440.,
      91160.,  94680.,  92360.,  95920.,  71952.,  74800.,  52496.,  54632.,
      64375.,  67000.,  83460.,  86960.,  101325., 105700., 102575., 107000.,
      103825., 108300., 105075., 109600., 81380.,  85000.,  59005.,  61720.,
      70855.,  73720.,  91780.,  95600.,  111325., 116100., 112575., 117400.,
      113825., 118700., 115075., 120000., 89060.,  93000.,  64525.,  67480.,
      77335.,  80440.,  100100., 104240., 121325., 126500., 122575., 127800.,
      123825., 129100., 125075., 130400., 96740.,  101000., 70045.,  73240.,
      51800.,  54320.,  66448.,  69808.,  79760.,  83960.,  80560.,  84800.,
      81360.,  85640.,  82160.,  86480.,  62864.,  66320.,  44984.,  47576.,
      30819.,  32736.,  38972.,  41528.,  46045.,  49240.,  46495.,  49720.,
      46945.,  50200.,  47395.,  50680.,  35612.,  38240.,  24969.,  26940.,
      81903.,  84432.,  106748., 110120., 130345., 134560., 131395., 135640.,
      132445., 136720., 133495., 137800., 104156., 107600., 76125.,  78708.,
      98816.,  102224., 128272., 132816., 155960., 161640., 157160., 162880.,
      158360., 164120., 159560., 165360., 123920., 128560., 90128.,  93608.,
      109735., 114040., 141700., 147440., 171325., 178500., 172575., 179800.,
      173825., 181100., 175075., 182400., 135140., 141000., 97645.,  102040.,
      116215., 120760., 150020., 156080., 181325., 188900., 182575., 190200.,
      183825., 191500., 185075., 192800., 142820., 149000., 103165., 107800.,
      122695., 127480., 158340., 164720., 191325., 199300., 192575., 200600.,
      193825., 201900., 195075., 203200., 150500., 157000., 108685., 113560.,
      81368.,  85232.,  104080., 109232., 124560., 131000., 125360., 131840.,
      126160., 132680., 126960., 133520., 96912.,  102160., 69176.,  73112.,
      47955.,  50880.,  60476.,  64376.,  71245.,  76120.,  71695.,  76600.,
      72145.,  77080.,  72595.,  77560.,  54428.,  58400.,  38073.,  41052.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325.,  32900.,  32575.,  34200.,  33825.,  35500.,  35075.,  36800.,
      41325.,  43300.,  42575.,  44600.,  43825.,  45900.,  45075.,  47200.,
      51325.,  53700.,  52575.,  55000.,  53825.,  56300.,  55075.,  57600.,
      101325., 105700., 102575., 107000., 103825., 108300., 105075., 109600.,
      111325., 116100., 112575., 117400., 113825., 118700., 115075., 120000.,
      121325., 126500., 122575., 127800., 123825., 129100., 125075., 130400.,
      171325., 178500., 172575., 179800., 173825., 181100., 175075., 182400.,
      181325., 188900., 182575., 190200., 183825., 191500., 185075., 192800.,
      191325., 199300., 192575., 200600., 193825., 201900., 195075., 203200.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451.,  14622.,  15468.,  15648.,  19720.,  19960.,  21076.,  21328.,
      25175.,  25490.,  26870.,  27200.,  27245.,  27590.,  29000.,  29360.,
      29315.,  29690.,  31130.,  31520.,  31385.,  31790.,  33260.,  33680.,
      25192.,  25528.,  26692.,  27040.,  18933.,  19194.,  20058.,  20328.,
      25276.,  25600.,  26704.,  27040.,  33888.,  34336.,  35792.,  36256.,
      42540.,  43120.,  44920.,  45520.,  44900.,  45520.,  47360.,  48000.,
      47260.,  47920.,  49800.,  50480.,  49620.,  50320.,  52240.,  52960.,
      39392.,  39968.,  41488.,  42080.,  29284.,  29728.,  30856.,  31312.,
      37505.,  38030.,  39380.,  39920.,  49720.,  50440.,  52220.,  52960.,
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      54360.,  55240.,  57100.,  58000.,  40055.,  40730.,  42110.,  42800.,
      50225.,  50990.,  52580.,  53360.,  66040.,  67080.,  69180.,  70240.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      69400.,  70600.,  72780.,  74000.,  50855.,  51770.,  53390.,  54320.,
      62945.,  63950.,  65780.,  66800.,  82360.,  83720.,  86140.,  87520.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      84440.,  85960.,  88460.,  90000.,  61655.,  62810.,  64670.,  65840.,
      43564.,  44464.,  45904.,  46816.,  56416.,  57632.,  59536.,  60768.,
      68380.,  69920.,  72280.,  73840.,  69940.,  71520.,  73920.,  75520.,
      71500.,  73120.,  75560.,  77200.,  73060.,  74720.,  77200.,  78880.,
      56288.,  57632.,  59600.,  60960.,  40564.,  41584.,  43048.,  44080.,
      26619.,  27366.,  28428.,  29184.,  33928.,  34936.,  36340.,  37360.,
      40415.,  41690.,  43430.,  44720.,  41285.,  42590.,  44360.,  45680.,
      42155.,  43490.,  45290.,  46640.,  43025.,  44390.,  46220.,  47600.,
      32488.,  33592.,  35044.,  36160.,  22893.,  23730.,  24810.,  25656.,
      88035.,  89214.,  91068.,  92256.,  115144., 116728., 119188., 120784.,
      141095., 143090., 146150., 148160., 143165., 145190., 148280., 150320.,
      145235., 147290., 150410., 152480., 147305., 149390., 152540., 154640.,
      115240., 116920., 119428., 121120., 84453.,  85722.,  87594.,  88872.,
      109948., 111616., 114064., 115744., 143200., 145440., 148688., 150944.,
      174700., 177520., 181560., 184400., 177060., 179920., 184000., 186880.,
      179420., 182320., 186440., 189360., 181780., 184720., 188880., 191840.,
      141536., 143904., 147216., 149600., 103204., 104992., 107464., 109264.,
      126545., 128750., 131780., 134000., 163960., 166920., 170940., 173920.,
      198925., 202650., 207650., 211400., 201375., 205150., 210200., 214000.,
      203825., 207650., 212750., 216600., 206275., 210150., 215300., 219200.,
      159640., 162760., 166860., 170000., 115655., 118010., 121070., 123440.,
      139265., 141710., 144980., 147440., 180280., 183560., 187900., 191200.,
      218525., 222650., 228050., 232200., 220975., 225150., 230600., 234800.,
      223425., 227650., 233150., 237400., 225875., 230150., 235700., 240000.,
      174680., 178120., 182540., 186000., 126455., 129050., 132350., 134960.,
      151985., 154670., 158180., 160880., 196600., 200200., 204860., 208480.,
      238125., 242650., 248450., 253000., 240575., 245150., 251000., 255600.,
      243025., 247650., 253550., 258200., 245475., 250150., 256100., 260800.,
      189720., 193480., 198220., 202000., 137255., 140090., 143630., 146480.,
      101356., 103600., 106384., 108640., 129888., 132896., 136592., 139616.,
      155740., 159520., 164120., 167920., 157300., 161120., 165760., 169600.,
      158860., 162720., 167400., 171280., 160420., 164320., 169040., 172960.,
      122592., 125728., 129488., 132640., 87604.,  89968.,  92776.,  95152.,
      59883.,  61638.,  63708.,  65472.,  75592.,  77944.,  80692.,  83056.,
      89135.,  92090.,  95510.,  98480.,  90005.,  92990.,  96440.,  99440.,
      90875.,  93890.,  97370.,  100400., 91745.,  94790.,  98300.,  101360.,
      68776.,  71224.,  74020.,  76480.,  48093.,  49938.,  52026.,  53880.,
      161619., 163806., 166668., 168864., 210568., 213496., 217300., 220240.,
      257015., 260690., 265430., 269120., 259085., 262790., 267560., 271280.,
      261155., 264890., 269690., 273440., 263225., 266990., 271820., 275600.,
      205288., 208312., 212164., 215200., 149973., 152250., 155130., 157416.,
      194620., 197632., 201424., 204448., 252512., 256544., 261584., 265632.,
      306860., 311920., 318200., 323280., 309220., 314320., 320640., 325760.,
      311580., 316720., 323080., 328240., 313940., 319120., 325520., 330720.,
      243680., 247840., 252944., 257120., 177124., 180256., 184072., 187216.,
      215585., 219470., 224180., 228080., 278200., 283400., 289660., 294880.,
      336125., 342650., 350450., 357000., 338575., 345150., 353000., 359600.,
      341025., 347650., 355550., 362200., 343475., 350150., 358100., 364800.,
      264920., 270280., 276620., 282000., 191255., 195290., 200030., 204080.,
      228305., 232430., 237380., 241520., 294520., 300040., 306620., 312160.,
      355725., 362650., 370850., 377800., 358175., 365150., 373400., 380400.,
      360625., 367650., 375950., 383000., 363075., 370150., 378500., 385600.,
      279960., 285640., 292300., 298000., 202055., 206330., 211310., 215600.,
      241025., 245390., 250580., 254960., 310840., 316680., 323580., 329440.,
      375325., 382650., 391250., 398600., 377775., 385150., 393800., 401200.,
      380225., 387650., 396350., 403800., 382675., 390150., 398900., 406400.,
      295000., 301000., 307980., 314000., 212855., 217370., 222590., 227120.,
      159148., 162736., 166864., 170464., 203360., 208160., 213648., 218464.,
      243100., 249120., 255960., 262000., 244660., 250720., 257600., 263680.,
      246220., 252320., 259240., 265360., 247780., 253920., 260880., 267040.,
      188896., 193824., 199376., 204320., 134644., 138352., 142504., 146224.,
      93147.,  95910.,  98988.,  101760., 117256., 120952., 125044., 128752.,
      137855., 142490., 147590., 152240., 138725., 143390., 148520., 153200.,
      139595., 144290., 149450., 154160., 140465., 145190., 150380., 155120.,
      105064., 108856., 112996., 116800., 73293.,  76146.,  79242.,  82104.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      198925., 202650., 207650., 211400., 201375., 205150., 210200., 214000.,
      203825., 207650., 212750., 216600., 206275., 210150., 215300., 219200.,
      218525., 222650., 228050., 232200., 220975., 225150., 230600., 234800.,
      223425., 227650., 233150., 237400., 225875., 230150., 235700., 240000.,
      238125., 242650., 248450., 253000., 240575., 245150., 251000., 255600.,
      243025., 247650., 253550., 258200., 245475., 250150., 256100., 260800.,
      336125., 342650., 350450., 357000., 338575., 345150., 353000., 359600.,
      341025., 347650., 355550., 362200., 343475., 350150., 358100., 364800.,
      355725., 362650., 370850., 377800., 358175., 365150., 373400., 380400.,
      360625., 367650., 375950., 383000., 363075., 370150., 378500., 385600.,
      375325., 382650., 391250., 398600., 377775., 385150., 393800., 401200.,
      380225., 387650., 396350., 403800., 382675., 390150., 398900., 406400.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      124885., 125890., 126895., 127900., 130540., 131560., 132580., 133600.,
      163360., 164720., 166080., 167440., 170900., 172280., 173660., 175040.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      167360., 168880., 170400., 171920., 175380., 176920., 178460., 180000.,
      122155., 123310., 124465., 125620., 128170., 129340., 130510., 131680.,
      86228.,  87128.,  88028.,  88928.,  90896.,  91808.,  92720.,  93632.,
      111616., 112832., 114048., 115264., 117840., 119072., 120304., 121536.,
      135220., 136760., 138300., 139840., 143000., 144560., 146120., 147680.,
      138300., 139880., 141460., 143040., 146240., 147840., 149440., 151040.,
      141380., 143000., 144620., 146240., 149480., 151120., 152760., 154400.,
      144460., 146120., 147780., 149440., 152720., 154400., 156080., 157760.,
      111232., 112576., 113920., 115264., 117840., 119200., 120560., 121920.,
      80108.,  81128.,  82148.,  83168.,  85064.,  86096.,  87128.,  88160.,
      52491.,  53238.,  53985.,  54732.,  56100.,  56856.,  57612.,  58368.,
      66848.,  67856.,  68864.,  69872.,  71660.,  72680.,  73700.,  74720.,
      79555.,  80830.,  82105.,  83380.,  85570.,  86860.,  88150.,  89440.,
      81265.,  82570.,  83875.,  85180.,  87400.,  88720.,  90040.,  91360.,
      82975.,  84310.,  85645.,  86980.,  89230.,  90580.,  91930.,  93280.,
      84685.,  86050.,  87415.,  88780.,  91060.,  92440.,  93820.,  95200.,
      63872.,  64976.,  66080.,  67184.,  68972.,  70088.,  71204.,  72320.,
      44949.,  45786.,  46623.,  47460.,  48774.,  49620.,  50466.,  51312.,
      174891., 176070., 177249., 178428., 180948., 182136., 183324., 184512.,
      228704., 230288., 231872., 233456., 236780., 238376., 239972., 241568.,
      280195., 282190., 284185., 286180., 290290., 292300., 294310., 296320.,
      284305., 286330., 288355., 290380., 294520., 296560., 298600., 300640.,
      288415., 290470., 292525., 294580., 298750., 300820., 302890., 304960.,
      292525., 294610., 296695., 298780., 302980., 305080., 307180., 309280.,
      228800., 230480., 232160., 233840., 237164., 238856., 240548., 242240.,
      167637., 168906., 170175., 171444., 173910., 175188., 176466., 177744.,
      218228., 219896., 221564., 223232., 226448., 228128., 229808., 231488.,
      284160., 286400., 288640., 290880., 295120., 297376., 299632., 301888.,
      346580., 349400., 352220., 355040., 360280., 363120., 365960., 368800.,
      351260., 354120., 356980., 359840., 365120., 368000., 370880., 373760.,
      355940., 358840., 361740., 364640., 369960., 372880., 375800., 378720.,
      360620., 363560., 366500., 369440., 374800., 377760., 380720., 383680.,
      280704., 283072., 285440., 287808., 292048., 294432., 296816., 299200.,
      204620., 206408., 208196., 209984., 213128., 214928., 216728., 218528.,
      250885., 253090., 255295., 257500., 261340., 263560., 265780., 268000.,
      324960., 327920., 330880., 333840., 338900., 341880., 344860., 347840.,
      394125., 397850., 401575., 405300., 411550., 415300., 419050., 422800.,
      398975., 402750., 406525., 410300., 416600., 420400., 424200., 428000.,
      403825., 407650., 411475., 415300., 421650., 425500., 429350., 433200.,
      408675., 412550., 416425., 420300., 426700., 430600., 434500., 438400.,
      316160., 319280., 322400., 325520., 330580., 333720., 336860., 340000.,
      228955., 231310., 233665., 236020., 239770., 242140., 244510., 246880.,
      276085., 278530., 280975., 283420., 287500., 289960., 292420., 294880.,
      357280., 360560., 363840., 367120., 372500., 375800., 379100., 382400.,
      432925., 437050., 441175., 445300., 451950., 456100., 460250., 464400.,
      437775., 441950., 446125., 450300., 457000., 461200., 465400., 469600.,
      442625., 446850., 451075., 455300., 462050., 466300., 470550., 474800.,
      447475., 451750., 456025., 460300., 467100., 471400., 475700., 480000.,
      345920., 349360., 352800., 356240., 361620., 365080., 368540., 372000.,
      250315., 252910., 255505., 258100., 262090., 264700., 267310., 269920.,
      301285., 303970., 306655., 309340., 313660., 316360., 319060., 321760.,
      389600., 393200., 396800., 400400., 406100., 409720., 413340., 416960.,
      471725., 476250., 480775., 485300., 492350., 496900., 501450., 506000.,
      476575., 481150., 485725., 490300., 497400., 502000., 506600., 511200.,
      481425., 486050., 490675., 495300., 502450., 507100., 511750., 516400.,
      486275., 490950., 495625., 500300., 507500., 512200., 516900., 521600.,
      375680., 379440., 383200., 386960., 392660., 396440., 400220., 404000.,
      271675., 274510., 277345., 280180., 284410., 287260., 290110., 292960.,
      200468., 202712., 204956., 207200., 210512., 212768., 215024., 217280.,
      256768., 259776., 262784., 265792., 270160., 273184., 276208., 279232.,
      307700., 311480., 315260., 319040., 324440., 328240., 332040., 335840.,
      310780., 314600., 318420., 322240., 327680., 331520., 335360., 339200.,
      313860., 317720., 321580., 325440., 330920., 334800., 338680., 342560.,
      316940., 320840., 324740., 328640., 334160., 338080., 342000., 345920.,
      242048., 245184., 248320., 251456., 255824., 258976., 262128., 265280.,
      172844., 175208., 177572., 179936., 183176., 185552., 187928., 190304.,
      118011., 119766., 121521., 123276., 125652., 127416., 129180., 130944.,
      148832., 151184., 153536., 155888., 159020., 161384., 163748., 166112.,
      175315., 178270., 181225., 184180., 188050., 191020., 193990., 196960.,
      177025., 180010., 182995., 185980., 189880., 192880., 195880., 198880.,
      178735., 181750., 184765., 187780., 191710., 194740., 197770., 200800.,
      180445., 183490., 186535., 189580., 193540., 196600., 199660., 202720.,
      135104., 137552., 140000., 142448., 145580., 148040., 150500., 152960.,
      94341.,  96186.,  98031.,  99876.,  102198., 104052., 105906., 107760.,
      321051., 323238., 325425., 327612., 331140., 333336., 335532., 337728.,
      418208., 421136., 424064., 426992., 431660., 434600., 437540., 440480.,
      510355., 514030., 517705., 521380., 527170., 530860., 534550., 538240.,
      514465., 518170., 521875., 525580., 531400., 535120., 538840., 542560.,
      518575., 522310., 526045., 529780., 535630., 539380., 543130., 546880.,
      522685., 526450., 530215., 533980., 539860., 543640., 547420., 551200.,
      407552., 410576., 413600., 416624., 421292., 424328., 427364., 430400.,
      297669., 299946., 302223., 304500., 307974., 310260., 312546., 314832.,
      386228., 389240., 392252., 395264., 399824., 402848., 405872., 408896.,
      500992., 505024., 509056., 513088., 519120., 523168., 527216., 531264.,
      608660., 613720., 618780., 623840., 631320., 636400., 641480., 646560.,
      613340., 618440., 623540., 628640., 636160., 641280., 646400., 651520.,
      618020., 623160., 628300., 633440., 641000., 646160., 651320., 656480.,
      622700., 627880., 633060., 638240., 645840., 651040., 656240., 661440.,
      483200., 487360., 491520., 495680., 501712., 505888., 510064., 514240.,
      351116., 354248., 357380., 360512., 365000., 368144., 371288., 374432.,
      427285., 431170., 435055., 438940., 444460., 448360., 452260., 456160.,
      551200., 556400., 561600., 566800., 574100., 579320., 584540., 589760.,
      665725., 672250., 678775., 685300., 694350., 700900., 707450., 714000.,
      670575., 677150., 683725., 690300., 699400., 706000., 712600., 719200.,
      675425., 682050., 688675., 695300., 704450., 711100., 717750., 724400.,
      680275., 686950., 693625., 700300., 709500., 716200., 722900., 729600.,
      524480., 529840., 535200., 540560., 547860., 553240., 558620., 564000.,
      378475., 382510., 386545., 390580., 396010., 400060., 404110., 408160.,
      452485., 456610., 460735., 464860., 470620., 474760., 478900., 483040.,
      583520., 589040., 594560., 600080., 607700., 613240., 618780., 624320.,
      704525., 711450., 718375., 725300., 734750., 741700., 748650., 755600.,
      709375., 716350., 723325., 730300., 739800., 746800., 753800., 760800.,
      714225., 721250., 728275., 735300., 744850., 751900., 758950., 766000.,
      719075., 726150., 733225., 740300., 749900., 757000., 764100., 771200.,
      554240., 559920., 565600., 571280., 578900., 584600., 590300., 596000.,
      399835., 404110., 408385., 412660., 418330., 422620., 426910., 431200.,
      477685., 482050., 486415., 490780., 496780., 501160., 505540., 509920.,
      615840., 621680., 627520., 633360., 641300., 647160., 653020., 658880.,
      743325., 750650., 757975., 765300., 775150., 782500., 789850., 797200.,
      748175., 755550., 762925., 770300., 780200., 787600., 795000., 802400.,
      753025., 760450., 767875., 775300., 785250., 792700., 800150., 807600.,
      757875., 765350., 772825., 780300., 790300., 797800., 805300., 812800.,
      584000., 590000., 596000., 602000., 609940., 615960., 621980., 628000.,
      421195., 425710., 430225., 434740., 440650., 445180., 449710., 454240.,
      314708., 318296., 321884., 325472., 330128., 333728., 337328., 340928.,
      401920., 406720., 411520., 416320., 422480., 427296., 432112., 436928.,
      480180., 486200., 492220., 498240., 505880., 511920., 517960., 524000.,
      483260., 489320., 495380., 501440., 509120., 515200., 521280., 527360.,
      486340., 492440., 498540., 504640., 512360., 518480., 524600., 530720.,
      489420., 495560., 501700., 507840., 515600., 521760., 527920., 534080.,
      372864., 377792., 382720., 387648., 393808., 398752., 403696., 408640.,
      265580., 269288., 272996., 276704., 281288., 285008., 288728., 292448.,
      183531., 186294., 189057., 191820., 195204., 197976., 200748., 203520.,
      230816., 234512., 238208., 241904., 246380., 250088., 253796., 257504.,
      271075., 275710., 280345., 284980., 290530., 295180., 299830., 304480.,
      272785., 277450., 282115., 286780., 292360., 297040., 301720., 306400.,
      274495., 279190., 283885., 288580., 294190., 298900., 303610., 308320.,
      276205., 280930., 285655., 290380., 296020., 300760., 305500., 310240.,
      206336., 210128., 213920., 217712., 222188., 225992., 229796., 233600.,
      143733., 146586., 149439., 152292., 155622., 158484., 161346., 164208.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      394125., 397850., 401575., 405300., 411550., 415300., 419050., 422800.,
      398975., 402750., 406525., 410300., 416600., 420400., 424200., 428000.,
      403825., 407650., 411475., 415300., 421650., 425500., 429350., 433200.,
      408675., 412550., 416425., 420300., 426700., 430600., 434500., 438400.,
      432925., 437050., 441175., 445300., 451950., 456100., 460250., 464400.,
      437775., 441950., 446125., 450300., 457000., 461200., 465400., 469600.,
      442625., 446850., 451075., 455300., 462050., 466300., 470550., 474800.,
      447475., 451750., 456025., 460300., 467100., 471400., 475700., 480000.,
      471725., 476250., 480775., 485300., 492350., 496900., 501450., 506000.,
      476575., 481150., 485725., 490300., 497400., 502000., 506600., 511200.,
      481425., 486050., 490675., 495300., 502450., 507100., 511750., 516400.,
      486275., 490950., 495625., 500300., 507500., 512200., 516900., 521600.,
      665725., 672250., 678775., 685300., 694350., 700900., 707450., 714000.,
      670575., 677150., 683725., 690300., 699400., 706000., 712600., 719200.,
      675425., 682050., 688675., 695300., 704450., 711100., 717750., 724400.,
      680275., 686950., 693625., 700300., 709500., 716200., 722900., 729600.,
      704525., 711450., 718375., 725300., 734750., 741700., 748650., 755600.,
      709375., 716350., 723325., 730300., 739800., 746800., 753800., 760800.,
      714225., 721250., 728275., 735300., 744850., 751900., 758950., 766000.,
      719075., 726150., 733225., 740300., 749900., 757000., 764100., 771200.,
      743325., 750650., 757975., 765300., 775150., 782500., 789850., 797200.,
      748175., 755550., 762925., 770300., 780200., 787600., 795000., 802400.,
      753025., 760450., 767875., 775300., 785250., 792700., 800150., 807600.,
      757875., 765350., 772825., 780300., 790300., 797800., 805300., 812800.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      125095., 127900., 130735., 133600., 163700., 167440., 171220., 175040.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      167940., 171920., 175940., 180000., 122635., 125620., 128635., 131680.,
      86612.,  88928.,  91268.,  93632.,  112176., 115264., 118384., 121536.,
      135980., 139840., 143740., 147680., 139100., 143040., 147020., 151040.,
      142220., 146240., 150300., 154400., 145340., 149440., 153580., 157760.,
      111984., 115264., 118576., 121920., 80708.,  83168.,  85652.,  88160.,
      52941.,  54732.,  56541.,  58368.,  67484.,  69872.,  72284.,  74720.,
      80395.,  83380.,  86395.,  89440.,  82135.,  85180.,  88255.,  91360.,
      83875.,  86980.,  90115.,  93280.,  85615.,  88780.,  91975.,  95200.,
      64652.,  67184.,  69740.,  72320.,  45561.,  47460.,  49377.,  51312.,
      175413., 178428., 181461., 184512., 229436., 233456., 237500., 241568.,
      281155., 286180., 291235., 296320., 285295., 290380., 295495., 300640.,
      289435., 294580., 299755., 304960., 293575., 298780., 304015., 309280.,
      229676., 233840., 238028., 242240., 168321., 171444., 174585., 177744.,
      219140., 223232., 227348., 231488., 285424., 290880., 296368., 301888.,
      348220., 355040., 361900., 368800., 352940., 359840., 366780., 373760.,
      357660., 364640., 371660., 378720., 362380., 369440., 376540., 383680.,
      282160., 287808., 293488., 299200., 205748., 209984., 214244., 218528.,
      252295., 257500., 262735., 268000., 326900., 333840., 340820., 347840.,
      396625., 405300., 414025., 422800., 401525., 410300., 419125., 428000.,
      406425., 415300., 424225., 433200., 411325., 420300., 429325., 438400.,
      318340., 325520., 332740., 340000., 230635., 236020., 241435., 246880.,
      277735., 283420., 289135., 294880., 359540., 367120., 374740., 382400.,
      435825., 445300., 454825., 464400., 440725., 450300., 459925., 469600.,
      445625., 455300., 465025., 474800., 450525., 460300., 470125., 480000.,
      348420., 356240., 364100., 372000., 252235., 258100., 263995., 269920.,
      303175., 309340., 315535., 321760., 392180., 400400., 408660., 416960.,
      475025., 485300., 495625., 506000., 479925., 490300., 500725., 511200.,
      484825., 495300., 505825., 516400., 489725., 500300., 510925., 521600.,
      378500., 386960., 395460., 404000., 273835., 280180., 286555., 292960.,
      202196., 207200., 212228., 217280., 259120., 265792., 272496., 279232.,
      310700., 319040., 327420., 335840., 313820., 322240., 330700., 339200.,
      316940., 325440., 333980., 342560., 320060., 328640., 337260., 345920.,
      244592., 251456., 258352., 265280., 174788., 179936., 185108., 190304.,
      119469., 123276., 127101., 130944., 150812., 155888., 160988., 166112.,
      177835., 184180., 190555., 196960., 179575., 185980., 192415., 198880.,
      181315., 187780., 194275., 200800., 183055., 189580., 196135., 202720.,
      137228., 142448., 147692., 152960., 95961.,  99876.,  103809., 107760.,
      322581., 327612., 332661., 337728., 420284., 426992., 433724., 440480.,
      512995., 521380., 529795., 538240., 517135., 525580., 534055., 542560.,
      521275., 529780., 538315., 546880., 525415., 533980., 542575., 551200.,
      409772., 416624., 423500., 430400., 299361., 304500., 309657., 314832.,
      388484., 395264., 402068., 408896., 504048., 513088., 522160., 531264.,
      612540., 623840., 635180., 646560., 617260., 628640., 640060., 651520.,
      621980., 633440., 644940., 656480., 626700., 638240., 649820., 661440.,
      486448., 495680., 504944., 514240., 353588., 360512., 367460., 374432.,
      430375., 438940., 447535., 456160., 555380., 566800., 578260., 589760.,
      671025., 685300., 699625., 714000., 675925., 690300., 704725., 719200.,
      680825., 695300., 709825., 724400., 685725., 700300., 714925., 729600.,
      528900., 540560., 552260., 564000., 381835., 390580., 399355., 408160.,
      455815., 464860., 473935., 483040., 588020., 600080., 612180., 624320.,
      710225., 725300., 740425., 755600., 715125., 730300., 745525., 760800.,
      720025., 735300., 750625., 766000., 724925., 740300., 755725., 771200.,
      558980., 571280., 583620., 596000., 403435., 412660., 421915., 431200.,
      481255., 490780., 500335., 509920., 620660., 633360., 646100., 658880.,
      749425., 765300., 781225., 797200., 754325., 770300., 786325., 802400.,
      759225., 775300., 791425., 807600., 764125., 780300., 796525., 812800.,
      589060., 602000., 614980., 628000., 425035., 434740., 444475., 454240.,
      317780., 325472., 333188., 340928., 406064., 416320., 426608., 436928.,
      485420., 498240., 511100., 524000., 488540., 501440., 514380., 527360.,
      491660., 504640., 517660., 530720., 494780., 507840., 520940., 534080.,
      377200., 387648., 398128., 408640., 268868., 276704., 284564., 292448.,
      185997., 191820., 197661., 203520., 234140., 241904., 249692., 257504.,
      275275., 284980., 294715., 304480., 277015., 286780., 296575., 306400.,
      278755., 288580., 298435., 308320., 280495., 290380., 300295., 310240.,
      209804., 217712., 225644., 233600., 146361., 152292., 158241., 164208.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      396625., 405300., 414025., 422800., 401525., 410300., 419125., 428000.,
      406425., 415300., 424225., 433200., 411325., 420300., 429325., 438400.,
      435825., 445300., 454825., 464400., 440725., 450300., 459925., 469600.,
      445625., 455300., 465025., 474800., 450525., 460300., 470125., 480000.,
      475025., 485300., 495625., 506000., 479925., 490300., 500725., 511200.,
      484825., 495300., 505825., 516400., 489725., 500300., 510925., 521600.,
      671025., 685300., 699625., 714000., 675925., 690300., 704725., 719200.,
      680825., 695300., 709825., 724400., 685725., 700300., 714925., 729600.,
      710225., 725300., 740425., 755600., 715125., 730300., 745525., 760800.,
      720025., 735300., 750625., 766000., 724925., 740300., 755725., 771200.,
      749425., 765300., 781225., 797200., 754325., 770300., 786325., 802400.,
      759225., 775300., 791425., 807600., 764125., 780300., 796525., 812800.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,   56490.,   58146.,   58488.,   60171.,   60522.,   62232.,
      62592.,   76708.,   77176.,   79360.,   79840.,   82060.,   82552.,
      84808.,   85312.,   98015.,   98630.,   101330.,  101960.,  104705.,
      105350.,  108140.,  108800.,  106235.,  106910.,  109670.,  110360.,
      113165.,  113870.,  116720.,  117440.,  114455.,  115190.,  118010.,
      118760.,  121625.,  122390.,  125300.,  126080.,  122675.,  123470.,
      126350.,  127160.,  130085.,  130910.,  133880.,  134720.,  98500.,
      99160.,   101440.,  102112.,  104428.,  105112.,  107464.,  108160.,
      74049.,   74562.,   76254.,   76776.,   78495.,   79026.,   80772.,
      81312.,   98956.,   99592.,   101752.,  102400.,  104596.,  105256.,
      107488.,  108160.,  132720.,  133600.,  136448.,  137344.,  140240.,
      141152.,  144096.,  145024.,  166660.,  167800.,  171320.,  172480.,
      176060.,  177240.,  180880.,  182080.,  176020.,  177240.,  180840.,
      182080.,  185740.,  187000.,  190720.,  192000.,  185380.,  186680.,
      190360.,  191680.,  195420.,  196760.,  200560.,  201920.,  194740.,
      196120.,  199880.,  201280.,  205100.,  206520.,  210400.,  211840.,
      154608.,  155744.,  158720.,  159872.,  162896.,  164064.,  167136.,
      168320.,  114940.,  115816.,  118024.,  118912.,  121156.,  122056.,
      124336.,  125248.,  147395.,  148430.,  151070.,  152120.,  154805.,
      155870.,  158600.,  159680.,  195420.,  196840.,  200320.,  201760.,
      205300.,  206760.,  210360.,  211840.,  242625.,  244450.,  248750.,
      250600.,  254975.,  256850.,  261300.,  263200.,  252325.,  254250.,
      258650.,  260600.,  265075.,  267050.,  271600.,  273600.,  262025.,
      264050.,  268550.,  270600.,  275175.,  277250.,  281900.,  284000.,
      271725.,  273850.,  278450.,  280600.,  285275.,  287450.,  292200.,
      294400.,  213820.,  215560.,  219200.,  220960.,  224660.,  226440.,
      230200.,  232000.,  157535.,  158870.,  161570.,  162920.,  165665.,
      167030.,  169820.,  171200.,  197795.,  199310.,  202430.,  203960.,
      207125.,  208670.,  211880.,  213440.,  260060.,  262120.,  266240.,
      268320.,  272500.,  274600.,  278840.,  280960.,  320225.,  322850.,
      327950.,  330600.,  335775.,  338450.,  343700.,  346400.,  329925.,
      332650.,  337850.,  340600.,  345875.,  348650.,  354000.,  356800.,
      339625.,  342450.,  347750.,  350600.,  355975.,  358850.,  364300.,
      367200.,  349325.,  352250.,  357650.,  360600.,  366075.,  369050.,
      374600.,  377600.,  273340.,  275720.,  280000.,  282400.,  286740.,
      289160.,  293560.,  296000.,  200255.,  202070.,  205250.,  207080.,
      210305.,  212150.,  215420.,  217280.,  248195.,  250190.,  253790.,
      255800.,  259445.,  261470.,  265160.,  267200.,  324700.,  327400.,
      332160.,  334880.,  339700.,  342440.,  347320.,  350080.,  397825.,
      401250.,  407150.,  410600.,  416575.,  420050.,  426100.,  429600.,
      407525.,  411050.,  417050.,  420600.,  426675.,  430250.,  436400.,
      440000.,  417225.,  420850.,  426950.,  430600.,  436775.,  440450.,
      446700.,  450400.,  426925.,  430650.,  436850.,  440600.,  446875.,
      450650.,  457000.,  460800.,  332860.,  335880.,  340800.,  343840.,
      348820.,  351880.,  356920.,  360000.,  242975.,  245270.,  248930.,
      251240.,  254945.,  257270.,  261020.,  263360.,  171436.,  173224.,
      176056.,  177856.,  180724.,  182536.,  185440.,  187264.,  221936.,
      224352.,  228096.,  230528.,  234320.,  236768.,  240608.,  243072.,
      268900.,  271960.,  276600.,  279680.,  284380.,  287480.,  292240.,
      295360.,  275060.,  278200.,  282920.,  286080.,  290860.,  294040.,
      298880.,  302080.,  281220.,  284440.,  289240.,  292480.,  297340.,
      300600.,  305520.,  308800.,  287380.,  290680.,  295560.,  298880.,
      303820.,  307160.,  312160.,  315520.,  221296.,  223968.,  227840.,
      230528.,  234448.,  237152.,  241120.,  243840.,  159388.,  161416.,
      164296.,  166336.,  169252.,  171304.,  174256.,  176320.,  104397.,
      105882.,  107970.,  109464.,  111579.,  113082.,  115224.,  116736.,
      132964.,  134968.,  137728.,  139744.,  142540.,  144568.,  147400.,
      149440.,  158255.,  160790.,  164210.,  166760.,  170225.,  172790.,
      176300.,  178880.,  161675.,  164270.,  167750.,  170360.,  173885.,
      176510.,  180080.,  182720.,  165095.,  167750.,  171290.,  173960.,
      177545.,  180230.,  183860.,  186560.,  168515.,  171230.,  174830.,
      177560.,  181205.,  183950.,  187640.,  190400.,  127108.,  129304.,
      132160.,  134368.,  137260.,  139480.,  142408.,  144640.,  89457.,
      91122.,   93246.,   94920.,   97071.,   98754.,   100932.,  102624.,
      348477.,  350826.,  354498.,  356856.,  360555.,  362922.,  366648.,
      369024.,  455716.,  458872.,  463744.,  466912.,  471820.,  475000.,
      479944.,  483136.,  558335.,  562310.,  568370.,  572360.,  578465.,
      582470.,  588620.,  592640.,  566555.,  570590.,  576710.,  580760.,
      586925.,  590990.,  597200.,  601280.,  574775.,  578870.,  585050.,
      589160.,  595385.,  599510.,  605780.,  609920.,  582995.,  587150.,
      593390.,  597560.,  603845.,  608030.,  614360.,  618560.,  456004.,
      459352.,  464320.,  467680.,  472684.,  476056.,  481096.,  484480.,
      334113.,  336642.,  340350.,  342888.,  346623.,  349170.,  352932.,
      355488.,  434956.,  438280.,  443128.,  446464.,  451348.,  454696.,
      459616.,  462976.,  566384.,  570848.,  577280.,  581760.,  588240.,
      592736.,  599264.,  603776.,  690820.,  696440.,  704440.,  710080.,
      718140.,  723800.,  731920.,  737600.,  700180.,  705880.,  713960.,
      719680.,  727820.,  733560.,  741760.,  747520.,  709540.,  715320.,
      723480.,  729280.,  737500.,  743320.,  751600.,  757440.,  718900.,
      724760.,  733000.,  738880.,  747180.,  753080.,  761440.,  767360.,
      559600.,  564320.,  570880.,  575616.,  582224.,  586976.,  593632.,
      598400.,  407932.,  411496.,  416392.,  419968.,  424900.,  428488.,
      433456.,  437056.,  500195.,  504590.,  510590.,  515000.,  521045.,
      525470.,  531560.,  536000.,  647900.,  653800.,  661760.,  667680.,
      675700.,  681640.,  689720.,  695680.,  785825.,  793250.,  803150.,
      810600.,  820575.,  828050.,  838100.,  845600.,  795525.,  803050.,
      813050.,  820600.,  830675.,  838250.,  848400.,  856000.,  805225.,
      812850.,  822950.,  830600.,  840775.,  848450.,  858700.,  866400.,
      814925.,  822650.,  832850.,  840600.,  850875.,  858650.,  869000.,
      876800.,  630460.,  636680.,  644800.,  651040.,  659220.,  665480.,
      673720.,  680000.,  456575.,  461270.,  467330.,  472040.,  478145.,
      482870.,  489020.,  493760.,  550595.,  555470.,  561950.,  566840.,
      573365.,  578270.,  584840.,  589760.,  712540.,  719080.,  727680.,
      734240.,  742900.,  749480.,  758200.,  764800.,  863425.,  871650.,
      882350.,  890600.,  901375.,  909650.,  920500.,  928800.,  873125.,
      881450.,  892250.,  900600.,  911475.,  919850.,  930800.,  939200.,
      882825.,  891250.,  902150.,  910600.,  921575.,  930050.,  941100.,
      949600.,  892525.,  901050.,  912050.,  920600.,  931675.,  940250.,
      951400.,  960000.,  689980.,  696840.,  705600.,  712480.,  721300.,
      728200.,  737080.,  744000.,  499295.,  504470.,  511010.,  516200.,
      522785.,  527990.,  534620.,  539840.,  600995.,  606350.,  613310.,
      618680.,  625685.,  631070.,  638120.,  643520.,  777180.,  784360.,
      793600.,  800800.,  810100.,  817320.,  826680.,  833920.,  941025.,
      950050.,  961550.,  970600.,  982175.,  991250.,  1002900., 1012000.,
      950725.,  959850.,  971450.,  980600.,  992275.,  1001450., 1013200.,
      1022400., 960425.,  969650.,  981350.,  990600.,  1002375., 1011650.,
      1023500., 1032800., 970125.,  979450.,  991250.,  1000600., 1012475.,
      1021850., 1033800., 1043200., 749500.,  757000.,  766400.,  773920.,
      783380.,  790920.,  800440.,  808000.,  542015.,  547670.,  554690.,
      560360.,  567425.,  573110.,  580220.,  585920.,  399916.,  404392.,
      409912.,  414400.,  419956.,  424456.,  430048.,  434560.,  512240.,
      518240.,  525568.,  531584.,  538960.,  544992.,  552416.,  558464.,
      613860.,  621400.,  630520.,  638080.,  647260.,  654840.,  664080.,
      671680.,  620020.,  627640.,  636840.,  644480.,  653740.,  661400.,
      670720.,  678400.,  626180.,  633880.,  643160.,  650880.,  660220.,
      667960.,  677360.,  685120.,  632340.,  640120.,  649480.,  657280.,
      666700.,  674520.,  684000.,  691840.,  482928.,  489184.,  496640.,
      502912.,  510416.,  516704.,  524256.,  530560.,  344860.,  349576.,
      355144.,  359872.,  365476.,  370216.,  375856.,  380608.,  235437.,
      238938.,  243042.,  246552.,  250683.,  254202.,  258360.,  261888.,
      296932.,  301624.,  307072.,  311776.,  317260.,  321976.,  327496.,
      332224.,  349775.,  355670.,  362450.,  368360.,  375185.,  381110.,
      387980.,  393920.,  353195.,  359150.,  365990.,  371960.,  378845.,
      384830.,  391760.,  397760.,  356615.,  362630.,  369530.,  375560.,
      382505.,  388550.,  395540.,  401600.,  360035.,  366110.,  373070.,
      379160.,  386165.,  392270.,  399320.,  405440.,  269572.,  274456.,
      280000.,  284896.,  290476.,  295384.,  301000.,  305920.,  188241.,
      191922.,  196062.,  199752.,  203919.,  207618.,  211812.,  215520.,
      640797.,  645162.,  650850.,  655224.,  660939.,  665322.,  671064.,
      675456.,  834724.,  840568.,  848128.,  853984.,  861580.,  867448.,
      875080.,  880960.,  1018655., 1025990., 1035410., 1042760., 1052225.,
      1059590., 1069100., 1076480., 1026875., 1034270., 1043750., 1051160.,
      1060685., 1068110., 1077680., 1085120., 1035095., 1042550., 1052090.,
      1059560., 1069145., 1076630., 1086260., 1093760., 1043315., 1050830.,
      1060430., 1067960., 1077605., 1085150., 1094840., 1102400., 813508.,
      819544.,  827200.,  833248.,  840940.,  847000.,  854728.,  860800.,
      594177.,  598722.,  604446.,  609000.,  614751.,  619314.,  625092.,
      629664.,  770956.,  776968.,  784504.,  790528.,  798100.,  804136.,
      811744.,  817792.,  1000048., 1008096., 1018112., 1026176., 1036240.,
      1044320., 1054432., 1062528., 1214980., 1225080., 1237560., 1247680.,
      1260220., 1270360., 1282960., 1293120., 1224340., 1234520., 1247080.,
      1257280., 1269900., 1280120., 1292800., 1303040., 1233700., 1243960.,
      1256600., 1266880., 1279580., 1289880., 1302640., 1312960., 1243060.,
      1253400., 1266120., 1276480., 1289260., 1299640., 1312480., 1322880.,
      964592.,  972896.,  983040.,  991360.,  1001552., 1009888., 1020128.,
      1028480., 700924.,  707176.,  714760.,  721024.,  728644.,  734920.,
      742576.,  748864.,  852995.,  860750.,  870110.,  877880.,  887285.,
      895070.,  904520.,  912320.,  1100380., 1110760., 1123200., 1133600.,
      1146100., 1156520., 1169080., 1179520., 1329025., 1342050., 1357550.,
      1370600., 1386175., 1399250., 1414900., 1428000., 1338725., 1351850.,
      1367450., 1380600., 1396275., 1409450., 1425200., 1438400., 1348425.,
      1361650., 1377350., 1390600., 1406375., 1419650., 1435500., 1448800.,
      1358125., 1371450., 1387250., 1400600., 1416475., 1429850., 1445800.,
      1459200., 1047100., 1057800., 1070400., 1081120., 1093780., 1104520.,
      1117240., 1128000., 755615.,  763670.,  773090.,  781160.,  790625.,
      798710.,  808220.,  816320.,  903395.,  911630.,  921470.,  929720.,
      939605.,  947870.,  957800.,  966080.,  1165020., 1176040., 1189120.,
      1200160., 1213300., 1224360., 1237560., 1248640., 1406625., 1420450.,
      1436750., 1450600., 1466975., 1480850., 1497300., 1511200., 1416325.,
      1430250., 1446650., 1460600., 1477075., 1491050., 1507600., 1521600.,
      1426025., 1440050., 1456550., 1470600., 1487175., 1501250., 1517900.,
      1532000., 1435725., 1449850., 1466450., 1480600., 1497275., 1511450.,
      1528200., 1542400., 1106620., 1117960., 1131200., 1142560., 1155860.,
      1167240., 1180600., 1192000., 798335.,  806870.,  816770.,  825320.,
      835265.,  843830.,  853820.,  862400.,  953795.,  962510.,  972830.,
      981560.,  991925.,  1000670., 1011080., 1019840., 1229660., 1241320.,
      1255040., 1266720., 1280500., 1292200., 1306040., 1317760., 1484225.,
      1498850., 1515950., 1530600., 1547775., 1562450., 1579700., 1594400.,
      1493925., 1508650., 1525850., 1540600., 1557875., 1572650., 1590000.,
      1604800., 1503625., 1518450., 1535750., 1550600., 1567975., 1582850.,
      1600300., 1615200., 1513325., 1528250., 1545650., 1560600., 1578075.,
      1593050., 1610600., 1625600., 1166140., 1178120., 1192000., 1204000.,
      1217940., 1229960., 1243960., 1256000., 841055.,  850070.,  860450.,
      869480.,  879905.,  888950.,  899420.,  908480.,  628396.,  635560.,
      643768.,  650944.,  659188.,  666376.,  674656.,  681856.,  802544.,
      812128.,  823040.,  832640.,  843600.,  853216.,  864224.,  873856.,
      958820.,  970840.,  984440.,  996480.,  1010140., 1022200., 1035920.,
      1048000., 964980.,  977080.,  990760.,  1002880., 1016620., 1028760.,
      1042560., 1054720., 971140.,  983320.,  997080.,  1009280., 1023100.,
      1035320., 1049200., 1061440., 977300.,  989560.,  1003400., 1015680.,
      1029580., 1041880., 1055840., 1068160., 744560.,  754400.,  765440.,
      775296.,  786384.,  796256.,  807392.,  817280.,  530332.,  537736.,
      545992.,  553408.,  561700.,  569128.,  577456.,  584896.,  366477.,
      371994.,  378114.,  383640.,  389787.,  395322.,  401496.,  407040.,
      460900.,  468280.,  476416.,  483808.,  491980.,  499384.,  507592.,
      515008.,  541295.,  550550.,  560690.,  569960.,  580145.,  589430.,
      599660.,  608960.,  544715.,  554030.,  564230.,  573560.,  583805.,
      593150.,  603440.,  612800.,  548135.,  557510.,  567770.,  577160.,
      587465.,  596870.,  607220.,  616640.,  551555.,  560990.,  571310.,
      580760.,  591125.,  600590.,  611000.,  620480.,  412036.,  419608.,
      427840.,  435424.,  443692.,  451288.,  459592.,  467200.,  287025.,
      292722.,  298878.,  304584.,  310767.,  316482.,  322692.,  328416.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625.,  244450.,  248750.,  250600.,  254975.,  256850.,  261300.,
      263200.,  252325.,  254250.,  258650.,  260600.,  265075.,  267050.,
      271600.,  273600.,  262025.,  264050.,  268550.,  270600.,  275175.,
      277250.,  281900.,  284000.,  271725.,  273850.,  278450.,  280600.,
      285275.,  287450.,  292200.,  294400.,  320225.,  322850.,  327950.,
      330600.,  335775.,  338450.,  343700.,  346400.,  329925.,  332650.,
      337850.,  340600.,  345875.,  348650.,  354000.,  356800.,  339625.,
      342450.,  347750.,  350600.,  355975.,  358850.,  364300.,  367200.,
      349325.,  352250.,  357650.,  360600.,  366075.,  369050.,  374600.,
      377600.,  397825.,  401250.,  407150.,  410600.,  416575.,  420050.,
      426100.,  429600.,  407525.,  411050.,  417050.,  420600.,  426675.,
      430250.,  436400.,  440000.,  417225.,  420850.,  426950.,  430600.,
      436775.,  440450.,  446700.,  450400.,  426925.,  430650.,  436850.,
      440600.,  446875.,  450650.,  457000.,  460800.,  785825.,  793250.,
      803150.,  810600.,  820575.,  828050.,  838100.,  845600.,  795525.,
      803050.,  813050.,  820600.,  830675.,  838250.,  848400.,  856000.,
      805225.,  812850.,  822950.,  830600.,  840775.,  848450.,  858700.,
      866400.,  814925.,  822650.,  832850.,  840600.,  850875.,  858650.,
      869000.,  876800.,  863425.,  871650.,  882350.,  890600.,  901375.,
      909650.,  920500.,  928800.,  873125.,  881450.,  892250.,  900600.,
      911475.,  919850.,  930800.,  939200.,  882825.,  891250.,  902150.,
      910600.,  921575.,  930050.,  941100.,  949600.,  892525.,  901050.,
      912050.,  920600.,  931675.,  940250.,  951400.,  960000.,  941025.,
      950050.,  961550.,  970600.,  982175.,  991250.,  1002900., 1012000.,
      950725.,  959850.,  971450.,  980600.,  992275.,  1001450., 1013200.,
      1022400., 960425.,  969650.,  981350.,  990600.,  1002375., 1011650.,
      1023500., 1032800., 970125.,  979450.,  991250.,  1000600., 1012475.,
      1021850., 1033800., 1043200., 1329025., 1342050., 1357550., 1370600.,
      1386175., 1399250., 1414900., 1428000., 1338725., 1351850., 1367450.,
      1380600., 1396275., 1409450., 1425200., 1438400., 1348425., 1361650.,
      1377350., 1390600., 1406375., 1419650., 1435500., 1448800., 1358125.,
      1371450., 1387250., 1400600., 1416475., 1429850., 1445800., 1459200.,
      1406625., 1420450., 1436750., 1450600., 1466975., 1480850., 1497300.,
      1511200., 1416325., 1430250., 1446650., 1460600., 1477075., 1491050.,
      1507600., 1521600., 1426025., 1440050., 1456550., 1470600., 1487175.,
      1501250., 1517900., 1532000., 1435725., 1449850., 1466450., 1480600.,
      1497275., 1511450., 1528200., 1542400., 1484225., 1498850., 1515950.,
      1530600., 1547775., 1562450., 1579700., 1594400., 1493925., 1508650.,
      1525850., 1540600., 1557875., 1572650., 1590000., 1604800., 1503625.,
      1518450., 1535750., 1550600., 1567975., 1582850., 1600300., 1615200.,
      1513325., 1528250., 1545650., 1560600., 1578075., 1593050., 1610600.,
      1625600.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981.,  112314.,  112647.,  112980.,  115950.,  116292.,  116634.,
      116976.,  119991.,  120342.,  120693.,  121044.,  124104.,  124464.,
      124824.,  125184.,  152948.,  153416.,  153884.,  154352.,  158240.,
      158720.,  159200.,  159680.,  163628.,  164120.,  164612.,  165104.,
      169112.,  169616.,  170120.,  170624.,  195415.,  196030.,  196645.,
      197260.,  202030.,  202660.,  203290.,  203920.,  208765.,  209410.,
      210055.,  210700.,  215620.,  216280.,  216940.,  217600.,  211795.,
      212470.,  213145.,  213820.,  218650.,  219340.,  220030.,  220720.,
      225625.,  226330.,  227035.,  227740.,  232720.,  233440.,  234160.,
      234880.,  228175.,  228910.,  229645.,  230380.,  235270.,  236020.,
      236770.,  237520.,  242485.,  243250.,  244015.,  244780.,  249820.,
      250600.,  251380.,  252160.,  244555.,  245350.,  246145.,  246940.,
      251890.,  252700.,  253510.,  254320.,  259345.,  260170.,  260995.,
      261820.,  266920.,  267760.,  268600.,  269440.,  196340.,  197000.,
      197660.,  198320.,  202208.,  202880.,  203552.,  204224.,  208172.,
      208856.,  209540.,  210224.,  214232.,  214928.,  215624.,  216320.,
      147585.,  148098.,  148611.,  149124.,  151986.,  152508.,  153030.,
      153552.,  156459.,  156990.,  157521.,  158052.,  161004.,  161544.,
      162084.,  162624.,  197276.,  197912.,  198548.,  199184.,  202856.,
      203504.,  204152.,  204800.,  208532.,  209192.,  209852.,  210512.,
      214304.,  214976.,  215648.,  216320.,  264560.,  265440.,  266320.,
      267200.,  272000.,  272896.,  273792.,  274688.,  279568.,  280480.,
      281392.,  282304.,  287264.,  288192.,  289120.,  290048.,  332180.,
      333320.,  334460.,  335600.,  341480.,  342640.,  343800.,  344960.,
      350940.,  352120.,  353300.,  354480.,  360560.,  361760.,  362960.,
      364160.,  350820.,  352040.,  353260.,  354480.,  360440.,  361680.,
      362920.,  364160.,  370220.,  371480.,  372740.,  374000.,  380160.,
      381440.,  382720.,  384000.,  369460.,  370760.,  372060.,  373360.,
      379400.,  380720.,  382040.,  383360.,  389500.,  390840.,  392180.,
      393520.,  399760.,  401120.,  402480.,  403840.,  388100.,  389480.,
      390860.,  392240.,  398360.,  399760.,  401160.,  402560.,  408780.,
      410200.,  411620.,  413040.,  419360.,  420800.,  422240.,  423680.,
      308080.,  309216.,  310352.,  311488.,  316288.,  317440.,  318592.,
      319744.,  324624.,  325792.,  326960.,  328128.,  333088.,  334272.,
      335456.,  336640.,  229004.,  229880.,  230756.,  231632.,  235160.,
      236048.,  236936.,  237824.,  241412.,  242312.,  243212.,  244112.,
      247760.,  248672.,  249584.,  250496.,  293755.,  294790.,  295825.,
      296860.,  301090.,  302140.,  303190.,  304240.,  308545.,  309610.,
      310675.,  311740.,  316120.,  317200.,  318280.,  319360.,  389420.,
      390840.,  392260.,  393680.,  399200.,  400640.,  402080.,  403520.,
      409140.,  410600.,  412060.,  413520.,  419240.,  420720.,  422200.,
      423680.,  483425.,  485250.,  487075.,  488900.,  495650.,  497500.,
      499350.,  501200.,  508075.,  509950.,  511825.,  513700.,  520700.,
      522600.,  524500.,  526400.,  502725.,  504650.,  506575.,  508500.,
      515350.,  517300.,  519250.,  521200.,  528175.,  530150.,  532125.,
      534100.,  541200.,  543200.,  545200.,  547200.,  522025.,  524050.,
      526075.,  528100.,  535050.,  537100.,  539150.,  541200.,  548275.,
      550350.,  552425.,  554500.,  561700.,  563800.,  565900.,  568000.,
      541325.,  543450.,  545575.,  547700.,  554750.,  556900.,  559050.,
      561200.,  568375.,  570550.,  572725.,  574900.,  582200.,  584400.,
      586600.,  588800.,  425900.,  427640.,  429380.,  431120.,  436640.,
      438400.,  440160.,  441920.,  447540.,  449320.,  451100.,  452880.,
      458600.,  460400.,  462200.,  464000.,  313735.,  315070.,  316405.,
      317740.,  321790.,  323140.,  324490.,  325840.,  329965.,  331330.,
      332695.,  334060.,  338260.,  339640.,  341020.,  342400.,  394075.,
      395590.,  397105.,  398620.,  403330.,  404860.,  406390.,  407920.,
      412705.,  414250.,  415795.,  417340.,  422200.,  423760.,  425320.,
      426880.,  518060.,  520120.,  522180.,  524240.,  530400.,  532480.,
      534560.,  536640.,  542900.,  545000.,  547100.,  549200.,  555560.,
      557680.,  559800.,  561920.,  637825.,  640450.,  643075.,  645700.,
      653250.,  655900.,  658550.,  661200.,  668875.,  671550.,  674225.,
      676900.,  684700.,  687400.,  690100.,  692800.,  657125.,  659850.,
      662575.,  665300.,  672950.,  675700.,  678450.,  681200.,  688975.,
      691750.,  694525.,  697300.,  705200.,  708000.,  710800.,  713600.,
      676425.,  679250.,  682075.,  684900.,  692650.,  695500.,  698350.,
      701200.,  709075.,  711950.,  714825.,  717700.,  725700.,  728600.,
      731500.,  734400.,  695725.,  698650.,  701575.,  704500.,  712350.,
      715300.,  718250.,  721200.,  729175.,  732150.,  735125.,  738100.,
      746200.,  749200.,  752200.,  755200.,  544300.,  546680.,  549060.,
      551440.,  557600.,  560000.,  562400.,  564800.,  571060.,  573480.,
      575900.,  578320.,  584680.,  587120.,  589560.,  592000.,  398695.,
      400510.,  402325.,  404140.,  408670.,  410500.,  412330.,  414160.,
      418765.,  420610.,  422455.,  424300.,  428980.,  430840.,  432700.,
      434560.,  494395.,  496390.,  498385.,  500380.,  505570.,  507580.,
      509590.,  511600.,  516865.,  518890.,  520915.,  522940.,  528280.,
      530320.,  532360.,  534400.,  646700.,  649400.,  652100.,  654800.,
      661600.,  664320.,  667040.,  669760.,  676660.,  679400.,  682140.,
      684880.,  691880.,  694640.,  697400.,  700160.,  792225.,  795650.,
      799075.,  802500.,  810850.,  814300.,  817750.,  821200.,  829675.,
      833150.,  836625.,  840100.,  848700.,  852200.,  855700.,  859200.,
      811525.,  815050.,  818575.,  822100.,  830550.,  834100.,  837650.,
      841200.,  849775.,  853350.,  856925.,  860500.,  869200.,  872800.,
      876400.,  880000.,  830825.,  834450.,  838075.,  841700.,  850250.,
      853900.,  857550.,  861200.,  869875.,  873550.,  877225.,  880900.,
      889700.,  893400.,  897100.,  900800.,  850125.,  853850.,  857575.,
      861300.,  869950.,  873700.,  877450.,  881200.,  889975.,  893750.,
      897525.,  901300.,  910200.,  914000.,  917800.,  921600.,  662700.,
      665720.,  668740.,  671760.,  678560.,  681600.,  684640.,  687680.,
      694580.,  697640.,  700700.,  703760.,  710760.,  713840.,  716920.,
      720000.,  483655.,  485950.,  488245.,  490540.,  495550.,  497860.,
      500170.,  502480.,  507565.,  509890.,  512215.,  514540.,  519700.,
      522040.,  524380.,  526720.,  341084.,  342872.,  344660.,  346448.,
      350312.,  352112.,  353912.,  355712.,  359636.,  361448.,  363260.,
      365072.,  369056.,  370880.,  372704.,  374528.,  441456.,  443872.,
      446288.,  448704.,  453760.,  456192.,  458624.,  461056.,  466192.,
      468640.,  471088.,  473536.,  478752.,  481216.,  483680.,  486144.,
      534740.,  537800.,  540860.,  543920.,  550120.,  553200.,  556280.,
      559360.,  565660.,  568760.,  571860.,  574960.,  581360.,  584480.,
      587600.,  590720.,  546980.,  550120.,  553260.,  556400.,  562680.,
      565840.,  569000.,  572160.,  578540.,  581720.,  584900.,  588080.,
      594560.,  597760.,  600960.,  604160.,  559220.,  562440.,  565660.,
      568880.,  575240.,  578480.,  581720.,  584960.,  591420.,  594680.,
      597940.,  601200.,  607760.,  611040.,  614320.,  617600.,  571460.,
      574760.,  578060.,  581360.,  587800.,  591120.,  594440.,  597760.,
      604300.,  607640.,  610980.,  614320.,  620960.,  624320.,  627680.,
      631040.,  439920.,  442592.,  445264.,  447936.,  452992.,  455680.,
      458368.,  461056.,  466192.,  468896.,  471600.,  474304.,  479520.,
      482240.,  484960.,  487680.,  316748.,  318776.,  320804.,  322832.,
      326552.,  328592.,  330632.,  332672.,  336452.,  338504.,  340556.,
      342608.,  346448.,  348512.,  350576.,  352640.,  207309.,  208794.,
      210279.,  211764.,  214446.,  215940.,  217434.,  218928.,  221655.,
      223158.,  224661.,  226164.,  228936.,  230448.,  231960.,  233472.,
      263924.,  265928.,  267932.,  269936.,  273440.,  275456.,  277472.,
      279488.,  283052.,  285080.,  287108.,  289136.,  292760.,  294800.,
      296840.,  298880.,  313975.,  316510.,  319045.,  321580.,  325870.,
      328420.,  330970.,  333520.,  337885.,  340450.,  343015.,  345580.,
      350020.,  352600.,  355180.,  357760.,  320755.,  323350.,  325945.,
      328540.,  332890.,  335500.,  338110.,  340720.,  345145.,  347770.,
      350395.,  353020.,  357520.,  360160.,  362800.,  365440.,  327535.,
      330190.,  332845.,  335500.,  339910.,  342580.,  345250.,  347920.,
      352405.,  355090.,  357775.,  360460.,  365020.,  367720.,  370420.,
      373120.,  334315.,  337030.,  339745.,  342460.,  346930.,  349660.,
      352390.,  355120.,  359665.,  362410.,  365155.,  367900.,  372520.,
      375280.,  378040.,  380800.,  252020.,  254216.,  256412.,  258608.,
      262112.,  264320.,  266528.,  268736.,  272300.,  274520.,  276740.,
      278960.,  282584.,  284816.,  287048.,  289280.,  177249.,  178914.,
      180579.,  182244.,  184818.,  186492.,  188166.,  189840.,  192459.,
      194142.,  195825.,  197508.,  200172.,  201864.,  203556.,  205248.,
      694605.,  696954.,  699303.,  701652.,  706638.,  708996.,  711354.,
      713712.,  718743.,  721110.,  723477.,  725844.,  730920.,  733296.,
      735672.,  738048.,  908276.,  911432.,  914588.,  917744.,  924320.,
      927488.,  930656.,  933824.,  940460.,  943640.,  946820.,  950000.,
      956696.,  959888.,  963080.,  966272.,  1112695., 1116670., 1120645.,
      1124620., 1132750., 1136740., 1140730., 1144720., 1152925., 1156930.,
      1160935., 1164940., 1173220., 1177240., 1181260., 1185280., 1129075.,
      1133110., 1137145., 1141180., 1149370., 1153420., 1157470., 1161520.,
      1169785., 1173850., 1177915., 1181980., 1190320., 1194400., 1198480.,
      1202560., 1145455., 1149550., 1153645., 1157740., 1165990., 1170100.,
      1174210., 1178320., 1186645., 1190770., 1194895., 1199020., 1207420.,
      1211560., 1215700., 1219840., 1161835., 1165990., 1170145., 1174300.,
      1182610., 1186780., 1190950., 1195120., 1203505., 1207690., 1211875.,
      1216060., 1224520., 1228720., 1232920., 1237120., 908660.,  912008.,
      915356.,  918704.,  925280.,  928640.,  932000.,  935360.,  941996.,
      945368.,  948740.,  952112.,  958808.,  962192.,  965576.,  968960.,
      665697.,  668226.,  670755.,  673284.,  678162.,  680700.,  683238.,
      685776.,  690699.,  693246.,  695793.,  698340.,  703308.,  705864.,
      708420.,  710976.,  866588.,  869912.,  873236.,  876560.,  882920.,
      886256.,  889592.,  892928.,  899348.,  902696.,  906044.,  909392.,
      915872.,  919232.,  922592.,  925952.,  1128304., 1132768., 1137232.,
      1141696., 1150080., 1154560., 1159040., 1163520., 1171984., 1176480.,
      1180976., 1185472., 1194016., 1198528., 1203040., 1207552., 1376020.,
      1381640., 1387260., 1392880., 1403240., 1408880., 1414520., 1420160.,
      1430620., 1436280., 1441940., 1447600., 1458160., 1463840., 1469520.,
      1475200., 1394660., 1400360., 1406060., 1411760., 1422200., 1427920.,
      1433640., 1439360., 1449900., 1455640., 1461380., 1467120., 1477760.,
      1483520., 1489280., 1495040., 1413300., 1419080., 1424860., 1430640.,
      1441160., 1446960., 1452760., 1458560., 1469180., 1475000., 1480820.,
      1486640., 1497360., 1503200., 1509040., 1514880., 1431940., 1437800.,
      1443660., 1449520., 1460120., 1466000., 1471880., 1477760., 1488460.,
      1494360., 1500260., 1506160., 1516960., 1522880., 1528800., 1534720.,
      1114480., 1119200., 1123920., 1128640., 1137024., 1141760., 1146496.,
      1151232., 1159696., 1164448., 1169200., 1173952., 1182496., 1187264.,
      1192032., 1196800., 812300.,  815864.,  819428.,  822992.,  829208.,
      832784.,  836360.,  839936.,  846212.,  849800.,  853388.,  856976.,
      863312.,  866912.,  870512.,  874112.,  995995.,  1000390., 1004785.,
      1009180., 1016770., 1021180., 1025590., 1030000., 1037665., 1042090.,
      1046515., 1050940., 1058680., 1063120., 1067560., 1072000., 1289900.,
      1295800., 1301700., 1307600., 1317600., 1323520., 1329440., 1335360.,
      1345460., 1351400., 1357340., 1363280., 1373480., 1379440., 1385400.,
      1391360., 1564225., 1571650., 1579075., 1586500., 1598850., 1606300.,
      1613750., 1621200., 1633675., 1641150., 1648625., 1656100., 1668700.,
      1676200., 1683700., 1691200., 1583525., 1591050., 1598575., 1606100.,
      1618550., 1626100., 1633650., 1641200., 1653775., 1661350., 1668925.,
      1676500., 1689200., 1696800., 1704400., 1712000., 1602825., 1610450.,
      1618075., 1625700., 1638250., 1645900., 1653550., 1661200., 1673875.,
      1681550., 1689225., 1696900., 1709700., 1717400., 1725100., 1732800.,
      1622125., 1629850., 1637575., 1645300., 1657950., 1665700., 1673450.,
      1681200., 1693975., 1701750., 1709525., 1717300., 1730200., 1738000.,
      1745800., 1753600., 1254700., 1260920., 1267140., 1273360., 1283360.,
      1289600., 1295840., 1302080., 1312180., 1318440., 1324700., 1330960.,
      1341160., 1347440., 1353720., 1360000., 908455.,  913150.,  917845.,
      922540.,  929950.,  934660.,  939370.,  944080.,  951565.,  956290.,
      961015.,  965740.,  973300.,  978040.,  982780.,  987520.,  1096315.,
      1101190., 1106065., 1110940., 1119010., 1123900., 1128790., 1133680.,
      1141825., 1146730., 1151635., 1156540., 1164760., 1169680., 1174600.,
      1179520., 1418540., 1425080., 1431620., 1438160., 1448800., 1455360.,
      1461920., 1468480., 1479220., 1485800., 1492380., 1498960., 1509800.,
      1516400., 1523000., 1529600., 1718625., 1726850., 1735075., 1743300.,
      1756450., 1764700., 1772950., 1781200., 1794475., 1802750., 1811025.,
      1819300., 1832700., 1841000., 1849300., 1857600., 1737925., 1746250.,
      1754575., 1762900., 1776150., 1784500., 1792850., 1801200., 1814575.,
      1822950., 1831325., 1839700., 1853200., 1861600., 1870000., 1878400.,
      1757225., 1765650., 1774075., 1782500., 1795850., 1804300., 1812750.,
      1821200., 1834675., 1843150., 1851625., 1860100., 1873700., 1882200.,
      1890700., 1899200., 1776525., 1785050., 1793575., 1802100., 1815550.,
      1824100., 1832650., 1841200., 1854775., 1863350., 1871925., 1880500.,
      1894200., 1902800., 1911400., 1920000., 1373100., 1379960., 1386820.,
      1393680., 1404320., 1411200., 1418080., 1424960., 1435700., 1442600.,
      1449500., 1456400., 1467240., 1474160., 1481080., 1488000., 993415.,
      998590.,  1003765., 1008940., 1016830., 1022020., 1027210., 1032400.,
      1040365., 1045570., 1050775., 1055980., 1064020., 1069240., 1074460.,
      1079680., 1196635., 1201990., 1207345., 1212700., 1221250., 1226620.,
      1231990., 1237360., 1245985., 1251370., 1256755., 1262140., 1270840.,
      1276240., 1281640., 1287040., 1547180., 1554360., 1561540., 1568720.,
      1580000., 1587200., 1594400., 1601600., 1612980., 1620200., 1627420.,
      1634640., 1646120., 1653360., 1660600., 1667840., 1873025., 1882050.,
      1891075., 1900100., 1914050., 1923100., 1932150., 1941200., 1955275.,
      1964350., 1973425., 1982500., 1996700., 2005800., 2014900., 2024000.,
      1892325., 1901450., 1910575., 1919700., 1933750., 1942900., 1952050.,
      1961200., 1975375., 1984550., 1993725., 2002900., 2017200., 2026400.,
      2035600., 2044800., 1911625., 1920850., 1930075., 1939300., 1953450.,
      1962700., 1971950., 1981200., 1995475., 2004750., 2014025., 2023300.,
      2037700., 2047000., 2056300., 2065600., 1930925., 1940250., 1949575.,
      1958900., 1973150., 1982500., 1991850., 2001200., 2015575., 2024950.,
      2034325., 2043700., 2058200., 2067600., 2077000., 2086400., 1491500.,
      1499000., 1506500., 1514000., 1525280., 1532800., 1540320., 1547840.,
      1559220., 1566760., 1574300., 1581840., 1593320., 1600880., 1608440.,
      1616000., 1078375., 1084030., 1089685., 1095340., 1103710., 1109380.,
      1115050., 1120720., 1129165., 1134850., 1140535., 1146220., 1154740.,
      1160440., 1166140., 1171840., 795356.,  799832.,  804308.,  808784.,
      815336.,  819824.,  824312.,  828800.,  835412.,  839912.,  844412.,
      848912.,  855584.,  860096.,  864608.,  869120.,  1018480., 1024480.,
      1030480., 1036480., 1045120., 1051136., 1057152., 1063168., 1071888.,
      1077920., 1083952., 1089984., 1098784., 1104832., 1110880., 1116928.,
      1220180., 1227720., 1235260., 1242800., 1253480., 1261040., 1268600.,
      1276160., 1286940., 1294520., 1302100., 1309680., 1320560., 1328160.,
      1335760., 1343360., 1232420., 1240040., 1247660., 1255280., 1266040.,
      1273680., 1281320., 1288960., 1299820., 1307480., 1315140., 1322800.,
      1333760., 1341440., 1349120., 1356800., 1244660., 1252360., 1260060.,
      1267760., 1278600., 1286320., 1294040., 1301760., 1312700., 1320440.,
      1328180., 1335920., 1346960., 1354720., 1362480., 1370240., 1256900.,
      1264680., 1272460., 1280240., 1291160., 1298960., 1306760., 1314560.,
      1325580., 1333400., 1341220., 1349040., 1360160., 1368000., 1375840.,
      1383680., 959600.,  965856.,  972112.,  978368.,  987008.,  993280.,
      999552.,  1005824., 1014544., 1020832., 1027120., 1033408., 1042208.,
      1048512., 1054816., 1061120., 685004.,  689720.,  694436.,  699152.,
      705560.,  710288.,  715016.,  719744.,  726212.,  730952.,  735692.,
      740432.,  746960.,  751712.,  756464.,  761216.,  467373.,  470874.,
      474375.,  477876.,  482574.,  486084.,  489594.,  493104.,  497847.,
      501366.,  504885.,  508404.,  513192.,  516720.,  520248.,  523776.,
      589172.,  593864.,  598556.,  603248.,  609440.,  614144.,  618848.,
      623552.,  629804.,  634520.,  639236.,  643952.,  650264.,  654992.,
      659720.,  664448.,  693655.,  699550.,  705445.,  711340.,  718990.,
      724900.,  730810.,  736720.,  744445.,  750370.,  756295.,  762220.,
      770020.,  775960.,  781900.,  787840.,  700435.,  706390.,  712345.,
      718300.,  726010.,  731980.,  737950.,  743920.,  751705.,  757690.,
      763675.,  769660.,  777520.,  783520.,  789520.,  795520.,  707215.,
      713230.,  719245.,  725260.,  733030.,  739060.,  745090.,  751120.,
      758965.,  765010.,  771055.,  777100.,  785020.,  791080.,  797140.,
      803200.,  713995.,  720070.,  726145.,  732220.,  740050.,  746140.,
      752230.,  758320.,  766225.,  772330.,  778435.,  784540.,  792520.,
      798640.,  804760.,  810880.,  534260.,  539144.,  544028.,  548912.,
      555104.,  560000.,  564896.,  569792.,  576044.,  580952.,  585860.,
      590768.,  597080.,  602000.,  606920.,  611840.,  372801.,  376482.,
      380163.,  383844.,  388434.,  392124.,  395814.,  399504.,  404139.,
      407838.,  411537.,  415236.,  419916.,  423624.,  427332.,  431040.,
      1277229., 1281594., 1285959., 1290324., 1297326., 1301700., 1306074.,
      1310448., 1317495., 1321878., 1326261., 1330644., 1337736., 1342128.,
      1346520., 1350912., 1663604., 1669448., 1675292., 1681136., 1690400.,
      1696256., 1702112., 1707968., 1717292., 1723160., 1729028., 1734896.,
      1744280., 1750160., 1756040., 1761920., 2029975., 2037310., 2044645.,
      2051980., 2063470., 2070820., 2078170., 2085520., 2097085., 2104450.,
      2111815., 2119180., 2130820., 2138200., 2145580., 2152960., 2046355.,
      2053750., 2061145., 2068540., 2080090., 2087500., 2094910., 2102320.,
      2113945., 2121370., 2128795., 2136220., 2147920., 2155360., 2162800.,
      2170240., 2062735., 2070190., 2077645., 2085100., 2096710., 2104180.,
      2111650., 2119120., 2130805., 2138290., 2145775., 2153260., 2165020.,
      2172520., 2180020., 2187520., 2079115., 2086630., 2094145., 2101660.,
      2113330., 2120860., 2128390., 2135920., 2147665., 2155210., 2162755.,
      2170300., 2182120., 2189680., 2197240., 2204800., 1620980., 1627016.,
      1633052., 1639088., 1648352., 1654400., 1660448., 1666496., 1675820.,
      1681880., 1687940., 1694000., 1703384., 1709456., 1715528., 1721600.,
      1183809., 1188354., 1192899., 1197444., 1204338., 1208892., 1213446.,
      1218000., 1224939., 1229502., 1234065., 1238628., 1245612., 1250184.,
      1254756., 1259328., 1535900., 1541912., 1547924., 1553936., 1562984.,
      1569008., 1575032., 1581056., 1590164., 1596200., 1602236., 1608272.,
      1617440., 1623488., 1629536., 1635584., 1992048., 2000096., 2008144.,
      2016192., 2028160., 2036224., 2044288., 2052352., 2064400., 2072480.,
      2080560., 2088640., 2100768., 2108864., 2116960., 2125056., 2419860.,
      2429960., 2440060., 2450160., 2465000., 2475120., 2485240., 2495360.,
      2510300., 2520440., 2530580., 2540720., 2555760., 2565920., 2576080.,
      2586240., 2438500., 2448680., 2458860., 2469040., 2483960., 2494160.,
      2504360., 2514560., 2529580., 2539800., 2550020., 2560240., 2575360.,
      2585600., 2595840., 2606080., 2457140., 2467400., 2477660., 2487920.,
      2502920., 2513200., 2523480., 2533760., 2548860., 2559160., 2569460.,
      2579760., 2594960., 2605280., 2615600., 2625920., 2475780., 2486120.,
      2496460., 2506800., 2521880., 2532240., 2542600., 2552960., 2568140.,
      2578520., 2588900., 2599280., 2614560., 2624960., 2635360., 2645760.,
      1920880., 1929184., 1937488., 1945792., 1957760., 1966080., 1974400.,
      1982720., 1994768., 2003104., 2011440., 2019776., 2031904., 2040256.,
      2048608., 2056960., 1395596., 1401848., 1408100., 1414352., 1423256.,
      1429520., 1435784., 1442048., 1451012., 1457288., 1463564., 1469840.,
      1478864., 1485152., 1491440., 1497728., 1698235., 1705990., 1713745.,
      1721500., 1732450., 1740220., 1747990., 1755760., 1766785., 1774570.,
      1782355., 1790140., 1801240., 1809040., 1816840., 1824640., 2190380.,
      2200760., 2211140., 2221520., 2236000., 2246400., 2256800., 2267200.,
      2281780., 2292200., 2302620., 2313040., 2327720., 2338160., 2348600.,
      2359040., 2645025., 2658050., 2671075., 2684100., 2702050., 2715100.,
      2728150., 2741200., 2759275., 2772350., 2785425., 2798500., 2816700.,
      2829800., 2842900., 2856000., 2664325., 2677450., 2690575., 2703700.,
      2721750., 2734900., 2748050., 2761200., 2779375., 2792550., 2805725.,
      2818900., 2837200., 2850400., 2863600., 2876800., 2683625., 2696850.,
      2710075., 2723300., 2741450., 2754700., 2767950., 2781200., 2799475.,
      2812750., 2826025., 2839300., 2857700., 2871000., 2884300., 2897600.,
      2702925., 2716250., 2729575., 2742900., 2761150., 2774500., 2787850.,
      2801200., 2819575., 2832950., 2846325., 2859700., 2878200., 2891600.,
      2905000., 2918400., 2083500., 2094200., 2104900., 2115600., 2130080.,
      2140800., 2151520., 2162240., 2176820., 2187560., 2198300., 2209040.,
      2223720., 2234480., 2245240., 2256000., 1503175., 1511230., 1519285.,
      1527340., 1538110., 1546180., 1554250., 1562320., 1573165., 1581250.,
      1589335., 1597420., 1608340., 1616440., 1624540., 1632640., 1798555.,
      1806790., 1815025., 1823260., 1834690., 1842940., 1851190., 1859440.,
      1870945., 1879210., 1887475., 1895740., 1907320., 1915600., 1923880.,
      1932160., 2319020., 2330040., 2341060., 2352080., 2367200., 2378240.,
      2389280., 2400320., 2415540., 2426600., 2437660., 2448720., 2464040.,
      2475120., 2486200., 2497280., 2799425., 2813250., 2827075., 2840900.,
      2859650., 2873500., 2887350., 2901200., 2920075., 2933950., 2947825.,
      2961700., 2980700., 2994600., 3008500., 3022400., 2818725., 2832650.,
      2846575., 2860500., 2879350., 2893300., 2907250., 2921200., 2940175.,
      2954150., 2968125., 2982100., 3001200., 3015200., 3029200., 3043200.,
      2838025., 2852050., 2866075., 2880100., 2899050., 2913100., 2927150.,
      2941200., 2960275., 2974350., 2988425., 3002500., 3021700., 3035800.,
      3049900., 3064000., 2857325., 2871450., 2885575., 2899700., 2918750.,
      2932900., 2947050., 2961200., 2980375., 2994550., 3008725., 3022900.,
      3042200., 3056400., 3070600., 3084800., 2201900., 2213240., 2224580.,
      2235920., 2251040., 2262400., 2273760., 2285120., 2300340., 2311720.,
      2323100., 2334480., 2349800., 2361200., 2372600., 2384000., 1588135.,
      1596670., 1605205., 1613740., 1624990., 1633540., 1642090., 1650640.,
      1661965., 1670530., 1679095., 1687660., 1699060., 1707640., 1716220.,
      1724800., 1898875., 1907590., 1916305., 1925020., 1936930., 1945660.,
      1954390., 1963120., 1975105., 1983850., 1992595., 2001340., 2013400.,
      2022160., 2030920., 2039680., 2447660., 2459320., 2470980., 2482640.,
      2498400., 2510080., 2521760., 2533440., 2549300., 2561000., 2572700.,
      2584400., 2600360., 2612080., 2623800., 2635520., 2953825., 2968450.,
      2983075., 2997700., 3017250., 3031900., 3046550., 3061200., 3080875.,
      3095550., 3110225., 3124900., 3144700., 3159400., 3174100., 3188800.,
      2973125., 2987850., 3002575., 3017300., 3036950., 3051700., 3066450.,
      3081200., 3100975., 3115750., 3130525., 3145300., 3165200., 3180000.,
      3194800., 3209600., 2992425., 3007250., 3022075., 3036900., 3056650.,
      3071500., 3086350., 3101200., 3121075., 3135950., 3150825., 3165700.,
      3185700., 3200600., 3215500., 3230400., 3011725., 3026650., 3041575.,
      3056500., 3076350., 3091300., 3106250., 3121200., 3141175., 3156150.,
      3171125., 3186100., 3206200., 3221200., 3236200., 3251200., 2320300.,
      2332280., 2344260., 2356240., 2372000., 2384000., 2396000., 2408000.,
      2423860., 2435880., 2447900., 2459920., 2475880., 2487920., 2499960.,
      2512000., 1673095., 1682110., 1691125., 1700140., 1711870., 1720900.,
      1729930., 1738960., 1750765., 1759810., 1768855., 1777900., 1789780.,
      1798840., 1807900., 1816960., 1249628., 1256792., 1263956., 1271120.,
      1280360., 1287536., 1294712., 1301888., 1311188., 1318376., 1325564.,
      1332752., 1342112., 1349312., 1356512., 1363712., 1595504., 1605088.,
      1614672., 1624256., 1636480., 1646080., 1655680., 1665280., 1677584.,
      1687200., 1696816., 1706432., 1718816., 1728448., 1738080., 1747712.,
      1905620., 1917640., 1929660., 1941680., 1956840., 1968880., 1980920.,
      1992960., 2008220., 2020280., 2032340., 2044400., 2059760., 2071840.,
      2083920., 2096000., 1917860., 1929960., 1942060., 1954160., 1969400.,
      1981520., 1993640., 2005760., 2021100., 2033240., 2045380., 2057520.,
      2072960., 2085120., 2097280., 2109440., 1930100., 1942280., 1954460.,
      1966640., 1981960., 1994160., 2006360., 2018560., 2033980., 2046200.,
      2058420., 2070640., 2086160., 2098400., 2110640., 2122880., 1942340.,
      1954600., 1966860., 1979120., 1994520., 2006800., 2019080., 2031360.,
      2046860., 2059160., 2071460., 2083760., 2099360., 2111680., 2124000.,
      2136320., 1479280., 1489120., 1498960., 1508800., 1521024., 1530880.,
      1540736., 1550592., 1562896., 1572768., 1582640., 1592512., 1604896.,
      1614784., 1624672., 1634560., 1053260., 1060664., 1068068., 1075472.,
      1084568., 1091984., 1099400., 1106816., 1115972., 1123400., 1130828.,
      1138256., 1147472., 1154912., 1162352., 1169792., 727437.,  732954.,
      738471.,  743988.,  750702.,  756228.,  761754.,  767280.,  774039.,
      779574.,  785109.,  790644.,  797448.,  802992.,  808536.,  814080.,
      914420.,  921800.,  929180.,  936560.,  945440.,  952832.,  960224.,
      967616.,  976556.,  983960.,  991364.,  998768.,  1007768., 1015184.,
      1022600., 1030016., 1073335., 1082590., 1091845., 1101100., 1112110.,
      1121380., 1130650., 1139920., 1151005., 1160290., 1169575., 1178860.,
      1190020., 1199320., 1208620., 1217920., 1080115., 1089430., 1098745.,
      1108060., 1119130., 1128460., 1137790., 1147120., 1158265., 1167610.,
      1176955., 1186300., 1197520., 1206880., 1216240., 1225600., 1086895.,
      1096270., 1105645., 1115020., 1126150., 1135540., 1144930., 1154320.,
      1165525., 1174930., 1184335., 1193740., 1205020., 1214440., 1223860.,
      1233280., 1093675., 1103110., 1112545., 1121980., 1133170., 1142620.,
      1152070., 1161520., 1172785., 1182250., 1191715., 1201180., 1212520.,
      1222000., 1231480., 1240960., 816500.,  824072.,  831644.,  839216.,
      848096.,  855680.,  863264.,  870848.,  879788.,  887384.,  894980.,
      902576.,  911576.,  919184.,  926792.,  934400.,  568353.,  574050.,
      579747.,  585444.,  592050.,  597756.,  603462.,  609168.,  615819.,
      621534.,  627249.,  632964.,  639660.,  645384.,  651108.,  656832.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425.,  485250.,  487075.,  488900.,  495650.,  497500.,  499350.,
      501200.,  508075.,  509950.,  511825.,  513700.,  520700.,  522600.,
      524500.,  526400.,  502725.,  504650.,  506575.,  508500.,  515350.,
      517300.,  519250.,  521200.,  528175.,  530150.,  532125.,  534100.,
      541200.,  543200.,  545200.,  547200.,  522025.,  524050.,  526075.,
      528100.,  535050.,  537100.,  539150.,  541200.,  548275.,  550350.,
      552425.,  554500.,  561700.,  563800.,  565900.,  568000.,  541325.,
      543450.,  545575.,  547700.,  554750.,  556900.,  559050.,  561200.,
      568375.,  570550.,  572725.,  574900.,  582200.,  584400.,  586600.,
      588800.,  637825.,  640450.,  643075.,  645700.,  653250.,  655900.,
      658550.,  661200.,  668875.,  671550.,  674225.,  676900.,  684700.,
      687400.,  690100.,  692800.,  657125.,  659850.,  662575.,  665300.,
      672950.,  675700.,  678450.,  681200.,  688975.,  691750.,  694525.,
      697300.,  705200.,  708000.,  710800.,  713600.,  676425.,  679250.,
      682075.,  684900.,  692650.,  695500.,  698350.,  701200.,  709075.,
      711950.,  714825.,  717700.,  725700.,  728600.,  731500.,  734400.,
      695725.,  698650.,  701575.,  704500.,  712350.,  715300.,  718250.,
      721200.,  729175.,  732150.,  735125.,  738100.,  746200.,  749200.,
      752200.,  755200.,  792225.,  795650.,  799075.,  802500.,  810850.,
      814300.,  817750.,  821200.,  829675.,  833150.,  836625.,  840100.,
      848700.,  852200.,  855700.,  859200.,  811525.,  815050.,  818575.,
      822100.,  830550.,  834100.,  837650.,  841200.,  849775.,  853350.,
      856925.,  860500.,  869200.,  872800.,  876400.,  880000.,  830825.,
      834450.,  838075.,  841700.,  850250.,  853900.,  857550.,  861200.,
      869875.,  873550.,  877225.,  880900.,  889700.,  893400.,  897100.,
      900800.,  850125.,  853850.,  857575.,  861300.,  869950.,  873700.,
      877450.,  881200.,  889975.,  893750.,  897525.,  901300.,  910200.,
      914000.,  917800.,  921600.,  1564225., 1571650., 1579075., 1586500.,
      1598850., 1606300., 1613750., 1621200., 1633675., 1641150., 1648625.,
      1656100., 1668700., 1676200., 1683700., 1691200., 1583525., 1591050.,
      1598575., 1606100., 1618550., 1626100., 1633650., 1641200., 1653775.,
      1661350., 1668925., 1676500., 1689200., 1696800., 1704400., 1712000.,
      1602825., 1610450., 1618075., 1625700., 1638250., 1645900., 1653550.,
      1661200., 1673875., 1681550., 1689225., 1696900., 1709700., 1717400.,
      1725100., 1732800., 1622125., 1629850., 1637575., 1645300., 1657950.,
      1665700., 1673450., 1681200., 1693975., 1701750., 1709525., 1717300.,
      1730200., 1738000., 1745800., 1753600., 1718625., 1726850., 1735075.,
      1743300., 1756450., 1764700., 1772950., 1781200., 1794475., 1802750.,
      1811025., 1819300., 1832700., 1841000., 1849300., 1857600., 1737925.,
      1746250., 1754575., 1762900., 1776150., 1784500., 1792850., 1801200.,
      1814575., 1822950., 1831325., 1839700., 1853200., 1861600., 1870000.,
      1878400., 1757225., 1765650., 1774075., 1782500., 1795850., 1804300.,
      1812750., 1821200., 1834675., 1843150., 1851625., 1860100., 1873700.,
      1882200., 1890700., 1899200., 1776525., 1785050., 1793575., 1802100.,
      1815550., 1824100., 1832650., 1841200., 1854775., 1863350., 1871925.,
      1880500., 1894200., 1902800., 1911400., 1920000., 1873025., 1882050.,
      1891075., 1900100., 1914050., 1923100., 1932150., 1941200., 1955275.,
      1964350., 1973425., 1982500., 1996700., 2005800., 2014900., 2024000.,
      1892325., 1901450., 1910575., 1919700., 1933750., 1942900., 1952050.,
      1961200., 1975375., 1984550., 1993725., 2002900., 2017200., 2026400.,
      2035600., 2044800., 1911625., 1920850., 1930075., 1939300., 1953450.,
      1962700., 1971950., 1981200., 1995475., 2004750., 2014025., 2023300.,
      2037700., 2047000., 2056300., 2065600., 1930925., 1940250., 1949575.,
      1958900., 1973150., 1982500., 1991850., 2001200., 2015575., 2024950.,
      2034325., 2043700., 2058200., 2067600., 2077000., 2086400., 2645025.,
      2658050., 2671075., 2684100., 2702050., 2715100., 2728150., 2741200.,
      2759275., 2772350., 2785425., 2798500., 2816700., 2829800., 2842900.,
      2856000., 2664325., 2677450., 2690575., 2703700., 2721750., 2734900.,
      2748050., 2761200., 2779375., 2792550., 2805725., 2818900., 2837200.,
      2850400., 2863600., 2876800., 2683625., 2696850., 2710075., 2723300.,
      2741450., 2754700., 2767950., 2781200., 2799475., 2812750., 2826025.,
      2839300., 2857700., 2871000., 2884300., 2897600., 2702925., 2716250.,
      2729575., 2742900., 2761150., 2774500., 2787850., 2801200., 2819575.,
      2832950., 2846325., 2859700., 2878200., 2891600., 2905000., 2918400.,
      2799425., 2813250., 2827075., 2840900., 2859650., 2873500., 2887350.,
      2901200., 2920075., 2933950., 2947825., 2961700., 2980700., 2994600.,
      3008500., 3022400., 2818725., 2832650., 2846575., 2860500., 2879350.,
      2893300., 2907250., 2921200., 2940175., 2954150., 2968125., 2982100.,
      3001200., 3015200., 3029200., 3043200., 2838025., 2852050., 2866075.,
      2880100., 2899050., 2913100., 2927150., 2941200., 2960275., 2974350.,
      2988425., 3002500., 3021700., 3035800., 3049900., 3064000., 2857325.,
      2871450., 2885575., 2899700., 2918750., 2932900., 2947050., 2961200.,
      2980375., 2994550., 3008725., 3022900., 3042200., 3056400., 3070600.,
      3084800., 2953825., 2968450., 2983075., 2997700., 3017250., 3031900.,
      3046550., 3061200., 3080875., 3095550., 3110225., 3124900., 3144700.,
      3159400., 3174100., 3188800., 2973125., 2987850., 3002575., 3017300.,
      3036950., 3051700., 3066450., 3081200., 3100975., 3115750., 3130525.,
      3145300., 3165200., 3180000., 3194800., 3209600., 2992425., 3007250.,
      3022075., 3036900., 3056650., 3071500., 3086350., 3101200., 3121075.,
      3135950., 3150825., 3165700., 3185700., 3200600., 3215500., 3230400.,
      3011725., 3026650., 3041575., 3056500., 3076350., 3091300., 3106250.,
      3121200., 3141175., 3156150., 3171125., 3186100., 3206200., 3221200.,
      3236200., 3251200.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1554.,  2142.,  2760.,  3030.,  2460.,  1869.,  2636.,  3564.,  4510.,
      4820.,  3860.,  2894.,  3850.,  5140.,  6425.,  6750.,  5350.,  3970.,
      5110.,  6760.,  8375.,  8700.,  6850.,  5050.,  6370.,  8380.,  10325.,
      10650., 8350.,  6130.,  7630.,  10000., 12275., 12600., 9850.,  7210.,
      5288.,  6868.,  8350.,  8560.,  6620.,  4790.,  3264.,  4182.,  5010.,
      5130.,  3900.,  2769.,  9762.,  12798., 15720., 15990., 12540., 9213.,
      12140., 15852., 19390., 19700., 15380., 11246., 13930., 18100., 22025.,
      22350., 17350., 12610., 15190., 19720., 23975., 24300., 18850., 13690.,
      16450., 21340., 25925., 26250., 20350., 14770., 17710., 22960., 27875.,
      28200., 21850., 15850., 11912., 15316., 18430., 18640., 14300., 10262.,
      7152.,  9078.,  10770., 10890., 8220.,  5793.,  17970., 23454., 28680.,
      28950., 22620., 16557., 21644., 28140., 34270., 34580., 26900., 19598.,
      24010., 31060., 37625., 37950., 29350., 21250., 25270., 32680., 39575.,
      39900., 30850., 22330., 26530., 34300., 41525., 41850., 32350., 23410.,
      27790., 35920., 43475., 43800., 33850., 24490., 18536., 23764., 28510.,
      28720., 21980., 15734., 11040., 13974., 16530., 16650., 12540., 8817.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6425.,  6750.,  8375.,  8700.,  10325., 10650., 12275., 12600.,
      22025., 22350., 23975., 24300., 25925., 26250., 27875., 28200.,
      37625., 37950., 39575., 39900., 41525., 41850., 43475., 43800.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3036.,  3108.,  4182.,  4284.,  5385.,  5520.,  5910.,  6060.,  4794.,
      4920.,  3639.,  3738.,  5140.,  5272.,  6944.,  7128.,  8780.,  9020.,
      9380.,  9640.,  7504.,  7720.,  5620.,  5788.,  7490.,  7700.,  9990.,
      10280., 12475., 12850., 13100., 13500., 10370., 10700., 7685.,  7940.,
      9920.,  10220., 13110., 13520., 16225., 16750., 16850., 17400., 13250.,
      13700., 9755.,  10100., 12350., 12740., 16230., 16760., 19975., 20650.,
      20600., 21300., 16130., 16700., 11825., 12260., 14780., 15260., 19350.,
      20000., 23725., 24550., 24350., 25200., 19010., 19700., 13895., 14420.,
      10156., 10576., 13168., 13736., 15980., 16700., 16380., 17120., 12640.,
      13240., 9124.,  9580.,  6186.,  6528.,  7902.,  8364.,  9435.,  10020.,
      9660.,  10260., 7314.,  7800.,  5169.,  5538.,  19020., 19524., 24918.,
      25596., 30585., 31440., 31110., 31980., 24378., 25080., 17895., 18426.,
      23572., 24280., 30752., 31704., 37580., 38780., 38180., 39400., 29776.,
      30760., 21748., 22492., 26930., 27860., 34950., 36200., 42475., 44050.,
      43100., 44700., 33410., 34700., 24245., 25220., 29360., 30380., 38070.,
      39440., 46225., 47950., 46850., 48600., 36290., 37700., 26315., 27380.,
      31790., 32900., 41190., 42680., 49975., 51850., 50600., 52500., 39170.,
      40700., 28385., 29540., 34220., 35420., 44310., 45920., 53725., 55750.,
      54350., 56400., 42050., 43700., 30455., 31700., 22828., 23824., 29296.,
      30632., 35180., 36860., 35580., 37280., 27232., 28600., 19492., 20524.,
      13530., 14304., 17118., 18156., 20235., 21540., 20460., 21780., 15378.,
      16440., 10785., 11586., 35004., 35940., 45654., 46908., 55785., 57360.,
      56310., 57900., 43962., 45240., 32151., 33114., 42004., 43288., 54560.,
      56280., 66380., 68540., 66980., 69160., 52048., 53800., 37876., 39196.,
      46370., 48020., 59910., 62120., 72475., 75250., 73100., 75900., 56450.,
      58700., 40805., 42500., 48800., 50540., 63030., 65360., 76225., 79150.,
      76850., 79800., 59330., 61700., 42875., 44660., 51230., 53060., 66150.,
      68600., 79975., 83050., 80600., 83700., 62210., 64700., 44945., 46820.,
      53660., 55580., 69270., 71840., 83725., 86950., 84350., 87600., 65090.,
      67700., 47015., 48980., 35500., 37072., 45424., 47528., 54380., 57020.,
      54780., 57440., 41824., 43960., 29860., 31468., 20874., 22080., 26334.,
      27948., 31035., 33060., 31260., 33300., 23442., 25080., 16401., 17634.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12475., 12850., 13100., 13500., 16225., 16750., 16850., 17400.,
      19975., 20650., 20600., 21300., 23725., 24550., 24350., 25200.,
      42475., 44050., 43100., 44700., 46225., 47950., 46850., 48600.,
      49975., 51850., 50600., 52500., 53725., 55750., 54350., 56400.,
      72475., 75250., 73100., 75900., 76225., 79150., 76850., 79800.,
      79975., 83050., 80600., 83700., 83725., 86950., 84350., 87600.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6000.,   6072.,   6144.,   6216.,   8262.,   8364.,   8466.,   8568.,
      10635.,  10770.,  10905.,  11040.,  11670.,  11820.,  11970.,  12120.,
      9462.,   9588.,   9714.,   9840.,   7179.,   7278.,   7377.,   7476.,
      10148.,  10280.,  10412.,  10544.,  13704.,  13888.,  14072.,  14256.,
      17320.,  17560.,  17800.,  18040.,  18500.,  18760.,  19020.,  19280.,
      14792.,  15008.,  15224.,  15440.,  11072.,  11240.,  11408.,  11576.,
      14770.,  14980.,  15190.,  15400.,  19690.,  19980.,  20270.,  20560.,
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      20410.,  20740.,  21070.,  21400.,  15115.,  15370.,  15625.,  15880.,
      19540.,  19840.,  20140.,  20440.,  25810.,  26220.,  26630.,  27040.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      26050.,  26500.,  26950.,  27400.,  19165.,  19510.,  19855.,  20200.,
      24310.,  24700.,  25090.,  25480.,  31930.,  32460.,  32990.,  33520.,
      39275.,  39950.,  40625.,  41300.,  40500.,  41200.,  41900.,  42600.,
      31690.,  32260.,  32830.,  33400.,  23215.,  23650.,  24085.,  24520.,
      29080.,  29560.,  30040.,  30520.,  38050.,  38700.,  39350.,  40000.,
      46625.,  47450.,  48275.,  49100.,  47850.,  48700.,  49550.,  50400.,
      37330.,  38020.,  38710.,  39400.,  27265.,  27790.,  28315.,  28840.,
      19892.,  20312.,  20732.,  21152.,  25768.,  26336.,  26904.,  27472.,
      31240.,  31960.,  32680.,  33400.,  32020.,  32760.,  33500.,  34240.,
      24680.,  25280.,  25880.,  26480.,  17792.,  18248.,  18704.,  19160.,
      12030.,  12372.,  12714.,  13056.,  15342.,  15804.,  16266.,  16728.,
      18285.,  18870.,  19455.,  20040.,  18720.,  19320.,  19920.,  20520.,
      14142.,  14628.,  15114.,  15600.,  9969.,   10338.,  10707.,  11076.,
      37536.,  38040.,  38544.,  39048.,  49158.,  49836.,  50514.,  51192.,
      60315.,  61170.,  62025.,  62880.,  61350.,  62220.,  63090.,  63960.,
      48054.,  48756.,  49458.,  50160.,  35259.,  35790.,  36321.,  36852.,
      46436.,  47144.,  47852.,  48560.,  60552.,  61504.,  62456.,  63408.,
      73960.,  75160.,  76360.,  77560.,  75140.,  76360.,  77580.,  78800.,
      58568.,  59552.,  60536.,  61520.,  42752.,  43496.,  44240.,  44984.,
      52930.,  53860.,  54790.,  55720.,  68650.,  69900.,  71150.,  72400.,
      83375.,  84950.,  86525.,  88100.,  84600.,  86200.,  87800.,  89400.,
      65530.,  66820.,  68110.,  69400.,  47515.,  48490.,  49465.,  50440.,
      57700.,  58720.,  59740.,  60760.,  74770.,  76140.,  77510.,  78880.,
      90725.,  92450.,  94175.,  95900.,  91950.,  93700.,  95450.,  97200.,
      71170.,  72580.,  73990.,  75400.,  51565.,  52630.,  53695.,  54760.,
      62470.,  63580.,  64690.,  65800.,  80890.,  82380.,  83870.,  85360.,
      98075.,  99950.,  101825., 103700., 99300.,  101200., 103100., 105000.,
      76810.,  78340.,  79870.,  81400.,  55615.,  56770.,  57925.,  59080.,
      67240.,  68440.,  69640.,  70840.,  87010.,  88620.,  90230.,  91840.,
      105425., 107450., 109475., 111500., 106650., 108700., 110750., 112800.,
      82450.,  84100.,  85750.,  87400.,  59665.,  60910.,  62155.,  63400.,
      44660.,  45656.,  46652.,  47648.,  57256.,  58592.,  59928.,  61264.,
      68680.,  70360.,  72040.,  73720.,  69460.,  71160.,  72860.,  74560.,
      53096.,  54464.,  55832.,  57200.,  37952.,  38984.,  40016.,  41048.,
      26286.,  27060.,  27834.,  28608.,  33198.,  34236.,  35274.,  36312.,
      39165.,  40470.,  41775.,  43080.,  39600.,  40920.,  42240.,  43560.,
      29694.,  30756.,  31818.,  32880.,  20769.,  21570.,  22371.,  23172.,
      69072.,  70008.,  70944.,  71880.,  90054.,  91308.,  92562.,  93816.,
      109995., 111570., 113145., 114720., 111030., 112620., 114210., 115800.,
      86646.,  87924.,  89202.,  90480.,  63339.,  64302.,  65265.,  66228.,
      82724.,  84008.,  85292.,  86576.,  107400., 109120., 110840., 112560.,
      130600., 132760., 134920., 137080., 131780., 133960., 136140., 138320.,
      102344., 104096., 105848., 107600., 74432.,  75752.,  77072.,  78392.,
      91090.,  92740.,  94390.,  96040.,  117610., 119820., 122030., 124240.,
      142175., 144950., 147725., 150500., 143400., 146200., 149000., 151800.,
      110650., 112900., 115150., 117400., 79915.,  81610.,  83305.,  85000.,
      95860.,  97600.,  99340.,  101080., 123730., 126060., 128390., 130720.,
      149525., 152450., 155375., 158300., 150750., 153700., 156650., 159600.,
      116290., 118660., 121030., 123400., 83965.,  85750.,  87535.,  89320.,
      100630., 102460., 104290., 106120., 129850., 132300., 134750., 137200.,
      156875., 159950., 163025., 166100., 158100., 161200., 164300., 167400.,
      121930., 124420., 126910., 129400., 88015.,  89890.,  91765.,  93640.,
      105400., 107320., 109240., 111160., 135970., 138540., 141110., 143680.,
      164225., 167450., 170675., 173900., 165450., 168700., 171950., 175200.,
      127570., 130180., 132790., 135400., 92065.,  94030.,  95995.,  97960.,
      69428.,  71000.,  72572.,  74144.,  88744.,  90848.,  92952.,  95056.,
      106120., 108760., 111400., 114040., 106900., 109560., 112220., 114880.,
      81512.,  83648.,  85784.,  87920.,  58112.,  59720.,  61328.,  62936.,
      40542.,  41748.,  42954.,  44160.,  51054.,  52668.,  54282.,  55896.,
      60045.,  62070.,  64095.,  66120.,  60480.,  62520.,  64560.,  66600.,
      45246.,  46884.,  48522.,  50160.,  31569.,  32802.,  34035.,  35268.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24575.,  24950.,  25325.,  25700.,  25800.,  26200.,  26600.,  27000.,
      31925.,  32450.,  32975.,  33500.,  33150.,  33700.,  34250.,  34800.,
      39275.,  39950.,  40625.,  41300.,  40500.,  41200.,  41900.,  42600.,
      46625.,  47450.,  48275.,  49100.,  47850.,  48700.,  49550.,  50400.,
      83375.,  84950.,  86525.,  88100.,  84600.,  86200.,  87800.,  89400.,
      90725.,  92450.,  94175.,  95900.,  91950.,  93700.,  95450.,  97200.,
      98075.,  99950.,  101825., 103700., 99300.,  101200., 103100., 105000.,
      105425., 107450., 109475., 111500., 106650., 108700., 110750., 112800.,
      142175., 144950., 147725., 150500., 143400., 146200., 149000., 151800.,
      149525., 152450., 155375., 158300., 150750., 153700., 156650., 159600.,
      156875., 159950., 163025., 166100., 158100., 161200., 164300., 167400.,
      164225., 167450., 170675., 173900., 165450., 168700., 171950., 175200.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5739.,   6216.,   7932.,   8568.,   10245.,  11040.,  11295.,  12120.,
      9180.,   9840.,   6981.,   7476.,   9896.,   10544.,  13392.,  14256.,
      16960.,  18040.,  18160.,  19280.,  14544.,  15440.,  10904.,  11576.,
      14575.,  15400.,  19460.,  20560.,  24325.,  25700.,  25575.,  27000.,
      20260.,  21400.,  15025.,  15880.,  19435.,  20440.,  25700.,  27040.,
      31825.,  33500.,  33075.,  34800.,  26020.,  27400.,  19165.,  20200.,
      24295.,  25480.,  31940.,  33520.,  39325.,  41300.,  40575.,  42600.,
      31780.,  33400.,  23305.,  24520.,  29155.,  30520.,  38180.,  40000.,
      46825.,  49100.,  48075.,  50400.,  37540.,  39400.,  27445.,  28840.,
      20048.,  21152.,  26000.,  27472.,  31560.,  33400.,  32360.,  34240.,
      24976.,  26480.,  18032.,  19160.,  12219.,  13056.,  15612.,  16728.,
      18645.,  20040.,  19095.,  20520.,  14460.,  15600.,  10221.,  11076.,
      37707.,  39048.,  49404.,  51192.,  60645.,  62880.,  61695.,  63960.,
      48348.,  50160.,  35493.,  36852.,  46760.,  48560.,  61008.,  63408.,
      74560.,  77560.,  75760.,  78800.,  59088.,  61520.,  43160.,  44984.,
      53455.,  55720.,  69380.,  72400.,  84325.,  88100.,  85575.,  89400.,
      66340.,  69400.,  48145.,  50440.,  58315.,  60760.,  75620.,  78880.,
      91825.,  95900.,  93075.,  97200.,  72100.,  75400.,  52285.,  54760.,
      63175.,  65800.,  81860.,  85360.,  99325.,  103700., 100575., 105000.,
      77860.,  81400.,  56425.,  59080.,  68035.,  70840.,  88100.,  91840.,
      106825., 111500., 108075., 112800., 83620.,  87400.,  60565.,  63400.,
      45392.,  47648.,  58256.,  61264.,  69960.,  73720.,  70760.,  74560.,
      54160.,  57200.,  38768.,  41048.,  26907.,  28608.,  34044.,  36312.,
      40245.,  43080.,  40695.,  43560.,  30588.,  32880.,  21453.,  23172.,
      69675.,  71880.,  90876.,  93816.,  111045., 114720., 112095., 115800.,
      87516.,  90480.,  64005.,  66228.,  83624.,  86576.,  108624., 112560.,
      132160., 137080., 133360., 138320., 103632., 107600., 75416.,  78392.,
      92335.,  96040.,  119300., 124240., 144325., 150500., 145575., 151800.,
      112420., 117400., 81265.,  85000.,  97195.,  101080., 125540., 130720.,
      151825., 158300., 153075., 159600., 118180., 123400., 85405.,  89320.,
      102055., 106120., 131780., 137200., 159325., 166100., 160575., 167400.,
      123940., 129400., 89545.,  93640.,  106915., 111160., 138020., 143680.,
      166825., 173900., 168075., 175200., 129700., 135400., 93685.,  97960.,
      70736.,  74144.,  90512.,  95056.,  108360., 114040., 109160., 114880.,
      83344.,  87920.,  59504.,  62936.,  41595.,  44160.,  52476.,  55896.,
      61845.,  66120.,  62295.,  66600.,  46716.,  50160.,  32685.,  35268.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24325.,  25700.,  25575.,  27000.,  31825.,  33500.,  33075.,  34800.,
      39325.,  41300.,  40575.,  42600.,  46825.,  49100.,  48075.,  50400.,
      84325.,  88100.,  85575.,  89400.,  91825.,  95900.,  93075.,  97200.,
      99325.,  103700., 100575., 105000., 106825., 111500., 108075., 112800.,
      144325., 150500., 145575., 151800., 151825., 158300., 153075., 159600.,
      159325., 166100., 160575., 167400., 166825., 173900., 168075., 175200.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      11343.,  11478.,  12288.,  12432.,  15672.,  15864.,  16932.,  17136.,
      20235.,  20490.,  21810.,  22080.,  22305.,  22590.,  23940.,  24240.,
      18120.,  18360.,  19428.,  19680.,  13773.,  13962.,  14754.,  14952.,
      19540.,  19792.,  20824.,  21088.,  26432.,  26784.,  28144.,  28512.,
      33460.,  33920.,  35600.,  36080.,  35820.,  36320.,  38040.,  38560.,
      28672.,  29088.,  30448.,  30880.,  21484.,  21808.,  22816.,  23152.,
      28745.,  29150.,  30380.,  30800.,  38360.,  38920.,  40540.,  41120.,
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      39880.,  40520.,  42140.,  42800.,  29555.,  30050.,  31250.,  31760.,
      38285.,  38870.,  40280.,  40880.,  50600.,  51400.,  53260.,  54080.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      51160.,  52040.,  53900.,  54800.,  37655.,  38330.,  39710.,  40400.,
      47825.,  48590.,  50180.,  50960.,  62840.,  63880.,  65980.,  67040.,
      77325.,  78650.,  81250.,  82600.,  79775.,  81150.,  83800.,  85200.,
      62440.,  63560.,  65660.,  66800.,  45755.,  46610.,  48170.,  49040.,
      57365.,  58310.,  60080.,  61040.,  75080.,  76360.,  78700.,  80000.,
      92025.,  93650.,  96550.,  98200.,  94475.,  96150.,  99100.,  100800.,
      73720.,  75080.,  77420.,  78800.,  53855.,  54890.,  56630.,  57680.,
      39268.,  40096.,  41464.,  42304.,  50880.,  52000.,  53808.,  54944.,
      61700.,  63120.,  65360.,  66800.,  63260.,  64720.,  67000.,  68480.,
      48768.,  49952.,  51760.,  52960.,  35164.,  36064.,  37408.,  38320.,
      23763.,  24438.,  25428.,  26112.,  30312.,  31224.,  32532.,  33456.,
      36135.,  37290.,  38910.,  40080.,  37005.,  38190.,  39840.,  41040.,
      27960.,  28920.,  30228.,  31200.,  19713.,  20442.,  21414.,  22152.,
      74415.,  75414.,  77088.,  78096.,  97464.,  98808.,  101028., 102384.,
      119595., 121290., 124050., 125760., 121665., 123390., 126180., 127920.,
      95304.,  96696.,  98916.,  100320., 69933.,  70986.,  72642.,  73704.,
      92116.,  93520.,  95704.,  97120.,  120128., 122016., 124912., 126816.,
      146740., 149120., 152720., 155120., 149100., 151520., 155160., 157600.,
      116224., 118176., 121072., 123040., 84844.,  86320.,  88480.,  89968.,
      105065., 106910., 109580., 111440., 136280., 138760., 142300., 144800.,
      165525., 168650., 173050., 176200., 167975., 171150., 175600., 178800.,
      130120., 132680., 136220., 138800., 94355.,  96290.,  98930.,  100880.,
      114605., 116630., 119480., 121520., 148520., 151240., 155020., 157760.,
      180225., 183650., 188350., 191800., 182675., 186150., 190900., 194400.,
      141400., 144200., 147980., 150800., 102455., 104570., 107390., 109520.,
      124145., 126350., 129380., 131600., 160760., 163720., 167740., 170720.,
      194925., 198650., 203650., 207400., 197375., 201150., 206200., 210000.,
      152680., 155720., 159740., 162800., 110555., 112850., 115850., 118160.,
      133685., 136070., 139280., 141680., 173000., 176200., 180460., 183680.,
      209625., 213650., 218950., 223000., 212075., 216150., 221500., 225600.,
      163960., 167240., 171500., 174800., 118655., 121130., 124310., 126800.,
      88804.,  90784.,  93304.,  95296.,  113856., 116512., 119856., 122528.,
      136580., 139920., 144080., 147440., 138140., 141520., 145720., 149120.,
      105600., 108320., 111664., 114400., 75484.,  77536.,  80032.,  82096.,
      52275.,  53814.,  55668.,  57216.,  66024.,  68088.,  70548.,  72624.,
      77895.,  80490.,  83550.,  86160.,  78765.,  81390.,  84480.,  87120.,
      59064.,  61176.,  63636.,  65760.,  41313.,  42906.,  44742.,  46344.,
      137487., 139350., 141888., 143760., 179256., 181752., 185124., 187632.,
      218955., 222090., 226290., 229440., 221025., 224190., 228420., 231600.,
      172488., 175032., 178404., 180960., 126093., 128010., 130530., 132456.,
      164692., 167248., 170584., 173152., 213824., 217248., 221680., 225120.,
      260020., 264320., 269840., 274160., 262380., 266720., 272280., 276640.,
      203776., 207264., 211696., 215200., 148204., 150832., 154144., 156784.,
      181385., 184670., 188780., 192080., 234200., 238600., 244060., 248480.,
      283125., 288650., 295450., 301000., 285575., 291150., 298000., 303600.,
      220360., 224840., 230300., 234800., 159155., 162530., 166610., 170000.,
      190925., 194390., 198680., 202160., 246440., 251080., 256780., 261440.,
      297825., 303650., 310750., 316600., 300275., 306150., 313300., 319200.,
      231640., 236360., 242060., 246800., 167255., 170810., 175070., 178640.,
      200465., 204110., 208580., 212240., 258680., 263560., 269500., 274400.,
      312525., 318650., 326050., 332200., 314975., 321150., 328600., 334800.,
      242920., 247880., 253820., 258800., 175355., 179090., 183530., 187280.,
      210005., 213830., 218480., 222320., 270920., 276040., 282220., 287360.,
      327225., 333650., 341350., 347800., 329675., 336150., 343900., 350400.,
      254200., 259400., 265580., 270800., 183455., 187370., 191990., 195920.,
      138340., 141472., 145144., 148288., 176832., 181024., 185904., 190112.,
      211460., 216720., 222800., 228080., 213020., 218320., 224440., 229760.,
      162432., 166688., 171568., 175840., 115804., 119008., 122656., 125872.,
      80787.,  83190.,  85908.,  88320.,  101736., 104952., 108564., 111792.,
      119655., 123690., 128190., 132240., 120525., 124590., 129120., 133200.,
      90168.,  93432.,  97044.,  100320., 62913.,  65370.,  68070.,  70536.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      47925.,  48650.,  50650.,  51400.,  50375.,  51150.,  53200.,  54000.,
      62625.,  63650.,  65950.,  67000.,  65075.,  66150.,  68500.,  69600.,
      77325.,  78650.,  81250.,  82600.,  79775.,  81150.,  83800.,  85200.,
      92025.,  93650.,  96550.,  98200.,  94475.,  96150.,  99100.,  100800.,
      165525., 168650., 173050., 176200., 167975., 171150., 175600., 178800.,
      180225., 183650., 188350., 191800., 182675., 186150., 190900., 194400.,
      194925., 198650., 203650., 207400., 197375., 201150., 206200., 210000.,
      209625., 213650., 218950., 223000., 212075., 216150., 221500., 225600.,
      283125., 288650., 295450., 301000., 285575., 291150., 298000., 303600.,
      297825., 303650., 310750., 316600., 300275., 306150., 313300., 319200.,
      312525., 318650., 326050., 332200., 314975., 321150., 328600., 334800.,
      327225., 333650., 341350., 347800., 329675., 336150., 343900., 350400.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22551.,  22686.,  22821.,  22956.,  24432.,  24576.,  24720.,  24864.,
      31152.,  31344.,  31536.,  31728.,  33660.,  33864.,  34068.,  34272.,
      40215.,  40470.,  40725.,  40980.,  43350.,  43620.,  43890.,  44160.,
      44325.,  44610.,  44895.,  45180.,  47580.,  47880.,  48180.,  48480.,
      36000.,  36240.,  36480.,  36720.,  38604.,  38856.,  39108.,  39360.,
      27357.,  27546.,  27735.,  27924.,  29310.,  29508.,  29706.,  29904.,
      38828.,  39080.,  39332.,  39584.,  41384.,  41648.,  41912.,  42176.,
      52512.,  52864.,  53216.,  53568.,  55920.,  56288.,  56656.,  57024.,
      66460.,  66920.,  67380.,  67840.,  70720.,  71200.,  71680.,  72160.,
      71140.,  71640.,  72140.,  72640.,  75560.,  76080.,  76600.,  77120.,
      56928.,  57344.,  57760.,  58176.,  60464.,  60896.,  61328.,  61760.,
      42644.,  42968.,  43292.,  43616.,  45296.,  45632.,  45968.,  46304.,
      57085.,  57490.,  57895.,  58300.,  60340.,  60760.,  61180.,  61600.,
      76160.,  76720.,  77280.,  77840.,  80500.,  81080.,  81660.,  82240.,
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      79120.,  79760.,  80400.,  81040.,  83620.,  84280.,  84940.,  85600.,
      58615.,  59110.,  59605.,  60100.,  61990.,  62500.,  63010.,  63520.,
      75985.,  76570.,  77155.,  77740.,  79960.,  80560.,  81160.,  81760.,
      100400., 101200., 102000., 102800., 105700., 106520., 107340., 108160.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      101440., 102320., 103200., 104080., 106900., 107800., 108700., 109600.,
      74635.,  75310.,  75985.,  76660.,  78730.,  79420.,  80110.,  80800.,
      94885.,  95650.,  96415.,  97180.,  99580.,  100360., 101140., 101920.,
      124640., 125680., 126720., 127760., 130900., 131960., 133020., 134080.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      123760., 124880., 126000., 127120., 130180., 131320., 132460., 133600.,
      90655.,  91510.,  92365.,  93220.,  95470.,  96340.,  97210.,  98080.,
      113785., 114730., 115675., 116620., 119200., 120160., 121120., 122080.,
      148880., 150160., 151440., 152720., 156100., 157400., 158700., 160000.,
      182425., 184050., 185675., 187300., 191450., 193100., 194750., 196400.,
      187275., 188950., 190625., 192300., 196500., 198200., 199900., 201600.,
      146080., 147440., 148800., 150160., 153460., 154840., 156220., 157600.,
      106675., 107710., 108745., 109780., 112210., 113260., 114310., 115360.,
      77708.,  78536.,  79364.,  80192.,  82088.,  82928.,  83768.,  84608.,
      100640., 101760., 102880., 104000., 106480., 107616., 108752., 109888.,
      121980., 123400., 124820., 126240., 129280., 130720., 132160., 133600.,
      125060., 126520., 127980., 129440., 132520., 134000., 135480., 136960.,
      96352.,  97536.,  98720.,  99904.,  102320., 103520., 104720., 105920.,
      69428.,  70328.,  71228.,  72128.,  73904.,  74816.,  75728.,  76640.,
      46851.,  47526.,  48201.,  48876.,  50172.,  50856.,  51540.,  52224.,
      59712.,  60624.,  61536.,  62448.,  64140.,  65064.,  65988.,  66912.,
      71115.,  72270.,  73425.,  74580.,  76650.,  77820.,  78990.,  80160.,
      72825.,  74010.,  75195.,  76380.,  78480.,  79680.,  80880.,  82080.,
      54960.,  55920.,  56880.,  57840.,  59484.,  60456.,  61428.,  62400.,
      38697.,  39426.,  40155.,  40884.,  42090.,  42828.,  43566.,  44304.,
      147831., 148830., 149829., 150828., 153168., 154176., 155184., 156192.,
      193584., 194928., 196272., 197616., 200700., 202056., 203412., 204768.,
      237495., 239190., 240885., 242580., 246390., 248100., 249810., 251520.,
      241605., 243330., 245055., 246780., 250620., 252360., 254100., 255840.,
      189216., 190608., 192000., 193392., 196428., 197832., 199236., 200640.,
      138813., 139866., 140919., 141972., 144222., 145284., 146346., 147408.,
      182828., 184232., 185636., 187040., 189992., 191408., 192824., 194240.,
      238368., 240256., 242144., 244032., 247920., 249824., 251728., 253632.,
      291100., 293480., 295860., 298240., 303040., 305440., 307840., 310240.,
      295780., 298200., 300620., 303040., 307880., 310320., 312760., 315200.,
      230496., 232448., 234400., 236352., 240176., 242144., 244112., 246080.,
      168212., 169688., 171164., 172640., 175472., 176960., 178448., 179936.,
      208285., 210130., 211975., 213820., 217300., 219160., 221020., 222880.,
      270080., 272560., 275040., 277520., 282100., 284600., 287100., 289600.,
      327925., 331050., 334175., 337300., 342950., 346100., 349250., 352400.,
      332775., 335950., 339125., 342300., 348000., 351200., 354400., 357600.,
      257680., 260240., 262800., 265360., 269860., 272440., 275020., 277600.,
      186775., 188710., 190645., 192580., 195910., 197860., 199810., 201760.,
      227185., 229210., 231235., 233260., 236920., 238960., 241000., 243040.,
      294320., 297040., 299760., 302480., 307300., 310040., 312780., 315520.,
      357025., 360450., 363875., 367300., 373250., 376700., 380150., 383600.,
      361875., 365350., 368825., 372300., 378300., 381800., 385300., 388800.,
      280000., 282800., 285600., 288400., 293140., 295960., 298780., 301600.,
      202795., 204910., 207025., 209140., 212650., 214780., 216910., 219040.,
      246085., 248290., 250495., 252700., 256540., 258760., 260980., 263200.,
      318560., 321520., 324480., 327440., 332500., 335480., 338460., 341440.,
      386125., 389850., 393575., 397300., 403550., 407300., 411050., 414800.,
      390975., 394750., 398525., 402300., 408600., 412400., 416200., 420000.,
      302320., 305360., 308400., 311440., 316420., 319480., 322540., 325600.,
      218815., 221110., 223405., 225700., 229390., 231700., 234010., 236320.,
      264985., 267370., 269755., 272140., 276160., 278560., 280960., 283360.,
      342800., 346000., 349200., 352400., 357700., 360920., 364140., 367360.,
      415225., 419250., 423275., 427300., 433850., 437900., 441950., 446000.,
      420075., 424150., 428225., 432300., 438900., 443000., 447100., 451200.,
      324640., 327920., 331200., 334480., 339700., 343000., 346300., 349600.,
      234835., 237310., 239785., 242260., 246130., 248620., 251110., 253600.,
      175628., 177608., 179588., 181568., 184616., 186608., 188600., 190592.,
      225056., 227712., 230368., 233024., 237040., 239712., 242384., 245056.,
      269820., 273160., 276500., 279840., 284800., 288160., 291520., 294880.,
      272900., 276280., 279660., 283040., 288040., 291440., 294840., 298240.,
      208480., 211200., 213920., 216640., 220592., 223328., 226064., 228800.,
      148916., 150968., 153020., 155072., 158000., 160064., 162128., 164192.,
      103011., 104550., 106089., 107628., 109788., 111336., 112884., 114432.,
      129984., 132048., 134112., 136176., 139020., 141096., 143172., 145248.,
      153195., 155790., 158385., 160980., 164490., 167100., 169710., 172320.,
      154905., 157530., 160155., 162780., 166320., 168960., 171600., 174240.,
      116016., 118128., 120240., 122352., 125148., 127272., 129396., 131520.,
      81033.,  82626.,  84219.,  85812.,  87882.,  89484.,  91086.,  92688.,
      273111., 274974., 276837., 278700., 281904., 283776., 285648., 287520.,
      356016., 358512., 361008., 363504., 367740., 370248., 372756., 375264.,
      434775., 437910., 441045., 444180., 449430., 452580., 455730., 458880.,
      438885., 442050., 445215., 448380., 453660., 456840., 460020., 463200.,
      342432., 344976., 347520., 350064., 354252., 356808., 359364., 361920.,
      250269., 252186., 254103., 256020., 259134., 261060., 262986., 264912.,
      326828., 329384., 331940., 334496., 338600., 341168., 343736., 346304.,
      424224., 427648., 431072., 434496., 439920., 443360., 446800., 450240.,
      515740., 520040., 524340., 528640., 535360., 539680., 544000., 548320.,
      520420., 524760., 529100., 533440., 540200., 544560., 548920., 553280.,
      404064., 407552., 411040., 414528., 419888., 423392., 426896., 430400.,
      293780., 296408., 299036., 301664., 305648., 308288., 310928., 313568.,
      359485., 362770., 366055., 369340., 374260., 377560., 380860., 384160.,
      464000., 468400., 472800., 477200., 483700., 488120., 492540., 496960.,
      560725., 566250., 571775., 577300., 585350., 590900., 596450., 602000.,
      565575., 571150., 576725., 582300., 590400., 596000., 601600., 607200.,
      436240., 440720., 445200., 449680., 456100., 460600., 465100., 469600.,
      314935., 318310., 321685., 325060., 329830., 333220., 336610., 340000.,
      378385., 381850., 385315., 388780., 393880., 397360., 400840., 404320.,
      488240., 492880., 497520., 502160., 508900., 513560., 518220., 522880.,
      589825., 595650., 601475., 607300., 615650., 621500., 627350., 633200.,
      594675., 600550., 606425., 612300., 620700., 626600., 632500., 638400.,
      458560., 463280., 468000., 472720., 479380., 484120., 488860., 493600.,
      330955., 334510., 338065., 341620., 346570., 350140., 353710., 357280.,
      397285., 400930., 404575., 408220., 413500., 417160., 420820., 424480.,
      512480., 517360., 522240., 527120., 534100., 539000., 543900., 548800.,
      618925., 625050., 631175., 637300., 645950., 652100., 658250., 664400.,
      623775., 629950., 636125., 642300., 651000., 657200., 663400., 669600.,
      480880., 485840., 490800., 495760., 502660., 507640., 512620., 517600.,
      346975., 350710., 354445., 358180., 363310., 367060., 370810., 374560.,
      416185., 420010., 423835., 427660., 433120., 436960., 440800., 444640.,
      536720., 541840., 546960., 552080., 559300., 564440., 569580., 574720.,
      648025., 654450., 660875., 667300., 676250., 682700., 689150., 695600.,
      652875., 659350., 665825., 672300., 681300., 687800., 694300., 700800.,
      503200., 508400., 513600., 518800., 525940., 531160., 536380., 541600.,
      362995., 366910., 370825., 374740., 380050., 383980., 387910., 391840.,
      273548., 276680., 279812., 282944., 287144., 290288., 293432., 296576.,
      349472., 353664., 357856., 362048., 367600., 371808., 376016., 380224.,
      417660., 422920., 428180., 433440., 440320., 445600., 450880., 456160.,
      420740., 426040., 431340., 436640., 443560., 448880., 454200., 459520.,
      320608., 324864., 329120., 333376., 338864., 343136., 347408., 351680.,
      228404., 231608., 234812., 238016., 242096., 245312., 248528., 251744.,
      159171., 161574., 163977., 166380., 169404., 171816., 174228., 176640.,
      200256., 203472., 206688., 209904., 213900., 217128., 220356., 223584.,
      235275., 239310., 243345., 247380., 252330., 256380., 260430., 264480.,
      236985., 241050., 245115., 249180., 254160., 258240., 262320., 266400.,
      177072., 180336., 183600., 186864., 190812., 194088., 197364., 200640.,
      123369., 125826., 128283., 130740., 133674., 136140., 138606., 141072.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      95125.,  95850.,  96575.,  97300.,  100550., 101300., 102050., 102800.,
      99975.,  100750., 101525., 102300., 105600., 106400., 107200., 108000.,
      124225., 125250., 126275., 127300., 130850., 131900., 132950., 134000.,
      129075., 130150., 131225., 132300., 135900., 137000., 138100., 139200.,
      153325., 154650., 155975., 157300., 161150., 162500., 163850., 165200.,
      158175., 159550., 160925., 162300., 166200., 167600., 169000., 170400.,
      182425., 184050., 185675., 187300., 191450., 193100., 194750., 196400.,
      187275., 188950., 190625., 192300., 196500., 198200., 199900., 201600.,
      327925., 331050., 334175., 337300., 342950., 346100., 349250., 352400.,
      332775., 335950., 339125., 342300., 348000., 351200., 354400., 357600.,
      357025., 360450., 363875., 367300., 373250., 376700., 380150., 383600.,
      361875., 365350., 368825., 372300., 378300., 381800., 385300., 388800.,
      386125., 389850., 393575., 397300., 403550., 407300., 411050., 414800.,
      390975., 394750., 398525., 402300., 408600., 412400., 416200., 420000.,
      415225., 419250., 423275., 427300., 433850., 437900., 441950., 446000.,
      420075., 424150., 428225., 432300., 438900., 443000., 447100., 451200.,
      560725., 566250., 571775., 577300., 585350., 590900., 596450., 602000.,
      565575., 571150., 576725., 582300., 590400., 596000., 601600., 607200.,
      589825., 595650., 601475., 607300., 615650., 621500., 627350., 633200.,
      594675., 600550., 606425., 612300., 620700., 626600., 632500., 638400.,
      618925., 625050., 631175., 637300., 645950., 652100., 658250., 664400.,
      623775., 629950., 636125., 642300., 651000., 657200., 663400., 669600.,
      648025., 654450., 660875., 667300., 676250., 682700., 689150., 695600.,
      652875., 659350., 665825., 672300., 681300., 687800., 694300., 700800.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22029.,  22956.,  23901.,  24864.,  30492.,  31728.,  32988.,  34272.,
      39435.,  40980.,  42555.,  44160.,  43575.,  45180.,  46815.,  48480.,
      35436.,  36720.,  38028.,  39360.,  26961.,  27924.,  28905.,  29904.,
      38324.,  39584.,  40868.,  42176.,  51888.,  53568.,  55280.,  57024.,
      65740.,  67840.,  69980.,  72160.,  70460.,  72640.,  74860.,  77120.,
      56432.,  58176.,  59952.,  61760.,  42308.,  43616.,  44948.,  46304.,
      56695.,  58300.,  59935.,  61600.,  75700.,  77840.,  80020.,  82240.,
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      78820.,  81040.,  83300.,  85600.,  58435.,  60100.,  61795.,  63520.,
      75775.,  77740.,  79735.,  81760.,  100180., 102800., 105460., 108160.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      101380., 104080., 106820., 109600., 74635.,  76660.,  78715.,  80800.,
      94855.,  97180.,  99535.,  101920., 124660., 127760., 130900., 134080.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      123940., 127120., 130340., 133600., 90835.,  93220.,  95635.,  98080.,
      113935., 116620., 119335., 122080., 149140., 152720., 156340., 160000.,
      182825., 187300., 191825., 196400., 187725., 192300., 196925., 201600.,
      146500., 150160., 153860., 157600., 107035., 109780., 112555., 115360.,
      78020.,  80192.,  82388.,  84608.,  101104., 104000., 106928., 109888.,
      122620., 126240., 129900., 133600., 125740., 129440., 133180., 136960.,
      96944.,  99904.,  102896., 105920., 69908.,  72128.,  74372.,  76640.,
      47229.,  48876.,  50541.,  52224.,  60252.,  62448.,  64668.,  66912.,
      71835.,  74580.,  77355.,  80160.,  73575.,  76380.,  79215.,  82080.,
      55596.,  57840.,  60108.,  62400.,  39201.,  40884.,  42585.,  44304.,
      148173., 150828., 153501., 156192., 194076., 197616., 201180., 204768.,
      238155., 242580., 247035., 251520., 242295., 246780., 251295., 255840.,
      189804., 193392., 197004., 200640., 139281., 141972., 144681., 147408.,
      183476., 187040., 190628., 194240., 239280., 244032., 248816., 253632.,
      292300., 298240., 304220., 310240., 297020., 303040., 309100., 315200.,
      231536., 236352., 241200., 246080., 169028., 172640., 176276., 179936.,
      209335., 213820., 218335., 222880., 271540., 277520., 283540., 289600.,
      329825., 337300., 344825., 352400., 334725., 342300., 349925., 357600.,
      259300., 265360., 271460., 277600., 188035., 192580., 197155., 201760.,
      228415., 233260., 238135., 243040., 296020., 302480., 308980., 315520.,
      359225., 367300., 375425., 383600., 364125., 372300., 380525., 388800.,
      281860., 288400., 294980., 301600., 204235., 209140., 214075., 219040.,
      247495., 252700., 257935., 263200., 320500., 327440., 334420., 341440.,
      388625., 397300., 406025., 414800., 393525., 402300., 411125., 420000.,
      304420., 311440., 318500., 325600., 220435., 225700., 230995., 236320.,
      266575., 272140., 277735., 283360., 344980., 352400., 359860., 367360.,
      418025., 427300., 436625., 446000., 422925., 432300., 441725., 451200.,
      326980., 334480., 342020., 349600., 236635., 242260., 247915., 253600.,
      177092., 181568., 186068., 190592., 227056., 233024., 239024., 245056.,
      272380., 279840., 287340., 294880., 275500., 283040., 290620., 298240.,
      210608., 216640., 222704., 228800., 150548., 155072., 159620., 164192.,
      104253., 107628., 111021., 114432., 131676., 136176., 140700., 145248.,
      155355., 160980., 166635., 172320., 157095., 162780., 168495., 174240.,
      117804., 122352., 126924., 131520., 82401.,  85812.,  89241.,  92688.,
      274317., 278700., 283101., 287520., 357660., 363504., 369372., 375264.,
      436875., 444180., 451515., 458880., 441015., 448380., 455775., 463200.,
      344172., 350064., 355980., 361920., 251601., 256020., 260457., 264912.,
      328628., 334496., 340388., 346304., 426672., 434496., 442352., 450240.,
      518860., 528640., 538460., 548320., 523580., 533440., 543340., 553280.,
      406640., 414528., 422448., 430400., 295748., 301664., 307604., 313568.,
      361975., 369340., 376735., 384160., 467380., 477200., 487060., 496960.,
      565025., 577300., 589625., 602000., 569925., 582300., 594725., 607200.,
      439780., 449680., 459620., 469600., 317635., 325060., 332515., 340000.,
      381055., 388780., 396535., 404320., 491860., 502160., 512500., 522880.,
      594425., 607300., 620225., 633200., 599325., 612300., 625325., 638400.,
      462340., 472720., 483140., 493600., 333835., 341620., 349435., 357280.,
      400135., 408220., 416335., 424480., 516340., 527120., 537940., 548800.,
      623825., 637300., 650825., 664400., 628725., 642300., 655925., 669600.,
      484900., 495760., 506660., 517600., 350035., 358180., 366355., 374560.,
      419215., 427660., 436135., 444640., 540820., 552080., 563380., 574720.,
      653225., 667300., 681425., 695600., 658125., 672300., 686525., 700800.,
      507460., 518800., 530180., 541600., 366235., 374740., 383275., 391840.,
      276164., 282944., 289748., 296576., 353008., 362048., 371120., 380224.,
      422140., 433440., 444780., 456160., 425260., 436640., 448060., 459520.,
      324272., 333376., 342512., 351680., 231188., 238016., 244868., 251744.,
      161277., 166380., 171501., 176640., 203100., 209904., 216732., 223584.,
      238875., 247380., 255915., 264480., 240615., 249180., 257775., 266400.,
      180012., 186864., 193740., 200640., 125601., 130740., 135897., 141072.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      94625.,  97300.,  100025., 102800., 99525.,  102300., 105125., 108000.,
      124025., 127300., 130625., 134000., 128925., 132300., 135725., 139200.,
      153425., 157300., 161225., 165200., 158325., 162300., 166325., 170400.,
      182825., 187300., 191825., 196400., 187725., 192300., 196925., 201600.,
      329825., 337300., 344825., 352400., 334725., 342300., 349925., 357600.,
      359225., 367300., 375425., 383600., 364125., 372300., 380525., 388800.,
      388625., 397300., 406025., 414800., 393525., 402300., 411125., 420000.,
      418025., 427300., 436625., 446000., 422925., 432300., 441725., 451200.,
      565025., 577300., 589625., 602000., 569925., 582300., 594725., 607200.,
      594425., 607300., 620225., 633200., 599325., 612300., 625325., 638400.,
      623825., 637300., 650825., 664400., 628725., 642300., 655925., 669600.,
      653225., 667300., 681425., 695600., 658125., 672300., 686525., 700800.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      43797.,   44058.,   45642.,   45912.,   47523.,   47802.,   49440.,
      49728.,   60612.,   60984.,   63072.,   63456.,   65580.,   65976.,
      68136.,   68544.,   78375.,   78870.,   81450.,   81960.,   84585.,
      85110.,   87780.,   88320.,   86595.,   87150.,   89790.,   90360.,
      93045.,   93630.,   96360.,   96960.,   70404.,   70872.,   72960.,
      73440.,   75564.,   76056.,   78216.,   78720.,   53553.,   53922.,
      55470.,   55848.,   57423.,   57810.,   59412.,   59808.,   76156.,
      76648.,   78664.,   79168.,   81220.,   81736.,   83824.,   84352.,
      103088.,  103776.,  106432.,  107136.,  109840.,  110560.,  113312.,
      114048.,  130580.,  131480.,  134760.,  135680.,  139020.,  139960.,
      143360.,  144320.,  139940.,  140920.,  144280.,  145280.,  148700.,
      149720.,  153200.,  154240.,  112048.,  112864.,  115520.,  116352.,
      119056.,  119904.,  122656.,  123520.,  83980.,   84616.,   86584.,
      87232.,   89236.,   89896.,   91936.,   92608.,   112595.,  113390.,
      115790.,  116600.,  119045.,  119870.,  122360.,  123200.,  150300.,
      151400.,  154560.,  155680.,  158900.,  160040.,  163320.,  164480.,
      187825.,  189250.,  193150.,  194600.,  198575.,  200050.,  204100.,
      205600.,  197525.,  199050.,  203050.,  204600.,  208675.,  210250.,
      214400.,  216000.,  156380.,  157640.,  160800.,  162080.,  165300.,
      166600.,  169880.,  171200.,  115895.,  116870.,  119210.,  120200.,
      122585.,  123590.,  126020.,  127040.,  150395.,  151550.,  154310.,
      155480.,  158285.,  159470.,  162320.,  163520.,  198780.,  200360.,
      204000.,  205600.,  209300.,  210920.,  214680.,  216320.,  246025.,
      248050.,  252550.,  254600.,  259175.,  261250.,  265900.,  268000.,
      255725.,  257850.,  262450.,  264600.,  269275.,  271450.,  276200.,
      278400.,  201020.,  202760.,  206400.,  208160.,  211860.,  213640.,
      217400.,  219200.,  147935.,  149270.,  151970.,  153320.,  156065.,
      157430.,  160220.,  161600.,  188195.,  189710.,  192830.,  194360.,
      197525.,  199070.,  202280.,  203840.,  247260.,  249320.,  253440.,
      255520.,  259700.,  261800.,  266040.,  268160.,  304225.,  306850.,
      311950.,  314600.,  319775.,  322450.,  327700.,  330400.,  313925.,
      316650.,  321850.,  324600.,  329875.,  332650.,  338000.,  340800.,
      245660.,  247880.,  252000.,  254240.,  258420.,  260680.,  264920.,
      267200.,  179975.,  181670.,  184730.,  186440.,  189545.,  191270.,
      194420.,  196160.,  225995.,  227870.,  231350.,  233240.,  236765.,
      238670.,  242240.,  244160.,  295740.,  298280.,  302880.,  305440.,
      310100.,  312680.,  317400.,  320000.,  362425.,  365650.,  371350.,
      374600.,  380375.,  383650.,  389500.,  392800.,  372125.,  375450.,
      381250.,  384600.,  390475.,  393850.,  399800.,  403200.,  290300.,
      293000.,  297600.,  300320.,  304980.,  307720.,  312440.,  315200.,
      212015.,  214070.,  217490.,  219560.,  223025.,  225110.,  228620.,
      230720.,  154396.,  156040.,  158728.,  160384.,  163108.,  164776.,
      167536.,  169216.,  199984.,  202208.,  205760.,  208000.,  211600.,
      213856.,  217504.,  219776.,  242420.,  245240.,  249640.,  252480.,
      256940.,  259800.,  264320.,  267200.,  248580.,  251480.,  255960.,
      258880.,  263420.,  266360.,  270960.,  273920.,  191536.,  193888.,
      197440.,  199808.,  203408.,  205792.,  209440.,  211840.,  138028.,
      139816.,  142456.,  144256.,  146932.,  148744.,  151456.,  153280.,
      93117.,   94458.,   96402.,   97752.,   99723.,   101082.,  103080.,
      104448.,  118692.,  120504.,  123072.,  124896.,  127500.,  129336.,
      131976.,  133824.,  141375.,  143670.,  146850.,  149160.,  152385.,
      154710.,  157980.,  160320.,  144795.,  147150.,  150390.,  152760.,
      156045.,  158430.,  161760.,  164160.,  109284.,  111192.,  113760.,
      115680.,  118284.,  120216.,  122856.,  124800.,  76953.,   78402.,
      80310.,   81768.,   83703.,   85170.,   87132.,   88608.,   294357.,
      296346.,  299658.,  301656.,  304995.,  307002.,  310368.,  312384.,
      385476.,  388152.,  392544.,  395232.,  399660.,  402360.,  406824.,
      409536.,  472935.,  476310.,  481770.,  485160.,  490665.,  494070.,
      499620.,  503040.,  481155.,  484590.,  490110.,  493560.,  499125.,
      502590.,  508200.,  511680.,  376836.,  379608.,  384000.,  386784.,
      391212.,  394008.,  398472.,  401280.,  276465.,  278562.,  281838.,
      283944.,  287247.,  289362.,  292692.,  294816.,  364156.,  366952.,
      371272.,  374080.,  378436.,  381256.,  385648.,  388480.,  474800.,
      478560.,  484288.,  488064.,  493840.,  497632.,  503456.,  507264.,
      579860.,  584600.,  591720.,  596480.,  603660.,  608440.,  615680.,
      620480.,  589220.,  594040.,  601240.,  606080.,  613340.,  618200.,
      625520.,  630400.,  459184.,  463072.,  468800.,  472704.,  478480.,
      482400.,  488224.,  492160.,  335116.,  338056.,  342328.,  345280.,
      349588.,  352552.,  356896.,  359872.,  414995.,  418670.,  423950.,
      427640.,  432965.,  436670.,  442040.,  445760.,  538140.,  543080.,
      550080.,  555040.,  562100.,  567080.,  574200.,  579200.,  653425.,
      659650.,  668350.,  674600.,  683375.,  689650.,  698500.,  704800.,
      663125.,  669450.,  678250.,  684600.,  693475.,  699850.,  708800.,
      715200.,  513500.,  518600.,  525600.,  530720.,  537780.,  542920.,
      550040.,  555200.,  372215.,  376070.,  381290.,  385160.,  390425.,
      394310.,  399620.,  403520.,  452795.,  456830.,  462470.,  466520.,
      472205.,  476270.,  482000.,  486080.,  586620.,  592040.,  599520.,
      604960.,  612500.,  617960.,  625560.,  631040.,  711625.,  718450.,
      727750.,  734600.,  743975.,  750850.,  760300.,  767200.,  721325.,
      728250.,  737650.,  744600.,  754075.,  761050.,  770600.,  777600.,
      558140.,  563720.,  571200.,  576800.,  584340.,  589960.,  597560.,
      603200.,  404255.,  408470.,  414050.,  418280.,  423905.,  428150.,
      433820.,  438080.,  490595.,  494990.,  500990.,  505400.,  511445.,
      515870.,  521960.,  526400.,  635100.,  641000.,  648960.,  654880.,
      662900.,  668840.,  676920.,  682880.,  769825.,  777250.,  787150.,
      794600.,  804575.,  812050.,  822100.,  829600.,  779525.,  787050.,
      797050.,  804600.,  814675.,  822250.,  832400.,  840000.,  602780.,
      608840.,  616800.,  622880.,  630900.,  637000.,  645080.,  651200.,
      436295.,  440870.,  446810.,  451400.,  457385.,  461990.,  468020.,
      472640.,  528395.,  533150.,  539510.,  544280.,  550685.,  555470.,
      561920.,  566720.,  683580.,  689960.,  698400.,  704800.,  713300.,
      719720.,  728280.,  734720.,  828025.,  836050.,  846550.,  854600.,
      865175.,  873250.,  883900.,  892000.,  837725.,  845850.,  856450.,
      864600.,  875275.,  883450.,  894200.,  902400.,  647420.,  653960.,
      662400.,  668960.,  677460.,  684040.,  692600.,  699200.,  468335.,
      473270.,  479570.,  484520.,  490865.,  495830.,  502220.,  507200.,
      350236.,  354184.,  359176.,  363136.,  368164.,  372136.,  377200.,
      381184.,  448816.,  454112.,  460736.,  466048.,  472720.,  478048.,
      484768.,  490112.,  538100.,  544760.,  553000.,  559680.,  567980.,
      574680.,  583040.,  589760.,  544260.,  551000.,  559320.,  566080.,
      574460.,  581240.,  589680.,  596480.,  415792.,  421216.,  427840.,
      433280.,  439952.,  445408.,  452128.,  457600.,  297004.,  301096.,
      306040.,  310144.,  315124.,  319240.,  324256.,  328384.,  205437.,
      208506.,  212178.,  215256.,  218955.,  222042.,  225768.,  228864.,
      259236.,  263352.,  268224.,  272352.,  277260.,  281400.,  286344.,
      290496.,  305535.,  310710.,  316770.,  321960.,  328065.,  333270.,
      339420.,  344640.,  308955.,  314190.,  320310.,  325560.,  331725.,
      336990.,  343200.,  348480.,  231396.,  235608.,  240480.,  244704.,
      249612.,  253848.,  258792.,  263040.,  161625.,  164802.,  168438.,
      171624.,  175287.,  178482.,  182172.,  185376.,  544917.,  548634.,
      553674.,  557400.,  562467.,  566202.,  571296.,  575040.,  710340.,
      715320.,  722016.,  727008.,  733740.,  738744.,  745512.,  750528.,
      867495.,  873750.,  882090.,  888360.,  896745.,  903030.,  911460.,
      917760.,  875715.,  882030.,  890430.,  896760.,  905205.,  911550.,
      920040.,  926400.,  683268.,  688344.,  695040.,  700128.,  706860.,
      711960.,  718728.,  723840.,  499377.,  503202.,  508206.,  512040.,
      517071.,  520914.,  525972.,  529824.,  652156.,  657256.,  663880.,
      668992.,  675652.,  680776.,  687472.,  692608.,  846512.,  853344.,
      862144.,  868992.,  877840.,  884704.,  893600.,  900480.,  1029140.,
      1037720., 1048680., 1057280., 1068300., 1076920., 1088000., 1096640.,
      1038500., 1047160., 1058200., 1066880., 1077980., 1086680., 1097840.,
      1106560., 806320.,  813280.,  822080.,  829056.,  837904.,  844896.,
      853792.,  860800.,  586252.,  591496.,  598072.,  603328.,  609940.,
      615208.,  621856.,  627136.,  717395.,  723950.,  732110.,  738680.,
      746885.,  753470.,  761720.,  768320.,  925980.,  934760.,  945600.,
      954400.,  965300.,  974120.,  985080.,  993920.,  1119025., 1130050.,
      1143550., 1154600., 1168175., 1179250., 1192900., 1204000., 1128725.,
      1139850., 1153450., 1164600., 1178275., 1189450., 1203200., 1214400.,
      870620.,  879560.,  890400.,  899360.,  910260.,  919240.,  930200.,
      939200.,  628535.,  635270.,  643370.,  650120.,  658265.,  665030.,
      673220.,  680000.,  755195.,  762110.,  770630.,  777560.,  786125.,
      793070.,  801680.,  808640.,  974460.,  983720.,  995040.,  1004320.,
      1015700., 1025000., 1036440., 1045760., 1177225., 1188850., 1202950.,
      1214600., 1228775., 1240450., 1254700., 1266400., 1186925., 1198650.,
      1212850., 1224600., 1238875., 1250650., 1265000., 1276800., 915260.,
      924680.,  936000.,  945440.,  956820.,  966280.,  977720.,  987200.,
      660575.,  667670.,  676130.,  683240.,  691745.,  698870.,  707420.,
      714560.,  792995.,  800270.,  809150.,  816440.,  825365.,  832670.,
      841640.,  848960.,  1022940., 1032680., 1044480., 1054240., 1066100.,
      1075880., 1087800., 1097600., 1235425., 1247650., 1262350., 1274600.,
      1289375., 1301650., 1316500., 1328800., 1245125., 1257450., 1272250.,
      1284600., 1299475., 1311850., 1326800., 1339200., 959900.,  969800.,
      981600.,  991520.,  1003380., 1013320., 1025240., 1035200., 692615.,
      700070.,  708890.,  716360.,  725225.,  732710.,  741620.,  749120.,
      830795.,  838430.,  847670.,  855320.,  864605.,  872270.,  881600.,
      889280.,  1071420., 1081640., 1093920., 1104160., 1116500., 1126760.,
      1139160., 1149440., 1293625., 1306450., 1321750., 1334600., 1349975.,
      1362850., 1378300., 1391200., 1303325., 1316250., 1331650., 1344600.,
      1360075., 1373050., 1388600., 1401600., 1004540., 1014920., 1027200.,
      1037600., 1049940., 1060360., 1072760., 1083200., 724655.,  732470.,
      741650.,  749480.,  758705.,  766550.,  775820.,  783680.,  546076.,
      552328.,  559624.,  565888.,  573220.,  579496.,  586864.,  593152.,
      697648.,  706016.,  715712.,  724096.,  733840.,  742240.,  752032.,
      760448.,  833780.,  844280.,  856360.,  866880.,  879020.,  889560.,
      901760.,  912320.,  839940.,  850520.,  862680.,  873280.,  885500.,
      896120.,  908400.,  919040.,  640048.,  648544.,  658240.,  666752.,
      676496.,  685024.,  694816.,  703360.,  455980.,  462376.,  469624.,
      476032.,  483316.,  489736.,  497056.,  503488.,  317757.,  322554.,
      327954.,  332760.,  338187.,  343002.,  348456.,  353280.,  399780.,
      406200.,  413376.,  419808.,  427020.,  433464.,  440712.,  447168.,
      469695.,  477750.,  486690.,  494760.,  503745.,  511830.,  520860.,
      528960.,  473115.,  481230.,  490230.,  498360.,  507405.,  515550.,
      524640.,  532800.,  353508.,  360024.,  367200.,  373728.,  380940.,
      387480.,  394728.,  401280.,  246297.,  251202.,  256566.,  261480.,
      266871.,  271794.,  277212.,  282144.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      187825.,  189250.,  193150.,  194600.,  198575.,  200050.,  204100.,
      205600.,  197525.,  199050.,  203050.,  204600.,  208675.,  210250.,
      214400.,  216000.,  246025.,  248050.,  252550.,  254600.,  259175.,
      261250.,  265900.,  268000.,  255725.,  257850.,  262450.,  264600.,
      269275.,  271450.,  276200.,  278400.,  304225.,  306850.,  311950.,
      314600.,  319775.,  322450.,  327700.,  330400.,  313925.,  316650.,
      321850.,  324600.,  329875.,  332650.,  338000.,  340800.,  362425.,
      365650.,  371350.,  374600.,  380375.,  383650.,  389500.,  392800.,
      372125.,  375450.,  381250.,  384600.,  390475.,  393850.,  399800.,
      403200.,  653425.,  659650.,  668350.,  674600.,  683375.,  689650.,
      698500.,  704800.,  663125.,  669450.,  678250.,  684600.,  693475.,
      699850.,  708800.,  715200.,  711625.,  718450.,  727750.,  734600.,
      743975.,  750850.,  760300.,  767200.,  721325.,  728250.,  737650.,
      744600.,  754075.,  761050.,  770600.,  777600.,  769825.,  777250.,
      787150.,  794600.,  804575.,  812050.,  822100.,  829600.,  779525.,
      787050.,  797050.,  804600.,  814675.,  822250.,  832400.,  840000.,
      828025.,  836050.,  846550.,  854600.,  865175.,  873250.,  883900.,
      892000.,  837725.,  845850.,  856450.,  864600.,  875275.,  883450.,
      894200.,  902400.,  1119025., 1130050., 1143550., 1154600., 1168175.,
      1179250., 1192900., 1204000., 1128725., 1139850., 1153450., 1164600.,
      1178275., 1189450., 1203200., 1214400., 1177225., 1188850., 1202950.,
      1214600., 1228775., 1240450., 1254700., 1266400., 1186925., 1198650.,
      1212850., 1224600., 1238875., 1250650., 1265000., 1276800., 1235425.,
      1247650., 1262350., 1274600., 1289375., 1301650., 1316500., 1328800.,
      1245125., 1257450., 1272250., 1284600., 1299475., 1311850., 1326800.,
      1339200., 1293625., 1306450., 1321750., 1334600., 1349975., 1362850.,
      1378300., 1391200., 1303325., 1316250., 1331650., 1344600., 1360075.,
      1373050., 1388600., 1401600.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      87333.,   87594.,   87855.,   88116.,   91014.,   91284.,   91554.,
      91824.,   94767.,   95046.,   95325.,   95604.,   98592.,   98880.,
      99168.,   99456.,   120852.,  121224.,  121596.,  121968.,  125760.,
      126144.,  126528.,  126912.,  130764.,  131160.,  131556.,  131952.,
      135864.,  136272.,  136680.,  137088.,  156255.,  156750.,  157245.,
      157740.,  162390.,  162900.,  163410.,  163920.,  168645.,  169170.,
      169695.,  170220.,  175020.,  175560.,  176100.,  176640.,  172635.,
      173190.,  173745.,  174300.,  179010.,  179580.,  180150.,  180720.,
      185505.,  186090.,  186675.,  187260.,  192120.,  192720.,  193320.,
      193920.,  140340.,  140808.,  141276.,  141744.,  145440.,  145920.,
      146400.,  146880.,  150636.,  151128.,  151620.,  152112.,  155928.,
      156432.,  156936.,  157440.,  106737.,  107106.,  107475.,  107844.,
      110562.,  110940.,  111318.,  111696.,  114459.,  114846.,  115233.,
      115620.,  118428.,  118824.,  119220.,  119616.,  151820.,  152312.,
      152804.,  153296.,  156824.,  157328.,  157832.,  158336.,  161924.,
      162440.,  162956.,  163472.,  167120.,  167648.,  168176.,  168704.,
      205488.,  206176.,  206864.,  207552.,  212160.,  212864.,  213568.,
      214272.,  218960.,  219680.,  220400.,  221120.,  225888.,  226624.,
      227360.,  228096.,  260260.,  261160.,  262060.,  262960.,  268600.,
      269520.,  270440.,  271360.,  277100.,  278040.,  278980.,  279920.,
      285760.,  286720.,  287680.,  288640.,  278900.,  279880.,  280860.,
      281840.,  287560.,  288560.,  289560.,  290560.,  296380.,  297400.,
      298420.,  299440.,  305360.,  306400.,  307440.,  308480.,  223280.,
      224096.,  224912.,  225728.,  230208.,  231040.,  231872.,  232704.,
      237264.,  238112.,  238960.,  239808.,  244448.,  245312.,  246176.,
      247040.,  167324.,  167960.,  168596.,  169232.,  172520.,  173168.,
      173816.,  174464.,  177812.,  178472.,  179132.,  179792.,  183200.,
      183872.,  184544.,  185216.,  224395.,  225190.,  225985.,  226780.,
      230770.,  231580.,  232390.,  233200.,  237265.,  238090.,  238915.,
      239740.,  243880.,  244720.,  245560.,  246400.,  299500.,  300600.,
      301700.,  302800.,  308000.,  309120.,  310240.,  311360.,  316660.,
      317800.,  318940.,  320080.,  325480.,  326640.,  327800.,  328960.,
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  311500.,  312760.,  314020.,
      315280.,  320320.,  321600.,  322880.,  324160.,  329300.,  330600.,
      331900.,  333200.,  338440.,  339760.,  341080.,  342400.,  230815.,
      231790.,  232765.,  233740.,  237430.,  238420.,  239410.,  240400.,
      244165.,  245170.,  246175.,  247180.,  251020.,  252040.,  253060.,
      254080.,  299635.,  300790.,  301945.,  303100.,  307450.,  308620.,
      309790.,  310960.,  315385.,  316570.,  317755.,  318940.,  323440.,
      324640.,  325840.,  327040.,  395980.,  397560.,  399140.,  400720.,
      406400.,  408000.,  409600.,  411200.,  416980.,  418600.,  420220.,
      421840.,  427720.,  429360.,  431000.,  432640.,  490025.,  492050.,
      494075.,  496100.,  503050.,  505100.,  507150.,  509200.,  516275.,
      518350.,  520425.,  522500.,  529700.,  531800.,  533900.,  536000.,
      509325.,  511450.,  513575.,  515700.,  522750.,  524900.,  527050.,
      529200.,  536375.,  538550.,  540725.,  542900.,  550200.,  552400.,
      554600.,  556800.,  400300.,  402040.,  403780.,  405520.,  411040.,
      412800.,  414560.,  416320.,  421940.,  423720.,  425500.,  427280.,
      433000.,  434800.,  436600.,  438400.,  294535.,  295870.,  297205.,
      298540.,  302590.,  303940.,  305290.,  306640.,  310765.,  312130.,
      313495.,  314860.,  319060.,  320440.,  321820.,  323200.,  374875.,
      376390.,  377905.,  379420.,  384130.,  385660.,  387190.,  388720.,
      393505.,  395050.,  396595.,  398140.,  403000.,  404560.,  406120.,
      407680.,  492460.,  494520.,  496580.,  498640.,  504800.,  506880.,
      508960.,  511040.,  517300.,  519400.,  521500.,  523600.,  529960.,
      532080.,  534200.,  536320.,  605825.,  608450.,  611075.,  613700.,
      621250.,  623900.,  626550.,  629200.,  636875.,  639550.,  642225.,
      644900.,  652700.,  655400.,  658100.,  660800.,  625125.,  627850.,
      630575.,  633300.,  640950.,  643700.,  646450.,  649200.,  656975.,
      659750.,  662525.,  665300.,  673200.,  676000.,  678800.,  681600.,
      489100.,  491320.,  493540.,  495760.,  501760.,  504000.,  506240.,
      508480.,  514580.,  516840.,  519100.,  521360.,  527560.,  529840.,
      532120.,  534400.,  358255.,  359950.,  361645.,  363340.,  367750.,
      369460.,  371170.,  372880.,  377365.,  379090.,  380815.,  382540.,
      387100.,  388840.,  390580.,  392320.,  450115.,  451990.,  453865.,
      455740.,  460810.,  462700.,  464590.,  466480.,  471625.,  473530.,
      475435.,  477340.,  482560.,  484480.,  486400.,  488320.,  588940.,
      591480.,  594020.,  596560.,  603200.,  605760.,  608320.,  610880.,
      617620.,  620200.,  622780.,  625360.,  632200.,  634800.,  637400.,
      640000.,  721625.,  724850.,  728075.,  731300.,  739450.,  742700.,
      745950.,  749200.,  757475.,  760750.,  764025.,  767300.,  775700.,
      779000.,  782300.,  785600.,  740925.,  744250.,  747575.,  750900.,
      759150.,  762500.,  765850.,  769200.,  777575.,  780950.,  784325.,
      787700.,  796200.,  799600.,  803000.,  806400.,  577900.,  580600.,
      583300.,  586000.,  592480.,  595200.,  597920.,  600640.,  607220.,
      609960.,  612700.,  615440.,  622120.,  624880.,  627640.,  630400.,
      421975.,  424030.,  426085.,  428140.,  432910.,  434980.,  437050.,
      439120.,  443965.,  446050.,  448135.,  450220.,  455140.,  457240.,
      459340.,  461440.,  307148.,  308792.,  310436.,  312080.,  315800.,
      317456.,  319112.,  320768.,  324548.,  326216.,  327884.,  329552.,
      333392.,  335072.,  336752.,  338432.,  397744.,  399968.,  402192.,
      404416.,  409280.,  411520.,  413760.,  416000.,  420944.,  423200.,
      425456.,  427712.,  432736.,  435008.,  437280.,  439552.,  482020.,
      484840.,  487660.,  490480.,  496440.,  499280.,  502120.,  504960.,
      511020.,  513880.,  516740.,  519600.,  525760.,  528640.,  531520.,
      534400.,  494260.,  497160.,  500060.,  502960.,  509000.,  511920.,
      514840.,  517760.,  523900.,  526840.,  529780.,  532720.,  538960.,
      541920.,  544880.,  547840.,  380720.,  383072.,  385424.,  387776.,
      392512.,  394880.,  397248.,  399616.,  404432.,  406816.,  409200.,
      411584.,  416480.,  418880.,  421280.,  423680.,  274268.,  276056.,
      277844.,  279632.,  283112.,  284912.,  286712.,  288512.,  292052.,
      293864.,  295676.,  297488.,  301088.,  302912.,  304736.,  306560.,
      184893.,  186234.,  187575.,  188916.,  191454.,  192804.,  194154.,
      195504.,  198087.,  199446.,  200805.,  202164.,  204792.,  206160.,
      207528.,  208896.,  235572.,  237384.,  239196.,  241008.,  244320.,
      246144.,  247968.,  249792.,  253164.,  255000.,  256836.,  258672.,
      262104.,  263952.,  265800.,  267648.,  280455.,  282750.,  285045.,
      287340.,  291390.,  293700.,  296010.,  298320.,  302445.,  304770.,
      307095.,  309420.,  313620.,  315960.,  318300.,  320640.,  287235.,
      289590.,  291945.,  294300.,  298410.,  300780.,  303150.,  305520.,
      309705.,  312090.,  314475.,  316860.,  321120.,  323520.,  325920.,
      328320.,  216660.,  218568.,  220476.,  222384.,  225600.,  227520.,
      229440.,  231360.,  234636.,  236568.,  238500.,  240432.,  243768.,
      245712.,  247656.,  249600.,  152457.,  153906.,  155355.,  156804.,
      159162.,  160620.,  162078.,  163536.,  165939.,  167406.,  168873.,
      170340.,  172788.,  174264.,  175740.,  177216.,  586725.,  588714.,
      590703.,  592692.,  597318.,  599316.,  601314.,  603312.,  607983.,
      609990.,  611997.,  614004.,  618720.,  620736.,  622752.,  624768.,
      768276.,  770952.,  773628.,  776304.,  782400.,  785088.,  787776.,
      790464.,  796620.,  799320.,  802020.,  804720.,  810936.,  813648.,
      816360.,  819072.,  942495.,  945870.,  949245.,  952620.,  960150.,
      963540.,  966930.,  970320.,  977925.,  981330.,  984735.,  988140.,
      995820.,  999240.,  1002660., 1006080., 958875.,  962310.,  965745.,
      969180.,  976770.,  980220.,  983670.,  987120.,  994785.,  998250.,
      1001715., 1005180., 1012920., 1016400., 1019880., 1023360., 750900.,
      753672.,  756444.,  759216.,  765216.,  768000.,  770784.,  773568.,
      779628.,  782424.,  785220.,  788016.,  794136.,  796944.,  799752.,
      802560.,  550833.,  552930.,  555027.,  557124.,  561570.,  563676.,
      565782.,  567888.,  572379.,  574494.,  576609.,  578724.,  583260.,
      585384.,  587508.,  589632.,  725516.,  728312.,  731108.,  733904.,
      739736.,  742544.,  745352.,  748160.,  754052.,  756872.,  759692.,
      762512.,  768464.,  771296.,  774128.,  776960.,  945840.,  949600.,
      953360.,  957120.,  964800.,  968576.,  972352.,  976128.,  983888.,
      987680.,  991472.,  995264.,  1003104., 1006912., 1010720., 1014528.,
      1154980., 1159720., 1164460., 1169200., 1178680., 1183440., 1188200.,
      1192960., 1202540., 1207320., 1212100., 1216880., 1226560., 1231360.,
      1236160., 1240960., 1173620., 1178440., 1183260., 1188080., 1197640.,
      1202480., 1207320., 1212160., 1221820., 1226680., 1231540., 1236400.,
      1246160., 1251040., 1255920., 1260800., 914480.,  918368.,  922256.,
      926144.,  933696.,  937600.,  941504.,  945408.,  953040.,  956960.,
      960880.,  964800.,  972512.,  976448.,  980384.,  984320.,  667292.,
      670232.,  673172.,  676112.,  681704.,  684656.,  687608.,  690560.,
      696212.,  699176.,  702140.,  705104.,  710816.,  713792.,  716768.,
      719744.,  826315.,  829990.,  833665.,  837340.,  844210.,  847900.,
      851590.,  855280.,  862225.,  865930.,  869635.,  873340.,  880360.,
      884080.,  887800.,  891520.,  1071340., 1076280., 1081220., 1086160.,
      1095200., 1100160., 1105120., 1110080., 1119220., 1124200., 1129180.,
      1134160., 1143400., 1148400., 1153400., 1158400., 1300625., 1306850.,
      1313075., 1319300., 1330450., 1336700., 1342950., 1349200., 1360475.,
      1366750., 1373025., 1379300., 1390700., 1397000., 1403300., 1409600.,
      1319925., 1326250., 1332575., 1338900., 1350150., 1356500., 1362850.,
      1369200., 1380575., 1386950., 1393325., 1399700., 1411200., 1417600.,
      1424000., 1430400., 1021900., 1027000., 1032100., 1037200., 1046080.,
      1051200., 1056320., 1061440., 1070420., 1075560., 1080700., 1085840.,
      1094920., 1100080., 1105240., 1110400., 740575.,  744430.,  748285.,
      752140.,  758710.,  762580.,  766450.,  770320.,  776965.,  780850.,
      784735.,  788620.,  795340.,  799240.,  803140.,  807040.,  901555.,
      905590.,  909625.,  913660.,  920890.,  924940.,  928990.,  933040.,
      940345.,  944410.,  948475.,  952540.,  959920.,  964000.,  968080.,
      972160.,  1167820., 1173240., 1178660., 1184080., 1193600., 1199040.,
      1204480., 1209920., 1219540., 1225000., 1230460., 1235920., 1245640.,
      1251120., 1256600., 1262080., 1416425., 1423250., 1430075., 1436900.,
      1448650., 1455500., 1462350., 1469200., 1481075., 1487950., 1494825.,
      1501700., 1513700., 1520600., 1527500., 1534400., 1435725., 1442650.,
      1449575., 1456500., 1468350., 1475300., 1482250., 1489200., 1501175.,
      1508150., 1515125., 1522100., 1534200., 1541200., 1548200., 1555200.,
      1110700., 1116280., 1121860., 1127440., 1136800., 1142400., 1148000.,
      1153600., 1163060., 1168680., 1174300., 1179920., 1189480., 1195120.,
      1200760., 1206400., 804295.,  808510.,  812725.,  816940.,  823870.,
      828100.,  832330.,  836560.,  843565.,  847810.,  852055.,  856300.,
      863380.,  867640.,  871900.,  876160.,  976795.,  981190.,  985585.,
      989980.,  997570.,  1001980., 1006390., 1010800., 1018465., 1022890.,
      1027315., 1031740., 1039480., 1043920., 1048360., 1052800., 1264300.,
      1270200., 1276100., 1282000., 1292000., 1297920., 1303840., 1309760.,
      1319860., 1325800., 1331740., 1337680., 1347880., 1353840., 1359800.,
      1365760., 1532225., 1539650., 1547075., 1554500., 1566850., 1574300.,
      1581750., 1589200., 1601675., 1609150., 1616625., 1624100., 1636700.,
      1644200., 1651700., 1659200., 1551525., 1559050., 1566575., 1574100.,
      1586550., 1594100., 1601650., 1609200., 1621775., 1629350., 1636925.,
      1644500., 1657200., 1664800., 1672400., 1680000., 1199500., 1205560.,
      1211620., 1217680., 1227520., 1233600., 1239680., 1245760., 1255700.,
      1261800., 1267900., 1274000., 1284040., 1290160., 1296280., 1302400.,
      868015.,  872590.,  877165.,  881740.,  889030.,  893620.,  898210.,
      902800.,  910165.,  914770.,  919375.,  923980.,  931420.,  936040.,
      940660.,  945280.,  1052035., 1056790., 1061545., 1066300., 1074250.,
      1079020., 1083790., 1088560., 1096585., 1101370., 1106155., 1110940.,
      1119040., 1123840., 1128640., 1133440., 1360780., 1367160., 1373540.,
      1379920., 1390400., 1396800., 1403200., 1409600., 1420180., 1426600.,
      1433020., 1439440., 1450120., 1456560., 1463000., 1469440., 1648025.,
      1656050., 1664075., 1672100., 1685050., 1693100., 1701150., 1709200.,
      1722275., 1730350., 1738425., 1746500., 1759700., 1767800., 1775900.,
      1784000., 1667325., 1675450., 1683575., 1691700., 1704750., 1712900.,
      1721050., 1729200., 1742375., 1750550., 1758725., 1766900., 1780200.,
      1788400., 1796600., 1804800., 1288300., 1294840., 1301380., 1307920.,
      1318240., 1324800., 1331360., 1337920., 1348340., 1354920., 1361500.,
      1368080., 1378600., 1385200., 1391800., 1398400., 931735.,  936670.,
      941605.,  946540.,  954190.,  959140.,  964090.,  969040.,  976765.,
      981730.,  986695.,  991660.,  999460.,  1004440., 1009420., 1014400.,
      696524.,  700472.,  704420.,  708368.,  714392.,  718352.,  722312.,
      726272.,  732356.,  736328.,  740300.,  744272.,  750416.,  754400.,
      758384.,  762368.,  892336.,  897632.,  902928.,  908224.,  916160.,
      921472.,  926784.,  932096.,  940112.,  945440.,  950768.,  956096.,
      964192.,  969536.,  974880.,  980224.,  1069540., 1076200., 1082860.,
      1089520., 1099320., 1106000., 1112680., 1119360., 1129260., 1135960.,
      1142660., 1149360., 1159360., 1166080., 1172800., 1179520., 1081780.,
      1088520., 1095260., 1102000., 1111880., 1118640., 1125400., 1132160.,
      1142140., 1148920., 1155700., 1162480., 1172560., 1179360., 1186160.,
      1192960., 826160.,  831584.,  837008.,  842432.,  850240.,  855680.,
      861120.,  866560.,  874448.,  879904.,  885360.,  890816.,  898784.,
      904256.,  909728.,  915200.,  589916.,  594008.,  598100.,  602192.,
      607976.,  612080.,  616184.,  620288.,  626132.,  630248.,  634364.,
      638480.,  644384.,  648512.,  652640.,  656768.,  407805.,  410874.,
      413943.,  417012.,  421278.,  424356.,  427434.,  430512.,  434823.,
      437910.,  440997.,  444084.,  448440.,  451536.,  454632.,  457728.,
      514356.,  518472.,  522588.,  526704.,  532320.,  536448.,  540576.,
      544704.,  550380.,  554520.,  558660.,  562800.,  568536.,  572688.,
      576840.,  580992.,  605895.,  611070.,  616245.,  621420.,  628350.,
      633540.,  638730.,  643920.,  650925.,  656130.,  661335.,  666540.,
      673620.,  678840.,  684060.,  689280.,  612675.,  617910.,  623145.,
      628380.,  635370.,  640620.,  645870.,  651120.,  658185.,  663450.,
      668715.,  673980.,  681120.,  686400.,  691680.,  696960.,  458580.,
      462792.,  467004.,  471216.,  476736.,  480960.,  485184.,  489408.,
      494988.,  499224.,  503460.,  507696.,  513336.,  517584.,  521832.,
      526080.,  320073.,  323250.,  326427.,  329604.,  333690.,  336876.,
      340062.,  343248.,  347379.,  350574.,  353769.,  356964.,  361140.,
      364344.,  367548.,  370752.,  1086117., 1089834., 1093551., 1097268.,
      1103622., 1107348., 1111074., 1114800., 1121199., 1124934., 1128669.,
      1132404., 1138848., 1142592., 1146336., 1150080., 1415700., 1420680.,
      1425660., 1430640., 1439040., 1444032., 1449024., 1454016., 1462476.,
      1467480., 1472484., 1477488., 1486008., 1491024., 1496040., 1501056.,
      1728735., 1734990., 1741245., 1747500., 1757910., 1764180., 1770450.,
      1776720., 1787205., 1793490., 1799775., 1806060., 1816620., 1822920.,
      1829220., 1835520., 1745115., 1751430., 1757745., 1764060., 1774530.,
      1780860., 1787190., 1793520., 1804065., 1810410., 1816755., 1823100.,
      1833720., 1840080., 1846440., 1852800., 1361460., 1366536., 1371612.,
      1376688., 1384992., 1390080., 1395168., 1400256., 1408620., 1413720.,
      1418820., 1423920., 1432344., 1437456., 1442568., 1447680., 994929.,
      998754.,  1002579., 1006404., 1012578., 1016412., 1020246., 1024080.,
      1030299., 1034142., 1037985., 1041828., 1048092., 1051944., 1055796.,
      1059648., 1299212., 1304312., 1309412., 1314512., 1322648., 1327760.,
      1332872., 1337984., 1346180., 1351304., 1356428., 1361552., 1369808.,
      1374944., 1380080., 1385216., 1686192., 1693024., 1699856., 1706688.,
      1717440., 1724288., 1731136., 1737984., 1748816., 1755680., 1762544.,
      1769408., 1780320., 1787200., 1794080., 1800960., 2049700., 2058280.,
      2066860., 2075440., 2088760., 2097360., 2105960., 2114560., 2127980.,
      2136600., 2145220., 2153840., 2167360., 2176000., 2184640., 2193280.,
      2068340., 2077000., 2085660., 2094320., 2107720., 2116400., 2125080.,
      2133760., 2147260., 2155960., 2164660., 2173360., 2186960., 2195680.,
      2204400., 2213120., 1605680., 1612640., 1619600., 1626560., 1637184.,
      1644160., 1651136., 1658112., 1668816., 1675808., 1682800., 1689792.,
      1700576., 1707584., 1714592., 1721600., 1167260., 1172504., 1177748.,
      1182992., 1190888., 1196144., 1201400., 1206656., 1214612., 1219880.,
      1225148., 1230416., 1238432., 1243712., 1248992., 1254272., 1428235.,
      1434790., 1441345., 1447900., 1457650., 1464220., 1470790., 1477360.,
      1487185., 1493770., 1500355., 1506940., 1516840., 1523440., 1530040.,
      1536640., 1843180., 1851960., 1860740., 1869520., 1882400., 1891200.,
      1900000., 1908800., 1921780., 1930600., 1939420., 1948240., 1961320.,
      1970160., 1979000., 1987840., 2227025., 2238050., 2249075., 2260100.,
      2276050., 2287100., 2298150., 2309200., 2325275., 2336350., 2347425.,
      2358500., 2374700., 2385800., 2396900., 2408000., 2246325., 2257450.,
      2268575., 2279700., 2295750., 2306900., 2318050., 2329200., 2345375.,
      2356550., 2367725., 2378900., 2395200., 2406400., 2417600., 2428800.,
      1732300., 1741240., 1750180., 1759120., 1771840., 1780800., 1789760.,
      1798720., 1811540., 1820520., 1829500., 1838480., 1851400., 1860400.,
      1869400., 1878400., 1250335., 1257070., 1263805., 1270540., 1279990.,
      1286740., 1293490., 1300240., 1309765., 1316530., 1323295., 1330060.,
      1339660., 1346440., 1353220., 1360000., 1503475., 1510390., 1517305.,
      1524220., 1534330., 1541260., 1548190., 1555120., 1565305., 1572250.,
      1579195., 1586140., 1596400., 1603360., 1610320., 1617280., 1939660.,
      1948920., 1958180., 1967440., 1980800., 1990080., 1999360., 2008640.,
      2022100., 2031400., 2040700., 2050000., 2063560., 2072880., 2082200.,
      2091520., 2342825., 2354450., 2366075., 2377700., 2394250., 2405900.,
      2417550., 2429200., 2445875., 2457550., 2469225., 2480900., 2497700.,
      2509400., 2521100., 2532800., 2362125., 2373850., 2385575., 2397300.,
      2413950., 2425700., 2437450., 2449200., 2465975., 2477750., 2489525.,
      2501300., 2518200., 2530000., 2541800., 2553600., 1821100., 1830520.,
      1839940., 1849360., 1862560., 1872000., 1881440., 1890880., 1904180.,
      1913640., 1923100., 1932560., 1945960., 1955440., 1964920., 1974400.,
      1314055., 1321150., 1328245., 1335340., 1345150., 1352260., 1359370.,
      1366480., 1376365., 1383490., 1390615., 1397740., 1407700., 1414840.,
      1421980., 1429120., 1578715., 1585990., 1593265., 1600540., 1611010.,
      1618300., 1625590., 1632880., 1643425., 1650730., 1658035., 1665340.,
      1675960., 1683280., 1690600., 1697920., 2036140., 2045880., 2055620.,
      2065360., 2079200., 2088960., 2098720., 2108480., 2122420., 2132200.,
      2141980., 2151760., 2165800., 2175600., 2185400., 2195200., 2458625.,
      2470850., 2483075., 2495300., 2512450., 2524700., 2536950., 2549200.,
      2566475., 2578750., 2591025., 2603300., 2620700., 2633000., 2645300.,
      2657600., 2477925., 2490250., 2502575., 2514900., 2532150., 2544500.,
      2556850., 2569200., 2586575., 2598950., 2611325., 2623700., 2641200.,
      2653600., 2666000., 2678400., 1909900., 1919800., 1929700., 1939600.,
      1953280., 1963200., 1973120., 1983040., 1996820., 2006760., 2016700.,
      2026640., 2040520., 2050480., 2060440., 2070400., 1377775., 1385230.,
      1392685., 1400140., 1410310., 1417780., 1425250., 1432720., 1442965.,
      1450450., 1457935., 1465420., 1475740., 1483240., 1490740., 1498240.,
      1653955., 1661590., 1669225., 1676860., 1687690., 1695340., 1702990.,
      1710640., 1721545., 1729210., 1736875., 1744540., 1755520., 1763200.,
      1770880., 1778560., 2132620., 2142840., 2153060., 2163280., 2177600.,
      2187840., 2198080., 2208320., 2222740., 2233000., 2243260., 2253520.,
      2268040., 2278320., 2288600., 2298880., 2574425., 2587250., 2600075.,
      2612900., 2630650., 2643500., 2656350., 2669200., 2687075., 2699950.,
      2712825., 2725700., 2743700., 2756600., 2769500., 2782400., 2593725.,
      2606650., 2619575., 2632500., 2650350., 2663300., 2676250., 2689200.,
      2707175., 2720150., 2733125., 2746100., 2764200., 2777200., 2790200.,
      2803200., 1998700., 2009080., 2019460., 2029840., 2044000., 2054400.,
      2064800., 2075200., 2089460., 2099880., 2110300., 2120720., 2135080.,
      2145520., 2155960., 2166400., 1441495., 1449310., 1457125., 1464940.,
      1475470., 1483300., 1491130., 1498960., 1509565., 1517410., 1525255.,
      1533100., 1543780., 1551640., 1559500., 1567360., 1085900., 1092152.,
      1098404., 1104656., 1112984., 1119248., 1125512., 1131776., 1140164.,
      1146440., 1152716., 1158992., 1167440., 1173728., 1180016., 1186304.,
      1386928., 1395296., 1403664., 1412032., 1423040., 1431424., 1439808.,
      1448192., 1459280., 1467680., 1476080., 1484480., 1495648., 1504064.,
      1512480., 1520896., 1657060., 1667560., 1678060., 1688560., 1702200.,
      1712720., 1723240., 1733760., 1747500., 1758040., 1768580., 1779120.,
      1792960., 1803520., 1814080., 1824640., 1669300., 1679880., 1690460.,
      1701040., 1714760., 1725360., 1735960., 1746560., 1760380., 1771000.,
      1781620., 1792240., 1806160., 1816800., 1827440., 1838080., 1271600.,
      1280096., 1288592., 1297088., 1307968., 1316480., 1324992., 1333504.,
      1344464., 1352992., 1361520., 1370048., 1381088., 1389632., 1398176.,
      1406720., 905564.,  911960.,  918356.,  924752.,  932840.,  939248.,
      945656.,  952064.,  960212.,  966632.,  973052.,  979472.,  987680.,
      994112.,  1000544., 1006976., 630717.,  635514.,  640311.,  645108.,
      651102.,  655908.,  660714.,  665520.,  671559.,  676374.,  681189.,
      686004.,  692088.,  696912.,  701736.,  706560.,  793140.,  799560.,
      805980.,  812400.,  820320.,  826752.,  833184.,  839616.,  847596.,
      854040.,  860484.,  866928.,  874968.,  881424.,  887880.,  894336.,
      931335.,  939390.,  947445.,  955500.,  965310.,  973380.,  981450.,
      989520.,  999405.,  1007490., 1015575., 1023660., 1033620., 1041720.,
      1049820., 1057920., 938115.,  946230.,  954345.,  962460.,  972330.,
      980460.,  988590.,  996720.,  1006665., 1014810., 1022955., 1031100.,
      1041120., 1049280., 1057440., 1065600., 700500.,  707016.,  713532.,
      720048.,  727872.,  734400.,  740928.,  747456.,  755340.,  761880.,
      768420.,  774960.,  782904.,  789456.,  796008.,  802560.,  487689.,
      492594.,  497499.,  502404.,  508218.,  513132.,  518046.,  522960.,
      528819.,  533742.,  538665.,  543588.,  549492.,  554424.,  559356.,
      564288.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x6x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374225.,  375650.,  377075.,  378500.,  384850.,  386300.,  387750.,
      389200.,  395675.,  397150.,  398625.,  400100.,  406700.,  408200.,
      409700.,  411200.,  393525.,  395050.,  396575.,  398100.,  404550.,
      406100.,  407650.,  409200.,  415775.,  417350.,  418925.,  420500.,
      427200.,  428800.,  430400.,  432000.,  490025.,  492050.,  494075.,
      496100.,  503050.,  505100.,  507150.,  509200.,  516275.,  518350.,
      520425.,  522500.,  529700.,  531800.,  533900.,  536000.,  509325.,
      511450.,  513575.,  515700.,  522750.,  524900.,  527050.,  529200.,
      536375.,  538550.,  540725.,  542900.,  550200.,  552400.,  554600.,
      556800.,  605825.,  608450.,  611075.,  613700.,  621250.,  623900.,
      626550.,  629200.,  636875.,  639550.,  642225.,  644900.,  652700.,
      655400.,  658100.,  660800.,  625125.,  627850.,  630575.,  633300.,
      640950.,  643700.,  646450.,  649200.,  656975.,  659750.,  662525.,
      665300.,  673200.,  676000.,  678800.,  681600.,  721625.,  724850.,
      728075.,  731300.,  739450.,  742700.,  745950.,  749200.,  757475.,
      760750.,  764025.,  767300.,  775700.,  779000.,  782300.,  785600.,
      740925.,  744250.,  747575.,  750900.,  759150.,  762500.,  765850.,
      769200.,  777575.,  780950.,  784325.,  787700.,  796200.,  799600.,
      803000.,  806400.,  1300625., 1306850., 1313075., 1319300., 1330450.,
      1336700., 1342950., 1349200., 1360475., 1366750., 1373025., 1379300.,
      1390700., 1397000., 1403300., 1409600., 1319925., 1326250., 1332575.,
      1338900., 1350150., 1356500., 1362850., 1369200., 1380575., 1386950.,
      1393325., 1399700., 1411200., 1417600., 1424000., 1430400., 1416425.,
      1423250., 1430075., 1436900., 1448650., 1455500., 1462350., 1469200.,
      1481075., 1487950., 1494825., 1501700., 1513700., 1520600., 1527500.,
      1534400., 1435725., 1442650., 1449575., 1456500., 1468350., 1475300.,
      1482250., 1489200., 1501175., 1508150., 1515125., 1522100., 1534200.,
      1541200., 1548200., 1555200., 1532225., 1539650., 1547075., 1554500.,
      1566850., 1574300., 1581750., 1589200., 1601675., 1609150., 1616625.,
      1624100., 1636700., 1644200., 1651700., 1659200., 1551525., 1559050.,
      1566575., 1574100., 1586550., 1594100., 1601650., 1609200., 1621775.,
      1629350., 1636925., 1644500., 1657200., 1664800., 1672400., 1680000.,
      1648025., 1656050., 1664075., 1672100., 1685050., 1693100., 1701150.,
      1709200., 1722275., 1730350., 1738425., 1746500., 1759700., 1767800.,
      1775900., 1784000., 1667325., 1675450., 1683575., 1691700., 1704750.,
      1712900., 1721050., 1729200., 1742375., 1750550., 1758725., 1766900.,
      1780200., 1788400., 1796600., 1804800., 2227025., 2238050., 2249075.,
      2260100., 2276050., 2287100., 2298150., 2309200., 2325275., 2336350.,
      2347425., 2358500., 2374700., 2385800., 2396900., 2408000., 2246325.,
      2257450., 2268575., 2279700., 2295750., 2306900., 2318050., 2329200.,
      2345375., 2356550., 2367725., 2378900., 2395200., 2406400., 2417600.,
      2428800., 2342825., 2354450., 2366075., 2377700., 2394250., 2405900.,
      2417550., 2429200., 2445875., 2457550., 2469225., 2480900., 2497700.,
      2509400., 2521100., 2532800., 2362125., 2373850., 2385575., 2397300.,
      2413950., 2425700., 2437450., 2449200., 2465975., 2477750., 2489525.,
      2501300., 2518200., 2530000., 2541800., 2553600., 2458625., 2470850.,
      2483075., 2495300., 2512450., 2524700., 2536950., 2549200., 2566475.,
      2578750., 2591025., 2603300., 2620700., 2633000., 2645300., 2657600.,
      2477925., 2490250., 2502575., 2514900., 2532150., 2544500., 2556850.,
      2569200., 2586575., 2598950., 2611325., 2623700., 2641200., 2653600.,
      2666000., 2678400., 2574425., 2587250., 2600075., 2612900., 2630650.,
      2643500., 2656350., 2669200., 2687075., 2699950., 2712825., 2725700.,
      2743700., 2756600., 2769500., 2782400., 2593725., 2606650., 2619575.,
      2632500., 2650350., 2663300., 2676250., 2689200., 2707175., 2720150.,
      2733125., 2746100., 2764200., 2777200., 2790200., 2803200.};
  const std::array<int, 4> in_shape = {{3, 8, 6, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1755.,  2404.,  3080.,  3350.,  3620.,  2920.,  2205.,  3008.,  4048.,
      5100.,  5410.,  5720.,  4560.,  3404.,  4420.,  5880.,  7325.,  7650.,
      7975.,  6300.,  4660.,  5890.,  7770.,  9600.,  9925.,  10250., 8050.,
      5920.,  7360.,  9660.,  11875., 12200., 12525., 9800.,  7180.,  8830.,
      11550., 14150., 14475., 14800., 11550., 8440.,  6122.,  7936.,  9630.,
      9840.,  10050., 7760.,  5606.,  3780.,  4834.,  5780.,  5900.,  6020.,
      4570.,  3240.,  11331., 14836., 18200., 18470., 18740., 14680., 10773.,
      14096., 18384., 22460., 22770., 23080., 18000., 13148., 16180., 21000.,
      25525., 25850., 26175., 20300., 14740., 17650., 22890., 27800., 28125.,
      28450., 22050., 16000., 19120., 24780., 30075., 30400., 30725., 23800.,
      17260., 20590., 26670., 32350., 32675., 33000., 25550., 18520., 13850.,
      17792., 21390., 21600., 21810., 16720., 11990., 8316.,  10546., 12500.,
      12620., 12740., 9610.,  6768.,  20907., 27268., 33320., 33590., 33860.,
      26440., 19341., 25184., 32720., 39820., 40130., 40440., 31440., 22892.,
      27940., 36120., 43725., 44050., 44375., 34300., 24820., 29410., 38010.,
      46000., 46325., 46650., 36050., 26080., 30880., 39900., 48275., 48600.,
      48925., 37800., 27340., 32350., 41790., 50550., 50875., 51200., 39550.,
      28600., 21578., 27648., 33150., 33360., 33570., 25680., 18374., 12852.,
      16258., 19220., 19340., 19460., 14650., 10296.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7325.,  7650.,  7975.,  9600.,  9925.,  10250., 11875., 12200., 12525.,
      14150., 14475., 14800., 25525., 25850., 26175., 27800., 28125., 28450.,
      30075., 30400., 30725., 32350., 32675., 33000., 43725., 44050., 44375.,
      46000., 46325., 46650., 48275., 48600., 48925., 50550., 50875., 51200.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3429.,  3510.,  4694.,   4808.,  6010.,   6160.,  6535.,   6700.,  7060.,
      7240.,  5690.,  5840.,   4293.,  4410.,   5866.,  6016.,   7888.,  8096.,
      9930.,  10200., 10530.,  10820., 11130.,  11440., 8864.,   9120.,  6610.,
      6808.,  8600.,  8840.,   11430., 11760.,  14225., 14650.,  14850., 15300.,
      15475., 15950., 12210.,  12600., 9020.,   9320.,  11435.,  11780., 15070.,
      15540., 18600., 19200.,  19225., 19850.,  19850., 20500.,  15570., 16100.,
      11435., 11840., 14270.,  14720., 18710.,  19320., 22975.,  23750., 23600.,
      24400., 24225., 25050.,  18930., 19600.,  13850., 14360.,  17105., 17660.,
      22350., 23100., 27350.,  28300., 27975.,  28950., 28600.,  29600., 22290.,
      23100., 16265., 16880.,  11758., 12244.,  15216., 15872.,  18430., 19260.,
      18830., 19680., 19230.,  20100., 14816.,  15520., 10678.,  11212., 7164.,
      7560.,  9134.,  9668.,   10885., 11560.,  11110., 11800.,  11335., 12040.,
      8570.,  9140.,  6048.,   6480.,  22077.,  22662., 28886.,  29672., 35410.,
      36400., 35935., 36940.,  36460., 37480.,  28538., 29360.,  20925., 21546.,
      27370., 28192., 35664.,  36768., 43530.,  44920., 44130.,  45540., 44730.,
      46160., 34848., 36000.,  25426., 26296.,  31280., 32360.,  40550., 42000.,
      49225., 51050., 49850.,  51700., 50475.,  52350., 39090.,  40600., 28340.,
      29480., 34115., 35300.,  44190., 45780.,  53600., 55600.,  54225., 56250.,
      54850., 56900., 42450.,  44100., 30755.,  32000., 36950.,  38240., 47830.,
      49560., 57975., 60150.,  58600., 60800.,  59225., 61450.,  45810., 47600.,
      33170., 34520., 39785.,  41180., 51470.,  53340., 62350.,  64700., 62975.,
      65350., 63600., 66000.,  49170., 51100.,  35585., 37040.,  26542., 27700.,
      34032., 35584., 40830.,  42780., 41230.,  43200., 41630.,  43620., 31840.,
      33440., 22774., 23980.,  15732., 16632.,  19886., 21092.,  23485., 25000.,
      23710., 25240., 23935.,  25480., 17978.,  19220., 12600.,  13536., 40725.,
      41814., 53078., 54536.,  64810., 66640.,  65335., 67180.,  65860., 67720.,
      51386., 52880., 37557.,  38682., 48874.,  50368., 63440.,  65440., 77130.,
      79640., 77730., 80260.,  78330., 80880.,  60832., 62880.,  44242., 45784.,
      53960., 55880., 69670.,  72240., 84225.,  87450., 84850.,  88100., 85475.,
      88750., 65970., 68600.,  47660., 49640.,  56795., 58820.,  73310., 76020.,
      88600., 92000., 89225.,  92650., 89850.,  93300., 69330.,  72100., 50075.,
      52160., 59630., 61760.,  76950., 79800.,  92975., 96550.,  93600., 97200.,
      94225., 97850., 72690.,  75600., 52490.,  54680., 62465.,  64700., 80590.,
      83580., 97350., 101100., 97975., 101750., 98600., 102400., 76050., 79100.,
      54905., 57200., 41326.,  43156., 52848.,  55296., 63230.,  66300., 63630.,
      66720., 64030., 67140.,  48864., 51360.,  34870., 36748.,  24300., 25704.,
      30638., 32516., 36085.,  38440., 36310.,  38680., 36535.,  38920., 27386.,
      29300., 19152., 20592.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14225., 14650., 14850., 15300.,  15475., 15950.,  18600., 19200.,
      19225., 19850., 19850., 20500.,  22975., 23750.,  23600., 24400.,
      24225., 25050., 27350., 28300.,  27975., 28950.,  28600., 29600.,
      49225., 51050., 49850., 51700.,  50475., 52350.,  53600., 55600.,
      54225., 56250., 54850., 56900.,  57975., 60150.,  58600., 60800.,
      59225., 61450., 62350., 64700.,  62975., 65350.,  63600., 66000.,
      84225., 87450., 84850., 88100.,  85475., 88750.,  88600., 92000.,
      89225., 92650., 89850., 93300.,  92975., 96550.,  93600., 97200.,
      94225., 97850., 97350., 101100., 97975., 101750., 98600., 102400.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6777.,   6858.,   6939.,   7020.,   9274.,   9388.,   9502.,   9616.,
      11870.,  12020.,  12170.,  12320.,  12905.,  13070.,  13235.,  13400.,
      13940.,  14120.,  14300.,  14480.,  11230.,  11380.,  11530.,  11680.,
      8469.,   8586.,   8703.,   8820.,   11582.,  11732.,  11882.,  12032.,
      15568.,  15776.,  15984.,  16192.,  19590.,  19860.,  20130.,  20400.,
      20770.,  21060.,  21350.,  21640.,  21950.,  22260.,  22570.,  22880.,
      17472.,  17728.,  17984.,  18240.,  13022.,  13220.,  13418.,  13616.,
      16960.,  17200.,  17440.,  17680.,  22530.,  22860.,  23190.,  23520.,
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  24030.,  24420.,  24810.,  25200.,
      17740.,  18040.,  18340.,  18640.,  22525.,  22870.,  23215.,  23560.,
      29670.,  30140.,  30610.,  31080.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      30610.,  31140.,  31670.,  32200.,  22465.,  22870.,  23275.,  23680.,
      28090.,  28540.,  28990.,  29440.,  36810.,  37420.,  38030.,  38640.,
      45175.,  45950.,  46725.,  47500.,  46400.,  47200.,  48000.,  48800.,
      47625.,  48450.,  49275.,  50100.,  37190.,  37860.,  38530.,  39200.,
      27190.,  27700.,  28210.,  28720.,  33655.,  34210.,  34765.,  35320.,
      43950.,  44700.,  45450.,  46200.,  53750.,  54700.,  55650.,  56600.,
      54975.,  55950.,  56925.,  57900.,  56200.,  57200.,  58200.,  59200.,
      43770.,  44580.,  45390.,  46200.,  31915.,  32530.,  33145.,  33760.,
      23030.,  23516.,  24002.,  24488.,  29776.,  30432.,  31088.,  31744.,
      36030.,  36860.,  37690.,  38520.,  36810.,  37660.,  38510.,  39360.,
      37590.,  38460.,  39330.,  40200.,  28928.,  29632.,  30336.,  31040.,
      20822.,  21356.,  21890.,  22424.,  13932.,  14328.,  14724.,  15120.,
      17734.,  18268.,  18802.,  19336.,  21095.,  21770.,  22445.,  23120.,
      21530.,  22220.,  22910.,  23600.,  21965.,  22670.,  23375.,  24080.,
      16570.,  17140.,  17710.,  18280.,  11664.,  12096.,  12528.,  12960.,
      43569.,  44154.,  44739.,  45324.,  56986.,  57772.,  58558.,  59344.,
      69830.,  70820.,  71810.,  72800.,  70865.,  71870.,  72875.,  73880.,
      71900.,  72920.,  73940.,  74960.,  56254.,  57076.,  57898.,  58720.,
      41229.,  41850.,  42471.,  43092.,  53918.,  54740.,  55562.,  56384.,
      70224.,  71328.,  72432.,  73536.,  85670.,  87060.,  88450.,  89840.,
      86850.,  88260.,  89670.,  91080.,  88030.,  89460.,  90890.,  92320.,
      68544.,  69696.,  70848.,  72000.,  49982.,  50852.,  51722.,  52592.,
      61480.,  62560.,  63640.,  64720.,  79650.,  81100.,  82550.,  84000.,
      96625.,  98450.,  100275., 102100., 97850.,  99700.,  101550., 103400.,
      99075.,  100950., 102825., 104700., 76670.,  78180.,  79690.,  81200.,
      55540.,  56680.,  57820.,  58960.,  67045.,  68230.,  69415.,  70600.,
      86790.,  88380.,  89970.,  91560.,  105200., 107200., 109200., 111200.,
      106425., 108450., 110475., 112500., 107650., 109700., 111750., 113800.,
      83250.,  84900.,  86550.,  88200.,  60265.,  61510.,  62755.,  64000.,
      72610.,  73900.,  75190.,  76480.,  93930.,  95660.,  97390.,  99120.,
      113775., 115950., 118125., 120300., 115000., 117200., 119400., 121600.,
      116225., 118450., 120675., 122900., 89830.,  91620.,  93410.,  95200.,
      64990.,  66340.,  67690.,  69040.,  78175.,  79570.,  80965.,  82360.,
      101070., 102940., 104810., 106680., 122350., 124700., 127050., 129400.,
      123575., 125950., 128325., 130700., 124800., 127200., 129600., 132000.,
      96410.,  98340.,  100270., 102200., 69715.,  71170.,  72625.,  74080.,
      51926.,  53084.,  54242.,  55400.,  66512.,  68064.,  69616.,  71168.,
      79710.,  81660.,  83610.,  85560.,  80490.,  82460.,  84430.,  86400.,
      81270.,  83260.,  85250.,  87240.,  62080.,  63680.,  65280.,  66880.,
      44342.,  45548.,  46754.,  47960.,  30564.,  31464.,  32364.,  33264.,
      38566.,  39772.,  40978.,  42184.,  45455.,  46970.,  48485.,  50000.,
      45890.,  47420.,  48950.,  50480.,  46325.,  47870.,  49415.,  50960.,
      34714.,  35956.,  37198.,  38440.,  24264.,  25200.,  26136.,  27072.,
      80361.,  81450.,  82539.,  83628.,  104698., 106156., 107614., 109072.,
      127790., 129620., 131450., 133280., 128825., 130670., 132515., 134360.,
      129860., 131720., 133580., 135440., 101278., 102772., 104266., 105760.,
      73989.,  75114.,  76239.,  77364.,  96254.,  97748.,  99242.,  100736.,
      124880., 126880., 128880., 130880., 151750., 154260., 156770., 159280.,
      152930., 155460., 157990., 160520., 154110., 156660., 159210., 161760.,
      119616., 121664., 123712., 125760., 86942.,  88484.,  90026.,  91568.,
      106000., 107920., 109840., 111760., 136770., 139340., 141910., 144480.,
      165225., 168450., 171675., 174900., 166450., 169700., 172950., 176200.,
      167675., 170950., 174225., 177500., 129310., 131940., 134570., 137200.,
      93340.,  95320.,  97300.,  99280.,  111565., 113590., 115615., 117640.,
      143910., 146620., 149330., 152040., 173800., 177200., 180600., 184000.,
      175025., 178450., 181875., 185300., 176250., 179700., 183150., 186600.,
      135890., 138660., 141430., 144200., 98065.,  100150., 102235., 104320.,
      117130., 119260., 121390., 123520., 151050., 153900., 156750., 159600.,
      182375., 185950., 189525., 193100., 183600., 187200., 190800., 194400.,
      184825., 188450., 192075., 195700., 142470., 145380., 148290., 151200.,
      102790., 104980., 107170., 109360., 122695., 124930., 127165., 129400.,
      158190., 161180., 164170., 167160., 190950., 194700., 198450., 202200.,
      192175., 195950., 199725., 203500., 193400., 197200., 201000., 204800.,
      149050., 152100., 155150., 158200., 107515., 109810., 112105., 114400.,
      80822.,  82652.,  84482.,  86312.,  103248., 105696., 108144., 110592.,
      123390., 126460., 129530., 132600., 124170., 127260., 130350., 133440.,
      124950., 128060., 131170., 134280., 95232.,  97728.,  100224., 102720.,
      67862.,  69740.,  71618.,  73496.,  47196.,  48600.,  50004.,  51408.,
      59398.,  61276.,  63154.,  65032.,  69815.,  72170.,  74525.,  76880.,
      70250.,  72620.,  74990.,  77360.,  70685.,  73070.,  75455.,  77840.,
      52858.,  54772.,  56686.,  58600.,  36864.,  38304.,  39744.,  41184.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28025.,  28450.,  28875.,  29300.,  29250.,  29700.,  30150.,  30600.,
      30475.,  30950.,  31425.,  31900.,  36600.,  37200.,  37800.,  38400.,
      37825.,  38450.,  39075.,  39700.,  39050.,  39700.,  40350.,  41000.,
      45175.,  45950.,  46725.,  47500.,  46400.,  47200.,  48000.,  48800.,
      47625.,  48450.,  49275.,  50100.,  53750.,  54700.,  55650.,  56600.,
      54975.,  55950.,  56925.,  57900.,  56200.,  57200.,  58200.,  59200.,
      96625.,  98450.,  100275., 102100., 97850.,  99700.,  101550., 103400.,
      99075.,  100950., 102825., 104700., 105200., 107200., 109200., 111200.,
      106425., 108450., 110475., 112500., 107650., 109700., 111750., 113800.,
      113775., 115950., 118125., 120300., 115000., 117200., 119400., 121600.,
      116225., 118450., 120675., 122900., 122350., 124700., 127050., 129400.,
      123575., 125950., 128325., 130700., 124800., 127200., 129600., 132000.,
      165225., 168450., 171675., 174900., 166450., 169700., 172950., 176200.,
      167675., 170950., 174225., 177500., 173800., 177200., 180600., 184000.,
      175025., 178450., 181875., 185300., 176250., 179700., 183150., 186600.,
      182375., 185950., 189525., 193100., 183600., 187200., 190800., 194400.,
      184825., 188450., 192075., 195700., 190950., 194700., 198450., 202200.,
      192175., 195950., 199725., 203500., 193400., 197200., 201000., 204800.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6525.,   7020.,   8956.,   9616.,   11495.,  12320.,  12545.,  13400.,
      13595.,  14480.,  10972.,  11680.,  8289.,   8820.,   11348.,  12032.,
      15280.,  16192.,  19260.,  20400.,  20460.,  21640.,  21660.,  22880.,
      17264.,  18240.,  12884.,  13616.,  16795.,  17680.,  22340.,  23520.,
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  23940.,  25200.,
      17695.,  18640.,  22465.,  23560.,  29620.,  31080.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  30660.,  32200.,  22525.,  23680.,
      28135.,  29440.,  36900.,  38640.,  45325.,  47500.,  46575.,  48800.,
      47825.,  50100.,  37380.,  39200.,  27355.,  28720.,  33805.,  35320.,
      44180.,  46200.,  54075.,  56600.,  55325.,  57900.,  56575.,  59200.,
      44100.,  46200.,  32185.,  33760.,  23252.,  24488.,  30096.,  31744.,
      36460.,  38520.,  37260.,  39360.,  38060.,  40200.,  29328.,  31040.,
      21140.,  22424.,  14175.,  15120.,  18076.,  19336.,  21545.,  23120.,
      21995.,  23600.,  22445.,  24080.,  16972.,  18280.,  11979.,  12960.,
      43821.,  45324.,  57340.,  59344.,  70295.,  72800.,  71345.,  73880.,
      72395.,  74960.,  56668.,  58720.,  41553.,  43092.,  54356.,  56384.,
      70832.,  73536.,  86460.,  89840.,  87660.,  91080.,  88860.,  92320.,
      69232.,  72000.,  50516.,  52592.,  62155.,  64720.,  80580.,  84000.,
      97825.,  102100., 99075.,  103400., 100325., 104700., 77700.,  81200.,
      56335.,  58960.,  67825.,  70600.,  87860.,  91560.,  106575., 111200.,
      107825., 112500., 109075., 113800., 84420.,  88200.,  61165.,  64000.,
      73495.,  76480.,  95140.,  99120.,  115325., 120300., 116575., 121600.,
      117825., 122900., 91140.,  95200.,  65995.,  69040.,  79165.,  82360.,
      102420., 106680., 124075., 129400., 125325., 130700., 126575., 132000.,
      97860.,  102200., 70825.,  74080.,  52820.,  55400.,  67728.,  71168.,
      81260.,  85560.,  82060.,  86400.,  82860.,  87240.,  63376.,  66880.,
      45332.,  47960.,  31311.,  33264.,  39580.,  42184.,  46745.,  50000.,
      47195.,  50480.,  47645.,  50960.,  35788.,  38440.,  25083.,  27072.,
      81117.,  83628.,  105724., 109072., 129095., 133280., 130145., 134360.,
      131195., 135440., 102364., 105760., 74817.,  77364.,  97364.,  100736.,
      126384., 130880., 153660., 159280., 154860., 160520., 156060., 161760.,
      121200., 125760., 88148.,  91568.,  107515., 111760., 138820., 144480.,
      167825., 174900., 169075., 176200., 170325., 177500., 131460., 137200.,
      94975.,  99280.,  113185., 117640., 146100., 152040., 176575., 184000.,
      177825., 185300., 179075., 186600., 138180., 144200., 99805.,  104320.,
      118855., 123520., 153380., 159600., 185325., 193100., 186575., 194400.,
      187825., 195700., 144900., 151200., 104635., 109360., 124525., 129400.,
      160660., 167160., 194075., 202200., 195325., 203500., 196575., 204800.,
      151620., 158200., 109465., 114400., 82388.,  86312.,  105360., 110592.,
      126060., 132600., 126860., 133440., 127660., 134280., 97424.,  102720.,
      69524.,  73496.,  48447.,  51408.,  61084.,  65032.,  71945.,  76880.,
      72395.,  77360.,  72845.,  77840.,  54604.,  58600.,  38187.,  41184.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      27825.,  29300.,  29075.,  30600.,  30325.,  31900.,  36575.,  38400.,
      37825.,  39700.,  39075.,  41000.,  45325.,  47500.,  46575.,  48800.,
      47825.,  50100.,  54075.,  56600.,  55325.,  57900.,  56575.,  59200.,
      97825.,  102100., 99075.,  103400., 100325., 104700., 106575., 111200.,
      107825., 112500., 109075., 113800., 115325., 120300., 116575., 121600.,
      117825., 122900., 124075., 129400., 125325., 130700., 126575., 132000.,
      167825., 174900., 169075., 176200., 170325., 177500., 176575., 184000.,
      177825., 185300., 179075., 186600., 185325., 193100., 186575., 194400.,
      187825., 195700., 194075., 202200., 195325., 203500., 196575., 204800.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      12897.,  13050.,  13878.,  14040.,  17696.,  17912.,  19004.,  19232.,
      22705.,  22990.,  24340.,  24640.,  24775.,  25090.,  26470.,  26800.,
      26845.,  27190.,  28600.,  28960.,  21656.,  21944.,  23060.,  23360.,
      16353.,  16578.,  17406.,  17640.,  22408.,  22696.,  23764.,  24064.,
      30160.,  30560.,  31968.,  32384.,  38000.,  38520.,  40260.,  40800.,
      40360.,  40920.,  42700.,  43280.,  42720.,  43320.,  45140.,  45760.,
      34032.,  34528.,  35968.,  36480.,  25384.,  25768.,  26836.,  27232.,
      33125.,  33590.,  34880.,  35360.,  44040.,  44680.,  46380.,  47040.,
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  47120.,  47880.,  49620.,  50400.,
      34805.,  35390.,  36680.,  37280.,  44255.,  44930.,  46430.,  47120.,
      58320.,  59240.,  61220.,  62160.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      60280.,  61320.,  63340.,  64400.,  44255.,  45050.,  46550.,  47360.,
      55385.,  56270.,  57980.,  58880.,  72600.,  73800.,  76060.,  77280.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 73440.,  74760.,  77060.,  78400.,
      53705.,  54710.,  56420.,  57440.,  66515.,  67610.,  69530.,  70640.,
      86880.,  88360.,  90900.,  92400.,  106275., 108150., 111300., 113200.,
      108725., 110650., 113850., 115800., 111175., 113150., 116400., 118400.,
      86600.,  88200.,  90780.,  92400.,  63155.,  64370.,  66290.,  67520.,
      45544.,  46504.,  48004.,  48976.,  58896.,  60192.,  62176.,  63488.,
      71280.,  72920.,  75380.,  77040.,  72840.,  74520.,  77020.,  78720.,
      74400.,  76120.,  78660.,  80400.,  57264.,  58656.,  60672.,  62080.,
      41224.,  42280.,  43780.,  44848.,  27567.,  28350.,  29448.,  30240.,
      35096.,  36152.,  37604.,  38672.,  41755.,  43090.,  44890.,  46240.,
      42625.,  43990.,  45820.,  47200.,  43495.,  44890.,  46750.,  48160.,
      32816.,  33944.,  35420.,  36560.,  23103.,  23958.,  25056.,  25920.,
      86481.,  87642.,  89478.,  90648.,  113120., 114680., 117116., 118688.,
      138625., 140590., 143620., 145600., 140695., 142690., 145750., 147760.,
      142765., 144790., 147880., 149920., 111704., 113336., 115796., 117440.,
      81873.,  83106.,  84942.,  86184.,  107080., 108712., 111124., 112768.,
      139472., 141664., 144864., 147072., 170160., 172920., 176900., 179680.,
      172520., 175320., 179340., 182160., 174880., 177720., 181780., 184640.,
      136176., 138464., 141696., 144000., 99304.,  101032., 103444., 105184.,
      122165., 124310., 127280., 129440., 158280., 161160., 165100., 168000.,
      192025., 195650., 200550., 204200., 194475., 198150., 203100., 206800.,
      196925., 200650., 205650., 209400., 152400., 155400., 159380., 162400.,
      110405., 112670., 115640., 117920., 133295., 135650., 138830., 141200.,
      172560., 175720., 179940., 183120., 209175., 213150., 218400., 222400.,
      211625., 215650., 220950., 225000., 214075., 218150., 223500., 227600.,
      165560., 168840., 173100., 176400., 119855., 122330., 125510., 128000.,
      144425., 146990., 150380., 152960., 186840., 190280., 194780., 198240.,
      226325., 230650., 236250., 240600., 228775., 233150., 238800., 243200.,
      231225., 235650., 241350., 245800., 178720., 182280., 186820., 190400.,
      129305., 131990., 135380., 138080., 155555., 158330., 161930., 164720.,
      201120., 204840., 209620., 213360., 243475., 248150., 254100., 258800.,
      245925., 250650., 256650., 261400., 248375., 253150., 259200., 264000.,
      191880., 195720., 200540., 204400., 138755., 141650., 145250., 148160.,
      103336., 105640., 108484., 110800., 132368., 135456., 139232., 142336.,
      158640., 162520., 167220., 171120., 160200., 164120., 168860., 172800.,
      161760., 165720., 170500., 174480., 123568., 126752., 130560., 133760.,
      88264.,  90664.,  93508.,  95920.,  60831.,  62622.,  64728.,  66528.,
      76760.,  79160.,  81956.,  84368.,  90475.,  93490.,  96970.,  100000.,
      91345.,  94390.,  97900.,  100960., 92215.,  95290.,  98830.,  101920.,
      69104.,  71576.,  74396.,  76880.,  48303.,  50166.,  52272.,  54144.,
      160065., 162234., 165078., 167256., 208544., 211448., 215228., 218144.,
      254545., 258190., 262900., 266560., 256615., 260290., 265030., 268720.,
      258685., 262390., 267160., 270880., 201752., 204728., 208532., 211520.,
      147393., 149634., 152478., 154728., 191752., 194728., 198484., 201472.,
      248784., 252768., 257760., 261760., 302320., 307320., 313540., 318560.,
      304680., 309720., 315980., 321040., 307040., 312120., 318420., 323520.,
      238320., 242400., 247424., 251520., 173224., 176296., 180052., 183136.,
      211205., 215030., 219680., 223520., 272520., 277640., 283820., 288960.,
      329225., 335650., 343350., 349800., 331675., 338150., 345900., 352400.,
      334125., 340650., 348450., 355000., 257680., 262920., 269140., 274400.,
      186005., 189950., 194600., 198560., 222335., 226370., 231230., 235280.,
      286800., 292200., 298660., 304080., 346375., 353150., 361200., 368000.,
      348825., 355650., 363750., 370600., 351275., 358150., 366300., 373200.,
      270840., 276360., 282860., 288400., 195455., 199610., 204470., 208640.,
      233465., 237710., 242780., 247040., 301080., 306760., 313500., 319200.,
      363525., 370650., 379050., 386200., 365975., 373150., 381600., 388800.,
      368425., 375650., 384150., 391400., 284000., 289800., 296580., 302400.,
      204905., 209270., 214340., 218720., 244595., 249050., 254330., 258800.,
      315360., 321320., 328340., 334320., 380675., 388150., 396900., 404400.,
      383125., 390650., 399450., 407000., 385575., 393150., 402000., 409600.,
      297160., 303240., 310300., 316400., 214355., 218930., 224210., 228800.,
      161128., 164776., 168964., 172624., 205840., 210720., 216288., 221184.,
      246000., 252120., 259060., 265200., 247560., 253720., 260700., 266880.,
      249120., 255320., 262340., 268560., 189872., 194848., 200448., 205440.,
      135304., 139048., 143236., 146992., 94095.,  96894.,  100008., 102816.,
      118424., 122168., 126308., 130064., 139195., 143890., 149050., 153760.,
      140065., 144790., 149980., 154720., 140935., 145690., 150910., 155680.,
      105392., 109208., 113372., 117200., 73503.,  76374.,  79488.,  82368.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      54825.,  55650.,  57750.,  58600.,  57275.,  58150.,  60300.,  61200.,
      59725.,  60650.,  62850.,  63800.,  71975.,  73150.,  75600.,  76800.,
      74425.,  75650.,  78150.,  79400.,  76875.,  78150.,  80700.,  82000.,
      89125.,  90650.,  93450.,  95000.,  91575.,  93150.,  96000.,  97600.,
      94025.,  95650.,  98550.,  100200., 106275., 108150., 111300., 113200.,
      108725., 110650., 113850., 115800., 111175., 113150., 116400., 118400.,
      192025., 195650., 200550., 204200., 194475., 198150., 203100., 206800.,
      196925., 200650., 205650., 209400., 209175., 213150., 218400., 222400.,
      211625., 215650., 220950., 225000., 214075., 218150., 223500., 227600.,
      226325., 230650., 236250., 240600., 228775., 233150., 238800., 243200.,
      231225., 235650., 241350., 245800., 243475., 248150., 254100., 258800.,
      245925., 250650., 256650., 261400., 248375., 253150., 259200., 264000.,
      329225., 335650., 343350., 349800., 331675., 338150., 345900., 352400.,
      334125., 340650., 348450., 355000., 346375., 353150., 361200., 368000.,
      348825., 355650., 363750., 370600., 351275., 358150., 366300., 373200.,
      363525., 370650., 379050., 386200., 365975., 373150., 381600., 388800.,
      368425., 375650., 384150., 391400., 380675., 388150., 396900., 404400.,
      383125., 390650., 399450., 407000., 385575., 393150., 402000., 409600.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25641.,  25794.,  25947.,  26100.,  27594.,  27756.,  27918.,  28080.,
      35176.,  35392.,  35608.,  35824.,  37780.,  38008.,  38236.,  38464.,
      45125.,  45410.,  45695.,  45980.,  48380.,  48680.,  48980.,  49280.,
      49235.,  49550.,  49865.,  50180.,  52610.,  52940.,  53270.,  53600.,
      53345.,  53690.,  54035.,  54380.,  56840.,  57200.,  57560.,  57920.,
      43024.,  43312.,  43600.,  43888.,  45820.,  46120.,  46420.,  46720.,
      32481.,  32706.,  32931.,  33156.,  34578.,  34812.,  35046.,  35280.,
      44528.,  44816.,  45104.,  45392.,  47228.,  47528.,  47828.,  48128.,
      59920.,  60320.,  60720.,  61120.,  63520.,  63936.,  64352.,  64768.,
      75480.,  76000.,  76520.,  77040.,  79980.,  80520.,  81060.,  81600.,
      80160.,  80720.,  81280.,  81840.,  84820.,  85400.,  85980.,  86560.,
      84840.,  85440.,  86040.,  86640.,  89660.,  90280.,  90900.,  91520.,
      67568.,  68064.,  68560.,  69056.,  71424.,  71936.,  72448.,  72960.,
      50384.,  50768.,  51152.,  51536.,  53276.,  53672.,  54068.,  54464.,
      65785.,  66250.,  66715.,  67180.,  69280.,  69760.,  70240.,  70720.,
      87440.,  88080.,  88720.,  89360.,  92100.,  92760.,  93420.,  94080.,
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      93480.,  94240.,  95000.,  95760.,  98460.,  99240.,  100020., 100800.,
      69025.,  69610.,  70195.,  70780.,  72760.,  73360.,  73960.,  74560.,
      87835.,  88510.,  89185.,  89860.,  92170.,  92860.,  93550.,  94240.,
      115720., 116640., 117560., 118480., 121500., 122440., 123380., 124320.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      119520., 120560., 121600., 122640., 125620., 126680., 127740., 128800.,
      87715.,  88510.,  89305.,  90100.,  92290.,  93100.,  93910.,  94720.,
      109885., 110770., 111655., 112540., 115060., 115960., 116860., 117760.,
      144000., 145200., 146400., 147600., 150900., 152120., 153340., 154560.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      145560., 146880., 148200., 149520., 152780., 154120., 155460., 156800.,
      106405., 107410., 108415., 109420., 111820., 112840., 113860., 114880.,
      131935., 133030., 134125., 135220., 137950., 139060., 140170., 141280.,
      172280., 173760., 175240., 176720., 180300., 181800., 183300., 184800.,
      210675., 212550., 214425., 216300., 220700., 222600., 224500., 226400.,
      215525., 217450., 219375., 221300., 225750., 227700., 229650., 231600.,
      220375., 222350., 224325., 226300., 230800., 232800., 234800., 236800.,
      171600., 173200., 174800., 176400., 179940., 181560., 183180., 184800.,
      125095., 126310., 127525., 128740., 131350., 132580., 133810., 135040.,
      90128.,  91088.,  92048.,  93008.,  95036.,  96008.,  96980.,  97952.,
      116496., 117792., 119088., 120384., 123040., 124352., 125664., 126976.,
      140920., 142560., 144200., 145840., 149100., 150760., 152420., 154080.,
      144000., 145680., 147360., 149040., 152340., 154040., 155740., 157440.,
      147080., 148800., 150520., 152240., 155580., 157320., 159060., 160800.,
      113136., 114528., 115920., 117312., 119936., 121344., 122752., 124160.,
      81392.,  82448.,  83504.,  84560.,  86492.,  87560.,  88628.,  89696.,
      54351.,  55134.,  55917.,  56700.,  58104.,  58896.,  59688.,  60480.,
      69136.,  70192.,  71248.,  72304.,  74140.,  75208.,  76276.,  77344.,
      82175.,  83510.,  84845.,  86180.,  88430.,  89780.,  91130.,  92480.,
      83885.,  85250.,  86615.,  87980.,  90260.,  91640.,  93020.,  94400.,
      85595.,  86990.,  88385.,  89780.,  92090.,  93500.,  94910.,  96320.,
      64504.,  65632.,  66760.,  67888.,  69700.,  70840.,  71980.,  73120.,
      45351.,  46206.,  47061.,  47916.,  49248.,  50112.,  50976.,  51840.,
      171801., 172962., 174123., 175284., 177786., 178956., 180126., 181296.,
      224680., 226240., 227800., 229360., 232660., 234232., 235804., 237376.,
      275285., 277250., 279215., 281180., 285260., 287240., 289220., 291200.,
      279395., 281390., 283385., 285380., 289490., 291500., 293510., 295520.,
      283505., 285530., 287555., 289580., 293720., 295760., 297800., 299840.,
      221776., 223408., 225040., 226672., 229948., 231592., 233236., 234880.,
      162513., 163746., 164979., 166212., 168642., 169884., 171126., 172368.,
      212528., 214160., 215792., 217424., 220604., 222248., 223892., 225536.,
      276752., 278944., 281136., 283328., 287520., 289728., 291936., 294144.,
      337560., 340320., 343080., 345840., 351020., 353800., 356580., 359360.,
      342240., 345040., 347840., 350640., 355860., 358680., 361500., 364320.,
      346920., 349760., 352600., 355440., 360700., 363560., 366420., 369280.,
      270064., 272352., 274640., 276928., 281088., 283392., 285696., 288000.,
      196880., 198608., 200336., 202064., 205148., 206888., 208628., 210368.,
      242185., 244330., 246475., 248620., 252400., 254560., 256720., 258880.,
      313680., 316560., 319440., 322320., 327300., 330200., 333100., 336000.,
      380425., 384050., 387675., 391300., 397450., 401100., 404750., 408400.,
      385275., 388950., 392625., 396300., 402500., 406200., 409900., 413600.,
      390125., 393850., 397575., 401300., 407550., 411300., 415050., 418800.,
      301800., 304800., 307800., 310800., 315740., 318760., 321780., 324800.,
      218545., 220810., 223075., 225340., 229000., 231280., 233560., 235840.,
      264235., 266590., 268945., 271300., 275290., 277660., 280030., 282400.,
      341960., 345120., 348280., 351440., 356700., 359880., 363060., 366240.,
      414375., 418350., 422325., 426300., 432800., 436800., 440800., 444800.,
      419225., 423250., 427275., 431300., 437850., 441900., 445950., 450000.,
      424075., 428150., 432225., 436300., 442900., 447000., 451100., 455200.,
      327840., 331120., 334400., 337680., 342900., 346200., 349500., 352800.,
      237235., 239710., 242185., 244660., 248530., 251020., 253510., 256000.,
      286285., 288850., 291415., 293980., 298180., 300760., 303340., 305920.,
      370240., 373680., 377120., 380560., 386100., 389560., 393020., 396480.,
      448325., 452650., 456975., 461300., 468150., 472500., 476850., 481200.,
      453175., 457550., 461925., 466300., 473200., 477600., 482000., 486400.,
      458025., 462450., 466875., 471300., 478250., 482700., 487150., 491600.,
      353880., 357440., 361000., 364560., 370060., 373640., 377220., 380800.,
      255925., 258610., 261295., 263980., 268060., 270760., 273460., 276160.,
      308335., 311110., 313885., 316660., 321070., 323860., 326650., 329440.,
      398520., 402240., 405960., 409680., 415500., 419240., 422980., 426720.,
      482275., 486950., 491625., 496300., 503500., 508200., 512900., 517600.,
      487125., 491850., 496575., 501300., 508550., 513300., 518050., 522800.,
      491975., 496750., 501525., 506300., 513600., 518400., 523200., 528000.,
      379920., 383760., 387600., 391440., 397220., 401080., 404940., 408800.,
      274615., 277510., 280405., 283300., 287590., 290500., 293410., 296320.,
      204368., 206672., 208976., 211280., 214652., 216968., 219284., 221600.,
      261648., 264736., 267824., 270912., 275360., 278464., 281568., 284672.,
      313400., 317280., 321160., 325040., 330540., 334440., 338340., 342240.,
      316480., 320400., 324320., 328240., 333780., 337720., 341660., 345600.,
      319560., 323520., 327480., 331440., 337020., 341000., 344980., 348960.,
      243952., 247136., 250320., 253504., 257920., 261120., 264320., 267520.,
      174128., 176528., 178928., 181328., 184604., 187016., 189428., 191840.,
      119871., 121662., 123453., 125244., 127656., 129456., 131256., 133056.,
      151120., 153520., 155920., 158320., 161500., 163912., 166324., 168736.,
      177935., 180950., 183965., 186980., 190910., 193940., 196970., 200000.,
      179645., 182690., 185735., 188780., 192740., 195800., 198860., 201920.,
      181355., 184430., 187505., 190580., 194570., 197660., 200750., 203840.,
      135736., 138208., 140680., 143152., 146308., 148792., 151276., 153760.,
      94743.,  96606.,  98469.,  100332., 102672., 104544., 106416., 108288.,
      317961., 320130., 322299., 324468., 327978., 330156., 332334., 334512.,
      414184., 417088., 419992., 422896., 427540., 430456., 433372., 436288.,
      505445., 509090., 512735., 516380., 522140., 525800., 529460., 533120.,
      509555., 513230., 516905., 520580., 526370., 530060., 533750., 537440.,
      513665., 517370., 521075., 524780., 530600., 534320., 538040., 541760.,
      400528., 403504., 406480., 409456., 414076., 417064., 420052., 423040.,
      292545., 294786., 297027., 299268., 302706., 304956., 307206., 309456.,
      380528., 383504., 386480., 389456., 393980., 396968., 399956., 402944.,
      493584., 497568., 501552., 505536., 511520., 515520., 519520., 523520.,
      599640., 604640., 609640., 614640., 622060., 627080., 632100., 637120.,
      604320., 609360., 614400., 619440., 626900., 631960., 637020., 642080.,
      609000., 614080., 619160., 624240., 631740., 636840., 641940., 647040.,
      472560., 476640., 480720., 484800., 490752., 494848., 498944., 503040.,
      343376., 346448., 349520., 352592., 357020., 360104., 363188., 366272.,
      418585., 422410., 426235., 430060., 435520., 439360., 443200., 447040.,
      539920., 545040., 550160., 555280., 562500., 567640., 572780., 577920.,
      652025., 658450., 664875., 671300., 680250., 686700., 693150., 699600.,
      656875., 663350., 669825., 676300., 685300., 691800., 698300., 704800.,
      661725., 668250., 674775., 681300., 690350., 696900., 703450., 710000.,
      510120., 515360., 520600., 525840., 533020., 538280., 543540., 548800.,
      368065., 372010., 375955., 379900., 385240., 389200., 393160., 397120.,
      440635., 444670., 448705., 452740., 458410., 462460., 466510., 470560.,
      568200., 573600., 579000., 584400., 591900., 597320., 602740., 608160.,
      685975., 692750., 699525., 706300., 715600., 722400., 729200., 736000.,
      690825., 697650., 704475., 711300., 720650., 727500., 734350., 741200.,
      695675., 702550., 709425., 716300., 725700., 732600., 739500., 746400.,
      536160., 541680., 547200., 552720., 560180., 565720., 571260., 576800.,
      386755., 390910., 395065., 399220., 404770., 408940., 413110., 417280.,
      462685., 466930., 471175., 475420., 481300., 485560., 489820., 494080.,
      596480., 602160., 607840., 613520., 621300., 627000., 632700., 638400.,
      719925., 727050., 734175., 741300., 750950., 758100., 765250., 772400.,
      724775., 731950., 739125., 746300., 756000., 763200., 770400., 777600.,
      729625., 736850., 744075., 751300., 761050., 768300., 775550., 782800.,
      562200., 568000., 573800., 579600., 587340., 593160., 598980., 604800.,
      405445., 409810., 414175., 418540., 424300., 428680., 433060., 437440.,
      484735., 489190., 493645., 498100., 504190., 508660., 513130., 517600.,
      624760., 630720., 636680., 642640., 650700., 656680., 662660., 668640.,
      753875., 761350., 768825., 776300., 786300., 793800., 801300., 808800.,
      758725., 766250., 773775., 781300., 791350., 798900., 806450., 814000.,
      763575., 771150., 778725., 786300., 796400., 804000., 811600., 819200.,
      588240., 594320., 600400., 606480., 614500., 620600., 626700., 632800.,
      424135., 428710., 433285., 437860., 443830., 448420., 453010., 457600.,
      318608., 322256., 325904., 329552., 334268., 337928., 341588., 345248.,
      406800., 411680., 416560., 421440., 427680., 432576., 437472., 442368.,
      485880., 492000., 498120., 504240., 511980., 518120., 524260., 530400.,
      488960., 495120., 501280., 507440., 515220., 521400., 527580., 533760.,
      492040., 498240., 504440., 510640., 518460., 524680., 530900., 537120.,
      374768., 379744., 384720., 389696., 395904., 400896., 405888., 410880.,
      266864., 270608., 274352., 278096., 282716., 286472., 290228., 293984.,
      185391., 188190., 190989., 193788., 197208., 200016., 202824., 205632.,
      233104., 236848., 240592., 244336., 248860., 252616., 256372., 260128.,
      273695., 278390., 283085., 287780., 293390., 298100., 302810., 307520.,
      275405., 280130., 284855., 289580., 295220., 299960., 304700., 309440.,
      277115., 281870., 286625., 291380., 297050., 301820., 306590., 311360.,
      206968., 210784., 214600., 218416., 222916., 226744., 230572., 234400.,
      144135., 147006., 149877., 152748., 156096., 158976., 161856., 164736.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108825., 109650., 110475., 111300., 114650., 115500., 116350., 117200.,
      113675., 114550., 115425., 116300., 119700., 120600., 121500., 122400.,
      118525., 119450., 120375., 121300., 124750., 125700., 126650., 127600.,
      142775., 143950., 145125., 146300., 150000., 151200., 152400., 153600.,
      147625., 148850., 150075., 151300., 155050., 156300., 157550., 158800.,
      152475., 153750., 155025., 156300., 160100., 161400., 162700., 164000.,
      176725., 178250., 179775., 181300., 185350., 186900., 188450., 190000.,
      181575., 183150., 184725., 186300., 190400., 192000., 193600., 195200.,
      186425., 188050., 189675., 191300., 195450., 197100., 198750., 200400.,
      210675., 212550., 214425., 216300., 220700., 222600., 224500., 226400.,
      215525., 217450., 219375., 221300., 225750., 227700., 229650., 231600.,
      220375., 222350., 224325., 226300., 230800., 232800., 234800., 236800.,
      380425., 384050., 387675., 391300., 397450., 401100., 404750., 408400.,
      385275., 388950., 392625., 396300., 402500., 406200., 409900., 413600.,
      390125., 393850., 397575., 401300., 407550., 411300., 415050., 418800.,
      414375., 418350., 422325., 426300., 432800., 436800., 440800., 444800.,
      419225., 423250., 427275., 431300., 437850., 441900., 445950., 450000.,
      424075., 428150., 432225., 436300., 442900., 447000., 451100., 455200.,
      448325., 452650., 456975., 461300., 468150., 472500., 476850., 481200.,
      453175., 457550., 461925., 466300., 473200., 477600., 482000., 486400.,
      458025., 462450., 466875., 471300., 478250., 482700., 487150., 491600.,
      482275., 486950., 491625., 496300., 503500., 508200., 512900., 517600.,
      487125., 491850., 496575., 501300., 508550., 513300., 518050., 522800.,
      491975., 496750., 501525., 506300., 513600., 518400., 523200., 528000.,
      652025., 658450., 664875., 671300., 680250., 686700., 693150., 699600.,
      656875., 663350., 669825., 676300., 685300., 691800., 698300., 704800.,
      661725., 668250., 674775., 681300., 690350., 696900., 703450., 710000.,
      685975., 692750., 699525., 706300., 715600., 722400., 729200., 736000.,
      690825., 697650., 704475., 711300., 720650., 727500., 734350., 741200.,
      695675., 702550., 709425., 716300., 725700., 732600., 739500., 746400.,
      719925., 727050., 734175., 741300., 750950., 758100., 765250., 772400.,
      724775., 731950., 739125., 746300., 756000., 763200., 770400., 777600.,
      729625., 736850., 744075., 751300., 761050., 768300., 775550., 782800.,
      753875., 761350., 768825., 776300., 786300., 793800., 801300., 808800.,
      758725., 766250., 773775., 781300., 791350., 798900., 806450., 814000.,
      763575., 771150., 778725., 786300., 796400., 804000., 811600., 819200.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25137.,  26100.,  27081.,  28080.,  34540.,  35824.,  37132.,  38464.,
      44375.,  45980.,  47615.,  49280.,  48515.,  50180.,  51875.,  53600.,
      52655.,  54380.,  56135.,  57920.,  42508.,  43888.,  45292.,  46720.,
      32121.,  33156.,  34209.,  35280.,  44060.,  45392.,  46748.,  48128.,
      59344.,  61120.,  62928.,  64768.,  74820.,  77040.,  79300.,  81600.,
      79540.,  81840.,  84180.,  86560.,  84260.,  86640.,  89060.,  91520.,
      67152.,  69056.,  70992.,  72960.,  50108.,  51536.,  52988.,  54464.,
      65455.,  67180.,  68935.,  70720.,  87060.,  89360.,  91700.,  94080.,
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 93300.,  95760.,  98260.,  100800.,
      68935.,  70780.,  72655.,  74560.,  87715.,  89860.,  92035.,  94240.,
      115620., 118480., 121380., 124320., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      119620., 122640., 125700., 128800., 87835.,  90100.,  92395.,  94720.,
      109975., 112540., 115135., 117760., 144180., 147600., 151060., 154560.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 145940., 149520., 153140., 156800.,
      106735., 109420., 112135., 114880., 132235., 135220., 138235., 141280.,
      172740., 176720., 180740., 184800., 211325., 216300., 221325., 226400.,
      216225., 221300., 226425., 231600., 221125., 226300., 231525., 236800.,
      172260., 176400., 180580., 184800., 125635., 128740., 131875., 135040.,
      90572.,  93008.,  95468.,  97952.,  117136., 120384., 123664., 126976.,
      141780., 145840., 149940., 154080., 144900., 149040., 153220., 157440.,
      148020., 152240., 156500., 160800., 113936., 117312., 120720., 124160.,
      82028.,  84560.,  87116.,  89696.,  54837.,  56700.,  58581.,  60480.,
      69820.,  72304.,  74812.,  77344.,  83075.,  86180.,  89315.,  92480.,
      84815.,  87980.,  91175.,  94400.,  86555.,  89780.,  93035.,  96320.,
      65308.,  67888.,  70492.,  73120.,  45981.,  47916.,  49869.,  51840.,
      172305., 175284., 178281., 181296., 225388., 229360., 233356., 237376.,
      276215., 281180., 286175., 291200., 280355., 285380., 290435., 295520.,
      284495., 289580., 294695., 299840., 222604., 226672., 230764., 234880.,
      163161., 166212., 169281., 172368., 213404., 217424., 221468., 225536.,
      277968., 283328., 288720., 294144., 339140., 345840., 352580., 359360.,
      343860., 350640., 357460., 364320., 348580., 355440., 362340., 369280.,
      271440., 276928., 282448., 288000., 197948., 202064., 206204., 210368.,
      243535., 248620., 253735., 258880., 315540., 322320., 329140., 336000.,
      382825., 391300., 399825., 408400., 387725., 396300., 404925., 413600.,
      392625., 401300., 410025., 418800., 303860., 310800., 317780., 324800.,
      220135., 225340., 230575., 235840., 265795., 271300., 276835., 282400.,
      344100., 351440., 358820., 366240., 417125., 426300., 435525., 444800.,
      422025., 431300., 440625., 450000., 426925., 436300., 445725., 455200.,
      330180., 337680., 345220., 352800., 239035., 244660., 250315., 256000.,
      288055., 293980., 299935., 305920., 372660., 380560., 388500., 396480.,
      451425., 461300., 471225., 481200., 456325., 466300., 476325., 486400.,
      461225., 471300., 481425., 491600., 356500., 364560., 372660., 380800.,
      257935., 263980., 270055., 276160., 310315., 316660., 323035., 329440.,
      401220., 409680., 418180., 426720., 485725., 496300., 506925., 517600.,
      490625., 501300., 512025., 522800., 495525., 506300., 517125., 528000.,
      382820., 391440., 400100., 408800., 276835., 283300., 289795., 296320.,
      206156., 211280., 216428., 221600., 264080., 270912., 277776., 284672.,
      316500., 325040., 333620., 342240., 319620., 328240., 336900., 345600.,
      322740., 331440., 340180., 348960., 246544., 253504., 260496., 267520.,
      176108., 181328., 186572., 191840., 121365., 125244., 129141., 133056.,
      153148., 158320., 163516., 168736., 180515., 186980., 193475., 200000.,
      182255., 188780., 195335., 201920., 183995., 190580., 197195., 203840.,
      137884., 143152., 148444., 153760., 96381.,  100332., 104301., 108288.,
      319473., 324468., 329481., 334512., 416236., 422896., 429580., 436288.,
      508055., 516380., 524735., 533120., 512195., 520580., 528995., 537440.,
      516335., 524780., 533255., 541760., 402700., 409456., 416236., 423040.,
      294201., 299268., 304353., 309456., 382748., 389456., 396188., 402944.,
      496592., 505536., 514512., 523520., 603460., 614640., 625860., 637120.,
      608180., 619440., 630740., 642080., 612900., 624240., 635620., 647040.,
      475728., 484800., 493904., 503040., 345788., 352592., 359420., 366272.,
      421615., 430060., 438535., 447040., 544020., 555280., 566580., 577920.,
      657225., 671300., 685425., 699600., 662125., 676300., 690525., 704800.,
      667025., 681300., 695625., 710000., 514420., 525840., 537300., 548800.,
      371335., 379900., 388495., 397120., 443875., 452740., 461635., 470560.,
      572580., 584400., 596260., 608160., 691525., 706300., 721125., 736000.,
      696425., 711300., 726225., 741200., 701325., 716300., 731325., 746400.,
      540740., 552720., 564740., 576800., 390235., 399220., 408235., 417280.,
      466135., 475420., 484735., 494080., 601140., 613520., 625940., 638400.,
      725825., 741300., 756825., 772400., 730725., 746300., 761925., 777600.,
      735625., 751300., 767025., 782800., 567060., 579600., 592180., 604800.,
      409135., 418540., 427975., 437440., 488395., 498100., 507835., 517600.,
      629700., 642640., 655620., 668640., 760125., 776300., 792525., 808800.,
      765025., 781300., 797625., 814000., 769925., 786300., 802725., 819200.,
      593380., 606480., 619620., 632800., 428035., 437860., 447715., 457600.,
      321740., 329552., 337388., 345248., 411024., 421440., 431888., 442368.,
      491220., 504240., 517300., 530400., 494340., 507440., 520580., 533760.,
      497460., 510640., 523860., 537120., 379152., 389696., 400272., 410880.,
      270188., 278096., 286028., 293984., 187893., 193788., 199701., 205632.,
      236476., 244336., 252220., 260128., 277955., 287780., 297635., 307520.,
      279695., 289580., 299495., 309440., 281435., 291380., 301355., 311360.,
      210460., 218416., 226396., 234400., 146781., 152748., 158733., 164736.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      108425., 111300., 114225., 117200., 113325., 116300., 119325., 122400.,
      118225., 121300., 124425., 127600., 142725., 146300., 149925., 153600.,
      147625., 151300., 155025., 158800., 152525., 156300., 160125., 164000.,
      177025., 181300., 185625., 190000., 181925., 186300., 190725., 195200.,
      186825., 191300., 195825., 200400., 211325., 216300., 221325., 226400.,
      216225., 221300., 226425., 231600., 221125., 226300., 231525., 236800.,
      382825., 391300., 399825., 408400., 387725., 396300., 404925., 413600.,
      392625., 401300., 410025., 418800., 417125., 426300., 435525., 444800.,
      422025., 431300., 440625., 450000., 426925., 436300., 445725., 455200.,
      451425., 461300., 471225., 481200., 456325., 466300., 476325., 486400.,
      461225., 471300., 481425., 491600., 485725., 496300., 506925., 517600.,
      490625., 501300., 512025., 522800., 495525., 506300., 517125., 528000.,
      657225., 671300., 685425., 699600., 662125., 676300., 690525., 704800.,
      667025., 681300., 695625., 710000., 691525., 706300., 721125., 736000.,
      696425., 711300., 726225., 741200., 701325., 716300., 731325., 746400.,
      725825., 741300., 756825., 772400., 730725., 746300., 761925., 777600.,
      735625., 751300., 767025., 782800., 760125., 776300., 792525., 808800.,
      765025., 781300., 797625., 814000., 769925., 786300., 802725., 819200.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      49977.,   50274.,   51894.,   52200.,   53847.,   54162.,   55836.,
      56160.,   68660.,   69080.,   71216.,   71648.,   73820.,   74264.,
      76472.,   76928.,   88195.,   88750.,   91390.,   91960.,   94645.,
      95230.,   97960.,   98560.,   96415.,   97030.,   99730.,   100360.,
      103105.,  103750.,  106540.,  107200.,  104635.,  105310.,  108070.,
      108760.,  111565.,  112270.,  115120.,  115840.,  84452.,   85016.,
      87200.,   87776.,   89996.,   90584.,   92840.,   93440.,   63801.,
      64242.,   65862.,   66312.,   67959.,   68418.,   70092.,   70560.,
      87556.,   88120.,   90208.,   90784.,   92908.,   93496.,   95656.,
      96256.,   117904.,  118688.,  121440.,  122240.,  125040.,  125856.,
      128704.,  129536.,  148620.,  149640.,  153040.,  154080.,  157540.,
      158600.,  162120.,  163200.,  157980.,  159080.,  162560.,  163680.,
      167220.,  168360.,  171960.,  173120.,  167340.,  168520.,  172080.,
      173280.,  176900.,  178120.,  181800.,  183040.,  133328.,  134304.,
      137120.,  138112.,  140976.,  141984.,  144896.,  145920.,  99460.,
      100216.,  102304.,  103072.,  105196.,  105976.,  108136.,  108928.,
      129995.,  130910.,  133430.,  134360.,  136925.,  137870.,  140480.,
      141440.,  172860.,  174120.,  177440.,  178720.,  182100.,  183400.,
      186840.,  188160.,  215225.,  216850.,  220950.,  222600.,  226775.,
      228450.,  232700.,  234400.,  224925.,  226650.,  230850.,  232600.,
      236875.,  238650.,  243000.,  244800.,  234625.,  236450.,  240750.,
      242600.,  246975.,  248850.,  253300.,  255200.,  185100.,  186600.,
      190000.,  191520.,  194980.,  196520.,  200040.,  201600.,  136715.,
      137870.,  140390.,  141560.,  144125.,  145310.,  147920.,  149120.,
      174095.,  175430.,  178370.,  179720.,  182705.,  184070.,  187100.,
      188480.,  229420.,  231240.,  235120.,  236960.,  240900.,  242760.,
      246760.,  248640.,  283125.,  285450.,  290250.,  292600.,  297475.,
      299850.,  304800.,  307200.,  292825.,  295250.,  300150.,  302600.,
      307575.,  310050.,  315100.,  317600.,  302525.,  305050.,  310050.,
      312600.,  317675.,  320250.,  325400.,  328000.,  237180.,  239240.,
      243200.,  245280.,  249300.,  251400.,  255480.,  257600.,  174095.,
      175670.,  178610.,  180200.,  183185.,  184790.,  187820.,  189440.,
      218195.,  219950.,  223310.,  225080.,  228485.,  230270.,  233720.,
      235520.,  285980.,  288360.,  292800.,  295200.,  299700.,  302120.,
      306680.,  309120.,  351025.,  354050.,  359550.,  362600.,  368175.,
      371250.,  376900.,  380000.,  360725.,  363850.,  369450.,  372600.,
      378275.,  381450.,  387200.,  390400.,  370425.,  373650.,  379350.,
      382600.,  388375.,  391650.,  397500.,  400800.,  289260.,  291880.,
      296400.,  299040.,  303620.,  306280.,  310920.,  313600.,  211475.,
      213470.,  216830.,  218840.,  222245.,  224270.,  227720.,  229760.,
      262295.,  264470.,  268250.,  270440.,  274265.,  276470.,  280340.,
      282560.,  342540.,  345480.,  350480.,  353440.,  358500.,  361480.,
      366600.,  369600.,  418925.,  422650.,  428850.,  432600.,  438875.,
      442650.,  449000.,  452800.,  428625.,  432450.,  438750.,  442600.,
      448975.,  452850.,  459300.,  463200.,  438325.,  442250.,  448650.,
      452600.,  459075.,  463050.,  469600.,  473600.,  341340.,  344520.,
      349600.,  352800.,  357940.,  361160.,  366360.,  369600.,  248855.,
      251270.,  255050.,  257480.,  261305.,  263750.,  267620.,  270080.,
      179236.,  181144.,  184096.,  186016.,  189004.,  190936.,  193960.,
      195904.,  231696.,  234272.,  238176.,  240768.,  244720.,  247328.,
      251328.,  253952.,  280300.,  283560.,  288400.,  291680.,  296580.,
      299880.,  304840.,  308160.,  286460.,  289800.,  294720.,  298080.,
      303060.,  306440.,  311480.,  314880.,  292620.,  296040.,  301040.,
      304480.,  309540.,  313000.,  318120.,  321600.,  225104.,  227872.,
      231840.,  234624.,  238640.,  241440.,  245504.,  248320.,  161956.,
      164056.,  167008.,  169120.,  172108.,  174232.,  177256.,  179392.,
      108117.,  109674.,  111834.,  113400.,  115587.,  117162.,  119376.,
      120960.,  137540.,  139640.,  142496.,  144608.,  147500.,  149624.,
      152552.,  154688.,  163495.,  166150.,  169690.,  172360.,  175945.,
      178630.,  182260.,  184960.,  166915.,  169630.,  173230.,  175960.,
      179605.,  182350.,  186040.,  188800.,  170335.,  173110.,  176770.,
      179560.,  183265.,  186070.,  189820.,  192640.,  128372.,  130616.,
      133520.,  135776.,  138716.,  140984.,  143960.,  146240.,  90261.,
      91962.,   94122.,   95832.,   98019.,   99738.,   101952.,  103680.,
      342297.,  344610.,  348246.,  350568.,  354231.,  356562.,  360252.,
      362592.,  447668.,  450776.,  455600.,  458720.,  463580.,  466712.,
      471608.,  474752.,  548515.,  552430.,  558430.,  562360.,  568405.,
      572350.,  578440.,  582400.,  556735.,  560710.,  566770.,  570760.,
      576865.,  580870.,  587020.,  591040.,  564955.,  568990.,  575110.,
      579160.,  585325.,  589390.,  595600.,  599680.,  441956.,  445208.,
      450080.,  453344.,  458252.,  461528.,  466472.,  469760.,  323865.,
      326322.,  329958.,  332424.,  336087.,  338562.,  342252.,  344736.,
      423556.,  426808.,  431584.,  434848.,  439660.,  442936.,  447784.,
      451072.,  551568.,  555936.,  562272.,  566656.,  573040.,  577440.,
      583872.,  588288.,  672780.,  678280.,  686160.,  691680.,  699620.,
      705160.,  713160.,  718720.,  682140.,  687720.,  695680.,  701280.,
      709300.,  714920.,  723000.,  728640.,  691500.,  697160.,  705200.,
      710880.,  718980.,  724680.,  732840.,  738560.,  538320.,  542880.,
      549280.,  553856.,  560304.,  564896.,  571392.,  576000.,  392452.,
      395896.,  400672.,  404128.,  408940.,  412408.,  417256.,  420736.,
      482795.,  487070.,  492950.,  497240.,  503165.,  507470.,  513440.,
      517760.,  625340.,  631080.,  638880.,  644640.,  652500.,  658280.,
      666200.,  672000.,  758425.,  765650.,  775350.,  782600.,  792375.,
      799650.,  809500.,  816800.,  768125.,  775450.,  785250.,  792600.,
      802475.,  809850.,  819800.,  827200.,  777825.,  785250.,  795150.,
      802600.,  812575.,  820050.,  830100.,  837600.,  601740.,  607720.,
      615600.,  621600.,  629540.,  635560.,  643560.,  649600.,  435755.,
      440270.,  446150.,  450680.,  456605.,  461150.,  467120.,  471680.,
      526895.,  531590.,  537890.,  542600.,  548945.,  553670.,  560060.,
      564800.,  681900.,  688200.,  696560.,  702880.,  711300.,  717640.,
      726120.,  732480.,  826325.,  834250.,  844650.,  852600.,  863075.,
      871050.,  881600.,  889600.,  836025.,  844050.,  854550.,  862600.,
      873175.,  881250.,  891900.,  900000.,  845725.,  853850.,  864450.,
      872600.,  883275.,  891450.,  902200.,  910400.,  653820.,  660360.,
      668800.,  675360.,  683860.,  690440.,  699000.,  705600.,  473135.,
      478070.,  484370.,  489320.,  495665.,  500630.,  507020.,  512000.,
      570995.,  576110.,  582830.,  587960.,  594725.,  599870.,  606680.,
      611840.,  738460.,  745320.,  754240.,  761120.,  770100.,  777000.,
      786040.,  792960.,  894225.,  902850.,  913950.,  922600.,  933775.,
      942450.,  953700.,  962400.,  903925.,  912650.,  923850.,  932600.,
      943875.,  952650.,  964000.,  972800.,  913625.,  922450.,  933750.,
      942600.,  953975.,  962850.,  974300.,  983200.,  705900.,  713000.,
      722000.,  729120.,  738180.,  745320.,  754440.,  761600.,  510515.,
      515870.,  522590.,  527960.,  534725.,  540110.,  546920.,  552320.,
      615095.,  620630.,  627770.,  633320.,  640505.,  646070.,  653300.,
      658880.,  795020.,  802440.,  811920.,  819360.,  828900.,  836360.,
      845960.,  853440.,  962125.,  971450.,  983250.,  992600.,  1004475.,
      1013850., 1025800., 1035200., 971825.,  981250.,  993150.,  1002600.,
      1014575., 1024050., 1036100., 1045600., 981525.,  991050.,  1003050.,
      1012600., 1024675., 1034250., 1046400., 1056000., 757980.,  765640.,
      775200.,  782880.,  792500.,  800200.,  809880.,  817600.,  547895.,
      553670.,  560810.,  566600.,  573785.,  579590.,  586820.,  592640.,
      407716.,  412312.,  417952.,  422560.,  428236.,  432856.,  438568.,
      443200.,  522000.,  528160.,  535648.,  541824.,  549360.,  555552.,
      563136.,  569344.,  625260.,  633000.,  642320.,  650080.,  659460.,
      667240.,  676680.,  684480.,  631420.,  639240.,  648640.,  656480.,
      665940.,  673800.,  683320.,  691200.,  637580.,  645480.,  654960.,
      662880.,  672420.,  680360.,  689960.,  697920.,  486736.,  493088.,
      500640.,  507008.,  514608.,  520992.,  528640.,  535040.,  347428.,
      352216.,  357856.,  362656.,  368332.,  373144.,  378856.,  383680.,
      239157.,  242730.,  246906.,  250488.,  254691.,  258282.,  262512.,
      266112.,  301508.,  306296.,  311840.,  316640.,  322220.,  327032.,
      332648.,  337472.,  355015.,  361030.,  367930.,  373960.,  380905.,
      386950.,  393940.,  400000.,  358435.,  364510.,  371470.,  377560.,
      384565.,  390670.,  397720.,  403840.,  361855.,  367990.,  375010.,
      381160.,  388225.,  394390.,  401500.,  407680.,  270836.,  275768.,
      281360.,  286304.,  291932.,  296888.,  302552.,  307520.,  189045.,
      192762.,  196938.,  200664.,  204867.,  208602.,  212832.,  216576.,
      634617.,  638946.,  644598.,  648936.,  654615.,  658962.,  664668.,
      669024.,  826676.,  832472.,  839984.,  845792.,  853340.,  859160.,
      866744.,  872576.,  1008835., 1016110., 1025470., 1032760., 1042165.,
      1049470., 1058920., 1066240., 1017055., 1024390., 1033810., 1041160.,
      1050625., 1057990., 1067500., 1074880., 1025275., 1032670., 1042150.,
      1049560., 1059085., 1066510., 1076080., 1083520., 799460.,  805400.,
      812960.,  818912.,  826508.,  832472.,  840104.,  846080.,  583929.,
      588402.,  594054.,  598536.,  604215.,  608706.,  614412.,  618912.,
      759556.,  765496.,  772960.,  778912.,  786412.,  792376.,  799912.,
      805888.,  985232.,  993184.,  1003104., 1011072., 1021040., 1029024.,
      1039040., 1047040., 1196940., 1206920., 1219280., 1229280., 1241700.,
      1251720., 1264200., 1274240., 1206300., 1216360., 1228800., 1238880.,
      1251380., 1261480., 1274040., 1284160., 1215660., 1225800., 1238320.,
      1248480., 1261060., 1271240., 1283880., 1294080., 943312.,  951456.,
      961440.,  969600.,  979632.,  987808.,  997888.,  1006080., 685444.,
      691576.,  699040.,  705184.,  712684.,  718840.,  726376.,  732544.,
      835595.,  843230.,  852470.,  860120.,  869405.,  877070.,  886400.,
      894080.,  1077820., 1088040., 1100320., 1110560., 1122900., 1133160.,
      1145560., 1155840., 1301625., 1314450., 1329750., 1342600., 1357975.,
      1370850., 1386300., 1399200., 1311325., 1324250., 1339650., 1352600.,
      1368075., 1381050., 1396600., 1409600., 1321025., 1334050., 1349550.,
      1362600., 1378175., 1391250., 1406900., 1420000., 1018380., 1028840.,
      1041200., 1051680., 1064100., 1074600., 1087080., 1097600., 734795.,
      742670.,  751910.,  759800.,  769085.,  776990.,  786320.,  794240.,
      879695.,  887750.,  897410.,  905480.,  915185.,  923270.,  933020.,
      941120.,  1134380., 1145160., 1158000., 1168800., 1181700., 1192520.,
      1205480., 1216320., 1369525., 1383050., 1399050., 1412600., 1428675.,
      1442250., 1458400., 1472000., 1379225., 1392850., 1408950., 1422600.,
      1438775., 1452450., 1468700., 1482400., 1388925., 1402650., 1418850.,
      1432600., 1448875., 1462650., 1479000., 1492800., 1070460., 1081480.,
      1094400., 1105440., 1118420., 1129480., 1142520., 1153600., 772175.,
      780470.,  790130.,  798440.,  808145.,  816470.,  826220.,  834560.,
      923795.,  932270.,  942350.,  950840.,  960965.,  969470.,  979640.,
      988160.,  1190940., 1202280., 1215680., 1227040., 1240500., 1251880.,
      1265400., 1276800., 1437425., 1451650., 1468350., 1482600., 1499375.,
      1513650., 1530500., 1544800., 1447125., 1461450., 1478250., 1492600.,
      1509475., 1523850., 1540800., 1555200., 1456825., 1471250., 1488150.,
      1502600., 1519575., 1534050., 1551100., 1565600., 1122540., 1134120.,
      1147600., 1159200., 1172740., 1184360., 1197960., 1209600., 809555.,
      818270.,  828350.,  837080.,  847205.,  855950.,  866120.,  874880.,
      967895.,  976790.,  987290.,  996200.,  1006745., 1015670., 1026260.,
      1035200., 1247500., 1259400., 1273360., 1285280., 1299300., 1311240.,
      1325320., 1337280., 1505325., 1520250., 1537650., 1552600., 1570075.,
      1585050., 1602600., 1617600., 1515025., 1530050., 1547550., 1562600.,
      1580175., 1595250., 1612900., 1628000., 1524725., 1539850., 1557450.,
      1572600., 1590275., 1605450., 1623200., 1638400., 1174620., 1186760.,
      1200800., 1212960., 1227060., 1239240., 1253400., 1265600., 846935.,
      856070.,  866570.,  875720.,  886265.,  895430.,  906020.,  915200.,
      636196.,  643480.,  651808.,  659104.,  667468.,  674776.,  683176.,
      690496.,  812304.,  822048.,  833120.,  842880.,  854000.,  863776.,
      874944.,  884736.,  970220.,  982440.,  996240.,  1008480., 1022340.,
      1034600., 1048520., 1060800., 976380.,  988680.,  1002560., 1014880.,
      1028820., 1041160., 1055160., 1067520., 982540.,  994920.,  1008880.,
      1021280., 1035300., 1047720., 1061800., 1074240., 748368.,  758304.,
      769440.,  779392.,  790576.,  800544.,  811776.,  821760.,  532900.,
      540376.,  548704.,  556192.,  564556.,  572056.,  580456.,  587968.,
      370197.,  375786.,  381978.,  387576.,  393795.,  399402.,  405648.,
      411264.,  465476.,  472952.,  481184.,  488672.,  496940.,  504440.,
      512744.,  520256.,  546535.,  555910.,  566170.,  575560.,  585865.,
      595270.,  605620.,  615040.,  549955.,  559390.,  569710.,  579160.,
      589525.,  598990.,  609400.,  618880.,  553375.,  562870.,  573250.,
      582760.,  593185.,  602710.,  613180.,  622720.,  413300.,  420920.,
      429200.,  436832.,  445148.,  452792.,  461144.,  468800.,  287829.,
      293562.,  299754.,  305496.,  311715.,  317466.,  323712.,  329472.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      215225.,  216850.,  220950.,  222600.,  226775.,  228450.,  232700.,
      234400.,  224925.,  226650.,  230850.,  232600.,  236875.,  238650.,
      243000.,  244800.,  234625.,  236450.,  240750.,  242600.,  246975.,
      248850.,  253300.,  255200.,  283125.,  285450.,  290250.,  292600.,
      297475.,  299850.,  304800.,  307200.,  292825.,  295250.,  300150.,
      302600.,  307575.,  310050.,  315100.,  317600.,  302525.,  305050.,
      310050.,  312600.,  317675.,  320250.,  325400.,  328000.,  351025.,
      354050.,  359550.,  362600.,  368175.,  371250.,  376900.,  380000.,
      360725.,  363850.,  369450.,  372600.,  378275.,  381450.,  387200.,
      390400.,  370425.,  373650.,  379350.,  382600.,  388375.,  391650.,
      397500.,  400800.,  418925.,  422650.,  428850.,  432600.,  438875.,
      442650.,  449000.,  452800.,  428625.,  432450.,  438750.,  442600.,
      448975.,  452850.,  459300.,  463200.,  438325.,  442250.,  448650.,
      452600.,  459075.,  463050.,  469600.,  473600.,  758425.,  765650.,
      775350.,  782600.,  792375.,  799650.,  809500.,  816800.,  768125.,
      775450.,  785250.,  792600.,  802475.,  809850.,  819800.,  827200.,
      777825.,  785250.,  795150.,  802600.,  812575.,  820050.,  830100.,
      837600.,  826325.,  834250.,  844650.,  852600.,  863075.,  871050.,
      881600.,  889600.,  836025.,  844050.,  854550.,  862600.,  873175.,
      881250.,  891900.,  900000.,  845725.,  853850.,  864450.,  872600.,
      883275.,  891450.,  902200.,  910400.,  894225.,  902850.,  913950.,
      922600.,  933775.,  942450.,  953700.,  962400.,  903925.,  912650.,
      923850.,  932600.,  943875.,  952650.,  964000.,  972800.,  913625.,
      922450.,  933750.,  942600.,  953975.,  962850.,  974300.,  983200.,
      962125.,  971450.,  983250.,  992600.,  1004475., 1013850., 1025800.,
      1035200., 971825.,  981250.,  993150.,  1002600., 1014575., 1024050.,
      1036100., 1045600., 981525.,  991050.,  1003050., 1012600., 1024675.,
      1034250., 1046400., 1056000., 1301625., 1314450., 1329750., 1342600.,
      1357975., 1370850., 1386300., 1399200., 1311325., 1324250., 1339650.,
      1352600., 1368075., 1381050., 1396600., 1409600., 1321025., 1334050.,
      1349550., 1362600., 1378175., 1391250., 1406900., 1420000., 1369525.,
      1383050., 1399050., 1412600., 1428675., 1442250., 1458400., 1472000.,
      1379225., 1392850., 1408950., 1422600., 1438775., 1452450., 1468700.,
      1482400., 1388925., 1402650., 1418850., 1432600., 1448875., 1462650.,
      1479000., 1492800., 1437425., 1451650., 1468350., 1482600., 1499375.,
      1513650., 1530500., 1544800., 1447125., 1461450., 1478250., 1492600.,
      1509475., 1523850., 1540800., 1555200., 1456825., 1471250., 1488150.,
      1502600., 1519575., 1534050., 1551100., 1565600., 1505325., 1520250.,
      1537650., 1552600., 1570075., 1585050., 1602600., 1617600., 1515025.,
      1530050., 1547550., 1562600., 1580175., 1595250., 1612900., 1628000.,
      1524725., 1539850., 1557450., 1572600., 1590275., 1605450., 1623200.,
      1638400.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      99657.,   99954.,   100251.,  100548.,  103482.,  103788.,  104094.,
      104400.,  107379.,  107694.,  108009.,  108324.,  111348.,  111672.,
      111996.,  112320.,  136900.,  137320.,  137740.,  138160.,  142000.,
      142432.,  142864.,  143296.,  147196.,  147640.,  148084.,  148528.,
      152488.,  152944.,  153400.,  153856.,  175835.,  176390.,  176945.,
      177500.,  182210.,  182780.,  183350.,  183920.,  188705.,  189290.,
      189875.,  190460.,  195320.,  195920.,  196520.,  197120.,  192215.,
      192830.,  193445.,  194060.,  198830.,  199460.,  200090.,  200720.,
      205565.,  206210.,  206855.,  207500.,  212420.,  213080.,  213740.,
      214400.,  208595.,  209270.,  209945.,  210620.,  215450.,  216140.,
      216830.,  217520.,  222425.,  223130.,  223835.,  224540.,  229520.,
      230240.,  230960.,  231680.,  168340.,  168904.,  169468.,  170032.,
      173824.,  174400.,  174976.,  175552.,  179404.,  179992.,  180580.,
      181168.,  185080.,  185680.,  186280.,  186880.,  127161.,  127602.,
      128043.,  128484.,  131274.,  131724.,  132174.,  132624.,  135459.,
      135918.,  136377.,  136836.,  139716.,  140184.,  140652.,  141120.,
      174548.,  175112.,  175676.,  176240.,  179840.,  180416.,  180992.,
      181568.,  185228.,  185816.,  186404.,  186992.,  190712.,  191312.,
      191912.,  192512.,  235024.,  235808.,  236592.,  237376.,  242080.,
      242880.,  243680.,  244480.,  249264.,  250080.,  250896.,  251712.,
      256576.,  257408.,  258240.,  259072.,  296220.,  297240.,  298260.,
      299280.,  305040.,  306080.,  307120.,  308160.,  314020.,  315080.,
      316140.,  317200.,  323160.,  324240.,  325320.,  326400.,  314860.,
      315960.,  317060.,  318160.,  324000.,  325120.,  326240.,  327360.,
      333300.,  334440.,  335580.,  336720.,  342760.,  343920.,  345080.,
      346240.,  333500.,  334680.,  335860.,  337040.,  342960.,  344160.,
      345360.,  346560.,  352580.,  353800.,  355020.,  356240.,  362360.,
      363600.,  364840.,  366080.,  265680.,  266656.,  267632.,  268608.,
      273248.,  274240.,  275232.,  276224.,  280944.,  281952.,  282960.,
      283968.,  288768.,  289792.,  290816.,  291840.,  198164.,  198920.,
      199676.,  200432.,  203840.,  204608.,  205376.,  206144.,  209612.,
      210392.,  211172.,  211952.,  215480.,  216272.,  217064.,  217856.,
      259075.,  259990.,  260905.,  261820.,  265930.,  266860.,  267790.,
      268720.,  272905.,  273850.,  274795.,  275740.,  280000.,  280960.,
      281920.,  282880.,  344460.,  345720.,  346980.,  348240.,  353600.,
      354880.,  356160.,  357440.,  362900.,  364200.,  365500.,  366800.,
      372360.,  373680.,  375000.,  376320.,  428825.,  430450.,  432075.,
      433700.,  440250.,  441900.,  443550.,  445200.,  451875.,  453550.,
      455225.,  456900.,  463700.,  465400.,  467100.,  468800.,  448125.,
      449850.,  451575.,  453300.,  459950.,  461700.,  463450.,  465200.,
      471975.,  473750.,  475525.,  477300.,  484200.,  486000.,  487800.,
      489600.,  467425.,  469250.,  471075.,  472900.,  479650.,  481500.,
      483350.,  485200.,  492075.,  493950.,  495825.,  497700.,  504700.,
      506600.,  508500.,  510400.,  368700.,  370200.,  371700.,  373200.,
      378480.,  380000.,  381520.,  383040.,  388420.,  389960.,  391500.,
      393040.,  398520.,  400080.,  401640.,  403200.,  272275.,  273430.,
      274585.,  275740.,  279610.,  280780.,  281950.,  283120.,  287065.,
      288250.,  289435.,  290620.,  294640.,  295840.,  297040.,  298240.,
      346855.,  348190.,  349525.,  350860.,  355390.,  356740.,  358090.,
      359440.,  364045.,  365410.,  366775.,  368140.,  372820.,  374200.,
      375580.,  376960.,  457020.,  458840.,  460660.,  462480.,  468400.,
      470240.,  472080.,  473920.,  479940.,  481800.,  483660.,  485520.,
      491640.,  493520.,  495400.,  497280.,  563925.,  566250.,  568575.,
      570900.,  578150.,  580500.,  582850.,  585200.,  592575.,  594950.,
      597325.,  599700.,  607200.,  609600.,  612000.,  614400.,  583225.,
      585650.,  588075.,  590500.,  597850.,  600300.,  602750.,  605200.,
      612675.,  615150.,  617625.,  620100.,  627700.,  630200.,  632700.,
      635200.,  602525.,  605050.,  607575.,  610100.,  617550.,  620100.,
      622650.,  625200.,  632775.,  635350.,  637925.,  640500.,  648200.,
      650800.,  653400.,  656000.,  472300.,  474360.,  476420.,  478480.,
      484320.,  486400.,  488480.,  490560.,  496500.,  498600.,  500700.,
      502800.,  508840.,  510960.,  513080.,  515200.,  346615.,  348190.,
      349765.,  351340.,  355630.,  357220.,  358810.,  360400.,  364765.,
      366370.,  367975.,  369580.,  374020.,  375640.,  377260.,  378880.,
      434635.,  436390.,  438145.,  439900.,  444850.,  446620.,  448390.,
      450160.,  455185.,  456970.,  458755.,  460540.,  465640.,  467440.,
      469240.,  471040.,  569580.,  571960.,  574340.,  576720.,  583200.,
      585600.,  588000.,  590400.,  596980.,  599400.,  601820.,  604240.,
      610920.,  613360.,  615800.,  618240.,  699025.,  702050.,  705075.,
      708100.,  716050.,  719100.,  722150.,  725200.,  733275.,  736350.,
      739425.,  742500.,  750700.,  753800.,  756900.,  760000.,  718325.,
      721450.,  724575.,  727700.,  735750.,  738900.,  742050.,  745200.,
      753375.,  756550.,  759725.,  762900.,  771200.,  774400.,  777600.,
      780800.,  737625.,  740850.,  744075.,  747300.,  755450.,  758700.,
      761950.,  765200.,  773475.,  776750.,  780025.,  783300.,  791700.,
      795000.,  798300.,  801600.,  575900.,  578520.,  581140.,  583760.,
      590160.,  592800.,  595440.,  598080.,  604580.,  607240.,  609900.,
      612560.,  619160.,  621840.,  624520.,  627200.,  420955.,  422950.,
      424945.,  426940.,  431650.,  433660.,  435670.,  437680.,  442465.,
      444490.,  446515.,  448540.,  453400.,  455440.,  457480.,  459520.,
      522415.,  524590.,  526765.,  528940.,  534310.,  536500.,  538690.,
      540880.,  546325.,  548530.,  550735.,  552940.,  558460.,  560680.,
      562900.,  565120.,  682140.,  685080.,  688020.,  690960.,  698000.,
      700960.,  703920.,  706880.,  714020.,  717000.,  719980.,  722960.,
      730200.,  733200.,  736200.,  739200.,  834125.,  837850.,  841575.,
      845300.,  853950.,  857700.,  861450.,  865200.,  873975.,  877750.,
      881525.,  885300.,  894200.,  898000.,  901800.,  905600.,  853425.,
      857250.,  861075.,  864900.,  873650.,  877500.,  881350.,  885200.,
      894075.,  897950.,  901825.,  905700.,  914700.,  918600.,  922500.,
      926400.,  872725.,  876650.,  880575.,  884500.,  893350.,  897300.,
      901250.,  905200.,  914175.,  918150.,  922125.,  926100.,  935200.,
      939200.,  943200.,  947200.,  679500.,  682680.,  685860.,  689040.,
      696000.,  699200.,  702400.,  705600.,  712660.,  715880.,  719100.,
      722320.,  729480.,  732720.,  735960.,  739200.,  495295.,  497710.,
      500125.,  502540.,  507670.,  510100.,  512530.,  514960.,  520165.,
      522610.,  525055.,  527500.,  532780.,  535240.,  537700.,  540160.,
      356564.,  358472.,  360380.,  362288.,  366272.,  368192.,  370112.,
      372032.,  376076.,  378008.,  379940.,  381872.,  385976.,  387920.,
      389864.,  391808.,  460816.,  463392.,  465968.,  468544.,  473760.,
      476352.,  478944.,  481536.,  486832.,  489440.,  492048.,  494656.,
      500032.,  502656.,  505280.,  507904.,  557340.,  560600.,  563860.,
      567120.,  573520.,  576800.,  580080.,  583360.,  589860.,  593160.,
      596460.,  599760.,  606360.,  609680.,  613000.,  616320.,  569580.,
      572920.,  576260.,  579600.,  586080.,  589440.,  592800.,  596160.,
      602740.,  606120.,  609500.,  612880.,  619560.,  622960.,  626360.,
      629760.,  581820.,  585240.,  588660.,  592080.,  598640.,  602080.,
      605520.,  608960.,  615620.,  619080.,  622540.,  626000.,  632760.,
      636240.,  639720.,  643200.,  447440.,  450208.,  452976.,  455744.,
      460896.,  463680.,  466464.,  469248.,  474480.,  477280.,  480080.,
      482880.,  488192.,  491008.,  493824.,  496640.,  321812.,  323912.,
      326012.,  328112.,  331904.,  334016.,  336128.,  338240.,  342092.,
      344216.,  346340.,  348464.,  352376.,  354512.,  356648.,  358784.,
      214677.,  216234.,  217791.,  219348.,  222102.,  223668.,  225234.,
      226800.,  229599.,  231174.,  232749.,  234324.,  237168.,  238752.,
      240336.,  241920.,  272980.,  275080.,  277180.,  279280.,  282880.,
      284992.,  287104.,  289216.,  292876.,  295000.,  297124.,  299248.,
      302968.,  305104.,  307240.,  309376.,  324335.,  326990.,  329645.,
      332300.,  336710.,  339380.,  342050.,  344720.,  349205.,  351890.,
      354575.,  357260.,  361820.,  364520.,  367220.,  369920.,  331115.,
      333830.,  336545.,  339260.,  343730.,  346460.,  349190.,  351920.,
      356465.,  359210.,  361955.,  364700.,  369320.,  372080.,  374840.,
      377600.,  337895.,  340670.,  343445.,  346220.,  350750.,  353540.,
      356330.,  359120.,  363725.,  366530.,  369335.,  372140.,  376820.,
      379640.,  382460.,  385280.,  254500.,  256744.,  258988.,  261232.,
      264784.,  267040.,  269296.,  271552.,  275164.,  277432.,  279700.,
      281968.,  285640.,  287920.,  290200.,  292480.,  178821.,  180522.,
      182223.,  183924.,  186534.,  188244.,  189954.,  191664.,  194319.,
      196038.,  197757.,  199476.,  202176.,  203904.,  205632.,  207360.,
      682281.,  684594.,  686907.,  689220.,  694170.,  696492.,  698814.,
      701136.,  706131.,  708462.,  710793.,  713124.,  718164.,  720504.,
      722844.,  725184.,  892228.,  895336.,  898444.,  901552.,  908080.,
      911200.,  914320.,  917440.,  924028.,  927160.,  930292.,  933424.,
      940072.,  943216.,  946360.,  949504.,  1093115., 1097030., 1100945.,
      1104860., 1112930., 1116860., 1120790., 1124720., 1132865., 1136810.,
      1140755., 1144700., 1152920., 1156880., 1160840., 1164800., 1109495.,
      1113470., 1117445., 1121420., 1129550., 1133540., 1137530., 1141520.,
      1149725., 1153730., 1157735., 1161740., 1170020., 1174040., 1178060.,
      1182080., 1125875., 1129910., 1133945., 1137980., 1146170., 1150220.,
      1154270., 1158320., 1166585., 1170650., 1174715., 1178780., 1187120.,
      1191200., 1195280., 1199360., 880660.,  883912.,  887164.,  890416.,
      896896.,  900160.,  903424.,  906688.,  913228.,  916504.,  919780.,
      923056.,  929656.,  932944.,  936232.,  939520.,  645273.,  647730.,
      650187.,  652644.,  657450.,  659916.,  662382.,  664848.,  669699.,
      672174.,  674649.,  677124.,  682020.,  684504.,  686988.,  689472.,
      843860.,  847112.,  850364.,  853616.,  859904.,  863168.,  866432.,
      869696.,  876044.,  879320.,  882596.,  885872.,  892280.,  895568.,
      898856.,  902144.,  1098768., 1103136., 1107504., 1111872., 1120160.,
      1124544., 1128928., 1133312., 1141680., 1146080., 1150480., 1154880.,
      1163328., 1167744., 1172160., 1176576., 1340060., 1345560., 1351060.,
      1356560., 1366800., 1372320., 1377840., 1383360., 1393700., 1399240.,
      1404780., 1410320., 1420760., 1426320., 1431880., 1437440., 1358700.,
      1364280., 1369860., 1375440., 1385760., 1391360., 1396960., 1402560.,
      1412980., 1418600., 1424220., 1429840., 1440360., 1446000., 1451640.,
      1457280., 1377340., 1383000., 1388660., 1394320., 1404720., 1410400.,
      1416080., 1421760., 1432260., 1437960., 1443660., 1449360., 1459960.,
      1465680., 1471400., 1477120., 1072080., 1076640., 1081200., 1085760.,
      1093984., 1098560., 1103136., 1107712., 1116016., 1120608., 1125200.,
      1129792., 1138176., 1142784., 1147392., 1152000., 781460.,  784904.,
      788348.,  791792.,  797888.,  801344.,  804800.,  808256.,  814412.,
      817880.,  821348.,  824816.,  831032.,  834512.,  837992.,  841472.,
      961315.,  965590.,  969865.,  974140.,  981610.,  985900.,  990190.,
      994480.,  1002025., 1006330., 1010635., 1014940., 1022560., 1026880.,
      1031200., 1035520., 1244940., 1250680., 1256420., 1262160., 1272000.,
      1277760., 1283520., 1289280., 1299220., 1305000., 1310780., 1316560.,
      1326600., 1332400., 1338200., 1344000., 1509625., 1516850., 1524075.,
      1531300., 1543450., 1550700., 1557950., 1565200., 1577475., 1584750.,
      1592025., 1599300., 1611700., 1619000., 1626300., 1633600., 1528925.,
      1536250., 1543575., 1550900., 1563150., 1570500., 1577850., 1585200.,
      1597575., 1604950., 1612325., 1619700., 1632200., 1639600., 1647000.,
      1654400., 1548225., 1555650., 1563075., 1570500., 1582850., 1590300.,
      1597750., 1605200., 1617675., 1625150., 1632625., 1640100., 1652700.,
      1660200., 1667700., 1675200., 1197500., 1203480., 1209460., 1215440.,
      1225200., 1231200., 1237200., 1243200., 1253060., 1259080., 1265100.,
      1271120., 1281080., 1287120., 1293160., 1299200., 866995.,  871510.,
      876025.,  880540.,  887770.,  892300.,  896830.,  901360.,  908665.,
      913210.,  917755.,  922300.,  929680.,  934240.,  938800.,  943360.,
      1049095., 1053790., 1058485., 1063180., 1071070., 1075780., 1080490.,
      1085200., 1093165., 1097890., 1102615., 1107340., 1115380., 1120120.,
      1124860., 1129600., 1357500., 1363800., 1370100., 1376400., 1386800.,
      1393120., 1399440., 1405760., 1416260., 1422600., 1428940., 1435280.,
      1445880., 1452240., 1458600., 1464960., 1644725., 1652650., 1660575.,
      1668500., 1681350., 1689300., 1697250., 1705200., 1718175., 1726150.,
      1734125., 1742100., 1755200., 1763200., 1771200., 1779200., 1664025.,
      1672050., 1680075., 1688100., 1701050., 1709100., 1717150., 1725200.,
      1738275., 1746350., 1754425., 1762500., 1775700., 1783800., 1791900.,
      1800000., 1683325., 1691450., 1699575., 1707700., 1720750., 1728900.,
      1737050., 1745200., 1758375., 1766550., 1774725., 1782900., 1796200.,
      1804400., 1812600., 1820800., 1301100., 1307640., 1314180., 1320720.,
      1331040., 1337600., 1344160., 1350720., 1361140., 1367720., 1374300.,
      1380880., 1391400., 1398000., 1404600., 1411200., 941335.,  946270.,
      951205.,  956140.,  963790.,  968740.,  973690.,  978640.,  986365.,
      991330.,  996295.,  1001260., 1009060., 1014040., 1019020., 1024000.,
      1136875., 1141990., 1147105., 1152220., 1160530., 1165660., 1170790.,
      1175920., 1184305., 1189450., 1194595., 1199740., 1208200., 1213360.,
      1218520., 1223680., 1470060., 1476920., 1483780., 1490640., 1501600.,
      1508480., 1515360., 1522240., 1533300., 1540200., 1547100., 1554000.,
      1565160., 1572080., 1579000., 1585920., 1779825., 1788450., 1797075.,
      1805700., 1819250., 1827900., 1836550., 1845200., 1858875., 1867550.,
      1876225., 1884900., 1898700., 1907400., 1916100., 1924800., 1799125.,
      1807850., 1816575., 1825300., 1838950., 1847700., 1856450., 1865200.,
      1878975., 1887750., 1896525., 1905300., 1919200., 1928000., 1936800.,
      1945600., 1818425., 1827250., 1836075., 1844900., 1858650., 1867500.,
      1876350., 1885200., 1899075., 1907950., 1916825., 1925700., 1939700.,
      1948600., 1957500., 1966400., 1404700., 1411800., 1418900., 1426000.,
      1436880., 1444000., 1451120., 1458240., 1469220., 1476360., 1483500.,
      1490640., 1501720., 1508880., 1516040., 1523200., 1015675., 1021030.,
      1026385., 1031740., 1039810., 1045180., 1050550., 1055920., 1064065.,
      1069450., 1074835., 1080220., 1088440., 1093840., 1099240., 1104640.,
      1224655., 1230190., 1235725., 1241260., 1249990., 1255540., 1261090.,
      1266640., 1275445., 1281010., 1286575., 1292140., 1301020., 1306600.,
      1312180., 1317760., 1582620., 1590040., 1597460., 1604880., 1616400.,
      1623840., 1631280., 1638720., 1650340., 1657800., 1665260., 1672720.,
      1684440., 1691920., 1699400., 1706880., 1914925., 1924250., 1933575.,
      1942900., 1957150., 1966500., 1975850., 1985200., 1999575., 2008950.,
      2018325., 2027700., 2042200., 2051600., 2061000., 2070400., 1934225.,
      1943650., 1953075., 1962500., 1976850., 1986300., 1995750., 2005200.,
      2019675., 2029150., 2038625., 2048100., 2062700., 2072200., 2081700.,
      2091200., 1953525., 1963050., 1972575., 1982100., 1996550., 2006100.,
      2015650., 2025200., 2039775., 2049350., 2058925., 2068500., 2083200.,
      2092800., 2102400., 2112000., 1508300., 1515960., 1523620., 1531280.,
      1542720., 1550400., 1558080., 1565760., 1577300., 1585000., 1592700.,
      1600400., 1612040., 1619760., 1627480., 1635200., 1090015., 1095790.,
      1101565., 1107340., 1115830., 1121620., 1127410., 1133200., 1141765.,
      1147570., 1153375., 1159180., 1167820., 1173640., 1179460., 1185280.,
      810836.,  815432.,  820028.,  824624.,  831296.,  835904.,  840512.,
      845120.,  851852.,  856472.,  861092.,  865712.,  872504.,  877136.,
      881768.,  886400.,  1037840., 1044000., 1050160., 1056320., 1065120.,
      1071296., 1077472., 1083648., 1092528., 1098720., 1104912., 1111104.,
      1120064., 1126272., 1132480., 1138688., 1242780., 1250520., 1258260.,
      1266000., 1276880., 1284640., 1292400., 1300160., 1311140., 1318920.,
      1326700., 1334480., 1345560., 1353360., 1361160., 1368960., 1255020.,
      1262840., 1270660., 1278480., 1289440., 1297280., 1305120., 1312960.,
      1324020., 1331880., 1339740., 1347600., 1358760., 1366640., 1374520.,
      1382400., 1267260., 1275160., 1283060., 1290960., 1302000., 1309920.,
      1317840., 1325760., 1336900., 1344840., 1352780., 1360720., 1371960.,
      1379920., 1387880., 1395840., 967120.,  973472.,  979824.,  986176.,
      994912.,  1001280., 1007648., 1014016., 1022832., 1029216., 1035600.,
      1041984., 1050880., 1057280., 1063680., 1070080., 690068.,  694856.,
      699644.,  704432.,  710912.,  715712.,  720512.,  725312.,  731852.,
      736664.,  741476.,  746288.,  752888.,  757712.,  762536.,  767360.,
      474741.,  478314.,  481887.,  485460.,  490230.,  493812.,  497394.,
      500976.,  505791.,  509382.,  512973.,  516564.,  521424.,  525024.,
      528624.,  532224.,  598228.,  603016.,  607804.,  612592.,  618880.,
      623680.,  628480.,  633280.,  639628.,  644440.,  649252.,  654064.,
      660472.,  665296.,  670120.,  674944.,  704015.,  710030.,  716045.,
      722060.,  729830.,  735860.,  741890.,  747920.,  755765.,  761810.,
      767855.,  773900.,  781820.,  787880.,  793940.,  800000.,  710795.,
      716870.,  722945.,  729020.,  736850.,  742940.,  749030.,  755120.,
      763025.,  769130.,  775235.,  781340.,  789320.,  795440.,  801560.,
      807680.,  717575.,  723710.,  729845.,  735980.,  743870.,  750020.,
      756170.,  762320.,  770285.,  776450.,  782615.,  788780.,  796820.,
      803000.,  809180.,  815360.,  536740.,  541672.,  546604.,  551536.,
      557776.,  562720.,  567664.,  572608.,  578908.,  583864.,  588820.,
      593776.,  600136.,  605104.,  610072.,  615040.,  374373.,  378090.,
      381807.,  385524.,  390150.,  393876.,  397602.,  401328.,  405999.,
      409734.,  413469.,  417204.,  421920.,  425664.,  429408.,  433152.,
      1264905., 1269234., 1273563., 1277892., 1284858., 1289196., 1293534.,
      1297872., 1304883., 1309230., 1313577., 1317924., 1324980., 1329336.,
      1333692., 1338048., 1647556., 1653352., 1659148., 1664944., 1674160.,
      1679968., 1685776., 1691584., 1700860., 1706680., 1712500., 1718320.,
      1727656., 1733488., 1739320., 1745152., 2010395., 2017670., 2024945.,
      2032220., 2043650., 2050940., 2058230., 2065520., 2077025., 2084330.,
      2091635., 2098940., 2110520., 2117840., 2125160., 2132480., 2026775.,
      2034110., 2041445., 2048780., 2060270., 2067620., 2074970., 2082320.,
      2093885., 2101250., 2108615., 2115980., 2127620., 2135000., 2142380.,
      2149760., 2043155., 2050550., 2057945., 2065340., 2076890., 2084300.,
      2091710., 2099120., 2110745., 2118170., 2125595., 2133020., 2144720.,
      2152160., 2159600., 2167040., 1592980., 1598920., 1604860., 1610800.,
      1619968., 1625920., 1631872., 1637824., 1647052., 1653016., 1658980.,
      1664944., 1674232., 1680208., 1686184., 1692160., 1163385., 1167858.,
      1172331., 1176804., 1183626., 1188108., 1192590., 1197072., 1203939.,
      1208430., 1212921., 1217412., 1224324., 1228824., 1233324., 1237824.,
      1513172., 1519112., 1525052., 1530992., 1539968., 1545920., 1551872.,
      1557824., 1566860., 1572824., 1578788., 1584752., 1593848., 1599824.,
      1605800., 1611776., 1962512., 1970464., 1978416., 1986368., 1998240.,
      2006208., 2014176., 2022144., 2034096., 2042080., 2050064., 2058048.,
      2070080., 2078080., 2086080., 2094080., 2383900., 2393880., 2403860.,
      2413840., 2428560., 2438560., 2448560., 2458560., 2473380., 2483400.,
      2493420., 2503440., 2518360., 2528400., 2538440., 2548480., 2402540.,
      2412600., 2422660., 2432720., 2447520., 2457600., 2467680., 2477760.,
      2492660., 2502760., 2512860., 2522960., 2537960., 2548080., 2558200.,
      2568320., 2421180., 2431320., 2441460., 2451600., 2466480., 2476640.,
      2486800., 2496960., 2511940., 2522120., 2532300., 2542480., 2557560.,
      2567760., 2577960., 2588160., 1878480., 1886624., 1894768., 1902912.,
      1914720., 1922880., 1931040., 1939200., 1951088., 1959264., 1967440.,
      1975616., 1987584., 1995776., 2003968., 2012160., 1364756., 1370888.,
      1377020., 1383152., 1391936., 1398080., 1404224., 1410368., 1419212.,
      1425368., 1431524., 1437680., 1446584., 1452752., 1458920., 1465088.,
      1663555., 1671190., 1678825., 1686460., 1697290., 1704940., 1712590.,
      1720240., 1731145., 1738810., 1746475., 1754140., 1765120., 1772800.,
      1780480., 1788160., 2145420., 2155640., 2165860., 2176080., 2190400.,
      2200640., 2210880., 2221120., 2235540., 2245800., 2256060., 2266320.,
      2280840., 2291120., 2301400., 2311680., 2590425., 2603250., 2616075.,
      2628900., 2646650., 2659500., 2672350., 2685200., 2703075., 2715950.,
      2728825., 2741700., 2759700., 2772600., 2785500., 2798400., 2609725.,
      2622650., 2635575., 2648500., 2666350., 2679300., 2692250., 2705200.,
      2723175., 2736150., 2749125., 2762100., 2780200., 2793200., 2806200.,
      2819200., 2629025., 2642050., 2655075., 2668100., 2686050., 2699100.,
      2712150., 2725200., 2743275., 2756350., 2769425., 2782500., 2800700.,
      2813800., 2826900., 2840000., 2026300., 2036760., 2047220., 2057680.,
      2071920., 2082400., 2092880., 2103360., 2117700., 2128200., 2138700.,
      2149200., 2163640., 2174160., 2184680., 2195200., 1461715., 1469590.,
      1477465., 1485340., 1495930., 1503820., 1511710., 1519600., 1530265.,
      1538170., 1546075., 1553980., 1564720., 1572640., 1580560., 1588480.,
      1751335., 1759390., 1767445., 1775500., 1786750., 1794820., 1802890.,
      1810960., 1822285., 1830370., 1838455., 1846540., 1857940., 1866040.,
      1874140., 1882240., 2257980., 2268760., 2279540., 2290320., 2305200.,
      2316000., 2326800., 2337600., 2352580., 2363400., 2374220., 2385040.,
      2400120., 2410960., 2421800., 2432640., 2725525., 2739050., 2752575.,
      2766100., 2784550., 2798100., 2811650., 2825200., 2843775., 2857350.,
      2870925., 2884500., 2903200., 2916800., 2930400., 2944000., 2744825.,
      2758450., 2772075., 2785700., 2804250., 2817900., 2831550., 2845200.,
      2863875., 2877550., 2891225., 2904900., 2923700., 2937400., 2951100.,
      2964800., 2764125., 2777850., 2791575., 2805300., 2823950., 2837700.,
      2851450., 2865200., 2883975., 2897750., 2911525., 2925300., 2944200.,
      2958000., 2971800., 2985600., 2129900., 2140920., 2151940., 2162960.,
      2177760., 2188800., 2199840., 2210880., 2225780., 2236840., 2247900.,
      2258960., 2273960., 2285040., 2296120., 2307200., 1536055., 1544350.,
      1552645., 1560940., 1571950., 1580260., 1588570., 1596880., 1607965.,
      1616290., 1624615., 1632940., 1644100., 1652440., 1660780., 1669120.,
      1839115., 1847590., 1856065., 1864540., 1876210., 1884700., 1893190.,
      1901680., 1913425., 1921930., 1930435., 1938940., 1950760., 1959280.,
      1967800., 1976320., 2370540., 2381880., 2393220., 2404560., 2420000.,
      2431360., 2442720., 2454080., 2469620., 2481000., 2492380., 2503760.,
      2519400., 2530800., 2542200., 2553600., 2860625., 2874850., 2889075.,
      2903300., 2922450., 2936700., 2950950., 2965200., 2984475., 2998750.,
      3013025., 3027300., 3046700., 3061000., 3075300., 3089600., 2879925.,
      2894250., 2908575., 2922900., 2942150., 2956500., 2970850., 2985200.,
      3004575., 3018950., 3033325., 3047700., 3067200., 3081600., 3096000.,
      3110400., 2899225., 2913650., 2928075., 2942500., 2961850., 2976300.,
      2990750., 3005200., 3024675., 3039150., 3053625., 3068100., 3087700.,
      3102200., 3116700., 3131200., 2233500., 2245080., 2256660., 2268240.,
      2283600., 2295200., 2306800., 2318400., 2333860., 2345480., 2357100.,
      2368720., 2384280., 2395920., 2407560., 2419200., 1610395., 1619110.,
      1627825., 1636540., 1647970., 1656700., 1665430., 1674160., 1685665.,
      1694410., 1703155., 1711900., 1723480., 1732240., 1741000., 1749760.,
      1926895., 1935790., 1944685., 1953580., 1965670., 1974580., 1983490.,
      1992400., 2004565., 2013490., 2022415., 2031340., 2043580., 2052520.,
      2061460., 2070400., 2483100., 2495000., 2506900., 2518800., 2534800.,
      2546720., 2558640., 2570560., 2586660., 2598600., 2610540., 2622480.,
      2638680., 2650640., 2662600., 2674560., 2995725., 3010650., 3025575.,
      3040500., 3060350., 3075300., 3090250., 3105200., 3125175., 3140150.,
      3155125., 3170100., 3190200., 3205200., 3220200., 3235200., 3015025.,
      3030050., 3045075., 3060100., 3080050., 3095100., 3110150., 3125200.,
      3145275., 3160350., 3175425., 3190500., 3210700., 3225800., 3240900.,
      3256000., 3034325., 3049450., 3064575., 3079700., 3099750., 3114900.,
      3130050., 3145200., 3165375., 3180550., 3195725., 3210900., 3231200.,
      3246400., 3261600., 3276800., 2337100., 2349240., 2361380., 2373520.,
      2389440., 2401600., 2413760., 2425920., 2441940., 2454120., 2466300.,
      2478480., 2494600., 2506800., 2519000., 2531200., 1684735., 1693870.,
      1703005., 1712140., 1723990., 1733140., 1742290., 1751440., 1763365.,
      1772530., 1781695., 1790860., 1802860., 1812040., 1821220., 1830400.,
      1265108., 1272392., 1279676., 1286960., 1296320., 1303616., 1310912.,
      1318208., 1327628., 1334936., 1342244., 1349552., 1359032., 1366352.,
      1373672., 1380992., 1614864., 1624608., 1634352., 1644096., 1656480.,
      1666240., 1676000., 1685760., 1698224., 1708000., 1717776., 1727552.,
      1740096., 1749888., 1759680., 1769472., 1928220., 1940440., 1952660.,
      1964880., 1980240., 1992480., 2004720., 2016960., 2032420., 2044680.,
      2056940., 2069200., 2084760., 2097040., 2109320., 2121600., 1940460.,
      1952760., 1965060., 1977360., 1992800., 2005120., 2017440., 2029760.,
      2045300., 2057640., 2069980., 2082320., 2097960., 2110320., 2122680.,
      2135040., 1952700., 1965080., 1977460., 1989840., 2005360., 2017760.,
      2030160., 2042560., 2058180., 2070600., 2083020., 2095440., 2111160.,
      2123600., 2136040., 2148480., 1486800., 1496736., 1506672., 1516608.,
      1528928., 1538880., 1548832., 1558784., 1571184., 1581152., 1591120.,
      1601088., 1613568., 1623552., 1633536., 1643520., 1058324., 1065800.,
      1073276., 1080752., 1089920., 1097408., 1104896., 1112384., 1121612.,
      1129112., 1136612., 1144112., 1153400., 1160912., 1168424., 1175936.,
      734805.,  740394.,  745983.,  751572.,  758358.,  763956.,  769554.,
      775152.,  781983.,  787590.,  793197.,  798804.,  805680.,  811296.,
      816912.,  822528.,  923476.,  930952.,  938428.,  945904.,  954880.,
      962368.,  969856.,  977344.,  986380.,  993880.,  1001380., 1008880.,
      1017976., 1025488., 1033000., 1040512., 1083695., 1093070., 1102445.,
      1111820., 1122950., 1132340., 1141730., 1151120., 1162325., 1171730.,
      1181135., 1190540., 1201820., 1211240., 1220660., 1230080., 1090475.,
      1099910., 1109345., 1118780., 1129970., 1139420., 1148870., 1158320.,
      1169585., 1179050., 1188515., 1197980., 1209320., 1218800., 1228280.,
      1237760., 1097255., 1106750., 1116245., 1125740., 1136990., 1146500.,
      1156010., 1165520., 1176845., 1186370., 1195895., 1205420., 1216820.,
      1226360., 1235900., 1245440., 818980.,  826600.,  834220.,  841840.,
      850768.,  858400.,  866032.,  873664.,  882652.,  890296.,  897940.,
      905584.,  914632.,  922288.,  929944.,  937600.,  569925.,  575658.,
      581391.,  587124.,  593766.,  599508.,  605250.,  610992.,  617679.,
      623430.,  629181.,  634932.,  641664.,  647424.,  653184.,  658944.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428825.,  430450.,  432075.,  433700.,  440250.,  441900.,  443550.,
      445200.,  451875.,  453550.,  455225.,  456900.,  463700.,  465400.,
      467100.,  468800.,  448125.,  449850.,  451575.,  453300.,  459950.,
      461700.,  463450.,  465200.,  471975.,  473750.,  475525.,  477300.,
      484200.,  486000.,  487800.,  489600.,  467425.,  469250.,  471075.,
      472900.,  479650.,  481500.,  483350.,  485200.,  492075.,  493950.,
      495825.,  497700.,  504700.,  506600.,  508500.,  510400.,  563925.,
      566250.,  568575.,  570900.,  578150.,  580500.,  582850.,  585200.,
      592575.,  594950.,  597325.,  599700.,  607200.,  609600.,  612000.,
      614400.,  583225.,  585650.,  588075.,  590500.,  597850.,  600300.,
      602750.,  605200.,  612675.,  615150.,  617625.,  620100.,  627700.,
      630200.,  632700.,  635200.,  602525.,  605050.,  607575.,  610100.,
      617550.,  620100.,  622650.,  625200.,  632775.,  635350.,  637925.,
      640500.,  648200.,  650800.,  653400.,  656000.,  699025.,  702050.,
      705075.,  708100.,  716050.,  719100.,  722150.,  725200.,  733275.,
      736350.,  739425.,  742500.,  750700.,  753800.,  756900.,  760000.,
      718325.,  721450.,  724575.,  727700.,  735750.,  738900.,  742050.,
      745200.,  753375.,  756550.,  759725.,  762900.,  771200.,  774400.,
      777600.,  780800.,  737625.,  740850.,  744075.,  747300.,  755450.,
      758700.,  761950.,  765200.,  773475.,  776750.,  780025.,  783300.,
      791700.,  795000.,  798300.,  801600.,  834125.,  837850.,  841575.,
      845300.,  853950.,  857700.,  861450.,  865200.,  873975.,  877750.,
      881525.,  885300.,  894200.,  898000.,  901800.,  905600.,  853425.,
      857250.,  861075.,  864900.,  873650.,  877500.,  881350.,  885200.,
      894075.,  897950.,  901825.,  905700.,  914700.,  918600.,  922500.,
      926400.,  872725.,  876650.,  880575.,  884500.,  893350.,  897300.,
      901250.,  905200.,  914175.,  918150.,  922125.,  926100.,  935200.,
      939200.,  943200.,  947200.,  1509625., 1516850., 1524075., 1531300.,
      1543450., 1550700., 1557950., 1565200., 1577475., 1584750., 1592025.,
      1599300., 1611700., 1619000., 1626300., 1633600., 1528925., 1536250.,
      1543575., 1550900., 1563150., 1570500., 1577850., 1585200., 1597575.,
      1604950., 1612325., 1619700., 1632200., 1639600., 1647000., 1654400.,
      1548225., 1555650., 1563075., 1570500., 1582850., 1590300., 1597750.,
      1605200., 1617675., 1625150., 1632625., 1640100., 1652700., 1660200.,
      1667700., 1675200., 1644725., 1652650., 1660575., 1668500., 1681350.,
      1689300., 1697250., 1705200., 1718175., 1726150., 1734125., 1742100.,
      1755200., 1763200., 1771200., 1779200., 1664025., 1672050., 1680075.,
      1688100., 1701050., 1709100., 1717150., 1725200., 1738275., 1746350.,
      1754425., 1762500., 1775700., 1783800., 1791900., 1800000., 1683325.,
      1691450., 1699575., 1707700., 1720750., 1728900., 1737050., 1745200.,
      1758375., 1766550., 1774725., 1782900., 1796200., 1804400., 1812600.,
      1820800., 1779825., 1788450., 1797075., 1805700., 1819250., 1827900.,
      1836550., 1845200., 1858875., 1867550., 1876225., 1884900., 1898700.,
      1907400., 1916100., 1924800., 1799125., 1807850., 1816575., 1825300.,
      1838950., 1847700., 1856450., 1865200., 1878975., 1887750., 1896525.,
      1905300., 1919200., 1928000., 1936800., 1945600., 1818425., 1827250.,
      1836075., 1844900., 1858650., 1867500., 1876350., 1885200., 1899075.,
      1907950., 1916825., 1925700., 1939700., 1948600., 1957500., 1966400.,
      1914925., 1924250., 1933575., 1942900., 1957150., 1966500., 1975850.,
      1985200., 1999575., 2008950., 2018325., 2027700., 2042200., 2051600.,
      2061000., 2070400., 1934225., 1943650., 1953075., 1962500., 1976850.,
      1986300., 1995750., 2005200., 2019675., 2029150., 2038625., 2048100.,
      2062700., 2072200., 2081700., 2091200., 1953525., 1963050., 1972575.,
      1982100., 1996550., 2006100., 2015650., 2025200., 2039775., 2049350.,
      2058925., 2068500., 2083200., 2092800., 2102400., 2112000., 2590425.,
      2603250., 2616075., 2628900., 2646650., 2659500., 2672350., 2685200.,
      2703075., 2715950., 2728825., 2741700., 2759700., 2772600., 2785500.,
      2798400., 2609725., 2622650., 2635575., 2648500., 2666350., 2679300.,
      2692250., 2705200., 2723175., 2736150., 2749125., 2762100., 2780200.,
      2793200., 2806200., 2819200., 2629025., 2642050., 2655075., 2668100.,
      2686050., 2699100., 2712150., 2725200., 2743275., 2756350., 2769425.,
      2782500., 2800700., 2813800., 2826900., 2840000., 2725525., 2739050.,
      2752575., 2766100., 2784550., 2798100., 2811650., 2825200., 2843775.,
      2857350., 2870925., 2884500., 2903200., 2916800., 2930400., 2944000.,
      2744825., 2758450., 2772075., 2785700., 2804250., 2817900., 2831550.,
      2845200., 2863875., 2877550., 2891225., 2904900., 2923700., 2937400.,
      2951100., 2964800., 2764125., 2777850., 2791575., 2805300., 2823950.,
      2837700., 2851450., 2865200., 2883975., 2897750., 2911525., 2925300.,
      2944200., 2958000., 2971800., 2985600., 2860625., 2874850., 2889075.,
      2903300., 2922450., 2936700., 2950950., 2965200., 2984475., 2998750.,
      3013025., 3027300., 3046700., 3061000., 3075300., 3089600., 2879925.,
      2894250., 2908575., 2922900., 2942150., 2956500., 2970850., 2985200.,
      3004575., 3018950., 3033325., 3047700., 3067200., 3081600., 3096000.,
      3110400., 2899225., 2913650., 2928075., 2942500., 2961850., 2976300.,
      2990750., 3005200., 3024675., 3039150., 3053625., 3068100., 3087700.,
      3102200., 3116700., 3131200., 2995725., 3010650., 3025575., 3040500.,
      3060350., 3075300., 3090250., 3105200., 3125175., 3140150., 3155125.,
      3170100., 3190200., 3205200., 3220200., 3235200., 3015025., 3030050.,
      3045075., 3060100., 3080050., 3095100., 3110150., 3125200., 3145275.,
      3160350., 3175425., 3190500., 3210700., 3225800., 3240900., 3256000.,
      3034325., 3049450., 3064575., 3079700., 3099750., 3114900., 3130050.,
      3145200., 3165375., 3180550., 3195725., 3210900., 3231200., 3246400.,
      3261600., 3276800.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1956.,  2666.,  3400.,  3670.,  3940.,  4210.,  3380.,  2541.,  3380.,
      4532.,  5690.,  6000.,  6310.,  6620.,  5260.,  3914.,  4990.,  6620.,
      8225.,  8550.,  8875.,  9200.,  7250.,  5350.,  6670.,  8780.,  10825.,
      11150., 11475., 11800., 9250.,  6790.,  8350.,  10940., 13425., 13750.,
      14075., 14400., 11250., 8230.,  10030., 13100., 16025., 16350., 16675.,
      17000., 13250., 9670.,  6956.,  9004.,  10910., 11120., 11330., 11540.,
      8900.,  6422.,  4296.,  5486.,  6550.,  6670.,  6790.,  6910.,  5240.,
      3711.,  12900., 16874., 20680., 20950., 21220., 21490., 16820., 12333.,
      16052., 20916., 25530., 25840., 26150., 26460., 20620., 15050., 18430.,
      23900., 29025., 29350., 29675., 30000., 23250., 16870., 20110., 26060.,
      31625., 31950., 32275., 32600., 25250., 18310., 21790., 28220., 34225.,
      34550., 34875., 35200., 27250., 19750., 23470., 30380., 36825., 37150.,
      37475., 37800., 29250., 21190., 15788., 20268., 24350., 24560., 24770.,
      24980., 19140., 13718., 9480.,  12014., 14230., 14350., 14470., 14590.,
      11000., 7743.,  23844., 31082., 37960., 38230., 38500., 38770., 30260.,
      22125., 28724., 37300., 45370., 45680., 45990., 46300., 35980., 26186.,
      31870., 41180., 49825., 50150., 50475., 50800., 39250., 28390., 33550.,
      43340., 52425., 52750., 53075., 53400., 41250., 29830., 35230., 45500.,
      55025., 55350., 55675., 56000., 43250., 31270., 36910., 47660., 57625.,
      57950., 58275., 58600., 45250., 32710., 24620., 31532., 37790., 38000.,
      38210., 38420., 29380., 21014., 14664., 18542., 21910., 22030., 22150.,
      22270., 16760., 11775.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      8225.,  8550.,  8875.,  9200.,  10825., 11150., 11475., 11800.,
      13425., 13750., 14075., 14400., 16025., 16350., 16675., 17000.,
      29025., 29350., 29675., 30000., 31625., 31950., 32275., 32600.,
      34225., 34550., 34875., 35200., 36825., 37150., 37475., 37800.,
      49825., 50150., 50475., 50800., 52425., 52750., 53075., 53400.,
      55025., 55350., 55675., 56000., 57625., 57950., 58275., 58600.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3822.,   3912.,   5206.,   5332.,   6635.,   6800.,   7160.,   7340.,
      7685.,   7880.,   8210.,   8420.,   6586.,   6760.,   4947.,   5082.,
      6592.,   6760.,   8832.,   9064.,   11080.,  11380.,  11680.,  12000.,
      12280.,  12620.,  12880.,  13240.,  10224.,  10520.,  7600.,   7828.,
      9710.,   9980.,   12870.,  13240.,  15975.,  16450.,  16600.,  17100.,
      17225.,  17750.,  17850.,  18400.,  14050.,  14500.,  10355.,  10700.,
      12950.,  13340.,  17030.,  17560.,  20975.,  21650.,  21600.,  22300.,
      22225.,  22950.,  22850.,  23600.,  17890.,  18500.,  13115.,  13580.,
      16190.,  16700.,  21190.,  21880.,  25975.,  26850.,  26600.,  27500.,
      27225.,  28150.,  27850.,  28800.,  21730.,  22500.,  15875.,  16460.,
      19430.,  20060.,  25350.,  26200.,  30975.,  32050.,  31600.,  32700.,
      32225.,  33350.,  32850.,  34000.,  25570.,  26500.,  18635.,  19340.,
      13360.,  13912.,  17264.,  18008.,  20880.,  21820.,  21280.,  22240.,
      21680.,  22660.,  22080.,  23080.,  16992.,  17800.,  12232.,  12844.,
      8142.,   8592.,   10366.,  10972.,  12335.,  13100.,  12560.,  13340.,
      12785.,  13580.,  13010.,  13820.,  9826.,   10480.,  6927.,   7422.,
      25134.,  25800.,  32854.,  33748.,  40235.,  41360.,  40760.,  41900.,
      41285.,  42440.,  41810.,  42980.,  32698.,  33640.,  23955.,  24666.,
      31168.,  32104.,  40576.,  41832.,  49480.,  51060.,  50080.,  51680.,
      50680.,  52300.,  51280.,  52920.,  39920.,  41240.,  29104.,  30100.,
      35630.,  36860.,  46150.,  47800.,  55975.,  58050.,  56600.,  58700.,
      57225.,  59350.,  57850.,  60000.,  44770.,  46500.,  32435.,  33740.,
      38870.,  40220.,  50310.,  52120.,  60975.,  63250.,  61600.,  63900.,
      62225.,  64550.,  62850.,  65200.,  48610.,  50500.,  35195.,  36620.,
      42110.,  43580.,  54470.,  56440.,  65975.,  68450.,  66600.,  69100.,
      67225.,  69750.,  67850.,  70400.,  52450.,  54500.,  37955.,  39500.,
      45350.,  46940.,  58630.,  60760.,  70975.,  73650.,  71600.,  74300.,
      72225.,  74950.,  72850.,  75600.,  56290.,  58500.,  40715.,  42380.,
      30256.,  31576.,  38768.,  40536.,  46480.,  48700.,  46880.,  49120.,
      47280.,  49540.,  47680.,  49960.,  36448.,  38280.,  26056.,  27436.,
      17934.,  18960.,  22654.,  24028.,  26735.,  28460.,  26960.,  28700.,
      27185.,  28940.,  27410.,  29180.,  20578.,  22000.,  14415.,  15486.,
      46446.,  47688.,  60502.,  62164.,  73835.,  75920.,  74360.,  76460.,
      74885.,  77000.,  75410.,  77540.,  58810.,  60520.,  42963.,  44250.,
      55744.,  57448.,  72320.,  74600.,  87880.,  90740.,  88480.,  91360.,
      89080.,  91980.,  89680.,  92600.,  69616.,  71960.,  50608.,  52372.,
      61550.,  63740.,  79430.,  82360.,  95975.,  99650.,  96600.,  100300.,
      97225.,  100950., 97850.,  101600., 75490.,  78500.,  54515.,  56780.,
      64790.,  67100.,  83590.,  86680.,  100975., 104850., 101600., 105500.,
      102225., 106150., 102850., 106800., 79330.,  82500.,  57275.,  59660.,
      68030.,  70460.,  87750.,  91000.,  105975., 110050., 106600., 110700.,
      107225., 111350., 107850., 112000., 83170.,  86500.,  60035.,  62540.,
      71270.,  73820.,  91910.,  95320.,  110975., 115250., 111600., 115900.,
      112225., 116550., 112850., 117200., 87010.,  90500.,  62795.,  65420.,
      47152.,  49240.,  60272.,  63064.,  72080.,  75580.,  72480.,  76000.,
      72880.,  76420.,  73280.,  76840.,  55904.,  58760.,  39880.,  42028.,
      27726.,  29328.,  34942.,  37084.,  41135.,  43820.,  41360.,  44060.,
      41585.,  44300.,  41810.,  44540.,  31330.,  33520.,  21903.,  23550.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      15975.,  16450.,  16600.,  17100.,  17225.,  17750.,  17850.,  18400.,
      20975.,  21650.,  21600.,  22300.,  22225.,  22950.,  22850.,  23600.,
      25975.,  26850.,  26600.,  27500.,  27225.,  28150.,  27850.,  28800.,
      30975.,  32050.,  31600.,  32700.,  32225.,  33350.,  32850.,  34000.,
      55975.,  58050.,  56600.,  58700.,  57225.,  59350.,  57850.,  60000.,
      60975.,  63250.,  61600.,  63900.,  62225.,  64550.,  62850.,  65200.,
      65975.,  68450.,  66600.,  69100.,  67225.,  69750.,  67850.,  70400.,
      70975.,  73650.,  71600.,  74300.,  72225.,  74950.,  72850.,  75600.,
      95975.,  99650.,  96600.,  100300., 97225.,  100950., 97850.,  101600.,
      100975., 104850., 101600., 105500., 102225., 106150., 102850., 106800.,
      105975., 110050., 106600., 110700., 107225., 111350., 107850., 112000.,
      110975., 115250., 111600., 115900., 112225., 116550., 112850., 117200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7554.,   7644.,   7734.,   7824.,   10286.,  10412.,  10538.,  10664.,
      13105.,  13270.,  13435.,  13600.,  14140.,  14320.,  14500.,  14680.,
      15175.,  15370.,  15565.,  15760.,  16210.,  16420.,  16630.,  16840.,
      12998.,  13172.,  13346.,  13520.,  9759.,   9894.,   10029.,  10164.,
      13016.,  13184.,  13352.,  13520.,  17432.,  17664.,  17896.,  18128.,
      21860.,  22160.,  22460.,  22760.,  23040.,  23360.,  23680.,  24000.,
      24220.,  24560.,  24900.,  25240.,  25400.,  25760.,  26120.,  26480.,
      20152.,  20448.,  20744.,  21040.,  14972.,  15200.,  15428.,  15656.,
      19150.,  19420.,  19690.,  19960.,  25370.,  25740.,  26110.,  26480.,
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      27650.,  28100.,  28550.,  29000.,  20365.,  20710.,  21055.,  21400.,
      25510.,  25900.,  26290.,  26680.,  33530.,  34060.,  34590.,  35120.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      35170.,  35780.,  36390.,  37000.,  25765.,  26230.,  26695.,  27160.,
      31870.,  32380.,  32890.,  33400.,  41690.,  42380.,  43070.,  43760.,
      51075.,  51950.,  52825.,  53700.,  52300.,  53200.,  54100.,  55000.,
      53525.,  54450.,  55375.,  56300.,  54750.,  55700.,  56650.,  57600.,
      42690.,  43460.,  44230.,  45000.,  31165.,  31750.,  32335.,  32920.,
      38230.,  38860.,  39490.,  40120.,  49850.,  50700.,  51550.,  52400.,
      60875.,  61950.,  63025.,  64100.,  62100.,  63200.,  64300.,  65400.,
      63325.,  64450.,  65575.,  66700.,  64550.,  65700.,  66850.,  68000.,
      50210.,  51140.,  52070.,  53000.,  36565.,  37270.,  37975.,  38680.,
      26168.,  26720.,  27272.,  27824.,  33784.,  34528.,  35272.,  36016.,
      40820.,  41760.,  42700.,  43640.,  41600.,  42560.,  43520.,  44480.,
      42380.,  43360.,  44340.,  45320.,  43160.,  44160.,  45160.,  46160.,
      33176.,  33984.,  34792.,  35600.,  23852.,  24464.,  25076.,  25688.,
      15834.,  16284.,  16734.,  17184.,  20126.,  20732.,  21338.,  21944.,
      23905.,  24670.,  25435.,  26200.,  24340.,  25120.,  25900.,  26680.,
      24775.,  25570.,  26365.,  27160.,  25210.,  26020.,  26830.,  27640.,
      18998.,  19652.,  20306.,  20960.,  13359.,  13854.,  14349.,  14844.,
      49602.,  50268.,  50934.,  51600.,  64814.,  65708.,  66602.,  67496.,
      79345.,  80470.,  81595.,  82720.,  80380.,  81520.,  82660.,  83800.,
      81415.,  82570.,  83725.,  84880.,  82450.,  83620.,  84790.,  85960.,
      64454.,  65396.,  66338.,  67280.,  47199.,  47910.,  48621.,  49332.,
      61400.,  62336.,  63272.,  64208.,  79896.,  81152.,  82408.,  83664.,
      97380.,  98960.,  100540., 102120., 98560.,  100160., 101760., 103360.,
      99740.,  101360., 102980., 104600., 100920., 102560., 104200., 105840.,
      78520.,  79840.,  81160.,  82480.,  57212.,  58208.,  59204.,  60200.,
      70030.,  71260.,  72490.,  73720.,  90650.,  92300.,  93950.,  95600.,
      109875., 111950., 114025., 116100., 111100., 113200., 115300., 117400.,
      112325., 114450., 116575., 118700., 113550., 115700., 117850., 120000.,
      87810.,  89540.,  91270.,  93000.,  63565.,  64870.,  66175.,  67480.,
      76390.,  77740.,  79090.,  80440.,  98810.,  100620., 102430., 104240.,
      119675., 121950., 124225., 126500., 120900., 123200., 125500., 127800.,
      122125., 124450., 126775., 129100., 123350., 125700., 128050., 130400.,
      95330.,  97220.,  99110.,  101000., 68965.,  70390.,  71815.,  73240.,
      82750.,  84220.,  85690.,  87160.,  106970., 108940., 110910., 112880.,
      129475., 131950., 134425., 136900., 130700., 133200., 135700., 138200.,
      131925., 134450., 136975., 139500., 133150., 135700., 138250., 140800.,
      102850., 104900., 106950., 109000., 74365.,  75910.,  77455.,  79000.,
      89110.,  90700.,  92290.,  93880.,  115130., 117260., 119390., 121520.,
      139275., 141950., 144625., 147300., 140500., 143200., 145900., 148600.,
      141725., 144450., 147175., 149900., 142950., 145700., 148450., 151200.,
      110370., 112580., 114790., 117000., 79765.,  81430.,  83095.,  84760.,
      59192.,  60512.,  61832.,  63152.,  75768.,  77536.,  79304.,  81072.,
      90740.,  92960.,  95180.,  97400.,  91520.,  93760.,  96000.,  98240.,
      92300.,  94560.,  96820.,  99080.,  93080.,  95360.,  97640.,  99920.,
      71064.,  72896.,  74728.,  76560.,  50732.,  52112.,  53492.,  54872.,
      34842.,  35868.,  36894.,  37920.,  43934.,  45308.,  46682.,  48056.,
      51745.,  53470.,  55195.,  56920.,  52180.,  53920.,  55660.,  57400.,
      52615.,  54370.,  56125.,  57880.,  53050.,  54820.,  56590.,  58360.,
      39734.,  41156.,  42578.,  44000.,  27759.,  28830.,  29901.,  30972.,
      91650.,  92892.,  94134.,  95376.,  119342., 121004., 122666., 124328.,
      145585., 147670., 149755., 151840., 146620., 148720., 150820., 152920.,
      147655., 149770., 151885., 154000., 148690., 150820., 152950., 155080.,
      115910., 117620., 119330., 121040., 84639.,  85926.,  87213.,  88500.,
      109784., 111488., 113192., 114896., 142360., 144640., 146920., 149200.,
      172900., 175760., 178620., 181480., 174080., 176960., 179840., 182720.,
      175260., 178160., 181060., 183960., 176440., 179360., 182280., 185200.,
      136888., 139232., 141576., 143920., 99452.,  101216., 102980., 104744.,
      120910., 123100., 125290., 127480., 155930., 158860., 161790., 164720.,
      188275., 191950., 195625., 199300., 189500., 193200., 196900., 200600.,
      190725., 194450., 198175., 201900., 191950., 195700., 199450., 203200.,
      147970., 150980., 153990., 157000., 106765., 109030., 111295., 113560.,
      127270., 129580., 131890., 134200., 164090., 167180., 170270., 173360.,
      198075., 201950., 205825., 209700., 199300., 203200., 207100., 211000.,
      200525., 204450., 208375., 212300., 201750., 205700., 209650., 213600.,
      155490., 158660., 161830., 165000., 112165., 114550., 116935., 119320.,
      133630., 136060., 138490., 140920., 172250., 175500., 178750., 182000.,
      207875., 211950., 216025., 220100., 209100., 213200., 217300., 221400.,
      210325., 214450., 218575., 222700., 211550., 215700., 219850., 224000.,
      163010., 166340., 169670., 173000., 117565., 120070., 122575., 125080.,
      139990., 142540., 145090., 147640., 180410., 183820., 187230., 190640.,
      217675., 221950., 226225., 230500., 218900., 223200., 227500., 231800.,
      220125., 224450., 228775., 233100., 221350., 225700., 230050., 234400.,
      170530., 174020., 177510., 181000., 122965., 125590., 128215., 130840.,
      92216.,  94304.,  96392.,  98480.,  117752., 120544., 123336., 126128.,
      140660., 144160., 147660., 151160., 141440., 144960., 148480., 152000.,
      142220., 145760., 149300., 152840., 143000., 146560., 150120., 153680.,
      108952., 111808., 114664., 117520., 77612.,  79760.,  81908.,  84056.,
      53850.,  55452.,  57054.,  58656.,  67742.,  69884.,  72026.,  74168.,
      79585.,  82270.,  84955.,  87640.,  80020.,  82720.,  85420.,  88120.,
      80455.,  83170.,  85885.,  88600.,  80890.,  83620.,  86350.,  89080.,
      60470.,  62660.,  64850.,  67040.,  42159.,  43806.,  45453.,  47100.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31475.,  31950.,  32425.,  32900.,  32700.,  33200.,  33700.,  34200.,
      33925.,  34450.,  34975.,  35500.,  35150.,  35700.,  36250.,  36800.,
      41275.,  41950.,  42625.,  43300.,  42500.,  43200.,  43900.,  44600.,
      43725.,  44450.,  45175.,  45900.,  44950.,  45700.,  46450.,  47200.,
      51075.,  51950.,  52825.,  53700.,  52300.,  53200.,  54100.,  55000.,
      53525.,  54450.,  55375.,  56300.,  54750.,  55700.,  56650.,  57600.,
      60875.,  61950.,  63025.,  64100.,  62100.,  63200.,  64300.,  65400.,
      63325.,  64450.,  65575.,  66700.,  64550.,  65700.,  66850.,  68000.,
      109875., 111950., 114025., 116100., 111100., 113200., 115300., 117400.,
      112325., 114450., 116575., 118700., 113550., 115700., 117850., 120000.,
      119675., 121950., 124225., 126500., 120900., 123200., 125500., 127800.,
      122125., 124450., 126775., 129100., 123350., 125700., 128050., 130400.,
      129475., 131950., 134425., 136900., 130700., 133200., 135700., 138200.,
      131925., 134450., 136975., 139500., 133150., 135700., 138250., 140800.,
      139275., 141950., 144625., 147300., 140500., 143200., 145900., 148600.,
      141725., 144450., 147175., 149900., 142950., 145700., 148450., 151200.,
      188275., 191950., 195625., 199300., 189500., 193200., 196900., 200600.,
      190725., 194450., 198175., 201900., 191950., 195700., 199450., 203200.,
      198075., 201950., 205825., 209700., 199300., 203200., 207100., 211000.,
      200525., 204450., 208375., 212300., 201750., 205700., 209650., 213600.,
      207875., 211950., 216025., 220100., 209100., 213200., 217300., 221400.,
      210325., 214450., 218575., 222700., 211550., 215700., 219850., 224000.,
      217675., 221950., 226225., 230500., 218900., 223200., 227500., 231800.,
      220125., 224450., 228775., 233100., 221350., 225700., 230050., 234400.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7311.,   7824.,   9980.,   10664.,  12745.,  13600.,  13795.,  14680.,
      14845.,  15760.,  15895.,  16840.,  12764.,  13520.,  9597.,   10164.,
      12800.,  13520.,  17168.,  18128.,  21560.,  22760.,  22760.,  24000.,
      23960.,  25240.,  25160.,  26480.,  19984.,  21040.,  14864.,  15656.,
      19015.,  19960.,  25220.,  26480.,  31325.,  32900.,  32575.,  34200.,
      33825.,  35500.,  35075.,  36800.,  27620.,  29000.,  20365.,  21400.,
      25495.,  26680.,  33540.,  35120.,  41325.,  43300.,  42575.,  44600.,
      43825.,  45900.,  45075.,  47200.,  35300.,  37000.,  25885.,  27160.,
      31975.,  33400.,  41860.,  43760.,  51325.,  53700.,  52575.,  55000.,
      53825.,  56300.,  55075.,  57600.,  42980.,  45000.,  31405.,  32920.,
      38455.,  40120.,  50180.,  52400.,  61325.,  64100.,  62575.,  65400.,
      63825.,  66700.,  65075.,  68000.,  50660.,  53000.,  36925.,  38680.,
      26456.,  27824.,  34192.,  36016.,  41360.,  43640.,  42160.,  44480.,
      42960.,  45320.,  43760.,  46160.,  33680.,  35600.,  24248.,  25688.,
      16131.,  17184.,  20540.,  21944.,  24445.,  26200.,  24895.,  26680.,
      25345.,  27160.,  25795.,  27640.,  19484.,  20960.,  13737.,  14844.,
      49935.,  51600.,  65276.,  67496.,  79945.,  82720.,  80995.,  83800.,
      82045.,  84880.,  83095.,  85960.,  64988.,  67280.,  47613.,  49332.,
      61952.,  64208.,  80656.,  83664.,  98360.,  102120., 99560.,  103360.,
      100760., 104600., 101960., 105840., 79376.,  82480.,  57872.,  60200.,
      70855.,  73720.,  91780.,  95600.,  111325., 116100., 112575., 117400.,
      113825., 118700., 115075., 120000., 89060.,  93000.,  64525.,  67480.,
      77335.,  80440.,  100100., 104240., 121325., 126500., 122575., 127800.,
      123825., 129100., 125075., 130400., 96740.,  101000., 70045.,  73240.,
      83815.,  87160.,  108420., 112880., 131325., 136900., 132575., 138200.,
      133825., 139500., 135075., 140800., 104420., 109000., 75565.,  79000.,
      90295.,  93880.,  116740., 121520., 141325., 147300., 142575., 148600.,
      143825., 149900., 145075., 151200., 112100., 117000., 81085.,  84760.,
      60248.,  63152.,  77200.,  81072.,  92560.,  97400.,  93360.,  98240.,
      94160.,  99080.,  94960.,  99920.,  72592.,  76560.,  51896.,  54872.,
      35715.,  37920.,  45116.,  48056.,  53245.,  56920.,  53695.,  57400.,
      54145.,  57880.,  54595.,  58360.,  40988.,  44000.,  28713.,  30972.,
      92559.,  95376.,  120572., 124328., 147145., 151840., 148195., 152920.,
      149245., 154000., 150295., 155080., 117212., 121040., 85629.,  88500.,
      111104., 114896., 144144., 149200., 175160., 181480., 176360., 182720.,
      177560., 183960., 178760., 185200., 138768., 143920., 100880., 104744.,
      122695., 127480., 158340., 164720., 191325., 199300., 192575., 200600.,
      193825., 201900., 195075., 203200., 150500., 157000., 108685., 113560.,
      129175., 134200., 166660., 173360., 201325., 209700., 202575., 211000.,
      203825., 212300., 205075., 213600., 158180., 165000., 114205., 119320.,
      135655., 140920., 174980., 182000., 211325., 220100., 212575., 221400.,
      213825., 222700., 215075., 224000., 165860., 173000., 119725., 125080.,
      142135., 147640., 183300., 190640., 221325., 230500., 222575., 231800.,
      223825., 233100., 225075., 234400., 173540., 181000., 125245., 130840.,
      94040.,  98480.,  120208., 126128., 143760., 151160., 144560., 152000.,
      145360., 152840., 146160., 153680., 111504., 117520., 79544.,  84056.,
      55299.,  58656.,  69692.,  74168.,  82045.,  87640.,  82495.,  88120.,
      82945.,  88600.,  83395.,  89080.,  62492.,  67040.,  43689.,  47100.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      31325.,  32900.,  32575.,  34200.,  33825.,  35500.,  35075.,  36800.,
      41325.,  43300.,  42575.,  44600.,  43825.,  45900.,  45075.,  47200.,
      51325.,  53700.,  52575.,  55000.,  53825.,  56300.,  55075.,  57600.,
      61325.,  64100.,  62575.,  65400.,  63825.,  66700.,  65075.,  68000.,
      111325., 116100., 112575., 117400., 113825., 118700., 115075., 120000.,
      121325., 126500., 122575., 127800., 123825., 129100., 125075., 130400.,
      131325., 136900., 132575., 138200., 133825., 139500., 135075., 140800.,
      141325., 147300., 142575., 148600., 143825., 149900., 145075., 151200.,
      191325., 199300., 192575., 200600., 193825., 201900., 195075., 203200.,
      201325., 209700., 202575., 211000., 203825., 212300., 205075., 213600.,
      211325., 220100., 212575., 221400., 213825., 222700., 215075., 224000.,
      221325., 230500., 222575., 231800., 223825., 233100., 225075., 234400.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      14451.,  14622.,  15468.,  15648.,  19720.,  19960.,  21076.,  21328.,
      25175.,  25490.,  26870.,  27200.,  27245.,  27590.,  29000.,  29360.,
      29315.,  29690.,  31130.,  31520.,  31385.,  31790.,  33260.,  33680.,
      25192.,  25528.,  26692.,  27040.,  18933.,  19194.,  20058.,  20328.,
      25276.,  25600.,  26704.,  27040.,  33888.,  34336.,  35792.,  36256.,
      42540.,  43120.,  44920.,  45520.,  44900.,  45520.,  47360.,  48000.,
      47260.,  47920.,  49800.,  50480.,  49620.,  50320.,  52240.,  52960.,
      39392.,  39968.,  41488.,  42080.,  29284.,  29728.,  30856.,  31312.,
      37505.,  38030.,  39380.,  39920.,  49720.,  50440.,  52220.,  52960.,
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      54360.,  55240.,  57100.,  58000.,  40055.,  40730.,  42110.,  42800.,
      50225.,  50990.,  52580.,  53360.,  66040.,  67080.,  69180.,  70240.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      69400.,  70600.,  72780.,  74000.,  50855.,  51770.,  53390.,  54320.,
      62945.,  63950.,  65780.,  66800.,  82360.,  83720.,  86140.,  87520.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      84440.,  85960.,  88460.,  90000.,  61655.,  62810.,  64670.,  65840.,
      75665.,  76910.,  78980.,  80240.,  98680.,  100360., 103100., 104800.,
      120525., 122650., 126050., 128200., 122975., 125150., 128600., 130800.,
      125425., 127650., 131150., 133400., 127875., 130150., 133700., 136000.,
      99480.,  101320., 104140., 106000., 72455.,  73850.,  75950.,  77360.,
      51820.,  52912.,  54544.,  55648.,  66912.,  68384.,  70544.,  72032.,
      80860.,  82720.,  85400.,  87280.,  82420.,  84320.,  87040.,  88960.,
      83980.,  85920.,  88680.,  90640.,  85540.,  87520.,  90320.,  92320.,
      65760.,  67360.,  69584.,  71200.,  47284.,  48496.,  50152.,  51376.,
      31371.,  32262.,  33468.,  34368.,  39880.,  41080.,  42676.,  43888.,
      47375.,  48890.,  50870.,  52400.,  48245.,  49790.,  51800.,  53360.,
      49115.,  50690.,  52730.,  54320.,  49985.,  51590.,  53660.,  55280.,
      37672.,  38968.,  40612.,  41920.,  26493.,  27474.,  28698.,  29688.,
      98547.,  99870.,  101868., 103200., 128776., 130552., 133204., 134992.,
      157655., 159890., 163190., 165440., 159725., 161990., 165320., 167600.,
      161795., 164090., 167450., 169760., 163865., 166190., 169580., 171920.,
      128104., 129976., 132676., 134560., 93813.,  95226.,  97242.,  98664.,
      122044., 123904., 126544., 128416., 158816., 161312., 164816., 167328.,
      193580., 196720., 201080., 204240., 195940., 199120., 203520., 206720.,
      198300., 201520., 205960., 209200., 200660., 203920., 208400., 211680.,
      156128., 158752., 162320., 164960., 113764., 115744., 118408., 120400.,
      139265., 141710., 144980., 147440., 180280., 183560., 187900., 191200.,
      218525., 222650., 228050., 232200., 220975., 225150., 230600., 234800.,
      223425., 227650., 233150., 237400., 225875., 230150., 235700., 240000.,
      174680., 178120., 182540., 186000., 126455., 129050., 132350., 134960.,
      151985., 154670., 158180., 160880., 196600., 200200., 204860., 208480.,
      238125., 242650., 248450., 253000., 240575., 245150., 251000., 255600.,
      243025., 247650., 253550., 258200., 245475., 250150., 256100., 260800.,
      189720., 193480., 198220., 202000., 137255., 140090., 143630., 146480.,
      164705., 167630., 171380., 174320., 212920., 216840., 221820., 225760.,
      257725., 262650., 268850., 273800., 260175., 265150., 271400., 276400.,
      262625., 267650., 273950., 279000., 265075., 270150., 276500., 281600.,
      204760., 208840., 213900., 218000., 148055., 151130., 154910., 158000.,
      177425., 180590., 184580., 187760., 229240., 233480., 238780., 243040.,
      277325., 282650., 289250., 294600., 279775., 285150., 291800., 297200.,
      282225., 287650., 294350., 299800., 284675., 290150., 296900., 302400.,
      219800., 224200., 229580., 234000., 158855., 162170., 166190., 169520.,
      117868., 120496., 123664., 126304., 150880., 154400., 158608., 162144.,
      180700., 185120., 190360., 194800., 182260., 186720., 192000., 196480.,
      183820., 188320., 193640., 198160., 185380., 189920., 195280., 199840.,
      141536., 145184., 149456., 153120., 101044., 103792., 106984., 109744.,
      69387.,  71430.,  73788.,  75840.,  87496.,  90232.,  93364.,  96112.,
      103055., 106490., 110390., 113840., 103925., 107390., 111320., 114800.,
      104795., 108290., 112250., 115760., 105665., 109190., 113180., 116720.,
      79144.,  81976.,  85156.,  88000.,  55293.,  57426.,  59802.,  61944.,
      182643., 185118., 188268., 190752., 237832., 241144., 245332., 248656.,
      290135., 294290., 299510., 303680., 292205., 296390., 301640., 305840.,
      294275., 298490., 303770., 308000., 296345., 300590., 305900., 310160.,
      231016., 234424., 238660., 242080., 168693., 171258., 174426., 177000.,
      218812., 222208., 226384., 229792., 283744., 288288., 293840., 298400.,
      344620., 350320., 357240., 362960., 346980., 352720., 359680., 365440.,
      349340., 355120., 362120., 367920., 351700., 357520., 364560., 370400.,
      272864., 277536., 283152., 287840., 198244., 201760., 205960., 209488.,
      241025., 245390., 250580., 254960., 310840., 316680., 323580., 329440.,
      375325., 382650., 391250., 398600., 377775., 385150., 393800., 401200.,
      380225., 387650., 396350., 403800., 382675., 390150., 398900., 406400.,
      295000., 301000., 307980., 314000., 212855., 217370., 222590., 227120.,
      253745., 258350., 263780., 268400., 327160., 333320., 340540., 346720.,
      394925., 402650., 411650., 419400., 397375., 405150., 414200., 422000.,
      399825., 407650., 416750., 424600., 402275., 410150., 419300., 427200.,
      310040., 316360., 323660., 330000., 223655., 228410., 233870., 238640.,
      266465., 271310., 276980., 281840., 343480., 349960., 357500., 364000.,
      414525., 422650., 432050., 440200., 416975., 425150., 434600., 442800.,
      419425., 427650., 437150., 445400., 421875., 430150., 439700., 448000.,
      325080., 331720., 339340., 346000., 234455., 239450., 245150., 250160.,
      279185., 284270., 290180., 295280., 359800., 366600., 374460., 381280.,
      434125., 442650., 452450., 461000., 436575., 445150., 455000., 463600.,
      439025., 447650., 457550., 466200., 441475., 450150., 460100., 468800.,
      340120., 347080., 355020., 362000., 245255., 250490., 256430., 261680.,
      183916., 188080., 192784., 196960., 234848., 240416., 246672., 252256.,
      280540., 287520., 295320., 302320., 282100., 289120., 296960., 304000.,
      283660., 290720., 298600., 305680., 285220., 292320., 300240., 307360.,
      217312., 223008., 229328., 235040., 154804., 159088., 163816., 168112.,
      107403., 110598., 114108., 117312., 135112., 139384., 144052., 148336.,
      158735., 164090., 169910., 175280., 159605., 164990., 170840., 176240.,
      160475., 165890., 171770., 177200., 161345., 166790., 172700., 178160.,
      120616., 124984., 129700., 134080., 84093.,  87378.,  90906.,  94200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      61725.,  62650.,  64850.,  65800.,  64175.,  65150.,  67400.,  68400.,
      66625.,  67650.,  69950.,  71000.,  69075.,  70150.,  72500.,  73600.,
      81325.,  82650.,  85250.,  86600.,  83775.,  85150.,  87800.,  89200.,
      86225.,  87650.,  90350.,  91800.,  88675.,  90150.,  92900.,  94400.,
      100925., 102650., 105650., 107400., 103375., 105150., 108200., 110000.,
      105825., 107650., 110750., 112600., 108275., 110150., 113300., 115200.,
      120525., 122650., 126050., 128200., 122975., 125150., 128600., 130800.,
      125425., 127650., 131150., 133400., 127875., 130150., 133700., 136000.,
      218525., 222650., 228050., 232200., 220975., 225150., 230600., 234800.,
      223425., 227650., 233150., 237400., 225875., 230150., 235700., 240000.,
      238125., 242650., 248450., 253000., 240575., 245150., 251000., 255600.,
      243025., 247650., 253550., 258200., 245475., 250150., 256100., 260800.,
      257725., 262650., 268850., 273800., 260175., 265150., 271400., 276400.,
      262625., 267650., 273950., 279000., 265075., 270150., 276500., 281600.,
      277325., 282650., 289250., 294600., 279775., 285150., 291800., 297200.,
      282225., 287650., 294350., 299800., 284675., 290150., 296900., 302400.,
      375325., 382650., 391250., 398600., 377775., 385150., 393800., 401200.,
      380225., 387650., 396350., 403800., 382675., 390150., 398900., 406400.,
      394925., 402650., 411650., 419400., 397375., 405150., 414200., 422000.,
      399825., 407650., 416750., 424600., 402275., 410150., 419300., 427200.,
      414525., 422650., 432050., 440200., 416975., 425150., 434600., 442800.,
      419425., 427650., 437150., 445400., 421875., 430150., 439700., 448000.,
      434125., 442650., 452450., 461000., 436575., 445150., 455000., 463600.,
      439025., 447650., 457550., 466200., 441475., 450150., 460100., 468800.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28731.,  28902.,  29073.,  29244.,  30756.,  30936.,  31116.,  31296.,
      39200.,  39440.,  39680.,  39920.,  41900.,  42152.,  42404.,  42656.,
      50035.,  50350.,  50665.,  50980.,  53410.,  53740.,  54070.,  54400.,
      54145.,  54490.,  54835.,  55180.,  57640.,  58000.,  58360.,  58720.,
      58255.,  58630.,  59005.,  59380.,  61870.,  62260.,  62650.,  63040.,
      62365.,  62770.,  63175.,  63580.,  66100.,  66520.,  66940.,  67360.,
      50048.,  50384.,  50720.,  51056.,  53036.,  53384.,  53732.,  54080.,
      37605.,  37866.,  38127.,  38388.,  39846.,  40116.,  40386.,  40656.,
      50228.,  50552.,  50876.,  51200.,  53072.,  53408.,  53744.,  54080.,
      67328.,  67776.,  68224.,  68672.,  71120.,  71584.,  72048.,  72512.,
      84500.,  85080.,  85660.,  86240.,  89240.,  89840.,  90440.,  91040.,
      89180.,  89800.,  90420.,  91040.,  94080.,  94720.,  95360.,  96000.,
      93860.,  94520.,  95180.,  95840.,  98920.,  99600.,  100280., 100960.,
      98540.,  99240.,  99940.,  100640., 103760., 104480., 105200., 105920.,
      78208.,  78784.,  79360.,  79936.,  82384.,  82976.,  83568.,  84160.,
      58124.,  58568.,  59012.,  59456.,  61256.,  61712.,  62168.,  62624.,
      74485.,  75010.,  75535.,  76060.,  78220.,  78760.,  79300.,  79840.,
      98720.,  99440.,  100160., 100880., 103700., 104440., 105180., 105920.,
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      107840., 108720., 109600., 110480., 113300., 114200., 115100., 116000.,
      79435.,  80110.,  80785.,  81460.,  83530.,  84220.,  84910.,  85600.,
      99685.,  100450., 101215., 101980., 104380., 105160., 105940., 106720.,
      131040., 132080., 133120., 134160., 137300., 138360., 139420., 140480.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      137600., 138800., 140000., 141200., 144340., 145560., 146780., 148000.,
      100795., 101710., 102625., 103540., 105850., 106780., 107710., 108640.,
      124885., 125890., 126895., 127900., 130540., 131560., 132580., 133600.,
      163360., 164720., 166080., 167440., 170900., 172280., 173660., 175040.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      167360., 168880., 170400., 171920., 175380., 176920., 178460., 180000.,
      122155., 123310., 124465., 125620., 128170., 129340., 130510., 131680.,
      150085., 151330., 152575., 153820., 156700., 157960., 159220., 160480.,
      195680., 197360., 199040., 200720., 204500., 206200., 207900., 209600.,
      238925., 241050., 243175., 245300., 249950., 252100., 254250., 256400.,
      243775., 245950., 248125., 250300., 255000., 257200., 259400., 261600.,
      248625., 250850., 253075., 255300., 260050., 262300., 264550., 266800.,
      253475., 255750., 258025., 260300., 265100., 267400., 269700., 272000.,
      197120., 198960., 200800., 202640., 206420., 208280., 210140., 212000.,
      143515., 144910., 146305., 147700., 150490., 151900., 153310., 154720.,
      102548., 103640., 104732., 105824., 107984., 109088., 110192., 111296.,
      132352., 133824., 135296., 136768., 139600., 141088., 142576., 144064.,
      159860., 161720., 163580., 165440., 168920., 170800., 172680., 174560.,
      162940., 164840., 166740., 168640., 172160., 174080., 176000., 177920.,
      166020., 167960., 169900., 171840., 175400., 177360., 179320., 181280.,
      169100., 171080., 173060., 175040., 178640., 180640., 182640., 184640.,
      129920., 131520., 133120., 134720., 137552., 139168., 140784., 142400.,
      93356.,  94568.,  95780.,  96992.,  99080.,  100304., 101528., 102752.,
      61851.,  62742.,  63633.,  64524.,  66036.,  66936.,  67836.,  68736.,
      78560.,  79760.,  80960.,  82160.,  84140.,  85352.,  86564.,  87776.,
      93235.,  94750.,  96265.,  97780.,  100210., 101740., 103270., 104800.,
      94945.,  96490.,  98035.,  99580.,  102040., 103600., 105160., 106720.,
      96655.,  98230.,  99805.,  101380., 103870., 105460., 107050., 108640.,
      98365.,  99970.,  101575., 103180., 105700., 107320., 108940., 110560.,
      74048.,  75344.,  76640.,  77936.,  79916.,  81224.,  82532.,  83840.,
      52005.,  52986.,  53967.,  54948.,  56406.,  57396.,  58386.,  59376.,
      195771., 197094., 198417., 199740., 202404., 203736., 205068., 206400.,
      255776., 257552., 259328., 261104., 264620., 266408., 268196., 269984.,
      313075., 315310., 317545., 319780., 324130., 326380., 328630., 330880.,
      317185., 319450., 321715., 323980., 328360., 330640., 332920., 335200.,
      321295., 323590., 325885., 328180., 332590., 334900., 337210., 339520.,
      325405., 327730., 330055., 332380., 336820., 339160., 341500., 343840.,
      254336., 256208., 258080., 259952., 263468., 265352., 267236., 269120.,
      186213., 187626., 189039., 190452., 193062., 194484., 195906., 197328.,
      242228., 244088., 245948., 247808., 251216., 253088., 254960., 256832.,
      315136., 317632., 320128., 322624., 327120., 329632., 332144., 334656.,
      384020., 387160., 390300., 393440., 399000., 402160., 405320., 408480.,
      388700., 391880., 395060., 398240., 403840., 407040., 410240., 413440.,
      393380., 396600., 399820., 403040., 408680., 411920., 415160., 418400.,
      398060., 401320., 404580., 407840., 413520., 416800., 420080., 423360.,
      309632., 312256., 314880., 317504., 322000., 324640., 327280., 329920.,
      225548., 227528., 229508., 231488., 234824., 236816., 238808., 240800.,
      276085., 278530., 280975., 283420., 287500., 289960., 292420., 294880.,
      357280., 360560., 363840., 367120., 372500., 375800., 379100., 382400.,
      432925., 437050., 441175., 445300., 451950., 456100., 460250., 464400.,
      437775., 441950., 446125., 450300., 457000., 461200., 465400., 469600.,
      442625., 446850., 451075., 455300., 462050., 466300., 470550., 474800.,
      447475., 451750., 456025., 460300., 467100., 471400., 475700., 480000.,
      345920., 349360., 352800., 356240., 361620., 365080., 368540., 372000.,
      250315., 252910., 255505., 258100., 262090., 264700., 267310., 269920.,
      301285., 303970., 306655., 309340., 313660., 316360., 319060., 321760.,
      389600., 393200., 396800., 400400., 406100., 409720., 413340., 416960.,
      471725., 476250., 480775., 485300., 492350., 496900., 501450., 506000.,
      476575., 481150., 485725., 490300., 497400., 502000., 506600., 511200.,
      481425., 486050., 490675., 495300., 502450., 507100., 511750., 516400.,
      486275., 490950., 495625., 500300., 507500., 512200., 516900., 521600.,
      375680., 379440., 383200., 386960., 392660., 396440., 400220., 404000.,
      271675., 274510., 277345., 280180., 284410., 287260., 290110., 292960.,
      326485., 329410., 332335., 335260., 339820., 342760., 345700., 348640.,
      421920., 425840., 429760., 433680., 439700., 443640., 447580., 451520.,
      510525., 515450., 520375., 525300., 532750., 537700., 542650., 547600.,
      515375., 520350., 525325., 530300., 537800., 542800., 547800., 552800.,
      520225., 525250., 530275., 535300., 542850., 547900., 552950., 558000.,
      525075., 530150., 535225., 540300., 547900., 553000., 558100., 563200.,
      405440., 409520., 413600., 417680., 423700., 427800., 431900., 436000.,
      293035., 296110., 299185., 302260., 306730., 309820., 312910., 316000.,
      351685., 354850., 358015., 361180., 365980., 369160., 372340., 375520.,
      454240., 458480., 462720., 466960., 473300., 477560., 481820., 486080.,
      549325., 554650., 559975., 565300., 573150., 578500., 583850., 589200.,
      554175., 559550., 564925., 570300., 578200., 583600., 589000., 594400.,
      559025., 564450., 569875., 575300., 583250., 588700., 594150., 599600.,
      563875., 569350., 574825., 580300., 588300., 593800., 599300., 604800.,
      435200., 439600., 444000., 448400., 454740., 459160., 463580., 468000.,
      314395., 317710., 321025., 324340., 329050., 332380., 335710., 339040.,
      233108., 235736., 238364., 240992., 244688., 247328., 249968., 252608.,
      298240., 301760., 305280., 308800., 313680., 317216., 320752., 324288.,
      356980., 361400., 365820., 370240., 376280., 380720., 385160., 389600.,
      360060., 364520., 368980., 373440., 379520., 384000., 388480., 392960.,
      363140., 367640., 372140., 376640., 382760., 387280., 391800., 396320.,
      366220., 370760., 375300., 379840., 386000., 390560., 395120., 399680.,
      279424., 283072., 286720., 290368., 295248., 298912., 302576., 306240.,
      199340., 202088., 204836., 207584., 211208., 213968., 216728., 219488.,
      136731., 138774., 140817., 142860., 145524., 147576., 149628., 151680.,
      172256., 174992., 177728., 180464., 183980., 186728., 189476., 192224.,
      202675., 206110., 209545., 212980., 217330., 220780., 224230., 227680.,
      204385., 207850., 211315., 214780., 219160., 222640., 226120., 229600.,
      206095., 209590., 213085., 216580., 220990., 224500., 228010., 231520.,
      207805., 211330., 214855., 218380., 222820., 226360., 229900., 233440.,
      155456., 158288., 161120., 163952., 167468., 170312., 173156., 176000.,
      108453., 110586., 112719., 114852., 117462., 119604., 121746., 123888.,
      362811., 365286., 367761., 370236., 374052., 376536., 379020., 381504.,
      472352., 475664., 478976., 482288., 487340., 490664., 493988., 497312.,
      576115., 580270., 584425., 588580., 594850., 599020., 603190., 607360.,
      580225., 584410., 588595., 592780., 599080., 603280., 607480., 611680.,
      584335., 588550., 592765., 596980., 603310., 607540., 611770., 616000.,
      588445., 592690., 596935., 601180., 607540., 611800., 616060., 620320.,
      458624., 462032., 465440., 468848., 473900., 477320., 480740., 484160.,
      334821., 337386., 339951., 342516., 346278., 348852., 351426., 354000.,
      434228., 437624., 441020., 444416., 449360., 452768., 456176., 459584.,
      562944., 567488., 572032., 576576., 583120., 587680., 592240., 596800.,
      683540., 689240., 694940., 700640., 708760., 714480., 720200., 725920.,
      688220., 693960., 699700., 705440., 713600., 719360., 725120., 730880.,
      692900., 698680., 704460., 710240., 718440., 724240., 730040., 735840.,
      697580., 703400., 709220., 715040., 723280., 729120., 734960., 740800.,
      541056., 545728., 550400., 555072., 561616., 566304., 570992., 575680.,
      392972., 396488., 400004., 403520., 408392., 411920., 415448., 418976.,
      477685., 482050., 486415., 490780., 496780., 501160., 505540., 509920.,
      615840., 621680., 627520., 633360., 641300., 647160., 653020., 658880.,
      743325., 750650., 757975., 765300., 775150., 782500., 789850., 797200.,
      748175., 755550., 762925., 770300., 780200., 787600., 795000., 802400.,
      753025., 760450., 767875., 775300., 785250., 792700., 800150., 807600.,
      757875., 765350., 772825., 780300., 790300., 797800., 805300., 812800.,
      584000., 590000., 596000., 602000., 609940., 615960., 621980., 628000.,
      421195., 425710., 430225., 434740., 440650., 445180., 449710., 454240.,
      502885., 507490., 512095., 516700., 522940., 527560., 532180., 536800.,
      648160., 654320., 660480., 666640., 674900., 681080., 687260., 693440.,
      782125., 789850., 797575., 805300., 815550., 823300., 831050., 838800.,
      786975., 794750., 802525., 810300., 820600., 828400., 836200., 844000.,
      791825., 799650., 807475., 815300., 825650., 833500., 841350., 849200.,
      796675., 804550., 812425., 820300., 830700., 838600., 846500., 854400.,
      613760., 620080., 626400., 632720., 640980., 647320., 653660., 660000.,
      442555., 447310., 452065., 456820., 462970., 467740., 472510., 477280.,
      528085., 532930., 537775., 542620., 549100., 553960., 558820., 563680.,
      680480., 686960., 693440., 699920., 708500., 715000., 721500., 728000.,
      820925., 829050., 837175., 845300., 855950., 864100., 872250., 880400.,
      825775., 833950., 842125., 850300., 861000., 869200., 877400., 885600.,
      830625., 838850., 847075., 855300., 866050., 874300., 882550., 890800.,
      835475., 843750., 852025., 860300., 871100., 879400., 887700., 896000.,
      643520., 650160., 656800., 663440., 672020., 678680., 685340., 692000.,
      463915., 468910., 473905., 478900., 485290., 490300., 495310., 500320.,
      553285., 558370., 563455., 568540., 575260., 580360., 585460., 590560.,
      712800., 719600., 726400., 733200., 742100., 748920., 755740., 762560.,
      859725., 868250., 876775., 885300., 896350., 904900., 913450., 922000.,
      864575., 873150., 881725., 890300., 901400., 910000., 918600., 927200.,
      869425., 878050., 886675., 895300., 906450., 915100., 923750., 932400.,
      874275., 882950., 891625., 900300., 911500., 920200., 928900., 937600.,
      673280., 680240., 687200., 694160., 703060., 710040., 717020., 724000.,
      485275., 490510., 495745., 500980., 507610., 512860., 518110., 523360.,
      363668., 367832., 371996., 376160., 381392., 385568., 389744., 393920.,
      464128., 469696., 475264., 480832., 487760., 493344., 498928., 504512.,
      554100., 561080., 568060., 575040., 583640., 590640., 597640., 604640.,
      557180., 564200., 571220., 578240., 586880., 593920., 600960., 608000.,
      560260., 567320., 574380., 581440., 590120., 597200., 604280., 611360.,
      563340., 570440., 577540., 584640., 593360., 600480., 607600., 614720.,
      428928., 434624., 440320., 446016., 452944., 458656., 464368., 470080.,
      305324., 309608., 313892., 318176., 323336., 327632., 331928., 336224.,
      211611., 214806., 218001., 221196., 225012., 228216., 231420., 234624.,
      265952., 270224., 274496., 278768., 283820., 288104., 292388., 296672.,
      312115., 317470., 322825., 328180., 334450., 339820., 345190., 350560.,
      313825., 319210., 324595., 329980., 336280., 341680., 347080., 352480.,
      315535., 320950., 326365., 331780., 338110., 343540., 348970., 354400.,
      317245., 322690., 328135., 333580., 339940., 345400., 350860., 356320.,
      236864., 241232., 245600., 249968., 255020., 259400., 263780., 268160.,
      164901., 168186., 171471., 174756., 178518., 181812., 185106., 188400.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122525., 123450., 124375., 125300., 128750., 129700., 130650., 131600.,
      127375., 128350., 129325., 130300., 133800., 134800., 135800., 136800.,
      132225., 133250., 134275., 135300., 138850., 139900., 140950., 142000.,
      137075., 138150., 139225., 140300., 143900., 145000., 146100., 147200.,
      161325., 162650., 163975., 165300., 169150., 170500., 171850., 173200.,
      166175., 167550., 168925., 170300., 174200., 175600., 177000., 178400.,
      171025., 172450., 173875., 175300., 179250., 180700., 182150., 183600.,
      175875., 177350., 178825., 180300., 184300., 185800., 187300., 188800.,
      200125., 201850., 203575., 205300., 209550., 211300., 213050., 214800.,
      204975., 206750., 208525., 210300., 214600., 216400., 218200., 220000.,
      209825., 211650., 213475., 215300., 219650., 221500., 223350., 225200.,
      214675., 216550., 218425., 220300., 224700., 226600., 228500., 230400.,
      238925., 241050., 243175., 245300., 249950., 252100., 254250., 256400.,
      243775., 245950., 248125., 250300., 255000., 257200., 259400., 261600.,
      248625., 250850., 253075., 255300., 260050., 262300., 264550., 266800.,
      253475., 255750., 258025., 260300., 265100., 267400., 269700., 272000.,
      432925., 437050., 441175., 445300., 451950., 456100., 460250., 464400.,
      437775., 441950., 446125., 450300., 457000., 461200., 465400., 469600.,
      442625., 446850., 451075., 455300., 462050., 466300., 470550., 474800.,
      447475., 451750., 456025., 460300., 467100., 471400., 475700., 480000.,
      471725., 476250., 480775., 485300., 492350., 496900., 501450., 506000.,
      476575., 481150., 485725., 490300., 497400., 502000., 506600., 511200.,
      481425., 486050., 490675., 495300., 502450., 507100., 511750., 516400.,
      486275., 490950., 495625., 500300., 507500., 512200., 516900., 521600.,
      510525., 515450., 520375., 525300., 532750., 537700., 542650., 547600.,
      515375., 520350., 525325., 530300., 537800., 542800., 547800., 552800.,
      520225., 525250., 530275., 535300., 542850., 547900., 552950., 558000.,
      525075., 530150., 535225., 540300., 547900., 553000., 558100., 563200.,
      549325., 554650., 559975., 565300., 573150., 578500., 583850., 589200.,
      554175., 559550., 564925., 570300., 578200., 583600., 589000., 594400.,
      559025., 564450., 569875., 575300., 583250., 588700., 594150., 599600.,
      563875., 569350., 574825., 580300., 588300., 593800., 599300., 604800.,
      743325., 750650., 757975., 765300., 775150., 782500., 789850., 797200.,
      748175., 755550., 762925., 770300., 780200., 787600., 795000., 802400.,
      753025., 760450., 767875., 775300., 785250., 792700., 800150., 807600.,
      757875., 765350., 772825., 780300., 790300., 797800., 805300., 812800.,
      782125., 789850., 797575., 805300., 815550., 823300., 831050., 838800.,
      786975., 794750., 802525., 810300., 820600., 828400., 836200., 844000.,
      791825., 799650., 807475., 815300., 825650., 833500., 841350., 849200.,
      796675., 804550., 812425., 820300., 830700., 838600., 846500., 854400.,
      820925., 829050., 837175., 845300., 855950., 864100., 872250., 880400.,
      825775., 833950., 842125., 850300., 861000., 869200., 877400., 885600.,
      830625., 838850., 847075., 855300., 866050., 874300., 882550., 890800.,
      835475., 843750., 852025., 860300., 871100., 879400., 887700., 896000.,
      859725., 868250., 876775., 885300., 896350., 904900., 913450., 922000.,
      864575., 873150., 881725., 890300., 901400., 910000., 918600., 927200.,
      869425., 878050., 886675., 895300., 906450., 915100., 923750., 932400.,
      874275., 882950., 891625., 900300., 911500., 920200., 928900., 937600.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      28245.,  29244.,  30261.,  31296.,  38588.,  39920.,  41276.,  42656.,
      49315.,  50980.,  52675.,  54400.,  53455.,  55180.,  56935.,  58720.,
      57595.,  59380.,  61195.,  63040.,  61735.,  63580.,  65455.,  67360.,
      49580.,  51056.,  52556.,  54080.,  37281.,  38388.,  39513.,  40656.,
      49796.,  51200.,  52628.,  54080.,  66800.,  68672.,  70576.,  72512.,
      83900.,  86240.,  88620.,  91040.,  88620.,  91040.,  93500.,  96000.,
      93340.,  95840.,  98380.,  100960., 98060.,  100640., 103260., 105920.,
      77872.,  79936.,  82032.,  84160.,  57908.,  59456.,  61028.,  62624.,
      74215.,  76060.,  77935.,  79840.,  98420.,  100880., 103380., 105920.,
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      107780., 110480., 113220., 116000., 79435.,  81460.,  83515.,  85600.,
      99655.,  101980., 104335., 106720., 131060., 134160., 137300., 140480.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      137860., 141200., 144580., 148000., 101035., 103540., 106075., 108640.,
      125095., 127900., 130735., 133600., 163700., 167440., 171220., 175040.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      167940., 171920., 175940., 180000., 122635., 125620., 128635., 131680.,
      150535., 153820., 157135., 160480., 196340., 200720., 205140., 209600.,
      239825., 245300., 250825., 256400., 244725., 250300., 255925., 261600.,
      249625., 255300., 261025., 266800., 254525., 260300., 266125., 272000.,
      198020., 202640., 207300., 212000., 144235., 147700., 151195., 154720.,
      103124., 105824., 108548., 111296., 133168., 136768., 140400., 144064.,
      160940., 165440., 169980., 174560., 164060., 168640., 173260., 177920.,
      167180., 171840., 176540., 181280., 170300., 175040., 179820., 184640.,
      130928., 134720., 138544., 142400., 94148.,  96992.,  99860.,  102752.,
      62445.,  64524.,  66621.,  68736.,  79388.,  82160.,  84956.,  87776.,
      94315.,  97780.,  101275., 104800., 96055.,  99580.,  103135., 106720.,
      97795.,  101380., 104995., 108640., 99535.,  103180., 106855., 110560.,
      75020.,  77936.,  80876.,  83840.,  52761.,  54948.,  57153.,  59376.,
      196437., 199740., 203061., 206400., 256700., 261104., 265532., 269984.,
      314275., 319780., 325315., 330880., 318415., 323980., 329575., 335200.,
      322555., 328180., 333835., 339520., 326695., 332380., 338095., 343840.,
      255404., 259952., 264524., 269120., 187041., 190452., 193881., 197328.,
      243332., 247808., 252308., 256832., 316656., 322624., 328624., 334656.,
      385980., 393440., 400940., 408480., 390700., 398240., 405820., 413440.,
      395420., 403040., 410700., 418400., 400140., 407840., 415580., 423360.,
      311344., 317504., 323696., 329920., 226868., 231488., 236132., 240800.,
      277735., 283420., 289135., 294880., 359540., 367120., 374740., 382400.,
      435825., 445300., 454825., 464400., 440725., 450300., 459925., 469600.,
      445625., 455300., 465025., 474800., 450525., 460300., 470125., 480000.,
      348420., 356240., 364100., 372000., 252235., 258100., 263995., 269920.,
      303175., 309340., 315535., 321760., 392180., 400400., 408660., 416960.,
      475025., 485300., 495625., 506000., 479925., 490300., 500725., 511200.,
      484825., 495300., 505825., 516400., 489725., 500300., 510925., 521600.,
      378500., 386960., 395460., 404000., 273835., 280180., 286555., 292960.,
      328615., 335260., 341935., 348640., 424820., 433680., 442580., 451520.,
      514225., 525300., 536425., 547600., 519125., 530300., 541525., 552800.,
      524025., 535300., 546625., 558000., 528925., 540300., 551725., 563200.,
      408580., 417680., 426820., 436000., 295435., 302260., 309115., 316000.,
      354055., 361180., 368335., 375520., 457460., 466960., 476500., 486080.,
      553425., 565300., 577225., 589200., 558325., 570300., 582325., 594400.,
      563225., 575300., 587425., 599600., 568125., 580300., 592525., 604800.,
      438660., 448400., 458180., 468000., 317035., 324340., 331675., 339040.,
      235220., 240992., 246788., 252608., 301104., 308800., 316528., 324288.,
      360620., 370240., 379900., 389600., 363740., 373440., 383180., 392960.,
      366860., 376640., 386460., 396320., 369980., 379840., 389740., 399680.,
      282480., 290368., 298288., 306240., 201668., 207584., 213524., 219488.,
      138477., 142860., 147261., 151680., 174620., 180464., 186332., 192224.,
      205675., 212980., 220315., 227680., 207415., 214780., 222175., 229600.,
      209155., 216580., 224035., 231520., 210895., 218380., 225895., 233440.,
      157964., 163952., 169964., 176000., 110361., 114852., 119361., 123888.,
      364629., 370236., 375861., 381504., 474812., 482288., 489788., 497312.,
      579235., 588580., 597955., 607360., 583375., 592780., 602215., 611680.,
      587515., 596980., 606475., 616000., 591655., 601180., 610735., 620320.,
      461228., 468848., 476492., 484160., 336801., 342516., 348249., 354000.,
      436868., 444416., 451988., 459584., 566512., 576576., 586672., 596800.,
      688060., 700640., 713260., 725920., 692780., 705440., 718140., 730880.,
      697500., 710240., 723020., 735840., 702220., 715040., 727900., 740800.,
      544816., 555072., 565360., 575680., 395828., 403520., 411236., 418976.,
      481255., 490780., 500335., 509920., 620660., 633360., 646100., 658880.,
      749425., 765300., 781225., 797200., 754325., 770300., 786325., 802400.,
      759225., 775300., 791425., 807600., 764125., 780300., 796525., 812800.,
      589060., 602000., 614980., 628000., 425035., 434740., 444475., 454240.,
      506695., 516700., 526735., 536800., 653300., 666640., 680020., 693440.,
      788625., 805300., 822025., 838800., 793525., 810300., 827125., 844000.,
      798425., 815300., 832225., 849200., 803325., 820300., 837325., 854400.,
      619140., 632720., 646340., 660000., 446635., 456820., 467035., 477280.,
      532135., 542620., 553135., 563680., 685940., 699920., 713940., 728000.,
      827825., 845300., 862825., 880400., 832725., 850300., 867925., 885600.,
      837625., 855300., 873025., 890800., 842525., 860300., 878125., 896000.,
      649220., 663440., 677700., 692000., 468235., 478900., 489595., 500320.,
      557575., 568540., 579535., 590560., 718580., 733200., 747860., 762560.,
      867025., 885300., 903625., 922000., 871925., 890300., 908725., 927200.,
      876825., 895300., 913825., 932400., 881725., 900300., 918925., 937600.,
      679300., 694160., 709060., 724000., 489835., 500980., 512155., 523360.,
      367316., 376160., 385028., 393920., 469040., 480832., 492656., 504512.,
      560300., 575040., 589820., 604640., 563420., 578240., 593100., 608000.,
      566540., 581440., 596380., 611360., 569660., 584640., 599660., 614720.,
      434032., 446016., 458032., 470080., 309188., 318176., 327188., 336224.,
      214509., 221196., 227901., 234624., 269852., 278768., 287708., 296672.,
      317035., 328180., 339355., 350560., 318775., 329980., 341215., 352480.,
      320515., 331780., 343075., 354400., 322255., 333580., 344935., 356320.,
      240908., 249968., 259052., 268160., 167961., 174756., 181569., 188400.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      122225., 125300., 128425., 131600., 127125., 130300., 133525., 136800.,
      132025., 135300., 138625., 142000., 136925., 140300., 143725., 147200.,
      161425., 165300., 169225., 173200., 166325., 170300., 174325., 178400.,
      171225., 175300., 179425., 183600., 176125., 180300., 184525., 188800.,
      200625., 205300., 210025., 214800., 205525., 210300., 215125., 220000.,
      210425., 215300., 220225., 225200., 215325., 220300., 225325., 230400.,
      239825., 245300., 250825., 256400., 244725., 250300., 255925., 261600.,
      249625., 255300., 261025., 266800., 254525., 260300., 266125., 272000.,
      435825., 445300., 454825., 464400., 440725., 450300., 459925., 469600.,
      445625., 455300., 465025., 474800., 450525., 460300., 470125., 480000.,
      475025., 485300., 495625., 506000., 479925., 490300., 500725., 511200.,
      484825., 495300., 505825., 516400., 489725., 500300., 510925., 521600.,
      514225., 525300., 536425., 547600., 519125., 530300., 541525., 552800.,
      524025., 535300., 546625., 558000., 528925., 540300., 551725., 563200.,
      553425., 565300., 577225., 589200., 558325., 570300., 582325., 594400.,
      563225., 575300., 587425., 599600., 568125., 580300., 592525., 604800.,
      749425., 765300., 781225., 797200., 754325., 770300., 786325., 802400.,
      759225., 775300., 791425., 807600., 764125., 780300., 796525., 812800.,
      788625., 805300., 822025., 838800., 793525., 810300., 827125., 844000.,
      798425., 815300., 832225., 849200., 803325., 820300., 837325., 854400.,
      827825., 845300., 862825., 880400., 832725., 850300., 867925., 885600.,
      837625., 855300., 873025., 890800., 842525., 860300., 878125., 896000.,
      867025., 885300., 903625., 922000., 871925., 890300., 908725., 927200.,
      876825., 895300., 913825., 932400., 881725., 900300., 918925., 937600.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56157.,   56490.,   58146.,   58488.,   60171.,   60522.,   62232.,
      62592.,   76708.,   77176.,   79360.,   79840.,   82060.,   82552.,
      84808.,   85312.,   98015.,   98630.,   101330.,  101960.,  104705.,
      105350.,  108140.,  108800.,  106235.,  106910.,  109670.,  110360.,
      113165.,  113870.,  116720.,  117440.,  114455.,  115190.,  118010.,
      118760.,  121625.,  122390.,  125300.,  126080.,  122675.,  123470.,
      126350.,  127160.,  130085.,  130910.,  133880.,  134720.,  98500.,
      99160.,   101440.,  102112.,  104428.,  105112.,  107464.,  108160.,
      74049.,   74562.,   76254.,   76776.,   78495.,   79026.,   80772.,
      81312.,   98956.,   99592.,   101752.,  102400.,  104596.,  105256.,
      107488.,  108160.,  132720.,  133600.,  136448.,  137344.,  140240.,
      141152.,  144096.,  145024.,  166660.,  167800.,  171320.,  172480.,
      176060.,  177240.,  180880.,  182080.,  176020.,  177240.,  180840.,
      182080.,  185740.,  187000.,  190720.,  192000.,  185380.,  186680.,
      190360.,  191680.,  195420.,  196760.,  200560.,  201920.,  194740.,
      196120.,  199880.,  201280.,  205100.,  206520.,  210400.,  211840.,
      154608.,  155744.,  158720.,  159872.,  162896.,  164064.,  167136.,
      168320.,  114940.,  115816.,  118024.,  118912.,  121156.,  122056.,
      124336.,  125248.,  147395.,  148430.,  151070.,  152120.,  154805.,
      155870.,  158600.,  159680.,  195420.,  196840.,  200320.,  201760.,
      205300.,  206760.,  210360.,  211840.,  242625.,  244450.,  248750.,
      250600.,  254975.,  256850.,  261300.,  263200.,  252325.,  254250.,
      258650.,  260600.,  265075.,  267050.,  271600.,  273600.,  262025.,
      264050.,  268550.,  270600.,  275175.,  277250.,  281900.,  284000.,
      271725.,  273850.,  278450.,  280600.,  285275.,  287450.,  292200.,
      294400.,  213820.,  215560.,  219200.,  220960.,  224660.,  226440.,
      230200.,  232000.,  157535.,  158870.,  161570.,  162920.,  165665.,
      167030.,  169820.,  171200.,  197795.,  199310.,  202430.,  203960.,
      207125.,  208670.,  211880.,  213440.,  260060.,  262120.,  266240.,
      268320.,  272500.,  274600.,  278840.,  280960.,  320225.,  322850.,
      327950.,  330600.,  335775.,  338450.,  343700.,  346400.,  329925.,
      332650.,  337850.,  340600.,  345875.,  348650.,  354000.,  356800.,
      339625.,  342450.,  347750.,  350600.,  355975.,  358850.,  364300.,
      367200.,  349325.,  352250.,  357650.,  360600.,  366075.,  369050.,
      374600.,  377600.,  273340.,  275720.,  280000.,  282400.,  286740.,
      289160.,  293560.,  296000.,  200255.,  202070.,  205250.,  207080.,
      210305.,  212150.,  215420.,  217280.,  248195.,  250190.,  253790.,
      255800.,  259445.,  261470.,  265160.,  267200.,  324700.,  327400.,
      332160.,  334880.,  339700.,  342440.,  347320.,  350080.,  397825.,
      401250.,  407150.,  410600.,  416575.,  420050.,  426100.,  429600.,
      407525.,  411050.,  417050.,  420600.,  426675.,  430250.,  436400.,
      440000.,  417225.,  420850.,  426950.,  430600.,  436775.,  440450.,
      446700.,  450400.,  426925.,  430650.,  436850.,  440600.,  446875.,
      450650.,  457000.,  460800.,  332860.,  335880.,  340800.,  343840.,
      348820.,  351880.,  356920.,  360000.,  242975.,  245270.,  248930.,
      251240.,  254945.,  257270.,  261020.,  263360.,  298595.,  301070.,
      305150.,  307640.,  311765.,  314270.,  318440.,  320960.,  389340.,
      392680.,  398080.,  401440.,  406900.,  410280.,  415800.,  419200.,
      475425.,  479650.,  486350.,  490600.,  497375.,  501650.,  508500.,
      512800.,  485125.,  489450.,  496250.,  500600.,  507475.,  511850.,
      518800.,  523200.,  494825.,  499250.,  506150.,  510600.,  517575.,
      522050.,  529100.,  533600.,  504525.,  509050.,  516050.,  520600.,
      527675.,  532250.,  539400.,  544000.,  392380.,  396040.,  401600.,
      405280.,  410900.,  414600.,  420280.,  424000.,  285695.,  288470.,
      292610.,  295400.,  299585.,  302390.,  306620.,  309440.,  204076.,
      206248.,  209464.,  211648.,  214900.,  217096.,  220384.,  222592.,
      263408.,  266336.,  270592.,  273536.,  277840.,  280800.,  285152.,
      288128.,  318180.,  321880.,  327160.,  330880.,  336220.,  339960.,
      345360.,  349120.,  324340.,  328120.,  333480.,  337280.,  342700.,
      346520.,  352000.,  355840.,  330500.,  334360.,  339800.,  343680.,
      349180.,  353080.,  358640.,  362560.,  336660.,  340600.,  346120.,
      350080.,  355660.,  359640.,  365280.,  369280.,  258672.,  261856.,
      266240.,  269440.,  273872.,  277088.,  281568.,  284800.,  185884.,
      188296.,  191560.,  193984.,  197284.,  199720.,  203056.,  205504.,
      123117.,  124890.,  127266.,  129048.,  131451.,  133242.,  135672.,
      137472.,  156388.,  158776.,  161920.,  164320.,  167500.,  169912.,
      173128.,  175552.,  185615.,  188630.,  192530.,  195560.,  199505.,
      202550.,  206540.,  209600.,  189035.,  192110.,  196070.,  199160.,
      203165.,  206270.,  210320.,  213440.,  192455.,  195590.,  199610.,
      202760.,  206825.,  209990.,  214100.,  217280.,  195875.,  199070.,
      203150.,  206360.,  210485.,  213710.,  217880.,  221120.,  147460.,
      150040.,  153280.,  155872.,  159148.,  161752.,  165064.,  167680.,
      103569.,  105522.,  107934.,  109896.,  112335.,  114306.,  116772.,
      118752.,  390237.,  392874.,  396834.,  399480.,  403467.,  406122.,
      410136.,  412800.,  509860.,  513400.,  518656.,  522208.,  527500.,
      531064.,  536392.,  539968.,  624095.,  628550.,  635090.,  639560.,
      646145.,  650630.,  657260.,  661760.,  632315.,  636830.,  643430.,
      647960.,  654605.,  659150.,  665840.,  670400.,  640535.,  645110.,
      651770.,  656360.,  663065.,  667670.,  674420.,  679040.,  648755.,
      653390.,  660110.,  664760.,  671525.,  676190.,  683000.,  687680.,
      507076.,  510808.,  516160.,  519904.,  525292.,  529048.,  534472.,
      538240.,  371265.,  374082.,  378078.,  380904.,  384927.,  387762.,
      391812.,  394656.,  482956.,  486664.,  491896.,  495616.,  500884.,
      504616.,  509920.,  513664.,  628336.,  633312.,  640256.,  645248.,
      652240.,  657248.,  664288.,  669312.,  765700.,  771960.,  780600.,
      786880.,  795580.,  801880.,  810640.,  816960.,  775060.,  781400.,
      790120.,  796480.,  805260.,  811640.,  820480.,  826880.,  784420.,
      790840.,  799640.,  806080.,  814940.,  821400.,  830320.,  836800.,
      793780.,  800280.,  809160.,  815680.,  824620.,  831160.,  840160.,
      846720.,  617456.,  622688.,  629760.,  635008.,  642128.,  647392.,
      654560.,  659840.,  449788.,  453736.,  459016.,  462976.,  468292.,
      472264.,  477616.,  481600.,  550595.,  555470.,  561950.,  566840.,
      573365.,  578270.,  584840.,  589760.,  712540.,  719080.,  727680.,
      734240.,  742900.,  749480.,  758200.,  764800.,  863425.,  871650.,
      882350.,  890600.,  901375.,  909650.,  920500.,  928800.,  873125.,
      881450.,  892250.,  900600.,  911475.,  919850.,  930800.,  939200.,
      882825.,  891250.,  902150.,  910600.,  921575.,  930050.,  941100.,
      949600.,  892525.,  901050.,  912050.,  920600.,  931675.,  940250.,
      951400.,  960000.,  689980.,  696840.,  705600.,  712480.,  721300.,
      728200.,  737080.,  744000.,  499295.,  504470.,  511010.,  516200.,
      522785.,  527990.,  534620.,  539840.,  600995.,  606350.,  613310.,
      618680.,  625685.,  631070.,  638120.,  643520.,  777180.,  784360.,
      793600.,  800800.,  810100.,  817320.,  826680.,  833920.,  941025.,
      950050.,  961550.,  970600.,  982175.,  991250.,  1002900., 1012000.,
      950725.,  959850.,  971450.,  980600.,  992275.,  1001450., 1013200.,
      1022400., 960425.,  969650.,  981350.,  990600.,  1002375., 1011650.,
      1023500., 1032800., 970125.,  979450.,  991250.,  1000600., 1012475.,
      1021850., 1033800., 1043200., 749500.,  757000.,  766400.,  773920.,
      783380.,  790920.,  800440.,  808000.,  542015.,  547670.,  554690.,
      560360.,  567425.,  573110.,  580220.,  585920.,  651395.,  657230.,
      664670.,  670520.,  678005.,  683870.,  691400.,  697280.,  841820.,
      849640.,  859520.,  867360.,  877300.,  885160.,  895160.,  903040.,
      1018625., 1028450., 1040750., 1050600., 1062975., 1072850., 1085300.,
      1095200., 1028325., 1038250., 1050650., 1060600., 1073075., 1083050.,
      1095600., 1105600., 1038025., 1048050., 1060550., 1070600., 1083175.,
      1093250., 1105900., 1116000., 1047725., 1057850., 1070450., 1080600.,
      1093275., 1103450., 1116200., 1126400., 809020.,  817160.,  827200.,
      835360.,  845460.,  853640.,  863800.,  872000.,  584735.,  590870.,
      598370.,  604520.,  612065.,  618230.,  625820.,  632000.,  701795.,
      708110.,  716030.,  722360.,  730325.,  736670.,  744680.,  751040.,
      906460.,  914920.,  925440.,  933920.,  944500.,  953000.,  963640.,
      972160.,  1096225., 1106850., 1119950., 1130600., 1143775., 1154450.,
      1167700., 1178400., 1105925., 1116650., 1129850., 1140600., 1153875.,
      1164650., 1178000., 1188800., 1115625., 1126450., 1139750., 1150600.,
      1163975., 1174850., 1188300., 1199200., 1125325., 1136250., 1149650.,
      1160600., 1174075., 1185050., 1198600., 1209600., 868540.,  877320.,
      888000.,  896800.,  907540.,  916360.,  927160.,  936000.,  627455.,
      634070.,  642050.,  648680.,  656705.,  663350.,  671420.,  678080.,
      465196.,  470440.,  476728.,  481984.,  488308.,  493576.,  499936.,
      505216.,  595184.,  602208.,  610560.,  617600.,  626000.,  633056.,
      641504.,  648576.,  712420.,  721240.,  731640.,  740480.,  750940.,
      759800.,  770320.,  779200.,  718580.,  727480.,  737960.,  746880.,
      757420.,  766360.,  776960.,  785920.,  724740.,  733720.,  744280.,
      753280.,  763900.,  772920.,  783600.,  792640.,  730900.,  739960.,
      750600.,  759680.,  770380.,  779480.,  790240.,  799360.,  557680.,
      564960.,  573440.,  580736.,  589264.,  596576.,  605152.,  612480.,
      397852.,  403336.,  409672.,  415168.,  421540.,  427048.,  433456.,
      438976.,  272877.,  276954.,  281634.,  285720.,  290427.,  294522.,
      299256.,  303360.,  343780.,  349240.,  355456.,  360928.,  367180.,
      372664.,  378952.,  384448.,  404495.,  411350.,  419090.,  425960.,
      433745.,  440630.,  448460.,  455360.,  407915.,  414830.,  422630.,
      429560.,  437405.,  444350.,  452240.,  459200.,  411335.,  418310.,
      426170.,  433160.,  441065.,  448070.,  456020.,  463040.,  414755.,
      421790.,  429710.,  436760.,  444725.,  451790.,  459800.,  466880.,
      310276.,  315928.,  322240.,  327904.,  334252.,  339928.,  346312.,
      352000.,  216465.,  220722.,  225438.,  229704.,  234447.,  238722.,
      243492.,  247776.,  724317.,  729258.,  735522.,  740472.,  746763.,
      751722.,  758040.,  763008.,  943012.,  949624.,  957952.,  964576.,
      972940.,  979576.,  987976.,  994624.,  1150175., 1158470., 1168850.,
      1177160., 1187585., 1195910., 1206380., 1214720., 1158395., 1166750.,
      1177190., 1185560., 1196045., 1204430., 1214960., 1223360., 1166615.,
      1175030., 1185530., 1193960., 1204505., 1212950., 1223540., 1232000.,
      1174835., 1183310., 1193870., 1202360., 1212965., 1221470., 1232120.,
      1240640., 915652.,  922456.,  930880.,  937696.,  946156.,  952984.,
      961480.,  968320.,  668481.,  673602.,  679902.,  685032.,  691359.,
      696498.,  702852.,  708000.,  866956.,  873736.,  882040.,  888832.,
      897172.,  903976.,  912352.,  919168.,  1123952., 1133024., 1144064.,
      1153152., 1164240., 1173344., 1184480., 1193600., 1364740., 1376120.,
      1389880., 1401280., 1415100., 1426520., 1440400., 1451840., 1374100.,
      1385560., 1399400., 1410880., 1424780., 1436280., 1450240., 1461760.,
      1383460., 1395000., 1408920., 1420480., 1434460., 1446040., 1460080.,
      1471680., 1392820., 1404440., 1418440., 1430080., 1444140., 1455800.,
      1469920., 1481600., 1080304., 1089632., 1100800., 1110144., 1121360.,
      1130720., 1141984., 1151360., 784636.,  791656.,  800008.,  807040.,
      815428.,  822472.,  830896.,  837952.,  953795.,  962510.,  972830.,
      981560.,  991925.,  1000670., 1011080., 1019840., 1229660., 1241320.,
      1255040., 1266720., 1280500., 1292200., 1306040., 1317760., 1484225.,
      1498850., 1515950., 1530600., 1547775., 1562450., 1579700., 1594400.,
      1493925., 1508650., 1525850., 1540600., 1557875., 1572650., 1590000.,
      1604800., 1503625., 1518450., 1535750., 1550600., 1567975., 1582850.,
      1600300., 1615200., 1513325., 1528250., 1545650., 1560600., 1578075.,
      1593050., 1610600., 1625600., 1166140., 1178120., 1192000., 1204000.,
      1217940., 1229960., 1243960., 1256000., 841055.,  850070.,  860450.,
      869480.,  879905.,  888950.,  899420.,  908480.,  1004195., 1013390.,
      1024190., 1033400., 1044245., 1053470., 1064360., 1073600., 1294300.,
      1306600., 1320960., 1333280., 1347700., 1360040., 1374520., 1386880.,
      1561825., 1577250., 1595150., 1610600., 1628575., 1644050., 1662100.,
      1677600., 1571525., 1587050., 1605050., 1620600., 1638675., 1654250.,
      1672400., 1688000., 1581225., 1596850., 1614950., 1630600., 1648775.,
      1664450., 1682700., 1698400., 1590925., 1606650., 1624850., 1640600.,
      1658875., 1674650., 1693000., 1708800., 1225660., 1238280., 1252800.,
      1265440., 1280020., 1292680., 1307320., 1320000., 883775.,  893270.,
      904130.,  913640.,  924545.,  934070.,  945020.,  954560.,  1054595.,
      1064270., 1075550., 1085240., 1096565., 1106270., 1117640., 1127360.,
      1358940., 1371880., 1386880., 1399840., 1414900., 1427880., 1443000.,
      1456000., 1639425., 1655650., 1674350., 1690600., 1709375., 1725650.,
      1744500., 1760800., 1649125., 1665450., 1684250., 1700600., 1719475.,
      1735850., 1754800., 1771200., 1658825., 1675250., 1694150., 1710600.,
      1729575., 1746050., 1765100., 1781600., 1668525., 1685050., 1704050.,
      1720600., 1739675., 1756250., 1775400., 1792000., 1285180., 1298440.,
      1313600., 1326880., 1342100., 1355400., 1370680., 1384000., 926495.,
      936470.,  947810.,  957800.,  969185.,  979190.,  990620.,  1000640.,
      1104995., 1115150., 1126910., 1137080., 1148885., 1159070., 1170920.,
      1181120., 1423580., 1437160., 1452800., 1466400., 1482100., 1495720.,
      1511480., 1525120., 1717025., 1734050., 1753550., 1770600., 1790175.,
      1807250., 1826900., 1844000., 1726725., 1743850., 1763450., 1780600.,
      1800275., 1817450., 1837200., 1854400., 1736425., 1753650., 1773350.,
      1790600., 1810375., 1827650., 1847500., 1864800., 1746125., 1763450.,
      1783250., 1800600., 1820475., 1837850., 1857800., 1875200., 1344700.,
      1358600., 1374400., 1388320., 1404180., 1418120., 1434040., 1448000.,
      969215.,  979670.,  991490.,  1001960., 1013825., 1024310., 1036220.,
      1046720., 726316.,  734632.,  743992.,  752320.,  761716.,  770056.,
      779488.,  787840.,  926960.,  938080.,  950528.,  961664.,  974160.,
      985312.,  997856.,  1009024., 1106660., 1120600., 1136120., 1150080.,
      1165660., 1179640., 1195280., 1209280., 1112820., 1126840., 1142440.,
      1156480., 1172140., 1186200., 1201920., 1216000., 1118980., 1133080.,
      1148760., 1162880., 1178620., 1192760., 1208560., 1222720., 1125140.,
      1139320., 1155080., 1169280., 1185100., 1199320., 1215200., 1229440.,
      856688.,  868064.,  880640.,  892032.,  904656.,  916064.,  928736.,
      940160.,  609820.,  618376.,  627784.,  636352.,  645796.,  654376.,
      663856.,  672448.,  422637.,  429018.,  436002.,  442392.,  449403.,
      455802.,  462840.,  469248.,  531172.,  539704.,  548992.,  557536.,
      566860.,  575416.,  584776.,  593344.,  623375.,  634070.,  645650.,
      656360.,  667985.,  678710.,  690380.,  701120.,  626795.,  637550.,
      649190.,  659960.,  671645.,  682430.,  694160.,  704960.,  630215.,
      641030.,  652730.,  663560.,  675305.,  686150.,  697940.,  708800.,
      633635.,  644510.,  656270.,  667160.,  678965.,  689870.,  701720.,
      712640.,  473092.,  481816.,  491200.,  499936.,  509356.,  518104.,
      527560.,  536320.,  329361.,  335922.,  342942.,  349512.,  356559.,
      363138.,  370212.,  376800.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      242625.,  244450.,  248750.,  250600.,  254975.,  256850.,  261300.,
      263200.,  252325.,  254250.,  258650.,  260600.,  265075.,  267050.,
      271600.,  273600.,  262025.,  264050.,  268550.,  270600.,  275175.,
      277250.,  281900.,  284000.,  271725.,  273850.,  278450.,  280600.,
      285275.,  287450.,  292200.,  294400.,  320225.,  322850.,  327950.,
      330600.,  335775.,  338450.,  343700.,  346400.,  329925.,  332650.,
      337850.,  340600.,  345875.,  348650.,  354000.,  356800.,  339625.,
      342450.,  347750.,  350600.,  355975.,  358850.,  364300.,  367200.,
      349325.,  352250.,  357650.,  360600.,  366075.,  369050.,  374600.,
      377600.,  397825.,  401250.,  407150.,  410600.,  416575.,  420050.,
      426100.,  429600.,  407525.,  411050.,  417050.,  420600.,  426675.,
      430250.,  436400.,  440000.,  417225.,  420850.,  426950.,  430600.,
      436775.,  440450.,  446700.,  450400.,  426925.,  430650.,  436850.,
      440600.,  446875.,  450650.,  457000.,  460800.,  475425.,  479650.,
      486350.,  490600.,  497375.,  501650.,  508500.,  512800.,  485125.,
      489450.,  496250.,  500600.,  507475.,  511850.,  518800.,  523200.,
      494825.,  499250.,  506150.,  510600.,  517575.,  522050.,  529100.,
      533600.,  504525.,  509050.,  516050.,  520600.,  527675.,  532250.,
      539400.,  544000.,  863425.,  871650.,  882350.,  890600.,  901375.,
      909650.,  920500.,  928800.,  873125.,  881450.,  892250.,  900600.,
      911475.,  919850.,  930800.,  939200.,  882825.,  891250.,  902150.,
      910600.,  921575.,  930050.,  941100.,  949600.,  892525.,  901050.,
      912050.,  920600.,  931675.,  940250.,  951400.,  960000.,  941025.,
      950050.,  961550.,  970600.,  982175.,  991250.,  1002900., 1012000.,
      950725.,  959850.,  971450.,  980600.,  992275.,  1001450., 1013200.,
      1022400., 960425.,  969650.,  981350.,  990600.,  1002375., 1011650.,
      1023500., 1032800., 970125.,  979450.,  991250.,  1000600., 1012475.,
      1021850., 1033800., 1043200., 1018625., 1028450., 1040750., 1050600.,
      1062975., 1072850., 1085300., 1095200., 1028325., 1038250., 1050650.,
      1060600., 1073075., 1083050., 1095600., 1105600., 1038025., 1048050.,
      1060550., 1070600., 1083175., 1093250., 1105900., 1116000., 1047725.,
      1057850., 1070450., 1080600., 1093275., 1103450., 1116200., 1126400.,
      1096225., 1106850., 1119950., 1130600., 1143775., 1154450., 1167700.,
      1178400., 1105925., 1116650., 1129850., 1140600., 1153875., 1164650.,
      1178000., 1188800., 1115625., 1126450., 1139750., 1150600., 1163975.,
      1174850., 1188300., 1199200., 1125325., 1136250., 1149650., 1160600.,
      1174075., 1185050., 1198600., 1209600., 1484225., 1498850., 1515950.,
      1530600., 1547775., 1562450., 1579700., 1594400., 1493925., 1508650.,
      1525850., 1540600., 1557875., 1572650., 1590000., 1604800., 1503625.,
      1518450., 1535750., 1550600., 1567975., 1582850., 1600300., 1615200.,
      1513325., 1528250., 1545650., 1560600., 1578075., 1593050., 1610600.,
      1625600., 1561825., 1577250., 1595150., 1610600., 1628575., 1644050.,
      1662100., 1677600., 1571525., 1587050., 1605050., 1620600., 1638675.,
      1654250., 1672400., 1688000., 1581225., 1596850., 1614950., 1630600.,
      1648775., 1664450., 1682700., 1698400., 1590925., 1606650., 1624850.,
      1640600., 1658875., 1674650., 1693000., 1708800., 1639425., 1655650.,
      1674350., 1690600., 1709375., 1725650., 1744500., 1760800., 1649125.,
      1665450., 1684250., 1700600., 1719475., 1735850., 1754800., 1771200.,
      1658825., 1675250., 1694150., 1710600., 1729575., 1746050., 1765100.,
      1781600., 1668525., 1685050., 1704050., 1720600., 1739675., 1756250.,
      1775400., 1792000., 1717025., 1734050., 1753550., 1770600., 1790175.,
      1807250., 1826900., 1844000., 1726725., 1743850., 1763450., 1780600.,
      1800275., 1817450., 1837200., 1854400., 1736425., 1753650., 1773350.,
      1790600., 1810375., 1827650., 1847500., 1864800., 1746125., 1763450.,
      1783250., 1800600., 1820475., 1837850., 1857800., 1875200.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      111981.,  112314.,  112647.,  112980.,  115950.,  116292.,  116634.,
      116976.,  119991.,  120342.,  120693.,  121044.,  124104.,  124464.,
      124824.,  125184.,  152948.,  153416.,  153884.,  154352.,  158240.,
      158720.,  159200.,  159680.,  163628.,  164120.,  164612.,  165104.,
      169112.,  169616.,  170120.,  170624.,  195415.,  196030.,  196645.,
      197260.,  202030.,  202660.,  203290.,  203920.,  208765.,  209410.,
      210055.,  210700.,  215620.,  216280.,  216940.,  217600.,  211795.,
      212470.,  213145.,  213820.,  218650.,  219340.,  220030.,  220720.,
      225625.,  226330.,  227035.,  227740.,  232720.,  233440.,  234160.,
      234880.,  228175.,  228910.,  229645.,  230380.,  235270.,  236020.,
      236770.,  237520.,  242485.,  243250.,  244015.,  244780.,  249820.,
      250600.,  251380.,  252160.,  244555.,  245350.,  246145.,  246940.,
      251890.,  252700.,  253510.,  254320.,  259345.,  260170.,  260995.,
      261820.,  266920.,  267760.,  268600.,  269440.,  196340.,  197000.,
      197660.,  198320.,  202208.,  202880.,  203552.,  204224.,  208172.,
      208856.,  209540.,  210224.,  214232.,  214928.,  215624.,  216320.,
      147585.,  148098.,  148611.,  149124.,  151986.,  152508.,  153030.,
      153552.,  156459.,  156990.,  157521.,  158052.,  161004.,  161544.,
      162084.,  162624.,  197276.,  197912.,  198548.,  199184.,  202856.,
      203504.,  204152.,  204800.,  208532.,  209192.,  209852.,  210512.,
      214304.,  214976.,  215648.,  216320.,  264560.,  265440.,  266320.,
      267200.,  272000.,  272896.,  273792.,  274688.,  279568.,  280480.,
      281392.,  282304.,  287264.,  288192.,  289120.,  290048.,  332180.,
      333320.,  334460.,  335600.,  341480.,  342640.,  343800.,  344960.,
      350940.,  352120.,  353300.,  354480.,  360560.,  361760.,  362960.,
      364160.,  350820.,  352040.,  353260.,  354480.,  360440.,  361680.,
      362920.,  364160.,  370220.,  371480.,  372740.,  374000.,  380160.,
      381440.,  382720.,  384000.,  369460.,  370760.,  372060.,  373360.,
      379400.,  380720.,  382040.,  383360.,  389500.,  390840.,  392180.,
      393520.,  399760.,  401120.,  402480.,  403840.,  388100.,  389480.,
      390860.,  392240.,  398360.,  399760.,  401160.,  402560.,  408780.,
      410200.,  411620.,  413040.,  419360.,  420800.,  422240.,  423680.,
      308080.,  309216.,  310352.,  311488.,  316288.,  317440.,  318592.,
      319744.,  324624.,  325792.,  326960.,  328128.,  333088.,  334272.,
      335456.,  336640.,  229004.,  229880.,  230756.,  231632.,  235160.,
      236048.,  236936.,  237824.,  241412.,  242312.,  243212.,  244112.,
      247760.,  248672.,  249584.,  250496.,  293755.,  294790.,  295825.,
      296860.,  301090.,  302140.,  303190.,  304240.,  308545.,  309610.,
      310675.,  311740.,  316120.,  317200.,  318280.,  319360.,  389420.,
      390840.,  392260.,  393680.,  399200.,  400640.,  402080.,  403520.,
      409140.,  410600.,  412060.,  413520.,  419240.,  420720.,  422200.,
      423680.,  483425.,  485250.,  487075.,  488900.,  495650.,  497500.,
      499350.,  501200.,  508075.,  509950.,  511825.,  513700.,  520700.,
      522600.,  524500.,  526400.,  502725.,  504650.,  506575.,  508500.,
      515350.,  517300.,  519250.,  521200.,  528175.,  530150.,  532125.,
      534100.,  541200.,  543200.,  545200.,  547200.,  522025.,  524050.,
      526075.,  528100.,  535050.,  537100.,  539150.,  541200.,  548275.,
      550350.,  552425.,  554500.,  561700.,  563800.,  565900.,  568000.,
      541325.,  543450.,  545575.,  547700.,  554750.,  556900.,  559050.,
      561200.,  568375.,  570550.,  572725.,  574900.,  582200.,  584400.,
      586600.,  588800.,  425900.,  427640.,  429380.,  431120.,  436640.,
      438400.,  440160.,  441920.,  447540.,  449320.,  451100.,  452880.,
      458600.,  460400.,  462200.,  464000.,  313735.,  315070.,  316405.,
      317740.,  321790.,  323140.,  324490.,  325840.,  329965.,  331330.,
      332695.,  334060.,  338260.,  339640.,  341020.,  342400.,  394075.,
      395590.,  397105.,  398620.,  403330.,  404860.,  406390.,  407920.,
      412705.,  414250.,  415795.,  417340.,  422200.,  423760.,  425320.,
      426880.,  518060.,  520120.,  522180.,  524240.,  530400.,  532480.,
      534560.,  536640.,  542900.,  545000.,  547100.,  549200.,  555560.,
      557680.,  559800.,  561920.,  637825.,  640450.,  643075.,  645700.,
      653250.,  655900.,  658550.,  661200.,  668875.,  671550.,  674225.,
      676900.,  684700.,  687400.,  690100.,  692800.,  657125.,  659850.,
      662575.,  665300.,  672950.,  675700.,  678450.,  681200.,  688975.,
      691750.,  694525.,  697300.,  705200.,  708000.,  710800.,  713600.,
      676425.,  679250.,  682075.,  684900.,  692650.,  695500.,  698350.,
      701200.,  709075.,  711950.,  714825.,  717700.,  725700.,  728600.,
      731500.,  734400.,  695725.,  698650.,  701575.,  704500.,  712350.,
      715300.,  718250.,  721200.,  729175.,  732150.,  735125.,  738100.,
      746200.,  749200.,  752200.,  755200.,  544300.,  546680.,  549060.,
      551440.,  557600.,  560000.,  562400.,  564800.,  571060.,  573480.,
      575900.,  578320.,  584680.,  587120.,  589560.,  592000.,  398695.,
      400510.,  402325.,  404140.,  408670.,  410500.,  412330.,  414160.,
      418765.,  420610.,  422455.,  424300.,  428980.,  430840.,  432700.,
      434560.,  494395.,  496390.,  498385.,  500380.,  505570.,  507580.,
      509590.,  511600.,  516865.,  518890.,  520915.,  522940.,  528280.,
      530320.,  532360.,  534400.,  646700.,  649400.,  652100.,  654800.,
      661600.,  664320.,  667040.,  669760.,  676660.,  679400.,  682140.,
      684880.,  691880.,  694640.,  697400.,  700160.,  792225.,  795650.,
      799075.,  802500.,  810850.,  814300.,  817750.,  821200.,  829675.,
      833150.,  836625.,  840100.,  848700.,  852200.,  855700.,  859200.,
      811525.,  815050.,  818575.,  822100.,  830550.,  834100.,  837650.,
      841200.,  849775.,  853350.,  856925.,  860500.,  869200.,  872800.,
      876400.,  880000.,  830825.,  834450.,  838075.,  841700.,  850250.,
      853900.,  857550.,  861200.,  869875.,  873550.,  877225.,  880900.,
      889700.,  893400.,  897100.,  900800.,  850125.,  853850.,  857575.,
      861300.,  869950.,  873700.,  877450.,  881200.,  889975.,  893750.,
      897525.,  901300.,  910200.,  914000.,  917800.,  921600.,  662700.,
      665720.,  668740.,  671760.,  678560.,  681600.,  684640.,  687680.,
      694580.,  697640.,  700700.,  703760.,  710760.,  713840.,  716920.,
      720000.,  483655.,  485950.,  488245.,  490540.,  495550.,  497860.,
      500170.,  502480.,  507565.,  509890.,  512215.,  514540.,  519700.,
      522040.,  524380.,  526720.,  594715.,  597190.,  599665.,  602140.,
      607810.,  610300.,  612790.,  615280.,  621025.,  623530.,  626035.,
      628540.,  634360.,  636880.,  639400.,  641920.,  775340.,  778680.,
      782020.,  785360.,  792800.,  796160.,  799520.,  802880.,  810420.,
      813800.,  817180.,  820560.,  828200.,  831600.,  835000.,  838400.,
      946625.,  950850.,  955075.,  959300.,  968450.,  972700.,  976950.,
      981200.,  990475.,  994750.,  999025.,  1003300., 1012700., 1017000.,
      1021300., 1025600., 965925.,  970250.,  974575.,  978900.,  988150.,
      992500.,  996850.,  1001200., 1010575., 1014950., 1019325., 1023700.,
      1033200., 1037600., 1042000., 1046400., 985225.,  989650.,  994075.,
      998500.,  1007850., 1012300., 1016750., 1021200., 1030675., 1035150.,
      1039625., 1044100., 1053700., 1058200., 1062700., 1067200., 1004525.,
      1009050., 1013575., 1018100., 1027550., 1032100., 1036650., 1041200.,
      1050775., 1055350., 1059925., 1064500., 1074200., 1078800., 1083400.,
      1088000., 781100.,  784760.,  788420.,  792080.,  799520.,  803200.,
      806880.,  810560.,  818100.,  821800.,  825500.,  829200.,  836840.,
      840560.,  844280.,  848000.,  568615.,  571390.,  574165.,  576940.,
      582430.,  585220.,  588010.,  590800.,  596365.,  599170.,  601975.,
      604780.,  610420.,  613240.,  616060.,  618880.,  405980.,  408152.,
      410324.,  412496.,  416744.,  418928.,  421112.,  423296.,  427604.,
      429800.,  431996.,  434192.,  438560.,  440768.,  442976.,  445184.,
      523888.,  526816.,  529744.,  532672.,  538240.,  541184.,  544128.,
      547072.,  552720.,  555680.,  558640.,  561600.,  567328.,  570304.,
      573280.,  576256.,  632660.,  636360.,  640060.,  643760.,  650600.,
      654320.,  658040.,  661760.,  668700.,  672440.,  676180.,  679920.,
      686960.,  690720.,  694480.,  698240.,  644900.,  648680.,  652460.,
      656240.,  663160.,  666960.,  670760.,  674560.,  681580.,  685400.,
      689220.,  693040.,  700160.,  704000.,  707840.,  711680.,  657140.,
      661000.,  664860.,  668720.,  675720.,  679600.,  683480.,  687360.,
      694460.,  698360.,  702260.,  706160.,  713360.,  717280.,  721200.,
      725120.,  669380.,  673320.,  677260.,  681200.,  688280.,  692240.,
      696200.,  700160.,  707340.,  711320.,  715300.,  719280.,  726560.,
      730560.,  734560.,  738560.,  514160.,  517344.,  520528.,  523712.,
      529280.,  532480.,  535680.,  538880.,  544528.,  547744.,  550960.,
      554176.,  559904.,  563136.,  566368.,  569600.,  369356.,  371768.,
      374180.,  376592.,  380696.,  383120.,  385544.,  387968.,  392132.,
      394568.,  397004.,  399440.,  403664.,  406112.,  408560.,  411008.,
      244461.,  246234.,  248007.,  249780.,  252750.,  254532.,  256314.,
      258096.,  261111.,  262902.,  264693.,  266484.,  269544.,  271344.,
      273144.,  274944.,  310388.,  312776.,  315164.,  317552.,  321440.,
      323840.,  326240.,  328640.,  332588.,  335000.,  337412.,  339824.,
      343832.,  346256.,  348680.,  351104.,  368215.,  371230.,  374245.,
      377260.,  382030.,  385060.,  388090.,  391120.,  395965.,  399010.,
      402055.,  405100.,  410020.,  413080.,  416140.,  419200.,  374995.,
      378070.,  381145.,  384220.,  389050.,  392140.,  395230.,  398320.,
      403225.,  406330.,  409435.,  412540.,  417520.,  420640.,  423760.,
      426880.,  381775.,  384910.,  388045.,  391180.,  396070.,  399220.,
      402370.,  405520.,  410485.,  413650.,  416815.,  419980.,  425020.,
      428200.,  431380.,  434560.,  388555.,  391750.,  394945.,  398140.,
      403090.,  406300.,  409510.,  412720.,  417745.,  420970.,  424195.,
      427420.,  432520.,  435760.,  439000.,  442240.,  292340.,  294920.,
      297500.,  300080.,  303968.,  306560.,  309152.,  311744.,  315692.,
      318296.,  320900.,  323504.,  327512.,  330128.,  332744.,  335360.,
      205185.,  207138.,  209091.,  211044.,  213906.,  215868.,  217830.,
      219792.,  222699.,  224670.,  226641.,  228612.,  231564.,  233544.,
      235524.,  237504.,  777837.,  780474.,  783111.,  785748.,  791022.,
      793668.,  796314.,  798960.,  804279.,  806934.,  809589.,  812244.,
      817608.,  820272.,  822936.,  825600.,  1016180., 1019720., 1023260.,
      1026800., 1033760., 1037312., 1040864., 1044416., 1051436., 1055000.,
      1058564., 1062128., 1069208., 1072784., 1076360., 1079936., 1243735.,
      1248190., 1252645., 1257100., 1265710., 1270180., 1274650., 1279120.,
      1287805., 1292290., 1296775., 1301260., 1310020., 1314520., 1319020.,
      1323520., 1260115., 1264630., 1269145., 1273660., 1282330., 1286860.,
      1291390., 1295920., 1304665., 1309210., 1313755., 1318300., 1327120.,
      1331680., 1336240., 1340800., 1276495., 1281070., 1285645., 1290220.,
      1298950., 1303540., 1308130., 1312720., 1321525., 1326130., 1330735.,
      1335340., 1344220., 1348840., 1353460., 1358080., 1292875., 1297510.,
      1302145., 1306780., 1315570., 1320220., 1324870., 1329520., 1338385.,
      1343050., 1347715., 1352380., 1361320., 1366000., 1370680., 1375360.,
      1010420., 1014152., 1017884., 1021616., 1028576., 1032320., 1036064.,
      1039808., 1046828., 1050584., 1054340., 1058096., 1065176., 1068944.,
      1072712., 1076480., 739713.,  742530.,  745347.,  748164.,  753330.,
      756156.,  758982.,  761808.,  767019.,  769854.,  772689.,  775524.,
      780780.,  783624.,  786468.,  789312.,  962204.,  965912.,  969620.,
      973328.,  980072.,  983792.,  987512.,  991232.,  998036.,  1001768.,
      1005500., 1009232., 1016096., 1019840., 1023584., 1027328., 1251696.,
      1256672., 1261648., 1266624., 1275520., 1280512., 1285504., 1290496.,
      1299472., 1304480., 1309488., 1314496., 1323552., 1328576., 1333600.,
      1338624., 1525140., 1531400., 1537660., 1543920., 1554920., 1561200.,
      1567480., 1573760., 1584860., 1591160., 1597460., 1603760., 1614960.,
      1621280., 1627600., 1633920., 1543780., 1550120., 1556460., 1562800.,
      1573880., 1580240., 1586600., 1592960., 1604140., 1610520., 1616900.,
      1623280., 1634560., 1640960., 1647360., 1653760., 1562420., 1568840.,
      1575260., 1581680., 1592840., 1599280., 1605720., 1612160., 1623420.,
      1629880., 1636340., 1642800., 1654160., 1660640., 1667120., 1673600.,
      1581060., 1587560., 1594060., 1600560., 1611800., 1618320., 1624840.,
      1631360., 1642700., 1649240., 1655780., 1662320., 1673760., 1680320.,
      1686880., 1693440., 1229680., 1234912., 1240144., 1245376., 1254272.,
      1259520., 1264768., 1270016., 1278992., 1284256., 1289520., 1294784.,
      1303840., 1309120., 1314400., 1319680., 895628.,  899576.,  903524.,
      907472.,  914072.,  918032.,  921992.,  925952.,  932612.,  936584.,
      940556.,  944528.,  951248.,  955232.,  959216.,  963200.,  1096315.,
      1101190., 1106065., 1110940., 1119010., 1123900., 1128790., 1133680.,
      1141825., 1146730., 1151635., 1156540., 1164760., 1169680., 1174600.,
      1179520., 1418540., 1425080., 1431620., 1438160., 1448800., 1455360.,
      1461920., 1468480., 1479220., 1485800., 1492380., 1498960., 1509800.,
      1516400., 1523000., 1529600., 1718625., 1726850., 1735075., 1743300.,
      1756450., 1764700., 1772950., 1781200., 1794475., 1802750., 1811025.,
      1819300., 1832700., 1841000., 1849300., 1857600., 1737925., 1746250.,
      1754575., 1762900., 1776150., 1784500., 1792850., 1801200., 1814575.,
      1822950., 1831325., 1839700., 1853200., 1861600., 1870000., 1878400.,
      1757225., 1765650., 1774075., 1782500., 1795850., 1804300., 1812750.,
      1821200., 1834675., 1843150., 1851625., 1860100., 1873700., 1882200.,
      1890700., 1899200., 1776525., 1785050., 1793575., 1802100., 1815550.,
      1824100., 1832650., 1841200., 1854775., 1863350., 1871925., 1880500.,
      1894200., 1902800., 1911400., 1920000., 1373100., 1379960., 1386820.,
      1393680., 1404320., 1411200., 1418080., 1424960., 1435700., 1442600.,
      1449500., 1456400., 1467240., 1474160., 1481080., 1488000., 993415.,
      998590.,  1003765., 1008940., 1016830., 1022020., 1027210., 1032400.,
      1040365., 1045570., 1050775., 1055980., 1064020., 1069240., 1074460.,
      1079680., 1196635., 1201990., 1207345., 1212700., 1221250., 1226620.,
      1231990., 1237360., 1245985., 1251370., 1256755., 1262140., 1270840.,
      1276240., 1281640., 1287040., 1547180., 1554360., 1561540., 1568720.,
      1580000., 1587200., 1594400., 1601600., 1612980., 1620200., 1627420.,
      1634640., 1646120., 1653360., 1660600., 1667840., 1873025., 1882050.,
      1891075., 1900100., 1914050., 1923100., 1932150., 1941200., 1955275.,
      1964350., 1973425., 1982500., 1996700., 2005800., 2014900., 2024000.,
      1892325., 1901450., 1910575., 1919700., 1933750., 1942900., 1952050.,
      1961200., 1975375., 1984550., 1993725., 2002900., 2017200., 2026400.,
      2035600., 2044800., 1911625., 1920850., 1930075., 1939300., 1953450.,
      1962700., 1971950., 1981200., 1995475., 2004750., 2014025., 2023300.,
      2037700., 2047000., 2056300., 2065600., 1930925., 1940250., 1949575.,
      1958900., 1973150., 1982500., 1991850., 2001200., 2015575., 2024950.,
      2034325., 2043700., 2058200., 2067600., 2077000., 2086400., 1491500.,
      1499000., 1506500., 1514000., 1525280., 1532800., 1540320., 1547840.,
      1559220., 1566760., 1574300., 1581840., 1593320., 1600880., 1608440.,
      1616000., 1078375., 1084030., 1089685., 1095340., 1103710., 1109380.,
      1115050., 1120720., 1129165., 1134850., 1140535., 1146220., 1154740.,
      1160440., 1166140., 1171840., 1296955., 1302790., 1308625., 1314460.,
      1323490., 1329340., 1335190., 1341040., 1350145., 1356010., 1361875.,
      1367740., 1376920., 1382800., 1388680., 1394560., 1675820., 1683640.,
      1691460., 1699280., 1711200., 1719040., 1726880., 1734720., 1746740.,
      1754600., 1762460., 1770320., 1782440., 1790320., 1798200., 1806080.,
      2027425., 2037250., 2047075., 2056900., 2071650., 2081500., 2091350.,
      2101200., 2116075., 2125950., 2135825., 2145700., 2160700., 2170600.,
      2180500., 2190400., 2046725., 2056650., 2066575., 2076500., 2091350.,
      2101300., 2111250., 2121200., 2136175., 2146150., 2156125., 2166100.,
      2181200., 2191200., 2201200., 2211200., 2066025., 2076050., 2086075.,
      2096100., 2111050., 2121100., 2131150., 2141200., 2156275., 2166350.,
      2176425., 2186500., 2201700., 2211800., 2221900., 2232000., 2085325.,
      2095450., 2105575., 2115700., 2130750., 2140900., 2151050., 2161200.,
      2176375., 2186550., 2196725., 2206900., 2222200., 2232400., 2242600.,
      2252800., 1609900., 1618040., 1626180., 1634320., 1646240., 1654400.,
      1662560., 1670720., 1682740., 1690920., 1699100., 1707280., 1719400.,
      1727600., 1735800., 1744000., 1163335., 1169470., 1175605., 1181740.,
      1190590., 1196740., 1202890., 1209040., 1217965., 1224130., 1230295.,
      1236460., 1245460., 1251640., 1257820., 1264000., 1397275., 1403590.,
      1409905., 1416220., 1425730., 1432060., 1438390., 1444720., 1454305.,
      1460650., 1466995., 1473340., 1483000., 1489360., 1495720., 1502080.,
      1804460., 1812920., 1821380., 1829840., 1842400., 1850880., 1859360.,
      1867840., 1880500., 1889000., 1897500., 1906000., 1918760., 1927280.,
      1935800., 1944320., 2181825., 2192450., 2203075., 2213700., 2229250.,
      2239900., 2250550., 2261200., 2276875., 2287550., 2298225., 2308900.,
      2324700., 2335400., 2346100., 2356800., 2201125., 2211850., 2222575.,
      2233300., 2248950., 2259700., 2270450., 2281200., 2296975., 2307750.,
      2318525., 2329300., 2345200., 2356000., 2366800., 2377600., 2220425.,
      2231250., 2242075., 2252900., 2268650., 2279500., 2290350., 2301200.,
      2317075., 2327950., 2338825., 2349700., 2365700., 2376600., 2387500.,
      2398400., 2239725., 2250650., 2261575., 2272500., 2288350., 2299300.,
      2310250., 2321200., 2337175., 2348150., 2359125., 2370100., 2386200.,
      2397200., 2408200., 2419200., 1728300., 1737080., 1745860., 1754640.,
      1767200., 1776000., 1784800., 1793600., 1806260., 1815080., 1823900.,
      1832720., 1845480., 1854320., 1863160., 1872000., 1248295., 1254910.,
      1261525., 1268140., 1277470., 1284100., 1290730., 1297360., 1306765.,
      1313410., 1320055., 1326700., 1336180., 1342840., 1349500., 1356160.,
      925148.,  930392.,  935636.,  940880.,  948200.,  953456.,  958712.,
      963968.,  971348.,  976616.,  981884.,  987152.,  994592.,  999872.,
      1005152., 1010432., 1183344., 1190368., 1197392., 1204416., 1214080.,
      1221120., 1228160., 1235200., 1244944., 1252000., 1259056., 1266112.,
      1275936., 1283008., 1290080., 1297152., 1416020., 1424840., 1433660.,
      1442480., 1454440., 1463280., 1472120., 1480960., 1493020., 1501880.,
      1510740., 1519600., 1531760., 1540640., 1549520., 1558400., 1428260.,
      1437160., 1446060., 1454960., 1467000., 1475920., 1484840., 1493760.,
      1505900., 1514840., 1523780., 1532720., 1544960., 1553920., 1562880.,
      1571840., 1440500., 1449480., 1458460., 1467440., 1479560., 1488560.,
      1497560., 1506560., 1518780., 1527800., 1536820., 1545840., 1558160.,
      1567200., 1576240., 1585280., 1452740., 1461800., 1470860., 1479920.,
      1492120., 1501200., 1510280., 1519360., 1531660., 1540760., 1549860.,
      1558960., 1571360., 1580480., 1589600., 1598720., 1108080., 1115360.,
      1122640., 1129920., 1139584., 1146880., 1154176., 1161472., 1171216.,
      1178528., 1185840., 1193152., 1202976., 1210304., 1217632., 1224960.,
      790220.,  795704.,  801188.,  806672.,  813848.,  819344.,  824840.,
      830336.,  837572.,  843080.,  848588.,  854096.,  861392.,  866912.,
      872432.,  877952.,  541677.,  545754.,  549831.,  553908.,  559182.,
      563268.,  567354.,  571440.,  576759.,  580854.,  584949.,  589044.,
      594408.,  598512.,  602616.,  606720.,  682100.,  687560.,  693020.,
      698480.,  705440.,  710912.,  716384.,  721856.,  728876.,  734360.,
      739844.,  745328.,  752408.,  757904.,  763400.,  768896.,  802135.,
      808990.,  815845.,  822700.,  831310.,  838180.,  845050.,  851920.,
      860605.,  867490.,  874375.,  881260.,  890020.,  896920.,  903820.,
      910720.,  808915.,  815830.,  822745.,  829660.,  838330.,  845260.,
      852190.,  859120.,  867865.,  874810.,  881755.,  888700.,  897520.,
      904480.,  911440.,  918400.,  815695.,  822670.,  829645.,  836620.,
      845350.,  852340.,  859330.,  866320.,  875125.,  882130.,  889135.,
      896140.,  905020.,  912040.,  919060.,  926080.,  822475.,  829510.,
      836545.,  843580.,  852370.,  859420.,  866470.,  873520.,  882385.,
      889450.,  896515.,  903580.,  912520.,  919600.,  926680.,  933760.,
      614900.,  620552.,  626204.,  631856.,  638816.,  644480.,  650144.,
      655808.,  662828.,  668504.,  674180.,  679856.,  686936.,  692624.,
      698312.,  704000.,  428673.,  432930.,  437187.,  441444.,  446610.,
      450876.,  455142.,  459408.,  464619.,  468894.,  473169.,  477444.,
      482700.,  486984.,  491268.,  495552.,  1443693., 1448634., 1453575.,
      1458516., 1466094., 1471044., 1475994., 1480944., 1488567., 1493526.,
      1498485., 1503444., 1511112., 1516080., 1521048., 1526016., 1879412.,
      1886024., 1892636., 1899248., 1909280., 1915904., 1922528., 1929152.,
      1939244., 1945880., 1952516., 1959152., 1969304., 1975952., 1982600.,
      1989248., 2292055., 2300350., 2308645., 2316940., 2329390., 2337700.,
      2346010., 2354320., 2366845., 2375170., 2383495., 2391820., 2404420.,
      2412760., 2421100., 2429440., 2308435., 2316790., 2325145., 2333500.,
      2346010., 2354380., 2362750., 2371120., 2383705., 2392090., 2400475.,
      2408860., 2421520., 2429920., 2438320., 2446720., 2324815., 2333230.,
      2341645., 2350060., 2362630., 2371060., 2379490., 2387920., 2400565.,
      2409010., 2417455., 2425900., 2438620., 2447080., 2455540., 2464000.,
      2341195., 2349670., 2358145., 2366620., 2379250., 2387740., 2396230.,
      2404720., 2417425., 2425930., 2434435., 2442940., 2455720., 2464240.,
      2472760., 2481280., 1824500., 1831304., 1838108., 1844912., 1854944.,
      1861760., 1868576., 1875392., 1885484., 1892312., 1899140., 1905968.,
      1916120., 1922960., 1929800., 1936640., 1331841., 1336962., 1342083.,
      1347204., 1354674., 1359804., 1364934., 1370064., 1377579., 1382718.,
      1387857., 1392996., 1400556., 1405704., 1410852., 1416000., 1727132.,
      1733912., 1740692., 1747472., 1757288., 1764080., 1770872., 1777664.,
      1787540., 1794344., 1801148., 1807952., 1817888., 1824704., 1831520.,
      1838336., 2238832., 2247904., 2256976., 2266048., 2279040., 2288128.,
      2297216., 2306304., 2319376., 2328480., 2337584., 2346688., 2359840.,
      2368960., 2378080., 2387200., 2718100., 2729480., 2740860., 2752240.,
      2768360., 2779760., 2791160., 2802560., 2818780., 2830200., 2841620.,
      2853040., 2869360., 2880800., 2892240., 2903680., 2736740., 2748200.,
      2759660., 2771120., 2787320., 2798800., 2810280., 2821760., 2838060.,
      2849560., 2861060., 2872560., 2888960., 2900480., 2912000., 2923520.,
      2755380., 2766920., 2778460., 2790000., 2806280., 2817840., 2829400.,
      2840960., 2857340., 2868920., 2880500., 2892080., 2908560., 2920160.,
      2931760., 2943360., 2774020., 2785640., 2797260., 2808880., 2825240.,
      2836880., 2848520., 2860160., 2876620., 2888280., 2899940., 2911600.,
      2928160., 2939840., 2951520., 2963200., 2151280., 2160608., 2169936.,
      2179264., 2192256., 2201600., 2210944., 2220288., 2233360., 2242720.,
      2252080., 2261440., 2274592., 2283968., 2293344., 2302720., 1562252.,
      1569272., 1576292., 1583312., 1592984., 1600016., 1607048., 1614080.,
      1623812., 1630856., 1637900., 1644944., 1654736., 1661792., 1668848.,
      1675904., 1898875., 1907590., 1916305., 1925020., 1936930., 1945660.,
      1954390., 1963120., 1975105., 1983850., 1992595., 2001340., 2013400.,
      2022160., 2030920., 2039680., 2447660., 2459320., 2470980., 2482640.,
      2498400., 2510080., 2521760., 2533440., 2549300., 2561000., 2572700.,
      2584400., 2600360., 2612080., 2623800., 2635520., 2953825., 2968450.,
      2983075., 2997700., 3017250., 3031900., 3046550., 3061200., 3080875.,
      3095550., 3110225., 3124900., 3144700., 3159400., 3174100., 3188800.,
      2973125., 2987850., 3002575., 3017300., 3036950., 3051700., 3066450.,
      3081200., 3100975., 3115750., 3130525., 3145300., 3165200., 3180000.,
      3194800., 3209600., 2992425., 3007250., 3022075., 3036900., 3056650.,
      3071500., 3086350., 3101200., 3121075., 3135950., 3150825., 3165700.,
      3185700., 3200600., 3215500., 3230400., 3011725., 3026650., 3041575.,
      3056500., 3076350., 3091300., 3106250., 3121200., 3141175., 3156150.,
      3171125., 3186100., 3206200., 3221200., 3236200., 3251200., 2320300.,
      2332280., 2344260., 2356240., 2372000., 2384000., 2396000., 2408000.,
      2423860., 2435880., 2447900., 2459920., 2475880., 2487920., 2499960.,
      2512000., 1673095., 1682110., 1691125., 1700140., 1711870., 1720900.,
      1729930., 1738960., 1750765., 1759810., 1768855., 1777900., 1789780.,
      1798840., 1807900., 1816960., 1999195., 2008390., 2017585., 2026780.,
      2039170., 2048380., 2057590., 2066800., 2079265., 2088490., 2097715.,
      2106940., 2119480., 2128720., 2137960., 2147200., 2576300., 2588600.,
      2600900., 2613200., 2629600., 2641920., 2654240., 2666560., 2683060.,
      2695400., 2707740., 2720080., 2736680., 2749040., 2761400., 2773760.,
      3108225., 3123650., 3139075., 3154500., 3174850., 3190300., 3205750.,
      3221200., 3241675., 3257150., 3272625., 3288100., 3308700., 3324200.,
      3339700., 3355200., 3127525., 3143050., 3158575., 3174100., 3194550.,
      3210100., 3225650., 3241200., 3261775., 3277350., 3292925., 3308500.,
      3329200., 3344800., 3360400., 3376000., 3146825., 3162450., 3178075.,
      3193700., 3214250., 3229900., 3245550., 3261200., 3281875., 3297550.,
      3313225., 3328900., 3349700., 3365400., 3381100., 3396800., 3166125.,
      3181850., 3197575., 3213300., 3233950., 3249700., 3265450., 3281200.,
      3301975., 3317750., 3333525., 3349300., 3370200., 3386000., 3401800.,
      3417600., 2438700., 2451320., 2463940., 2476560., 2492960., 2505600.,
      2518240., 2530880., 2547380., 2560040., 2572700., 2585360., 2601960.,
      2614640., 2627320., 2640000., 1758055., 1767550., 1777045., 1786540.,
      1798750., 1808260., 1817770., 1827280., 1839565., 1849090., 1858615.,
      1868140., 1880500., 1890040., 1899580., 1909120., 2099515., 2109190.,
      2118865., 2128540., 2141410., 2151100., 2160790., 2170480., 2183425.,
      2193130., 2202835., 2212540., 2225560., 2235280., 2245000., 2254720.,
      2704940., 2717880., 2730820., 2743760., 2760800., 2773760., 2786720.,
      2799680., 2816820., 2829800., 2842780., 2855760., 2873000., 2886000.,
      2899000., 2912000., 3262625., 3278850., 3295075., 3311300., 3332450.,
      3348700., 3364950., 3381200., 3402475., 3418750., 3435025., 3451300.,
      3472700., 3489000., 3505300., 3521600., 3281925., 3298250., 3314575.,
      3330900., 3352150., 3368500., 3384850., 3401200., 3422575., 3438950.,
      3455325., 3471700., 3493200., 3509600., 3526000., 3542400., 3301225.,
      3317650., 3334075., 3350500., 3371850., 3388300., 3404750., 3421200.,
      3442675., 3459150., 3475625., 3492100., 3513700., 3530200., 3546700.,
      3563200., 3320525., 3337050., 3353575., 3370100., 3391550., 3408100.,
      3424650., 3441200., 3462775., 3479350., 3495925., 3512500., 3534200.,
      3550800., 3567400., 3584000., 2557100., 2570360., 2583620., 2596880.,
      2613920., 2627200., 2640480., 2653760., 2670900., 2684200., 2697500.,
      2710800., 2728040., 2741360., 2754680., 2768000., 1843015., 1852990.,
      1862965., 1872940., 1885630., 1895620., 1905610., 1915600., 1928365.,
      1938370., 1948375., 1958380., 1971220., 1981240., 1991260., 2001280.,
      2199835., 2209990., 2220145., 2230300., 2243650., 2253820., 2263990.,
      2274160., 2287585., 2297770., 2307955., 2318140., 2331640., 2341840.,
      2352040., 2362240., 2833580., 2847160., 2860740., 2874320., 2892000.,
      2905600., 2919200., 2932800., 2950580., 2964200., 2977820., 2991440.,
      3009320., 3022960., 3036600., 3050240., 3417025., 3434050., 3451075.,
      3468100., 3490050., 3507100., 3524150., 3541200., 3563275., 3580350.,
      3597425., 3614500., 3636700., 3653800., 3670900., 3688000., 3436325.,
      3453450., 3470575., 3487700., 3509750., 3526900., 3544050., 3561200.,
      3583375., 3600550., 3617725., 3634900., 3657200., 3674400., 3691600.,
      3708800., 3455625., 3472850., 3490075., 3507300., 3529450., 3546700.,
      3563950., 3581200., 3603475., 3620750., 3638025., 3655300., 3677700.,
      3695000., 3712300., 3729600., 3474925., 3492250., 3509575., 3526900.,
      3549150., 3566500., 3583850., 3601200., 3623575., 3640950., 3658325.,
      3675700., 3698200., 3715600., 3733000., 3750400., 2675500., 2689400.,
      2703300., 2717200., 2734880., 2748800., 2762720., 2776640., 2794420.,
      2808360., 2822300., 2836240., 2854120., 2868080., 2882040., 2896000.,
      1927975., 1938430., 1948885., 1959340., 1972510., 1982980., 1993450.,
      2003920., 2017165., 2027650., 2038135., 2048620., 2061940., 2072440.,
      2082940., 2093440., 1444316., 1452632., 1460948., 1469264., 1479656.,
      1487984., 1496312., 1504640., 1515092., 1523432., 1531772., 1540112.,
      1550624., 1558976., 1567328., 1575680., 1842800., 1853920., 1865040.,
      1876160., 1889920., 1901056., 1912192., 1923328., 1937168., 1948320.,
      1959472., 1970624., 1984544., 1995712., 2006880., 2018048., 2199380.,
      2213320., 2227260., 2241200., 2258280., 2272240., 2286200., 2300160.,
      2317340., 2331320., 2345300., 2359280., 2376560., 2390560., 2404560.,
      2418560., 2211620., 2225640., 2239660., 2253680., 2270840., 2284880.,
      2298920., 2312960., 2330220., 2344280., 2358340., 2372400., 2389760.,
      2403840., 2417920., 2432000., 2223860., 2237960., 2252060., 2266160.,
      2283400., 2297520., 2311640., 2325760., 2343100., 2357240., 2371380.,
      2385520., 2402960., 2417120., 2431280., 2445440., 2236100., 2250280.,
      2264460., 2278640., 2295960., 2310160., 2324360., 2338560., 2355980.,
      2370200., 2384420., 2398640., 2416160., 2430400., 2444640., 2458880.,
      1702000., 1713376., 1724752., 1736128., 1749888., 1761280., 1772672.,
      1784064., 1797904., 1809312., 1820720., 1832128., 1846048., 1857472.,
      1868896., 1880320., 1211084., 1219640., 1228196., 1236752., 1247000.,
      1255568., 1264136., 1272704., 1283012., 1291592., 1300172., 1308752.,
      1319120., 1327712., 1336304., 1344896., 838893.,  845274.,  851655.,
      858036.,  865614.,  872004.,  878394.,  884784.,  892407.,  898806.,
      905205.,  911604.,  919272.,  925680.,  932088.,  938496.,  1053812.,
      1062344., 1070876., 1079408., 1089440., 1097984., 1106528., 1115072.,
      1125164., 1133720., 1142276., 1150832., 1160984., 1169552., 1178120.,
      1186688., 1236055., 1246750., 1257445., 1268140., 1280590., 1291300.,
      1302010., 1312720., 1325245., 1335970., 1346695., 1357420., 1370020.,
      1380760., 1391500., 1402240., 1242835., 1253590., 1264345., 1275100.,
      1287610., 1298380., 1309150., 1319920., 1332505., 1343290., 1354075.,
      1364860., 1377520., 1388320., 1399120., 1409920., 1249615., 1260430.,
      1271245., 1282060., 1294630., 1305460., 1316290., 1327120., 1339765.,
      1350610., 1361455., 1372300., 1385020., 1395880., 1406740., 1417600.,
      1256395., 1267270., 1278145., 1289020., 1301650., 1312540., 1323430.,
      1334320., 1347025., 1357930., 1368835., 1379740., 1392520., 1403440.,
      1414360., 1425280., 937460.,  946184.,  954908.,  963632.,  973664.,
      982400.,  991136.,  999872.,  1009964., 1018712., 1027460., 1036208.,
      1046360., 1055120., 1063880., 1072640., 652161.,  658722.,  665283.,
      671844.,  679314.,  685884.,  692454.,  699024.,  706539.,  713118.,
      719697.,  726276.,  733836.,  740424.,  747012.,  753600.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
TYPED_TEST(ForwardWindow5Stride1, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      483425.,  485250.,  487075.,  488900.,  495650.,  497500.,  499350.,
      501200.,  508075.,  509950.,  511825.,  513700.,  520700.,  522600.,
      524500.,  526400.,  502725.,  504650.,  506575.,  508500.,  515350.,
      517300.,  519250.,  521200.,  528175.,  530150.,  532125.,  534100.,
      541200.,  543200.,  545200.,  547200.,  522025.,  524050.,  526075.,
      528100.,  535050.,  537100.,  539150.,  541200.,  548275.,  550350.,
      552425.,  554500.,  561700.,  563800.,  565900.,  568000.,  541325.,
      543450.,  545575.,  547700.,  554750.,  556900.,  559050.,  561200.,
      568375.,  570550.,  572725.,  574900.,  582200.,  584400.,  586600.,
      588800.,  637825.,  640450.,  643075.,  645700.,  653250.,  655900.,
      658550.,  661200.,  668875.,  671550.,  674225.,  676900.,  684700.,
      687400.,  690100.,  692800.,  657125.,  659850.,  662575.,  665300.,
      672950.,  675700.,  678450.,  681200.,  688975.,  691750.,  694525.,
      697300.,  705200.,  708000.,  710800.,  713600.,  676425.,  679250.,
      682075.,  684900.,  692650.,  695500.,  698350.,  701200.,  709075.,
      711950.,  714825.,  717700.,  725700.,  728600.,  731500.,  734400.,
      695725.,  698650.,  701575.,  704500.,  712350.,  715300.,  718250.,
      721200.,  729175.,  732150.,  735125.,  738100.,  746200.,  749200.,
      752200.,  755200.,  792225.,  795650.,  799075.,  802500.,  810850.,
      814300.,  817750.,  821200.,  829675.,  833150.,  836625.,  840100.,
      848700.,  852200.,  855700.,  859200.,  811525.,  815050.,  818575.,
      822100.,  830550.,  834100.,  837650.,  841200.,  849775.,  853350.,
      856925.,  860500.,  869200.,  872800.,  876400.,  880000.,  830825.,
      834450.,  838075.,  841700.,  850250.,  853900.,  857550.,  861200.,
      869875.,  873550.,  877225.,  880900.,  889700.,  893400.,  897100.,
      900800.,  850125.,  853850.,  857575.,  861300.,  869950.,  873700.,
      877450.,  881200.,  889975.,  893750.,  897525.,  901300.,  910200.,
      914000.,  917800.,  921600.,  946625.,  950850.,  955075.,  959300.,
      968450.,  972700.,  976950.,  981200.,  990475.,  994750.,  999025.,
      1003300., 1012700., 1017000., 1021300., 1025600., 965925.,  970250.,
      974575.,  978900.,  988150.,  992500.,  996850.,  1001200., 1010575.,
      1014950., 1019325., 1023700., 1033200., 1037600., 1042000., 1046400.,
      985225.,  989650.,  994075.,  998500.,  1007850., 1012300., 1016750.,
      1021200., 1030675., 1035150., 1039625., 1044100., 1053700., 1058200.,
      1062700., 1067200., 1004525., 1009050., 1013575., 1018100., 1027550.,
      1032100., 1036650., 1041200., 1050775., 1055350., 1059925., 1064500.,
      1074200., 1078800., 1083400., 1088000., 1718625., 1726850., 1735075.,
      1743300., 1756450., 1764700., 1772950., 1781200., 1794475., 1802750.,
      1811025., 1819300., 1832700., 1841000., 1849300., 1857600., 1737925.,
      1746250., 1754575., 1762900., 1776150., 1784500., 1792850., 1801200.,
      1814575., 1822950., 1831325., 1839700., 1853200., 1861600., 1870000.,
      1878400., 1757225., 1765650., 1774075., 1782500., 1795850., 1804300.,
      1812750., 1821200., 1834675., 1843150., 1851625., 1860100., 1873700.,
      1882200., 1890700., 1899200., 1776525., 1785050., 1793575., 1802100.,
      1815550., 1824100., 1832650., 1841200., 1854775., 1863350., 1871925.,
      1880500., 1894200., 1902800., 1911400., 1920000., 1873025., 1882050.,
      1891075., 1900100., 1914050., 1923100., 1932150., 1941200., 1955275.,
      1964350., 1973425., 1982500., 1996700., 2005800., 2014900., 2024000.,
      1892325., 1901450., 1910575., 1919700., 1933750., 1942900., 1952050.,
      1961200., 1975375., 1984550., 1993725., 2002900., 2017200., 2026400.,
      2035600., 2044800., 1911625., 1920850., 1930075., 1939300., 1953450.,
      1962700., 1971950., 1981200., 1995475., 2004750., 2014025., 2023300.,
      2037700., 2047000., 2056300., 2065600., 1930925., 1940250., 1949575.,
      1958900., 1973150., 1982500., 1991850., 2001200., 2015575., 2024950.,
      2034325., 2043700., 2058200., 2067600., 2077000., 2086400., 2027425.,
      2037250., 2047075., 2056900., 2071650., 2081500., 2091350., 2101200.,
      2116075., 2125950., 2135825., 2145700., 2160700., 2170600., 2180500.,
      2190400., 2046725., 2056650., 2066575., 2076500., 2091350., 2101300.,
      2111250., 2121200., 2136175., 2146150., 2156125., 2166100., 2181200.,
      2191200., 2201200., 2211200., 2066025., 2076050., 2086075., 2096100.,
      2111050., 2121100., 2131150., 2141200., 2156275., 2166350., 2176425.,
      2186500., 2201700., 2211800., 2221900., 2232000., 2085325., 2095450.,
      2105575., 2115700., 2130750., 2140900., 2151050., 2161200., 2176375.,
      2186550., 2196725., 2206900., 2222200., 2232400., 2242600., 2252800.,
      2181825., 2192450., 2203075., 2213700., 2229250., 2239900., 2250550.,
      2261200., 2276875., 2287550., 2298225., 2308900., 2324700., 2335400.,
      2346100., 2356800., 2201125., 2211850., 2222575., 2233300., 2248950.,
      2259700., 2270450., 2281200., 2296975., 2307750., 2318525., 2329300.,
      2345200., 2356000., 2366800., 2377600., 2220425., 2231250., 2242075.,
      2252900., 2268650., 2279500., 2290350., 2301200., 2317075., 2327950.,
      2338825., 2349700., 2365700., 2376600., 2387500., 2398400., 2239725.,
      2250650., 2261575., 2272500., 2288350., 2299300., 2310250., 2321200.,
      2337175., 2348150., 2359125., 2370100., 2386200., 2397200., 2408200.,
      2419200., 2953825., 2968450., 2983075., 2997700., 3017250., 3031900.,
      3046550., 3061200., 3080875., 3095550., 3110225., 3124900., 3144700.,
      3159400., 3174100., 3188800., 2973125., 2987850., 3002575., 3017300.,
      3036950., 3051700., 3066450., 3081200., 3100975., 3115750., 3130525.,
      3145300., 3165200., 3180000., 3194800., 3209600., 2992425., 3007250.,
      3022075., 3036900., 3056650., 3071500., 3086350., 3101200., 3121075.,
      3135950., 3150825., 3165700., 3185700., 3200600., 3215500., 3230400.,
      3011725., 3026650., 3041575., 3056500., 3076350., 3091300., 3106250.,
      3121200., 3141175., 3156150., 3171125., 3186100., 3206200., 3221200.,
      3236200., 3251200., 3108225., 3123650., 3139075., 3154500., 3174850.,
      3190300., 3205750., 3221200., 3241675., 3257150., 3272625., 3288100.,
      3308700., 3324200., 3339700., 3355200., 3127525., 3143050., 3158575.,
      3174100., 3194550., 3210100., 3225650., 3241200., 3261775., 3277350.,
      3292925., 3308500., 3329200., 3344800., 3360400., 3376000., 3146825.,
      3162450., 3178075., 3193700., 3214250., 3229900., 3245550., 3261200.,
      3281875., 3297550., 3313225., 3328900., 3349700., 3365400., 3381100.,
      3396800., 3166125., 3181850., 3197575., 3213300., 3233950., 3249700.,
      3265450., 3281200., 3301975., 3317750., 3333525., 3349300., 3370200.,
      3386000., 3401800., 3417600., 3262625., 3278850., 3295075., 3311300.,
      3332450., 3348700., 3364950., 3381200., 3402475., 3418750., 3435025.,
      3451300., 3472700., 3489000., 3505300., 3521600., 3281925., 3298250.,
      3314575., 3330900., 3352150., 3368500., 3384850., 3401200., 3422575.,
      3438950., 3455325., 3471700., 3493200., 3509600., 3526000., 3542400.,
      3301225., 3317650., 3334075., 3350500., 3371850., 3388300., 3404750.,
      3421200., 3442675., 3459150., 3475625., 3492100., 3513700., 3530200.,
      3546700., 3563200., 3320525., 3337050., 3353575., 3370100., 3391550.,
      3408100., 3424650., 3441200., 3462775., 3479350., 3495925., 3512500.,
      3534200., 3550800., 3567400., 3584000., 3417025., 3434050., 3451075.,
      3468100., 3490050., 3507100., 3524150., 3541200., 3563275., 3580350.,
      3597425., 3614500., 3636700., 3653800., 3670900., 3688000., 3436325.,
      3453450., 3470575., 3487700., 3509750., 3526900., 3544050., 3561200.,
      3583375., 3600550., 3617725., 3634900., 3657200., 3674400., 3691600.,
      3708800., 3455625., 3472850., 3490075., 3507300., 3529450., 3546700.,
      3563950., 3581200., 3603475., 3620750., 3638025., 3655300., 3677700.,
      3695000., 3712300., 3729600., 3474925., 3492250., 3509575., 3526900.,
      3549150., 3566500., 3583850., 3601200., 3623575., 3640950., 3658325.,
      3675700., 3698200., 3715600., 3733000., 3750400.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_forward_test(exp_out, in_shape, multiplier, padding, max_input_val);
}
