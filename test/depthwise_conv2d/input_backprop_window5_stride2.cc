/*
 * Copyright Codeplay Software Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use these files except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// DO NOT MODIFY BY HAND
// This file was automatically generated by generate_depthwise_conv2d_tests.py.
// Results calculated using Tensorflow v2.11.0.

#include <gtest/gtest.h>

#include "portdnn/padding_mode.h"

#include "test/types/cartesian_product.h"
#include "test/types/kernel_data_types.h"
#include "test/types/test_backend_types.h"
#include "test/types/to_gtest_types.h"

#include "test/depthwise_conv2d/window_stride_fixture.h"

#include <array>
#include <vector>

using DataTypeList = sycldnn::types::KernelDataTypes;
using Backends = sycldnn::types::DefaultBackendTypes;

using SNNTypePairs =
    sycldnn::types::CartesianProduct<DataTypeList, Backends>::type;
using GTestTypePairs = sycldnn::types::ToGTestTypes<SNNTypePairs>::type;

template <typename Pair>
using InputBackpropWindow5Stride2 =
    sycldnn::depthwise_conv2d::WindowStrideTest<Pair, 5, 2>;
TYPED_TEST_SUITE(InputBackpropWindow5Stride2, GTestTypePairs);
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,  70.,  124.,  102., 172.,  134., 156.,  126., 140., 244.,
      192., 322., 244.,  266., 233.,  266., 450.,  344., 567., 422.,
      467., 318., 348.,  556., 400.,  634., 452.,  490., 521., 578.,
      918., 656., 1035., 734., 803.,  510., 556.,  868., 608., 946.,
      660., 714., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,  5.,  8.,  11.,  8.,   10.,  6.,   7.,   20., 23., 26.,  18.,
      20.,  14., 18., 48., 58.,  68.,  44.,  50.,  34.,  38., 98., 108., 118.,
      74.,  80., 54., 58., 148., 158., 168., 104., 110., 48., 51., 118., 125.,
      132., 76., 80., 63., 66.,  153., 160., 167., 96.,  100.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,  472.,  854.,  720.,  1226., 968.,  1136.,  888.,  992.,  1754.,
      1400., 2366., 1808., 1976., 1660., 1912., 3267.,  2524., 4185., 3136.,
      3484., 2392., 2624., 4202., 3032., 4814., 3440.,  3736., 3916., 4360.,
      6939., 4972., 7857., 5584., 6124., 3896., 4256.,  6650., 4664., 7262.,
      5072., 5496., 5696., 6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  6632.,  7432.,
      13252., 10664., 18100., 13896., 15208., 12476., 14444., 24822., 19292.,
      32094., 24140., 26876., 18536., 20360., 32644., 23592., 37492., 26824.,
      29160., 30332., 33836., 53910., 38684., 61182., 43532., 47804., 30440.,
      33288., 52036., 36520., 56884., 39752., 43112., 44680., 47528., 74356.,
      52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      144.,  224.,  192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,
      432.,  536.,  512.,  624.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 728.,  932.,
      848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268., 1448., 1688.,
      1616., 1868., 1120., 1272., 1232., 1392., 1978., 2224., 1432., 1600.,
      2278., 2536., 1632., 1808., 1776., 1960., 1832., 2084., 2048., 2312.,
      3267., 3672., 2348., 2624., 3717., 4140., 2648., 2936., 2912., 3212.,
      1856., 2040., 2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784.,
      2432., 2640., 2640., 2856., 2736., 2960., 2912., 3144., 4558., 4912.,
      3192., 3432., 4978., 5344., 3472., 3720., 3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,
      32.,  27.,  40.,  11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  26.,  56.,  38.,  72.,  120.,
      192., 152., 232., 184., 272., 130., 176., 150., 200., 86.,  136.,
      98.,  152., 280., 392., 312., 432., 344., 472., 230., 296., 250.,
      320., 146., 216., 158., 232., 440., 592., 472., 632., 504., 672.,
      330., 416., 350., 440., 155., 192., 165., 204., 392., 472., 416.,
      500., 440., 528., 259., 304., 273., 320., 205., 252., 215., 264.,
      512., 612., 536., 640., 560., 668., 329., 384., 343., 400.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  2844.,  3788.,  3212.,  4220.,
      5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,  7516.,  7004.,
      8204.,  5434.,  7042.,  6370.,  8074.,  11097., 13725., 8746.,  10546.,
      14661., 17433., 11122., 13018., 12442., 14434., 8668.,  9868.,  9548.,
      10812., 15350., 17294., 11132., 12460., 17726., 19766., 12716., 14108.,
      13852., 15308., 14170., 16162., 15874., 17962., 25353., 28557., 18250.,
      20434., 28917., 32265., 20626., 22906., 22714., 25090., 14492., 15948.,
      15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654., 19052.,
      20700., 20700., 22412., 21452., 23228., 22844., 24684., 35774., 38582.,
      25068., 26972., 39110., 42014., 27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1034., 1586., 1122., 1706.,
      3228., 4428., 3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 1549., 1921., 1625., 2013., 3902., 4694.,
      4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7448.,   12376.,  10328.,  15768.,  19828.,  28372.,  17816.,  23768.,
      31060.,  40372.,  25304.,  31768.,  30232.,  37208.,  21848.,  29336.,
      24728.,  32728.,  45268.,  57652.,  37336.,  45848.,  64180.,  77332.,
      49944.,  58968.,  54872.,  64408.,  41924.,  54692.,  49316.,  62852.,
      86238.,  107118., 68228.,  82532.,  114606., 136638., 87140.,  102212.,
      97604.,  113444., 68184.,  77720.,  75160.,  85208.,  120916., 136372.,
      87768.,  98328.,  139828., 156052., 100376., 111448., 109400., 120984.,
      111428., 127268., 124964., 141572., 199710., 225198., 143876., 161252.,
      228078., 254718., 162788., 180932., 179396., 198308., 114520., 126104.,
      125592., 137688., 196564., 215092., 138200., 150808., 215476., 234772.,
      150808., 163928., 163928., 177560., 169880., 184024., 180952., 195608.,
      283444., 305812., 198680., 213848., 310036., 333172., 216408., 232088.,
      229528., 245720.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  5052.,
      8412.,  15384., 22360., 17240., 24728., 19096., 27096., 13212., 17340.,
      14396., 18780., 7740.,  12124., 8412.,  13052., 24664., 34200., 26520.,
      36568., 28376., 38936., 19132., 24540., 20316., 25980., 9070.,  11390.,
      9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660., 15534.,
      18366., 16382., 19342., 12030., 14990., 12622., 15710., 30444., 36748.,
      31884., 38444., 33324., 40140., 19774., 23246., 20622., 24222.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,
      2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,
      4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,
      3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,
      4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,
      6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,
      6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,
      5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,
      6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,
      6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,  7682.,
      8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,
      9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162.,
      11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,  8160.,
      7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,
      8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,
      10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944., 11388.,
      11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648.,
      12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404.,
      13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 450.,  584.,  722.,  864.,  490.,  632.,  778.,  928.,
      1468., 1760., 2060., 2368., 1580., 1888., 2204., 2528., 1692., 2016.,
      2348., 2688., 1154., 1320., 1490., 1664., 1226., 1400., 1578., 1760.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 729.,  820.,
      913.,  1008., 765.,  860.,  957.,  1056., 1854., 2048., 2246., 2448.,
      1942., 2144., 2350., 2560., 2030., 2240., 2454., 2672., 1209., 1316.,
      1425., 1536., 1261., 1372., 1485., 1600.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3140.,   4308.,   5540.,   6836.,   4516.,   5812.,   7172.,   8596.,
      8894.,   10934.,  13070.,  15302.,  8196.,   9620.,   11108.,  12660.,
      14414.,  16646.,  18974.,  21398.,  11876.,  13428.,  15044.,  16724.,
      14276.,  15956.,  17700.,  19508.,  10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      19414.,  22510.,  25702.,  28990.,  23014.,  26302.,  29686.,  33166.,
      40581.,  45657.,  50877.,  56241.,  32374.,  35854.,  39430.,  43102.,
      54621.,  59985.,  65493.,  71145.,  41734.,  45406.,  49174.,  53038.,
      46870.,  50734.,  54694.,  58750.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      53782.,  57646.,  61606.,  65662.,  60454.,  64510.,  68662.,  72910.,
      96741.,  102969., 109341., 115857., 69814.,  74062.,  78406.,  82846.,
      110781., 117297., 123957., 130761., 79174.,  83614.,  88150.,  92782.,
      87382.,  92014.,  96742.,  101566., 55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      83204.,  86676.,  90212.,  93812.,  88676.,  92276.,  95940.,  99668.,
      138974., 144470., 150062., 155750., 97476.,  101204., 104996., 108852.,
      152174., 157862., 163646., 169526., 106276., 110132., 114052., 118036.,
      112772., 116756., 120804., 124916.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23992.,  33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,  69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,  99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848., 118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,  92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080., 166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472., 189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328., 224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276., 176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812., 319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828., 341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540., 389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176., 279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536., 464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832., 401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592., 431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452., 457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996., 767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868., 658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436., 700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960., 466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992., 763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192., 612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856., 639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      662200., 689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592., 1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152., 866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176., 908472.,  940280.,  898232.,  930040.,  962360.,  995192.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   830.,    2254.,   3806.,   5486.,
      990.,    2670.,   4478.,   6414.,   7260.,   10876.,  14748.,  18876.,
      8604.,   12732.,  17116.,  21756.,  9948.,   14588.,  19484.,  24636.,
      9662.,   12110.,  14686.,  17390.,  10846.,  13550.,  16382.,  19342.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  13820.,  19740.,  25916.,  32348.,
      16188.,  22620.,  29308.,  36252.,  53176.,  66552.,  80440.,  94840.,
      59960.,  74360.,  89272.,  104696., 66744.,  82168.,  98104.,  114552.,
      47868.,  55836.,  64060.,  72540.,  52284.,  60764.,  69500.,  78492.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 33470.,  37966.,  42590.,  47342.,
      35678.,  40430.,  45310.,  50318.,  86876.,  96636.,  106652., 116924.,
      92316.,  102588., 113116., 123900., 97756.,  108540., 119580., 130876.,
      58686.,  64206.,  69854.,  75630.,  61918.,  67694.,  73598.,  79630.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.};
  const std::array<int, 4> in_shape = {{1, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,  56.,   70.,  124.,  102., 172.,  134., 156., 52.,  126., 140., 244.,
      192., 322.,  244., 266.,  100., 233.,  266., 450., 344., 567., 422., 467.,
      148., 318.,  348., 556.,  400., 634.,  452., 490., 244., 521., 578., 918.,
      656., 1035., 734., 803.,  244., 510.,  556., 868., 608., 946., 660., 714.,
      354., 740.,  786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,  10.,  0.,   6.,   7.,  20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18., 48.,  58.,  68.,  44., 50.,  0.,
      34.,  38.,  98.,  108., 118., 74., 80.,  0.,   54.,  58., 148., 158.,
      168., 104., 110., 0.,   48.,  51., 118., 125., 132., 76., 80.,  0.,
      63.,  66.,  153., 160., 167., 96., 100., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,  368.,  472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,
      992.,  1754., 1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267.,
      2524., 4185., 3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814.,
      3440., 3736., 1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124.,
      1862., 3896., 4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   0.,   35.,  41.,
      128.,  148.,  168.,  123., 137.,  0.,    82.,   110., 312., 384.,
      456.,  306.,  350.,  0.,   222.,  250.,  672.,  744., 816., 526.,
      570.,  0.,    362.,  390., 1032., 1104., 1176., 746., 790., 0.,
      347.,  369.,  864.,  916., 968.,  563.,  593.,  0.,   457., 479.,
      1124., 1176., 1228., 713., 743.,  0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      2636.,  6632.,  7432.,  13252., 10664., 18100., 13896., 15208.,
      5218.,  12476., 14444., 24822., 19292., 32094., 24140., 26876.,
      8588.,  18536., 20360., 32644., 23592., 37492., 26824., 29160.,
      14146., 30332., 33836., 53910., 38684., 61182., 43532., 47804.,
      14540., 30440., 33288., 52036., 36520., 56884., 39752., 43112.,
      21340., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50.,   88.,   144.,  224.,  192.,  280.,  358.,  496.,  312.,  408.,
      538.,  688.,  432.,  536.,  512.,  624.,  150.,  208.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 301.,  400.,  728.,  932.,  848.,  1064., 1467., 1800.,
      1148., 1376., 1917., 2268., 1448., 1688., 1616., 1868., 518.,  592.,
      1120., 1272., 1232., 1392., 1978., 2224., 1432., 1600., 2278., 2536.,
      1632., 1808., 1776., 1960., 853.,  976.,  1832., 2084., 2048., 2312.,
      3267., 3672., 2348., 2624., 3717., 4140., 2648., 2936., 2912., 3212.,
      886.,  976.,  1856., 2040., 2032., 2224., 3178., 3472., 2232., 2432.,
      3478., 3784., 2432., 2640., 2640., 2856., 1306., 1416., 2736., 2960.,
      2912., 3144., 4558., 4912., 3192., 3432., 4978., 5344., 3472., 3720.,
      3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  0.,   0.,   11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  0.,   0.,   26.,  56.,  38.,  72.,
      120., 192., 152., 232., 184., 272., 130., 176., 150., 200., 0.,   0.,
      86.,  136., 98.,  152., 280., 392., 312., 432., 344., 472., 230., 296.,
      250., 320., 0.,   0.,   146., 216., 158., 232., 440., 592., 472., 632.,
      504., 672., 330., 416., 350., 440., 0.,   0.,   155., 192., 165., 204.,
      392., 472., 416., 500., 440., 528., 259., 304., 273., 320., 0.,   0.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      330.,   626.,   1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,
      3068.,  4022.,  5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,
      2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,
      9878.,  6380.,  7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,
      6370.,  8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122.,
      13018., 12442., 14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812.,
      15350., 17294., 11132., 12460., 17726., 19766., 12716., 14108., 13852.,
      15308., 6587.,  7559.,  14170., 16162., 15874., 17962., 25353., 28557.,
      18250., 20434., 28917., 32265., 20626., 22906., 22714., 25090., 6914.,
      7626.,  14492., 15948., 15884., 17404., 24854., 27182., 17468., 19052.,
      27230., 29654., 19052., 20700., 20700., 22412., 10234., 11106., 21452.,
      23228., 22844., 24684., 35774., 38582., 25068., 26972., 39110., 42014.,
      27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1034., 1586., 1122., 1706., 3228., 4428.,
      3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338., 0.,    0.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 0.,    0.,    1549., 1921., 1625., 2013.,
      3902., 4694., 4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2364.,   4700.,   7448.,   12376.,  10328.,  15768.,  19828.,  28372.,
      17816.,  23768.,  31060.,  40372.,  25304.,  31768.,  30232.,  37208.,
      8284.,   11900.,  21848.,  29336.,  24728.,  32728.,  45268.,  57652.,
      37336.,  45848.,  64180.,  77332.,  49944.,  58968.,  54872.,  64408.,
      17002.,  23194.,  41924.,  54692.,  49316.,  62852.,  86238.,  107118.,
      68228.,  82532.,  114606., 136638., 87140.,  102212., 97604.,  113444.,
      31452.,  36092.,  68184.,  77720.,  75160.,  85208.,  120916., 136372.,
      87768.,  98328.,  139828., 156052., 100376., 111448., 109400., 120984.,
      51754.,  59482.,  111428., 127268., 124964., 141572., 199710., 225198.,
      143876., 161252., 228078., 254718., 162788., 180932., 179396., 198308.,
      54620.,  60284.,  114520., 126104., 125592., 137688., 196564., 215092.,
      138200., 150808., 215476., 234772., 150808., 163928., 163928., 177560.,
      81020.,  87964.,  169880., 184024., 180952., 195608., 283444., 305812.,
      198680., 213848., 310036., 333172., 216408., 232088., 229528., 245720.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  5052.,  8412.,  15384., 22360.,
      17240., 24728., 19096., 27096., 13212., 17340., 14396., 18780., 0.,
      0.,     7740.,  12124., 8412.,  13052., 24664., 34200., 26520., 36568.,
      28376., 38936., 19132., 24540., 20316., 25980., 0.,     0.,     9070.,
      11390., 9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660.,
      15534., 18366., 16382., 19342., 0.,     0.,     12030., 14990., 12622.,
      15710., 30444., 36748., 31884., 38444., 33324., 40140., 19774., 23246.,
      20622., 24222., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130.,   200.,   274.,   352.,   428.,   576.,   732.,   896.,   604.,
      768.,   940.,   1120.,  1174.,  1432.,  1702.,  1984.,  1068.,  1248.,
      1436.,  1632.,  1870.,  2152.,  2446.,  2752.,  1532.,  1728.,  1932.,
      2144.,  1836.,  2048.,  2268.,  2496.,  490.,   600.,   714.,   832.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  1015.,  1204.,  1399.,  1600.,  2522.,  2912.,  3314.,  3728.,
      2978.,  3392.,  3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,
      4592.,  5042.,  5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,
      6266.,  6752.,  5978.,  6464.,  6962.,  7472.,  1930.,  2072.,  2218.,
      2368.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,
      7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,
      9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,
      7468.,  7840.,  3175.,  3412.,  3655.,  3904.,  6842.,  7328.,  7826.,
      8336.,  7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688.,
      8858.,  9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034.,
      10592., 11162., 11744., 11066., 11648., 12242., 12848., 3370.,  3544.,
      3722.,  3904.,  7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,
      8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,
      13318., 13912., 14518., 15136., 9324.,  9728.,  10140., 10560., 10140.,
      10560., 10988., 11424., 5010.,  5224.,  5442.,  5664.,  10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    450.,  584.,
      722.,  864.,  490.,  632.,  778.,  928.,  1468., 1760., 2060., 2368.,
      1580., 1888., 2204., 2528., 1692., 2016., 2348., 2688., 1154., 1320.,
      1490., 1664., 1226., 1400., 1578., 1760., 0.,    0.,    0.,    0.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 0.,    0.,
      0.,    0.,    729.,  820.,  913.,  1008., 765.,  860.,  957.,  1056.,
      1854., 2048., 2246., 2448., 1942., 2144., 2350., 2560., 2030., 2240.,
      2454., 2672., 1209., 1316., 1425., 1536., 1261., 1372., 1485., 1600.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      39658.,  41362.,  43098.,  44866.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6716.,   11100.,   15740.,   20636.,   23992.,   33272.,   43064.,
      53368.,  34872.,   45176.,   55992.,   67320.,   69172.,   85396.,
      102388., 120148.,  64184.,   75512.,   87352.,   99704.,   113140.,
      130900., 149428.,  168724.,  93496.,   105848.,  118712.,  132088.,
      112568., 125944.,  139832.,  154232.,  28796.,   35740.,   42940.,
      50396.,  78392.,   92792.,   107704.,  123128.,  89272.,   104696.,
      120632., 137080.,  166132.,  190036.,  214708.,  240148.,  139064.,
      155512., 172472.,  189944.,  240820.,  266260.,  292468.,  319444.,
      188856., 206328.,  224312.,  242808.,  207928.,  226424.,  245432.,
      264952., 60538.,   72490.,   84826.,   97546.,   152276.,  176948.,
      202388., 228596.,  180884.,  207092.,  234068.,  261812.,  319662.,
      360126., 401742.,  444510.,  255572.,  283316.,  311828.,  341108.,
      431694., 474462.,  518382.,  563454.,  330260.,  359540.,  389588.,
      420404., 371156.,  401972.,  433556.,  465908.,  120188.,  129180.,
      138428., 147932.,  261176.,  279672.,  298680.,  318200.,  288440.,
      307960., 327992.,  348536.,  464884.,  494932.,  525748.,  557332.,
      338232., 358776.,  379832.,  401400.,  539572.,  571156.,  603508.,
      636628., 388024.,  409592.,  431672.,  454264.,  423480.,  446072.,
      469176., 492792.,  197626.,  212650.,  228058.,  243850.,  426452.,
      457268., 488852.,  521204.,  479636.,  511988.,  545108.,  578996.,
      767790., 817470.,  868302.,  920286.,  554324.,  588212.,  622868.,
      658292., 879822.,  931806.,  984942.,  1039230., 629012.,  664436.,
      700628., 737588.,  694484.,  731444.,  769172.,  807668.,  211580.,
      222620., 233916.,  245468.,  443960.,  466552.,  489656.,  513272.,
      487608., 511224.,  535352.,  559992.,  763636.,  799828.,  836788.,
      874516., 537400.,  562040.,  587192.,  612856.,  838324.,  876052.,
      914548., 953812.,  587192.,  612856.,  639032.,  665720.,  639032.,
      665720., 692920.,  720632.,  315580.,  329180.,  343036.,  357148.,
      662200., 689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592., 1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152., 866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176., 908472.,  940280.,  898232.,  930040.,  962360.,  995192.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      9948.,   14588.,  19484.,  24636.,  9662.,   12110.,  14686.,  17390.,
      10846.,  13550.,  16382.,  19342.,  0.,      0.,      0.,      0.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  0.,      0.,      0.,      0.,
      13820.,  19740.,  25916.,  32348.,  16188.,  22620.,  29308.,  36252.,
      53176.,  66552.,  80440.,  94840.,  59960.,  74360.,  89272.,  104696.,
      66744.,  82168.,  98104.,  114552., 47868.,  55836.,  64060.,  72540.,
      52284.,  60764.,  69500.,  78492.,  0.,      0.,      0.,      0.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 0.,      0.,      0.,      0.,
      33470.,  37966.,  42590.,  47342.,  35678.,  40430.,  45310.,  50318.,
      86876.,  96636.,  106652., 116924., 92316.,  102588., 113116., 123900.,
      97756.,  108540., 119580., 130876., 58686.,  64206.,  69854.,  75630.,
      61918.,  67694.,  73598.,  79630.,  0.,      0.,      0.,      0.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,  2840.,  3768.,  6796.,  5720.,   9724.,  7672.,  12652., 9624.,
      11320., 3060.,  7480.,  8408.,  14716.,  11640., 19564., 14872., 24412.,
      18104., 19800., 6170.,  14380., 16732.,  28254., 21580., 35526., 26428.,
      42798., 31276., 34780., 10500., 22360.,  24568., 38956., 27800., 43804.,
      31032., 48652., 34264., 37240., 17330.,  36700., 40972., 64614., 45820.,
      71886., 50668., 79158., 55516., 60940.,  17940., 37240., 40728., 63196.,
      43960., 68044., 47192., 72892., 50424.,  54680., 26340., 54680., 58168.,
      90316., 62680., 97084., 67192., 103852., 71704., 75960.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1616., 1736., 3356., 3600., 3572., 3824., 5548., 5932., 3852., 4112.,
      5968., 6364., 4132., 4400., 6388., 6796., 4412., 4688., 4676., 4960.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,   8.,    8.,   20.,   16.,  32.,   29.,   56.,  36.,
      56.,   52.,   76.,  35.,   48.,  45.,   60.,  0.,    0.,    11.,  24.,
      13.,   28.,   48.,  80.,   56.,  92.,   119., 176.,  116.,  156., 132.,
      176.,  85.,   108., 95.,   120., 0.,    0.,   28.,   60.,   44.,  80.,
      132.,  208.,  172., 256.,  328., 460.,  292., 384.,  348.,  448., 212.,
      264.,  244.,  300., 0.,    0.,   108.,  160., 124.,  180.,  332., 448.,
      372.,  496.,  688., 880.,  572., 704.,  628., 768.,  372.,  444., 404.,
      480.,  0.,    0.,   188.,  260., 204.,  280., 532.,  688.,  572., 736.,
      1048., 1300., 852., 1024., 908., 1088., 532., 624.,  564.,  660., 0.,
      0.,    217.,  256., 231.,  272., 524.,  608., 556.,  644.,  929., 1064.,
      696.,  788.,  736., 832.,  407., 456.,  429., 480.,  0.,    0.,   287.,
      336.,  301.,  352., 684.,  788., 716.,  824., 1199., 1364., 896., 1008.,
      936.,  1052., 517., 576.,  539., 600.,  0.,   0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,  3962.,  2468.,
      3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,  4356.,  5268.,
      5172.,  6148.,  1294.,  1766.,  3252.,  4228.,  3684.,  4724.,  6554.,
      8162.,  5268.,  6372.,  8930.,  10634., 6852.,  8020.,  11306., 13106.,
      8436.,  9668.,  9252.,  10548., 2671.,  3499.,  6338.,  8042.,  7466.,
      9266.,  12741., 15513., 9842.,  11738., 16305., 19221., 12218., 14210.,
      19869., 22929., 14594., 16682., 16298., 18482., 4934.,  5566.,  10532.,
      11828., 11604., 12964., 18434., 20522., 13188., 14612., 20810., 22994.,
      14772., 16260., 23186., 25466., 16356., 17908., 17812., 19428., 8131.,
      9199.,  17258., 19442., 19346., 21626., 30561., 34053., 21722., 24098.,
      34125., 37761., 24098., 26570., 37689., 41469., 26474., 29042., 29138.,
      31802., 8574.,  9366.,  17812., 19428., 19524., 21204., 30314., 32882.,
      21108., 22852., 32690., 35354., 22692., 24500., 35066., 37826., 24276.,
      26148., 26372., 28308., 12694., 13646., 26372., 28308., 28084., 30084.,
      43634., 46682., 30308., 32372., 46970., 50114., 32532., 34660., 50306.,
      53546., 34756., 36948., 36852., 39108.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  187.,  391.,
      254.,  406.,  374.,  558.,  257.,  357.,  333.,  449.,  0.,    0.,
      65.,   165.,  77.,   193.,  326.,  574.,  382.,  662.,  847.,  1291.,
      854.,  1166., 974.,  1318., 637.,  817.,  713.,  909.,  0.,    0.,
      166.,  414.,  286.,  566.,  916.,  1508., 1220., 1876., 2378., 3410.,
      2164., 2884., 2596., 3380., 1598., 2006., 1846., 2286., 0.,    0.,
      766.,  1174., 886.,  1326., 2436., 3348., 2740., 3716., 5138., 6650.,
      4324., 5364., 4756., 5860., 2838., 3406., 3086., 3686., 0.,    0.,
      1366., 1934., 1486., 2086., 3956., 5188., 4260., 5556., 7898., 9890.,
      6484., 7844., 6916., 8340., 4078., 4806., 4326., 5086., 0.,    0.,
      1661., 1969., 1769., 2093., 4030., 4694., 4278., 4974., 7171., 8239.,
      5390., 6118., 5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,
      2201., 2589., 2309., 2713., 5270., 6094., 5518., 6374., 9271., 10579.,
      6950., 7838., 7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2700.,   5164.,   8120.,   13304.,  11512.,  17208.,  21604.,  30532.,
      19000.,  25208.,  32836.,  42532.,  26488.,  33208.,  44068.,  54532.,
      33976.,  41208.,  40440.,  48184.,  9900.,   13644.,  25080.,  32824.,
      28472.,  36728.,  50884.,  63652.,  41080.,  49848.,  69796.,  83332.,
      53688.,  62968.,  88708.,  103012., 66296.,  76088.,  72760.,  83064.,
      20570.,  27146.,  49060.,  62596.,  57988.,  72292.,  99246.,  121278.,
      76900.,  91972.,  127614., 150798., 95812.,  111652., 155982., 180318.,
      114724., 131332., 128260., 145636., 38860.,  43884.,  83000.,  93304.,
      91512.,  102328., 145444., 162052., 104120., 115448., 164356., 181732.,
      116728., 128568., 183268., 201412., 129336., 141688., 140920., 153784.,
      64010.,  72506.,  135940., 153316., 152548., 170692., 241086., 268878.,
      171460., 190372., 269454., 298398., 190372., 210052., 297822., 327918.,
      209284., 229732., 230500., 251716., 67820.,  74124.,  140920., 153784.,
      154552., 167928., 240004., 260452., 167160., 181048., 258916., 280132.,
      179768., 194168., 277828., 299812., 192376., 207288., 209080., 224504.,
      100620., 108204., 209080., 224504., 222712., 238648., 346084., 370372.,
      240440., 256888., 372676., 397732., 258168., 275128., 399268., 425092.,
      275896., 293368., 292600., 310584.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2796.,
      5004.,  6362.,  9866.,  6540.,  9004.,  7468.,  10188., 4926.,  6350.,
      5518.,  7070.,  0.,     0.,     1100.,  3052.,  2028.,  4236.,  6776.,
      11448., 9144.,  14328., 18052., 26212., 16632., 22328., 20024., 26232.,
      12396., 15628., 14348., 17836., 0.,     0.,     5740.,  8972.,  6668.,
      10156., 18616., 25848., 20984., 28728., 39652., 51652., 33592., 41848.,
      36984., 45752., 22156., 26668., 24108., 28876., 0.,     0.,     10380.,
      14892., 11308., 16076., 30456., 40248., 32824., 43128., 61252., 77092.,
      50552., 61368., 53944., 65272., 31916., 37708., 33868., 39916., 0.,
      0.,     12990., 15438., 13838., 16414., 31596., 36876., 33548., 39084.,
      56330., 64826., 42412., 48204., 44876., 50924., 24910., 27998., 26270.,
      29486., 0.,     0.,     17230., 20318., 18078., 21294., 41356., 47916.,
      43308., 50124., 72890., 83306., 54732., 61804., 57196., 64524., 31710.,
      35438., 33070., 36926., 0.,     0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150.,   224.,   302.,   384.,   468.,   624.,   788.,   960.,   676.,
      848.,   1028.,  1216.,  1282.,  1552.,  1834.,  2128.,  1140.,  1328.,
      1524.,  1728.,  1978.,  2272.,  2578.,  2896.,  1604.,  1808.,  2020.,
      2240.,  2674.,  2992.,  3322.,  3664.,  2068.,  2288.,  2516.,  2752.,
      2468.,  2704.,  2948.,  3200.,  590.,   704.,   822.,   944.,   1508.,
      1744.,  1988.,  2240.,  1716.,  1968.,  2228.,  2496.,  3082.,  3472.,
      3874.,  4288.,  2500.,  2768.,  3044.,  3328.,  4258.,  4672.,  5098.,
      5536.,  3284.,  3568.,  3860.,  4160.,  5434.,  5872.,  6322.,  6784.,
      4068.,  4368.,  4676.,  4992.,  4468.,  4784.,  5108.,  5440.,  1235.,
      1436.,  1643.,  1856.,  2962.,  3376.,  3802.,  4240.,  3514.,  3952.,
      4402.,  4864.,  6033.,  6708.,  7401.,  8112.,  4690.,  5152.,  5626.,
      6112.,  7797.,  8508.,  9237.,  9984.,  5866.,  6352.,  6850.,  7360.,
      9561.,  10308., 11073., 11856., 7042.,  7552.,  8074.,  8608.,  7882.,
      8416.,  8962.,  9520.,  2390.,  2544.,  2702.,  2864.,  5108.,  5424.,
      5748.,  6080.,  5636.,  5968.,  6308.,  6656.,  8962.,  9472.,  9994.,
      10528., 6420.,  6768.,  7124.,  7488.,  10138., 10672., 11218., 11776.,
      7204.,  7568.,  7940.,  8320.,  11314., 11872., 12442., 13024., 7988.,
      8368.,  8756.,  9152.,  8708.,  9104.,  9508.,  9920.,  3935.,  4196.,
      4463.,  4736.,  8362.,  8896.,  9442.,  10000., 9394.,  9952.,  10522.,
      11104., 14853., 15708., 16581., 17472., 10570., 11152., 11746., 12352.,
      16617., 17508., 18417., 19344., 11746., 12352., 12970., 13600., 18381.,
      19308., 20253., 21216., 12922., 13552., 14194., 14848., 14242., 14896.,
      15562., 16240., 4190.,  4384.,  4582.,  4784.,  8708.,  9104.,  9508.,
      9920.,  9556.,  9968.,  10388., 10816., 14842., 15472., 16114., 16768.,
      10340., 10768., 11204., 11648., 16018., 16672., 17338., 18016., 11124.,
      11568., 12020., 12480., 17194., 17872., 18562., 19264., 11908., 12368.,
      12836., 13312., 12948., 13424., 13908., 14400., 6230.,  6464.,  6702.,
      6944.,  12948., 13424., 13908., 14400., 13796., 14288., 14788., 15296.,
      21442., 22192., 22954., 23728., 14900., 15408., 15924., 16448., 23098.,
      23872., 24658., 25456., 16004., 16528., 17060., 17600., 24754., 25552.,
      26362., 27184., 17108., 17648., 18196., 18752., 18148., 18704., 19268.,
      19840.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      614.,  752.,  894.,  1040., 670.,  816.,  966.,  1120., 1828., 2128.,
      2436., 2752., 1972., 2288., 2612., 2944., 3706., 4192., 4690., 5200.,
      3076., 3408., 3748., 4096., 3284., 3632., 3988., 4352., 1950., 2128.,
      2310., 2496., 2070., 2256., 2446., 2640., 0.,    0.,    0.,    0.,
      793.,  868.,  945.,  1024., 845.,  924.,  1005., 1088., 1934., 2096.,
      2262., 2432., 2054., 2224., 2398., 2576., 3455., 3716., 3983., 4256.,
      2606., 2784., 2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628.,
      1725., 1824., 1617., 1716., 1817., 1920., 0.,    0.,    0.,    0.,
      1053., 1148., 1245., 1344., 1105., 1204., 1305., 1408., 2534., 2736.,
      2942., 3152., 2654., 2864., 3078., 3296., 4475., 4796., 5123., 5456.,
      3366., 3584., 3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068.,
      2185., 2304., 2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      49378.,  51242.,  53138.,  55066.,  102644., 106436., 110292., 114212.,
      109396., 113316., 117300., 121348., 170054., 176030., 182102., 188270.,
      118196., 122244., 126356., 130532., 183254., 189422., 195686., 202046.,
      126996., 131172., 135412., 139716., 196454., 202814., 209270., 215822.,
      135796., 140100., 144468., 148900., 144084., 148516., 153012., 157572.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2914.,  3754.,
      4626.,  5530.,  8436.,  10180., 11988., 13860., 9556.,  11428., 13364.,
      15364., 18374., 21278., 24278., 27374., 15796., 17796., 19860., 21988.,
      17428., 19556., 21748., 24004., 10530., 11626., 12754., 13914., 11474.,
      12634., 13826., 15050., 0.,     0.,     0.,     0.,     4642.,  5738.,
      6866.,  8026.,  5074.,  6234.,  7426.,  8650.,  14036., 16420., 18868.,
      21380., 15156., 17668., 20244., 22884., 28694., 32558., 36518., 40574.,
      23956., 26596., 29300., 32068., 25588., 28356., 31188., 34084., 15250.,
      16666., 18114., 19594., 16194., 17674., 19186., 20730., 0.,     0.,
      0.,     0.,     6197.,  6793.,  7405.,  8033.,  6605.,  7233.,  7877.,
      8537.,  15154., 16442., 17762., 19114., 16098., 17450., 18834., 20250.,
      27127., 29203., 31327., 33499., 20498., 21914., 23362., 24842., 21698.,
      23178., 24690., 26234., 12077., 12833., 13605., 14393., 12741., 13529.,
      14333., 15153., 0.,     0.,     0.,     0.,     8237.,  8993.,  9765.,
      10553., 8645.,  9433.,  10237., 11057., 19874., 21482., 23122., 24794.,
      20818., 22490., 24194., 25930., 35167., 37723., 40327., 42979., 26498.,
      28234., 30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313.,
      17245., 18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7900.,    12540.,   17436.,   22588.,   26360.,   36152.,   46456.,
      57272.,   39288.,   50104.,   61432.,   73272.,   75796.,   92788.,
      110548.,  129076.,  68600.,   80440.,   92792.,   105656.,  119764.,
      138292.,  157588.,  177652.,  97912.,   110776.,  124152.,  138040.,
      163732.,  183796.,  204628.,  226228.,  127224.,  141112.,  155512.,
      170424.,  152440.,  167352.,  182776.,  198712.,  35100.,   42300.,
      49756.,   57468.,   91000.,   105912.,  121336.,  137272.,  103928.,
      119864.,  136312.,  153272.,  188116.,  212788.,  238228.,  264436.,
      153720.,  170680.,  188152.,  206136.,  262804.,  289012.,  315988.,
      343732.,  203512.,  221496.,  239992.,  259000.,  337492.,  365236.,
      393748.,  423028.,  253304.,  272312.,  291832.,  311864.,  278520.,
      298552.,  319096.,  340152.,  74330.,   87050.,   100154.,  113642.,
      179860.,  206068.,  233044.,  260788.,  214612.,  242356.,  270868.,
      300148.,  370254.,  413022.,  456942.,  502014.,  289300.,  318580.,
      348628.,  379444.,  482286.,  527358.,  573582.,  620958.,  363988.,
      394804.,  426388.,  458740.,  594318.,  641694.,  690222.,  739902.,
      438676.,  471028.,  504148.,  538036.,  491860.,  525748.,  560404.,
      595828.,  149340.,  159100.,  169116.,  179388.,  319480.,  339512.,
      360056.,  381112.,  352888.,  373944.,  395512.,  417592.,  561556.,
      593908.,  627028.,  660916.,  402680.,  424760.,  447352.,  470456.,
      636244.,  670132.,  704788.,  740212.,  452472.,  475576.,  499192.,
      523320.,  710932.,  746356.,  782548.,  819508.,  502264.,  526392.,
      551032.,  576184.,  547960.,  573112.,  598776.,  624952.,  245690.,
      262250.,  279194.,  296522.,  522580.,  556468.,  591124.,  626548.,
      588052.,  623476.,  659668.,  696628.,  930414.,  984702.,  1040142.,
      1096734., 662740.,  699700.,  737428.,  775924.,  1042446., 1099038.,
      1156782., 1215678., 737428.,  775924.,  815188.,  855220.,  1154478.,
      1213374., 1273422., 1334622., 812116.,  852148.,  892948.,  934516.,
      896020.,  937588.,  979924.,  1023028., 263580.,  275900.,  288476.,
      301308.,  547960.,  573112.,  598776.,  624952.,  601848.,  628024.,
      654712.,  681912.,  934996.,  975028.,  1015828., 1057396., 651640.,
      678840.,  706552.,  734776.,  1009684., 1051252., 1093588., 1136692.,
      701432.,  729656.,  758392.,  787640.,  1084372., 1127476., 1171348.,
      1215988., 751224.,  780472.,  810232.,  840504.,  817400.,  847672.,
      878456.,  909752.,  393180.,  408060.,  423196.,  438588.,  817400.,
      847672.,  878456.,  909752.,  871288.,  902584.,  934392.,  966712.,
      1354516., 1402228., 1450708., 1499956., 941560.,  973880.,  1006712.,
      1040056., 1459924., 1509172., 1559188., 1609972., 1011832., 1045176.,
      1079032., 1113400., 1565332., 1616116., 1667668., 1719988., 1082104.,
      1116472., 1151352., 1186744., 1148280., 1183672., 1219576., 1255992.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3578.,   6314.,   9434.,   12938.,  6300.,   8380.,   10716.,  13308.,
      9692.,   12284.,  15132.,  18236.,  6974.,   8398.,   9950.,   11630.,
      9182.,   10862.,  12670.,  14606.,  0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      21338.,  27914.,  34874.,  42218.,  23260.,  27900.,  32796.,  37948.,
      26652.,  31804.,  37212.,  42876.,  18014.,  20718.,  23550.,  26510.,
      20222.,  23182.,  26270.,  29486.,  0.,      0.,      0.,      0.,
      2140.,   5756.,   9628.,   13756.,  5532.,   9660.,   14044.,  18684.,
      21624.,  30392.,  39672.,  49464.,  30456.,  40248.,  50552.,  61368.,
      62548.,  78004.,  94228.,  111220., 59768.,  70584.,  81912.,  93752.,
      72696.,  84536.,  96888.,  109752., 45724.,  51900.,  58332.,  65020.,
      53212.,  59900.,  66844.,  74044.,  0.,      0.,      0.,      0.,
      19100.,  25276.,  31708.,  38396.,  22492.,  29180.,  36124.,  43324.,
      65784.,  79672.,  94072.,  108984., 74616.,  89528.,  104952., 120888.,
      144148., 167284., 191188., 215860., 124408., 140344., 156792., 173752.,
      137336., 154296., 171768., 189752., 83164.,  91900.,  100892., 110140.,
      90652.,  99900.,  109404., 119164., 0.,      0.,      0.,      0.,
      36060.,  44796.,  53788.,  63036.,  39452.,  48700.,  58204.,  67964.,
      109944., 128952., 148472., 168504., 118776., 138808., 159352., 180408.,
      225748., 256564., 288148., 320500., 189048., 210104., 231672., 253752.,
      201976., 224056., 246648., 269752., 120604., 131900., 143452., 155260.,
      128092., 139900., 151964., 164284., 0.,      0.,      0.,      0.,
      48990.,  53742.,  58622.,  63630.,  52222.,  57230.,  62366.,  67630.,
      119964., 130236., 140764., 151548., 127452., 138236., 149276., 160572.,
      214970., 231530., 248474., 265802., 162588., 173884., 185436., 197244.,
      172124., 183932., 195996., 208316., 95870.,  101902., 108062., 114350.,
      101150., 107438., 113854., 120398., 0.,      0.,      0.,      0.,
      65150.,  71182.,  77342.,  83630.,  68382.,  74670.,  81086.,  87630.,
      157404., 170236., 183324., 196668., 164892., 178236., 191836., 205692.,
      278810., 299210., 319994., 341162., 210268., 224124., 238236., 252604.,
      219804., 234172., 248796., 263676., 122270., 129582., 137022., 144590.,
      127550., 135118., 142814., 150638., 0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,  23.,  44.,  39.,   68.,  55.,   62.,  56.,  70.,  124., 102., 172.,
      134., 156., 126., 140.,  244., 192.,  322., 244., 266., 233., 266., 450.,
      344., 567., 422., 467.,  318., 348.,  556., 400., 634., 452., 490., 521.,
      578., 918., 656., 1035., 734., 803.,  510., 556., 868., 608., 946., 660.,
      714., 740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11., 8.,  10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48., 58., 68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54., 58., 148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76., 80., 63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,  0.,  0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,  272.,   481.,  396.,  448.,  368.,  472.,  854.,
      720.,  1226., 968.,  1136.,  888.,  992.,  1754., 1400., 2366., 1808.,
      1976., 1660., 1912., 3267.,  2524., 4185., 3136., 3484., 2392., 2624.,
      4202., 3032., 4814., 3440.,  3736., 3916., 4360., 6939., 4972., 7857.,
      5584., 6124., 3896., 4256.,  6650., 4664., 7262., 5072., 5496., 5696.,
      6056., 9470., 6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,  68.,   53.,   67.,   35.,  41.,  128.,
      148.,  168.,  123.,  137., 82.,   110.,  312.,  384., 456., 306.,
      350.,  222.,  250.,  672., 744.,  816.,  526.,  570., 362., 390.,
      1032., 1104., 1176., 746., 790.,  347.,  369.,  864., 916., 968.,
      563.,  593.,  457.,  479., 1124., 1176., 1228., 713., 743., 0.,
      0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,  2632.,
      3432.,  6292.,  5384.,  9220.,  7336.,  8648.,  6632.,  7432.,
      13252., 10664., 18100., 13896., 15208., 12476., 14444., 24822.,
      19292., 32094., 24140., 26876., 18536., 20360., 32644., 23592.,
      37492., 26824., 29160., 30332., 33836., 53910., 38684., 61182.,
      43532., 47804., 30440., 33288., 52036., 36520., 56884., 39752.,
      43112., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  230.,  270.,  900.,
      1044., 1188., 902.,  1006., 540.,  748.,  2216., 2760., 3304., 2268.,
      2604., 1580., 1788., 4936., 5480., 6024., 3948., 4284., 2620., 2828.,
      7656., 8200., 8744., 5628., 5964., 2630., 2798., 6596., 6996., 7396.,
      4326., 4558., 3470., 3638., 8596., 8996., 9396., 5486., 5718., 0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,  209.,  272.,
      176.,  220.,  200.,  248.,  144.,  224.,  192.,  280.,  358.,  496.,
      312.,  408.,  538.,  688.,  432.,  536.,  512.,  624.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376.,
      1917., 2268., 1448., 1688., 1616., 1868., 1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624., 3717., 4140.,
      2648., 2936., 2912., 3212., 1856., 2040., 2032., 2224., 3178., 3472.,
      2232., 2432., 3478., 3784., 2432., 2640., 2640., 2856., 2736., 2960.,
      2912., 3144., 4558., 4912., 3192., 3432., 4978., 5344., 3472., 3720.,
      3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,  64.,  104.,
      51.,  72.,  57.,  80.,  26.,  56.,  38.,  72.,  120., 192., 152., 232.,
      184., 272., 130., 176., 150., 200., 86.,  136., 98.,  152., 280., 392.,
      312., 432., 344., 472., 230., 296., 250., 320., 146., 216., 158., 232.,
      440., 592., 472., 632., 504., 672., 330., 416., 350., 440., 155., 192.,
      165., 204., 392., 472., 416., 500., 440., 528., 259., 304., 273., 320.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,
      8222.,  9878.,  6380.,  7516.,  7004.,  8204.,  5434.,  7042.,  6370.,
      8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018.,
      12442., 14434., 8668.,  9868.,  9548.,  10812., 15350., 17294., 11132.,
      12460., 17726., 19766., 12716., 14108., 13852., 15308., 14170., 16162.,
      15874., 17962., 25353., 28557., 18250., 20434., 28917., 32265., 20626.,
      22906., 22714., 25090., 14492., 15948., 15884., 17404., 24854., 27182.,
      17468., 19052., 27230., 29654., 19052., 20700., 20700., 22412., 21452.,
      23228., 22844., 24684., 35774., 38582., 25068., 26972., 39110., 42014.,
      27292., 29260., 28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1034., 1586., 1122., 1706.,
      3228., 4428., 3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 1549., 1921., 1625., 2013., 3902., 4694.,
      4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,   9004.,
      11978.,  15866.,  10284.,  13004.,  11724.,  14700.,  7448.,   12376.,
      10328.,  15768.,  19828.,  28372.,  17816.,  23768.,  31060.,  40372.,
      25304.,  31768.,  30232.,  37208.,  21848.,  29336.,  24728.,  32728.,
      45268.,  57652.,  37336.,  45848.,  64180.,  77332.,  49944.,  58968.,
      54872.,  64408.,  41924.,  54692.,  49316.,  62852.,  86238.,  107118.,
      68228.,  82532.,  114606., 136638., 87140.,  102212., 97604.,  113444.,
      68184.,  77720.,  75160.,  85208.,  120916., 136372., 87768.,  98328.,
      139828., 156052., 100376., 111448., 109400., 120984., 111428., 127268.,
      124964., 141572., 199710., 225198., 143876., 161252., 228078., 254718.,
      162788., 180932., 179396., 198308., 114520., 126104., 125592., 137688.,
      196564., 215092., 138200., 150808., 215476., 234772., 150808., 163928.,
      163928., 177560., 169880., 184024., 180952., 195608., 283444., 305812.,
      198680., 213848., 310036., 333172., 216408., 232088., 229528., 245720.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  5052.,
      8412.,  15384., 22360., 17240., 24728., 19096., 27096., 13212., 17340.,
      14396., 18780., 7740.,  12124., 8412.,  13052., 24664., 34200., 26520.,
      36568., 28376., 38936., 19132., 24540., 20316., 25980., 9070.,  11390.,
      9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660., 15534.,
      18366., 16382., 19342., 12030., 14990., 12622., 15710., 30444., 36748.,
      31884., 38444., 33324., 40140., 19774., 23246., 20622., 24222., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 450.,  584.,  722.,  864.,  490.,  632.,  778.,  928.,
      1468., 1760., 2060., 2368., 1580., 1888., 2204., 2528., 1692., 2016.,
      2348., 2688., 1154., 1320., 1490., 1664., 1226., 1400., 1578., 1760.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 729.,  820.,
      913.,  1008., 765.,  860.,  957.,  1056., 1854., 2048., 2246., 2448.,
      1942., 2144., 2350., 2560., 2030., 2240., 2454., 2672., 1209., 1316.,
      1425., 1536., 1261., 1372., 1485., 1600., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      5527.,   6451.,   7423.,   8443.,   4818.,   5466.,   6146.,   6858.,
      5506.,   6218.,   6962.,   7738.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      10020.,  11828.,  13700.,  15636.,  11396.,  13332.,  15332.,  17396.,
      21134.,  24134.,  27230.,  30422.,  17636.,  19700.,  21828.,  24020.,
      30494.,  33686.,  36974.,  40358.,  23876.,  26068.,  28324.,  30644.,
      26276.,  28596.,  30980.,  33428.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      32932.,  35252.,  37636.,  40084.,  36356.,  38804.,  41316.,  43892.,
      58574.,  62342.,  66206.,  70166.,  42596.,  45172.,  47812.,  50516.,
      67934.,  71894.,  75950.,  80102.,  48836.,  51540.,  54308.,  57140.,
      53284.,  56116.,  59012.,  61972.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      55844.,  58676.,  61572.,  64532.,  61316.,  64276.,  67300.,  70388.,
      96014.,  100550., 105182., 109910., 67556.,  70644.,  73796.,  77012.,
      105374., 110102., 114926., 119846., 73796.,  77012.,  80292.,  83636.,
      80292.,  83636.,  87044.,  90516.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,   10876.,   14748.,   18876.,   8604.,    12732.,   17116.,
      21756.,  21338.,   27914.,   34874.,   42218.,   23260.,   27900.,
      32796.,  37948.,   43322.,   50666.,   58394.,   66506.,   37916.,
      43068.,  48476.,   54140.,   43356.,   49020.,   54940.,   61116.,
      23992.,  33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,  69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,  99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848., 118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,  92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080., 166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472., 189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328., 224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276., 176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812., 319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828., 341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540., 389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176., 279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536., 464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832., 401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592., 431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452., 457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996., 767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868., 658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436., 700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960., 466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992., 763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192., 612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856., 639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      662200., 689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592., 1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152., 866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176., 908472.,  940280.,  898232.,  930040.,  962360.,  995192.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   830.,    2254.,   3806.,   5486.,
      990.,    2670.,   4478.,   6414.,   7260.,   10876.,  14748.,  18876.,
      8604.,   12732.,  17116.,  21756.,  9948.,   14588.,  19484.,  24636.,
      9662.,   12110.,  14686.,  17390.,  10846.,  13550.,  16382.,  19342.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  13820.,  19740.,  25916.,  32348.,
      16188.,  22620.,  29308.,  36252.,  53176.,  66552.,  80440.,  94840.,
      59960.,  74360.,  89272.,  104696., 66744.,  82168.,  98104.,  114552.,
      47868.,  55836.,  64060.,  72540.,  52284.,  60764.,  69500.,  78492.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 33470.,  37966.,  42590.,  47342.,
      35678.,  40430.,  45310.,  50318.,  86876.,  96636.,  106652., 116924.,
      92316.,  102588., 113116., 123900., 97756.,  108540., 119580., 130876.,
      58686.,  64206.,  69854.,  75630.,  61918.,  67694.,  73598.,  79630.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,  44.,  39.,   68.,  55.,   62.,  22.,  56.,  70.,
      124., 102.,  172., 134., 156.,  52.,  126.,  140., 244., 192., 322.,
      244., 266.,  100., 233., 266.,  450., 344.,  567., 422., 467., 148.,
      318., 348.,  556., 400., 634.,  452., 490.,  244., 521., 578., 918.,
      656., 1035., 734., 803., 244.,  510., 556.,  868., 608., 946., 660.,
      714., 354.,  740., 786., 1228., 858., 1336., 930., 984.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,
      23.,  26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,
      50.,  0.,   34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,
      58.,  148., 158., 168., 104., 110., 0.,   48.,  51.,  118., 125.,
      132., 76.,  80.,  0.,   63.,  66.,  153., 160., 167., 96.,  100.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,  396.,  448.,  138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136., 358.,  888.,  992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660., 1912., 3267., 2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202., 3032., 4814., 3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857., 5584., 6124., 1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496., 2722., 5696., 6056., 9470.,
      6624., 10322., 7192., 7616.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,   28.,   48.,   68.,  53.,  67.,   0.,    35.,   41.,  128.,
      148., 168.,  123.,  137.,  0.,   82.,  110.,  312.,  384.,  456., 306.,
      350., 0.,    222.,  250.,  672., 744., 816.,  526.,  570.,  0.,   362.,
      390., 1032., 1104., 1176., 746., 790., 0.,    347.,  369.,  864., 916.,
      968., 563.,  593.,  0.,    457., 479., 1124., 1176., 1228., 713., 743.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,  2996.,  3396.,
      956.,   2632.,  3432.,  6292.,  5384.,  9220.,  7336.,  8648.,
      2636.,  6632.,  7432.,  13252., 10664., 18100., 13896., 15208.,
      5218.,  12476., 14444., 24822., 19292., 32094., 24140., 26876.,
      8588.,  18536., 20360., 32644., 23592., 37492., 26824., 29160.,
      14146., 30332., 33836., 53910., 38684., 61182., 43532., 47804.,
      14540., 30440., 33288., 52036., 36520., 56884., 39752., 43112.,
      21340., 44680., 47528., 74356., 52040., 81124., 56552., 59912.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,  324.,  468.,  382.,  486.,  0.,    230.,  270.,
      900.,  1044., 1188., 902.,  1006., 0.,    540.,  748.,  2216., 2760.,
      3304., 2268., 2604., 0.,    1580., 1788., 4936., 5480., 6024., 3948.,
      4284., 0.,    2620., 2828., 7656., 8200., 8744., 5628., 5964., 0.,
      2630., 2798., 6596., 6996., 7396., 4326., 4558., 0.,    3470., 3638.,
      8596., 8996., 9396., 5486., 5718., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  200.,  248.,  50.,   88.,   144.,  224.,
      192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,  432.,  536.,
      512.,  624.,  150.,  208.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 301.,  400.,
      728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268.,
      1448., 1688., 1616., 1868., 518.,  592.,  1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      853.,  976.,  1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624.,
      3717., 4140., 2648., 2936., 2912., 3212., 886.,  976.,  1856., 2040.,
      2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784., 2432., 2640.,
      2640., 2856., 1306., 1416., 2736., 2960., 2912., 3144., 4558., 4912.,
      3192., 3432., 4978., 5344., 3472., 3720., 3680., 3936.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,   8.,   8.,   20.,  16.,  32.,  24.,  44.,  21.,  32.,
      27.,  40.,  0.,   0.,   11.,  24.,  13.,  28.,  48.,  80.,  56.,  92.,
      64.,  104., 51.,  72.,  57.,  80.,  0.,   0.,   26.,  56.,  38.,  72.,
      120., 192., 152., 232., 184., 272., 130., 176., 150., 200., 0.,   0.,
      86.,  136., 98.,  152., 280., 392., 312., 432., 344., 472., 230., 296.,
      250., 320., 0.,   0.,   146., 216., 158., 232., 440., 592., 472., 632.,
      504., 672., 330., 416., 350., 440., 0.,   0.,   155., 192., 165., 204.,
      392., 472., 416., 500., 440., 528., 259., 304., 273., 320., 0.,   0.,
      205., 252., 215., 264., 512., 612., 536., 640., 560., 668., 329., 384.,
      343., 400., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,  2844.,  3788.,
      3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,
      7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,  6370.,  8074.,
      11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018., 12442.,
      14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812., 15350., 17294.,
      11132., 12460., 17726., 19766., 12716., 14108., 13852., 15308., 6587.,
      7559.,  14170., 16162., 15874., 17962., 25353., 28557., 18250., 20434.,
      28917., 32265., 20626., 22906., 22714., 25090., 6914.,  7626.,  14492.,
      15948., 15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654.,
      19052., 20700., 20700., 22412., 10234., 11106., 21452., 23228., 22844.,
      24684., 35774., 38582., 25068., 26972., 39110., 42014., 27292., 29260.,
      28940., 30972.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1034., 1586., 1122., 1706., 3228., 4428.,
      3468., 4732., 3708., 5036., 2474., 3154., 2626., 3338., 0.,    0.,
      1169., 1461., 1245., 1553., 2982., 3614., 3166., 3830., 3350., 4046.,
      1985., 2341., 2093., 2465., 0.,    0.,    1549., 1921., 1625., 2013.,
      3902., 4694., 4086., 4910., 4270., 5126., 2525., 2961., 2633., 3085.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   6362.,   9866.,
      6540.,   9004.,   11978.,  15866.,  10284.,  13004.,  11724.,  14700.,
      2364.,   4700.,   7448.,   12376.,  10328.,  15768.,  19828.,  28372.,
      17816.,  23768.,  31060.,  40372.,  25304.,  31768.,  30232.,  37208.,
      8284.,   11900.,  21848.,  29336.,  24728.,  32728.,  45268.,  57652.,
      37336.,  45848.,  64180.,  77332.,  49944.,  58968.,  54872.,  64408.,
      17002.,  23194.,  41924.,  54692.,  49316.,  62852.,  86238.,  107118.,
      68228.,  82532.,  114606., 136638., 87140.,  102212., 97604.,  113444.,
      31452.,  36092.,  68184.,  77720.,  75160.,  85208.,  120916., 136372.,
      87768.,  98328.,  139828., 156052., 100376., 111448., 109400., 120984.,
      51754.,  59482.,  111428., 127268., 124964., 141572., 199710., 225198.,
      143876., 161252., 228078., 254718., 162788., 180932., 179396., 198308.,
      54620.,  60284.,  114520., 126104., 125592., 137688., 196564., 215092.,
      138200., 150808., 215476., 234772., 150808., 163928., 163928., 177560.,
      81020.,  87964.,  169880., 184024., 180952., 195608., 283444., 305812.,
      198680., 213848., 310036., 333172., 216408., 232088., 229528., 245720.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  5052.,  8412.,  15384., 22360.,
      17240., 24728., 19096., 27096., 13212., 17340., 14396., 18780., 0.,
      0.,     7740.,  12124., 8412.,  13052., 24664., 34200., 26520., 36568.,
      28376., 38936., 19132., 24540., 20316., 25980., 0.,     0.,     9070.,
      11390., 9662.,  12110., 23244., 28268., 24684., 29964., 26124., 31660.,
      15534., 18366., 16382., 19342., 0.,     0.,     12030., 14990., 12622.,
      15710., 30444., 36748., 31884., 38444., 33324., 40140., 19774., 23246.,
      20622., 24222., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5010.,
      5224.,  5442.,  5664.,  10508., 10944., 11388., 11840., 11196., 11648.,
      12108., 12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244.,
      13728., 19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880.,
      14220., 14720., 15228., 15744.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    450.,  584.,
      722.,  864.,  490.,  632.,  778.,  928.,  1468., 1760., 2060., 2368.,
      1580., 1888., 2204., 2528., 1692., 2016., 2348., 2688., 1154., 1320.,
      1490., 1664., 1226., 1400., 1578., 1760., 0.,    0.,    0.,    0.,
      549.,  620.,  693.,  768.,  585.,  660.,  737.,  816.,  1414., 1568.,
      1726., 1888., 1502., 1664., 1830., 2000., 1590., 1760., 1934., 2112.,
      949.,  1036., 1125., 1216., 1001., 1092., 1185., 1280., 0.,    0.,
      0.,    0.,    729.,  820.,  913.,  1008., 765.,  860.,  957.,  1056.,
      1854., 2048., 2246., 2448., 1942., 2144., 2350., 2560., 2030., 2240.,
      2454., 2672., 1209., 1316., 1425., 1536., 1261., 1372., 1485., 1600.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   5506.,   6218.,   6962.,   7738.,
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      39658.,  41362.,  43098.,  44866.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,   7260.,   10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,  21756.,  21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,  32796.,  37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,  43068.,  48476.,   54140.,
      43356.,   49020.,   54940.,   61116.,  6716.,   11100.,   15740.,
      20636.,   23992.,   33272.,   43064.,  53368.,  34872.,   45176.,
      55992.,   67320.,   69172.,   85396.,  102388., 120148.,  64184.,
      75512.,   87352.,   99704.,   113140., 130900., 149428.,  168724.,
      93496.,   105848.,  118712.,  132088., 112568., 125944.,  139832.,
      154232.,  28796.,   35740.,   42940.,  50396.,  78392.,   92792.,
      107704.,  123128.,  89272.,   104696., 120632., 137080.,  166132.,
      190036.,  214708.,  240148.,  139064., 155512., 172472.,  189944.,
      240820.,  266260.,  292468.,  319444., 188856., 206328.,  224312.,
      242808.,  207928.,  226424.,  245432., 264952., 60538.,   72490.,
      84826.,   97546.,   152276.,  176948., 202388., 228596.,  180884.,
      207092.,  234068.,  261812.,  319662., 360126., 401742.,  444510.,
      255572.,  283316.,  311828.,  341108., 431694., 474462.,  518382.,
      563454.,  330260.,  359540.,  389588., 420404., 371156.,  401972.,
      433556.,  465908.,  120188.,  129180., 138428., 147932.,  261176.,
      279672.,  298680.,  318200.,  288440., 307960., 327992.,  348536.,
      464884.,  494932.,  525748.,  557332., 338232., 358776.,  379832.,
      401400.,  539572.,  571156.,  603508., 636628., 388024.,  409592.,
      431672.,  454264.,  423480.,  446072., 469176., 492792.,  197626.,
      212650.,  228058.,  243850.,  426452., 457268., 488852.,  521204.,
      479636.,  511988.,  545108.,  578996., 767790., 817470.,  868302.,
      920286.,  554324.,  588212.,  622868., 658292., 879822.,  931806.,
      984942.,  1039230., 629012.,  664436., 700628., 737588.,  694484.,
      731444.,  769172.,  807668.,  211580., 222620., 233916.,  245468.,
      443960.,  466552.,  489656.,  513272., 487608., 511224.,  535352.,
      559992.,  763636.,  799828.,  836788., 874516., 537400.,  562040.,
      587192.,  612856.,  838324.,  876052., 914548., 953812.,  587192.,
      612856.,  639032.,  665720.,  639032., 665720., 692920.,  720632.,
      315580.,  329180.,  343036.,  357148., 662200., 689912.,  718136.,
      746872.,  705848.,  734584.,  763832., 793592., 1106356., 1150228.,
      1194868., 1240276., 776120.,  805880., 836152., 866936.,  1211764.,
      1257172., 1303348., 1350292., 846392., 877176., 908472.,  940280.,
      898232.,  930040.,  962360.,  995192.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      9948.,   14588.,  19484.,  24636.,  9662.,   12110.,  14686.,  17390.,
      10846.,  13550.,  16382.,  19342.,  0.,      0.,      0.,      0.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  0.,      0.,      0.,      0.,
      13820.,  19740.,  25916.,  32348.,  16188.,  22620.,  29308.,  36252.,
      53176.,  66552.,  80440.,  94840.,  59960.,  74360.,  89272.,  104696.,
      66744.,  82168.,  98104.,  114552., 47868.,  55836.,  64060.,  72540.,
      52284.,  60764.,  69500.,  78492.,  0.,      0.,      0.,      0.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 0.,      0.,      0.,      0.,
      33470.,  37966.,  42590.,  47342.,  35678.,  40430.,  45310.,  50318.,
      86876.,  96636.,  106652., 116924., 92316.,  102588., 113116., 123900.,
      97756.,  108540., 119580., 130876., 58686.,  64206.,  69854.,  75630.,
      61918.,  67694.,  73598.,  79630.,  0.,      0.,      0.,      0.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,  23.,  44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,  76.,  133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140., 156., 268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265., 304., 507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380., 416., 658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625., 694., 1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620., 676., 1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434., 900., 956., 1483., 1028., 1591., 1100., 1699., 1172., 1240.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   65.,  70.,  172., 184., 325., 256., 272., 156.,
      165., 0.,   64.,  68.,  152., 161., 266., 197., 208., 114., 120., 0.,
      84.,  88.,  197., 206., 341., 252., 263., 144., 150., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,  148.,  295.,   272.,  481.,   396.,  667.,   520.,  588.,
      152.,  396.,  516.,  920.,   764.,  1292.,  1012., 1664.,  1260., 1476.,
      412.,  996.,  1116., 1940.,  1524., 2552.,  1932., 3164.,  2340., 2556.,
      823.,  1904., 2204., 3705.,  2816., 4623.,  3428., 5541.,  4040., 4484.,
      1352., 2876., 3156., 5000.,  3564., 5612.,  3972., 6224.,  4380., 4756.,
      2233., 4724., 5264., 8295.,  5876., 9213.,  6488., 10131., 7100., 7784.,
      2292., 4756., 5196., 8060.,  5604., 8672.,  6012., 9284.,  6420., 6956.,
      3352., 6956., 7396., 11480., 7964., 12332., 8532., 13184., 9100., 9636.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,   11.,  28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,  41.,  128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,  124., 340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268., 304., 780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      448., 484., 1220., 1308., 2348., 1876., 1996., 1156., 1224., 0.,
      473., 503., 1132., 1200., 1993., 1484., 1568., 863.,  909.,  0.,
      623., 653., 1472., 1540., 2563., 1904., 1988., 1093., 1139., 0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,  2020.,  3602.,   2996.,  5066.,  3972.,
      4500.,  1060.,  2840.,  3768.,  6796.,  5720.,   9724.,  7672.,  12652.,
      9624.,  11320., 3060.,  7480.,  8408.,  14716.,  11640., 19564., 14872.,
      24412., 18104., 19800., 6170.,  14380., 16732.,  28254., 21580., 35526.,
      26428., 42798., 31276., 34780., 10500., 22360.,  24568., 38956., 27800.,
      43804., 31032., 48652., 34264., 37240., 17330.,  36700., 40972., 64614.,
      45820., 71886., 50668., 79158., 55516., 60940.,  17940., 37240., 40728.,
      63196., 43960., 68044., 47192., 72892., 50424.,  54680., 26340., 54680.,
      58168., 90316., 62680., 97084., 67192., 103852., 71704., 75960.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,  782.,  0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454., 1622., 0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604., 4132., 0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244., 6772., 0.,
      3300., 3572., 9144.,  9816.,  17788., 14328., 15256., 8884., 9412., 0.,
      3630., 3862., 8724.,  9252.,  15410., 11508., 12164., 6710., 7070., 0.,
      4790., 5022., 11364., 11892., 19850., 14788., 15444., 8510., 8870., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  299.,  368.,  236.,  284.,  268.,  320.,
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1616., 1736., 3356., 3600., 3572., 3824., 5548., 5932., 3852., 4112.,
      5968., 6364., 4132., 4400., 6388., 6796., 4412., 4688., 4676., 4960.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,   8.,    8.,   20.,   16.,  32.,   29.,   56.,  36.,
      56.,   52.,   76.,  35.,   48.,  45.,   60.,  0.,    0.,    11.,  24.,
      13.,   28.,   48.,  80.,   56.,  92.,   119., 176.,  116.,  156., 132.,
      176.,  85.,   108., 95.,   120., 0.,    0.,   28.,   60.,   44.,  80.,
      132.,  208.,  172., 256.,  328., 460.,  292., 384.,  348.,  448., 212.,
      264.,  244.,  300., 0.,    0.,   108.,  160., 124.,  180.,  332., 448.,
      372.,  496.,  688., 880.,  572., 704.,  628., 768.,  372.,  444., 404.,
      480.,  0.,    0.,   188.,  260., 204.,  280., 532.,  688.,  572., 736.,
      1048., 1300., 852., 1024., 908., 1088., 532., 624.,  564.,  660., 0.,
      0.,    217.,  256., 231.,  272., 524.,  608., 556.,  644.,  929., 1064.,
      696.,  788.,  736., 832.,  407., 456.,  429., 480.,  0.,    0.,   287.,
      336.,  301.,  352., 684.,  788., 716.,  824., 1199., 1364., 896., 1008.,
      936.,  1052., 517., 576.,  539., 600.,  0.,   0.,    0.,    0.,   0.,
      0.,    0.,    0.,   0.,    0.,   0.,    0.,   0.,    0.,    0.,   0.,
      0.,    0.,    0.,   0.,    0.,   0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1294.,  1766.,  3252.,  4228.,  3684.,
      4724.,  6554.,  8162.,  5268.,  6372.,  8930.,  10634., 6852.,  8020.,
      11306., 13106., 8436.,  9668.,  9252.,  10548., 2671.,  3499.,  6338.,
      8042.,  7466.,  9266.,  12741., 15513., 9842.,  11738., 16305., 19221.,
      12218., 14210., 19869., 22929., 14594., 16682., 16298., 18482., 4934.,
      5566.,  10532., 11828., 11604., 12964., 18434., 20522., 13188., 14612.,
      20810., 22994., 14772., 16260., 23186., 25466., 16356., 17908., 17812.,
      19428., 8131.,  9199.,  17258., 19442., 19346., 21626., 30561., 34053.,
      21722., 24098., 34125., 37761., 24098., 26570., 37689., 41469., 26474.,
      29042., 29138., 31802., 8574.,  9366.,  17812., 19428., 19524., 21204.,
      30314., 32882., 21108., 22852., 32690., 35354., 22692., 24500., 35066.,
      37826., 24276., 26148., 26372., 28308., 12694., 13646., 26372., 28308.,
      28084., 30084., 43634., 46682., 30308., 32372., 46970., 50114., 32532.,
      34660., 50306., 53546., 34756., 36948., 36852., 39108.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  187.,  391.,
      254.,  406.,  374.,  558.,  257.,  357.,  333.,  449.,  0.,    0.,
      65.,   165.,  77.,   193.,  326.,  574.,  382.,  662.,  847.,  1291.,
      854.,  1166., 974.,  1318., 637.,  817.,  713.,  909.,  0.,    0.,
      166.,  414.,  286.,  566.,  916.,  1508., 1220., 1876., 2378., 3410.,
      2164., 2884., 2596., 3380., 1598., 2006., 1846., 2286., 0.,    0.,
      766.,  1174., 886.,  1326., 2436., 3348., 2740., 3716., 5138., 6650.,
      4324., 5364., 4756., 5860., 2838., 3406., 3086., 3686., 0.,    0.,
      1366., 1934., 1486., 2086., 3956., 5188., 4260., 5556., 7898., 9890.,
      6484., 7844., 6916., 8340., 4078., 4806., 4326., 5086., 0.,    0.,
      1661., 1969., 1769., 2093., 4030., 4694., 4278., 4974., 7171., 8239.,
      5390., 6118., 5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,
      2201., 2589., 2309., 2713., 5270., 6094., 5518., 6374., 9271., 10579.,
      6950., 7838., 7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   6362.,   9866.,
      6540.,   9004.,   11978.,  15866.,  10284.,  13004.,  17594.,  21866.,
      14028.,  17004.,  15980.,  19212.,  2700.,   5164.,   8120.,   13304.,
      11512.,  17208.,  21604.,  30532.,  19000.,  25208.,  32836.,  42532.,
      26488.,  33208.,  44068.,  54532.,  33976.,  41208.,  40440.,  48184.,
      9900.,   13644.,  25080.,  32824.,  28472.,  36728.,  50884.,  63652.,
      41080.,  49848.,  69796.,  83332.,  53688.,  62968.,  88708.,  103012.,
      66296.,  76088.,  72760.,  83064.,  20570.,  27146.,  49060.,  62596.,
      57988.,  72292.,  99246.,  121278., 76900.,  91972.,  127614., 150798.,
      95812.,  111652., 155982., 180318., 114724., 131332., 128260., 145636.,
      38860.,  43884.,  83000.,  93304.,  91512.,  102328., 145444., 162052.,
      104120., 115448., 164356., 181732., 116728., 128568., 183268., 201412.,
      129336., 141688., 140920., 153784., 64010.,  72506.,  135940., 153316.,
      152548., 170692., 241086., 268878., 171460., 190372., 269454., 298398.,
      190372., 210052., 297822., 327918., 209284., 229732., 230500., 251716.,
      67820.,  74124.,  140920., 153784., 154552., 167928., 240004., 260452.,
      167160., 181048., 258916., 280132., 179768., 194168., 277828., 299812.,
      192376., 207288., 209080., 224504., 100620., 108204., 209080., 224504.,
      222712., 238648., 346084., 370372., 240440., 256888., 372676., 397732.,
      258168., 275128., 399268., 425092., 275896., 293368., 292600., 310584.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1322.,
      2906.,  1900.,  3084.,  2828.,  4268.,  1966.,  2750.,  2558.,  3470.,
      0.,     0.,     430.,   1214.,  510.,   1422.,  2380.,  4332.,  2796.,
      5004.,  6362.,  9866.,  6540.,  9004.,  7468.,  10188., 4926.,  6350.,
      5518.,  7070.,  0.,     0.,     1100.,  3052.,  2028.,  4236.,  6776.,
      11448., 9144.,  14328., 18052., 26212., 16632., 22328., 20024., 26232.,
      12396., 15628., 14348., 17836., 0.,     0.,     5740.,  8972.,  6668.,
      10156., 18616., 25848., 20984., 28728., 39652., 51652., 33592., 41848.,
      36984., 45752., 22156., 26668., 24108., 28876., 0.,     0.,     10380.,
      14892., 11308., 16076., 30456., 40248., 32824., 43128., 61252., 77092.,
      50552., 61368., 53944., 65272., 31916., 37708., 33868., 39916., 0.,
      0.,     12990., 15438., 13838., 16414., 31596., 36876., 33548., 39084.,
      56330., 64826., 42412., 48204., 44876., 50924., 24910., 27998., 26270.,
      29486., 0.,     0.,     17230., 20318., 18078., 21294., 41356., 47916.,
      43308., 50124., 72890., 83306., 54732., 61804., 57196., 64524., 31710.,
      35438., 33070., 36926., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6230.,  6464.,  6702.,  6944.,  12948., 13424., 13908., 14400.,
      13796., 14288., 14788., 15296., 21442., 22192., 22954., 23728., 14900.,
      15408., 15924., 16448., 23098., 23872., 24658., 25456., 16004., 16528.,
      17060., 17600., 24754., 25552., 26362., 27184., 17108., 17648., 18196.,
      18752., 18148., 18704., 19268., 19840.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      614.,  752.,  894.,  1040., 670.,  816.,  966.,  1120., 1828., 2128.,
      2436., 2752., 1972., 2288., 2612., 2944., 3706., 4192., 4690., 5200.,
      3076., 3408., 3748., 4096., 3284., 3632., 3988., 4352., 1950., 2128.,
      2310., 2496., 2070., 2256., 2446., 2640., 0.,    0.,    0.,    0.,
      793.,  868.,  945.,  1024., 845.,  924.,  1005., 1088., 1934., 2096.,
      2262., 2432., 2054., 2224., 2398., 2576., 3455., 3716., 3983., 4256.,
      2606., 2784., 2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628.,
      1725., 1824., 1617., 1716., 1817., 1920., 0.,    0.,    0.,    0.,
      1053., 1148., 1245., 1344., 1105., 1204., 1305., 1408., 2534., 2736.,
      2942., 3152., 2654., 2864., 3078., 3296., 4475., 4796., 5123., 5456.,
      3366., 3584., 3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068.,
      2185., 2304., 2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   8287.,   9307.,   10375.,  11491.,
      6658.,   7370.,   8114.,   8890.,   7602.,   8378.,   9186.,   10026.,
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      49378.,  51242.,  53138.,  55066.,  102644., 106436., 110292., 114212.,
      109396., 113316., 117300., 121348., 170054., 176030., 182102., 188270.,
      118196., 122244., 126356., 130532., 183254., 189422., 195686., 202046.,
      126996., 131172., 135412., 139716., 196454., 202814., 209270., 215822.,
      135796., 140100., 144468., 148900., 144084., 148516., 153012., 157572.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2914.,  3754.,
      4626.,  5530.,  8436.,  10180., 11988., 13860., 9556.,  11428., 13364.,
      15364., 18374., 21278., 24278., 27374., 15796., 17796., 19860., 21988.,
      17428., 19556., 21748., 24004., 10530., 11626., 12754., 13914., 11474.,
      12634., 13826., 15050., 0.,     0.,     0.,     0.,     4642.,  5738.,
      6866.,  8026.,  5074.,  6234.,  7426.,  8650.,  14036., 16420., 18868.,
      21380., 15156., 17668., 20244., 22884., 28694., 32558., 36518., 40574.,
      23956., 26596., 29300., 32068., 25588., 28356., 31188., 34084., 15250.,
      16666., 18114., 19594., 16194., 17674., 19186., 20730., 0.,     0.,
      0.,     0.,     6197.,  6793.,  7405.,  8033.,  6605.,  7233.,  7877.,
      8537.,  15154., 16442., 17762., 19114., 16098., 17450., 18834., 20250.,
      27127., 29203., 31327., 33499., 20498., 21914., 23362., 24842., 21698.,
      23178., 24690., 26234., 12077., 12833., 13605., 14393., 12741., 13529.,
      14333., 15153., 0.,     0.,     0.,     0.,     8237.,  8993.,  9765.,
      10553., 8645.,  9433.,  10237., 11057., 19874., 21482., 23122., 24794.,
      20818., 22490., 24194., 25930., 35167., 37723., 40327., 42979., 26498.,
      28234., 30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313.,
      17245., 18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      65306.,   73418.,   81914.,   90794.,   52572.,   58236.,   64156.,
      70332.,   60060.,   66236.,   72668.,   79356.,   7900.,    12540.,
      17436.,   22588.,   26360.,   36152.,   46456.,   57272.,   39288.,
      50104.,   61432.,   73272.,   75796.,   92788.,   110548.,  129076.,
      68600.,   80440.,   92792.,   105656.,  119764.,  138292.,  157588.,
      177652.,  97912.,   110776.,  124152.,  138040.,  163732.,  183796.,
      204628.,  226228.,  127224.,  141112.,  155512.,  170424.,  152440.,
      167352.,  182776.,  198712.,  35100.,   42300.,   49756.,   57468.,
      91000.,   105912.,  121336.,  137272.,  103928.,  119864.,  136312.,
      153272.,  188116.,  212788.,  238228.,  264436.,  153720.,  170680.,
      188152.,  206136.,  262804.,  289012.,  315988.,  343732.,  203512.,
      221496.,  239992.,  259000.,  337492.,  365236.,  393748.,  423028.,
      253304.,  272312.,  291832.,  311864.,  278520.,  298552.,  319096.,
      340152.,  74330.,   87050.,   100154.,  113642.,  179860.,  206068.,
      233044.,  260788.,  214612.,  242356.,  270868.,  300148.,  370254.,
      413022.,  456942.,  502014.,  289300.,  318580.,  348628.,  379444.,
      482286.,  527358.,  573582.,  620958.,  363988.,  394804.,  426388.,
      458740.,  594318.,  641694.,  690222.,  739902.,  438676.,  471028.,
      504148.,  538036.,  491860.,  525748.,  560404.,  595828.,  149340.,
      159100.,  169116.,  179388.,  319480.,  339512.,  360056.,  381112.,
      352888.,  373944.,  395512.,  417592.,  561556.,  593908.,  627028.,
      660916.,  402680.,  424760.,  447352.,  470456.,  636244.,  670132.,
      704788.,  740212.,  452472.,  475576.,  499192.,  523320.,  710932.,
      746356.,  782548.,  819508.,  502264.,  526392.,  551032.,  576184.,
      547960.,  573112.,  598776.,  624952.,  245690.,  262250.,  279194.,
      296522.,  522580.,  556468.,  591124.,  626548.,  588052.,  623476.,
      659668.,  696628.,  930414.,  984702.,  1040142., 1096734., 662740.,
      699700.,  737428.,  775924.,  1042446., 1099038., 1156782., 1215678.,
      737428.,  775924.,  815188.,  855220.,  1154478., 1213374., 1273422.,
      1334622., 812116.,  852148.,  892948.,  934516.,  896020.,  937588.,
      979924.,  1023028., 263580.,  275900.,  288476.,  301308.,  547960.,
      573112.,  598776.,  624952.,  601848.,  628024.,  654712.,  681912.,
      934996.,  975028.,  1015828., 1057396., 651640.,  678840.,  706552.,
      734776.,  1009684., 1051252., 1093588., 1136692., 701432.,  729656.,
      758392.,  787640.,  1084372., 1127476., 1171348., 1215988., 751224.,
      780472.,  810232.,  840504.,  817400.,  847672.,  878456.,  909752.,
      393180.,  408060.,  423196.,  438588.,  817400.,  847672.,  878456.,
      909752.,  871288.,  902584.,  934392.,  966712.,  1354516., 1402228.,
      1450708., 1499956., 941560.,  973880.,  1006712., 1040056., 1459924.,
      1509172., 1559188., 1609972., 1011832., 1045176., 1079032., 1113400.,
      1565332., 1616116., 1667668., 1719988., 1082104., 1116472., 1151352.,
      1186744., 1148280., 1183672., 1219576., 1255992.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3578.,   6314.,   9434.,   12938.,  6300.,   8380.,   10716.,  13308.,
      9692.,   12284.,  15132.,  18236.,  6974.,   8398.,   9950.,   11630.,
      9182.,   10862.,  12670.,  14606.,  0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      21338.,  27914.,  34874.,  42218.,  23260.,  27900.,  32796.,  37948.,
      26652.,  31804.,  37212.,  42876.,  18014.,  20718.,  23550.,  26510.,
      20222.,  23182.,  26270.,  29486.,  0.,      0.,      0.,      0.,
      2140.,   5756.,   9628.,   13756.,  5532.,   9660.,   14044.,  18684.,
      21624.,  30392.,  39672.,  49464.,  30456.,  40248.,  50552.,  61368.,
      62548.,  78004.,  94228.,  111220., 59768.,  70584.,  81912.,  93752.,
      72696.,  84536.,  96888.,  109752., 45724.,  51900.,  58332.,  65020.,
      53212.,  59900.,  66844.,  74044.,  0.,      0.,      0.,      0.,
      19100.,  25276.,  31708.,  38396.,  22492.,  29180.,  36124.,  43324.,
      65784.,  79672.,  94072.,  108984., 74616.,  89528.,  104952., 120888.,
      144148., 167284., 191188., 215860., 124408., 140344., 156792., 173752.,
      137336., 154296., 171768., 189752., 83164.,  91900.,  100892., 110140.,
      90652.,  99900.,  109404., 119164., 0.,      0.,      0.,      0.,
      36060.,  44796.,  53788.,  63036.,  39452.,  48700.,  58204.,  67964.,
      109944., 128952., 148472., 168504., 118776., 138808., 159352., 180408.,
      225748., 256564., 288148., 320500., 189048., 210104., 231672., 253752.,
      201976., 224056., 246648., 269752., 120604., 131900., 143452., 155260.,
      128092., 139900., 151964., 164284., 0.,      0.,      0.,      0.,
      48990.,  53742.,  58622.,  63630.,  52222.,  57230.,  62366.,  67630.,
      119964., 130236., 140764., 151548., 127452., 138236., 149276., 160572.,
      214970., 231530., 248474., 265802., 162588., 173884., 185436., 197244.,
      172124., 183932., 195996., 208316., 95870.,  101902., 108062., 114350.,
      101150., 107438., 113854., 120398., 0.,      0.,      0.,      0.,
      65150.,  71182.,  77342.,  83630.,  68382.,  74670.,  81086.,  87630.,
      157404., 170236., 183324., 196668., 164892., 178236., 191836., 205692.,
      278810., 299210., 319994., 341162., 210268., 224124., 238236., 252604.,
      219804., 234172., 248796., 263676., 122270., 129582., 137022., 144590.,
      127550., 135118., 142814., 150638., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,  39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134., 156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266., 450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634., 452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510., 556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968., 1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938., 1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  59.,  68.,  169., 190., 211., 128., 140., 78.,
      86.,  194., 212., 230., 130., 140., 118., 126., 284., 302., 320., 180.,
      190., 80.,  85.,  186., 197., 208., 114., 120., 105., 110., 241., 252.,
      263., 144., 150., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,  148.,  295.,   272.,  481.,   396.,  448.,   368.,  472.,
      854.,  720.,  1226.,  968.,  1136.,  888.,  992.,   1754., 1400.,
      2366., 1808., 1976.,  1660., 1912.,  3267., 2524.,  4185., 3136.,
      3484., 2392., 2624.,  4202., 3032.,  4814., 3440.,  3736., 3916.,
      4360., 6939., 4972.,  7857., 5584.,  6124., 3896.,  4256., 6650.,
      4664., 7262., 5072.,  5496., 6172.,  6808., 10611., 7420., 11529.,
      8032., 8764., 5400.,  5888., 9098.,  6296., 9710.,  6704., 7256.,
      7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,   1044.,  2138.,   2020.,  3602.,   2996.,  3396.,  2632.,  3432.,
      6292.,  5384.,  9220.,   7336.,  8648.,   6632.,  7432.,  13252., 10664.,
      18100., 13896., 15208.,  12476., 14444.,  24822., 19292., 32094., 24140.,
      26876., 18536., 20360.,  32644., 23592.,  37492., 26824., 29160., 30332.,
      33836., 53910., 38684.,  61182., 43532.,  47804., 30440., 33288., 52036.,
      36520., 56884., 39752.,  43112., 48188.,  53228., 82998., 58076., 90270.,
      62924., 68732., 42344.,  46216., 71428.,  49448., 76276., 52680., 57064.,
      61704., 65576., 101428., 70088., 108196., 74600., 78984.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2810.,  3314.,  8668.,  9868.,  11068., 6938.,  7634.,  4300.,
      4764.,  10888., 11944., 13000., 7436.,  8028.,  6620.,  7084.,  16168.,
      17224., 18280., 10396., 10988., 4630.,  4926.,  10852., 11508., 12164.,
      6710.,  7070.,  6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,  209.,  272.,
      176.,  220.,  200.,  248.,  144.,  224.,  192.,  280.,  358.,  496.,
      312.,  408.,  538.,  688.,  432.,  536.,  512.,  624.,  384.,  504.,
      432.,  560.,  778.,  976.,  632.,  768.,  1078., 1288., 832.,  976.,
      912.,  1064., 728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376.,
      1917., 2268., 1448., 1688., 1616., 1868., 1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624., 3717., 4140.,
      2648., 2936., 2912., 3212., 1856., 2040., 2032., 2224., 3178., 3472.,
      2232., 2432., 3478., 3784., 2432., 2640., 2640., 2856., 2936., 3236.,
      3248., 3560., 5067., 5544., 3548., 3872., 5517., 6012., 3848., 4184.,
      4208., 4556., 2592., 2808., 2832., 3056., 4378., 4720., 3032., 3264.,
      4678., 5032., 3232., 3472., 3504., 3752., 3792., 4048., 4032., 4296.,
      6238., 6640., 4312., 4584., 6658., 7072., 4592., 4872., 4864., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,  32.,  24.,  44.,   21.,
      32.,   27.,   40.,   11.,   24.,   13.,   28.,  48.,  80.,  56.,   92.,
      64.,   104.,  51.,   72.,   57.,   80.,   26.,  56.,  38.,  72.,   120.,
      192.,  152.,  232.,  184.,  272.,  130.,  176., 150., 200., 86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344., 472., 230., 296.,  250.,
      320.,  155.,  236.,  185.,  272.,  496.,  676., 568., 760., 640.,  844.,
      407.,  512.,  449.,  560.,  254.,  312.,  282., 344., 648., 776.,  712.,
      848.,  776.,  920.,  446.,  520.,  482.,  560., 394., 472., 422.,  504.,
      968.,  1136., 1032., 1208., 1096., 1280., 626., 720., 662., 760.,  279.,
      320.,  297.,  340.,  656.,  744.,  696.,  788., 736., 832., 407.,  456.,
      429.,  480.,  369.,  420.,  387.,  440.,  856., 964., 896., 1008., 936.,
      1052., 517.,  576.,  539.,  600.,  0.,    0.,   0.,   0.,   0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,   574.,   382.,   662.,   847.,   1291.,  854.,   1166.,  1555.,
      2047.,  1326.,  1670.,  1510.,  1886.,  1004.,  1628.,  1372.,  2060.,
      2606.,  3686.,  2316.,  3068.,  4022.,  5198.,  3260.,  4076.,  3884.,
      4764.,  2844.,  3788.,  3212.,  4220.,  5846.,  7406.,  4796.,  5868.,
      8222.,  9878.,  6380.,  7516.,  7004.,  8204.,  5434.,  7042.,  6370.,
      8074.,  11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018.,
      12442., 14434., 8668.,  9868.,  9548.,  10812., 15350., 17294., 11132.,
      12460., 17726., 19766., 12716., 14108., 13852., 15308., 14170., 16162.,
      15874., 17962., 25353., 28557., 18250., 20434., 28917., 32265., 20626.,
      22906., 22714., 25090., 14492., 15948., 15884., 17404., 24854., 27182.,
      17468., 19052., 27230., 29654., 19052., 20700., 20700., 22412., 22906.,
      25282., 25378., 27850., 39609., 43389., 27754., 30322., 43173., 47097.,
      30130., 32794., 32986., 35746., 20316., 22028., 22220., 23996., 34358.,
      37070., 23804., 25644., 36734., 39542., 25388., 27292., 27548., 29516.,
      29836., 31868., 31740., 33836., 49118., 52310., 33964., 36124., 52454.,
      55742., 36188., 38412., 38348., 40636.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  65.,   165.,  77.,   193.,  326.,  574.,
      382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,  154.,  386.,
      242.,  506.,  828.,  1388., 1068., 1692., 1308., 1996., 954.,  1314.,
      1106., 1498., 594.,  986.,  682.,  1106., 2028., 2908., 2268., 3212.,
      2508., 3516., 1714., 2234., 1866., 2418., 1087., 1723., 1315., 1999.,
      3626., 5042., 4178., 5690., 4730., 6338., 3055., 3883., 3379., 4255.,
      1922., 2378., 2138., 2626., 4940., 5948., 5436., 6508., 5932., 7068.,
      3426., 4010., 3706., 4322., 3002., 3618., 3218., 3866., 7420., 8748.,
      7916., 9308., 8412., 9868., 4826., 5570., 5106., 5882., 2153., 2477.,
      2293., 2633., 5078., 5774., 5390., 6118., 5702., 6462., 3161., 3549.,
      3333., 3737., 2853., 3257., 2993., 3413., 6638., 7494., 6950., 7838.,
      7262., 8182., 4021., 4489., 4193., 4677., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,   9004.,
      11978.,  15866.,  10284.,  13004.,  11724.,  14700.,  7448.,   12376.,
      10328.,  15768.,  19828.,  28372.,  17816.,  23768.,  31060.,  40372.,
      25304.,  31768.,  30232.,  37208.,  21848.,  29336.,  24728.,  32728.,
      45268.,  57652.,  37336.,  45848.,  64180.,  77332.,  49944.,  58968.,
      54872.,  64408.,  41924.,  54692.,  49316.,  62852.,  86238.,  107118.,
      68228.,  82532.,  114606., 136638., 87140.,  102212., 97604.,  113444.,
      68184.,  77720.,  75160.,  85208.,  120916., 136372., 87768.,  98328.,
      139828., 156052., 100376., 111448., 109400., 120984., 111428., 127268.,
      124964., 141572., 199710., 225198., 143876., 161252., 228078., 254718.,
      162788., 180932., 179396., 198308., 114520., 126104., 125592., 137688.,
      196564., 215092., 138200., 150808., 215476., 234772., 150808., 163928.,
      163928., 177560., 180932., 199844., 200612., 220292., 313182., 343278.,
      219524., 239972., 341550., 372798., 238436., 259652., 261188., 283172.,
      160856., 174488., 176024., 190168., 272212., 293812., 188632., 203288.,
      291124., 313492., 201240., 216408., 218456., 234136., 236696., 252888.,
      251864., 268568., 389812., 415252., 269592., 286808., 416404., 442612.,
      287320., 305048., 304536., 322776.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  430.,   1214.,  510.,   1422.,
      2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,  4094.,  3134.,
      4558.,  1020.,  2844.,  1692.,  3772.,  6104.,  10520., 7960.,  12888.,
      9816.,  15256., 7292.,  10140., 8476.,  11580., 4380.,  7484.,  5052.,
      8412.,  15384., 22360., 17240., 24728., 19096., 27096., 13212., 17340.,
      14396., 18780., 8090.,  13130., 9866.,  15290., 27652., 38884., 31972.,
      43972., 36292., 49060., 23642., 30218., 26186., 33146., 14940., 18556.,
      16636., 20508., 38552., 46552., 42456., 50968., 46360., 55384., 26844.,
      31484., 29052., 33948., 23420., 28316., 25116., 30268., 58072., 68632.,
      61976., 73048., 65880., 77464., 37884., 43804., 40092., 46268., 16910.,
      19486., 18014., 20718., 39948., 45484., 42412., 48204., 44876., 50924.,
      24910., 27998., 26270., 29486., 22430., 25646., 23534., 26878., 52268.,
      59084., 54732., 61804., 57196., 64524., 31710., 35438., 33070., 36926.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 11162., 11744.,
      12338., 12944., 12386., 12992., 13610., 14240., 19341., 20268., 21213.,
      22176., 13562., 14192., 14834., 15488., 21105., 22068., 23049., 24048.,
      14738., 15392., 16058., 16736., 16154., 16832., 17522., 18224., 9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      14668., 15168., 15676., 16192., 15612., 16128., 16652., 17184., 24166.,
      24952., 25750., 26560., 16716., 17248., 17788., 18336., 25822., 26632.,
      27454., 28288., 17820., 18368., 18924., 19488., 18892., 19456., 20028.,
      20608.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  21.,   44.,
      69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,  254.,  320.,
      158.,  224.,  294.,  368.,  182.,  256.,  334.,  416.,  165.,  204.,
      245.,  288.,  185.,  228.,  273.,  320.,  50.,   104.,  162.,  224.,
      90.,   152.,  218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,
      764.,  928.,  572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,
      506.,  600.,  698.,  800.,  250.,  344.,  442.,  544.,  290.,  392.,
      498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248., 1484., 1728.,
      1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184., 866.,  1000.,
      1138., 1280., 467.,  620.,  779.,  944.,  575.,  740.,  911.,  1088.,
      1642., 1984., 2338., 2704., 1906., 2272., 2650., 3040., 2170., 2560.,
      2962., 3376., 1427., 1628., 1835., 2048., 1583., 1796., 2015., 2240.,
      906.,  1016., 1130., 1248., 1010., 1128., 1250., 1376., 2348., 2592.,
      2844., 3104., 2588., 2848., 3116., 3392., 2828., 3104., 3388., 3680.,
      1642., 1784., 1930., 2080., 1778., 1928., 2082., 2240., 1426., 1576.,
      1730., 1888., 1530., 1688., 1850., 2016., 3548., 3872., 4204., 4544.,
      3788., 4128., 4476., 4832., 4028., 4384., 4748., 5120., 2322., 2504.,
      2690., 2880., 2458., 2648., 2842., 3040., 1037., 1116., 1197., 1280.,
      1105., 1188., 1273., 1360., 2454., 2624., 2798., 2976., 2606., 2784.,
      2966., 3152., 2758., 2944., 3134., 3328., 1533., 1628., 1725., 1824.,
      1617., 1716., 1817., 1920., 1377., 1476., 1577., 1680., 1445., 1548.,
      1653., 1760., 3214., 3424., 3638., 3856., 3366., 3584., 3806., 4032.,
      3518., 3744., 3974., 4208., 1953., 2068., 2185., 2304., 2037., 2156.,
      2277., 2400., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      5527.,   6451.,   7423.,   8443.,   4818.,   5466.,   6146.,   6858.,
      5506.,   6218.,   6962.,   7738.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      10020.,  11828.,  13700.,  15636.,  11396.,  13332.,  15332.,  17396.,
      21134.,  24134.,  27230.,  30422.,  17636.,  19700.,  21828.,  24020.,
      30494.,  33686.,  36974.,  40358.,  23876.,  26068.,  28324.,  30644.,
      26276.,  28596.,  30980.,  33428.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      32932.,  35252.,  37636.,  40084.,  36356.,  38804.,  41316.,  43892.,
      58574.,  62342.,  66206.,  70166.,  42596.,  45172.,  47812.,  50516.,
      67934.,  71894.,  75950.,  80102.,  48836.,  51540.,  54308.,  57140.,
      53284.,  56116.,  59012.,  61972.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      55844.,  58676.,  61572.,  64532.,  61316.,  64276.,  67300.,  70388.,
      96014.,  100550., 105182., 109910., 67556.,  70644.,  73796.,  77012.,
      105374., 110102., 114926., 119846., 73796.,  77012.,  80292.,  83636.,
      80292.,  83636.,  87044.,  90516.,  88150.,  92782.,  97510.,  102334.,
      97894.,  102718., 107638., 112654., 152901., 160281., 167805., 175473.,
      107254., 112270., 117382., 122590., 166941., 174609., 182421., 190377.,
      116614., 121822., 127126., 132526., 127894., 133294., 138790., 144382.,
      78756.,  82100.,  85508.,  88980.,  86276.,  89748.,  93284.,  96884.,
      133454., 138758., 144158., 149654., 92516.,  96116.,  99780.,  103508.,
      142814., 148310., 153902., 159590., 98756.,  102484., 106276., 110132.,
      107300., 111156., 115076., 119060., 116356., 120340., 124388., 128500.,
      123876., 127988., 132164., 136404., 191774., 198038., 204398., 210854.,
      132676., 136916., 141220., 145588., 204974., 211430., 217982., 224630.,
      141476., 145844., 150276., 154772., 150020., 154516., 159076., 163700.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3439.,  4651.,  5911.,  7219.,  4279.,
      5587.,  6943.,  8347.,  12470., 15182., 17990., 20894., 14534., 17438.,
      20438., 23534., 16598., 19694., 22886., 26174., 11023., 12619., 14263.,
      15955., 12247., 13939., 15679., 17467., 7034.,  7906.,  8810.,  9746.,
      7850.,  8786.,  9754.,  10754., 18308., 20244., 22244., 24308., 20196.,
      22260., 24388., 26580., 22084., 24276., 26532., 28852., 12858., 13986.,
      15146., 16338., 13930., 15122., 16346., 17602., 11114., 12306., 13530.,
      14786., 11930., 13186., 14474., 15794., 27748., 30324., 32964., 35668.,
      29636., 32340., 35108., 37940., 31524., 34356., 37252., 40212., 18218.,
      19666., 21146., 22658., 19290., 20802., 22346., 23922., 8141.,  8769.,
      9413.,  10073., 8677.,  9337.,  10013., 10705., 19298., 20650., 22034.,
      23450., 20498., 21914., 23362., 24842., 21698., 23178., 24690., 26234.,
      12077., 12833., 13605., 14393., 12741., 13529., 14333., 15153., 10821.,
      11609., 12413., 13233., 11357., 12177., 13013., 13865., 25298., 26970.,
      28674., 30410., 26498., 28234., 30002., 31802., 27698., 29498., 31330.,
      33194., 15397., 16313., 17245., 18193., 16061., 17009., 17973., 18953.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,    10876.,   14748.,   18876.,   8604.,    12732.,   17116.,
      21756.,   21338.,   27914.,   34874.,   42218.,   23260.,   27900.,
      32796.,   37948.,   43322.,   50666.,   58394.,   66506.,   37916.,
      43068.,   48476.,   54140.,   43356.,   49020.,   54940.,   61116.,
      23992.,   33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,   69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,   99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848.,  118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,   92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080.,  166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472.,  189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328.,  224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276.,  176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812.,  319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828.,  341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540.,  389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176.,  279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536.,  464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832.,  401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592.,  431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452.,  457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996.,  767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868.,  658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436.,  700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      700628.,  737588.,  775316.,  813812.,  778388.,  816884.,  856148.,
      896180.,  1215918., 1274814., 1334862., 1396062., 853076.,  893108.,
      933908.,  975476.,  1327950., 1389150., 1451502., 1515006., 927764.,
      969332.,  1011668., 1054772., 1017812., 1060916., 1104788., 1149428.,
      626744.,  653432.,  680632.,  708344.,  686776.,  714488.,  742712.,
      771448.,  1062388., 1104724., 1147828., 1191700., 736568.,  765304.,
      794552.,  824312.,  1137076., 1180948., 1225588., 1270996., 786360.,
      816120.,  846392.,  877176.,  854584.,  885368.,  916664.,  948472.,
      926904.,  958712.,  991032.,  1023864., 986936.,  1019768., 1053112.,
      1086968., 1527988., 1578004., 1628788., 1680340., 1057208., 1091064.,
      1125432., 1160312., 1633396., 1684948., 1737268., 1790356., 1127480.,
      1162360., 1197752., 1233656., 1195704., 1231608., 1268024., 1304952.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   830.,    2254.,   3806.,   5486.,
      990.,    2670.,   4478.,   6414.,   7260.,   10876.,  14748.,  18876.,
      8604.,   12732.,  17116.,  21756.,  9948.,   14588.,  19484.,  24636.,
      9662.,   12110.,  14686.,  17390.,  10846.,  13550.,  16382.,  19342.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  13820.,  19740.,  25916.,  32348.,
      16188.,  22620.,  29308.,  36252.,  53176.,  66552.,  80440.,  94840.,
      59960.,  74360.,  89272.,  104696., 66744.,  82168.,  98104.,  114552.,
      47868.,  55836.,  64060.,  72540.,  52284.,  60764.,  69500.,  78492.,
      26330.,  35978.,  46010.,  56426.,  32954.,  43370.,  54170.,  65354.,
      97108.,  118708., 141076., 164212., 113428., 136564., 160468., 185140.,
      129748., 154420., 179860., 206068., 86618.,  99338.,  112442., 125930.,
      96314.,  109802., 123674., 137930., 55420.,  62364.,  69564.,  77020.,
      61884.,  69340.,  77052.,  85020.,  144568., 159992., 175928., 192376.,
      159544., 175992., 192952., 210424., 174520., 191992., 209976., 228472.,
      101756., 110748., 119996., 129500., 110268., 119772., 129532., 139548.,
      87740.,  97244.,  107004., 117020., 94204.,  104220., 114492., 125020.,
      219448., 239992., 261048., 282616., 234424., 255992., 278072., 300664.,
      249400., 271992., 295096., 318712., 144316., 155868., 167676., 179740.,
      152828., 164892., 177212., 189788., 64510.,  69518.,  74654.,  79918.,
      68766.,  74030.,  79422.,  84942.,  153052., 163836., 174876., 186172.,
      162588., 173884., 185436., 197244., 172124., 183932., 195996., 208316.,
      95870.,  101902., 108062., 114350., 101150., 107438., 113854., 120398.,
      85790.,  92078.,  98494.,  105038., 90046.,  96590.,  103262., 110062.,
      200732., 214076., 227676., 241532., 210268., 224124., 238236., 252604.,
      219804., 234172., 248796., 263676., 122270., 129582., 137022., 144590.,
      127550., 135118., 142814., 150638., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,  124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192., 322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422., 467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244., 521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556., 868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968., 1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868., 938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   59.,  68.,  169., 190.,
      211., 128., 140., 0.,   78.,  86.,  194., 212., 230., 130., 140., 0.,
      118., 126., 284., 302., 320., 180., 190., 0.,   80.,  85.,  186., 197.,
      208., 114., 120., 0.,   105., 110., 241., 252., 263., 144., 150., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,  295.,  272.,  481.,   396.,  448.,   138.,  368.,
      472.,  854.,   720.,  1226., 968.,  1136.,  358.,  888.,   992.,  1754.,
      1400., 2366.,  1808., 1976., 701.,  1660.,  1912., 3267.,  2524., 4185.,
      3136., 3484.,  1110., 2392., 2624., 4202.,  3032., 4814.,  3440., 3736.,
      1829., 3916.,  4360., 6939., 4972., 7857.,  5584., 6124.,  1862., 3896.,
      4256., 6650.,  4664., 7262., 5072., 5496.,  2957., 6172.,  6808., 10611.,
      7420., 11529., 8032., 8764., 2614., 5400.,  5888., 9098.,  6296., 9710.,
      6704., 7256.,  3794., 7840., 8328., 12878., 8896., 13730., 9464., 10016.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,   1044.,  2138.,   2020.,  3602.,   2996.,  3396.,  956.,
      2632.,  3432.,  6292.,  5384.,   9220.,  7336.,   8648.,  2636.,  6632.,
      7432.,  13252., 10664., 18100.,  13896., 15208.,  5218.,  12476., 14444.,
      24822., 19292., 32094., 24140.,  26876., 8588.,   18536., 20360., 32644.,
      23592., 37492., 26824., 29160.,  14146., 30332.,  33836., 53910., 38684.,
      61182., 43532., 47804., 14540.,  30440., 33288.,  52036., 36520., 56884.,
      39752., 43112., 23074., 48188.,  53228., 82998.,  58076., 90270., 62924.,
      68732., 20492., 42344., 46216.,  71428., 49448.,  76276., 52680., 57064.,
      29852., 61704., 65576., 101428., 70088., 108196., 74600., 78984.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,   180.,  324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,  1044., 1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760., 3304., 2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024., 3948., 4284.,  0.,     2810.,  3314.,  8668.,  9868.,
      11068., 6938., 7634., 0.,     4300.,  4764.,  10888., 11944., 13000.,
      7436.,  8028., 0.,    6620.,  7084.,  16168., 17224., 18280., 10396.,
      10988., 0.,    4630., 4926.,  10852., 11508., 12164., 6710.,  7070.,
      0.,     6110., 6406., 14132., 14788., 15444., 8510.,  8870.,  0.,
      0.,     0.,    0.,    0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  200.,  248.,  50.,   88.,   144.,  224.,
      192.,  280.,  358.,  496.,  312.,  408.,  538.,  688.,  432.,  536.,
      512.,  624.,  150.,  208.,  384.,  504.,  432.,  560.,  778.,  976.,
      632.,  768.,  1078., 1288., 832.,  976.,  912.,  1064., 301.,  400.,
      728.,  932.,  848.,  1064., 1467., 1800., 1148., 1376., 1917., 2268.,
      1448., 1688., 1616., 1868., 518.,  592.,  1120., 1272., 1232., 1392.,
      1978., 2224., 1432., 1600., 2278., 2536., 1632., 1808., 1776., 1960.,
      853.,  976.,  1832., 2084., 2048., 2312., 3267., 3672., 2348., 2624.,
      3717., 4140., 2648., 2936., 2912., 3212., 886.,  976.,  1856., 2040.,
      2032., 2224., 3178., 3472., 2232., 2432., 3478., 3784., 2432., 2640.,
      2640., 2856., 1405., 1552., 2936., 3236., 3248., 3560., 5067., 5544.,
      3548., 3872., 5517., 6012., 3848., 4184., 4208., 4556., 1254., 1360.,
      2592., 2808., 2832., 3056., 4378., 4720., 3032., 3264., 4678., 5032.,
      3232., 3472., 3504., 3752., 1834., 1960., 3792., 4048., 4032., 4296.,
      6238., 6640., 4312., 4584., 6658., 7072., 4592., 4872., 4864., 5152.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   4.,   3.,    8.,    8.,    20.,   16.,   32.,  24.,  44.,  21.,
      32.,  27.,  40.,   0.,    0.,    11.,   24.,   13.,  28.,  48.,  80.,
      56.,  92.,  64.,   104.,  51.,   72.,   57.,   80.,  0.,   0.,   26.,
      56.,  38.,  72.,   120.,  192.,  152.,  232.,  184., 272., 130., 176.,
      150., 200., 0.,    0.,    86.,   136.,  98.,   152., 280., 392., 312.,
      432., 344., 472.,  230.,  296.,  250.,  320.,  0.,   0.,   155., 236.,
      185., 272., 496.,  676.,  568.,  760.,  640.,  844., 407., 512., 449.,
      560., 0.,   0.,    254.,  312.,  282.,  344.,  648., 776., 712., 848.,
      776., 920., 446.,  520.,  482.,  560.,  0.,    0.,   394., 472., 422.,
      504., 968., 1136., 1032., 1208., 1096., 1280., 626., 720., 662., 760.,
      0.,   0.,   279.,  320.,  297.,  340.,  656.,  744., 696., 788., 736.,
      832., 407., 456.,  429.,  480.,  0.,    0.,    369., 420., 387., 440.,
      856., 964., 896.,  1008., 936.,  1052., 517.,  576., 539., 600., 0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,   0.,   0.,
      0.,   0.,   0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  1510.,  1886.,  330.,   626.,
      1004.,  1628.,  1372.,  2060.,  2606.,  3686.,  2316.,  3068.,  4022.,
      5198.,  3260.,  4076.,  3884.,  4764.,  1090.,  1546.,  2844.,  3788.,
      3212.,  4220.,  5846.,  7406.,  4796.,  5868.,  8222.,  9878.,  6380.,
      7516.,  7004.,  8204.,  2219.,  2999.,  5434.,  7042.,  6370.,  8074.,
      11097., 13725., 8746.,  10546., 14661., 17433., 11122., 13018., 12442.,
      14434., 4002.,  4586.,  8668.,  9868.,  9548.,  10812., 15350., 17294.,
      11132., 12460., 17726., 19766., 12716., 14108., 13852., 15308., 6587.,
      7559.,  14170., 16162., 15874., 17962., 25353., 28557., 18250., 20434.,
      28917., 32265., 20626., 22906., 22714., 25090., 6914.,  7626.,  14492.,
      15948., 15884., 17404., 24854., 27182., 17468., 19052., 27230., 29654.,
      19052., 20700., 20700., 22412., 10955., 12119., 22906., 25282., 25378.,
      27850., 39609., 43389., 27754., 30322., 43173., 47097., 30130., 32794.,
      32986., 35746., 9826.,  10666., 20316., 22028., 22220., 23996., 34358.,
      37070., 23804., 25644., 36734., 39542., 25388., 27292., 27548., 29516.,
      14426., 15426., 29836., 31868., 31740., 33836., 49118., 52310., 33964.,
      36124., 52454., 55742., 36188., 38412., 38348., 40636.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    25.,   17.,   53.,   46.,   134.,  102.,  222.,  158.,  310.,
      149.,  233.,  193.,  293.,  0.,    0.,    65.,   165.,  77.,   193.,
      326.,  574.,  382.,  662.,  438.,  750.,  369.,  533.,  413.,  593.,
      0.,    0.,    154.,  386.,  242.,  506.,  828.,  1388., 1068., 1692.,
      1308., 1996., 954.,  1314., 1106., 1498., 0.,    0.,    594.,  986.,
      682.,  1106., 2028., 2908., 2268., 3212., 2508., 3516., 1714., 2234.,
      1866., 2418., 0.,    0.,    1087., 1723., 1315., 1999., 3626., 5042.,
      4178., 5690., 4730., 6338., 3055., 3883., 3379., 4255., 0.,    0.,
      1922., 2378., 2138., 2626., 4940., 5948., 5436., 6508., 5932., 7068.,
      3426., 4010., 3706., 4322., 0.,    0.,    3002., 3618., 3218., 3866.,
      7420., 8748., 7916., 9308., 8412., 9868., 4826., 5570., 5106., 5882.,
      0.,    0.,    2153., 2477., 2293., 2633., 5078., 5774., 5390., 6118.,
      5702., 6462., 3161., 3549., 3333., 3737., 0.,    0.,    2853., 3257.,
      2993., 3413., 6638., 7494., 6950., 7838., 7262., 8182., 4021., 4489.,
      4193., 4677., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   6362.,   9866.,
      6540.,   9004.,   11978.,  15866.,  10284.,  13004.,  11724.,  14700.,
      2364.,   4700.,   7448.,   12376.,  10328.,  15768.,  19828.,  28372.,
      17816.,  23768.,  31060.,  40372.,  25304.,  31768.,  30232.,  37208.,
      8284.,   11900.,  21848.,  29336.,  24728.,  32728.,  45268.,  57652.,
      37336.,  45848.,  64180.,  77332.,  49944.,  58968.,  54872.,  64408.,
      17002.,  23194.,  41924.,  54692.,  49316.,  62852.,  86238.,  107118.,
      68228.,  82532.,  114606., 136638., 87140.,  102212., 97604.,  113444.,
      31452.,  36092.,  68184.,  77720.,  75160.,  85208.,  120916., 136372.,
      87768.,  98328.,  139828., 156052., 100376., 111448., 109400., 120984.,
      51754.,  59482.,  111428., 127268., 124964., 141572., 199710., 225198.,
      143876., 161252., 228078., 254718., 162788., 180932., 179396., 198308.,
      54620.,  60284.,  114520., 126104., 125592., 137688., 196564., 215092.,
      138200., 150808., 215476., 234772., 150808., 163928., 163928., 177560.,
      86506.,  95770.,  180932., 199844., 200612., 220292., 313182., 343278.,
      219524., 239972., 341550., 372798., 238436., 259652., 261188., 283172.,
      77788.,  84476.,  160856., 174488., 176024., 190168., 272212., 293812.,
      188632., 203288., 291124., 313492., 201240., 216408., 218456., 234136.,
      114428., 122396., 236696., 252888., 251864., 268568., 389812., 415252.,
      269592., 286808., 416404., 442612., 287320., 305048., 304536., 322776.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    174.,   110.,   382.,   300.,   972.,   716.,   1644.,  1132.,
      2316.,  1118.,  1774.,  1454.,  2238.,  0.,     0.,     430.,   1214.,
      510.,   1422.,  2380.,  4332.,  2796.,  5004.,  3212.,  5676.,  2798.,
      4094.,  3134.,  4558.,  0.,     0.,     1020.,  2844.,  1692.,  3772.,
      6104.,  10520., 7960.,  12888., 9816.,  15256., 7292.,  10140., 8476.,
      11580., 0.,     0.,     4380.,  7484.,  5052.,  8412.,  15384., 22360.,
      17240., 24728., 19096., 27096., 13212., 17340., 14396., 18780., 0.,
      0.,     8090.,  13130., 9866.,  15290., 27652., 38884., 31972., 43972.,
      36292., 49060., 23642., 30218., 26186., 33146., 0.,     0.,     14940.,
      18556., 16636., 20508., 38552., 46552., 42456., 50968., 46360., 55384.,
      26844., 31484., 29052., 33948., 0.,     0.,     23420., 28316., 25116.,
      30268., 58072., 68632., 61976., 73048., 65880., 77464., 37884., 43804.,
      40092., 46268., 0.,     0.,     16910., 19486., 18014., 20718., 39948.,
      45484., 42412., 48204., 44876., 50924., 24910., 27998., 26270., 29486.,
      0.,     0.,     22430., 25646., 23534., 26878., 52268., 59084., 54732.,
      61804., 57196., 64524., 31710., 35438., 33070., 36926., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5335.,
      5620.,  5911.,  6208.,  11162., 11744., 12338., 12944., 12386., 12992.,
      13610., 14240., 19341., 20268., 21213., 22176., 13562., 14192., 14834.,
      15488., 21105., 22068., 23049., 24048., 14738., 15392., 16058., 16736.,
      16154., 16832., 17522., 18224., 4810.,  5016.,  5226.,  5440.,  9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      7090.,  7336.,  7586.,  7840.,  14668., 15168., 15676., 16192., 15612.,
      16128., 16652., 17184., 24166., 24952., 25750., 26560., 16716., 17248.,
      17788., 18336., 25822., 26632., 27454., 28288., 17820., 18368., 18924.,
      19488., 18892., 19456., 20028., 20608.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  62.,   96.,   134.,  176.,
      65.,   84.,   105.,  128.,  85.,   108.,  133.,  160.,  0.,    0.,
      0.,    0.,    21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,
      134.,  192.,  254.,  320.,  158.,  224.,  294.,  368.,  182.,  256.,
      334.,  416.,  165.,  204.,  245.,  288.,  185.,  228.,  273.,  320.,
      0.,    0.,    0.,    0.,    50.,   104.,  162.,  224.,  90.,   152.,
      218.,  288.,  348.,  480.,  620.,  768.,  460.,  608.,  764.,  928.,
      572.,  736.,  908.,  1088., 434.,  520.,  610.,  704.,  506.,  600.,
      698.,  800.,  0.,    0.,    0.,    0.,    250.,  344.,  442.,  544.,
      290.,  392.,  498.,  608.,  908.,  1120., 1340., 1568., 1020., 1248.,
      1484., 1728., 1132., 1376., 1628., 1888., 794.,  920.,  1050., 1184.,
      866.,  1000., 1138., 1280., 0.,    0.,    0.,    0.,    467.,  620.,
      779.,  944.,  575.,  740.,  911.,  1088., 1642., 1984., 2338., 2704.,
      1906., 2272., 2650., 3040., 2170., 2560., 2962., 3376., 1427., 1628.,
      1835., 2048., 1583., 1796., 2015., 2240., 0.,    0.,    0.,    0.,
      906.,  1016., 1130., 1248., 1010., 1128., 1250., 1376., 2348., 2592.,
      2844., 3104., 2588., 2848., 3116., 3392., 2828., 3104., 3388., 3680.,
      1642., 1784., 1930., 2080., 1778., 1928., 2082., 2240., 0.,    0.,
      0.,    0.,    1426., 1576., 1730., 1888., 1530., 1688., 1850., 2016.,
      3548., 3872., 4204., 4544., 3788., 4128., 4476., 4832., 4028., 4384.,
      4748., 5120., 2322., 2504., 2690., 2880., 2458., 2648., 2842., 3040.,
      0.,    0.,    0.,    0.,    1037., 1116., 1197., 1280., 1105., 1188.,
      1273., 1360., 2454., 2624., 2798., 2976., 2606., 2784., 2966., 3152.,
      2758., 2944., 3134., 3328., 1533., 1628., 1725., 1824., 1617., 1716.,
      1817., 1920., 0.,    0.,    0.,    0.,    1377., 1476., 1577., 1680.,
      1445., 1548., 1653., 1760., 3214., 3424., 3638., 3856., 3366., 3584.,
      3806., 4032., 3518., 3744., 3974., 4208., 1953., 2068., 2185., 2304.,
      2037., 2156., 2277., 2400., 0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   5506.,   6218.,   6962.,   7738.,
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      42119.,  44387.,  46703.,  49067.,  88150.,  92782.,  97510.,  102334.,
      97894.,  102718., 107638., 112654., 152901., 160281., 167805., 175473.,
      107254., 112270., 117382., 122590., 166941., 174609., 182421., 190377.,
      116614., 121822., 127126., 132526., 127894., 133294., 138790., 144382.,
      38074.,  39714.,  41386.,  43090.,  78756.,  82100.,  85508.,  88980.,
      86276.,  89748.,  93284.,  96884.,  133454., 138758., 144158., 149654.,
      92516.,  96116.,  99780.,  103508., 142814., 148310., 153902., 159590.,
      98756.,  102484., 106276., 110132., 107300., 111156., 115076., 119060.,
      56234.,  58194.,  60186.,  62210.,  116356., 120340., 124388., 128500.,
      123876., 127988., 132164., 136404., 191774., 198038., 204398., 210854.,
      132676., 136916., 141220., 145588., 204974., 211430., 217982., 224630.,
      141476., 145844., 150276., 154772., 150020., 154516., 159076., 163700.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3439.,  4651.,  5911.,  7219.,  4279.,  5587.,  6943.,
      8347.,  12470., 15182., 17990., 20894., 14534., 17438., 20438., 23534.,
      16598., 19694., 22886., 26174., 11023., 12619., 14263., 15955., 12247.,
      13939., 15679., 17467., 0.,     0.,     0.,     0.,     7034.,  7906.,
      8810.,  9746.,  7850.,  8786.,  9754.,  10754., 18308., 20244., 22244.,
      24308., 20196., 22260., 24388., 26580., 22084., 24276., 26532., 28852.,
      12858., 13986., 15146., 16338., 13930., 15122., 16346., 17602., 0.,
      0.,     0.,     0.,     11114., 12306., 13530., 14786., 11930., 13186.,
      14474., 15794., 27748., 30324., 32964., 35668., 29636., 32340., 35108.,
      37940., 31524., 34356., 37252., 40212., 18218., 19666., 21146., 22658.,
      19290., 20802., 22346., 23922., 0.,     0.,     0.,     0.,     8141.,
      8769.,  9413.,  10073., 8677.,  9337.,  10013., 10705., 19298., 20650.,
      22034., 23450., 20498., 21914., 23362., 24842., 21698., 23178., 24690.,
      26234., 12077., 12833., 13605., 14393., 12741., 13529., 14333., 15153.,
      0.,     0.,     0.,     0.,     10821., 11609., 12413., 13233., 11357.,
      12177., 13013., 13865., 25298., 26970., 28674., 30410., 26498., 28234.,
      30002., 31802., 27698., 29498., 31330., 33194., 15397., 16313., 17245.,
      18193., 16061., 17009., 17973., 18953., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      43356.,   49020.,   54940.,   61116.,   6716.,    11100.,   15740.,
      20636.,   23992.,   33272.,   43064.,   53368.,   34872.,   45176.,
      55992.,   67320.,   69172.,   85396.,   102388.,  120148.,  64184.,
      75512.,   87352.,   99704.,   113140.,  130900.,  149428.,  168724.,
      93496.,   105848.,  118712.,  132088.,  112568.,  125944.,  139832.,
      154232.,  28796.,   35740.,   42940.,   50396.,   78392.,   92792.,
      107704.,  123128.,  89272.,   104696.,  120632.,  137080.,  166132.,
      190036.,  214708.,  240148.,  139064.,  155512.,  172472.,  189944.,
      240820.,  266260.,  292468.,  319444.,  188856.,  206328.,  224312.,
      242808.,  207928.,  226424.,  245432.,  264952.,  60538.,   72490.,
      84826.,   97546.,   152276.,  176948.,  202388.,  228596.,  180884.,
      207092.,  234068.,  261812.,  319662.,  360126.,  401742.,  444510.,
      255572.,  283316.,  311828.,  341108.,  431694.,  474462.,  518382.,
      563454.,  330260.,  359540.,  389588.,  420404.,  371156.,  401972.,
      433556.,  465908.,  120188.,  129180.,  138428.,  147932.,  261176.,
      279672.,  298680.,  318200.,  288440.,  307960.,  327992.,  348536.,
      464884.,  494932.,  525748.,  557332.,  338232.,  358776.,  379832.,
      401400.,  539572.,  571156.,  603508.,  636628.,  388024.,  409592.,
      431672.,  454264.,  423480.,  446072.,  469176.,  492792.,  197626.,
      212650.,  228058.,  243850.,  426452.,  457268.,  488852.,  521204.,
      479636.,  511988.,  545108.,  578996.,  767790.,  817470.,  868302.,
      920286.,  554324.,  588212.,  622868.,  658292.,  879822.,  931806.,
      984942.,  1039230., 629012.,  664436.,  700628.,  737588.,  694484.,
      731444.,  769172.,  807668.,  211580.,  222620.,  233916.,  245468.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      334714.,  352810.,  371290.,  390154.,  700628.,  737588.,  775316.,
      813812.,  778388.,  816884.,  856148.,  896180.,  1215918., 1274814.,
      1334862., 1396062., 853076.,  893108.,  933908.,  975476.,  1327950.,
      1389150., 1451502., 1515006., 927764.,  969332.,  1011668., 1054772.,
      1017812., 1060916., 1104788., 1149428., 302972.,  316060.,  329404.,
      343004.,  626744.,  653432.,  680632.,  708344.,  686776.,  714488.,
      742712.,  771448.,  1062388., 1104724., 1147828., 1191700., 736568.,
      765304.,  794552.,  824312.,  1137076., 1180948., 1225588., 1270996.,
      786360.,  816120.,  846392.,  877176.,  854584.,  885368.,  916664.,
      948472.,  447932.,  463580.,  479484.,  495644.,  926904.,  958712.,
      991032.,  1023864., 986936.,  1019768., 1053112., 1086968., 1527988.,
      1578004., 1628788., 1680340., 1057208., 1091064., 1125432., 1160312.,
      1633396., 1684948., 1737268., 1790356., 1127480., 1162360., 1197752.,
      1233656., 1195704., 1231608., 1268024., 1304952.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      9948.,   14588.,  19484.,  24636.,  9662.,   12110.,  14686.,  17390.,
      10846.,  13550.,  16382.,  19342.,  0.,      0.,      0.,      0.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  0.,      0.,      0.,      0.,
      13820.,  19740.,  25916.,  32348.,  16188.,  22620.,  29308.,  36252.,
      53176.,  66552.,  80440.,  94840.,  59960.,  74360.,  89272.,  104696.,
      66744.,  82168.,  98104.,  114552., 47868.,  55836.,  64060.,  72540.,
      52284.,  60764.,  69500.,  78492.,  0.,      0.,      0.,      0.,
      26330.,  35978.,  46010.,  56426.,  32954.,  43370.,  54170.,  65354.,
      97108.,  118708., 141076., 164212., 113428., 136564., 160468., 185140.,
      129748., 154420., 179860., 206068., 86618.,  99338.,  112442., 125930.,
      96314.,  109802., 123674., 137930., 0.,      0.,      0.,      0.,
      55420.,  62364.,  69564.,  77020.,  61884.,  69340.,  77052.,  85020.,
      144568., 159992., 175928., 192376., 159544., 175992., 192952., 210424.,
      174520., 191992., 209976., 228472., 101756., 110748., 119996., 129500.,
      110268., 119772., 129532., 139548., 0.,      0.,      0.,      0.,
      87740.,  97244.,  107004., 117020., 94204.,  104220., 114492., 125020.,
      219448., 239992., 261048., 282616., 234424., 255992., 278072., 300664.,
      249400., 271992., 295096., 318712., 144316., 155868., 167676., 179740.,
      152828., 164892., 177212., 189788., 0.,      0.,      0.,      0.,
      64510.,  69518.,  74654.,  79918.,  68766.,  74030.,  79422.,  84942.,
      153052., 163836., 174876., 186172., 162588., 173884., 185436., 197244.,
      172124., 183932., 195996., 208316., 95870.,  101902., 108062., 114350.,
      101150., 107438., 113854., 120398., 0.,      0.,      0.,      0.,
      85790.,  92078.,  98494.,  105038., 90046.,  96590.,  103262., 110062.,
      200732., 214076., 227676., 241532., 210268., 224124., 238236., 252604.,
      219804., 234172., 248796., 263676., 122270., 129582., 137022., 144590.,
      127550., 135118., 142814., 150638., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,   20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,  60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,  140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116., 265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179., 380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296., 625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299., 620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476., 985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419., 860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604., 1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,  12.,  15.,  0.,   6.,   7.,
      20.,  23.,  44.,  39.,  44.,  27.,  30.,  0.,   15.,  20.,  52.,  64.,
      115., 96.,  112., 66.,  75.,  0.,   40.,  45.,  112., 124., 220., 176.,
      192., 111., 120., 0.,   72.,  84.,  201., 228., 393., 306., 339., 192.,
      210., 0.,   106., 117., 256., 280., 454., 332., 360., 195., 210., 0.,
      161., 172., 376., 400., 649., 472., 500., 270., 285., 0.,   112., 119.,
      254., 269., 428., 305., 322., 171., 180., 0.,   147., 154., 329., 344.,
      548., 390., 407., 216., 225., 0.,   0.,   0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,   128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,  152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260., 1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164., 2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428., 5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612., 3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876., 9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060., 5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324., 12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636., 7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692., 9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,   92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,  272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,  676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568., 1276., 1396., 816.,  884.,  0.,
      489.,  579.,  1416., 1620., 2829., 2232., 2484., 1419., 1557., 0.,
      784.,  868.,  1908., 2092., 3404., 2500., 2716., 1476., 1592., 0.,
      1204., 1288., 2828., 3012., 4904., 3580., 3796., 2056., 2172., 0.,
      851.,  905.,  1936., 2052., 3271., 2336., 2468., 1313., 1383., 0.,
      1121., 1175., 2516., 2632., 4201., 2996., 3128., 1663., 1733., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,    1044.,  2138.,   2020.,  3602.,   2996.,  5066.,
      3972.,  4500.,   1060.,  2840.,   3768.,  6796.,   5720.,  9724.,
      7672.,  12652.,  9624.,  11320.,  3060.,  7480.,   8408.,  14716.,
      11640., 19564.,  14872., 24412.,  18104., 19800.,  6170.,  14380.,
      16732., 28254.,  21580., 35526.,  26428., 42798.,  31276., 34780.,
      10500., 22360.,  24568., 38956.,  27800., 43804.,  31032., 48652.,
      34264., 37240.,  17330., 36700.,  40972., 64614.,  45820., 71886.,
      50668., 79158.,  55516., 60940.,  17940., 37240.,  40728., 63196.,
      43960., 68044.,  47192., 72892.,  50424., 54680.,  28490., 59020.,
      65212., 100974., 70060., 108246., 74908., 115518., 79756., 87100.,
      25380., 52120.,  56888., 87436.,  60120., 92284.,  63352., 97132.,
      66584., 72120.,  36980., 75960.,  80728., 124156., 85240., 130924.,
      89752., 137692., 94264., 99800.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,   70.,   180.,   324.,   578.,   660.,   932.,   614.,   782.,   0.,
      230.,  270.,  900.,   1044.,  2138.,  2020.,  2292.,  1454.,  1622.,  0.,
      580.,  852.,  2424.,  3096.,  5788.,  5048.,  5976.,  3604.,  4132.,  0.,
      1940., 2212., 5784.,  6456.,  11788., 9688.,  10616., 6244.,  6772.,  0.,
      3570., 4266., 10572., 12156., 21390., 17004., 18972., 10890., 11970., 0.,
      6020., 6676., 14712., 16152., 26332., 19384., 21080., 11476., 12388., 0.,
      9300., 9956., 21912., 23352., 38092., 27864., 29560., 16036., 16948., 0.,
      6630., 7054., 15108., 16020., 25562., 18276., 19316., 10286., 10838., 0.,
      8750., 9174., 19668., 20580., 32882., 23476., 24516., 13046., 13598., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,  116.,  156.,
      209.,  272.,  176.,  220.,  299.,  368.,  236.,  284.,  268.,  320.,
      56.,   96.,   156.,  240.,  212.,  304.,  388.,  532.,  332.,  432.,
      568.,  724.,  452.,  560.,  748.,  916.,  572.,  688.,  676.,  800.,
      176.,  236.,  436.,  560.,  492.,  624.,  868.,  1072., 692.,  832.,
      1168., 1384., 892.,  1040., 1468., 1696., 1092., 1248., 1196., 1360.,
      359.,  464.,  844.,  1060., 988.,  1216., 1677., 2028., 1288., 1528.,
      2127., 2496., 1588., 1840., 2577., 2964., 1888., 2152., 2104., 2380.,
      636.,  716.,  1356., 1520., 1492., 1664., 2368., 2632., 1692., 1872.,
      2668., 2944., 1892., 2080., 2968., 3256., 2092., 2288., 2276., 2480.,
      1049., 1184., 2224., 2500., 2488., 2776., 3927., 4368., 2788., 3088.,
      4377., 4836., 3088., 3400., 4827., 5304., 3388., 3712., 3724., 4060.,
      1096., 1196., 2276., 2480., 2492., 2704., 3868., 4192., 2692., 2912.,
      4168., 4504., 2892., 3120., 4468., 4816., 3092., 3328., 3356., 3600.,
      1739., 1904., 3604., 3940., 3988., 4336., 6177., 6708., 4288., 4648.,
      6627., 7176., 4588., 4960., 7077., 7644., 4888., 5272., 5344., 5740.,
      1556., 1676., 3196., 3440., 3492., 3744., 5368., 5752., 3692., 3952.,
      5668., 6064., 3892., 4160., 5968., 6376., 4092., 4368., 4436., 4720.,
      2276., 2416., 4676., 4960., 4972., 5264., 7648., 8092., 5252., 5552.,
      8068., 8524., 5532., 5840., 8488., 8956., 5812., 6128., 6156., 6480.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      201.,  288.,  243.,  336.,  612.,  804.,  708.,  912.,  1257., 1572.,
      1008., 1224., 1128., 1356., 651.,  768.,  717.,  840.,  0.,    0.,
      360.,  424.,  400.,  468.,  884.,  1024., 972.,  1120., 1588., 1816.,
      1172., 1328., 1276., 1440., 696.,  780.,  752.,  840.,  0.,    0.,
      560.,  644.,  600.,  688.,  1324., 1504., 1412., 1600., 2308., 2596.,
      1692., 1888., 1796., 2000., 976.,  1080., 1032., 1140., 0.,    0.,
      403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076., 1559., 1712.,
      1116., 1220., 1180., 1288., 629.,  684.,  663.,  720.,  0.,    0.,
      533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376., 2009., 2192.,
      1436., 1560., 1500., 1628., 799.,  864.,  833.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,   326.,   574.,   382.,   662.,   847.,   1291.,  854.,
      1166.,  1555.,  2047.,  1326.,  1670.,  2263.,  2803.,  1798.,  2174.,
      2046.,  2454.,  374.,   686.,   1092.,  1748.,  1524.,  2244.,  2834.,
      3962.,  2468.,  3252.,  4250.,  5474.,  3412.,  4260.,  5666.,  6986.,
      4356.,  5268.,  5172.,  6148.,  1294.,  1766.,  3252.,  4228.,  3684.,
      4724.,  6554.,  8162.,  5268.,  6372.,  8930.,  10634., 6852.,  8020.,
      11306., 13106., 8436.,  9668.,  9252.,  10548., 2671.,  3499.,  6338.,
      8042.,  7466.,  9266.,  12741., 15513., 9842.,  11738., 16305., 19221.,
      12218., 14210., 19869., 22929., 14594., 16682., 16298., 18482., 4934.,
      5566.,  10532., 11828., 11604., 12964., 18434., 20522., 13188., 14612.,
      20810., 22994., 14772., 16260., 23186., 25466., 16356., 17908., 17812.,
      19428., 8131.,  9199.,  17258., 19442., 19346., 21626., 30561., 34053.,
      21722., 24098., 34125., 37761., 24098., 26570., 37689., 41469., 26474.,
      29042., 29138., 31802., 8574.,  9366.,  17812., 19428., 19524., 21204.,
      30314., 32882., 21108., 22852., 32690., 35354., 22692., 24500., 35066.,
      37826., 24276., 26148., 26372., 28308., 13591., 14899., 28178., 30842.,
      31226., 33986., 48381., 52593., 33602., 36458., 51945., 56301., 35978.,
      38930., 55509., 60009., 38354., 41402., 41978., 45122., 12214., 13166.,
      25092., 27028., 27444., 29444., 42194., 45242., 29028., 31092., 44570.,
      47714., 30612., 32740., 46946., 50186., 32196., 34388., 34932., 37188.,
      17934., 19046., 36852., 39108., 39204., 41524., 60314., 63842., 41428.,
      43812., 63650., 67274., 43652., 46100., 66986., 70706., 45876., 48388.,
      48612., 51188.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1443.,
      2127.,  1767.,  2499.,  4530.,  6042.,  5274.,  6882.,  9453.,  11937.,
      7650.,  9354.,  8586.,  10386., 4983.,  5907.,  5499.,  6471.,  0.,
      0.,     2758.,  3262.,  3070.,  3606.,  6804.,  7908.,  7492.,  8660.,
      12266., 14066., 9076.,  10308., 9892.,  11188., 5406.,  6070.,  5846.,
      6542.,  0.,     0.,     4318.,  4982.,  4630.,  5326.,  10244., 11668.,
      10932., 12420., 17906., 20186., 13156., 14708., 13972., 15588., 7606.,
      8430.,  8046.,  8902.,  0.,     0.,     3137.,  3493.,  3341.,  3713.,
      7174.,  7934.,  7614.,  8406.,  12175., 13387., 8726.,  9550.,  9230.,
      10086., 4925.,  5361.,  5193.,  5645.,  0.,     0.,     4157.,  4593.,
      4361.,  4813.,  9374.,  10294., 9814.,  10766., 15715., 17167., 11246.,
      12230., 11750., 12766., 6265.,  6781.,  6533.,  7065.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   6362.,   9866.,
      6540.,   9004.,   11978.,  15866.,  10284.,  13004.,  17594.,  21866.,
      14028.,  17004.,  15980.,  19212.,  2700.,   5164.,   8120.,   13304.,
      11512.,  17208.,  21604.,  30532.,  19000.,  25208.,  32836.,  42532.,
      26488.,  33208.,  44068.,  54532.,  33976.,  41208.,  40440.,  48184.,
      9900.,   13644.,  25080.,  32824.,  28472.,  36728.,  50884.,  63652.,
      41080.,  49848.,  69796.,  83332.,  53688.,  62968.,  88708.,  103012.,
      66296.,  76088.,  72760.,  83064.,  20570.,  27146.,  49060.,  62596.,
      57988.,  72292.,  99246.,  121278., 76900.,  91972.,  127614., 150798.,
      95812.,  111652., 155982., 180318., 114724., 131332., 128260., 145636.,
      38860.,  43884.,  83000.,  93304.,  91512.,  102328., 145444., 162052.,
      104120., 115448., 164356., 181732., 116728., 128568., 183268., 201412.,
      129336., 141688., 140920., 153784., 64010.,  72506.,  135940., 153316.,
      152548., 170692., 241086., 268878., 171460., 190372., 269454., 298398.,
      190372., 210052., 297822., 327918., 209284., 229732., 230500., 251716.,
      67820.,  74124.,  140920., 153784., 154552., 167928., 240004., 260452.,
      167160., 181048., 258916., 280132., 179768., 194168., 277828., 299812.,
      192376., 207288., 209080., 224504., 107450., 117866., 222820., 244036.,
      247108., 269092., 382926., 416478., 266020., 288772., 411294., 445998.,
      284932., 308452., 439662., 475518., 303844., 328132., 332740., 357796.,
      96780.,  104364., 198840., 214264., 217592., 233528., 334564., 358852.,
      230200., 246648., 353476., 378532., 242808., 259768., 372388., 398212.,
      255416., 272888., 277240., 295224., 142380., 151244., 292600., 310584.,
      311352., 329848., 479044., 507172., 329080., 348088., 505636., 534532.,
      346808., 366328., 532228., 561892., 364536., 384568., 386360., 406904.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,   1644.,
      1322.,   2906.,   1900.,   3084.,   2828.,   4268.,   1966.,  2750.,
      2558.,   3470.,   0.,      0.,      430.,    1214.,   510.,   1422.,
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,  9004.,
      7468.,   10188.,  4926.,   6350.,   5518.,   7070.,   0.,     0.,
      1100.,   3052.,   2028.,   4236.,   6776.,   11448.,  9144.,  14328.,
      18052.,  26212.,  16632.,  22328.,  20024.,  26232.,  12396., 15628.,
      14348.,  17836.,  0.,      0.,      5740.,   8972.,   6668.,  10156.,
      18616.,  25848.,  20984.,  28728.,  39652.,  51652.,  33592., 41848.,
      36984.,  45752.,  22156.,  26668.,  24108.,  28876.,  0.,     0.,
      10890.,  16314.,  13434.,  19242.,  34788.,  46788.,  40644., 53412.,
      73230.,  92958.,  59556.,  73092.,  66948.,  81252.,  38970., 46314.,
      43050.,  50778.,  0.,      0.,      21580.,  25580.,  24044., 28300.,
      53368.,  62136.,  58808.,  68088.,  96388.,  110692., 71416., 81208.,
      77880.,  88184.,  42604.,  47884.,  46092.,  51628.,  0.,     0.,
      33900.,  39180.,  36364.,  41900.,  80568.,  91896.,  86008., 97848.,
      141028., 159172., 103736., 116088., 110200., 123064., 60044., 66604.,
      63532.,  70348.,  0.,      0.,      24750.,  27582.,  26366., 29326.,
      56652.,  62700.,  60140.,  66444.,  96218.,  105866., 69004., 75564.,
      73004.,  79820.,  38974.,  42446.,  41102.,  44702.,  0.,     0.,
      32830.,  36302.,  34446.,  38046.,  74092.,  81420.,  77580., 85164.,
      124298., 135866., 89004.,  96844.,  93004.,  101100., 49614., 53726.,
      51742.,  55982.,  0.,      0.,      0.,      0.,      0.,     0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,     0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6635.,  6956.,  7283.,  7616.,  13762., 14416., 15082., 15760.,
      15274., 15952., 16642., 17344., 23673., 24708., 25761., 26832., 16450.,
      17152., 17866., 18592., 25437., 26508., 27597., 28704., 17626., 18352.,
      19090., 19840., 27201., 28308., 29433., 30576., 18802., 19552., 20314.,
      21088., 20602., 21376., 22162., 22960., 5990.,  6224.,  6462.,  6704.,
      12308., 12784., 13268., 13760., 13476., 13968., 14468., 14976., 20722.,
      21472., 22234., 23008., 14260., 14768., 15284., 15808., 21898., 22672.,
      23458., 24256., 15044., 15568., 16100., 16640., 23074., 23872., 24682.,
      25504., 15828., 16368., 16916., 17472., 17188., 17744., 18308., 18880.,
      8830.,  9104.,  9382.,  9664.,  18148., 18704., 19268., 19840., 19316.,
      19888., 20468., 21056., 29722., 30592., 31474., 32368., 20420., 21008.,
      21604., 22208., 31378., 32272., 33178., 34096., 21524., 22128., 22740.,
      23360., 33034., 33952., 34882., 35824., 22628., 23248., 23876., 24512.,
      23988., 24624., 25268., 25920.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    9.,    16.,   5.,    12.,   21.,   32.,   14.,   32.,
      54.,   80.,   38.,   64.,   94.,   128.,  71.,   116.,  167.,  224.,
      110.,  144.,  182.,  224.,  166.,  208.,  254.,  304.,  117.,  140.,
      165.,  192.,  153.,  180.,  209.,  240.,  0.,    0.,    0.,    0.,
      21.,   44.,   69.,   96.,   25.,   52.,   81.,   112.,  134.,  192.,
      254.,  320.,  158.,  224.,  294.,  368.,  371.,  476.,  587.,  704.,
      390.,  464.,  542.,  624.,  446.,  528.,  614.,  704.,  297.,  340.,
      385.,  432.,  333.,  380.,  429.,  480.,  0.,    0.,    0.,    0.,
      54.,   112.,  174.,  240.,  110.,  176.,  246.,  320.,  388.,  528.,
      676.,  832.,  532.,  688.,  852.,  1024., 1066., 1312., 1570., 1840.,
      996.,  1168., 1348., 1536., 1204., 1392., 1588., 1792., 750.,  848.,
      950.,  1056., 870.,  976.,  1086., 1200., 0.,    0.,    0.,    0.,
      334.,  432.,  534.,  640.,  390.,  496.,  606.,  720.,  1108., 1328.,
      1556., 1792., 1252., 1488., 1732., 1984., 2386., 2752., 3130., 3520.,
      2036., 2288., 2548., 2816., 2244., 2512., 2788., 3072., 1350., 1488.,
      1630., 1776., 1470., 1616., 1766., 1920., 0.,    0.,    0.,    0.,
      639.,  804.,  975.,  1152., 795.,  972.,  1155., 1344., 2082., 2448.,
      2826., 3216., 2442., 2832., 3234., 3648., 4425., 5028., 5649., 6288.,
      3618., 4032., 4458., 4896., 4074., 4512., 4962., 5424., 2379., 2604.,
      2835., 3072., 2631., 2868., 3111., 3360., 0.,    0.,    0.,    0.,
      1318., 1440., 1566., 1696., 1470., 1600., 1734., 1872., 3268., 3536.,
      3812., 4096., 3604., 3888., 4180., 4480., 5914., 6352., 6802., 7264.,
      4388., 4688., 4996., 5312., 4788., 5104., 5428., 5760., 2622., 2784.,
      2950., 3120., 2838., 3008., 3182., 3360., 0.,    0.,    0.,    0.,
      2078., 2240., 2406., 2576., 2230., 2400., 2574., 2752., 4948., 5296.,
      5652., 6016., 5284., 5648., 6020., 6400., 8674., 9232., 9802., 10384.,
      6388., 6768., 7156., 7552., 6788., 7184., 7588., 8000., 3702., 3904.,
      4110., 4320., 3918., 4128., 4342., 4560., 0.,    0.,    0.,    0.,
      1525., 1612., 1701., 1792., 1625., 1716., 1809., 1904., 3494., 3680.,
      3870., 4064., 3710., 3904., 4102., 4304., 5939., 6236., 6539., 6848.,
      4262., 4464., 4670., 4880., 4510., 4720., 4934., 5152., 2409., 2516.,
      2625., 2736., 2541., 2652., 2765., 2880., 0.,    0.,    0.,    0.,
      2025., 2132., 2241., 2352., 2125., 2236., 2349., 2464., 4574., 4800.,
      5030., 5264., 4790., 5024., 5262., 5504., 7679., 8036., 8399., 8768.,
      5502., 5744., 5990., 6240., 5750., 6000., 6254., 6512., 3069., 3196.,
      3325., 3456., 3201., 3332., 3465., 3600., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   8287.,   9307.,   10375.,  11491.,
      6658.,   7370.,   8114.,   8890.,   7602.,   8378.,   9186.,   10026.,
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      52447.,  55003.,  57607.,  60259.,  108806., 114014., 119318., 124718.,
      120854., 126254., 131750., 137342., 187341., 195585., 203973., 212505.,
      130214., 135806., 141494., 147278., 201381., 209913., 218589., 227409.,
      139574., 145358., 151238., 157214., 215421., 224241., 233205., 242313.,
      148934., 154910., 160982., 167150., 163286., 169454., 175718., 182078.,
      47458.,  49322.,  51218.,  53146.,  97524.,  101316., 105172., 109092.,
      106836., 110756., 114740., 118788., 164294., 170270., 176342., 182510.,
      113076., 117124., 121236., 125412., 173654., 179822., 186086., 192446.,
      119316., 123492., 127732., 132036., 183014., 189374., 195830., 202382.,
      125556., 129860., 134228., 138660., 136404., 140836., 145332., 149892.,
      70098.,  72282.,  74498.,  76746.,  144084., 148516., 153012., 157572.,
      153396., 157956., 162580., 167268., 236054., 242990., 250022., 257150.,
      162196., 166884., 171636., 176452., 249254., 256382., 263606., 270926.,
      170996., 175812., 180692., 185636., 262454., 269774., 277190., 284702.,
      179796., 184740., 189748., 194820., 190644., 195716., 200852., 206052.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   487.,   835.,
      1231.,  1675.,  818.,   1082.,  1378.,  1706.,  1250.,  1578.,  1938.,
      2330.,  893.,   1073.,  1269.,  1481.,  1173.,  1385.,  1613.,  1857.,
      0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,   149.,
      361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,  1658.,
      2210.,  2794.,  2767.,  3595.,  4471.,  5395.,  2978.,  3562.,  4178.,
      4826.,  3410.,  4058.,  4738.,  5450.,  2293.,  2633.,  2989.,  3361.,
      2573.,  2945.,  3333.,  3737.,  0.,     0.,     0.,     0.,     322.,
      778.,   1266.,  1786.,  754.,   1274.,  1826.,  2410.,  2836.,  3940.,
      5108.,  6340.,  3956.,  5188.,  6484.,  7844.,  8054.,  9998.,  12038.,
      14174., 7636.,  8996.,  10420., 11908., 9268.,  10756., 12308., 13924.,
      5810.,  6586.,  7394.,  8234.,  6754.,  7594.,  8466.,  9370.,  0.,
      0.,     0.,     0.,     2482.,  3258.,  4066.,  4906.,  2914.,  3754.,
      4626.,  5530.,  8436.,  10180., 11988., 13860., 9556.,  11428., 13364.,
      15364., 18374., 21278., 24278., 27374., 15796., 17796., 19860., 21988.,
      17428., 19556., 21748., 24004., 10530., 11626., 12754., 13914., 11474.,
      12634., 13826., 15050., 0.,     0.,     0.,     0.,     4791.,  6099.,
      7455.,  8859.,  6015.,  7419.,  8871.,  10371., 15942., 18846., 21846.,
      24942., 18774., 21870., 25062., 28350., 34221., 39009., 43941., 49017.,
      28134., 31422., 34806., 38286., 31734., 35214., 38790., 42462., 18591.,
      20379., 22215., 24099., 20583., 22467., 24399., 26379., 0.,     0.,
      0.,     0.,     10306., 11274., 12274., 13306., 11506., 12538., 13602.,
      14698., 25620., 27748., 29940., 32196., 28276., 30532., 32852., 35236.,
      46454., 49934., 53510., 57182., 34516., 36900., 39348., 41860., 37684.,
      40196., 42772., 45412., 20658., 21946., 23266., 24618., 22370., 23722.,
      25106., 26522., 0.,     0.,     0.,     0.,     16306., 17594., 18914.,
      20266., 17506., 18858., 20242., 21658., 38900., 41668., 44500., 47396.,
      41556., 44452., 47412., 50436., 68294., 72734., 77270., 81902., 50356.,
      53380., 56468., 59620., 53524., 56676., 59892., 63172., 29218., 30826.,
      32466., 34138., 30930., 32602., 34306., 36042., 0.,     0.,     0.,
      0.,     12029., 12721., 13429., 14153., 12821., 13545., 14285., 15041.,
      27586., 29066., 30578., 32122., 29298., 30842., 32418., 34026., 46927.,
      49291., 51703., 54163., 33698., 35306., 36946., 38618., 35666., 37338.,
      39042., 40778., 19061., 19913., 20781., 21665., 20109., 20993., 21893.,
      22809., 0.,     0.,     0.,     0.,     15989., 16841., 17709., 18593.,
      16781., 17665., 18565., 19481., 36146., 37946., 39778., 41642., 37858.,
      39722., 41618., 43546., 60727., 63571., 66463., 69403., 43538., 45466.,
      47426., 49418., 45506., 47498., 49522., 51578., 24301., 25313., 26341.,
      27385., 25349., 26393., 27453., 28529., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      65306.,   73418.,   81914.,   90794.,   52572.,   58236.,   64156.,
      70332.,   60060.,   66236.,   72668.,   79356.,   7900.,    12540.,
      17436.,   22588.,   26360.,   36152.,   46456.,   57272.,   39288.,
      50104.,   61432.,   73272.,   75796.,   92788.,   110548.,  129076.,
      68600.,   80440.,   92792.,   105656.,  119764.,  138292.,  157588.,
      177652.,  97912.,   110776.,  124152.,  138040.,  163732.,  183796.,
      204628.,  226228.,  127224.,  141112.,  155512.,  170424.,  152440.,
      167352.,  182776.,  198712.,  35100.,   42300.,   49756.,   57468.,
      91000.,   105912.,  121336.,  137272.,  103928.,  119864.,  136312.,
      153272.,  188116.,  212788.,  238228.,  264436.,  153720.,  170680.,
      188152.,  206136.,  262804.,  289012.,  315988.,  343732.,  203512.,
      221496.,  239992.,  259000.,  337492.,  365236.,  393748.,  423028.,
      253304.,  272312.,  291832.,  311864.,  278520.,  298552.,  319096.,
      340152.,  74330.,   87050.,   100154.,  113642.,  179860.,  206068.,
      233044.,  260788.,  214612.,  242356.,  270868.,  300148.,  370254.,
      413022.,  456942.,  502014.,  289300.,  318580.,  348628.,  379444.,
      482286.,  527358.,  573582.,  620958.,  363988.,  394804.,  426388.,
      458740.,  594318.,  641694.,  690222.,  739902.,  438676.,  471028.,
      504148.,  538036.,  491860.,  525748.,  560404.,  595828.,  149340.,
      159100.,  169116.,  179388.,  319480.,  339512.,  360056.,  381112.,
      352888.,  373944.,  395512.,  417592.,  561556.,  593908.,  627028.,
      660916.,  402680.,  424760.,  447352.,  470456.,  636244.,  670132.,
      704788.,  740212.,  452472.,  475576.,  499192.,  523320.,  710932.,
      746356.,  782548.,  819508.,  502264.,  526392.,  551032.,  576184.,
      547960.,  573112.,  598776.,  624952.,  245690.,  262250.,  279194.,
      296522.,  522580.,  556468.,  591124.,  626548.,  588052.,  623476.,
      659668.,  696628.,  930414.,  984702.,  1040142., 1096734., 662740.,
      699700.,  737428.,  775924.,  1042446., 1099038., 1156782., 1215678.,
      737428.,  775924.,  815188.,  855220.,  1154478., 1213374., 1273422.,
      1334622., 812116.,  852148.,  892948.,  934516.,  896020.,  937588.,
      979924.,  1023028., 263580.,  275900.,  288476.,  301308.,  547960.,
      573112.,  598776.,  624952.,  601848.,  628024.,  654712.,  681912.,
      934996.,  975028.,  1015828., 1057396., 651640.,  678840.,  706552.,
      734776.,  1009684., 1051252., 1093588., 1136692., 701432.,  729656.,
      758392.,  787640.,  1084372., 1127476., 1171348., 1215988., 751224.,
      780472.,  810232.,  840504.,  817400.,  847672.,  878456.,  909752.,
      417050.,  437450.,  458234.,  479402.,  865300.,  906868.,  949204.,
      992308.,  961492.,  1004596., 1048468., 1093108., 1490574., 1556382.,
      1623342., 1691454., 1036180., 1080820., 1126228., 1172404., 1602606.,
      1670718., 1739982., 1810398., 1110868., 1157044., 1203988., 1251700.,
      1714638., 1785054., 1856622., 1929342., 1185556., 1233268., 1281748.,
      1330996., 1300180., 1349428., 1399444., 1450228., 377820.,  392700.,
      407836.,  423228.,  776440.,  806712.,  837496.,  868792.,  850808.,
      882104.,  913912.,  946232.,  1308436., 1356148., 1404628., 1453876.,
      900600.,  932920.,  965752.,  999096.,  1383124., 1432372., 1482388.,
      1533172., 950392.,  983736.,  1017592., 1051960., 1457812., 1508596.,
      1560148., 1612468., 1000184., 1034552., 1069432., 1104824., 1086840.,
      1122232., 1158136., 1194552., 558620.,  576060.,  593756.,  611708.,
      1148280., 1183672., 1219576., 1255992., 1222648., 1259064., 1295992.,
      1333432., 1881556., 1936948., 1993108., 2050036., 1292920., 1330360.,
      1368312., 1406776., 1986964., 2043892., 2101588., 2160052., 1363192.,
      1401656., 1440632., 1480120., 2092372., 2150836., 2210068., 2270068.,
      1433464., 1472952., 1512952., 1553464., 1520120., 1560632., 1601656.,
      1643192.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID1x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3578.,   6314.,   9434.,   12938.,  6300.,   8380.,   10716.,  13308.,
      9692.,   12284.,  15132.,  18236.,  6974.,   8398.,   9950.,   11630.,
      9182.,   10862.,  12670.,  14606.,  0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      21338.,  27914.,  34874.,  42218.,  23260.,  27900.,  32796.,  37948.,
      26652.,  31804.,  37212.,  42876.,  18014.,  20718.,  23550.,  26510.,
      20222.,  23182.,  26270.,  29486.,  0.,      0.,      0.,      0.,
      2140.,   5756.,   9628.,   13756.,  5532.,   9660.,   14044.,  18684.,
      21624.,  30392.,  39672.,  49464.,  30456.,  40248.,  50552.,  61368.,
      62548.,  78004.,  94228.,  111220., 59768.,  70584.,  81912.,  93752.,
      72696.,  84536.,  96888.,  109752., 45724.,  51900.,  58332.,  65020.,
      53212.,  59900.,  66844.,  74044.,  0.,      0.,      0.,      0.,
      19100.,  25276.,  31708.,  38396.,  22492.,  29180.,  36124.,  43324.,
      65784.,  79672.,  94072.,  108984., 74616.,  89528.,  104952., 120888.,
      144148., 167284., 191188., 215860., 124408., 140344., 156792., 173752.,
      137336., 154296., 171768., 189752., 83164.,  91900.,  100892., 110140.,
      90652.,  99900.,  109404., 119164., 0.,      0.,      0.,      0.,
      37050.,  47466.,  58266.,  69450.,  46746.,  57930.,  69498.,  81450.,
      124692., 147828., 171732., 196404., 147156., 171828., 197268., 223476.,
      269070., 307230., 346542., 387006., 221844., 248052., 275028., 302772.,
      250452., 278196., 306708., 335988., 146970., 161226., 175866., 190890.,
      162810., 177834., 193242., 209034., 0.,      0.,      0.,      0.,
      81500.,  89212.,  97180.,  105404., 91036.,  99260.,  107740., 116476.,
      202872., 219832., 237304., 255288., 223992., 241976., 260472., 279480.,
      368212., 395956., 424468., 453748., 273784., 292792., 312312., 332344.,
      299000., 319032., 339576., 360632., 163996., 174268., 184796., 195580.,
      177628., 188412., 199452., 210748., 0.,      0.,      0.,      0.,
      129180., 139452., 149980., 160764., 138716., 149500., 160540., 171836.,
      308472., 330552., 353144., 376248., 329592., 352696., 376312., 400440.,
      541972., 577396., 613588., 650548., 399864., 423992., 448632., 473784.,
      425080., 450232., 475896., 502072., 232156., 244988., 258076., 271420.,
      245788., 259132., 272732., 286588., 0.,      0.,      0.,      0.,
      95550.,  101070., 106718., 112494., 101854., 107630., 113534., 119566.,
      219228., 231036., 243100., 255420., 232860., 245180., 257756., 270588.,
      373082., 391946., 411194., 430826., 267996., 280828., 293916., 307260.,
      283676., 297020., 310620., 324476., 151646., 158446., 165374., 172430.,
      159998., 167054., 174238., 181550., 0.,      0.,      0.,      0.,
      127070., 133870., 140798., 147854., 133374., 140430., 147614., 154926.,
      287388., 301756., 316380., 331260., 301020., 315900., 331036., 346428.,
      483002., 505706., 528794., 552266., 346396., 361788., 377436., 393340.,
      362076., 377980., 394140., 410556., 193406., 201486., 209694., 218030.,
      201758., 210094., 218558., 227150., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{1, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,   70.,   124.,  102.,  172.,  134.,  156.,  126.,  140.,  244.,
      192.,  322.,  244.,  266.,  233.,  266.,  450.,  344.,  567.,  422.,
      467.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,  521.,  578.,
      918.,  656.,  1035., 734.,  803.,  510.,  556.,  868.,  608.,  946.,
      660.,  714.,  740.,  786.,  1228., 858.,  1336., 930.,  984.,  504.,
      582.,  892.,  614.,  940.,  646.,  732.,  894.,  972.,  1492., 1024.,
      1570., 1076., 1162., 1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      1086., 1180., 1804., 1232., 1882., 1284., 1386., 1673., 1826., 2790.,
      1904., 2907., 1982., 2147., 1278., 1388., 2116., 1440., 2194., 1492.,
      1610., 1828., 1938., 2956., 2010., 3064., 2082., 2200., 952.,  1094.,
      1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155., 1854.,
      2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662., 3152.,
      4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 5.,   10.,  21.,  32.,  43.,  24.,  30.,  30.,  35.,  76.,  87.,
      98.,  54.,  60.,  62.,  74.,  160., 186., 212., 116., 130., 122., 134.,
      290., 316., 342., 186., 200., 182., 194., 420., 446., 472., 256., 270.,
      112., 119., 254., 269., 284., 152., 160., 147., 154., 329., 344., 359.,
      192., 200., 9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,  63.,  132.,
      151., 170., 90.,  100., 110., 130., 272., 314., 356., 188., 210., 210.,
      230., 482., 524., 566., 298., 320., 310., 330., 692., 734., 776., 408.,
      430., 176., 187., 390., 413., 436., 228., 240., 231., 242., 505., 528.,
      551., 288., 300.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  888.,   992.,
      1754.,  1400.,  2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,
      4185.,  3136.,  3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,
      3736.,  3916.,  4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,
      4256.,  6650.,  4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,
      6624.,  10322., 7192.,  7616.,  3824.,  4440.,  6806.,  4688.,  7178.,
      4936.,  5616.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      10684., 11704., 17955., 12316., 18873., 12928., 14044., 8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 12940., 14152., 21627., 14764.,
      22545., 15376., 16684., 9912.,  10784., 16442., 11192., 17054., 11600.,
      12536., 14272., 15144., 23102., 15712., 23954., 16280., 17216., 7280.,
      8408.,  12758., 8656.,  13130., 8904.,  10096., 12920., 14048., 21338.,
      14456., 21950., 14864., 16056., 19708., 21496., 32643., 22108., 33561.,
      22720., 24604., 14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      21964., 23944., 36315., 24556., 37233., 25168., 27244., 15928., 17312.,
      26234., 17720., 26846., 18128., 19576., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  29.,
      67.,   140.,  224.,  308.,  173.,  219.,  219.,  257.,  560.,  644.,
      728.,  403.,  449.,  450.,  542.,  1176., 1376., 1576., 866.,  974.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 1370., 1462., 3176.,
      3376., 3576., 1946., 2054., 851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 1121., 1175., 2516., 2632., 2748., 1473., 1535., 53.,   123.,
      252.,  400.,  548.,  293.,  371.,  403.,  473.,  992.,  1140., 1288.,
      683.,  761.,  818.,  974.,  2040., 2368., 2696., 1426., 1598., 1598.,
      1754., 3680., 4008., 4336., 2286., 2458., 2378., 2534., 5320., 5648.,
      5976., 3146., 3318., 1355., 1441., 3008., 3188., 3368., 1763., 1857.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,
      7432.,   13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,
      24822.,  19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,
      23592.,  37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,
      61182.,  43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,
      39752.,  43112.,  44680.,  47528.,  74356.,  52040.,  81124.,  56552.,
      59912.,  29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,  83900.,
      92012.,  141174., 96860.,  148446., 101708., 110588., 66152.,  72072.,
      110212., 75304.,  115060., 78536.,  84968.,  101756., 111404., 170262.,
      116252., 177534., 121100., 131516., 78056.,  85000.,  129604., 88232.,
      134452., 91464.,  98920.,  112776., 119720., 182644., 124232., 189412.,
      128744., 136200., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,
      79304.,  101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      155324., 169580., 257526., 174428., 264798., 179276., 194300., 113768.,
      123784., 187780., 127016., 192628., 130248., 140776., 173180., 188972.,
      286614., 193820., 293886., 198668., 215228., 125672., 136712., 207172.,
      139944., 212020., 143176., 154728., 180872., 191912., 290932., 196424.,
      297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  190.,   486.,   1012.,  1668.,  2324.,
      1310.,  1670.,  1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 10620., 11340., 24680., 26248.,
      27816., 15164., 16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,
      9582.,  8750.,  9174.,  19668., 20580., 21492., 11534., 12022., 350.,
      902.,   1844.,  3012.,  4180.,  2238.,  2854.,  3110.,  3662.,  7684.,
      8852.,  10020., 5318.,  5934.,  6300.,  7532.,  15784., 18376., 20968.,
      11100., 12460., 12460., 13692., 28744., 31336., 33928., 17900., 19260.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 10630., 11310.,
      23620., 25044., 26468., 13862., 14606., 14030., 14710., 30740., 32164.,
      33588., 17582., 18326.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   384.,   504.,   432.,   560.,
      778.,   976.,   632.,   768.,   1078.,  1288.,  832.,   976.,   912.,
      1064.,  728.,   932.,   848.,   1064.,  1467.,  1800.,  1148.,  1376.,
      1917.,  2268.,  1448.,  1688.,  1616.,  1868.,  1120.,  1272.,  1232.,
      1392.,  1978.,  2224.,  1432.,  1600.,  2278.,  2536.,  1632.,  1808.,
      1776.,  1960.,  1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,
      2624.,  3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  1856.,  2040.,
      2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,  2432.,
      2640.,  2640.,  2856.,  2736.,  2960.,  2912.,  3144.,  4558.,  4912.,
      3192.,  3432.,  4978.,  5344.,  3472.,  3720.,  3680.,  3936.,  1808.,
      2016.,  2112.,  2328.,  3238.,  3568.,  2232.,  2456.,  3418.,  3760.,
      2352.,  2584.,  2688.,  2928.,  3328.,  3576.,  3632.,  3888.,  5578.,
      5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,  4648.,
      5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,  6368.,  9117.,
      9756.,  6248.,  6680.,  6800.,  7244.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,  7616.,
      10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,  5232.,
      5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,  5968.,
      6096.,  6440.,  6960.,  7312.,  7392.,  7752.,  11278., 11824., 7672.,
      8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  3472.,  3808.,
      4032.,  4376.,  6118.,  6640.,  4152.,  4504.,  6298.,  6832.,  4272.,
      4632.,  4864.,  5232.,  6272.,  6648.,  6832.,  7216.,  10378., 10960.,
      7032.,  7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  9560.,
      10148., 10448., 11048., 15867., 16776., 10748., 11360., 16317., 17244.,
      11048., 11672., 11984., 12620., 7008.,  7416.,  7632.,  8048.,  11578.,
      12208., 7832.,  8256.,  11878., 12520., 8032.,  8464.,  8688.,  9128.,
      10664., 11300., 11648., 12296., 17667., 18648., 11948., 12608., 18117.,
      19116., 12248., 12920., 13280., 13964., 7744.,  8184.,  8432.,  8880.,
      12778., 13456., 8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,
      10024., 11184., 11664., 11872., 12360., 17998., 18736., 12152., 12648.,
      18418., 19168., 12432., 12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  146.,  216.,  158.,  232.,
      440.,  592.,  472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  205.,  252.,  215.,  264.,  512.,  612.,
      536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,  9.,    20.,
      27.,   40.,   56.,   84.,   96.,   128.,  136.,  172.,  77.,   96.,
      99.,   120.,  99.,   120.,  117.,  140.,  256.,  304.,  296.,  348.,
      336.,  392.,  187.,  216.,  209.,  240.,  202.,  248.,  246.,  296.,
      536.,  640.,  632.,  744.,  728.,  848.,  402.,  464.,  454.,  520.,
      422.,  488.,  466.,  536.,  1016., 1160., 1112., 1264., 1208., 1368.,
      662.,  744.,  714.,  800.,  642.,  728.,  686.,  776.,  1496., 1680.,
      1592., 1784., 1688., 1888., 922.,  1024., 974.,  1080., 403.,  448.,
      429.,  476.,  920.,  1016., 976.,  1076., 1032., 1136., 555.,  608.,
      585.,  640.,  533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376.,
      1312., 1436., 705.,  768.,  735.,  800.,  17.,   36.,   51.,   72.,
      104.,  148.,  176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,
      187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,
      323.,  360.,  361.,  400.,  378.,  440.,  454.,  520.,  952.,  1088.,
      1112., 1256., 1272., 1424., 674.,  752.,  758.,  840.,  758.,  840.,
      834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264., 1094., 1192.,
      1178., 1280., 1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936.,
      2872., 3104., 1514., 1632., 1598., 1720., 651.,  704.,  693.,  748.,
      1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,
      861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204.,
      1081., 1152., 1127., 1200.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1004.,   1628.,   1372.,   2060.,   2606.,   3686.,   2316.,   3068.,
      4022.,   5198.,   3260.,   4076.,   3884.,   4764.,   2844.,   3788.,
      3212.,   4220.,   5846.,   7406.,   4796.,   5868.,   8222.,   9878.,
      6380.,   7516.,   7004.,   8204.,   5434.,   7042.,   6370.,   8074.,
      11097.,  13725.,  8746.,   10546.,  14661.,  17433.,  11122.,  13018.,
      12442.,  14434.,  8668.,   9868.,   9548.,   10812.,  15350.,  17294.,
      11132.,  12460.,  17726.,  19766.,  12716.,  14108.,  13852.,  15308.,
      14170.,  16162.,  15874.,  17962.,  25353.,  28557.,  18250.,  20434.,
      28917.,  32265.,  20626.,  22906.,  22714.,  25090.,  14492.,  15948.,
      15884.,  17404.,  24854.,  27182.,  17468.,  19052.,  27230.,  29654.,
      19052.,  20700.,  20700.,  22412.,  21452.,  23228.,  22844.,  24684.,
      35774.,  38582.,  25068.,  26972.,  39110.,  42014.,  27292.,  29260.,
      28940.,  30972.,  14060.,  15708.,  16476.,  18188.,  25262.,  27878.,
      17420.,  19196.,  26678.,  29390.,  18364.,  20204.,  21036.,  22940.,
      26140.,  28108.,  28556.,  30588.,  43862.,  46958.,  30140.,  32236.,
      46238.,  49430.,  31724.,  33884.,  34396.,  36620.,  40378.,  43522.,
      44386.,  47626.,  68121.,  73053.,  46762.,  50098.,  71685.,  76761.,
      49138.,  52570.,  53530.,  57058.,  31964.,  34188.,  34892.,  37180.,
      53366.,  56846.,  36476.,  38828.,  55742.,  59318.,  38060.,  40476.,
      41244.,  43724.,  49114.,  52642.,  53890.,  57514.,  82377.,  87885.,
      56266.,  59986.,  85941.,  91593.,  58642.,  62458.,  63802.,  67714.,
      37788.,  40268.,  41228.,  43772.,  62870.,  66734.,  42812.,  45420.,
      65246.,  69206.,  44396.,  47068.,  48092.,  50828.,  54988.,  57788.,
      58428.,  61292.,  89150.,  93494.,  60652.,  63580.,  92486.,  96926.,
      62876.,  65868.,  66572.,  69628.,  27116.,  29788.,  31580.,  34316.,
      47918.,  52070.,  32524.,  35324.,  49334.,  53582.,  33468.,  36332.,
      38188.,  41116.,  49436.,  52428.,  53900.,  56956.,  81878.,  86510.,
      55484.,  58604.,  84254.,  88982.,  57068.,  60252.,  61788.,  65036.,
      75322.,  80002.,  82402.,  87178.,  125145., 132381., 84778.,  89650.,
      128709., 136089., 87154.,  92122.,  94618.,  99682.,  55260.,  58508.,
      60236.,  63548.,  91382.,  96398.,  61820.,  65196.,  93758.,  98870.,
      63404.,  66844.,  68636.,  72140.,  84058.,  89122.,  91906.,  97066.,
      139401., 147213., 94282.,  99538.,  142965., 150921., 96658.,  102010.,
      104890., 110338., 61084.,  64588.,  66572.,  70140.,  100886., 106286.,
      68156.,  71788.,  103262., 108758., 69740.,  73436.,  75484.,  79244.,
      88524.,  92348.,  94012.,  97900.,  142526., 148406., 96236.,  100188.,
      145862., 151838., 98460.,  102476., 104204., 108284.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,
      4732.,  3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  1169.,  1461.,
      1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,  1985.,
      2341.,  2093.,  2465.,  1549.,  1921.,  1625.,  2013.,  3902.,  4694.,
      4086.,  4910.,  4270.,  5126.,  2525.,  2961.,  2633.,  3085.,  53.,
      137.,   193.,   293.,   398.,   614.,   710.,   958.,   1022.,  1302.,
      581.,   729.,   753.,   917.,   753.,   917.,   893.,   1073.,  1958.,
      2334.,  2270.,  2678.,  2582.,  3022.,  1441.,  1669.,  1613.,  1857.,
      1530.,  1890.,  1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,
      6540.,  3098.,  3586.,  3506.,  4026.,  3250.,  3770.,  3594.,  4146.,
      7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,  5786.,  5546.,
      6226.,  4970.,  5650.,  5314.,  6026.,  11612., 13068., 12364., 13884.,
      13116., 14700., 7178.,  7986.,  7586.,  8426.,  3137.,  3493.,  3341.,
      3713.,  7174.,  7934.,  7614.,  8406.,  8054.,  8878.,  4337.,  4757.,
      4573.,  5009.,  4157.,  4593.,  4361.,  4813.,  9374.,  10294., 9814.,
      10766., 10254., 11238., 5517.,  6017.,  5753.,  6269.,  101.,   249.,
      369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,  1013.,
      1225.,  1313.,  1541.,  1441.,  1669.,  1709.,  1953.,  3590.,  4094.,
      4158.,  4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,  2906.,
      3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,  11084.,
      5242.,  5858.,  5906.,  6554.,  5906.,  6554.,  6506.,  7186.,  13676.,
      15068., 14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,  10034.,
      8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524.,
      24364., 11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,  5873.,
      11366., 12254., 12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,
      7553.,  6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622.,
      16238., 17350., 8509.,  9073.,  8873.,  9453.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7448.,   12376.,   10328.,   15768.,  19828.,   28372.,   17816.,
      23768.,  31060.,   40372.,   25304.,  31768.,   30232.,   37208.,
      21848.,  29336.,   24728.,   32728.,  45268.,   57652.,   37336.,
      45848.,  64180.,   77332.,   49944.,  58968.,   54872.,   64408.,
      41924.,  54692.,   49316.,   62852.,  86238.,   107118.,  68228.,
      82532.,  114606.,  136638.,  87140.,  102212.,  97604.,   113444.,
      68184.,  77720.,   75160.,   85208.,  120916.,  136372.,  87768.,
      98328.,  139828.,  156052.,  100376., 111448.,  109400.,  120984.,
      111428., 127268.,  124964.,  141572., 199710.,  225198.,  143876.,
      161252., 228078.,  254718.,  162788., 180932.,  179396.,  198308.,
      114520., 126104.,  125592.,  137688., 196564.,  215092.,  138200.,
      150808., 215476.,  234772.,  150808., 163928.,  163928.,  177560.,
      169880., 184024.,  180952.,  195608., 283444.,  305812.,  198680.,
      213848., 310036.,  333172.,  216408., 232088.,  229528.,  245720.,
      110872., 123992.,  130136.,  143768., 199540.,  220372.,  137624.,
      151768., 210772.,  232372.,  145112., 159768.,  166424.,  181592.,
      207192., 222872.,  226456.,  242648., 347860.,  372532.,  239064.,
      255768., 366772.,  392212.,  251672., 268888.,  272984.,  290712.,
      319940., 344996.,  351908.,  377732., 540126.,  579438.,  370820.,
      397412., 568494.,  608958.,  389732., 417092.,  424772.,  452900.,
      253528., 271256.,  276888.,  295128., 423508.,  451252.,  289496.,
      308248., 442420.,  470932.,  302104., 321368.,  327512.,  347288.,
      389444., 417572.,  427556.,  456452., 653598.,  697518.,  446468.,
      476132., 681966.,  727038.,  465380., 495812.,  506564.,  537764.,
      299864., 319640.,  327320.,  347608., 499156.,  529972.,  339928.,
      360728., 518068.,  549652.,  352536., 373848.,  382040.,  403864.,
      437144., 459480.,  464600.,  487448., 708916.,  743572.,  482328.,
      505688., 735508.,  770932.,  500056., 523928.,  529560.,  553944.,
      214296., 235608.,  249944.,  271768., 379252.,  412372.,  257432.,
      279768., 390484.,  424372.,  264920., 287768.,  302616.,  325976.,
      392536., 416408.,  428184.,  452568., 650452.,  687412.,  440792.,
      465688., 669364.,  707092.,  453400., 478808.,  491096.,  517016.,
      597956., 635300.,  654500.,  692612., 994014.,  1051758., 673412.,
      712292., 1022382., 1081278., 692324., 731972.,  751940.,  792356.,
      438872., 464792.,  478616.,  505048., 726100.,  766132.,  491224.,
      518168., 745012.,  785812.,  503832., 531288.,  545624.,  573592.,
      667460., 707876.,  730148.,  771332., 1107486., 1169838., 749060.,
      791012., 1135854., 1199358., 767972., 810692.,  833732.,  877220.,
      485208., 513176.,  529048.,  557528., 801748.,  844852.,  541656.,
      570648., 820660.,  864532.,  554264., 583768.,  600152.,  630168.,
      704408., 734936.,  748248.,  779288., 1134388., 1181332., 765976.,
      797528., 1160980., 1208692., 783704., 815768.,  829592.,  862168.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,   1774.,   1454.,   2238.,   430.,    1214.,
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   3212.,   5676.,
      2798.,   4094.,   3134.,   4558.,   1020.,   2844.,   1692.,   3772.,
      6104.,   10520.,  7960.,   12888.,  9816.,   15256.,  7292.,   10140.,
      8476.,   11580.,  4380.,   7484.,   5052.,   8412.,   15384.,  22360.,
      17240.,  24728.,  19096.,  27096.,  13212.,  17340.,  14396.,  18780.,
      7740.,   12124.,  8412.,   13052.,  24664.,  34200.,  26520.,  36568.,
      28376.,  38936.,  19132.,  24540.,  20316.,  25980.,  9070.,   11390.,
      9662.,   12110.,  23244.,  28268.,  24684.,  29964.,  26124.,  31660.,
      15534.,  18366.,  16382.,  19342.,  12030.,  14990.,  12622.,  15710.,
      30444.,  36748.,  31884.,  38444.,  33324.,  40140.,  19774.,  23246.,
      20622.,  24222.,  350.,    1006.,   1454.,   2238.,   2988.,   4684.,
      5452.,   7404.,   7916.,   10124.,  4510.,   5678.,   5870.,   7166.,
      5870.,   7166.,   6974.,   8398.,   15308.,  18284.,  17772.,  21004.,
      20236.,  23724.,  11310.,  13118.,  12670.,  14606.,  11900.,  14748.,
      14620.,  17724.,  31960.,  38424.,  37912.,  44888.,  43864.,  51352.,
      24316.,  28188.,  27548.,  31676.,  25500.,  29628.,  28220.,  32604.,
      61720.,  70744.,  67672.,  77208.,  73624.,  83672.,  40476.,  45628.,
      43708.,  49116.,  39100.,  44508.,  41820.,  47484.,  91480.,  103064.,
      97432.,  109528., 103384., 115992., 56636.,  63068.,  59868.,  66556.,
      24750.,  27582.,  26366.,  29326.,  56652.,  62700.,  60140.,  66444.,
      63628.,  70188.,  34286.,  37630.,  36158.,  39630.,  32830.,  36302.,
      34446.,  38046.,  74092.,  81420.,  77580.,  85164.,  81068.,  88908.,
      43646.,  47630.,  45518.,  49630.,  670.,    1838.,   2798.,   4094.,
      5676.,   8396.,   10188.,  13164.,  14700.,  17932.,  7902.,   9582.,
      10286.,  12094.,  11310.,  13118.,  13438.,  15374.,  28236.,  32236.,
      32748.,  37004.,  37260.,  41772.,  19822.,  22142.,  22206.,  24654.,
      22780.,  26652.,  27548.,  31676.,  57816.,  66328.,  67864.,  76888.,
      77912.,  87448.,  41340.,  46236.,  46620.,  51772.,  46620.,  51772.,
      51388.,  56796.,  108056., 119128., 118104., 129688., 128152., 140248.,
      67740.,  73916.,  73020.,  79452.,  70460.,  76892.,  75228.,  81916.,
      158296., 171928., 168344., 182488., 178392., 193048., 94140.,  101596.,
      99420.,  107132., 40430.,  43774.,  43070.,  46542.,  90060.,  97132.,
      95596.,  102924., 101132., 108716., 53038.,  56894.,  55934.,  59918.,
      53630.,  57614.,  56270.,  60382.,  117740., 126092., 123276., 131884.,
      128812., 137676., 67518.,  72014.,  70414.,  75038.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,
      2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,
      4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,
      3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,
      4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,
      6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,
      6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,
      5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,
      6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,
      6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,  7682.,
      8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,
      9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592., 11162.,
      11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,  8160.,
      7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888., 8540.,
      8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,  9728.,
      10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944., 11388.,
      11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934., 19648.,
      12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376., 13404.,
      13888., 14380., 14880., 14220., 14720., 15228., 15744., 6828.,  7232.,
      7644.,  8064.,  8028.,  8448.,  8876.,  9312.,  12310., 12952., 13606.,
      14272., 8492.,  8928.,  9372.,  9824.,  13006., 13672., 14350., 15040.,
      8956.,  9408.,  9868.,  10336., 10284., 10752., 11228., 11712., 12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      19802., 20576., 21362., 22160., 21794., 22592., 23402., 24224., 33453.,
      34668., 35901., 37152., 22970., 23792., 24626., 25472., 35217., 36468.,
      37737., 39024., 24146., 24992., 25850., 26720., 26330., 27200., 28082.,
      28976., 15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 24122., 24992., 25874., 26768., 26498., 27392., 28298.,
      29216., 40509., 41868., 43245., 44640., 27674., 28592., 29522., 30464.,
      42273., 43668., 45081., 46512., 28850., 29792., 30746., 31712., 31418.,
      32384., 33362., 34352., 18588., 19200., 19820., 20448., 20300., 20928.,
      21564., 22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380.,
      23040., 32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872.,
      23708., 24384., 25068., 25760., 27148., 27840., 28540., 29248., 28860.,
      29568., 30284., 31008., 44038., 45112., 46198., 47296., 29964., 30688.,
      31420., 32160., 45694., 46792., 47902., 49024., 31068., 31808., 32556.,
      33312., 32908., 33664., 34428., 35200., 13228., 13888., 14556., 15232.,
      15452., 16128., 16812., 17504., 23446., 24472., 25510., 26560., 15916.,
      16608., 17308., 18016., 24142., 25192., 26254., 27328., 16380., 17088.,
      17804., 18528., 18732., 19456., 20188., 20928., 24348., 25088., 25836.,
      26592., 26572., 27328., 28092., 28864., 40366., 41512., 42670., 43840.,
      27356., 28128., 28908., 29696., 41542., 42712., 43894., 45088., 28140.,
      28928., 29724., 30528., 30492., 31296., 32108., 32928., 37082., 38240.,
      39410., 40592., 40610., 41792., 42986., 44192., 61677., 63468., 65277.,
      67104., 41786., 42992., 44210., 45440., 63441., 65268., 67113., 68976.,
      42962., 44192., 45434., 46688., 46682., 47936., 49202., 50480., 27228.,
      28032., 28844., 29664., 29708., 30528., 31356., 32192., 45070., 46312.,
      47566., 48832., 30492., 31328., 32172., 33024., 46246., 47512., 48790.,
      50080., 31276., 32128., 32988., 33856., 33884., 34752., 35628., 36512.,
      41402., 42656., 43922., 45200., 45314., 46592., 47882., 49184., 68733.,
      70668., 72621., 74592., 46490., 47792., 49106., 50432., 70497., 72468.,
      74457., 76464., 47666., 48992., 50330., 51680., 51770., 53120., 54482.,
      55856., 30108., 30976., 31852., 32736., 32844., 33728., 34620., 35520.,
      49774., 51112., 52462., 53824., 33628., 34528., 35436., 36352., 50950.,
      52312., 53686., 55072., 34412., 35328., 36252., 37184., 37276., 38208.,
      39148., 40096., 43788., 44736., 45692., 46656., 46524., 47488., 48460.,
      49440., 70534., 71992., 73462., 74944., 47628., 48608., 49596., 50592.,
      72190., 73672., 75166., 76672., 48732., 49728., 50732., 51744., 51596.,
      52608., 53628., 54656.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  450.,   584.,   722.,   864.,   490.,
      632.,   778.,   928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,
      2204.,  2528.,  1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,
      1664.,  1226.,  1400.,  1578.,  1760.,  549.,   620.,   693.,   768.,
      585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,  1888.,  1502.,
      1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,  949.,   1036.,
      1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  729.,   820.,   913.,
      1008.,  765.,   860.,   957.,   1056.,  1854.,  2048.,  2246.,  2448.,
      1942.,  2144.,  2350.,  2560.,  2030.,  2240.,  2454.,  2672.,  1209.,
      1316.,  1425.,  1536.,  1261.,  1372.,  1485.,  1600.,  17.,    36.,
      57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,   278.,
      336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,   688.,
      273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,   357.,
      396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,   1024.,
      1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,  1454.,
      1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,   960.,
      722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,  1948.,
      2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,  2912.,
      3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,  1946.,
      2080.,  1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,  2144.,
      3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,  4524.,
      4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,  2856.,
      3026.,  3200.,  2402.,  2568.,  2738.,  2912.,  2570.,  2744.,  2922.,
      3104.,  5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,  7136.,
      6364.,  6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,  3690.,
      3896.,  4106.,  4320.,  1525.,  1612.,  1701.,  1792.,  1625.,  1716.,
      1809.,  1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,
      4304.,  3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,  2432.,
      2233.,  2340.,  2449.,  2560.,  2025.,  2132.,  2241.,  2352.,  2125.,
      2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,  5024.,
      5262.,  5504.,  5006.,  5248.,  5494.,  5744.,  2697.,  2820.,  2945.,
      3072.,  2813.,  2940.,  3069.,  3200.,  33.,    68.,    105.,   144.,
      165.,   204.,   245.,   288.,   334.,   416.,   502.,   592.,   614.,
      704.,   798.,   896.,   894.,   992.,   1094.,  1200.,  481.,   532.,
      585.,   640.,   629.,   684.,   741.,   800.,   693.,   748.,   805.,
      864.,   825.,   884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,
      2014.,  2144.,  2278.,  2416.,  2294.,  2432.,  2574.,  2720.,  1221.,
      1292.,  1365.,  1440.,  1369.,  1444.,  1521.,  1600.,  1394.,  1512.,
      1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,  3808.,  4076.,
      4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,  5388.,  5696.,
      2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,  3360.,  2874.,
      3032.,  3194.,  3360.,  3170.,  3336.,  3506.,  3680.,  6668.,  7008.,
      7356.,  7712.,  7292.,  7648.,  8012.,  8384.,  7916.,  8288.,  8668.,
      9056.,  4186.,  4376.,  4570.,  4768.,  4514.,  4712.,  4914.,  5120.,
      4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,
      10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488.,
      11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,
      6880.,  2501.,  2604.,  2709.,  2816.,  2665.,  2772.,  2881.,  2992.,
      5574.,  5792.,  6014.,  6240.,  5918.,  6144.,  6374.,  6608.,  6262.,
      6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,  3465.,  3588.,
      3713.,  3840.,  3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,
      3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,
      7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,
      4508.,  4653.,  4800.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      3140.,   4308.,   5540.,   6836.,   4516.,   5812.,   7172.,   8596.,
      8894.,   10934.,  13070.,  15302.,  8196.,   9620.,   11108.,  12660.,
      14414.,  16646.,  18974.,  21398.,  11876.,  13428.,  15044.,  16724.,
      14276.,  15956.,  17700.,  19508.,  10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      19414.,  22510.,  25702.,  28990.,  23014.,  26302.,  29686.,  33166.,
      40581.,  45657.,  50877.,  56241.,  32374.,  35854.,  39430.,  43102.,
      54621.,  59985.,  65493.,  71145.,  41734.,  45406.,  49174.,  53038.,
      46870.,  50734.,  54694.,  58750.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      53782.,  57646.,  61606.,  65662.,  60454.,  64510.,  68662.,  72910.,
      96741.,  102969., 109341., 115857., 69814.,  74062.,  78406.,  82846.,
      110781., 117297., 123957., 130761., 79174.,  83614.,  88150.,  92782.,
      87382.,  92014.,  96742.,  101566., 55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      83204.,  86676.,  90212.,  93812.,  88676.,  92276.,  95940.,  99668.,
      138974., 144470., 150062., 155750., 97476.,  101204., 104996., 108852.,
      152174., 157862., 163646., 169526., 106276., 110132., 114052., 118036.,
      112772., 116756., 120804., 124916., 53828.,  57044.,  60324.,  63668.,
      63396.,  66740.,  70148.,  73620.,  97214.,  102326., 107534., 112838.,
      67076.,  70548.,  74084.,  77684.,  102734., 108038., 113438., 118934.,
      70756.,  74356.,  78020.,  81748.,  81348.,  85076.,  88868.,  92724.,
      101668., 105524., 109444., 113428., 111236., 115220., 119268., 123380.,
      170894., 176966., 183134., 189398., 117476., 121588., 125764., 130004.,
      180254., 186518., 192878., 199334., 123716., 127956., 132260., 136628.,
      134308., 138676., 143108., 147604., 156886., 163054., 169318., 175678.,
      172774., 179134., 185590., 192142., 265221., 274905., 284733., 294705.,
      182134., 188686., 195334., 202078., 279261., 289233., 299349., 309609.,
      191494., 198238., 205078., 212014., 208918., 215854., 222886., 230014.,
      124580., 128948., 133380., 137876., 136196., 140692., 145252., 149876.,
      208334., 215174., 222110., 229142., 142436., 147060., 151748., 156500.,
      217694., 224726., 231854., 239078., 148676., 153428., 158244., 163124.,
      161316., 166196., 171140., 176148., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      147492., 152372., 157316., 162324., 161156., 166164., 171236., 176372.,
      245774., 253382., 261086., 268886., 167396., 172532., 177732., 182996.,
      255134., 262934., 270830., 278822., 173636., 178900., 184228., 189620.,
      188324., 193716., 199172., 204692., 215812., 221332., 226916., 232564.,
      229476., 235124., 240836., 246612., 350174., 358742., 367406., 376166.,
      238276., 244052., 249892., 255796., 363374., 372134., 380990., 389942.,
      247076., 252980., 258948., 264980., 261764., 267796., 273892., 280052.,
      104516., 109780., 115108., 120500., 122276., 127668., 133124., 138644.,
      185534., 193718., 201998., 210374., 125956., 131476., 137060., 142708.,
      191054., 199430., 207902., 216470., 129636., 135284., 140996., 146772.,
      148420., 154196., 160036., 165940., 193316., 199220., 205188., 211220.,
      211076., 217108., 223204., 229364., 320654., 329798., 339038., 348374.,
      217316., 223476., 229700., 235988., 330014., 339350., 348782., 358310.,
      223556., 229844., 236196., 242612., 242340., 248756., 255236., 261780.,
      294358., 303598., 312934., 322366., 322534., 331966., 341494., 351118.,
      489861., 504153., 518589., 533169., 331894., 341518., 351238., 361054.,
      503901., 518481., 533205., 548073., 341254., 351070., 360982., 370990.,
      370966., 380974., 391078., 401278., 216228., 222644., 229124., 235668.,
      236036., 242580., 249188., 255860., 358094., 368006., 378014., 388118.,
      242276., 248948., 255684., 262484., 367454., 377558., 387758., 398054.,
      248516., 255316., 262180., 269108., 269348., 276276., 283268., 290324.,
      328726., 338734., 348838., 359038., 359974., 370174., 380470., 390862.,
      546021., 561465., 577053., 592785., 369334., 379726., 390214., 400798.,
      560061., 575793., 591669., 607689., 378694., 389278., 399958., 410734.,
      411478., 422254., 433126., 444094., 239140., 246068., 253060., 260116.,
      260996., 268052., 275172., 282356., 395534., 406214., 416990., 427862.,
      267236., 274420., 281668., 288980., 404894., 415766., 426734., 437798.,
      273476., 280788., 288164., 295604., 296356., 303796., 311300., 318868.,
      348420., 355988., 363620., 371316., 370276., 377972., 385732., 393556.,
      561374., 573014., 584750., 596582., 379076., 386900., 394788., 402740.,
      574574., 586406., 598334., 610358., 387876., 395828., 403844., 411924.,
      410756., 418836., 426980., 435188.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569., 101.,   249.,
      413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,  2114.,
      2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,  5354.,
      2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,  2781.,
      3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,  8010.,
      8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538., 11410.,
      12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,  7553.,
      5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,  15204.,
      16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028., 22836.,
      24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274., 15306.,
      16370., 12250., 13250., 14282., 15346., 13578., 14642., 15738., 16866.,
      29764., 31956., 34212., 36532., 32676., 34996., 37380., 39828., 35588.,
      38036., 40548., 43124., 19610., 20866., 22154., 23474., 21194., 22514.,
      23866., 25250., 18890., 20210., 21562., 22946., 20218., 21602., 23018.,
      24466., 44324., 47156., 50052., 53012., 47236., 50196., 53220., 56308.,
      50148., 53236., 56388., 59604., 27530., 29106., 30714., 32354., 29114.,
      30754., 32426., 34130., 12029., 12721., 13429., 14153., 12821., 13545.,
      14285., 15041., 27586., 29066., 30578., 32122., 29298., 30842., 32418.,
      34026., 31010., 32618., 34258., 35930., 16733., 17553., 18389., 19241.,
      17653., 18505., 19373., 20257., 15989., 16841., 17709., 18593., 16781.,
      17665., 18565., 19481., 36146., 37946., 39778., 41642., 37858., 39722.,
      41618., 43546., 39570., 41498., 43458., 45450., 21333., 22313., 23309.,
      24321., 22253., 23265., 24293., 25337., 197.,   473.,   765.,   1073.,
      1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,  4554.,  4738.,
      5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,  3749.,  4153.,
      4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  5437.,  5873.,  6325.,
      6793.,  6485.,  6953.,  7437.,  7937.,  13634., 14602., 15602., 16634.,
      15858., 16890., 17954., 19050., 18082., 19178., 20306., 21466., 9629.,
      10193., 10773., 11369., 10805., 11401., 12013., 12641., 10922., 11858.,
      12826., 13826., 13274., 14274., 15306., 16370., 27876., 29940., 32068.,
      34260., 32836., 35028., 37284., 39604., 37796., 40116., 42500., 44948.,
      20074., 21266., 22490., 23746., 22682., 23938., 25226., 26546., 22682.,
      23938., 25226., 26546., 25034., 26354., 27706., 29090., 52676., 55380.,
      58148., 60980., 57636., 60468., 63364., 66324., 62596., 65556., 68580.,
      71668., 33114., 34626., 36170., 37746., 35722., 37298., 38906., 40546.,
      34442., 36018., 37626., 39266., 36794., 38434., 40106., 41810., 77476.,
      80820., 84228., 87700., 82436., 85908., 89444., 93044., 87396., 90996.,
      94660., 98388., 46154., 47986., 49850., 51746., 48762., 50658., 52586.,
      54546., 19805., 20625., 21461., 22313., 21109., 21961., 22829., 23713.,
      44162., 45898., 47666., 49466., 46898., 48698., 50530., 52394., 49634.,
      51498., 53394., 55322., 26045., 26993., 27957., 28937., 27477., 28457.,
      29453., 30465., 26325., 27305., 28301., 29313., 27629., 28641., 29669.,
      30713., 57842., 59898., 61986., 64106., 60578., 62698., 64850., 67034.,
      63314., 65498., 67714., 69962., 33205., 34313., 35437., 36577., 34637.,
      35777., 36933., 38105.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      23992.,   33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,   69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,   99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848.,  118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,   92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080.,  166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472.,  189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328.,  224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276.,  176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812.,  319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828.,  341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540.,  389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176.,  279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536.,  464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832.,  401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592.,  431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452.,  457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996.,  767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868.,  658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436.,  700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      662200.,  689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592.,  1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152.,  866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176.,  908472.,  940280.,  898232.,  930040.,  962360.,  995192.,
      427448.,  453112.,  479288.,  505976.,  503864.,  530552.,  557752.,
      585464.,  772660.,  813460.,  855028.,  897364.,  533176.,  560888.,
      589112.,  617848.,  816628.,  858964.,  902068.,  945940.,  562488.,
      591224.,  620472.,  650232.,  647096.,  676856.,  707128.,  737912.,
      809528.,  840312.,  871608.,  903416.,  885944.,  917752.,  950072.,
      982904.,  1361140., 1409620., 1458868., 1508884., 935736.,  968568.,
      1001912., 1035768., 1435828., 1485844., 1536628., 1588180., 985528.,
      1019384., 1053752., 1088632., 1070136., 1105016., 1140408., 1176312.,
      1248980., 1298228., 1348244., 1399028., 1375892., 1426676., 1478228.,
      1530548., 2112174., 2189502., 2267982., 2347614., 1450580., 1502900.,
      1555988., 1609844., 2224206., 2303838., 2384622., 2466558., 1525268.,
      1579124., 1633748., 1689140., 1664468., 1719860., 1776020., 1832948.,
      992312.,  1027192., 1062584., 1098488., 1085112., 1121016., 1157432.,
      1194360., 1659892., 1714516., 1769908., 1826068., 1134904., 1171832.,
      1209272., 1247224., 1734580., 1790740., 1847668., 1905364., 1184696.,
      1222648., 1261112., 1300088., 1285688., 1324664., 1364152., 1404152.,
      1523156., 1578548., 1634708., 1691636., 1674644., 1731572., 1789268.,
      1847732., 2560302., 2646846., 2734542., 2823390., 1749332., 1807796.,
      1867028., 1927028., 2672334., 2761182., 2851182., 2942334., 1824020.,
      1884020., 1944788., 2006324., 1987796., 2049332., 2111636., 2174708.,
      1175096., 1214072., 1253560., 1293560., 1284280., 1324280., 1364792.,
      1405816., 1958644., 2019412., 2080948., 2143252., 1334072., 1375096.,
      1416632., 1458680., 2033332., 2095636., 2158708., 2222548., 1383864.,
      1425912., 1468472., 1511544., 1501240., 1544312., 1587896., 1631992.,
      1721016., 1765112., 1809720., 1854840., 1830200., 1875320., 1920952.,
      1967096., 2792884., 2861332., 2930548., 3000532., 1900472., 1946616.,
      1993272., 2040440., 2898292., 2968276., 3039028., 3110548., 1970744.,
      2017912., 2065592., 2113784., 2088120., 2136312., 2185016., 2234232.,
      830904.,  872952.,  915512.,  958584.,  972856.,  1015928., 1059512.,
      1103608., 1476148., 1541524., 1607668., 1674580., 1002168., 1046264.,
      1090872., 1135992., 1520116., 1587028., 1654708., 1723156., 1031480.,
      1076600., 1122232., 1168376., 1181624., 1227768., 1274424., 1321592.,
      1540664., 1587832., 1635512., 1683704., 1682616., 1730808., 1779512.,
      1828728., 2556148., 2629204., 2703028., 2777620., 1732408., 1781624.,
      1831352., 1881592., 2630836., 2705428., 2780788., 2856916., 1782200.,
      1832440., 1883192., 1934456., 1932344., 1983608., 2035384., 2087672.,
      2345684., 2419508., 2494100., 2569460., 2570900., 2646260., 2722388.,
      2799284., 3904686., 4018878., 4134222., 4250718., 2645588., 2722484.,
      2800148., 2878580., 4016718., 4133214., 4250862., 4369662., 2720276.,
      2798708., 2877908., 2957876., 2957780., 3037748., 3118484., 3199988.,
      1723448., 1774712., 1826488., 1878776., 1881784., 1934072., 1986872.,
      2040184., 2854900., 2934100., 3014068., 3094804., 1931576., 1984888.,
      2038712., 2093048., 2929588., 3010324., 3091828., 3174100., 1981368.,
      2035704., 2090552., 2145912., 2147896., 2203256., 2259128., 2315512.,
      2619860., 2699828., 2780564., 2862068., 2869652., 2951156., 3033428.,
      3116468., 4352814., 4476222., 4600782., 4726494., 2944340., 3027380.,
      3111188., 3195764., 4464846., 4590558., 4717422., 4845438., 3019028.,
      3103604., 3188948., 3275060., 3281108., 3367220., 3454100., 3541748.,
      1906232., 1961592., 2017464., 2073848., 2080952., 2137336., 2194232.,
      2251640., 3153652., 3238996., 3325108., 3411988., 2130744., 2188152.,
      2246072., 2304504., 3228340., 3315220., 3402868., 3491284., 2180536.,
      2238968., 2297912., 2357368., 2363448., 2422904., 2482872., 2543352.,
      2779832., 2840312., 2901304., 2962808., 2954552., 3016056., 3078072.,
      3140600., 4479412., 4572436., 4666228., 4760788., 3024824., 3087352.,
      3150392., 3213944., 4584820., 4679380., 4774708., 4870804., 3095096.,
      3158648., 3222712., 3287288., 3278008., 3342584., 3407672., 3473272.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   830.,    2254.,   3806.,   5486.,
      990.,    2670.,   4478.,   6414.,   7260.,   10876.,  14748.,  18876.,
      8604.,   12732.,  17116.,  21756.,  9948.,   14588.,  19484.,  24636.,
      9662.,   12110.,  14686.,  17390.,  10846.,  13550.,  16382.,  19342.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  13820.,  19740.,  25916.,  32348.,
      16188.,  22620.,  29308.,  36252.,  53176.,  66552.,  80440.,  94840.,
      59960.,  74360.,  89272.,  104696., 66744.,  82168.,  98104.,  114552.,
      47868.,  55836.,  64060.,  72540.,  52284.,  60764.,  69500.,  78492.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 33470.,  37966.,  42590.,  47342.,
      35678.,  40430.,  45310.,  50318.,  86876.,  96636.,  106652., 116924.,
      92316.,  102588., 113116., 123900., 97756.,  108540., 119580., 130876.,
      58686.,  64206.,  69854.,  75630.,  61918.,  67694.,  73598.,  79630.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  670.,    1838.,   3134.,   4558.,
      4926.,   6350.,   7902.,   9582.,   10012.,  13116.,  16476.,  20092.,
      19548.,  23164.,  27036.,  31164.,  29084.,  33212.,  37596.,  42236.,
      16670.,  18862.,  21182.,  23630.,  21950.,  24398.,  26974.,  29678.,
      21950.,  24398.,  26974.,  29678.,  26206.,  28910.,  31742.,  34702.,
      57692.,  63356.,  69276.,  75452.,  67228.,  73404.,  79836.,  86524.,
      76764.,  83452.,  90396.,  97596.,  43070.,  46542.,  50142.,  53870.,
      48350.,  52078.,  55934.,  59918.,  44220.,  49628.,  55292.,  61212.,
      54780.,  60700.,  66876.,  73308.,  120120., 132472., 145336., 158712.,
      143288., 156664., 170552., 184952., 166456., 180856., 195768., 211192.,
      92604.,  100060., 107772., 115740., 105212., 113180., 121404., 129884.,
      97020.,  104988., 113212., 121692., 107580., 116060., 124796., 133788.,
      235960., 253432., 271416., 289912., 259128., 277624., 296632., 316152.,
      282296., 301816., 321848., 342392., 155644., 165660., 175932., 186460.,
      168252., 178780., 189564., 200604., 149820., 160348., 171132., 182172.,
      160380., 171420., 182716., 194268., 351800., 374392., 397496., 421112.,
      374968., 398584., 422712., 447352., 398136., 422776., 447928., 473592.,
      218684., 231260., 244092., 257180., 231292., 244380., 257724., 271324.,
      95550.,  101070., 106718., 112494., 101854., 107630., 113534., 119566.,
      219228., 231036., 243100., 255420., 232860., 245180., 257756., 270588.,
      246492., 259324., 272412., 285756., 133054., 139598., 146270., 153070.,
      140382., 147182., 154110., 161166., 127070., 133870., 140798., 147854.,
      133374., 140430., 147614., 154926., 287388., 301756., 316380., 331260.,
      301020., 315900., 331036., 346428., 314652., 330044., 345692., 361596.,
      169694., 177518., 185470., 193550., 177022., 185102., 193310., 201646.,
      1310.,   3502.,   5822.,   8270.,   9662.,   12110.,  14686.,  17390.,
      19484.,  24636.,  30044.,  35708.,  37212.,  42876.,  48796.,  54972.,
      54940.,  61116.,  67548.,  74236.,  29598.,  32814.,  36158.,  39630.,
      38974.,  42446.,  46046.,  49774.,  43070.,  46542.,  50142.,  53870.,
      51422.,  55150.,  59006.,  62990.,  108124., 115836., 123804., 132028.,
      125852., 134076., 142556., 151292., 143580., 152316., 161308., 170556.,
      76478.,  80974.,  85598.,  90350.,  85854.,  90606.,  95486.,  100494.,
      86460.,  93916.,  101628., 109596., 105212., 113180., 121404., 129884.,
      220984., 237432., 254392., 271864., 260536., 278008., 295992., 314488.,
      300088., 318584., 337592., 357112., 159420., 168924., 178684., 188700.,
      180220., 190236., 200508., 211036., 180220., 190236., 200508., 211036.,
      198972., 209500., 220284., 231324., 418744., 440312., 462392., 484984.,
      458296., 480888., 503992., 527608., 497848., 521464., 545592., 570232.,
      263420., 275484., 287804., 300380., 284220., 296796., 309628., 322716.,
      273980., 286556., 299388., 312476., 292732., 305820., 319164., 332764.,
      616504., 643192., 670392., 698104., 656056., 683768., 711992., 740728.,
      695608., 724344., 753592., 783352., 367420., 382044., 396924., 412060.,
      388220., 403356., 418748., 434396., 157630., 164174., 170846., 177646.,
      168030., 174830., 181758., 188814., 351580., 365436., 379548., 393916.,
      373404., 387772., 402396., 417276., 395228., 410108., 425244., 440636.,
      207422., 214990., 222686., 230510., 218846., 226670., 234622., 242702.,
      209630., 217454., 225406., 233486., 220030., 228110., 236318., 244654.,
      460700., 477116., 493788., 510716., 482524., 499452., 516636., 534076.,
      504348., 521788., 539484., 557436., 264542., 273390., 282366., 291470.,
      275966., 285070., 294302., 303662.};
  const std::array<int, 4> in_shape = {{3, 7, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      22.,   56.,   70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,
      140.,  244.,  192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,
      344.,  567.,  422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,
      452.,  490.,  244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,
      244.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  246.,  504.,  582.,  892.,
      614.,  940.,  646.,  732.,  436.,  894.,  972.,  1492., 1024., 1570.,
      1076., 1162., 676.,  1385., 1514., 2322., 1592., 2439., 1670., 1811.,
      532.,  1086., 1180., 1804., 1232., 1882., 1284., 1386., 820.,  1673.,
      1826., 2790., 1904., 2907., 1982., 2147., 628.,  1278., 1388., 2116.,
      1440., 2194., 1492., 1610., 898.,  1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 470.,  952.,  1094., 1660., 1126., 1708., 1158., 1308.,
      820.,  1662., 1804., 2740., 1856., 2818., 1908., 2058., 1252., 2537.,
      2762., 4194., 2840., 4311., 2918., 3155., 916.,  1854., 2012., 3052.,
      2064., 3130., 2116., 2282., 1396., 2825., 3074., 4662., 3152., 4779.,
      3230., 3491., 1012., 2046., 2220., 3364., 2272., 3442., 2324., 2506.,
      1442., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  0.,   30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,
      62.,  74.,  160., 186., 212., 116., 130., 0.,   122., 134., 290., 316.,
      342., 186., 200., 0.,   182., 194., 420., 446., 472., 256., 270., 0.,
      112., 119., 254., 269., 284., 152., 160., 0.,   147., 154., 329., 344.,
      359., 192., 200., 0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  0.,
      54.,  63.,  132., 151., 170., 90.,  100., 0.,   110., 130., 272., 314.,
      356., 188., 210., 0.,   210., 230., 482., 524., 566., 298., 320., 0.,
      310., 330., 692., 734., 776., 408., 430., 0.,   176., 187., 390., 413.,
      436., 228., 240., 0.,   231., 242., 505., 528., 551., 288., 300., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      138.,   368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,
      888.,   992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,
      1912.,  3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,
      4202.,  3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,
      4972.,  7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,
      7262.,  5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,
      5616.,  3366.,  6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,
      5213.,  10684., 11704., 17955., 12316., 18873., 12928., 14044., 4118.,
      8408.,  9152.,  13994., 9560.,  14606., 9968.,  10776., 6341.,  12940.,
      14152., 21627., 14764., 22545., 15376., 16684., 4870.,  9912.,  10784.,
      16442., 11192., 17054., 11600., 12536., 7010.,  14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3594.,  7280.,  8408.,  12758., 8656.,
      13130., 8904.,  10096., 6374.,  12920., 14048., 21338., 14456., 21950.,
      14864., 16056., 9725.,  19708., 21496., 32643., 22108., 33561., 22720.,
      24604., 7126.,  14424., 15680., 23786., 16088., 24398., 16496., 17816.,
      10853., 21964., 23944., 36315., 24556., 37233., 25168., 27244., 7878.,
      15928., 17312., 26234., 17720., 26846., 18128., 19576., 11298., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,
      449.,  0.,    450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,
      910.,  1002., 2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462.,
      3176., 3376., 3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052.,
      2168., 1163., 1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473.,
      1535., 0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  0.,
      403.,  473.,  992.,  1140., 1288., 683.,  761.,  0.,    818.,  974.,
      2040., 2368., 2696., 1426., 1598., 0.,    1598., 1754., 3680., 4008.,
      4336., 2286., 2458., 0.,    2378., 2534., 5320., 5648., 5976., 3146.,
      3318., 0.,    1355., 1441., 3008., 3188., 3368., 1763., 1857., 0.,
      1785., 1871., 3908., 4088., 4268., 2233., 2327., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      956.,   2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,  6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,  12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,  18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146., 30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540., 30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      21340., 44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      14524., 29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      26444., 54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,
      40930., 83900.,  92012.,  141174., 96860.,  148446., 101708., 110588.,
      32396., 66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858., 101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348., 78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      55388., 112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      28092., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,  79304.,
      50252., 101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      76642., 155324., 169580., 257526., 174428., 264798., 179276., 194300.,
      56204., 113768., 123784., 187780., 127016., 192628., 130248., 140776.,
      85570., 173180., 188972., 286614., 193820., 293886., 198668., 215228.,
      62156., 125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      89436., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      0.,     1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,
      3420.,  4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,
      7740.,  16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340.,
      24680., 26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108.,
      16020., 16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580.,
      21492., 11534., 12022., 0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,
      5934.,  0.,     6300.,  7532.,  15784., 18376., 20968., 11100., 12460.,
      0.,     12460., 13692., 28744., 31336., 33928., 17900., 19260., 0.,
      18620., 19852., 41704., 44296., 46888., 24700., 26060., 0.,     10630.,
      11310., 23620., 25044., 26468., 13862., 14606., 0.,     14030., 14710.,
      30740., 32164., 33588., 17582., 18326., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      50.,    88.,    144.,   224.,   192.,   280.,   358.,   496.,   312.,
      408.,   538.,   688.,   432.,   536.,   512.,   624.,   150.,   208.,
      384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,   1078.,
      1288.,  832.,   976.,   912.,   1064.,  301.,   400.,   728.,   932.,
      848.,   1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,
      1688.,  1616.,  1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,
      1978.,  2224.,  1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,
      1960.,  853.,   976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,
      2348.,  2624.,  3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,
      976.,   1856.,  2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,
      3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  1306.,  1416.,  2736.,
      2960.,  2912.,  3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,
      3472.,  3720.,  3680.,  3936.,  882.,   984.,   1808.,  2016.,  2112.,
      2328.,  3238.,  3568.,  2232.,  2456.,  3418.,  3760.,  2352.,  2584.,
      2688.,  2928.,  1622.,  1744.,  3328.,  3576.,  3632.,  3888.,  5578.,
      5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,  4648.,
      2509.,  2704.,  5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,
      6368.,  9117.,  9756.,  6248.,  6680.,  6800.,  7244.,  1990.,  2128.,
      4064.,  4344.,  4432.,  4720.,  6778.,  7216.,  4632.,  4928.,  7078.,
      7528.,  4832.,  5136.,  5232.,  5544.,  3061.,  3280.,  6248.,  6692.,
      6848.,  7304.,  10467., 11160., 7148.,  7616.,  10917., 11628., 7448.,
      7928.,  8096.,  8588.,  2358.,  2512.,  4800.,  5112.,  5232.,  5552.,
      7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,  5968.,  6096.,
      6440.,  3418.,  3592.,  6960.,  7312.,  7392.,  7752.,  11278., 11824.,
      7672.,  8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  1714.,
      1880.,  3472.,  3808.,  4032.,  4376.,  6118.,  6640.,  4152.,  4504.,
      6298.,  6832.,  4272.,  4632.,  4864.,  5232.,  3094.,  3280.,  6272.,
      6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678., 11272.,
      7232.,  7632.,  7824.,  8232.,  4717.,  5008.,  9560.,  10148., 10448.,
      11048., 15867., 16776., 10748., 11360., 16317., 17244., 11048., 11672.,
      11984., 12620., 3462.,  3664.,  7008.,  7416.,  7632.,  8048.,  11578.,
      12208., 7832.,  8256.,  11878., 12520., 8032.,  8464.,  8688.,  9128.,
      5269.,  5584.,  10664., 11300., 11648., 12296., 17667., 18648., 11948.,
      12608., 18117., 19116., 12248., 12920., 13280., 13964., 3830.,  4048.,
      7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,  9088.,  13078.,
      13768., 8832.,  9296.,  9552.,  10024., 5530.,  5768.,  11184., 11664.,
      11872., 12360., 17998., 18736., 12152., 12648., 18418., 19168., 12432.,
      12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    146.,  216.,  158.,  232.,  440.,  592.,
      472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,  0.,    0.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  0.,    0.,    205.,  252.,  215.,  264.,
      512.,  612.,  536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,
      0.,    0.,    9.,    20.,   27.,   40.,   56.,   84.,   96.,   128.,
      136.,  172.,  77.,   96.,   99.,   120.,  0.,    0.,    99.,   120.,
      117.,  140.,  256.,  304.,  296.,  348.,  336.,  392.,  187.,  216.,
      209.,  240.,  0.,    0.,    202.,  248.,  246.,  296.,  536.,  640.,
      632.,  744.,  728.,  848.,  402.,  464.,  454.,  520.,  0.,    0.,
      422.,  488.,  466.,  536.,  1016., 1160., 1112., 1264., 1208., 1368.,
      662.,  744.,  714.,  800.,  0.,    0.,    642.,  728.,  686.,  776.,
      1496., 1680., 1592., 1784., 1688., 1888., 922.,  1024., 974.,  1080.,
      0.,    0.,    403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076.,
      1032., 1136., 555.,  608.,  585.,  640.,  0.,    0.,    533.,  588.,
      559.,  616.,  1200., 1316., 1256., 1376., 1312., 1436., 705.,  768.,
      735.,  800.,  0.,    0.,    17.,   36.,   51.,   72.,   104.,  148.,
      176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,  0.,    0.,
      187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,
      323.,  360.,  361.,  400.,  0.,    0.,    378.,  440.,  454.,  520.,
      952.,  1088., 1112., 1256., 1272., 1424., 674.,  752.,  758.,  840.,
      0.,    0.,    758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096.,
      2072., 2264., 1094., 1192., 1178., 1280., 0.,    0.,    1138., 1240.,
      1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104., 1514., 1632.,
      1598., 1720., 0.,    0.,    651.,  704.,  693.,  748.,  1448., 1560.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204.,
      1081., 1152., 1127., 1200., 0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      330.,   626.,    1004.,   1628.,   1372.,  2060.,   2606.,   3686.,
      2316.,  3068.,   4022.,   5198.,   3260.,  4076.,   3884.,   4764.,
      1090.,  1546.,   2844.,   3788.,   3212.,  4220.,   5846.,   7406.,
      4796.,  5868.,   8222.,   9878.,   6380.,  7516.,   7004.,   8204.,
      2219.,  2999.,   5434.,   7042.,   6370.,  8074.,   11097.,  13725.,
      8746.,  10546.,  14661.,  17433.,  11122., 13018.,  12442.,  14434.,
      4002.,  4586.,   8668.,   9868.,   9548.,  10812.,  15350.,  17294.,
      11132., 12460.,  17726.,  19766.,  12716., 14108.,  13852.,  15308.,
      6587.,  7559.,   14170.,  16162.,  15874., 17962.,  25353.,  28557.,
      18250., 20434.,  28917.,  32265.,  20626., 22906.,  22714.,  25090.,
      6914.,  7626.,   14492.,  15948.,  15884., 17404.,  24854.,  27182.,
      17468., 19052.,  27230.,  29654.,  19052., 20700.,  20700.,  22412.,
      10234., 11106.,  21452.,  23228.,  22844., 24684.,  35774.,  38582.,
      25068., 26972.,  39110.,  42014.,  27292., 29260.,  28940.,  30972.,
      6858.,  7666.,   14060.,  15708.,  16476., 18188.,  25262.,  27878.,
      17420., 19196.,  26678.,  29390.,  18364., 20204.,  21036.,  22940.,
      12738., 13706.,  26140.,  28108.,  28556., 30588.,  43862.,  46958.,
      30140., 32236.,  46238.,  49430.,  31724., 33884.,  34396.,  36620.,
      19691., 21239.,  40378.,  43522.,  44386., 47626.,  68121.,  73053.,
      46762., 50098.,  71685.,  76761.,  49138., 52570.,  53530.,  57058.,
      15650., 16746.,  31964.,  34188.,  34892., 37180.,  53366.,  56846.,
      36476., 38828.,  55742.,  59318.,  38060., 40476.,  41244.,  43724.,
      24059., 25799.,  49114.,  52642.,  53890., 57514.,  82377.,  87885.,
      56266., 59986.,  85941.,  91593.,  58642., 62458.,  63802.,  67714.,
      18562., 19786.,  37788.,  40268.,  41228., 43772.,  62870.,  66734.,
      42812., 45420.,  65246.,  69206.,  44396., 47068.,  48092.,  50828.,
      27002., 28386.,  54988.,  57788.,  58428., 61292.,  89150.,  93494.,
      60652., 63580.,  92486.,  96926.,  62876., 65868.,  66572.,  69628.,
      13386., 14706.,  27116.,  29788.,  31580., 34316.,  47918.,  52070.,
      32524., 35324.,  49334.,  53582.,  33468., 36332.,  38188.,  41116.,
      24386., 25866.,  49436.,  52428.,  53900., 56956.,  81878.,  86510.,
      55484., 58604.,  84254.,  88982.,  57068., 60252.,  61788.,  65036.,
      37163., 39479.,  75322.,  80002.,  82402., 87178.,  125145., 132381.,
      84778., 89650.,  128709., 136089., 87154., 92122.,  94618.,  99682.,
      27298., 28906.,  55260.,  58508.,  60236., 63548.,  91382.,  96398.,
      61820., 65196.,  93758.,  98870.,  63404., 66844.,  68636.,  72140.,
      41531., 44039.,  84058.,  89122.,  91906., 97066.,  139401., 147213.,
      94282., 99538.,  142965., 150921., 96658., 102010., 104890., 110338.,
      30210., 31946.,  61084.,  64588.,  66572., 70140.,  100886., 106286.,
      68156., 71788.,  103262., 108758., 69740., 73436.,  75484.,  79244.,
      43770., 45666.,  88524.,  92348.,  94012., 97900.,  142526., 148406.,
      96236., 100188., 145862., 151838., 98460., 102476., 104204., 108284.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,  4732.,
      3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  0.,     0.,     1169.,
      1461.,  1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,
      1985.,  2341.,  2093.,  2465.,  0.,     0.,     1549.,  1921.,  1625.,
      2013.,  3902.,  4694.,  4086.,  4910.,  4270.,  5126.,  2525.,  2961.,
      2633.,  3085.,  0.,     0.,     53.,    137.,   193.,   293.,   398.,
      614.,   710.,   958.,   1022.,  1302.,  581.,   729.,   753.,   917.,
      0.,     0.,     753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,
      2678.,  2582.,  3022.,  1441.,  1669.,  1613.,  1857.,  0.,     0.,
      1530.,  1890.,  1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,
      6540.,  3098.,  3586.,  3506.,  4026.,  0.,     0.,     3250.,  3770.,
      3594.,  4146.,  7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,
      5786.,  5546.,  6226.,  0.,     0.,     4970.,  5650.,  5314.,  6026.,
      11612., 13068., 12364., 13884., 13116., 14700., 7178.,  7986.,  7586.,
      8426.,  0.,     0.,     3137.,  3493.,  3341.,  3713.,  7174.,  7934.,
      7614.,  8406.,  8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  0.,
      0.,     4157.,  4593.,  4361.,  4813.,  9374.,  10294., 9814.,  10766.,
      10254., 11238., 5517.,  6017.,  5753.,  6269.,  0.,     0.,     101.,
      249.,   369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,
      1013.,  1225.,  1313.,  1541.,  0.,     0.,     1441.,  1669.,  1709.,
      1953.,  3590.,  4094.,  4158.,  4694.,  4726.,  5294.,  2513.,  2805.,
      2813.,  3121.,  0.,     0.,     2906.,  3394.,  3506.,  4026.,  7356.,
      8428.,  8620.,  9756.,  9884.,  11084., 5242.,  5858.,  5906.,  6554.,
      0.,     0.,     5906.,  6554.,  6506.,  7186.,  13676., 15068., 14940.,
      16396., 16204., 17724., 8562.,  9338.,  9226.,  10034., 0.,     0.,
      8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524.,
      24364., 11882., 12818., 12546., 13514., 0.,     0.,     5105.,  5525.,
      5437.,  5873.,  11366., 12254., 12062., 12982., 12758., 13710., 6689.,
      7173.,  7053.,  7553.,  0.,     0.,     6765.,  7265.,  7097.,  7613.,
      14846., 15894., 15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,
      9453.,  0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2364.,    4700.,    7448.,    12376.,  10328.,   15768.,   19828.,
      28372.,   17816.,   23768.,   31060.,  40372.,   25304.,   31768.,
      30232.,   37208.,   8284.,    11900.,  21848.,   29336.,   24728.,
      32728.,   45268.,   57652.,   37336.,  45848.,   64180.,   77332.,
      49944.,   58968.,   54872.,   64408.,  17002.,   23194.,   41924.,
      54692.,   49316.,   62852.,   86238.,  107118.,  68228.,   82532.,
      114606.,  136638.,  87140.,   102212., 97604.,   113444.,  31452.,
      36092.,   68184.,   77720.,   75160.,  85208.,   120916.,  136372.,
      87768.,   98328.,   139828.,  156052., 100376.,  111448.,  109400.,
      120984.,  51754.,   59482.,   111428., 127268.,  124964.,  141572.,
      199710.,  225198.,  143876.,  161252., 228078.,  254718.,  162788.,
      180932.,  179396.,  198308.,  54620.,  60284.,   114520.,  126104.,
      125592.,  137688.,  196564.,  215092., 138200.,  150808.,  215476.,
      234772.,  150808.,  163928.,  163928., 177560.,  81020.,   87964.,
      169880.,  184024.,  180952.,  195608., 283444.,  305812.,  198680.,
      213848.,  310036.,  333172.,  216408., 232088.,  229528.,  245720.,
      54076.,   60508.,   110872.,  123992., 130136.,  143768.,  199540.,
      220372.,  137624.,  151768.,  210772., 232372.,  145112.,  159768.,
      166424.,  181592.,  100956.,  108668., 207192.,  222872.,  226456.,
      242648.,  347860.,  372532.,  239064., 255768.,  366772.,  392212.,
      251672.,  268888.,  272984.,  290712., 156010.,  168346.,  319940.,
      344996.,  351908.,  377732.,  540126., 579438.,  370820.,  397412.,
      568494.,  608958.,  389732.,  417092., 424772.,  452900.,  124124.,
      132860.,  253528.,  271256.,  276888., 295128.,  423508.,  451252.,
      289496.,  308248.,  442420.,  470932., 302104.,  321368.,  327512.,
      347288.,  190762.,  204634.,  389444., 417572.,  427556.,  456452.,
      653598.,  697518.,  446468.,  476132., 681966.,  727038.,  465380.,
      495812.,  506564.,  537764.,  147292., 157052.,  299864.,  319640.,
      327320.,  347608.,  499156.,  529972., 339928.,  360728.,  518068.,
      549652.,  352536.,  373848.,  382040., 403864.,  214652.,  225692.,
      437144.,  459480.,  464600.,  487448., 708916.,  743572.,  482328.,
      505688.,  735508.,  770932.,  500056., 523928.,  529560.,  553944.,
      105788.,  116316.,  214296.,  235608., 249944.,  271768.,  379252.,
      412372.,  257432.,  279768.,  390484., 424372.,  264920.,  287768.,
      302616.,  325976.,  193628.,  205436., 392536.,  416408.,  428184.,
      452568.,  650452.,  687412.,  440792., 465688.,  669364.,  707092.,
      453400.,  478808.,  491096.,  517016., 295018.,  313498.,  597956.,
      635300.,  654500.,  692612.,  994014., 1051758., 673412.,  712292.,
      1022382., 1081278., 692324.,  731972., 751940.,  792356.,  216796.,
      229628.,  438872.,  464792.,  478616., 505048.,  726100.,  766132.,
      491224.,  518168.,  745012.,  785812., 503832.,  531288.,  545624.,
      573592.,  329770.,  349786.,  667460., 707876.,  730148.,  771332.,
      1107486., 1169838., 749060.,  791012., 1135854., 1199358., 767972.,
      810692.,  833732.,  877220.,  239964., 253820.,  485208.,  513176.,
      529048.,  557528.,  801748.,  844852., 541656.,  570648.,  820660.,
      864532.,  554264.,  583768.,  600152., 630168.,  348284.,  363420.,
      704408.,  734936.,  748248.,  779288., 1134388., 1181332., 765976.,
      797528.,  1160980., 1208692., 783704., 815768.,  829592.,  862168.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,   382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,  1774.,   1454.,   2238.,   0.,      0.,
      430.,    1214.,   510.,   1422.,   2380.,   4332.,   2796.,   5004.,
      3212.,   5676.,   2798.,  4094.,   3134.,   4558.,   0.,      0.,
      1020.,   2844.,   1692.,  3772.,   6104.,   10520.,  7960.,   12888.,
      9816.,   15256.,  7292.,  10140.,  8476.,   11580.,  0.,      0.,
      4380.,   7484.,   5052.,  8412.,   15384.,  22360.,  17240.,  24728.,
      19096.,  27096.,  13212., 17340.,  14396.,  18780.,  0.,      0.,
      7740.,   12124.,  8412.,  13052.,  24664.,  34200.,  26520.,  36568.,
      28376.,  38936.,  19132., 24540.,  20316.,  25980.,  0.,      0.,
      9070.,   11390.,  9662.,  12110.,  23244.,  28268.,  24684.,  29964.,
      26124.,  31660.,  15534., 18366.,  16382.,  19342.,  0.,      0.,
      12030.,  14990.,  12622., 15710.,  30444.,  36748.,  31884.,  38444.,
      33324.,  40140.,  19774., 23246.,  20622.,  24222.,  0.,      0.,
      350.,    1006.,   1454.,  2238.,   2988.,   4684.,   5452.,   7404.,
      7916.,   10124.,  4510.,  5678.,   5870.,   7166.,   0.,      0.,
      5870.,   7166.,   6974.,  8398.,   15308.,  18284.,  17772.,  21004.,
      20236.,  23724.,  11310., 13118.,  12670.,  14606.,  0.,      0.,
      11900.,  14748.,  14620., 17724.,  31960.,  38424.,  37912.,  44888.,
      43864.,  51352.,  24316., 28188.,  27548.,  31676.,  0.,      0.,
      25500.,  29628.,  28220., 32604.,  61720.,  70744.,  67672.,  77208.,
      73624.,  83672.,  40476., 45628.,  43708.,  49116.,  0.,      0.,
      39100.,  44508.,  41820., 47484.,  91480.,  103064., 97432.,  109528.,
      103384., 115992., 56636., 63068.,  59868.,  66556.,  0.,      0.,
      24750.,  27582.,  26366., 29326.,  56652.,  62700.,  60140.,  66444.,
      63628.,  70188.,  34286., 37630.,  36158.,  39630.,  0.,      0.,
      32830.,  36302.,  34446., 38046.,  74092.,  81420.,  77580.,  85164.,
      81068.,  88908.,  43646., 47630.,  45518.,  49630.,  0.,      0.,
      670.,    1838.,   2798.,  4094.,   5676.,   8396.,   10188.,  13164.,
      14700.,  17932.,  7902.,  9582.,   10286.,  12094.,  0.,      0.,
      11310.,  13118.,  13438., 15374.,  28236.,  32236.,  32748.,  37004.,
      37260.,  41772.,  19822., 22142.,  22206.,  24654.,  0.,      0.,
      22780.,  26652.,  27548., 31676.,  57816.,  66328.,  67864.,  76888.,
      77912.,  87448.,  41340., 46236.,  46620.,  51772.,  0.,      0.,
      46620.,  51772.,  51388., 56796.,  108056., 119128., 118104., 129688.,
      128152., 140248., 67740., 73916.,  73020.,  79452.,  0.,      0.,
      70460.,  76892.,  75228., 81916.,  158296., 171928., 168344., 182488.,
      178392., 193048., 94140., 101596., 99420.,  107132., 0.,      0.,
      40430.,  43774.,  43070., 46542.,  90060.,  97132.,  95596.,  102924.,
      101132., 108716., 53038., 56894.,  55934.,  59918.,  0.,      0.,
      53630.,  57614.,  56270., 60382.,  117740., 126092., 123276., 131884.,
      128812., 137676., 67518., 72014.,  70414.,  75038.,  0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      130.,   200.,   274.,   352.,   428.,   576.,   732.,   896.,   604.,
      768.,   940.,   1120.,  1174.,  1432.,  1702.,  1984.,  1068.,  1248.,
      1436.,  1632.,  1870.,  2152.,  2446.,  2752.,  1532.,  1728.,  1932.,
      2144.,  1836.,  2048.,  2268.,  2496.,  490.,   600.,   714.,   832.,
      1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,  2240.,  2734.,
      3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,  3910.,  4312.,
      4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,  3648.,  3948.,
      4256.,  1015.,  1204.,  1399.,  1600.,  2522.,  2912.,  3314.,  3728.,
      2978.,  3392.,  3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,
      4592.,  5042.,  5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,
      6266.,  6752.,  5978.,  6464.,  6962.,  7472.,  1930.,  2072.,  2218.,
      2368.,  4188.,  4480.,  4780.,  5088.,  4620.,  4928.,  5244.,  5568.,
      7438.,  7912.,  8398.,  8896.,  5404.,  5728.,  6060.,  6400.,  8614.,
      9112.,  9622.,  10144., 6188.,  6528.,  6876.,  7232.,  6748.,  7104.,
      7468.,  7840.,  3175.,  3412.,  3655.,  3904.,  6842.,  7328.,  7826.,
      8336.,  7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688.,
      8858.,  9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034.,
      10592., 11162., 11744., 11066., 11648., 12242., 12848., 3370.,  3544.,
      3722.,  3904.,  7068.,  7424.,  7788.,  8160.,  7756.,  8128.,  8508.,
      8896.,  12142., 12712., 13294., 13888., 8540.,  8928.,  9324.,  9728.,
      13318., 13912., 14518., 15136., 9324.,  9728.,  10140., 10560., 10140.,
      10560., 10988., 11424., 5010.,  5224.,  5442.,  5664.,  10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744., 3330.,
      3528.,  3730.,  3936.,  6828.,  7232.,  7644.,  8064.,  8028.,  8448.,
      8876.,  9312.,  12310., 12952., 13606., 14272., 8492.,  8928.,  9372.,
      9824.,  13006., 13672., 14350., 15040., 8956.,  9408.,  9868.,  10336.,
      10284., 10752., 11228., 11712., 6250.,  6488.,  6730.,  6976.,  12828.,
      13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550., 22312.,
      23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512., 24310.,
      25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028., 18592.,
      9655.,  10036., 10423., 10816., 19802., 20576., 21362., 22160., 21794.,
      22592., 23402., 24224., 33453., 34668., 35901., 37152., 22970., 23792.,
      24626., 25472., 35217., 36468., 37737., 39024., 24146., 24992., 25850.,
      26720., 26330., 27200., 28082., 28976., 7690.,  7960.,  8234.,  8512.,
      15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880., 26254.,
      27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430., 28312.,
      29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928., 21548.,
      22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874., 26768.,
      26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674.,
      28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792.,
      30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,  9738.,
      10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564., 22208.,
      30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040., 32134.,
      33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708., 24384.,
      25068., 25760., 13330., 13672., 14018., 14368., 27148., 27840., 28540.,
      29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198., 47296.,
      29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024., 31068.,
      31808., 32556., 33312., 32908., 33664., 34428., 35200., 6530.,  6856.,
      7186.,  7520.,  13228., 13888., 14556., 15232., 15452., 16128., 16812.,
      17504., 23446., 24472., 25510., 26560., 15916., 16608., 17308., 18016.,
      24142., 25192., 26254., 27328., 16380., 17088., 17804., 18528., 18732.,
      19456., 20188., 20928., 12010., 12376., 12746., 13120., 24348., 25088.,
      25836., 26592., 26572., 27328., 28092., 28864., 40366., 41512., 42670.,
      43840., 27356., 28128., 28908., 29696., 41542., 42712., 43894., 45088.,
      28140., 28928., 29724., 30528., 30492., 31296., 32108., 32928., 18295.,
      18868., 19447., 20032., 37082., 38240., 39410., 40592., 40610., 41792.,
      42986., 44192., 61677., 63468., 65277., 67104., 41786., 42992., 44210.,
      45440., 63441., 65268., 67113., 68976., 42962., 44192., 45434., 46688.,
      46682., 47936., 49202., 50480., 13450., 13848., 14250., 14656., 27228.,
      28032., 28844., 29664., 29708., 30528., 31356., 32192., 45070., 46312.,
      47566., 48832., 30492., 31328., 32172., 33024., 46246., 47512., 48790.,
      50080., 31276., 32128., 32988., 33856., 33884., 34752., 35628., 36512.,
      20455., 21076., 21703., 22336., 41402., 42656., 43922., 45200., 45314.,
      46592., 47882., 49184., 68733., 70668., 72621., 74592., 46490., 47792.,
      49106., 50432., 70497., 72468., 74457., 76464., 47666., 48992., 50330.,
      51680., 51770., 53120., 54482., 55856., 14890., 15320., 15754., 16192.,
      30108., 30976., 31852., 32736., 32844., 33728., 34620., 35520., 49774.,
      51112., 52462., 53824., 33628., 34528., 35436., 36352., 50950., 52312.,
      53686., 55072., 34412., 35328., 36252., 37184., 37276., 38208., 39148.,
      40096., 21650., 22120., 22594., 23072., 43788., 44736., 45692., 46656.,
      46524., 47488., 48460., 49440., 70534., 71992., 73462., 74944., 47628.,
      48608., 49596., 50592., 72190., 73672., 75166., 76672., 48732., 49728.,
      50732., 51744., 51596., 52608., 53628., 54656.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     450.,   584.,   722.,   864.,   490.,   632.,   778.,
      928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,  2204.,  2528.,
      1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,  1664.,  1226.,
      1400.,  1578.,  1760.,  0.,     0.,     0.,     0.,     549.,   620.,
      693.,   768.,   585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,
      1888.,  1502.,  1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,
      949.,   1036.,  1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  0.,
      0.,     0.,     0.,     729.,   820.,   913.,   1008.,  765.,   860.,
      957.,   1056.,  1854.,  2048.,  2246.,  2448.,  1942.,  2144.,  2350.,
      2560.,  2030.,  2240.,  2454.,  2672.,  1209.,  1316.,  1425.,  1536.,
      1261.,  1372.,  1485.,  1600.,  0.,     0.,     0.,     0.,     17.,
      36.,    57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,
      278.,   336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,
      688.,   273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,
      0.,     0.,     0.,     0.,     357.,   396.,   437.,   480.,   425.,
      468.,   513.,   560.,   934.,   1024.,  1118.,  1216.,  1086.,  1184.,
      1286.,  1392.,  1238.,  1344.,  1454.,  1568.,  693.,   748.,   805.,
      864.,   777.,   836.,   897.,   960.,   0.,     0.,     0.,     0.,
      722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,  1948.,
      2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,  2912.,
      3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,  1946.,
      2080.,  0.,     0.,     0.,     0.,     1562.,  1688.,  1818.,  1952.,
      1730.,  1864.,  2002.,  2144.,  3788.,  4064.,  4348.,  4640.,  4156.,
      4448.,  4748.,  5056.,  4524.,  4832.,  5148.,  5472.,  2490.,  2648.,
      2810.,  2976.,  2690.,  2856.,  3026.,  3200.,  0.,     0.,     0.,
      0.,     2402.,  2568.,  2738.,  2912.,  2570.,  2744.,  2922.,  3104.,
      5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,  7136.,  6364.,
      6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,  3690.,  3896.,
      4106.,  4320.,  0.,     0.,     0.,     0.,     1525.,  1612.,  1701.,
      1792.,  1625.,  1716.,  1809.,  1904.,  3494.,  3680.,  3870.,  4064.,
      3710.,  3904.,  4102.,  4304.,  3926.,  4128.,  4334.,  4544.,  2117.,
      2220.,  2325.,  2432.,  2233.,  2340.,  2449.,  2560.,  0.,     0.,
      0.,     0.,     2025.,  2132.,  2241.,  2352.,  2125.,  2236.,  2349.,
      2464.,  4574.,  4800.,  5030.,  5264.,  4790.,  5024.,  5262.,  5504.,
      5006.,  5248.,  5494.,  5744.,  2697.,  2820.,  2945.,  3072.,  2813.,
      2940.,  3069.,  3200.,  0.,     0.,     0.,     0.,     33.,    68.,
      105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,   502.,
      592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,  1200.,
      481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,   0.,
      0.,     0.,     0.,     693.,   748.,   805.,   864.,   825.,   884.,
      945.,   1008.,  1734.,  1856.,  1982.,  2112.,  2014.,  2144.,  2278.,
      2416.,  2294.,  2432.,  2574.,  2720.,  1221.,  1292.,  1365.,  1440.,
      1369.,  1444.,  1521.,  1600.,  0.,     0.,     0.,     0.,     1394.,
      1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,  3808.,
      4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,  5388.,
      5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,  3360.,
      0.,     0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,  3170.,
      3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,  7648.,
      8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,  4570.,
      4768.,  4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,     0.,
      4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,
      10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488.,
      11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,
      6880.,  0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,  2816.,
      2665.,  2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,
      6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,
      3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,     0.,
      0.,     3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,
      7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,
      8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,
      4653.,  4800.,  0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      39658.,  41362.,  43098.,  44866.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.,
      26250.,  27826.,  29434.,  31074.,  53828.,  57044.,  60324.,  63668.,
      63396.,  66740.,  70148.,  73620.,  97214.,  102326., 107534., 112838.,
      67076.,  70548.,  74084.,  77684.,  102734., 108038., 113438., 118934.,
      70756.,  74356.,  78020.,  81748.,  81348.,  85076.,  88868.,  92724.,
      49530.,  51426.,  53354.,  55314.,  101668., 105524., 109444., 113428.,
      111236., 115220., 119268., 123380., 170894., 176966., 183134., 189398.,
      117476., 121588., 125764., 130004., 180254., 186518., 192878., 199334.,
      123716., 127956., 132260., 136628., 134308., 138676., 143108., 147604.,
      76487.,  79523.,  82607.,  85739.,  156886., 163054., 169318., 175678.,
      172774., 179134., 185590., 192142., 265221., 274905., 284733., 294705.,
      182134., 188686., 195334., 202078., 279261., 289233., 299349., 309609.,
      191494., 198238., 205078., 212014., 208918., 215854., 222886., 230014.,
      60986.,  63138.,  65322.,  67538.,  124580., 128948., 133380., 137876.,
      136196., 140692., 145252., 149876., 208334., 215174., 222110., 229142.,
      142436., 147060., 151748., 156500., 217694., 224726., 231854., 239078.,
      148676., 153428., 158244., 163124., 161316., 166196., 171140., 176148.,
      93671.,  97091.,  100559., 104075., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      72442.,  74850.,  77290.,  79762.,  147492., 152372., 157316., 162324.,
      161156., 166164., 171236., 176372., 245774., 253382., 261086., 268886.,
      167396., 172532., 177732., 182996., 255134., 262934., 270830., 278822.,
      173636., 178900., 184228., 189620., 188324., 193716., 199172., 204692.,
      105962., 108690., 111450., 114242., 215812., 221332., 226916., 232564.,
      229476., 235124., 240836., 246612., 350174., 358742., 367406., 376166.,
      238276., 244052., 249892., 255796., 363374., 372134., 380990., 389942.,
      247076., 252980., 258948., 264980., 261764., 267796., 273892., 280052.,
      51594.,  54194.,  56826.,  59490.,  104516., 109780., 115108., 120500.,
      122276., 127668., 133124., 138644., 185534., 193718., 201998., 210374.,
      125956., 131476., 137060., 142708., 191054., 199430., 207902., 216470.,
      129636., 135284., 140996., 146772., 148420., 154196., 160036., 165940.,
      95354.,  98274.,  101226., 104210., 193316., 199220., 205188., 211220.,
      211076., 217108., 223204., 229364., 320654., 329798., 339038., 348374.,
      217316., 223476., 229700., 235988., 330014., 339350., 348782., 358310.,
      223556., 229844., 236196., 242612., 242340., 248756., 255236., 261780.,
      145223., 149795., 154415., 159083., 294358., 303598., 312934., 322366.,
      322534., 331966., 341494., 351118., 489861., 504153., 518589., 533169.,
      331894., 341518., 351238., 361054., 503901., 518481., 533205., 548073.,
      341254., 351070., 360982., 370990., 370966., 380974., 391078., 401278.,
      106810., 109986., 113194., 116434., 216228., 222644., 229124., 235668.,
      236036., 242580., 249188., 255860., 358094., 368006., 378014., 388118.,
      242276., 248948., 255684., 262484., 367454., 377558., 387758., 398054.,
      248516., 255316., 262180., 269108., 269348., 276276., 283268., 290324.,
      162407., 167363., 172367., 177419., 328726., 338734., 348838., 359038.,
      359974., 370174., 380470., 390862., 546021., 561465., 577053., 592785.,
      369334., 379726., 390214., 400798., 560061., 575793., 591669., 607689.,
      378694., 389278., 399958., 410734., 411478., 422254., 433126., 444094.,
      118266., 121698., 125162., 128658., 239140., 246068., 253060., 260116.,
      260996., 268052., 275172., 282356., 395534., 406214., 416990., 427862.,
      267236., 274420., 281668., 288980., 404894., 415766., 426734., 437798.,
      273476., 280788., 288164., 295604., 296356., 303796., 311300., 318868.,
      172266., 176018., 179802., 183618., 348420., 355988., 363620., 371316.,
      370276., 377972., 385732., 393556., 561374., 573014., 584750., 596582.,
      379076., 386900., 394788., 402740., 574574., 586406., 598334., 610358.,
      387876., 395828., 403844., 411924., 410756., 418836., 426980., 435188.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.,     101.,
      249.,   413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,
      2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,
      5354.,  2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,
      0.,     0.,     0.,     0.,     2781.,  3089.,  3413.,  3753.,  3317.,
      3657.,  4013.,  4385.,  7298.,  8010.,  8754.,  9530.,  8498.,  9274.,
      10082., 10922., 9698.,  10538., 11410., 12314., 5437.,  5873.,  6325.,
      6793.,  6101.,  6569.,  7053.,  7553.,  0.,     0.,     0.,     0.,
      5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,  15204.,
      16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028., 22836.,
      24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274., 15306.,
      16370., 0.,     0.,     0.,     0.,     12250., 13250., 14282., 15346.,
      13578., 14642., 15738., 16866., 29764., 31956., 34212., 36532., 32676.,
      34996., 37380., 39828., 35588., 38036., 40548., 43124., 19610., 20866.,
      22154., 23474., 21194., 22514., 23866., 25250., 0.,     0.,     0.,
      0.,     18890., 20210., 21562., 22946., 20218., 21602., 23018., 24466.,
      44324., 47156., 50052., 53012., 47236., 50196., 53220., 56308., 50148.,
      53236., 56388., 59604., 27530., 29106., 30714., 32354., 29114., 30754.,
      32426., 34130., 0.,     0.,     0.,     0.,     12029., 12721., 13429.,
      14153., 12821., 13545., 14285., 15041., 27586., 29066., 30578., 32122.,
      29298., 30842., 32418., 34026., 31010., 32618., 34258., 35930., 16733.,
      17553., 18389., 19241., 17653., 18505., 19373., 20257., 0.,     0.,
      0.,     0.,     15989., 16841., 17709., 18593., 16781., 17665., 18565.,
      19481., 36146., 37946., 39778., 41642., 37858., 39722., 41618., 43546.,
      39570., 41498., 43458., 45450., 21333., 22313., 23309., 24321., 22253.,
      23265., 24293., 25337., 0.,     0.,     0.,     0.,     197.,   473.,
      765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,
      4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,
      3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  0.,
      0.,     0.,     0.,     5437.,  5873.,  6325.,  6793.,  6485.,  6953.,
      7437.,  7937.,  13634., 14602., 15602., 16634., 15858., 16890., 17954.,
      19050., 18082., 19178., 20306., 21466., 9629.,  10193., 10773., 11369.,
      10805., 11401., 12013., 12641., 0.,     0.,     0.,     0.,     10922.,
      11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876., 29940.,
      32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116., 42500.,
      44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226., 26546.,
      0.,     0.,     0.,     0.,     22682., 23938., 25226., 26546., 25034.,
      26354., 27706., 29090., 52676., 55380., 58148., 60980., 57636., 60468.,
      63364., 66324., 62596., 65556., 68580., 71668., 33114., 34626., 36170.,
      37746., 35722., 37298., 38906., 40546., 0.,     0.,     0.,     0.,
      34442., 36018., 37626., 39266., 36794., 38434., 40106., 41810., 77476.,
      80820., 84228., 87700., 82436., 85908., 89444., 93044., 87396., 90996.,
      94660., 98388., 46154., 47986., 49850., 51746., 48762., 50658., 52586.,
      54546., 0.,     0.,     0.,     0.,     19805., 20625., 21461., 22313.,
      21109., 21961., 22829., 23713., 44162., 45898., 47666., 49466., 46898.,
      48698., 50530., 52394., 49634., 51498., 53394., 55322., 26045., 26993.,
      27957., 28937., 27477., 28457., 29453., 30465., 0.,     0.,     0.,
      0.,     26325., 27305., 28301., 29313., 27629., 28641., 29669., 30713.,
      57842., 59898., 61986., 64106., 60578., 62698., 64850., 67034., 63314.,
      65498., 67714., 69962., 33205., 34313., 35437., 36577., 34637., 35777.,
      36933., 38105., 0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      6716.,    11100.,   15740.,   20636.,   23992.,   33272.,   43064.,
      53368.,   34872.,   45176.,   55992.,   67320.,   69172.,   85396.,
      102388.,  120148.,  64184.,   75512.,   87352.,   99704.,   113140.,
      130900.,  149428.,  168724.,  93496.,   105848.,  118712.,  132088.,
      112568.,  125944.,  139832.,  154232.,  28796.,   35740.,   42940.,
      50396.,   78392.,   92792.,   107704.,  123128.,  89272.,   104696.,
      120632.,  137080.,  166132.,  190036.,  214708.,  240148.,  139064.,
      155512.,  172472.,  189944.,  240820.,  266260.,  292468.,  319444.,
      188856.,  206328.,  224312.,  242808.,  207928.,  226424.,  245432.,
      264952.,  60538.,   72490.,   84826.,   97546.,   152276.,  176948.,
      202388.,  228596.,  180884.,  207092.,  234068.,  261812.,  319662.,
      360126.,  401742.,  444510.,  255572.,  283316.,  311828.,  341108.,
      431694.,  474462.,  518382.,  563454.,  330260.,  359540.,  389588.,
      420404.,  371156.,  401972.,  433556.,  465908.,  120188.,  129180.,
      138428.,  147932.,  261176.,  279672.,  298680.,  318200.,  288440.,
      307960.,  327992.,  348536.,  464884.,  494932.,  525748.,  557332.,
      338232.,  358776.,  379832.,  401400.,  539572.,  571156.,  603508.,
      636628.,  388024.,  409592.,  431672.,  454264.,  423480.,  446072.,
      469176.,  492792.,  197626.,  212650.,  228058.,  243850.,  426452.,
      457268.,  488852.,  521204.,  479636.,  511988.,  545108.,  578996.,
      767790.,  817470.,  868302.,  920286.,  554324.,  588212.,  622868.,
      658292.,  879822.,  931806.,  984942.,  1039230., 629012.,  664436.,
      700628.,  737588.,  694484.,  731444.,  769172.,  807668.,  211580.,
      222620.,  233916.,  245468.,  443960.,  466552.,  489656.,  513272.,
      487608.,  511224.,  535352.,  559992.,  763636.,  799828.,  836788.,
      874516.,  537400.,  562040.,  587192.,  612856.,  838324.,  876052.,
      914548.,  953812.,  587192.,  612856.,  639032.,  665720.,  639032.,
      665720.,  692920.,  720632.,  315580.,  329180.,  343036.,  357148.,
      662200.,  689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592.,  1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152.,  866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176.,  908472.,  940280.,  898232.,  930040.,  962360.,  995192.,
      208444.,  221020.,  233852.,  246940.,  427448.,  453112.,  479288.,
      505976.,  503864.,  530552.,  557752.,  585464.,  772660.,  813460.,
      855028.,  897364.,  533176.,  560888.,  589112.,  617848.,  816628.,
      858964.,  902068.,  945940.,  562488.,  591224.,  620472.,  650232.,
      647096.,  676856.,  707128.,  737912.,  394364.,  409500.,  424892.,
      440540.,  809528.,  840312.,  871608.,  903416.,  885944.,  917752.,
      950072.,  982904.,  1361140., 1409620., 1458868., 1508884., 935736.,
      968568.,  1001912., 1035768., 1435828., 1485844., 1536628., 1588180.,
      985528.,  1019384., 1053752., 1088632., 1070136., 1105016., 1140408.,
      1176312., 608890.,  633130.,  657754.,  682762.,  1248980., 1298228.,
      1348244., 1399028., 1375892., 1426676., 1478228., 1530548., 2112174.,
      2189502., 2267982., 2347614., 1450580., 1502900., 1555988., 1609844.,
      2224206., 2303838., 2384622., 2466558., 1525268., 1579124., 1633748.,
      1689140., 1664468., 1719860., 1776020., 1832948., 485756.,  502940.,
      520380.,  538076.,  992312.,  1027192., 1062584., 1098488., 1085112.,
      1121016., 1157432., 1194360., 1659892., 1714516., 1769908., 1826068.,
      1134904., 1171832., 1209272., 1247224., 1734580., 1790740., 1847668.,
      1905364., 1184696., 1222648., 1261112., 1300088., 1285688., 1324664.,
      1364152., 1404152., 745978.,  773290.,  800986.,  829066.,  1523156.,
      1578548., 1634708., 1691636., 1674644., 1731572., 1789268., 1847732.,
      2560302., 2646846., 2734542., 2823390., 1749332., 1807796., 1867028.,
      1927028., 2672334., 2761182., 2851182., 2942334., 1824020., 1884020.,
      1944788., 2006324., 1987796., 2049332., 2111636., 2174708., 577148.,
      596380.,  615868.,  635612.,  1175096., 1214072., 1253560., 1293560.,
      1284280., 1324280., 1364792., 1405816., 1958644., 2019412., 2080948.,
      2143252., 1334072., 1375096., 1416632., 1458680., 2033332., 2095636.,
      2158708., 2222548., 1383864., 1425912., 1468472., 1511544., 1501240.,
      1544312., 1587896., 1631992., 844988.,  866780.,  888828.,  911132.,
      1721016., 1765112., 1809720., 1854840., 1830200., 1875320., 1920952.,
      1967096., 2792884., 2861332., 2930548., 3000532., 1900472., 1946616.,
      1993272., 2040440., 2898292., 2968276., 3039028., 3110548., 1970744.,
      2017912., 2065592., 2113784., 2088120., 2136312., 2185016., 2234232.,
      410172.,  430940.,  451964.,  473244.,  830904.,  872952.,  915512.,
      958584.,  972856.,  1015928., 1059512., 1103608., 1476148., 1541524.,
      1607668., 1674580., 1002168., 1046264., 1090872., 1135992., 1520116.,
      1587028., 1654708., 1723156., 1031480., 1076600., 1122232., 1168376.,
      1181624., 1227768., 1274424., 1321592., 759932.,  783260.,  806844.,
      830684.,  1540664., 1587832., 1635512., 1683704., 1682616., 1730808.,
      1779512., 1828728., 2556148., 2629204., 2703028., 2777620., 1732408.,
      1781624., 1831352., 1881592., 2630836., 2705428., 2780788., 2856916.,
      1782200., 1832440., 1883192., 1934456., 1932344., 1983608., 2035384.,
      2087672., 1157242., 1193770., 1230682., 1267978., 2345684., 2419508.,
      2494100., 2569460., 2570900., 2646260., 2722388., 2799284., 3904686.,
      4018878., 4134222., 4250718., 2645588., 2722484., 2800148., 2878580.,
      4016718., 4133214., 4250862., 4369662., 2720276., 2798708., 2877908.,
      2957876., 2957780., 3037748., 3118484., 3199988., 851324.,  876700.,
      902332.,  928220.,  1723448., 1774712., 1826488., 1878776., 1881784.,
      1934072., 1986872., 2040184., 2854900., 2934100., 3014068., 3094804.,
      1931576., 1984888., 2038712., 2093048., 2929588., 3010324., 3091828.,
      3174100., 1981368., 2035704., 2090552., 2145912., 2147896., 2203256.,
      2259128., 2315512., 1294330., 1333930., 1373914., 1414282., 2619860.,
      2699828., 2780564., 2862068., 2869652., 2951156., 3033428., 3116468.,
      4352814., 4476222., 4600782., 4726494., 2944340., 3027380., 3111188.,
      3195764., 4464846., 4590558., 4717422., 4845438., 3019028., 3103604.,
      3188948., 3275060., 3281108., 3367220., 3454100., 3541748., 942716.,
      970140.,  997820.,  1025756., 1906232., 1961592., 2017464., 2073848.,
      2080952., 2137336., 2194232., 2251640., 3153652., 3238996., 3325108.,
      3411988., 2130744., 2188152., 2246072., 2304504., 3228340., 3315220.,
      3402868., 3491284., 2180536., 2238968., 2297912., 2357368., 2363448.,
      2422904., 2482872., 2543352., 1374396., 1404380., 1434620., 1465116.,
      2779832., 2840312., 2901304., 2962808., 2954552., 3016056., 3078072.,
      3140600., 4479412., 4572436., 4666228., 4760788., 3024824., 3087352.,
      3150392., 3213944., 4584820., 4679380., 4774708., 4870804., 3095096.,
      3158648., 3222712., 3287288., 3278008., 3342584., 3407672., 3473272.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      9948.,   14588.,  19484.,  24636.,  9662.,   12110.,  14686.,  17390.,
      10846.,  13550.,  16382.,  19342.,  0.,      0.,      0.,      0.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  0.,      0.,      0.,      0.,
      13820.,  19740.,  25916.,  32348.,  16188.,  22620.,  29308.,  36252.,
      53176.,  66552.,  80440.,  94840.,  59960.,  74360.,  89272.,  104696.,
      66744.,  82168.,  98104.,  114552., 47868.,  55836.,  64060.,  72540.,
      52284.,  60764.,  69500.,  78492.,  0.,      0.,      0.,      0.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 0.,      0.,      0.,      0.,
      33470.,  37966.,  42590.,  47342.,  35678.,  40430.,  45310.,  50318.,
      86876.,  96636.,  106652., 116924., 92316.,  102588., 113116., 123900.,
      97756.,  108540., 119580., 130876., 58686.,  64206.,  69854.,  75630.,
      61918.,  67694.,  73598.,  79630.,  0.,      0.,      0.,      0.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.,
      670.,    1838.,   3134.,   4558.,   4926.,   6350.,   7902.,   9582.,
      10012.,  13116.,  16476.,  20092.,  19548.,  23164.,  27036.,  31164.,
      29084.,  33212.,  37596.,  42236.,  16670.,  18862.,  21182.,  23630.,
      21950.,  24398.,  26974.,  29678.,  0.,      0.,      0.,      0.,
      21950.,  24398.,  26974.,  29678.,  26206.,  28910.,  31742.,  34702.,
      57692.,  63356.,  69276.,  75452.,  67228.,  73404.,  79836.,  86524.,
      76764.,  83452.,  90396.,  97596.,  43070.,  46542.,  50142.,  53870.,
      48350.,  52078.,  55934.,  59918.,  0.,      0.,      0.,      0.,
      44220.,  49628.,  55292.,  61212.,  54780.,  60700.,  66876.,  73308.,
      120120., 132472., 145336., 158712., 143288., 156664., 170552., 184952.,
      166456., 180856., 195768., 211192., 92604.,  100060., 107772., 115740.,
      105212., 113180., 121404., 129884., 0.,      0.,      0.,      0.,
      97020.,  104988., 113212., 121692., 107580., 116060., 124796., 133788.,
      235960., 253432., 271416., 289912., 259128., 277624., 296632., 316152.,
      282296., 301816., 321848., 342392., 155644., 165660., 175932., 186460.,
      168252., 178780., 189564., 200604., 0.,      0.,      0.,      0.,
      149820., 160348., 171132., 182172., 160380., 171420., 182716., 194268.,
      351800., 374392., 397496., 421112., 374968., 398584., 422712., 447352.,
      398136., 422776., 447928., 473592., 218684., 231260., 244092., 257180.,
      231292., 244380., 257724., 271324., 0.,      0.,      0.,      0.,
      95550.,  101070., 106718., 112494., 101854., 107630., 113534., 119566.,
      219228., 231036., 243100., 255420., 232860., 245180., 257756., 270588.,
      246492., 259324., 272412., 285756., 133054., 139598., 146270., 153070.,
      140382., 147182., 154110., 161166., 0.,      0.,      0.,      0.,
      127070., 133870., 140798., 147854., 133374., 140430., 147614., 154926.,
      287388., 301756., 316380., 331260., 301020., 315900., 331036., 346428.,
      314652., 330044., 345692., 361596., 169694., 177518., 185470., 193550.,
      177022., 185102., 193310., 201646., 0.,      0.,      0.,      0.,
      1310.,   3502.,   5822.,   8270.,   9662.,   12110.,  14686.,  17390.,
      19484.,  24636.,  30044.,  35708.,  37212.,  42876.,  48796.,  54972.,
      54940.,  61116.,  67548.,  74236.,  29598.,  32814.,  36158.,  39630.,
      38974.,  42446.,  46046.,  49774.,  0.,      0.,      0.,      0.,
      43070.,  46542.,  50142.,  53870.,  51422.,  55150.,  59006.,  62990.,
      108124., 115836., 123804., 132028., 125852., 134076., 142556., 151292.,
      143580., 152316., 161308., 170556., 76478.,  80974.,  85598.,  90350.,
      85854.,  90606.,  95486.,  100494., 0.,      0.,      0.,      0.,
      86460.,  93916.,  101628., 109596., 105212., 113180., 121404., 129884.,
      220984., 237432., 254392., 271864., 260536., 278008., 295992., 314488.,
      300088., 318584., 337592., 357112., 159420., 168924., 178684., 188700.,
      180220., 190236., 200508., 211036., 0.,      0.,      0.,      0.,
      180220., 190236., 200508., 211036., 198972., 209500., 220284., 231324.,
      418744., 440312., 462392., 484984., 458296., 480888., 503992., 527608.,
      497848., 521464., 545592., 570232., 263420., 275484., 287804., 300380.,
      284220., 296796., 309628., 322716., 0.,      0.,      0.,      0.,
      273980., 286556., 299388., 312476., 292732., 305820., 319164., 332764.,
      616504., 643192., 670392., 698104., 656056., 683768., 711992., 740728.,
      695608., 724344., 753592., 783352., 367420., 382044., 396924., 412060.,
      388220., 403356., 418748., 434396., 0.,      0.,      0.,      0.,
      157630., 164174., 170846., 177646., 168030., 174830., 181758., 188814.,
      351580., 365436., 379548., 393916., 373404., 387772., 402396., 417276.,
      395228., 410108., 425244., 440636., 207422., 214990., 222686., 230510.,
      218846., 226670., 234622., 242702., 0.,      0.,      0.,      0.,
      209630., 217454., 225406., 233486., 220030., 228110., 236318., 244654.,
      460700., 477116., 493788., 510716., 482524., 499452., 516636., 534076.,
      504348., 521788., 539484., 557436., 264542., 273390., 282366., 291470.,
      275966., 285070., 294302., 303662., 0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,  14.,  19.,   12.,   15.,   0.,    6.,
      7.,   20.,  23.,  44.,  39.,  44.,  27.,   30.,   0.,    15.,   20.,
      52.,  64.,  115., 96.,  112., 66.,  75.,   0.,    40.,   45.,   112.,
      124., 220., 176., 192., 111., 120., 0.,    65.,   70.,   172.,  184.,
      325., 256., 272., 156., 165., 0.,   64.,   68.,   152.,  161.,  266.,
      197., 208., 114., 120., 0.,   84.,  88.,   197.,  206.,  341.,  252.,
      263., 144., 150., 0.,   7.,   14.,  29.,   44.,   68.,   50.,   67.,
      36.,  45.,  0.,   42.,  49.,  104., 119.,  188.,  135.,  152.,  81.,
      90.,  0.,   87.,  104., 220., 256., 403.,  288.,  328.,  174.,  195.,
      0.,   172., 189., 400., 436., 688., 488.,  528.,  279.,  300.,  0.,
      257., 274., 580., 616., 973., 688., 728.,  384.,  405.,  0.,    160.,
      170., 356., 377., 590., 413., 436., 228.,  240.,  0.,    210.,  220.,
      461., 482., 755., 528., 551., 288., 300.,  0.,    13.,   26.,   53.,
      80.,  122., 86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,
      332., 231., 260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,
      480., 544., 282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,
      864., 447., 480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184.,
      612., 645., 0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,
      360., 0.,   336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,
      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,  1260.,
      1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,  3164.,
      2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,  3428.,
      5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,  5612.,
      3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,  5876.,
      9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,  8060.,
      5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,  7396.,
      11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  2312.,  4716.,
      5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,  7076.,  4172.,
      8516.,  9276.,  14180., 9684.,  14792., 10092., 15404., 10500., 11356.,
      6463.,  13184., 14444., 22065., 15056., 22983., 15668., 23901., 16280.,
      17684., 5112.,  10396., 11316., 17240., 11724., 17852., 12132., 18464.,
      12540., 13556., 7873.,  16004., 17504., 26655., 18116., 27573., 18728.,
      28491., 19340., 20984., 6052.,  12276., 13356., 20300., 13764., 20912.,
      14172., 21524., 14580., 15756., 8712.,  17676., 18756., 28520., 19324.,
      29372., 19892., 30224., 20460., 21636., 4472.,  9036.,  10436., 15800.,
      10684., 16172., 10932., 16544., 11180., 12676., 7932.,  16036., 17436.,
      26420., 17844., 27032., 18252., 27644., 18660., 20156., 12103., 24464.,
      26684., 40425., 27296., 41343., 27908., 42261., 28520., 30884., 8872.,
      17916., 19476., 29480., 19884., 30092., 20292., 30704., 20700., 22356.,
      13513., 27284., 29744., 45015., 30356., 45933., 30968., 46851., 31580.,
      34184., 9812.,  19796., 21516., 32540., 21924., 33152., 22332., 33764.,
      22740., 24556., 14072., 28396., 30116., 45560., 30684., 46412., 31252.,
      47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1060.,   2840.,   3768.,   6796.,   5720.,   9724.,   7672.,   12652.,
      9624.,   11320.,  3060.,   7480.,   8408.,   14716.,  11640.,  19564.,
      14872.,  24412.,  18104.,  19800.,  6170.,   14380.,  16732.,  28254.,
      21580.,  35526.,  26428.,  42798.,  31276.,  34780.,  10500.,  22360.,
      24568.,  38956.,  27800.,  43804.,  31032.,  48652.,  34264.,  37240.,
      17330.,  36700.,  40972.,  64614.,  45820.,  71886.,  50668.,  79158.,
      55516.,  60940.,  17940.,  37240.,  40728.,  63196.,  43960.,  68044.,
      47192.,  72892.,  50424.,  54680.,  26340.,  54680.,  58168.,  90316.,
      62680.,  97084.,  67192.,  103852., 71704.,  75960.,  18020.,  36760.,
      42808.,  65356.,  44760.,  68284.,  46712.,  71212.,  48664.,  55480.,
      32820.,  67000.,  73048.,  111676., 76280.,  116524., 79512.,  121372.,
      82744.,  89560.,  50810.,  103660., 113692., 173694., 118540., 180966.,
      123388., 188238., 128236., 139420., 40260.,  81880.,  89208.,  135916.,
      92440.,  140764., 95672.,  145612., 98904.,  107000., 61970.,  125980.,
      137932., 210054., 142780., 217326., 147628., 224598., 152476., 165580.,
      47700.,  96760.,  105368., 160156., 108600., 165004., 111832., 169852.,
      115064., 124440., 68900.,  139800., 148408., 225676., 152920., 232444.,
      157432., 239212., 161944., 171320., 34980.,  70680.,  81848.,  123916.,
      83800.,  126844., 85752.,  129772., 87704.,  99640.,  62580.,  126520.,
      137688., 208636., 140920., 213484., 144152., 218332., 147384., 159320.,
      95450.,  192940., 210652., 319134., 215500., 326406., 220348., 333678.,
      225196., 244060., 70020.,  141400., 153848., 232876., 157080., 237724.,
      160312., 242572., 163544., 176760., 106610., 215260., 234892., 355494.,
      239740., 362766., 244588., 370038., 249436., 270220., 77460.,  156280.,
      170008., 257116., 173240., 261964., 176472., 266812., 179704., 194200.,
      111460., 224920., 238648., 361036., 243160., 367804., 247672., 374572.,
      252184., 266680.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  2212.,  5784.,  6456.,  11788., 9688.,
      10616., 6244.,  6772.,  0.,     3300.,  3572.,  9144.,  9816.,  17788.,
      14328., 15256., 8884.,  9412.,  0.,     3630.,  3862.,  8724.,  9252.,
      15410., 11508., 12164., 6710.,  7070.,  0.,     4790.,  5022.,  11364.,
      11892., 19850., 14788., 15444., 8510.,  8870.,  0.,     270.,   694.,
      1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,     2390.,
      2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,  0.,
      4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228., 11524.,
      0.,     10100., 11140., 23640., 25848., 40876., 29080., 31544., 16708.,
      18004., 0.,     15300., 16340., 34680., 36888., 58396., 41400., 43864.,
      23188., 24484., 0.,     9630.,  10246., 21492., 22788., 35714., 25044.,
      26468., 13862., 14606., 0.,     12710., 13326., 27972., 29268., 45914.,
      32164., 33588., 17582., 18326., 0.,     510.,   1318.,  2676.,  4356.,
      6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,  5358.,  11076.,
      12756., 19706., 13732., 15540., 8078.,  9014.,  0.,     9220.,  11028.,
      22776., 26520., 40924., 28472., 32472., 16852., 18916., 0.,     18260.,
      20068., 41496., 45240., 69964., 48472., 52472., 27172., 29236., 0.,
      27300., 29108., 60216., 63960., 99004., 68472., 72472., 37492., 39556.,
      0.,     15630., 16630., 34260., 36324., 56018., 38580., 40772., 21014.,
      22142., 0.,     20630., 21630., 44580., 46644., 71978., 49540., 51732.,
      26654., 27782., 0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      56.,    96.,    156.,   240.,   212.,   304.,   388.,   532.,   332.,
      432.,   568.,   724.,   452.,   560.,   748.,   916.,   572.,   688.,
      676.,   800.,   176.,   236.,   436.,   560.,   492.,   624.,   868.,
      1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,  1468.,  1696.,
      1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,   1060.,  988.,
      1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,  1588.,  1840.,
      2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,   716.,   1356.,
      1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,  2668.,  2944.,
      1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,  2480.,  1049.,
      1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,  2788.,  3088.,
      4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,  3712.,  3724.,
      4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,  3868.,  4192.,
      2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,  4816.,  3092.,
      3328.,  3356.,  3600.,  1616.,  1736.,  3356.,  3600.,  3572.,  3824.,
      5548.,  5932.,  3852.,  4112.,  5968.,  6364.,  4132.,  4400.,  6388.,
      6796.,  4412.,  4688.,  4676.,  4960.,  1096.,  1216.,  2236.,  2480.,
      2612.,  2864.,  3988.,  4372.,  2732.,  2992.,  4168.,  4564.,  2852.,
      3120.,  4348.,  4756.,  2972.,  3248.,  3396.,  3680.,  2016.,  2156.,
      4116.,  4400.,  4492.,  4784.,  6868.,  7312.,  4692.,  4992.,  7168.,
      7624.,  4892.,  5200.,  7468.,  7936.,  5092.,  5408.,  5516.,  5840.,
      3119.,  3344.,  6364.,  6820.,  6988.,  7456.,  10677., 11388., 7288.,
      7768.,  11127., 11856., 7588.,  8080.,  11577., 12324., 7888.,  8392.,
      8584.,  9100.,  2476.,  2636.,  5036.,  5360.,  5492.,  5824.,  8368.,
      8872.,  5692.,  6032.,  8668.,  9184.,  5892.,  6240.,  8968.,  9496.,
      6092.,  6448.,  6596.,  6960.,  3809.,  4064.,  7744.,  8260.,  8488.,
      9016.,  12927., 13728., 8788.,  9328.,  13377., 14196., 9088.,  9640.,
      13827., 14664., 9388.,  9952.,  10204., 10780., 2936.,  3116.,  5956.,
      6320.,  6492.,  6864.,  9868.,  10432., 6692.,  7072.,  10168., 10744.,
      6892.,  7280.,  10468., 11056., 7092.,  7488.,  7676.,  8080.,  4256.,
      4456.,  8636.,  9040.,  9172.,  9584.,  13948., 14572., 9452.,  9872.,
      14368., 15004., 9732.,  10160., 14788., 15436., 10012., 10448., 10596.,
      11040., 2136.,  2336.,  4316.,  4720.,  5012.,  5424.,  7588.,  8212.,
      5132.,  5552.,  7768.,  8404.,  5252.,  5680.,  7948.,  8596.,  5372.,
      5808.,  6116.,  6560.,  3856.,  4076.,  7796.,  8240.,  8492.,  8944.,
      12868., 13552., 8692.,  9152.,  13168., 13864., 8892.,  9360.,  13468.,
      14176., 9092.,  9568.,  9836.,  10320., 5879.,  6224.,  11884., 12580.,
      12988., 13696., 19677., 20748., 13288., 14008., 20127., 21216., 13588.,
      14320., 20577., 21684., 13888., 14632., 15064., 15820., 4316.,  4556.,
      8716.,  9200.,  9492.,  9984.,  14368., 15112., 9692.,  10192., 14668.,
      15424., 9892.,  10400., 14968., 15736., 10092., 10608., 10916., 11440.,
      6569.,  6944.,  13264., 14020., 14488., 15256., 21927., 23088., 14788.,
      15568., 22377., 23556., 15088., 15880., 22827., 24024., 15388., 16192.,
      16684., 17500., 4776.,  5036.,  9636.,  10160., 10492., 11024., 15868.,
      16672., 10692., 11232., 16168., 16984., 10892., 11440., 16468., 17296.,
      11092., 11648., 11996., 12560., 6896.,  7176.,  13916., 14480., 14772.,
      15344., 22348., 23212., 15052., 15632., 22768., 23644., 15332., 15920.,
      23188., 24076., 15612., 16208., 16516., 17120.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      188.,  260.,  204.,  280.,  532.,  688.,  572.,  736.,  1048., 1300.,
      852.,  1024., 908.,  1088., 532.,  624.,  564.,  660.,  0.,    0.,
      217.,  256.,  231.,  272.,  524.,  608.,  556.,  644.,  929.,  1064.,
      696.,  788.,  736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,
      287.,  336.,  301.,  352.,  684.,  788.,  716.,  824.,  1199., 1364.,
      896.,  1008., 936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  209.,  272.,
      156.,  200.,  220.,  268.,  119.,  144.,  153.,  180.,  0.,    0.,
      143.,  168.,  169.,  196.,  360.,  416.,  416.,  476.,  659.,  752.,
      476.,  540.,  540.,  608.,  289.,  324.,  323.,  360.,  0.,    0.,
      292.,  348.,  356.,  416.,  756.,  880.,  892.,  1024., 1408., 1612.,
      1012., 1152., 1164., 1312., 620.,  696.,  700.,  780.,  0.,    0.,
      612.,  688.,  676.,  756.,  1436., 1600., 1572., 1744., 2488., 2752.,
      1772., 1952., 1924., 2112., 1020., 1116., 1100., 1200., 0.,    0.,
      932.,  1028., 996.,  1096., 2116., 2320., 2252., 2464., 3568., 3892.,
      2532., 2752., 2684., 2912., 1420., 1536., 1500., 1620., 0.,    0.,
      589.,  640.,  627.,  680.,  1316., 1424., 1396., 1508., 2189., 2360.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      779.,  840.,  817.,  880.,  1716., 1844., 1796., 1928., 2819., 3020.,
      1976., 2112., 2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  389.,  488.,
      276.,  344.,  388.,  460.,  203.,  240.,  261.,  300.,  0.,    0.,
      275.,  312.,  325.,  364.,  672.,  752.,  776.,  860.,  1199., 1328.,
      836.,  924.,  948.,  1040., 493.,  540.,  551.,  600.,  0.,    0.,
      556.,  636.,  668.,  752.,  1380., 1552., 1612., 1792., 2488., 2764.,
      1732., 1920., 1980., 2176., 1028., 1128., 1156., 1260., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      374.,    686.,    1092.,   1748.,   1524.,   2244.,   2834.,   3962.,
      2468.,   3252.,   4250.,   5474.,   3412.,   4260.,   5666.,   6986.,
      4356.,   5268.,   5172.,   6148.,   1294.,   1766.,   3252.,   4228.,
      3684.,   4724.,   6554.,   8162.,   5268.,   6372.,   8930.,   10634.,
      6852.,   8020.,   11306.,  13106.,  8436.,   9668.,   9252.,   10548.,
      2671.,   3499.,   6338.,   8042.,   7466.,   9266.,   12741.,  15513.,
      9842.,   11738.,  16305.,  19221.,  12218.,  14210.,  19869.,  22929.,
      14594.,  16682.,  16298.,  18482.,  4934.,   5566.,   10532.,  11828.,
      11604.,  12964.,  18434.,  20522.,  13188.,  14612.,  20810.,  22994.,
      14772.,  16260.,  23186.,  25466.,  16356.,  17908.,  17812.,  19428.,
      8131.,   9199.,   17258.,  19442.,  19346.,  21626.,  30561.,  34053.,
      21722.,  24098.,  34125.,  37761.,  24098.,  26570.,  37689.,  41469.,
      26474.,  29042.,  29138.,  31802.,  8574.,   9366.,   17812.,  19428.,
      19524.,  21204.,  30314.,  32882.,  21108.,  22852.,  32690.,  35354.,
      22692.,  24500.,  35066.,  37826.,  24276.,  26148.,  26372.,  28308.,
      12694.,  13646.,  26372.,  28308.,  28084.,  30084.,  43634.,  46682.,
      30308.,  32372.,  46970.,  50114.,  32532.,  34660.,  50306.,  53546.,
      34756.,  36948.,  36852.,  39108.,  8534.,   9486.,   17412.,  19348.,
      20404.,  22404.,  31154.,  34202.,  21348.,  23412.,  32570.,  35714.,
      22292.,  24420.,  33986.,  37226.,  23236.,  25428.,  26612.,  28868.,
      15854.,  16966.,  32372.,  34628.,  35364.,  37684.,  54074.,  57602.,
      36948.,  39332.,  56450.,  60074.,  38532.,  40980.,  58826.,  62546.,
      40116.,  42628.,  43492.,  46068.,  24511.,  26299.,  50018.,  53642.,
      54986.,  58706.,  84021.,  89673.,  57362.,  61178.,  87585.,  93381.,
      59738.,  63650.,  91149.,  97089.,  62114.,  66122.,  67658.,  71762.,
      19494.,  20766.,  39652.,  42228.,  43284.,  45924.,  65954.,  69962.,
      44868.,  47572.,  68330.,  72434.,  46452.,  49220.,  70706.,  74906.,
      48036.,  50868.,  52052.,  54948.,  29971.,  31999.,  60938.,  65042.,
      66866.,  71066.,  101841., 108213., 69242.,  73538.,  105405., 111921.,
      71618.,  76010.,  108969., 115629., 73994.,  78482.,  80498.,  85082.,
      23134.,  24566.,  46932.,  49828.,  51204.,  54164.,  77834.,  82322.,
      52788.,  55812.,  80210.,  84794.,  54372.,  57460.,  82586.,  87266.,
      55956.,  59108.,  60612.,  63828.,  33654.,  35246.,  68292.,  71508.,
      72564.,  75844.,  110354., 115322., 74788.,  78132.,  113690., 118754.,
      77012.,  80420.,  117026., 122186., 79236.,  82708.,  83892.,  87428.,
      16694.,  18286.,  33732.,  36948.,  39284.,  42564.,  59474.,  64442.,
      40228.,  43572.,  60890.,  65954.,  41172.,  44580.,  62306.,  67466.,
      42116.,  45588.,  48052.,  51588.,  30414.,  32166.,  61492.,  65028.,
      67044.,  70644.,  101594., 107042., 68628.,  72292.,  103970., 109514.,
      70212.,  73940.,  106346., 111986., 71796.,  75588.,  77732.,  81588.,
      46351.,  49099.,  93698.,  99242.,  102506., 108146., 155301., 163833.,
      104882., 110618., 158865., 167541., 107258., 113090., 162429., 171249.,
      109634., 115562., 119018., 125042., 34054.,  35966.,  68772.,  72628.,
      74964.,  78884.,  113474., 119402., 76548.,  80532.,  115850., 121874.,
      78132.,  82180.,  118226., 124346., 79716.,  83828.,  86292.,  90468.,
      51811.,  54799.,  104618., 110642., 114386., 120506., 173121., 182373.,
      116762., 122978., 176685., 186081., 119138., 125450., 180249., 189789.,
      121514., 127922., 131858., 138362., 37694.,  39766.,  76052.,  80228.,
      82884.,  87124.,  125354., 131762., 84468.,  88772.,  127730., 134234.,
      86052.,  90420.,  130106., 136706., 87636.,  92068.,  94852.,  99348.,
      54614.,  56846.,  110212., 114708., 117044., 121604., 177074., 183962.,
      119268., 123892., 180410., 187394., 121492., 126180., 183746., 190826.,
      123716., 128468., 130932., 135748.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1366.,
      1934.,  1486.,  2086.,  3956.,  5188.,  4260.,  5556.,  7898.,  9890.,
      6484.,  7844.,  6916.,  8340.,  4078.,  4806.,  4326.,  5086.,  0.,
      0.,     1661.,  1969.,  1769.,  2093.,  4030.,  4694.,  4278.,  4974.,
      7171.,  8239.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,
      3737.,  0.,     0.,     2201.,  2589.,  2309.,  2713.,  5270.,  6094.,
      5518.,  6374.,  9271.,  10579., 6950.,  7838.,  7262.,  8182.,  4021.,
      4489.,  4193.,  4677.,  0.,     0.,     77.,    193.,   281.,   413.,
      574.,   854.,   1014.,  1326.,  1555.,  2047.,  1166.,  1510.,  1670.,
      2046.,  905.,   1101.,  1173.,  1385.,  0.,     0.,     1097.,  1293.,
      1301.,  1513.,  2774.,  3214.,  3214.,  3686.,  5095.,  5827.,  3686.,
      4190.,  4190.,  4726.,  2245.,  2521.,  2513.,  2805.,  0.,     0.,
      2230.,  2670.,  2734.,  3206.,  5812.,  6788.,  6884.,  7924.,  10874.,
      12482., 7828.,  8932.,  9028.,  10196., 4814.,  5414.,  5446.,  6078.,
      0.,     0.,     4750.,  5350.,  5254.,  5886.,  11172., 12468., 12244.,
      13604., 19394., 21482., 13828., 15252., 15028., 16516., 7974.,  8734.,
      8606.,  9398.,  0.,     0.,     7270.,  8030.,  7774.,  8566.,  16532.,
      18148., 17604., 19284., 27914., 30482., 19828., 21572., 21028., 22836.,
      11134., 12054., 11766., 12718., 0.,     0.,     4613.,  5017.,  4913.,
      5333.,  10318., 11174., 10950., 11838., 17179., 18535., 12062., 12982.,
      12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,     0.,     6113.,
      6597.,  6413.,  6913.,  13478., 14494., 14110., 15158., 22159., 23755.,
      15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,
      0.,     149.,   361.,   545.,   773.,   1102.,  1574.,  1926.,  2430.,
      2923.,  3703.,  2078.,  2614.,  2966.,  3534.,  1553.,  1845.,  2013.,
      2321.,  0.,     0.,     2129.,  2421.,  2525.,  2833.,  5222.,  5854.,
      6046.,  6710.,  9343.,  10363., 6518.,  7214.,  7406.,  8134.,  3853.,
      4225.,  4313.,  4701.,  0.,     0.,     4294.,  4926.,  5182.,  5846.,
      10708., 12068., 12548., 13972., 19370., 21554., 13492., 14980., 15460.,
      17012., 8030.,  8822.,  9046.,  9870.,  0.,     0.,     8734.,  9526.,
      9622.,  10446., 19908., 21588., 21748., 23492., 33650., 36314., 23332.,
      25140., 25300., 27172., 13110., 14062., 14126., 15110., 0.,     0.,
      13174., 14126., 14062., 15046., 29108., 31108., 30948., 33012., 47930.,
      51074., 33172., 35300., 35140., 37332., 18190., 19302., 19206., 20350.,
      0.,     0.,     7565.,  8065.,  8057.,  8573.,  16606., 17654., 17622.,
      18702., 27187., 28831., 18734., 19846., 19814., 20958., 10217., 10797.,
      10773., 11369., 0.,     0.,     10025., 10605., 10517., 11113., 21686.,
      22894., 22702., 23942., 35047., 36931., 24134., 25406., 25214., 26518.,
      12997., 13657., 13553., 14229., 0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2700.,    5164.,    8120.,    13304.,   11512.,   17208.,   21604.,
      30532.,   19000.,   25208.,   32836.,   42532.,   26488.,   33208.,
      44068.,   54532.,   33976.,   41208.,   40440.,   48184.,   9900.,
      13644.,   25080.,   32824.,   28472.,   36728.,   50884.,   63652.,
      41080.,   49848.,   69796.,   83332.,   53688.,   62968.,   88708.,
      103012.,  66296.,   76088.,   72760.,   83064.,   20570.,   27146.,
      49060.,   62596.,   57988.,   72292.,   99246.,   121278.,  76900.,
      91972.,   127614.,  150798.,  95812.,   111652.,  155982.,  180318.,
      114724.,  131332.,  128260.,  145636.,  38860.,   43884.,   83000.,
      93304.,   91512.,   102328.,  145444.,  162052.,  104120.,  115448.,
      164356.,  181732.,  116728.,  128568.,  183268.,  201412.,  129336.,
      141688.,  140920.,  153784.,  64010.,   72506.,   135940.,  153316.,
      152548.,  170692.,  241086.,  268878.,  171460.,  190372.,  269454.,
      298398.,  190372.,  210052.,  297822.,  327918.,  209284.,  229732.,
      230500.,  251716.,  67820.,   74124.,   140920.,  153784.,  154552.,
      167928.,  240004.,  260452.,  167160.,  181048.,  258916.,  280132.,
      179768.,  194168.,  277828.,  299812.,  192376.,  207288.,  209080.,
      224504.,  100620.,  108204.,  209080.,  224504.,  222712.,  238648.,
      346084.,  370372.,  240440.,  256888.,  372676.,  397732.,  258168.,
      275128.,  399268.,  425092.,  275896.,  293368.,  292600.,  310584.,
      67340.,   74924.,   137400.,  152824.,  161272.,  177208.,  246244.,
      270532.,  168760.,  185208.,  257476.,  282532.,  176248.,  193208.,
      268708.,  294532.,  183736.,  201208.,  210680.,  228664.,  125740.,
      134604.,  256760.,  274744.,  280632.,  299128.,  429124.,  457252.,
      293240.,  312248.,  448036.,  476932.,  305848.,  325368.,  466948.,
      496612.,  318456.,  338488.,  345400.,  365944.,  194330.,  208586.,
      396580.,  425476.,  436228.,  465892.,  666606.,  711678.,  455140.,
      485572.,  694974.,  741198.,  474052.,  505252.,  723342.,  770718.,
      492964.,  524932.,  537220.,  569956.,  154700.,  164844.,  314680.,
      335224.,  343672.,  364728.,  523684.,  555652.,  356280.,  377848.,
      542596.,  575332.,  368888.,  390968.,  561508.,  595012.,  381496.,
      404088.,  413560.,  436664.,  237770.,  253946.,  483460.,  516196.,
      530788.,  564292.,  808446.,  859278.,  549700.,  583972.,  836814.,
      888798.,  568612.,  603652.,  865182.,  918318.,  587524.,  623332.,
      639460.,  676036.,  183660.,  195084.,  372600.,  395704.,  406712.,
      430328.,  618244.,  654052.,  419320.,  443448.,  637156.,  673732.,
      431928.,  456568.,  656068.,  693412.,  444536.,  469688.,  481720.,
      507384.,  267660.,  280364.,  543160.,  568824.,  577272.,  603448.,
      877924.,  917572.,  595000.,  621688.,  904516.,  944932.,  612728.,
      639928.,  931108.,  972292.,  630456.,  658168.,  667640.,  695864.,
      131980.,  144684.,  266680.,  292344.,  311032.,  337208.,  470884.,
      510532.,  318520.,  345208.,  482116.,  522532.,  326008.,  353208.,
      493348.,  534532.,  333496.,  361208.,  380920.,  409144.,  241580.,
      255564.,  488440.,  516664.,  532792.,  561528.,  807364.,  850852.,
      545400.,  574648.,  826276.,  870532.,  558008.,  587768.,  845188.,
      890212.,  570616.,  600888.,  618040.,  648824.,  368090.,  390026.,
      744100.,  788356.,  814468.,  859492.,  1233966., 1302078., 833380.,
      879172.,  1262334., 1331598., 852292.,  898852.,  1290702., 1361118.,
      871204.,  918532.,  946180.,  994276.,  270540.,  285804.,  546360.,
      577144.,  595832.,  627128.,  901924.,  949252.,  608440.,  640248.,
      920836.,  968932.,  621048.,  653368.,  939748.,  988612.,  633656.,
      666488.,  686200.,  719544.,  411530.,  435386.,  830980.,  879076.,
      909028.,  957892.,  1375806., 1449678., 927940.,  977572.,  1404174.,
      1479198., 946852.,  997252.,  1432542., 1508718., 965764.,  1016932.,
      1048420., 1100356., 299500.,  316044.,  604280.,  637624.,  658872.,
      692728.,  996484.,  1047652., 671480.,  705848.,  1015396., 1067332.,
      684088.,  718968.,  1034308., 1087012., 696696.,  732088.,  754360.,
      790264.,  434700.,  452524.,  877240.,  913144.,  931832.,  968248.,
      1409764., 1464772., 949560.,  986488.,  1436356., 1492132., 967288.,
      1004728., 1462948., 1519492., 985016.,  1022968., 1042680., 1081144.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1322.,   2906.,   1900.,   3084.,   2828.,   4268.,   1966.,   2750.,
      2558.,   3470.,   0.,      0.,      430.,    1214.,   510.,    1422.,
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,   9004.,
      7468.,   10188.,  4926.,   6350.,   5518.,   7070.,   0.,      0.,
      1100.,   3052.,   2028.,   4236.,   6776.,   11448.,  9144.,   14328.,
      18052.,  26212.,  16632.,  22328.,  20024.,  26232.,  12396.,  15628.,
      14348.,  17836.,  0.,      0.,      5740.,   8972.,   6668.,   10156.,
      18616.,  25848.,  20984.,  28728.,  39652.,  51652.,  33592.,  41848.,
      36984.,  45752.,  22156.,  26668.,  24108.,  28876.,  0.,      0.,
      10380.,  14892.,  11308.,  16076.,  30456.,  40248.,  32824.,  43128.,
      61252.,  77092.,  50552.,  61368.,  53944.,  65272.,  31916.,  37708.,
      33868.,  39916.,  0.,      0.,      12990.,  15438.,  13838.,  16414.,
      31596.,  36876.,  33548.,  39084.,  56330.,  64826.,  42412.,  48204.,
      44876.,  50924.,  24910.,  27998.,  26270.,  29486.,  0.,      0.,
      17230.,  20318.,  18078.,  21294.,  41356.,  47916.,  43308.,  50124.,
      72890.,  83306.,  54732.,  61804.,  57196.,  64524.,  31710.,  35438.,
      33070.,  36926.,  0.,      0.,      510.,    1422.,   2126.,   3166.,
      4332.,   6540.,   7820.,   10284.,  11978.,  15866.,  9004.,   11724.,
      13004.,  15980.,  7054.,   8606.,   9182.,   10862.,  0.,      0.,
      8590.,   10142.,  10206.,  11886.,  21772.,  25260.,  25260.,  29004.,
      40058.,  45866.,  29004.,  33004.,  33004.,  37260.,  17694.,  19886.,
      19822.,  22142.,  0.,      0.,      17420.,  20908.,  21420.,  25164.,
      45560.,  53304.,  54072.,  62328.,  85444.,  98212.,  61560.,  70328.,
      71096.,  80376.,  37932.,  42700.,  42956.,  47980.,  0.,      0.,
      37420.,  42188.,  41420.,  46444.,  88120.,  98424.,  96632.,  107448.,
      153124., 169732., 109240., 120568., 118776., 130616., 63052.,  69100.,
      68076.,  74380.,  0.,      0.,      57420.,  63468.,  61420.,  67724.,
      130680., 143544., 139192., 152568., 220804., 241252., 156920., 170808.,
      166456., 180856., 88172.,  95500.,  93196.,  100780., 0.,      0.,
      36510.,  39726.,  38894.,  42238.,  81708.,  88524.,  86732.,  93804.,
      136106., 146906., 95596.,  102924., 101132., 108716., 53038.,  56894.,
      55934.,  59918.,  0.,      0.,      48430.,  52286.,  50814.,  54798.,
      106828., 114924., 111852., 120204., 175706., 188426., 123276., 131884.,
      128812., 137676., 67518.,  72014.,  70414.,  75038.,  0.,      0.,
      990.,    2670.,   4142.,   5950.,   8364.,   12108.,  14924.,  18924.,
      22634.,  28826.,  16108.,  20364.,  23180.,  27692.,  12142.,  14462.,
      15806.,  18254.,  0.,      0.,      16750.,  19070.,  19902.,  22350.,
      41164.,  46188.,  47724.,  53004.,  73754.,  81866.,  51468.,  57004.,
      58540.,  64332.,  30462.,  33422.,  34126.,  37214.,  0.,      0.,
      33740.,  38764.,  40812.,  46092.,  84344.,  95160.,  99000.,  110328.,
      152836., 170212., 106488., 118328., 122168., 134520., 63468.,  69772.,
      71564.,  78124.,  0.,      0.,      69100.,  75404.,  76172.,  82732.,
      157624., 171000., 172280., 186168., 266596., 287812., 184888., 199288.,
      200568., 215480., 103948., 111532., 112044., 119884., 0.,      0.,
      104460., 112044., 111532., 119372., 230904., 246840., 245560., 262008.,
      380356., 405412., 263288., 280248., 278968., 296440., 144428., 153292.,
      152524., 161644., 0.,      0.,      60030.,  64014.,  63950.,  68062.,
      131820., 140172., 139916., 148524., 215882., 228986., 148780., 157644.,
      157388., 166508., 81166.,  85790.,  85598.,  90350.,  0.,      0.,
      79630.,  84254.,  83550.,  88302.,  172300., 181932., 180396., 190284.,
      278522., 293546., 191820., 201964., 200428., 210828., 103326., 108590.,
      107758., 113150., 0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      150.,   224.,   302.,   384.,   468.,   624.,   788.,   960.,   676.,
      848.,   1028.,  1216.,  1282.,  1552.,  1834.,  2128.,  1140.,  1328.,
      1524.,  1728.,  1978.,  2272.,  2578.,  2896.,  1604.,  1808.,  2020.,
      2240.,  2674.,  2992.,  3322.,  3664.,  2068.,  2288.,  2516.,  2752.,
      2468.,  2704.,  2948.,  3200.,  590.,   704.,   822.,   944.,   1508.,
      1744.,  1988.,  2240.,  1716.,  1968.,  2228.,  2496.,  3082.,  3472.,
      3874.,  4288.,  2500.,  2768.,  3044.,  3328.,  4258.,  4672.,  5098.,
      5536.,  3284.,  3568.,  3860.,  4160.,  5434.,  5872.,  6322.,  6784.,
      4068.,  4368.,  4676.,  4992.,  4468.,  4784.,  5108.,  5440.,  1235.,
      1436.,  1643.,  1856.,  2962.,  3376.,  3802.,  4240.,  3514.,  3952.,
      4402.,  4864.,  6033.,  6708.,  7401.,  8112.,  4690.,  5152.,  5626.,
      6112.,  7797.,  8508.,  9237.,  9984.,  5866.,  6352.,  6850.,  7360.,
      9561.,  10308., 11073., 11856., 7042.,  7552.,  8074.,  8608.,  7882.,
      8416.,  8962.,  9520.,  2390.,  2544.,  2702.,  2864.,  5108.,  5424.,
      5748.,  6080.,  5636.,  5968.,  6308.,  6656.,  8962.,  9472.,  9994.,
      10528., 6420.,  6768.,  7124.,  7488.,  10138., 10672., 11218., 11776.,
      7204.,  7568.,  7940.,  8320.,  11314., 11872., 12442., 13024., 7988.,
      8368.,  8756.,  9152.,  8708.,  9104.,  9508.,  9920.,  3935.,  4196.,
      4463.,  4736.,  8362.,  8896.,  9442.,  10000., 9394.,  9952.,  10522.,
      11104., 14853., 15708., 16581., 17472., 10570., 11152., 11746., 12352.,
      16617., 17508., 18417., 19344., 11746., 12352., 12970., 13600., 18381.,
      19308., 20253., 21216., 12922., 13552., 14194., 14848., 14242., 14896.,
      15562., 16240., 4190.,  4384.,  4582.,  4784.,  8708.,  9104.,  9508.,
      9920.,  9556.,  9968.,  10388., 10816., 14842., 15472., 16114., 16768.,
      10340., 10768., 11204., 11648., 16018., 16672., 17338., 18016., 11124.,
      11568., 12020., 12480., 17194., 17872., 18562., 19264., 11908., 12368.,
      12836., 13312., 12948., 13424., 13908., 14400., 6230.,  6464.,  6702.,
      6944.,  12948., 13424., 13908., 14400., 13796., 14288., 14788., 15296.,
      21442., 22192., 22954., 23728., 14900., 15408., 15924., 16448., 23098.,
      23872., 24658., 25456., 16004., 16528., 17060., 17600., 24754., 25552.,
      26362., 27184., 17108., 17648., 18196., 18752., 18148., 18704., 19268.,
      19840., 4150.,  4384.,  4622.,  4864.,  8468.,  8944.,  9428.,  9920.,
      9956.,  10448., 10948., 11456., 15202., 15952., 16714., 17488., 10420.,
      10928., 11444., 11968., 15898., 16672., 17458., 18256., 10884., 11408.,
      11940., 12480., 16594., 17392., 18202., 19024., 11348., 11888., 12436.,
      12992., 13028., 13584., 14148., 14720., 7790.,  8064.,  8342.,  8624.,
      15908., 16464., 17028., 17600., 17396., 17968., 18548., 19136., 26602.,
      27472., 28354., 29248., 18180., 18768., 19364., 19968., 27778., 28672.,
      29578., 30496., 18964., 19568., 20180., 20800., 28954., 29872., 30802.,
      31744., 19748., 20368., 20996., 21632., 21428., 22064., 22708., 23360.,
      12035., 12476., 12923., 13376., 24562., 25456., 26362., 27280., 27034.,
      27952., 28882., 29824., 41313., 42708., 44121., 45552., 28210., 29152.,
      30106., 31072., 43077., 44508., 45957., 47424., 29386., 30352., 31330.,
      32320., 44841., 46308., 47793., 49296., 30562., 31552., 32554., 33568.,
      33322., 34336., 35362., 36400., 9590.,  9904.,  10222., 10544., 19508.,
      20144., 20788., 21440., 21316., 21968., 22628., 23296., 32482., 33472.,
      34474., 35488., 22100., 22768., 23444., 24128., 33658., 34672., 35698.,
      36736., 22884., 23568., 24260., 24960., 34834., 35872., 36922., 37984.,
      23668., 24368., 25076., 25792., 25668., 26384., 27108., 27840., 14735.,
      15236., 15743., 16256., 29962., 30976., 32002., 33040., 32914., 33952.,
      35002., 36064., 50133., 51708., 53301., 54912., 34090., 35152., 36226.,
      37312., 51897., 53508., 55137., 56784., 35266., 36352., 37450., 38560.,
      53661., 55308., 56973., 58656., 36442., 37552., 38674., 39808., 39682.,
      40816., 41962., 43120., 11390., 11744., 12102., 12464., 23108., 23824.,
      24548., 25280., 25236., 25968., 26708., 27456., 38362., 39472., 40594.,
      41728., 26020., 26768., 27524., 28288., 39538., 40672., 41818., 42976.,
      26804., 27568., 28340., 29120., 40714., 41872., 43042., 44224., 27588.,
      28368., 29156., 29952., 29908., 30704., 31508., 32320., 16630., 17024.,
      17422., 17824., 33748., 34544., 35348., 36160., 35876., 36688., 37508.,
      38336., 54562., 55792., 57034., 58288., 36980., 37808., 38644., 39488.,
      56218., 57472., 58738., 60016., 38084., 38928., 39780., 40640., 57874.,
      59152., 60442., 61744., 39188., 40048., 40916., 41792., 41508., 42384.,
      43268., 44160., 8150.,  8544.,  8942.,  9344.,  16468., 17264., 18068.,
      18880., 19236., 20048., 20868., 21696., 29122., 30352., 31594., 32848.,
      19700., 20528., 21364., 22208., 29818., 31072., 32338., 33616., 20164.,
      21008., 21860., 22720., 30514., 31792., 33082., 34384., 20628., 21488.,
      22356., 23232., 23588., 24464., 25348., 26240., 14990., 15424., 15862.,
      16304., 30308., 31184., 32068., 32960., 33076., 33968., 34868., 35776.,
      50122., 51472., 52834., 54208., 33860., 34768., 35684., 36608., 51298.,
      52672., 54058., 55456., 34644., 35568., 36500., 37440., 52474., 53872.,
      55282., 56704., 35428., 36368., 37316., 38272., 38388., 39344., 40308.,
      41280., 22835., 23516., 24203., 24896., 46162., 47536., 48922., 50320.,
      50554., 51952., 53362., 54784., 76593., 78708., 80841., 82992., 51730.,
      53152., 54586., 56032., 78357., 80508., 82677., 84864., 52906., 54352.,
      55810., 57280., 80121., 82308., 84513., 86736., 54082., 55552., 57034.,
      58528., 58762., 60256., 61762., 63280., 16790., 17264., 17742., 18224.,
      33908., 34864., 35828., 36800., 36996., 37968., 38948., 39936., 56002.,
      57472., 58954., 60448., 37780., 38768., 39764., 40768., 57178., 58672.,
      60178., 61696., 38564., 39568., 40580., 41600., 58354., 59872., 61402.,
      62944., 39348., 40368., 41396., 42432., 42628., 43664., 44708., 45760.,
      25535., 26276., 27023., 27776., 51562., 53056., 54562., 56080., 56434.,
      57952., 59482., 61024., 85413., 87708., 90021., 92352., 57610., 59152.,
      60706., 62272., 87177., 89508., 91857., 94224., 58786., 60352., 61930.,
      63520., 88941., 91308., 93693., 96096., 59962., 61552., 63154., 64768.,
      65122., 66736., 68362., 70000., 18590., 19104., 19622., 20144., 37508.,
      38544., 39588., 40640., 40916., 41968., 43028., 44096., 61882., 63472.,
      65074., 66688., 41700., 42768., 43844., 44928., 63058., 64672., 66298.,
      67936., 42484., 43568., 44660., 45760., 64234., 65872., 67522., 69184.,
      43268., 44368., 45476., 46592., 46868., 47984., 49108., 50240., 27030.,
      27584., 28142., 28704., 54548., 55664., 56788., 57920., 57956., 59088.,
      60228., 61376., 87682., 89392., 91114., 92848., 59060., 60208., 61364.,
      62528., 89338., 91072., 92818., 94576., 60164., 61328., 62500., 63680.,
      90994., 92752., 94522., 96304., 61268., 62448., 63636., 64832., 64868.,
      66064., 67268., 68480.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     614.,   752.,
      894.,   1040.,  670.,   816.,   966.,   1120.,  1828.,  2128.,  2436.,
      2752.,  1972.,  2288.,  2612.,  2944.,  3706.,  4192.,  4690.,  5200.,
      3076.,  3408.,  3748.,  4096.,  3284.,  3632.,  3988.,  4352.,  1950.,
      2128.,  2310.,  2496.,  2070.,  2256.,  2446.,  2640.,  0.,     0.,
      0.,     0.,     793.,   868.,   945.,   1024.,  845.,   924.,   1005.,
      1088.,  1934.,  2096.,  2262.,  2432.,  2054.,  2224.,  2398.,  2576.,
      3455.,  3716.,  3983.,  4256.,  2606.,  2784.,  2966.,  3152.,  2758.,
      2944.,  3134.,  3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,
      1817.,  1920.,  0.,     0.,     0.,     0.,     1053.,  1148.,  1245.,
      1344.,  1105.,  1204.,  1305.,  1408.,  2534.,  2736.,  2942.,  3152.,
      2654.,  2864.,  3078.,  3296.,  4475.,  4796.,  5123.,  5456.,  3366.,
      3584.,  3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,
      2185.,  2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,
      0.,     25.,    52.,    81.,    112.,   125.,   156.,   189.,   224.,
      254.,   320.,   390.,   464.,   470.,   544.,   622.,   704.,   719.,
      836.,   959.,   1088.,  542.,   624.,   710.,   800.,   790.,   880.,
      974.,   1072.,  429.,   476.,   525.,   576.,   561.,   612.,   665.,
      720.,   0.,     0.,     0.,     0.,     525.,   572.,   621.,   672.,
      625.,   676.,   729.,   784.,   1334.,  1440.,  1550.,  1664.,  1550.,
      1664.,  1782.,  1904.,  2459.,  2636.,  2819.,  3008.,  1782.,  1904.,
      2030.,  2160.,  2030.,  2160.,  2294.,  2432.,  1089.,  1156.,  1225.,
      1296.,  1221.,  1292.,  1365.,  1440.,  0.,     0.,     0.,     0.,
      1062.,  1168.,  1278.,  1392.,  1310.,  1424.,  1542.,  1664.,  2788.,
      3024.,  3268.,  3520.,  3316.,  3568.,  3828.,  4096.,  5242.,  5632.,
      6034.,  6448.,  3780.,  4048.,  4324.,  4608.,  4372.,  4656.,  4948.,
      5248.,  2334.,  2480.,  2630.,  2784.,  2646.,  2800.,  2958.,  3120.,
      0.,     0.,     0.,     0.,     2302.,  2448.,  2598.,  2752.,  2550.,
      2704.,  2862.,  3024.,  5428.,  5744.,  6068.,  6400.,  5956.,  6288.,
      6628.,  6976.,  9442.,  9952.,  10474., 11008., 6740.,  7088.,  7444.,
      7808.,  7332.,  7696.,  8068.,  8448.,  3894.,  4080.,  4270.,  4464.,
      4206.,  4400.,  4598.,  4800.,  0.,     0.,     0.,     0.,     3542.,
      3728.,  3918.,  4112.,  3790.,  3984.,  4182.,  4384.,  8068.,  8464.,
      8868.,  9280.,  8596.,  9008.,  9428.,  9856.,  13642., 14272., 14914.,
      15568., 9700.,  10128., 10564., 11008., 10292., 10736., 11188., 11648.,
      5454.,  5680.,  5910.,  6144.,  5766.,  6000.,  6238.,  6480.,  0.,
      0.,     0.,     0.,     2257.,  2356.,  2457.,  2560.,  2405.,  2508.,
      2613.,  2720.,  5054.,  5264.,  5478.,  5696.,  5366.,  5584.,  5806.,
      6032.,  8423.,  8756.,  9095.,  9440.,  5918.,  6144.,  6374.,  6608.,
      6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,  3465.,
      3588.,  3713.,  3840.,  0.,     0.,     0.,     0.,     2997.,  3116.,
      3237.,  3360.,  3145.,  3268.,  3393.,  3520.,  6614.,  6864.,  7118.,
      7376.,  6926.,  7184.,  7446.,  7712.,  10883., 11276., 11675., 12080.,
      7638.,  7904.,  8174.,  8448.,  7982.,  8256.,  8534.,  8816.,  4185.,
      4324.,  4465.,  4608.,  4365.,  4508.,  4653.,  4800.,  0.,     0.,
      0.,     0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,
      416.,   494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,
      1367.,  1556.,  1751.,  1952.,  974.,   1104.,  1238.,  1376.,  1414.,
      1552.,  1694.,  1840.,  741.,   812.,   885.,   960.,   969.,   1044.,
      1121.,  1200.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,
      1248.,  1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,
      2942.,  3104.,  3270.,  3440.,  4547.,  4796.,  5051.,  5312.,  3174.,
      3344.,  3518.,  3696.,  3614.,  3792.,  3974.,  4160.,  1881.,  1972.,
      2065.,  2160.,  2109.,  2204.,  2301.,  2400.,  0.,     0.,     0.,
      0.,     2070.,  2224.,  2382.,  2544.,  2510.,  2672.,  2838.,  3008.,
      5188.,  5520.,  5860.,  6208.,  6100.,  6448.,  6804.,  7168.,  9418.,
      9952.,  10498., 11056., 6564.,  6928.,  7300.,  7680.,  7540.,  7920.,
      8308.,  8704.,  3918.,  4112.,  4310.,  4512.,  4422.,  4624.,  4830.,
      5040.,  0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,  4864.,
      4710.,  4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008., 10660.,
      11088., 11524., 11968., 16498., 17152., 17818., 18496., 11444., 11888.,
      12340., 12800., 12420., 12880., 13348., 13824., 6438.,  6672.,  6910.,
      7152.,  6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,     0.,
      6470.,  6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,  14308.,
      14800., 15300., 15808., 15220., 15728., 16244., 16768., 23578., 24352.,
      25138., 25936., 16324., 16848., 17380., 17920., 17300., 17840., 18388.,
      18944., 8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030., 10320.,
      0.,     0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,  3965.,
      4092.,  4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,  8944.,
      9214.,  9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,  9782.,
      10064., 9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,  5472.,
      5313.,  5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,     4941.,
      5084.,  5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694., 10992.,
      11294., 11600., 11198., 11504., 11814., 12128., 17291., 17756., 18227.,
      18704., 11910., 12224., 12542., 12864., 12446., 12768., 13094., 13424.,
      6417.,  6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      49378.,  51242.,  53138.,  55066.,  102644., 106436., 110292., 114212.,
      109396., 113316., 117300., 121348., 170054., 176030., 182102., 188270.,
      118196., 122244., 126356., 130532., 183254., 189422., 195686., 202046.,
      126996., 131172., 135412., 139716., 196454., 202814., 209270., 215822.,
      135796., 140100., 144468., 148900., 144084., 148516., 153012., 157572.,
      32738.,  34602.,  36498.,  38426.,  66804.,  70596.,  74452.,  78372.,
      78676.,  82596.,  86580.,  90628.,  120134., 126110., 132182., 138350.,
      82356.,  86404.,  90516.,  94692.,  125654., 131822., 138086., 144446.,
      86036.,  90212.,  94452.,  98756.,  131174., 137534., 143990., 150542.,
      89716.,  94020.,  98388.,  102820., 103124., 107556., 112052., 116612.,
      61778.,  63962.,  66178.,  68426.,  126164., 130596., 135092., 139652.,
      138036., 142596., 147220., 151908., 211094., 218030., 225062., 232190.,
      144276., 148964., 153716., 158532., 220454., 227582., 234806., 242126.,
      150516., 155332., 160212., 165156., 229814., 237134., 244550., 252062.,
      156756., 161700., 166708., 171780., 170164., 175236., 180372., 185572.,
      95407.,  98923.,  102487., 106099., 194726., 201854., 209078., 216398.,
      214454., 221774., 229190., 236702., 327741., 338865., 350133., 361545.,
      223814., 231326., 238934., 246638., 341781., 353193., 364749., 376449.,
      233174., 240878., 248678., 256574., 355821., 367521., 379365., 391353.,
      242534., 250430., 258422., 266510., 264566., 272654., 280838., 289118.,
      76098.,  78602.,  81138.,  83706.,  154804., 159876., 165012., 170212.,
      169236., 174436., 179700., 185028., 257894., 265790., 273782., 281870.,
      175476., 180804., 186196., 191652., 267254., 275342., 283526., 291806.,
      181716., 187172., 192692., 198276., 276614., 284894., 293270., 301742.,
      187956., 193540., 199188., 204900., 203924., 209636., 215412., 221252.,
      116887., 120883., 124927., 129019., 237686., 245774., 253958., 262238.,
      261254., 269534., 277910., 286382., 397941., 410505., 423213., 436065.,
      270614., 279086., 287654., 296318., 411981., 424833., 437829., 450969.,
      279974., 288638., 297398., 306254., 426021., 439161., 452445., 465873.,
      289334., 298190., 307142., 316190., 315206., 324254., 333398., 342638.,
      90418.,  93242.,  96098.,  98986.,  183444., 189156., 194932., 200772.,
      200436., 206276., 212180., 218148., 304694., 313550., 322502., 331550.,
      206676., 212644., 218676., 224772., 314054., 323102., 332246., 341486.,
      212916., 219012., 225172., 231396., 323414., 332654., 341990., 351422.,
      219156., 225380., 231668., 238020., 237684., 244036., 250452., 256932.,
      132258., 135402., 138578., 141786., 268404., 274756., 281172., 287652.,
      285396., 291876., 298420., 305028., 434054., 443870., 453782., 463790.,
      294196., 300804., 307476., 314212., 447254., 457262., 467366., 477566.,
      302996., 309732., 316532., 323396., 460454., 470654., 480950., 491342.,
      311796., 318660., 325588., 332580., 330324., 337316., 344372., 351492.,
      64418.,  67562.,  70738.,  73946.,  130164., 136516., 142932., 149412.,
      152276., 158756., 165300., 171908., 230534., 240350., 250262., 260270.,
      155956., 162564., 169236., 175972., 236054., 246062., 256166., 266366.,
      159636., 166372., 173172., 180036., 241574., 251774., 262070., 272462.,
      163316., 170180., 177108., 184100., 186964., 193956., 201012., 208132.,
      119058., 122522., 126018., 129546., 240724., 247716., 254772., 261892.,
      262836., 269956., 277140., 284388., 398294., 409070., 419942., 430910.,
      269076., 276324., 283636., 291012., 407654., 418622., 429686., 440846.,
      275316., 282692., 290132., 297636., 417014., 428174., 439430., 450782.,
      281556., 289060., 296628., 304260., 305204., 312836., 320532., 328292.,
      181327., 186763., 192247., 197779., 366566., 377534., 388598., 399758.,
      401654., 412814., 424070., 435422., 608541., 625425., 642453., 659625.,
      411014., 422366., 433814., 445358., 622581., 639753., 657069., 674529.,
      420374., 431918., 443558., 455294., 636621., 654081., 671685., 689433.,
      429734., 441470., 453302., 465230., 467126., 479054., 491078., 503198.,
      133378., 137162., 140978., 144826., 269364., 276996., 284692., 292452.,
      294036., 301796., 309620., 317508., 445094., 456830., 468662., 480590.,
      300276., 308164., 316116., 324132., 454454., 466382., 478406., 490526.,
      306516., 314532., 322612., 330756., 463814., 475934., 488150., 500462.,
      312756., 320900., 329108., 337380., 338964., 347236., 355572., 363972.,
      202807., 208723., 214687., 220699., 409526., 421454., 433478., 445598.,
      448454., 460574., 472790., 485102., 678741., 697065., 715533., 734145.,
      457814., 470126., 482534., 495038., 692781., 711393., 730149., 749049.,
      467174., 479678., 492278., 504974., 706821., 725721., 744765., 763953.,
      476534., 489230., 502022., 514910., 517766., 530654., 543638., 556718.,
      147698., 151802., 155938., 160106., 298004., 306276., 314612., 323012.,
      325236., 333636., 342100., 350628., 491894., 504590., 517382., 530270.,
      331476., 340004., 348596., 357252., 501254., 514142., 527126., 540206.,
      337716., 346372., 355092., 363876., 510614., 523694., 536870., 550142.,
      343956., 352740., 361588., 370500., 372724., 381636., 390612., 399652.,
      215138., 219562., 224018., 228506., 434164., 443076., 452052., 461092.,
      461396., 470436., 479540., 488708., 698054., 711710., 725462., 739310.,
      470196., 479364., 488596., 497892., 711254., 725102., 739046., 753086.,
      478996., 488292., 497652., 507076., 724454., 738494., 752630., 766862.,
      487796., 497220., 506708., 516260., 516564., 526116., 535732., 545412.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      25.,     61.,     113.,    29.,     81.,     149.,    233.,
      82.,     218.,    386.,    586.,    258.,    458.,    690.,    954.,
      487.,    835.,    1231.,   1675.,   818.,    1082.,   1378.,   1706.,
      1250.,   1578.,   1938.,   2330.,   893.,    1073.,   1269.,   1481.,
      1173.,   1385.,   1613.,   1857.,   0.,      0.,      0.,      0.,
      125.,    305.,    501.,    713.,    149.,    361.,    589.,    833.,
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      3410.,   4058.,   4738.,   5450.,   2293.,   2633.,   2989.,   3361.,
      2573.,   2945.,   3333.,   3737.,   0.,      0.,      0.,      0.,
      322.,    778.,    1266.,   1786.,   754.,    1274.,   1826.,   2410.,
      2836.,   3940.,   5108.,   6340.,   3956.,   5188.,   6484.,   7844.,
      8054.,   9998.,   12038.,  14174.,  7636.,   8996.,   10420.,  11908.,
      9268.,   10756.,  12308.,  13924.,  5810.,   6586.,   7394.,   8234.,
      6754.,   7594.,   8466.,   9370.,   0.,      0.,      0.,      0.,
      2482.,   3258.,   4066.,   4906.,   2914.,   3754.,   4626.,   5530.,
      8436.,   10180.,  11988.,  13860.,  9556.,   11428.,  13364.,  15364.,
      18374.,  21278.,  24278.,  27374.,  15796.,  17796.,  19860.,  21988.,
      17428.,  19556.,  21748.,  24004.,  10530.,  11626.,  12754.,  13914.,
      11474.,  12634.,  13826.,  15050.,  0.,      0.,      0.,      0.,
      4642.,   5738.,   6866.,   8026.,   5074.,   6234.,   7426.,   8650.,
      14036.,  16420.,  18868.,  21380.,  15156.,  17668.,  20244.,  22884.,
      28694.,  32558.,  36518.,  40574.,  23956.,  26596.,  29300.,  32068.,
      25588.,  28356.,  31188.,  34084.,  15250.,  16666.,  18114.,  19594.,
      16194.,  17674.,  19186.,  20730.,  0.,      0.,      0.,      0.,
      6197.,   6793.,   7405.,   8033.,   6605.,   7233.,   7877.,   8537.,
      15154.,  16442.,  17762.,  19114.,  16098.,  17450.,  18834.,  20250.,
      27127.,  29203.,  31327.,  33499.,  20498.,  21914.,  23362.,  24842.,
      21698.,  23178.,  24690.,  26234.,  12077.,  12833.,  13605.,  14393.,
      12741.,  13529.,  14333.,  15153.,  0.,      0.,      0.,      0.,
      8237.,   8993.,   9765.,   10553.,  8645.,   9433.,   10237.,  11057.,
      19874.,  21482.,  23122.,  24794.,  20818.,  22490.,  24194.,  25930.,
      35167.,  37723.,  40327.,  42979.,  26498.,  28234.,  30002.,  31802.,
      27698.,  29498.,  31330.,  33194.,  15397.,  16313.,  17245.,  18193.,
      16061.,  17009.,  17973.,  18953.,  0.,      0.,      0.,      0.,
      149.,    361.,    589.,    833.,    941.,    1185.,   1445.,   1721.,
      1906.,   2426.,   2978.,   3562.,   3618.,   4202.,   4818.,   5466.,
      5527.,   6451.,   7423.,   8443.,   4178.,   4826.,   5506.,   6218.,
      6146.,   6858.,   7602.,   8378.,   3341.,   3713.,   4101.,   4505.,
      4389.,   4793.,   5213.,   5649.,   0.,      0.,      0.,      0.,
      4109.,   4481.,   4869.,   5273.,   4901.,   5305.,   5725.,   6161.,
      10466.,  11306.,  12178.,  13082.,  12178.,  13082.,  14018.,  14986.,
      19327.,  20731.,  22183.,  23683.,  14018.,  14986.,  15986.,  17018.,
      15986.,  17018.,  18082.,  19178.,  8581.,   9113.,   9661.,   10225.,
      9629.,   10193.,  10773.,  11369.,  0.,      0.,      0.,      0.,
      8290.,   9130.,   10002.,  10906.,  10258.,  11162.,  12098.,  13066.,
      21844.,  23716.,  25652.,  27652.,  26036.,  28036.,  30100.,  32228.,
      41174.,  44270.,  47462.,  50750.,  29716.,  31844.,  34036.,  36292.,
      34420.,  36676.,  38996.,  41380.,  18386.,  19546.,  20738.,  21962.,
      20866.,  22090.,  23346.,  24634.,  0.,      0.,      0.,      0.,
      18130.,  19290.,  20482.,  21706.,  20098.,  21322.,  22578.,  23866.,
      42804.,  45316.,  47892.,  50532.,  46996.,  49636.,  52340.,  55108.,
      74534.,  78590.,  82742.,  86990.,  53236.,  56004.,  58836.,  61732.,
      57940.,  60836.,  63796.,  66820.,  30786.,  32266.,  33778.,  35322.,
      33266.,  34810.,  36386.,  37994.,  0.,      0.,      0.,      0.,
      27970.,  29450.,  30962.,  32506.,  29938.,  31482.,  33058.,  34666.,
      63764.,  66916.,  70132.,  73412.,  67956.,  71236.,  74580.,  77988.,
      107894., 112910., 118022., 123230., 76756.,  80164.,  83636.,  87172.,
      81460.,  84996.,  88596.,  92260.,  43186.,  44986.,  46818.,  48682.,
      45666.,  47530.,  49426.,  51354.,  0.,      0.,      0.,      0.,
      17861.,  18649.,  19453.,  20273.,  19037.,  19857.,  20693.,  21545.,
      40018.,  41690.,  43394.,  45130.,  42498.,  44234.,  46002.,  47802.,
      66727.,  69379.,  72079.,  74827.,  46898.,  48698.,  50530.,  52394.,
      49634.,  51498.,  53394.,  55322.,  26045.,  26993.,  27957.,  28937.,
      27477.,  28457.,  29453.,  30465.,  0.,      0.,      0.,      0.,
      23741.,  24689.,  25653.,  26633.,  24917.,  25897.,  26893.,  27905.,
      52418.,  54410.,  56434.,  58490.,  54898.,  56954.,  59042.,  61162.,
      86287.,  89419.,  92599.,  95827.,  60578.,  62698.,  64850.,  67034.,
      63314.,  65498.,  67714.,  69962.,  33205.,  34313.,  35437.,  36577.,
      34637.,  35777.,  36933.,  38105.,  0.,      0.,      0.,      0.,
      293.,    697.,    1117.,   1553.,   1853.,   2289.,   2741.,   3209.,
      3730.,   4634.,   5570.,   6538.,   6978.,   7946.,   8946.,   9978.,
      10567.,  12067.,  13615.,  15211.,  7538.,   8570.,   9634.,   10730.,
      11042.,  12138.,  13266.,  14426.,  5789.,   6353.,   6933.,   7529.,
      7605.,   8201.,   8813.,   9441.,   0.,      0.,      0.,      0.,
      8093.,   8657.,   9237.,   9833.,   9653.,   10249.,  10861.,  11489.,
      19970.,  21194.,  22450.,  23738.,  23218.,  24506.,  25826.,  27178.,
      35887.,  37867.,  39895.,  41971.,  25058.,  26410.,  27794.,  29210.,
      28562.,  29978.,  31426.,  32906.,  14869.,  15593.,  16333.,  17089.,
      16685.,  17441.,  18213.,  19001.,  0.,      0.,      0.,      0.,
      16258.,  17482.,  18738.,  20026.,  19762.,  21050.,  22370.,  23722.,
      40852.,  43492.,  46196.,  48964.,  48116.,  50884.,  53716.,  56612.,
      74294.,  78542.,  82886.,  87326.,  51796.,  54692.,  57652.,  60676.,
      59572.,  62596.,  65684.,  68836.,  30962.,  32506.,  34082.,  35690.,
      34978.,  36586.,  38226.,  39898.,  0.,      0.,      0.,      0.,
      33778.,  35322.,  36898.,  38506.,  37282.,  38890.,  40530.,  42202.,
      77172.,  80452.,  83796.,  87204.,  84436.,  87844.,  91316.,  94852.,
      130694., 135902., 141206., 146606., 90676.,  94212.,  97812.,  101476.,
      98452.,  102116., 105844., 109636., 51042.,  52906.,  54802.,  56730.,
      55058.,  56986.,  58946.,  60938.,  0.,      0.,      0.,      0.,
      51298.,  53162.,  55058.,  56986.,  54802.,  56730.,  58690.,  60682.,
      113492., 117412., 121396., 125444., 120756., 124804., 128916., 133092.,
      187094., 193262., 199526., 205886., 129556., 133732., 137972., 142276.,
      137332., 141636., 146004., 150436., 71122.,  73306.,  75522.,  77770.,
      75138.,  77386.,  79666.,  81978.,  0.,      0.,      0.,      0.,
      29525.,  30505.,  31501.,  32513.,  31469.,  32481.,  33509.,  34553.,
      64882.,  66938.,  69026.,  71146.,  68898.,  71018.,  73170.,  75354.,
      106327., 109555., 112831., 116155., 73298.,  75482.,  77698.,  79946.,
      77570.,  79818.,  82098.,  84410.,  40013.,  41153.,  42309.,  43481.,
      42213.,  43385.,  44573.,  45777.,  0.,      0.,      0.,      0.,
      39245.,  40385.,  41541.,  42713.,  41189.,  42361.,  43549.,  44753.,
      84962.,  87338.,  89746.,  92186.,  88978.,  91418.,  93890.,  96394.,
      137407., 141115., 144871., 148675., 94658.,  97162.,  99698.,  102266.,
      98930.,  101498., 104098., 106730., 51013.,  52313.,  53629.,  54961.,
      53213.,  54545.,  55893.,  57257.,  0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7900.,    12540.,   17436.,   22588.,   26360.,   36152.,   46456.,
      57272.,   39288.,   50104.,   61432.,   73272.,   75796.,   92788.,
      110548.,  129076.,  68600.,   80440.,   92792.,   105656.,  119764.,
      138292.,  157588.,  177652.,  97912.,   110776.,  124152.,  138040.,
      163732.,  183796.,  204628.,  226228.,  127224.,  141112.,  155512.,
      170424.,  152440.,  167352.,  182776.,  198712.,  35100.,   42300.,
      49756.,   57468.,   91000.,   105912.,  121336.,  137272.,  103928.,
      119864.,  136312.,  153272.,  188116.,  212788.,  238228.,  264436.,
      153720.,  170680.,  188152.,  206136.,  262804.,  289012.,  315988.,
      343732.,  203512.,  221496.,  239992.,  259000.,  337492.,  365236.,
      393748.,  423028.,  253304.,  272312.,  291832.,  311864.,  278520.,
      298552.,  319096.,  340152.,  74330.,   87050.,   100154.,  113642.,
      179860.,  206068.,  233044.,  260788.,  214612.,  242356.,  270868.,
      300148.,  370254.,  413022.,  456942.,  502014.,  289300.,  318580.,
      348628.,  379444.,  482286.,  527358.,  573582.,  620958.,  363988.,
      394804.,  426388.,  458740.,  594318.,  641694.,  690222.,  739902.,
      438676.,  471028.,  504148.,  538036.,  491860.,  525748.,  560404.,
      595828.,  149340.,  159100.,  169116.,  179388.,  319480.,  339512.,
      360056.,  381112.,  352888.,  373944.,  395512.,  417592.,  561556.,
      593908.,  627028.,  660916.,  402680.,  424760.,  447352.,  470456.,
      636244.,  670132.,  704788.,  740212.,  452472.,  475576.,  499192.,
      523320.,  710932.,  746356.,  782548.,  819508.,  502264.,  526392.,
      551032.,  576184.,  547960.,  573112.,  598776.,  624952.,  245690.,
      262250.,  279194.,  296522.,  522580.,  556468.,  591124.,  626548.,
      588052.,  623476.,  659668.,  696628.,  930414.,  984702.,  1040142.,
      1096734., 662740.,  699700.,  737428.,  775924.,  1042446., 1099038.,
      1156782., 1215678., 737428.,  775924.,  815188.,  855220.,  1154478.,
      1213374., 1273422., 1334622., 812116.,  852148.,  892948.,  934516.,
      896020.,  937588.,  979924.,  1023028., 263580.,  275900.,  288476.,
      301308.,  547960.,  573112.,  598776.,  624952.,  601848.,  628024.,
      654712.,  681912.,  934996.,  975028.,  1015828., 1057396., 651640.,
      678840.,  706552.,  734776.,  1009684., 1051252., 1093588., 1136692.,
      701432.,  729656.,  758392.,  787640.,  1084372., 1127476., 1171348.,
      1215988., 751224.,  780472.,  810232.,  840504.,  817400.,  847672.,
      878456.,  909752.,  393180.,  408060.,  423196.,  438588.,  817400.,
      847672.,  878456.,  909752.,  871288.,  902584.,  934392.,  966712.,
      1354516., 1402228., 1450708., 1499956., 941560.,  973880.,  1006712.,
      1040056., 1459924., 1509172., 1559188., 1609972., 1011832., 1045176.,
      1079032., 1113400., 1565332., 1616116., 1667668., 1719988., 1082104.,
      1116472., 1151352., 1186744., 1148280., 1183672., 1219576., 1255992.,
      260060.,  274940.,  290076.,  305468.,  530680.,  560952.,  591736.,
      623032.,  625528.,  656824.,  688632.,  720952.,  955156.,  1002868.,
      1051348., 1100596., 654840.,  687160.,  719992.,  753336.,  999124.,
      1048372., 1098388., 1149172., 684152.,  717496.,  751352.,  785720.,
      1043092., 1093876., 1145428., 1197748., 713464.,  747832.,  782712.,
      818104.,  820600.,  855992.,  891896.,  928312.,  492060.,  509500.,
      527196.,  545148.,  1004920., 1040312., 1076216., 1112632., 1099768.,
      1136184., 1173112., 1210552., 1681876., 1737268., 1793428., 1850356.,
      1149560., 1187000., 1224952., 1263416., 1756564., 1813492., 1871188.,
      1929652., 1199352., 1237816., 1276792., 1316280., 1831252., 1889716.,
      1948948., 2008948., 1249144., 1288632., 1328632., 1369144., 1356280.,
      1396792., 1437816., 1479352., 759770.,  787850.,  816314.,  845162.,
      1550740., 1607668., 1665364., 1723828., 1708372., 1766836., 1826068.,
      1886068., 2610894., 2699742., 2789742., 2880894., 1783060., 1843060.,
      1903828., 1965364., 2722926., 2814078., 2906382., 2999838., 1857748.,
      1919284., 1981588., 2044660., 2834958., 2928414., 3023022., 3118782.,
      1932436., 1995508., 2059348., 2123956., 2108500., 2173108., 2238484.,
      2304628., 606300.,  626300.,  646556.,  667068.,  1233400., 1273912.,
      1314936., 1356472., 1348728., 1390264., 1432312., 1474872., 2055316.,
      2118388., 2182228., 2246836., 1398520., 1441080., 1484152., 1527736.,
      2130004., 2194612., 2259988., 2326132., 1448312., 1491896., 1535992.,
      1580600., 2204692., 2270836., 2337748., 2405428., 1498104., 1542712.,
      1587832., 1633464., 1625720., 1671352., 1717496., 1764152., 931130.,
      963050.,  995354.,  1028042., 1893460., 1958068., 2023444., 2089588.,
      2081812., 2147956., 2214868., 2282548., 3171054., 3271422., 3372942.,
      3475614., 2156500., 2224180., 2292628., 2361844., 3283086., 3385758.,
      3489582., 3594558., 2231188., 2300404., 2370388., 2441140., 3395118.,
      3500094., 3606222., 3713502., 2305876., 2376628., 2448148., 2520436.,
      2512660., 2584948., 2658004., 2731828., 720540.,  743100.,  765916.,
      788988.,  1461880., 1507512., 1553656., 1600312., 1597688., 1644344.,
      1691512., 1739192., 2428756., 2499508., 2571028., 2643316., 1647480.,
      1695160., 1743352., 1792056., 2503444., 2575732., 2648788., 2722612.,
      1697272., 1745976., 1795192., 1844920., 2578132., 2651956., 2726548.,
      2801908., 1747064., 1796792., 1847032., 1897784., 1895160., 1945912.,
      1997176., 2048952., 1054940., 1080060., 1105436., 1131068., 2140920.,
      2191672., 2242936., 2294712., 2276728., 2328504., 2380792., 2433592.,
      3462676., 3541108., 3620308., 3700276., 2347000., 2399800., 2453112.,
      2506936., 3568084., 3648052., 3728788., 3810292., 2417272., 2471096.,
      2525432., 2580280., 3673492., 3754996., 3837268., 3920308., 2487544.,
      2542392., 2597752., 2653624., 2635640., 2691512., 2747896., 2804792.,
      512220.,  537340.,  562716.,  588348.,  1035000., 1085752., 1137016.,
      1188792., 1211768., 1263544., 1315832., 1368632., 1834516., 1912948.,
      1992148., 2072116., 1241080., 1293880., 1347192., 1401016., 1878484.,
      1958452., 2039188., 2120692., 1270392., 1324216., 1378552., 1433400.,
      1922452., 2003956., 2086228., 2169268., 1299704., 1354552., 1409912.,
      1465784., 1488760., 1544632., 1601016., 1657912., 949020.,  976700.,
      1004636., 1032828., 1918840., 1974712., 2031096., 2087992., 2095608.,
      2152504., 2209912., 2267832., 3175636., 3261748., 3348628., 3436276.,
      2145400., 2203320., 2261752., 2320696., 3250324., 3337972., 3426388.,
      3515572., 2195192., 2254136., 2313592., 2373560., 3325012., 3414196.,
      3504148., 3594868., 2244984., 2304952., 2365432., 2426424., 2434040.,
      2495032., 2556536., 2618552., 1445210., 1488650., 1532474., 1576682.,
      2921620., 3009268., 3097684., 3186868., 3202132., 3291316., 3381268.,
      3471988., 4851534., 4986462., 5122542., 5259774., 3276820., 3367540.,
      3459028., 3551284., 4963566., 5100798., 5239182., 5378718., 3351508.,
      3443764., 3536788., 3630580., 5075598., 5215134., 5355822., 5497662.,
      3426196., 3519988., 3614548., 3709876., 3725140., 3820468., 3916564.,
      4013428., 1063260., 1093500., 1123996., 1154748., 2147320., 2208312.,
      2269816., 2331832., 2344568., 2406584., 2469112., 2532152., 3549076.,
      3642868., 3737428., 3832756., 2394360., 2457400., 2520952., 2585016.,
      3623764., 3719092., 3815188., 3912052., 2444152., 2508216., 2572792.,
      2637880., 3698452., 3795316., 3892948., 3991348., 2493944., 2559032.,
      2624632., 2690744., 2703480., 2769592., 2836216., 2903352., 1616570.,
      1663850., 1711514., 1759562., 3264340., 3359668., 3455764., 3552628.,
      3575572., 3672436., 3770068., 3868468., 5411694., 5558142., 5705742.,
      5854494., 3650260., 3748660., 3847828., 3947764., 5523726., 5672478.,
      5822382., 5973438., 3724948., 3824884., 3925588., 4027060., 5635758.,
      5786814., 5939022., 6092382., 3799636., 3901108., 4003348., 4106356.,
      4129300., 4232308., 4336084., 4440628., 1177500., 1210300., 1243356.,
      1276668., 2375800., 2441912., 2508536., 2575672., 2593528., 2660664.,
      2728312., 2796472., 3922516., 4023988., 4126228., 4229236., 2643320.,
      2711480., 2780152., 2849336., 3997204., 4100212., 4203988., 4308532.,
      2693112., 2762296., 2831992., 2902200., 4071892., 4176436., 4281748.,
      4387828., 2742904., 2813112., 2883832., 2955064., 2972920., 3044152.,
      3115896., 3188152., 1716700., 1752060., 1787676., 1823548., 3464440.,
      3535672., 3607416., 3679672., 3682168., 3754424., 3827192., 3900472.,
      5570836., 5679988., 5789908., 5900596., 3752440., 3825720., 3899512.,
      3973816., 5676244., 5786932., 5898388., 6010612., 3822712., 3897016.,
      3971832., 4047160., 5781652., 5893876., 6006868., 6120628., 3892984.,
      3968312., 4044152., 4120504., 4123000., 4199352., 4276216., 4353592.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x7x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      174.,     446.,     846.,     190.,     590.,     1118.,
      1774.,    540.,     1596.,    2908.,    4476.,    1884.,    3452.,
      5276.,    7356.,    3578.,    6314.,    9434.,    12938.,   6300.,
      8380.,    10716.,   13308.,   9692.,    12284.,   15132.,   18236.,
      6974.,    8398.,    9950.,    11630.,   9182.,    10862.,   12670.,
      14606.,   0.,       0.,       0.,       0.,       830.,     2254.,
      3806.,    5486.,    990.,     2670.,    4478.,    6414.,    7260.,
      10876.,   14748.,   18876.,   8604.,    12732.,   17116.,   21756.,
      21338.,   27914.,   34874.,   42218.,   23260.,   27900.,   32796.,
      37948.,   26652.,   31804.,   37212.,   42876.,   18014.,   20718.,
      23550.,   26510.,   20222.,   23182.,   26270.,   29486.,   0.,
      0.,       0.,       0.,       2140.,    5756.,    9628.,    13756.,
      5532.,    9660.,    14044.,   18684.,   21624.,   30392.,   39672.,
      49464.,   30456.,   40248.,   50552.,   61368.,   62548.,   78004.,
      94228.,   111220.,  59768.,   70584.,   81912.,   93752.,   72696.,
      84536.,   96888.,   109752.,  45724.,   51900.,   58332.,   65020.,
      53212.,   59900.,   66844.,   74044.,   0.,       0.,       0.,
      0.,       19100.,   25276.,   31708.,   38396.,   22492.,   29180.,
      36124.,   43324.,   65784.,   79672.,   94072.,   108984.,  74616.,
      89528.,   104952.,  120888.,  144148.,  167284.,  191188.,  215860.,
      124408.,  140344.,  156792.,  173752.,  137336.,  154296.,  171768.,
      189752.,  83164.,   91900.,   100892.,  110140.,  90652.,   99900.,
      109404.,  119164.,  0.,       0.,       0.,       0.,       36060.,
      44796.,   53788.,   63036.,   39452.,   48700.,   58204.,   67964.,
      109944.,  128952.,  148472.,  168504.,  118776.,  138808.,  159352.,
      180408.,  225748.,  256564.,  288148.,  320500.,  189048.,  210104.,
      231672.,  253752.,  201976.,  224056.,  246648.,  269752.,  120604.,
      131900.,  143452.,  155260.,  128092.,  139900.,  151964.,  164284.,
      0.,       0.,       0.,       0.,       48990.,   53742.,   58622.,
      63630.,   52222.,   57230.,   62366.,   67630.,   119964.,  130236.,
      140764.,  151548.,  127452.,  138236.,  149276.,  160572.,  214970.,
      231530.,  248474.,  265802.,  162588.,  173884.,  185436.,  197244.,
      172124.,  183932.,  195996.,  208316.,  95870.,   101902.,  108062.,
      114350.,  101150.,  107438.,  113854.,  120398.,  0.,       0.,
      0.,       0.,       65150.,   71182.,   77342.,   83630.,   68382.,
      74670.,   81086.,   87630.,   157404.,  170236.,  183324.,  196668.,
      164892.,  178236.,  191836.,  205692.,  278810.,  299210.,  319994.,
      341162.,  210268.,  224124.,  238236.,  252604.,  219804.,  234172.,
      248796.,  263676.,  122270.,  129582.,  137022.,  144590.,  127550.,
      135118.,  142814.,  150638.,  0.,       0.,       0.,       0.,
      990.,     2670.,    4478.,    6414.,    7294.,    9230.,    11294.,
      13486.,   14748.,   18876.,   23260.,   27900.,   28380.,   33020.,
      37916.,   43068.,   43322.,   50666.,   58394.,   66506.,   32796.,
      37948.,   43356.,   49020.,   48476.,   54140.,   60060.,   66236.,
      26366.,   29326.,   32414.,   35630.,   34718.,   37934.,   41278.,
      44750.,   0.,       0.,       0.,       0.,       32510.,   35470.,
      38558.,   41774.,   38814.,   42030.,   45374.,   48846.,   82908.,
      89596.,   96540.,   103740.,  96540.,   103740.,  111196.,  118908.,
      153242.,  164426.,  175994.,  187946.,  111196.,  118908.,  126876.,
      135100.,  126876.,  135100.,  143580.,  152316.,  68126.,   72366.,
      76734.,   81230.,   76478.,   80974.,   85598.,   90350.,   0.,
      0.,       0.,       0.,       65500.,   72188.,   79132.,   86332.,
      81180.,   88380.,   95836.,   103548.,  172920.,  187832.,  203256.,
      219192.,  206328.,  222264.,  238712.,  255672.,  326356.,  351028.,
      376468.,  402676.,  235640.,  252600.,  270072.,  288056.,  273144.,
      291128.,  309624.,  328632.,  145948.,  155196.,  164700.,  174460.,
      165724.,  175484.,  185500.,  195772.,  0.,       0.,       0.,
      0.,       143900.,  153148.,  162652.,  172412.,  159580.,  169340.,
      179356.,  189628.,  339960.,  359992.,  380536.,  401592.,  373368.,
      394424.,  415992.,  438072.,  592276.,  624628.,  657748.,  691636.,
      423160.,  445240.,  467832.,  490936.,  460664.,  483768.,  507384.,
      531512.,  244828.,  256636.,  268700.,  281020.,  264604.,  276924.,
      289500.,  302332.,  0.,       0.,       0.,       0.,       222300.,
      234108.,  246172.,  258492.,  237980.,  250300.,  262876.,  275708.,
      507000.,  532152.,  557816.,  583992.,  540408.,  566584.,  593272.,
      620472.,  858196.,  898228.,  939028.,  980596.,  610680.,  637880.,
      665592.,  693816.,  648184.,  676408.,  705144.,  734392.,  343708.,
      358076.,  372700.,  387580.,  363484.,  378364.,  393500.,  408892.,
      0.,       0.,       0.,       0.,       142110.,  148398.,  154814.,
      161358.,  151486.,  158030.,  164702.,  171502.,  318492.,  331836.,
      345436.,  359292.,  338268.,  352124.,  366236.,  380604.,  531194.,
      552362.,  573914.,  595850.,  373404.,  387772.,  402396.,  417276.,
      395228.,  410108.,  425244.,  440636.,  207422.,  214990.,  222686.,
      230510.,  218846.,  226670.,  234622.,  242702.,  0.,       0.,
      0.,       0.,       188990.,  196558.,  204254.,  212078.,  198366.,
      206190.,  214142.,  222222.,  417372.,  433276.,  449436.,  465852.,
      437148.,  453564.,  470236.,  487164.,  687194.,  712202.,  737594.,
      763370.,  482524.,  499452.,  516636.,  534076.,  504348.,  521788.,
      539484.,  557436.,  264542.,  273390.,  282366.,  291470.,  275966.,
      285070.,  294302.,  303662.,  0.,       0.,       0.,       0.,
      1950.,    5166.,    8510.,    11982.,   14398.,   17870.,   21470.,
      25198.,   28956.,   36156.,   43612.,   51324.,   54876.,   62588.,
      70556.,   78780.,   83066.,   95018.,   107354.,  120074.,  59292.,
      67516.,   75996.,   84732.,   87260.,   95996.,   104988.,  114236.,
      45758.,   50254.,   54878.,   59630.,   60254.,   65006.,   69886.,
      74894.,   0.,       0.,       0.,       0.,       64190.,   68686.,
      73310.,   78062.,   76638.,   81390.,   86270.,   91278.,   158556.,
      168316.,  178332.,  188604.,  184476.,  194748.,  205276.,  216060.,
      285146.,  300938.,  317114.,  333674.,  199132.,  209916.,  220956.,
      232252.,  227100.,  238396.,  249948.,  261756.,  118238.,  124014.,
      129918.,  135950.,  132734.,  138766.,  144926.,  151214.,  0.,
      0.,       0.,       0.,       128860.,  138620.,  148636.,  158908.,
      156828.,  167100.,  177628.,  188412.,  324216.,  345272.,  366840.,
      388920.,  382200.,  404280.,  426872.,  449976.,  590164.,  624052.,
      658708.,  694132.,  411512.,  434616.,  458232.,  482360.,  473592.,
      497720.,  522360.,  547512.,  246172.,  258492.,  271068.,  283900.,
      278236.,  291068.,  304156.,  317500.,  0.,       0.,       0.,
      0.,       268700.,  281020.,  293596.,  306428.,  296668.,  309500.,
      322588.,  335932.,  614136.,  640312.,  667000.,  694200.,  672120.,
      699320.,  727032.,  755256.,  1040404., 1081972., 1124308., 1167412.,
      721912.,  750136.,  778872.,  808120.,  783992.,  813240.,  843000.,
      873272.,  406492.,  421372.,  436508.,  451900.,  438556.,  453948.,
      469596.,  485500.,  0.,       0.,       0.,       0.,       408540.,
      423420.,  438556.,  453948.,  436508.,  451900.,  467548.,  483452.,
      904056.,  935352.,  967160.,  999480.,  962040.,  994360.,  1027192.,
      1060536., 1490644., 1539892., 1589908., 1640692., 1032312., 1065656.,
      1099512., 1133880., 1094392., 1128760., 1163640., 1199032., 566812.,
      584252.,  601948.,  619900.,  598876.,  616828.,  635036.,  653500.,
      0.,       0.,       0.,       0.,       235230.,  243054.,  251006.,
      259086.,  250750.,  258830.,  267038.,  275374.,  517020.,  533436.,
      550108.,  567036.,  549084.,  566012.,  583196.,  600636.,  847418.,
      873194.,  899354.,  925898.,  584220.,  601660.,  619356.,  637308.,
      618332.,  636284.,  654492.,  672956.,  318974.,  328078.,  337310.,
      346670.,  336542.,  345902.,  355390.,  365006.,  0.,       0.,
      0.,       0.,       312830.,  321934.,  331166.,  340526.,  328350.,
      337710.,  347198.,  356814.,  677340.,  696316.,  715548.,  735036.,
      709404.,  728892.,  748636.,  768636.,  1095578., 1125194., 1155194.,
      1185578., 754780.,  774780.,  795036.,  815548.,  788892.,  809404.,
      830172.,  851196.,  406814.,  417198.,  427710.,  438350.,  424382.,
      435022.,  445790.,  456686.,  0.,       0.,       0.,       0.};
  const std::array<int, 4> in_shape = {{3, 7, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  740.,
      786.,  1228., 858.,  1336., 930.,  984.,  244.,  279.,  428.,  295.,
      452.,  311.,  350.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      894.,  972.,  1492., 1024., 1570., 1076., 1162., 1385., 1514., 2322.,
      1592., 2439., 1670., 1811., 1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1828., 1938., 2956., 2010., 3064.,
      2082., 2200., 468.,  535.,  812.,  551.,  836.,  567.,  638.,  952.,
      1094., 1660., 1126., 1708., 1158., 1308., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      1854., 2012., 3052., 2064., 3130., 2116., 2282., 2825., 3074., 4662.,
      3152., 4779., 3230., 3491., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 2916., 3090., 4684., 3162., 4792., 3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  6.,   7.,   20.,  23.,  26.,
      18.,  20.,  14.,  18.,  48.,  58.,  68.,  44.,  50.,  34.,  38.,  98.,
      108., 118., 74.,  80.,  54.,  58.,  148., 158., 168., 104., 110., 48.,
      51.,  118., 125., 132., 76.,  80.,  63.,  66.,  153., 160., 167., 96.,
      100., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,
      43.,  24.,  30.,  30.,  35.,  76.,  87.,  98.,  54.,  60.,  62.,  74.,
      160., 186., 212., 116., 130., 122., 134., 290., 316., 342., 186., 200.,
      182., 194., 420., 446., 472., 256., 270., 112., 119., 254., 269., 284.,
      152., 160., 147., 154., 329., 344., 359., 192., 200., 0.,   0.,   0.,
      0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,  75.,  40.,  50.,  54.,
      63.,  132., 151., 170., 90.,  100., 110., 130., 272., 314., 356., 188.,
      210., 210., 230., 482., 524., 566., 298., 320., 310., 330., 692., 734.,
      776., 408., 430., 176., 187., 390., 413., 436., 228., 240., 231., 242.,
      505., 528., 551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  5696.,  6056.,  9470.,  6624.,  10322.,
      7192.,  7616.,  1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  6904.,  7520.,
      11546., 7928.,  12158., 8336.,  9016.,  10684., 11704., 17955., 12316.,
      18873., 12928., 14044., 8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 14272., 15144., 23102.,
      15712., 23954., 16280., 17216., 3584.,  4116.,  6247.,  4240.,  6433.,
      4364.,  4928.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 19708., 21496.,
      32643., 22108., 33561., 22720., 24604., 14424., 15680., 23786., 16088.,
      24398., 16496., 17816., 21964., 23944., 36315., 24556., 37233., 25168.,
      27244., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 22848.,
      24232., 36734., 24800., 37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  362.,  390.,
      1032., 1104., 1176., 746.,  790.,  347.,  369.,  864.,  916.,  968.,
      563.,  593.,  457.,  479.,  1124., 1176., 1228., 713.,  743.,  0.,
      0.,    0.,    0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,
      308.,  173.,  219.,  219.,  257.,  560.,  644.,  728.,  403.,  449.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  910.,  1002., 2176.,
      2376., 2576., 1406., 1514., 1370., 1462., 3176., 3376., 3576., 1946.,
      2054., 851.,  905.,  1936., 2052., 2168., 1163., 1225., 1121., 1175.,
      2516., 2632., 2748., 1473., 1535., 0.,    0.,    0.,    0.,    0.,
      0.,    0.,    53.,   123.,  252.,  400.,  548.,  293.,  371.,  403.,
      473.,  992.,  1140., 1288., 683.,  761.,  818.,  974.,  2040., 2368.,
      2696., 1426., 1598., 1598., 1754., 3680., 4008., 4336., 2286., 2458.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355., 1441., 3008.,
      3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,   2632.,
      3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,   7432.,
      13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,  24822.,
      19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,  23592.,
      37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,  61182.,
      43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,
      43112.,  44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      14468.,  16660.,  25562.,  17636.,  27026.,  18612.,  21060.,  29768.,
      34664.,  53140.,  36616.,  56068.,  38568.,  43976.,  54248.,  59144.,
      90820.,  62376.,  95668.,  65608.,  71016.,  83900.,  92012.,  141174.,
      96860.,  148446., 101708., 110588., 66152.,  72072.,  110212., 75304.,
      115060., 78536.,  84968.,  101756., 111404., 170262., 116252., 177534.,
      121100., 131516., 78056.,  85000.,  129604., 88232.,  134452., 91464.,
      98920.,  112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      28036.,  32276.,  48986.,  33252.,  50450.,  34228.,  38724.,  56904.,
      65896.,  99988.,  67848.,  102916., 69800.,  79304.,  101864., 110856.,
      168388., 114088., 173236., 117320., 126824., 155324., 169580., 257526.,
      174428., 264798., 179276., 194300., 113768., 123784., 187780., 127016.,
      192628., 130248., 140776., 173180., 188972., 286614., 193820., 293886.,
      198668., 215228., 125672., 136712., 207172., 139944., 212020., 143176.,
      154728., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2620.,  2828.,  7656.,  8200.,  8744.,  5628.,  5964.,  2630.,
      2798.,  6596.,  6996.,  7396.,  4326.,  4558.,  3470.,  3638.,  8596.,
      8996.,  9396.,  5486.,  5718.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  3420.,  4140.,
      9000.,  10568., 12136., 6684.,  7532.,  7020.,  7740.,  16840., 18408.,
      19976., 10924., 11772., 10620., 11340., 24680., 26248., 27816., 15164.,
      16012., 6630.,  7054.,  15108., 16020., 16932., 9094.,  9582.,  8750.,
      9174.,  19668., 20580., 21492., 11534., 12022., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,
      2238.,  2854.,  3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 12460., 13692.,
      28744., 31336., 33928., 17900., 19260., 18620., 19852., 41704., 44296.,
      46888., 24700., 26060., 10630., 11310., 23620., 25044., 26468., 13862.,
      14606., 14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,    80.,    56.,    92.,    119.,   176.,   116.,   156.,   209.,
      272.,   176.,   220.,   200.,   248.,   144.,   224.,   192.,   280.,
      358.,   496.,   312.,   408.,   538.,   688.,   432.,   536.,   512.,
      624.,   384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,
      1078.,  1288.,  832.,   976.,   912.,   1064.,  728.,   932.,   848.,
      1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,
      1616.,  1868.,  1120.,  1272.,  1232.,  1392.,  1978.,  2224.,  1432.,
      1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  1832.,  2084.,
      2048.,  2312.,  3267.,  3672.,  2348.,  2624.,  3717.,  4140.,  2648.,
      2936.,  2912.,  3212.,  1856.,  2040.,  2032.,  2224.,  3178.,  3472.,
      2232.,  2432.,  3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  2736.,
      2960.,  2912.,  3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,
      3472.,  3720.,  3680.,  3936.,  880.,   976.,   1016.,  1116.,  1559.,
      1712.,  1076.,  1180.,  1649.,  1808.,  1136.,  1244.,  1288.,  1400.,
      1808.,  2016.,  2112.,  2328.,  3238.,  3568.,  2232.,  2456.,  3418.,
      3760.,  2352.,  2584.,  2688.,  2928.,  3328.,  3576.,  3632.,  3888.,
      5578.,  5968.,  3832.,  4096.,  5878.,  6280.,  4032.,  4304.,  4368.,
      4648.,  5144.,  5540.,  5648.,  6056.,  8667.,  9288.,  5948.,  6368.,
      9117.,  9756.,  6248.,  6680.,  6800.,  7244.,  4064.,  4344.,  4432.,
      4720.,  6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,
      5232.,  5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,
      7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,
      5232.,  5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,
      5968.,  6096.,  6440.,  6960.,  7312.,  7392.,  7752.,  11278., 11824.,
      7672.,  8040.,  11698., 12256., 7952.,  8328.,  8416.,  8800.,  1712.,
      1872.,  1976.,  2140.,  2999.,  3248.,  2036.,  2204.,  3089.,  3344.,
      2096.,  2268.,  2376.,  2552.,  3472.,  3808.,  4032.,  4376.,  6118.,
      6640.,  4152.,  4504.,  6298.,  6832.,  4272.,  4632.,  4864.,  5232.,
      6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678.,
      11272., 7232.,  7632.,  7824.,  8232.,  9560.,  10148., 10448., 11048.,
      15867., 16776., 10748., 11360., 16317., 17244., 11048., 11672., 11984.,
      12620., 7008.,  7416.,  7632.,  8048.,  11578., 12208., 7832.,  8256.,
      11878., 12520., 8032.,  8464.,  8688.,  9128.,  10664., 11300., 11648.,
      12296., 17667., 18648., 11948., 12608., 18117., 19116., 12248., 12920.,
      13280., 13964., 7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,
      9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 11184., 11664.,
      11872., 12360., 17998., 18736., 12152., 12648., 18418., 19168., 12432.,
      12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  146.,  216.,  158.,  232.,
      440.,  592.,  472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  205.,  252.,  215.,  264.,  512.,  612.,
      536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    9.,    20.,   27.,   40.,   56.,   84.,   96.,   128.,
      136.,  172.,  77.,   96.,   99.,   120.,  99.,   120.,  117.,  140.,
      256.,  304.,  296.,  348.,  336.,  392.,  187.,  216.,  209.,  240.,
      202.,  248.,  246.,  296.,  536.,  640.,  632.,  744.,  728.,  848.,
      402.,  464.,  454.,  520.,  422.,  488.,  466.,  536.,  1016., 1160.,
      1112., 1264., 1208., 1368., 662.,  744.,  714.,  800.,  642.,  728.,
      686.,  776.,  1496., 1680., 1592., 1784., 1688., 1888., 922.,  1024.,
      974.,  1080., 403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076.,
      1032., 1136., 555.,  608.,  585.,  640.,  533.,  588.,  559.,  616.,
      1200., 1316., 1256., 1376., 1312., 1436., 705.,  768.,  735.,  800.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    17.,   36.,   51.,   72.,   104.,  148.,
      176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,  187.,  216.,
      221.,  252.,  464.,  528.,  536.,  604.,  608.,  680.,  323.,  360.,
      361.,  400.,  378.,  440.,  454.,  520.,  952.,  1088., 1112., 1256.,
      1272., 1424., 674.,  752.,  758.,  840.,  758.,  840.,  834.,  920.,
      1752., 1928., 1912., 2096., 2072., 2264., 1094., 1192., 1178., 1280.,
      1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104.,
      1514., 1632., 1598., 1720., 651.,  704.,  693.,  748.,  1448., 1560.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  861.,  924.,
      903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204., 1081., 1152.,
      1127., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,    574.,    382.,    662.,    847.,    1291.,   854.,    1166.,
      1555.,   2047.,   1326.,   1670.,   1510.,   1886.,   1004.,   1628.,
      1372.,   2060.,   2606.,   3686.,   2316.,   3068.,   4022.,   5198.,
      3260.,   4076.,   3884.,   4764.,   2844.,   3788.,   3212.,   4220.,
      5846.,   7406.,   4796.,   5868.,   8222.,   9878.,   6380.,   7516.,
      7004.,   8204.,   5434.,   7042.,   6370.,   8074.,   11097.,  13725.,
      8746.,   10546.,  14661.,  17433.,  11122.,  13018.,  12442.,  14434.,
      8668.,   9868.,   9548.,   10812.,  15350.,  17294.,  11132.,  12460.,
      17726.,  19766.,  12716.,  14108.,  13852.,  15308.,  14170.,  16162.,
      15874.,  17962.,  25353.,  28557.,  18250.,  20434.,  28917.,  32265.,
      20626.,  22906.,  22714.,  25090.,  14492.,  15948.,  15884.,  17404.,
      24854.,  27182.,  17468.,  19052.,  27230.,  29654.,  19052.,  20700.,
      20700.,  22412.,  21452.,  23228.,  22844.,  24684.,  35774.,  38582.,
      25068.,  26972.,  39110.,  42014.,  27292.,  29260.,  28940.,  30972.,
      6854.,   7614.,   7934.,   8726.,   12175.,  13387.,  8406.,   9230.,
      12883.,  14143.,  8878.,   9734.,   10086.,  10974.,  14060.,  15708.,
      16476.,  18188.,  25262.,  27878.,  17420.,  19196.,  26678.,  29390.,
      18364.,  20204.,  21036.,  22940.,  26140.,  28108.,  28556.,  30588.,
      43862.,  46958.,  30140.,  32236.,  46238.,  49430.,  31724.,  33884.,
      34396.,  36620.,  40378.,  43522.,  44386.,  47626.,  68121.,  73053.,
      46762.,  50098.,  71685.,  76761.,  49138.,  52570.,  53530.,  57058.,
      31964.,  34188.,  34892.,  37180.,  53366.,  56846.,  36476.,  38828.,
      55742.,  59318.,  38060.,  40476.,  41244.,  43724.,  49114.,  52642.,
      53890.,  57514.,  82377.,  87885.,  56266.,  59986.,  85941.,  91593.,
      58642.,  62458.,  63802.,  67714.,  37788.,  40268.,  41228.,  43772.,
      62870.,  66734.,  42812.,  45420.,  65246.,  69206.,  44396.,  47068.,
      48092.,  50828.,  54988.,  57788.,  58428.,  61292.,  89150.,  93494.,
      60652.,  63580.,  92486.,  96926.,  62876.,  65868.,  66572.,  69628.,
      13382.,  14654.,  15486.,  16790.,  23503.,  25483.,  15958.,  17294.,
      24211.,  26239.,  16430.,  17798.,  18662.,  20062.,  27116.,  29788.,
      31580.,  34316.,  47918.,  52070.,  32524.,  35324.,  49334.,  53582.,
      33468.,  36332.,  38188.,  41116.,  49436.,  52428.,  53900.,  56956.,
      81878.,  86510.,  55484.,  58604.,  84254.,  88982.,  57068.,  60252.,
      61788.,  65036.,  75322.,  80002.,  82402.,  87178.,  125145., 132381.,
      84778.,  89650.,  128709., 136089., 87154.,  92122.,  94618.,  99682.,
      55260.,  58508.,  60236.,  63548.,  91382.,  96398.,  61820.,  65196.,
      93758.,  98870.,  63404.,  66844.,  68636.,  72140.,  84058.,  89122.,
      91906.,  97066.,  139401., 147213., 94282.,  99538.,  142965., 150921.,
      96658.,  102010., 104890., 110338., 61084.,  64588.,  66572.,  70140.,
      100886., 106286., 68156.,  71788.,  103262., 108758., 69740.,  73436.,
      75484.,  79244.,  88524.,  92348.,  94012.,  97900.,  142526., 148406.,
      96236.,  100188., 145862., 151838., 98460.,  102476., 104204., 108284.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,
      4732.,  3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  1169.,  1461.,
      1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,  1985.,
      2341.,  2093.,  2465.,  1549.,  1921.,  1625.,  2013.,  3902.,  4694.,
      4086.,  4910.,  4270.,  5126.,  2525.,  2961.,  2633.,  3085.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     53.,    137.,   193.,   293.,   398.,
      614.,   710.,   958.,   1022.,  1302.,  581.,   729.,   753.,   917.,
      753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,  2678.,  2582.,
      3022.,  1441.,  1669.,  1613.,  1857.,  1530.,  1890.,  1874.,  2266.,
      4092.,  4908.,  4844.,  5724.,  5596.,  6540.,  3098.,  3586.,  3506.,
      4026.,  3250.,  3770.,  3594.,  4146.,  7852.,  8988.,  8604.,  9804.,
      9356.,  10620., 5138.,  5786.,  5546.,  6226.,  4970.,  5650.,  5314.,
      6026.,  11612., 13068., 12364., 13884., 13116., 14700., 7178.,  7986.,
      7586.,  8426.,  3137.,  3493.,  3341.,  3713.,  7174.,  7934.,  7614.,
      8406.,  8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  4157.,  4593.,
      4361.,  4813.,  9374.,  10294., 9814.,  10766., 10254., 11238., 5517.,
      6017.,  5753.,  6269.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     101.,
      249.,   369.,   533.,   750.,   1094.,  1318.,  1694.,  1886.,  2294.,
      1013.,  1225.,  1313.,  1541.,  1441.,  1669.,  1709.,  1953.,  3590.,
      4094.,  4158.,  4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,
      2906.,  3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,
      11084., 5242.,  5858.,  5906.,  6554.,  5906.,  6554.,  6506.,  7186.,
      13676., 15068., 14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,
      10034., 8906.,  9714.,  9506.,  10346., 19996., 21708., 21260., 23036.,
      22524., 24364., 11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,
      5873.,  11366., 12254., 12062., 12982., 12758., 13710., 6689.,  7173.,
      7053.,  7553.,  6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542.,
      16622., 16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,   4332.,    2796.,    5004.,   6362.,    9866.,    6540.,
      9004.,   11978.,   15866.,   10284.,  13004.,   11724.,   14700.,
      7448.,   12376.,   10328.,   15768.,  19828.,   28372.,   17816.,
      23768.,  31060.,   40372.,   25304.,  31768.,   30232.,   37208.,
      21848.,  29336.,   24728.,   32728.,  45268.,   57652.,   37336.,
      45848.,  64180.,   77332.,   49944.,  58968.,   54872.,   64408.,
      41924.,  54692.,   49316.,   62852.,  86238.,   107118.,  68228.,
      82532.,  114606.,  136638.,  87140.,  102212.,  97604.,   113444.,
      68184.,  77720.,   75160.,   85208.,  120916.,  136372.,  87768.,
      98328.,  139828.,  156052.,  100376., 111448.,  109400.,  120984.,
      111428., 127268.,  124964.,  141572., 199710.,  225198.,  143876.,
      161252., 228078.,  254718.,  162788., 180932.,  179396.,  198308.,
      114520., 126104.,  125592.,  137688., 196564.,  215092.,  138200.,
      150808., 215476.,  234772.,  150808., 163928.,  163928.,  177560.,
      169880., 184024.,  180952.,  195608., 283444.,  305812.,  198680.,
      213848., 310036.,  333172.,  216408., 232088.,  229528.,  245720.,
      54092.,  60140.,   62700.,   69004.,  96218.,   105866.,  66444.,
      73004.,  101834.,  111866.,  70188.,  77004.,   79820.,   86892.,
      110872., 123992.,  130136.,  143768., 199540.,  220372.,  137624.,
      151768., 210772.,  232372.,  145112., 159768.,  166424.,  181592.,
      207192., 222872.,  226456.,  242648., 347860.,  372532.,  239064.,
      255768., 366772.,  392212.,  251672., 268888.,  272984.,  290712.,
      319940., 344996.,  351908.,  377732., 540126.,  579438.,  370820.,
      397412., 568494.,  608958.,  389732., 417092.,  424772.,  452900.,
      253528., 271256.,  276888.,  295128., 423508.,  451252.,  289496.,
      308248., 442420.,  470932.,  302104., 321368.,  327512.,  347288.,
      389444., 417572.,  427556.,  456452., 653598.,  697518.,  446468.,
      476132., 681966.,  727038.,  465380., 495812.,  506564.,  537764.,
      299864., 319640.,  327320.,  347608., 499156.,  529972.,  339928.,
      360728., 518068.,  549652.,  352536., 373848.,  382040.,  403864.,
      437144., 459480.,  464600.,  487448., 708916.,  743572.,  482328.,
      505688., 735508.,  770932.,  500056., 523928.,  529560.,  553944.,
      105804., 115948.,  122604.,  133004., 186074.,  201866.,  126348.,
      137004., 191690.,  207866.,  130092., 141004.,  147916.,  159084.,
      214296., 235608.,  249944.,  271768., 379252.,  412372.,  257432.,
      279768., 390484.,  424372.,  264920., 287768.,  302616.,  325976.,
      392536., 416408.,  428184.,  452568., 650452.,  687412.,  440792.,
      465688., 669364.,  707092.,  453400., 478808.,  491096.,  517016.,
      597956., 635300.,  654500.,  692612., 994014.,  1051758., 673412.,
      712292., 1022382., 1081278., 692324., 731972.,  751940.,  792356.,
      438872., 464792.,  478616.,  505048., 726100.,  766132.,  491224.,
      518168., 745012.,  785812.,  503832., 531288.,  545624.,  573592.,
      667460., 707876.,  730148.,  771332., 1107486., 1169838., 749060.,
      791012., 1135854., 1199358., 767972., 810692.,  833732.,  877220.,
      485208., 513176.,  529048.,  557528., 801748.,  844852.,  541656.,
      570648., 820660.,  864532.,  554264., 583768.,  600152.,  630168.,
      704408., 734936.,  748248.,  779288., 1134388., 1181332., 765976.,
      797528., 1160980., 1208692., 783704., 815768.,  829592.,  862168.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,   1774.,   1454.,   2238.,   430.,    1214.,
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   3212.,   5676.,
      2798.,   4094.,   3134.,   4558.,   1020.,   2844.,   1692.,   3772.,
      6104.,   10520.,  7960.,   12888.,  9816.,   15256.,  7292.,   10140.,
      8476.,   11580.,  4380.,   7484.,   5052.,   8412.,   15384.,  22360.,
      17240.,  24728.,  19096.,  27096.,  13212.,  17340.,  14396.,  18780.,
      7740.,   12124.,  8412.,   13052.,  24664.,  34200.,  26520.,  36568.,
      28376.,  38936.,  19132.,  24540.,  20316.,  25980.,  9070.,   11390.,
      9662.,   12110.,  23244.,  28268.,  24684.,  29964.,  26124.,  31660.,
      15534.,  18366.,  16382.,  19342.,  12030.,  14990.,  12622.,  15710.,
      30444.,  36748.,  31884.,  38444.,  33324.,  40140.,  19774.,  23246.,
      20622.,  24222.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      350.,    1006.,   1454.,   2238.,   2988.,   4684.,   5452.,   7404.,
      7916.,   10124.,  4510.,   5678.,   5870.,   7166.,   5870.,   7166.,
      6974.,   8398.,   15308.,  18284.,  17772.,  21004.,  20236.,  23724.,
      11310.,  13118.,  12670.,  14606.,  11900.,  14748.,  14620.,  17724.,
      31960.,  38424.,  37912.,  44888.,  43864.,  51352.,  24316.,  28188.,
      27548.,  31676.,  25500.,  29628.,  28220.,  32604.,  61720.,  70744.,
      67672.,  77208.,  73624.,  83672.,  40476.,  45628.,  43708.,  49116.,
      39100.,  44508.,  41820.,  47484.,  91480.,  103064., 97432.,  109528.,
      103384., 115992., 56636.,  63068.,  59868.,  66556.,  24750.,  27582.,
      26366.,  29326.,  56652.,  62700.,  60140.,  66444.,  63628.,  70188.,
      34286.,  37630.,  36158.,  39630.,  32830.,  36302.,  34446.,  38046.,
      74092.,  81420.,  77580.,  85164.,  81068.,  88908.,  43646.,  47630.,
      45518.,  49630.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      670.,    1838.,   2798.,   4094.,   5676.,   8396.,   10188.,  13164.,
      14700.,  17932.,  7902.,   9582.,   10286.,  12094.,  11310.,  13118.,
      13438.,  15374.,  28236.,  32236.,  32748.,  37004.,  37260.,  41772.,
      19822.,  22142.,  22206.,  24654.,  22780.,  26652.,  27548.,  31676.,
      57816.,  66328.,  67864.,  76888.,  77912.,  87448.,  41340.,  46236.,
      46620.,  51772.,  46620.,  51772.,  51388.,  56796.,  108056., 119128.,
      118104., 129688., 128152., 140248., 67740.,  73916.,  73020.,  79452.,
      70460.,  76892.,  75228.,  81916.,  158296., 171928., 168344., 182488.,
      178392., 193048., 94140.,  101596., 99420.,  107132., 40430.,  43774.,
      43070.,  46542.,  90060.,  97132.,  95596.,  102924., 101132., 108716.,
      53038.,  56894.,  55934.,  59918.,  53630.,  57614.,  56270.,  60382.,
      117740., 126092., 123276., 131884., 128812., 137676., 67518.,  72014.,
      70414.,  75038.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 10508., 10944.,
      11388., 11840., 11196., 11648., 12108., 12576., 17542., 18232., 18934.,
      19648., 12300., 12768., 13244., 13728., 19198., 19912., 20638., 21376.,
      13404., 13888., 14380., 14880., 14220., 14720., 15228., 15744., 3334.,
      3520.,  3710.,  3904.,  3870.,  4064.,  4262.,  4464.,  5939.,  6236.,
      6539.,  6848.,  4102.,  4304.,  4510.,  4720.,  6287.,  6596.,  6911.,
      7232.,  4334.,  4544.,  4758.,  4976.,  4934.,  5152.,  5374.,  5600.,
      6828.,  7232.,  7644.,  8064.,  8028.,  8448.,  8876.,  9312.,  12310.,
      12952., 13606., 14272., 8492.,  8928.,  9372.,  9824.,  13006., 13672.,
      14350., 15040., 8956.,  9408.,  9868.,  10336., 10284., 10752., 11228.,
      11712., 12828., 13312., 13804., 14304., 14028., 14528., 15036., 15552.,
      21550., 22312., 23086., 23872., 14812., 15328., 15852., 16384., 22726.,
      23512., 24310., 25120., 15596., 16128., 16668., 17216., 16924., 17472.,
      18028., 18592., 19802., 20576., 21362., 22160., 21794., 22592., 23402.,
      24224., 33453., 34668., 35901., 37152., 22970., 23792., 24626., 25472.,
      35217., 36468., 37737., 39024., 24146., 24992., 25850., 26720., 26330.,
      27200., 28082., 28976., 15708., 16256., 16812., 17376., 17164., 17728.,
      18300., 18880., 26254., 27112., 27982., 28864., 17948., 18528., 19116.,
      19712., 27430., 28312., 29206., 30112., 18732., 19328., 19932., 20544.,
      20316., 20928., 21548., 22176., 24122., 24992., 25874., 26768., 26498.,
      27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674., 28592.,
      29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792., 30746.,
      31712., 31418., 32384., 33362., 34352., 18588., 19200., 19820., 20448.,
      20300., 20928., 21564., 22208., 30958., 31912., 32878., 33856., 21084.,
      21728., 22380., 23040., 32134., 33112., 34102., 35104., 21868., 22528.,
      23196., 23872., 23708., 24384., 25068., 25760., 27148., 27840., 28540.,
      29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198., 47296.,
      29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024., 31068.,
      31808., 32556., 33312., 32908., 33664., 34428., 35200., 6534.,  6848.,
      7166.,  7488.,  7582.,  7904.,  8230.,  8560.,  11507., 11996., 12491.,
      12992., 7814.,  8144.,  8478.,  8816.,  11855., 12356., 12863., 13376.,
      8046.,  8384.,  8726.,  9072.,  9158.,  9504.,  9854.,  10208., 13228.,
      13888., 14556., 15232., 15452., 16128., 16812., 17504., 23446., 24472.,
      25510., 26560., 15916., 16608., 17308., 18016., 24142., 25192., 26254.,
      27328., 16380., 17088., 17804., 18528., 18732., 19456., 20188., 20928.,
      24348., 25088., 25836., 26592., 26572., 27328., 28092., 28864., 40366.,
      41512., 42670., 43840., 27356., 28128., 28908., 29696., 41542., 42712.,
      43894., 45088., 28140., 28928., 29724., 30528., 30492., 31296., 32108.,
      32928., 37082., 38240., 39410., 40592., 40610., 41792., 42986., 44192.,
      61677., 63468., 65277., 67104., 41786., 42992., 44210., 45440., 63441.,
      65268., 67113., 68976., 42962., 44192., 45434., 46688., 46682., 47936.,
      49202., 50480., 27228., 28032., 28844., 29664., 29708., 30528., 31356.,
      32192., 45070., 46312., 47566., 48832., 30492., 31328., 32172., 33024.,
      46246., 47512., 48790., 50080., 31276., 32128., 32988., 33856., 33884.,
      34752., 35628., 36512., 41402., 42656., 43922., 45200., 45314., 46592.,
      47882., 49184., 68733., 70668., 72621., 74592., 46490., 47792., 49106.,
      50432., 70497., 72468., 74457., 76464., 47666., 48992., 50330., 51680.,
      51770., 53120., 54482., 55856., 30108., 30976., 31852., 32736., 32844.,
      33728., 34620., 35520., 49774., 51112., 52462., 53824., 33628., 34528.,
      35436., 36352., 50950., 52312., 53686., 55072., 34412., 35328., 36252.,
      37184., 37276., 38208., 39148., 40096., 43788., 44736., 45692., 46656.,
      46524., 47488., 48460., 49440., 70534., 71992., 73462., 74944., 47628.,
      48608., 49596., 50592., 72190., 73672., 75166., 76672., 48732., 49728.,
      50732., 51744., 51596., 52608., 53628., 54656.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  450.,   584.,   722.,   864.,   490.,
      632.,   778.,   928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,
      2204.,  2528.,  1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,
      1664.,  1226.,  1400.,  1578.,  1760.,  549.,   620.,   693.,   768.,
      585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,  1888.,  1502.,
      1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,  949.,   1036.,
      1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  729.,   820.,   913.,
      1008.,  765.,   860.,   957.,   1056.,  1854.,  2048.,  2246.,  2448.,
      1942.,  2144.,  2350.,  2560.,  2030.,  2240.,  2454.,  2672.,  1209.,
      1316.,  1425.,  1536.,  1261.,  1372.,  1485.,  1600.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     17.,
      36.,    57.,    80.,    85.,    108.,   133.,   160.,   174.,   224.,
      278.,   336.,   326.,   384.,   446.,   512.,   478.,   544.,   614.,
      688.,   273.,   308.,   345.,   384.,   357.,   396.,   437.,   480.,
      357.,   396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,
      1024.,  1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,
      1454.,  1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,
      960.,   722.,   808.,   898.,   992.,   890.,   984.,   1082.,  1184.,
      1948.,  2144.,  2348.,  2560.,  2316.,  2528.,  2748.,  2976.,  2684.,
      2912.,  3148.,  3392.,  1490.,  1608.,  1730.,  1856.,  1690.,  1816.,
      1946.,  2080.,  1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,
      2144.,  3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,
      4524.,  4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,
      2856.,  3026.,  3200.,  2402.,  2568.,  2738.,  2912.,  2570.,  2744.,
      2922.,  3104.,  5628.,  5984.,  6348.,  6720.,  5996.,  6368.,  6748.,
      7136.,  6364.,  6752.,  7148.,  7552.,  3490.,  3688.,  3890.,  4096.,
      3690.,  3896.,  4106.,  4320.,  1525.,  1612.,  1701.,  1792.,  1625.,
      1716.,  1809.,  1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,
      4102.,  4304.,  3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,
      2432.,  2233.,  2340.,  2449.,  2560.,  2025.,  2132.,  2241.,  2352.,
      2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,
      5024.,  5262.,  5504.,  5006.,  5248.,  5494.,  5744.,  2697.,  2820.,
      2945.,  3072.,  2813.,  2940.,  3069.,  3200.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     33.,    68.,
      105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,   502.,
      592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,  1200.,
      481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,   693.,
      748.,   805.,   864.,   825.,   884.,   945.,   1008.,  1734.,  1856.,
      1982.,  2112.,  2014.,  2144.,  2278.,  2416.,  2294.,  2432.,  2574.,
      2720.,  1221.,  1292.,  1365.,  1440.,  1369.,  1444.,  1521.,  1600.,
      1394.,  1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,
      3808.,  4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,
      5388.,  5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,
      3360.,  2874.,  3032.,  3194.,  3360.,  3170.,  3336.,  3506.,  3680.,
      6668.,  7008.,  7356.,  7712.,  7292.,  7648.,  8012.,  8384.,  7916.,
      8288.,  8668.,  9056.,  4186.,  4376.,  4570.,  4768.,  4514.,  4712.,
      4914.,  5120.,  4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,
      5280.,  9788.,  10208., 10636., 11072., 10412., 10848., 11292., 11744.,
      11036., 11488., 11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,
      6392.,  6634.,  6880.,  2501.,  2604.,  2709.,  2816.,  2665.,  2772.,
      2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,  6144.,  6374.,
      6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,  3648.,
      3465.,  3588.,  3713.,  3840.,  3321.,  3444.,  3569.,  3696.,  3485.,
      3612.,  3741.,  3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,
      8174.,  8448.,  7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,
      4608.,  4365.,  4508.,  4653.,  4800.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      5527.,   6451.,   7423.,   8443.,   4818.,   5466.,   6146.,   6858.,
      5506.,   6218.,   6962.,   7738.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      10020.,  11828.,  13700.,  15636.,  11396.,  13332.,  15332.,  17396.,
      21134.,  24134.,  27230.,  30422.,  17636.,  19700.,  21828.,  24020.,
      30494.,  33686.,  36974.,  40358.,  23876.,  26068.,  28324.,  30644.,
      26276.,  28596.,  30980.,  33428.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      32932.,  35252.,  37636.,  40084.,  36356.,  38804.,  41316.,  43892.,
      58574.,  62342.,  66206.,  70166.,  42596.,  45172.,  47812.,  50516.,
      67934.,  71894.,  75950.,  80102.,  48836.,  51540.,  54308.,  57140.,
      53284.,  56116.,  59012.,  61972.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      55844.,  58676.,  61572.,  64532.,  61316.,  64276.,  67300.,  70388.,
      96014.,  100550., 105182., 109910., 67556.,  70644.,  73796.,  77012.,
      105374., 110102., 114926., 119846., 73796.,  77012.,  80292.,  83636.,
      80292.,  83636.,  87044.,  90516.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.,
      26306.,  27786.,  29298.,  30842.,  30578.,  32122.,  33698.,  35306.,
      46927.,  49291.,  51703.,  54163.,  32418.,  34026.,  35666.,  37338.,
      49687.,  52147.,  54655.,  57211.,  34258.,  35930.,  37634.,  39370.,
      39042.,  40778.,  42546.,  44346.,  53828.,  57044.,  60324.,  63668.,
      63396.,  66740.,  70148.,  73620.,  97214.,  102326., 107534., 112838.,
      67076.,  70548.,  74084.,  77684.,  102734., 108038., 113438., 118934.,
      70756.,  74356.,  78020.,  81748.,  81348.,  85076.,  88868.,  92724.,
      101668., 105524., 109444., 113428., 111236., 115220., 119268., 123380.,
      170894., 176966., 183134., 189398., 117476., 121588., 125764., 130004.,
      180254., 186518., 192878., 199334., 123716., 127956., 132260., 136628.,
      134308., 138676., 143108., 147604., 156886., 163054., 169318., 175678.,
      172774., 179134., 185590., 192142., 265221., 274905., 284733., 294705.,
      182134., 188686., 195334., 202078., 279261., 289233., 299349., 309609.,
      191494., 198238., 205078., 212014., 208918., 215854., 222886., 230014.,
      124580., 128948., 133380., 137876., 136196., 140692., 145252., 149876.,
      208334., 215174., 222110., 229142., 142436., 147060., 151748., 156500.,
      217694., 224726., 231854., 239078., 148676., 153428., 158244., 163124.,
      161316., 166196., 171140., 176148., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      147492., 152372., 157316., 162324., 161156., 166164., 171236., 176372.,
      245774., 253382., 261086., 268886., 167396., 172532., 177732., 182996.,
      255134., 262934., 270830., 278822., 173636., 178900., 184228., 189620.,
      188324., 193716., 199172., 204692., 215812., 221332., 226916., 232564.,
      229476., 235124., 240836., 246612., 350174., 358742., 367406., 376166.,
      238276., 244052., 249892., 255796., 363374., 372134., 380990., 389942.,
      247076., 252980., 258948., 264980., 261764., 267796., 273892., 280052.,
      51650.,  54154.,  56690.,  59258.,  60018.,  62586.,  65186.,  67818.,
      91087.,  94987.,  98935.,  102931., 61858.,  64490.,  67154.,  69850.,
      93847.,  97843.,  101887., 105979., 63698.,  66394.,  69122.,  71882.,
      72578.,  75338.,  78130.,  80954.,  104516., 109780., 115108., 120500.,
      122276., 127668., 133124., 138644., 185534., 193718., 201998., 210374.,
      125956., 131476., 137060., 142708., 191054., 199430., 207902., 216470.,
      129636., 135284., 140996., 146772., 148420., 154196., 160036., 165940.,
      193316., 199220., 205188., 211220., 211076., 217108., 223204., 229364.,
      320654., 329798., 339038., 348374., 217316., 223476., 229700., 235988.,
      330014., 339350., 348782., 358310., 223556., 229844., 236196., 242612.,
      242340., 248756., 255236., 261780., 294358., 303598., 312934., 322366.,
      322534., 331966., 341494., 351118., 489861., 504153., 518589., 533169.,
      331894., 341518., 351238., 361054., 503901., 518481., 533205., 548073.,
      341254., 351070., 360982., 370990., 370966., 380974., 391078., 401278.,
      216228., 222644., 229124., 235668., 236036., 242580., 249188., 255860.,
      358094., 368006., 378014., 388118., 242276., 248948., 255684., 262484.,
      367454., 377558., 387758., 398054., 248516., 255316., 262180., 269108.,
      269348., 276276., 283268., 290324., 328726., 338734., 348838., 359038.,
      359974., 370174., 380470., 390862., 546021., 561465., 577053., 592785.,
      369334., 379726., 390214., 400798., 560061., 575793., 591669., 607689.,
      378694., 389278., 399958., 410734., 411478., 422254., 433126., 444094.,
      239140., 246068., 253060., 260116., 260996., 268052., 275172., 282356.,
      395534., 406214., 416990., 427862., 267236., 274420., 281668., 288980.,
      404894., 415766., 426734., 437798., 273476., 280788., 288164., 295604.,
      296356., 303796., 311300., 318868., 348420., 355988., 363620., 371316.,
      370276., 377972., 385732., 393556., 561374., 573014., 584750., 596582.,
      379076., 386900., 394788., 402740., 574574., 586406., 598334., 610358.,
      387876., 395828., 403844., 411924., 410756., 418836., 426980., 435188.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  125.,   305.,   501.,   713.,   149.,   361.,   589.,   833.,
      962.,   1418.,  1906.,  2426.,  1138.,  1658.,  2210.,  2794.,  1314.,
      1898.,  2514.,  3162.,  1245.,  1553.,  1877.,  2217.,  1397.,  1737.,
      2093.,  2465.,  298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,
      2162.,  2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,
      4260.,  5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,
      4610.,  5386.,  6194.,  1818.,  2562.,  3338.,  4146.,  2122.,  2930.,
      3770.,  4642.,  6852.,  8532.,  10276., 12084., 7716.,  9524.,  11396.,
      13332., 8580.,  10516., 12516., 14580., 6106.,  7106.,  8138.,  9202.,
      6666.,  7730.,  8826.,  9954.,  3338.,  4402.,  5498.,  6626.,  3642.,
      4770.,  5930.,  7122.,  11172., 13492., 15876., 18324., 12036., 14484.,
      16996., 19572., 12900., 15476., 18116., 20820., 8906.,  10226., 11578.,
      12962., 9466.,  10850., 12266., 13714., 4253.,  4817.,  5397.,  5993.,
      4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490., 14778., 11698.,
      12986., 14306., 15658., 12386., 13738., 15122., 16538., 7421.,  8113.,
      8821.,  9545.,  7829.,  8553.,  9293.,  10049., 5653.,  6377.,  7117.,
      7873.,  5933.,  6689.,  7461.,  8249.,  14450., 15994., 17570., 19178.,
      15138., 16746., 18386., 20058., 15826., 17498., 19202., 20938., 9461.,
      10313., 11181., 12065., 9869.,  10753., 11653., 12569., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     101.,
      249.,   413.,   593.,   637.,   817.,   1013.,  1225.,  1298.,  1690.,
      2114.,  2570.,  2498.,  2954.,  3442.,  3962.,  3698.,  4218.,  4770.,
      5354.,  2117.,  2393.,  2685.,  2993.,  2781.,  3089.,  3413.,  3753.,
      2781.,  3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,
      8010.,  8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538.,
      11410., 12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,
      7553.,  5610.,  6290.,  7002.,  7746.,  6938.,  7682.,  8458.,  9266.,
      15204., 16756., 18372., 20052., 18116., 19796., 21540., 23348., 21028.,
      22836., 24708., 26644., 11690., 12626., 13594., 14594., 13274., 14274.,
      15306., 16370., 12250., 13250., 14282., 15346., 13578., 14642., 15738.,
      16866., 29764., 31956., 34212., 36532., 32676., 34996., 37380., 39828.,
      35588., 38036., 40548., 43124., 19610., 20866., 22154., 23474., 21194.,
      22514., 23866., 25250., 18890., 20210., 21562., 22946., 20218., 21602.,
      23018., 24466., 44324., 47156., 50052., 53012., 47236., 50196., 53220.,
      56308., 50148., 53236., 56388., 59604., 27530., 29106., 30714., 32354.,
      29114., 30754., 32426., 34130., 12029., 12721., 13429., 14153., 12821.,
      13545., 14285., 15041., 27586., 29066., 30578., 32122., 29298., 30842.,
      32418., 34026., 31010., 32618., 34258., 35930., 16733., 17553., 18389.,
      19241., 17653., 18505., 19373., 20257., 15989., 16841., 17709., 18593.,
      16781., 17665., 18565., 19481., 36146., 37946., 39778., 41642., 37858.,
      39722., 41618., 43546., 39570., 41498., 43458., 45450., 21333., 22313.,
      23309., 24321., 22253., 23265., 24293., 25337., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     197.,   473.,
      765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,  3842.,
      4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,  9386.,
      3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,  5437.,
      5873.,  6325.,  6793.,  6485.,  6953.,  7437.,  7937.,  13634., 14602.,
      15602., 16634., 15858., 16890., 17954., 19050., 18082., 19178., 20306.,
      21466., 9629.,  10193., 10773., 11369., 10805., 11401., 12013., 12641.,
      10922., 11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876.,
      29940., 32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116.,
      42500., 44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226.,
      26546., 22682., 23938., 25226., 26546., 25034., 26354., 27706., 29090.,
      52676., 55380., 58148., 60980., 57636., 60468., 63364., 66324., 62596.,
      65556., 68580., 71668., 33114., 34626., 36170., 37746., 35722., 37298.,
      38906., 40546., 34442., 36018., 37626., 39266., 36794., 38434., 40106.,
      41810., 77476., 80820., 84228., 87700., 82436., 85908., 89444., 93044.,
      87396., 90996., 94660., 98388., 46154., 47986., 49850., 51746., 48762.,
      50658., 52586., 54546., 19805., 20625., 21461., 22313., 21109., 21961.,
      22829., 23713., 44162., 45898., 47666., 49466., 46898., 48698., 50530.,
      52394., 49634., 51498., 53394., 55322., 26045., 26993., 27957., 28937.,
      27477., 28457., 29453., 30465., 26325., 27305., 28301., 29313., 27629.,
      28641., 29669., 30713., 57842., 59898., 61986., 64106., 60578., 62698.,
      64850., 67034., 63314., 65498., 67714., 69962., 33205., 34313., 35437.,
      36577., 34637., 35777., 36933., 38105., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,    10876.,   14748.,   18876.,   8604.,    12732.,   17116.,
      21756.,   21338.,   27914.,   34874.,   42218.,   23260.,   27900.,
      32796.,   37948.,   43322.,   50666.,   58394.,   66506.,   37916.,
      43068.,   48476.,   54140.,   43356.,   49020.,   54940.,   61116.,
      23992.,   33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,   69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,   99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848.,  118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,   92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080.,  166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472.,  189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328.,  224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276.,  176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812.,  319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828.,  341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540.,  389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176.,  279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536.,  464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832.,  401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592.,  431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452.,  457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996.,  767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868.,  658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436.,  700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      662200.,  689912.,  718136.,  746872.,  705848.,  734584.,  763832.,
      793592.,  1106356., 1150228., 1194868., 1240276., 776120.,  805880.,
      836152.,  866936.,  1211764., 1257172., 1303348., 1350292., 846392.,
      877176.,  908472.,  940280.,  898232.,  930040.,  962360.,  995192.,
      208988.,  220796.,  232860.,  245180.,  243100.,  255420.,  267996.,
      280828.,  373082.,  391946.,  411194.,  430826.,  257756.,  270588.,
      283676.,  297020.,  395066.,  414698.,  434714.,  455114.,  272412.,
      285756.,  299356.,  313212.,  310620.,  324476.,  338588.,  352956.,
      427448.,  453112.,  479288.,  505976.,  503864.,  530552.,  557752.,
      585464.,  772660.,  813460.,  855028.,  897364.,  533176.,  560888.,
      589112.,  617848.,  816628.,  858964.,  902068.,  945940.,  562488.,
      591224.,  620472.,  650232.,  647096.,  676856.,  707128.,  737912.,
      809528.,  840312.,  871608.,  903416.,  885944.,  917752.,  950072.,
      982904.,  1361140., 1409620., 1458868., 1508884., 935736.,  968568.,
      1001912., 1035768., 1435828., 1485844., 1536628., 1588180., 985528.,
      1019384., 1053752., 1088632., 1070136., 1105016., 1140408., 1176312.,
      1248980., 1298228., 1348244., 1399028., 1375892., 1426676., 1478228.,
      1530548., 2112174., 2189502., 2267982., 2347614., 1450580., 1502900.,
      1555988., 1609844., 2224206., 2303838., 2384622., 2466558., 1525268.,
      1579124., 1633748., 1689140., 1664468., 1719860., 1776020., 1832948.,
      992312.,  1027192., 1062584., 1098488., 1085112., 1121016., 1157432.,
      1194360., 1659892., 1714516., 1769908., 1826068., 1134904., 1171832.,
      1209272., 1247224., 1734580., 1790740., 1847668., 1905364., 1184696.,
      1222648., 1261112., 1300088., 1285688., 1324664., 1364152., 1404152.,
      1523156., 1578548., 1634708., 1691636., 1674644., 1731572., 1789268.,
      1847732., 2560302., 2646846., 2734542., 2823390., 1749332., 1807796.,
      1867028., 1927028., 2672334., 2761182., 2851182., 2942334., 1824020.,
      1884020., 1944788., 2006324., 1987796., 2049332., 2111636., 2174708.,
      1175096., 1214072., 1253560., 1293560., 1284280., 1324280., 1364792.,
      1405816., 1958644., 2019412., 2080948., 2143252., 1334072., 1375096.,
      1416632., 1458680., 2033332., 2095636., 2158708., 2222548., 1383864.,
      1425912., 1468472., 1511544., 1501240., 1544312., 1587896., 1631992.,
      1721016., 1765112., 1809720., 1854840., 1830200., 1875320., 1920952.,
      1967096., 2792884., 2861332., 2930548., 3000532., 1900472., 1946616.,
      1993272., 2040440., 2898292., 2968276., 3039028., 3110548., 1970744.,
      2017912., 2065592., 2113784., 2088120., 2136312., 2185016., 2234232.,
      410716.,  430716.,  450972.,  471484.,  477596.,  498108.,  518876.,
      539900.,  724826.,  755978.,  787514.,  819434.,  492252.,  513276.,
      534556.,  556092.,  746810.,  778730.,  811034.,  843722.,  506908.,
      528444.,  550236.,  572284.,  577884.,  599932.,  622236.,  644796.,
      830904.,  872952.,  915512.,  958584.,  972856.,  1015928., 1059512.,
      1103608., 1476148., 1541524., 1607668., 1674580., 1002168., 1046264.,
      1090872., 1135992., 1520116., 1587028., 1654708., 1723156., 1031480.,
      1076600., 1122232., 1168376., 1181624., 1227768., 1274424., 1321592.,
      1540664., 1587832., 1635512., 1683704., 1682616., 1730808., 1779512.,
      1828728., 2556148., 2629204., 2703028., 2777620., 1732408., 1781624.,
      1831352., 1881592., 2630836., 2705428., 2780788., 2856916., 1782200.,
      1832440., 1883192., 1934456., 1932344., 1983608., 2035384., 2087672.,
      2345684., 2419508., 2494100., 2569460., 2570900., 2646260., 2722388.,
      2799284., 3904686., 4018878., 4134222., 4250718., 2645588., 2722484.,
      2800148., 2878580., 4016718., 4133214., 4250862., 4369662., 2720276.,
      2798708., 2877908., 2957876., 2957780., 3037748., 3118484., 3199988.,
      1723448., 1774712., 1826488., 1878776., 1881784., 1934072., 1986872.,
      2040184., 2854900., 2934100., 3014068., 3094804., 1931576., 1984888.,
      2038712., 2093048., 2929588., 3010324., 3091828., 3174100., 1981368.,
      2035704., 2090552., 2145912., 2147896., 2203256., 2259128., 2315512.,
      2619860., 2699828., 2780564., 2862068., 2869652., 2951156., 3033428.,
      3116468., 4352814., 4476222., 4600782., 4726494., 2944340., 3027380.,
      3111188., 3195764., 4464846., 4590558., 4717422., 4845438., 3019028.,
      3103604., 3188948., 3275060., 3281108., 3367220., 3454100., 3541748.,
      1906232., 1961592., 2017464., 2073848., 2080952., 2137336., 2194232.,
      2251640., 3153652., 3238996., 3325108., 3411988., 2130744., 2188152.,
      2246072., 2304504., 3228340., 3315220., 3402868., 3491284., 2180536.,
      2238968., 2297912., 2357368., 2363448., 2422904., 2482872., 2543352.,
      2779832., 2840312., 2901304., 2962808., 2954552., 3016056., 3078072.,
      3140600., 4479412., 4572436., 4666228., 4760788., 3024824., 3087352.,
      3150392., 3213944., 4584820., 4679380., 4774708., 4870804., 3095096.,
      3158648., 3222712., 3287288., 3278008., 3342584., 3407672., 3473272.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   830.,    2254.,   3806.,   5486.,
      990.,    2670.,   4478.,   6414.,   7260.,   10876.,  14748.,  18876.,
      8604.,   12732.,  17116.,  21756.,  9948.,   14588.,  19484.,  24636.,
      9662.,   12110.,  14686.,  17390.,  10846.,  13550.,  16382.,  19342.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  13820.,  19740.,  25916.,  32348.,
      16188.,  22620.,  29308.,  36252.,  53176.,  66552.,  80440.,  94840.,
      59960.,  74360.,  89272.,  104696., 66744.,  82168.,  98104.,  114552.,
      47868.,  55836.,  64060.,  72540.,  52284.,  60764.,  69500.,  78492.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 33470.,  37966.,  42590.,  47342.,
      35678.,  40430.,  45310.,  50318.,  86876.,  96636.,  106652., 116924.,
      92316.,  102588., 113116., 123900., 97756.,  108540., 119580., 130876.,
      58686.,  64206.,  69854.,  75630.,  61918.,  67694.,  73598.,  79630.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      670.,    1838.,   3134.,   4558.,   4926.,   6350.,   7902.,   9582.,
      10012.,  13116.,  16476.,  20092.,  19548.,  23164.,  27036.,  31164.,
      29084.,  33212.,  37596.,  42236.,  16670.,  18862.,  21182.,  23630.,
      21950.,  24398.,  26974.,  29678.,  21950.,  24398.,  26974.,  29678.,
      26206.,  28910.,  31742.,  34702.,  57692.,  63356.,  69276.,  75452.,
      67228.,  73404.,  79836.,  86524.,  76764.,  83452.,  90396.,  97596.,
      43070.,  46542.,  50142.,  53870.,  48350.,  52078.,  55934.,  59918.,
      44220.,  49628.,  55292.,  61212.,  54780.,  60700.,  66876.,  73308.,
      120120., 132472., 145336., 158712., 143288., 156664., 170552., 184952.,
      166456., 180856., 195768., 211192., 92604.,  100060., 107772., 115740.,
      105212., 113180., 121404., 129884., 97020.,  104988., 113212., 121692.,
      107580., 116060., 124796., 133788., 235960., 253432., 271416., 289912.,
      259128., 277624., 296632., 316152., 282296., 301816., 321848., 342392.,
      155644., 165660., 175932., 186460., 168252., 178780., 189564., 200604.,
      149820., 160348., 171132., 182172., 160380., 171420., 182716., 194268.,
      351800., 374392., 397496., 421112., 374968., 398584., 422712., 447352.,
      398136., 422776., 447928., 473592., 218684., 231260., 244092., 257180.,
      231292., 244380., 257724., 271324., 95550.,  101070., 106718., 112494.,
      101854., 107630., 113534., 119566., 219228., 231036., 243100., 255420.,
      232860., 245180., 257756., 270588., 246492., 259324., 272412., 285756.,
      133054., 139598., 146270., 153070., 140382., 147182., 154110., 161166.,
      127070., 133870., 140798., 147854., 133374., 140430., 147614., 154926.,
      287388., 301756., 316380., 331260., 301020., 315900., 331036., 346428.,
      314652., 330044., 345692., 361596., 169694., 177518., 185470., 193550.,
      177022., 185102., 193310., 201646., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      1310.,   3502.,   5822.,   8270.,   9662.,   12110.,  14686.,  17390.,
      19484.,  24636.,  30044.,  35708.,  37212.,  42876.,  48796.,  54972.,
      54940.,  61116.,  67548.,  74236.,  29598.,  32814.,  36158.,  39630.,
      38974.,  42446.,  46046.,  49774.,  43070.,  46542.,  50142.,  53870.,
      51422.,  55150.,  59006.,  62990.,  108124., 115836., 123804., 132028.,
      125852., 134076., 142556., 151292., 143580., 152316., 161308., 170556.,
      76478.,  80974.,  85598.,  90350.,  85854.,  90606.,  95486.,  100494.,
      86460.,  93916.,  101628., 109596., 105212., 113180., 121404., 129884.,
      220984., 237432., 254392., 271864., 260536., 278008., 295992., 314488.,
      300088., 318584., 337592., 357112., 159420., 168924., 178684., 188700.,
      180220., 190236., 200508., 211036., 180220., 190236., 200508., 211036.,
      198972., 209500., 220284., 231324., 418744., 440312., 462392., 484984.,
      458296., 480888., 503992., 527608., 497848., 521464., 545592., 570232.,
      263420., 275484., 287804., 300380., 284220., 296796., 309628., 322716.,
      273980., 286556., 299388., 312476., 292732., 305820., 319164., 332764.,
      616504., 643192., 670392., 698104., 656056., 683768., 711992., 740728.,
      695608., 724344., 753592., 783352., 367420., 382044., 396924., 412060.,
      388220., 403356., 418748., 434396., 157630., 164174., 170846., 177646.,
      168030., 174830., 181758., 188814., 351580., 365436., 379548., 393916.,
      373404., 387772., 402396., 417276., 395228., 410108., 425244., 440636.,
      207422., 214990., 222686., 230510., 218846., 226670., 234622., 242702.,
      209630., 217454., 225406., 233486., 220030., 228110., 236318., 244654.,
      460700., 477116., 493788., 510716., 482524., 499452., 516636., 534076.,
      504348., 521788., 539484., 557436., 264542., 273390., 282366., 291470.,
      275966., 285070., 294302., 303662., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  354.,  740.,  786.,  1228.,
      858.,  1336., 930.,  984.,  119.,  244.,  279.,  428.,  295.,  452.,
      311.,  350.,  246.,  504.,  582.,  892.,  614.,  940.,  646.,  732.,
      436.,  894.,  972.,  1492., 1024., 1570., 1076., 1162., 676.,  1385.,
      1514., 2322., 1592., 2439., 1670., 1811., 532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      898.,  1828., 1938., 2956., 2010., 3064., 2082., 2200., 231.,  468.,
      535.,  812.,  551.,  836.,  567.,  638.,  470.,  952.,  1094., 1660.,
      1126., 1708., 1158., 1308., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1252., 2537., 2762., 4194., 2840., 4311., 2918., 3155.,
      916.,  1854., 2012., 3052., 2064., 3130., 2116., 2282., 1396., 2825.,
      3074., 4662., 3152., 4779., 3230., 3491., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1442., 2916., 3090., 4684., 3162., 4792.,
      3234., 3416.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,   10.,  0.,   6.,   7.,   20.,  23.,
      26.,  18.,  20.,  0.,   14.,  18.,  48.,  58.,  68.,  44.,  50.,  0.,
      34.,  38.,  98.,  108., 118., 74.,  80.,  0.,   54.,  58.,  148., 158.,
      168., 104., 110., 0.,   48.,  51.,  118., 125., 132., 76.,  80.,  0.,
      63.,  66.,  153., 160., 167., 96.,  100., 0.,   0.,   0.,   0.,   0.,
      0.,   0.,   0.,   0.,   5.,   10.,  21.,  32.,  43.,  24.,  30.,  0.,
      30.,  35.,  76.,  87.,  98.,  54.,  60.,  0.,   62.,  74.,  160., 186.,
      212., 116., 130., 0.,   122., 134., 290., 316., 342., 186., 200., 0.,
      182., 194., 420., 446., 472., 256., 270., 0.,   112., 119., 254., 269.,
      284., 152., 160., 0.,   147., 154., 329., 344., 359., 192., 200., 0.,
      0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   9.,   18.,  37.,  56.,
      75.,  40.,  50.,  0.,   54.,  63.,  132., 151., 170., 90.,  100., 0.,
      110., 130., 272., 314., 356., 188., 210., 0.,   210., 230., 482., 524.,
      566., 298., 320., 0.,   310., 330., 692., 734., 776., 408., 430., 0.,
      176., 187., 390., 413., 436., 228., 240., 0.,   231., 242., 505., 528.,
      551., 288., 300., 0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.,   0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2722.,  5696.,  6056.,  9470.,  6624.,  10322., 7192.,
      7616.,  905.,   1856.,  2132.,  3271.,  2256.,  3457.,  2380.,  2688.,
      1866.,  3824.,  4440.,  6806.,  4688.,  7178.,  4936.,  5616.,  3366.,
      6904.,  7520.,  11546., 7928.,  12158., 8336.,  9016.,  5213.,  10684.,
      11704., 17955., 12316., 18873., 12928., 14044., 4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7010.,  14272., 15144., 23102., 15712., 23954.,
      16280., 17216., 1769.,  3584.,  4116.,  6247.,  4240.,  6433.,  4364.,
      4928.,  3594.,  7280.,  8408.,  12758., 8656.,  13130., 8904.,  10096.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9725.,
      19708., 21496., 32643., 22108., 33561., 22720., 24604., 7126.,  14424.,
      15680., 23786., 16088., 24398., 16496., 17816., 10853., 21964., 23944.,
      36315., 24556., 37233., 25168., 27244., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11298., 22848., 24232., 36734., 24800.,
      37586., 25368., 26816.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    362.,  390.,  1032., 1104., 1176., 746.,  790.,  0.,
      347.,  369.,  864.,  916.,  968.,  563.,  593.,  0.,    457.,  479.,
      1124., 1176., 1228., 713.,  743.,  0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    29.,   67.,   140.,  224.,  308.,  173.,
      219.,  0.,    219.,  257.,  560.,  644.,  728.,  403.,  449.,  0.,
      450.,  542.,  1176., 1376., 1576., 866.,  974.,  0.,    910.,  1002.,
      2176., 2376., 2576., 1406., 1514., 0.,    1370., 1462., 3176., 3376.,
      3576., 1946., 2054., 0.,    851.,  905.,  1936., 2052., 2168., 1163.,
      1225., 0.,    1121., 1175., 2516., 2632., 2748., 1473., 1535., 0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    53.,   123.,
      252.,  400.,  548.,  293.,  371.,  0.,    403.,  473.,  992.,  1140.,
      1288., 683.,  761.,  0.,    818.,  974.,  2040., 2368., 2696., 1426.,
      1598., 0.,    1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,
      2378., 2534., 5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441.,
      3008., 3188., 3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,   900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,
      956.,   2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,  6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,  12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,  18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146., 30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540., 30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      21340., 44680.,  47528.,  74356.,  52040.,  81124.,  56552.,  59912.,
      7054.,  14468.,  16660.,  25562.,  17636.,  27026.,  18612.,  21060.,
      14524., 29768.,  34664.,  53140.,  36616.,  56068.,  38568.,  43976.,
      26444., 54248.,  59144.,  90820.,  62376.,  95668.,  65608.,  71016.,
      40930., 83900.,  92012.,  141174., 96860.,  148446., 101708., 110588.,
      32396., 66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858., 101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348., 78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      55388., 112776., 119720., 182644., 124232., 189412., 128744., 136200.,
      13838., 28036.,  32276.,  48986.,  33252.,  50450.,  34228.,  38724.,
      28092., 56904.,  65896.,  99988.,  67848.,  102916., 69800.,  79304.,
      50252., 101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      76642., 155324., 169580., 257526., 174428., 264798., 179276., 194300.,
      56204., 113768., 123784., 187780., 127016., 192628., 130248., 140776.,
      85570., 173180., 188972., 286614., 193820., 293886., 198668., 215228.,
      62156., 125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      89436., 180872., 191912., 290932., 196424., 297700., 200936., 212488.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2620.,  2828.,  7656.,  8200.,
      8744.,  5628.,  5964.,  0.,     2630.,  2798.,  6596.,  6996.,  7396.,
      4326.,  4558.,  0.,     3470.,  3638.,  8596.,  8996.,  9396.,  5486.,
      5718.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     190.,   486.,   1012.,  1668.,  2324.,  1310.,  1670.,  0.,
      1670.,  1966.,  4292.,  4948.,  5604.,  3110.,  3470.,  0.,     3420.,
      4140.,  9000.,  10568., 12136., 6684.,  7532.,  0.,     7020.,  7740.,
      16840., 18408., 19976., 10924., 11772., 0.,     10620., 11340., 24680.,
      26248., 27816., 15164., 16012., 0.,     6630.,  7054.,  15108., 16020.,
      16932., 9094.,  9582.,  0.,     8750.,  9174.,  19668., 20580., 21492.,
      11534., 12022., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     350.,   902.,   1844.,  3012.,  4180.,  2238.,  2854.,
      0.,     3110.,  3662.,  7684.,  8852.,  10020., 5318.,  5934.,  0.,
      6300.,  7532.,  15784., 18376., 20968., 11100., 12460., 0.,     12460.,
      13692., 28744., 31336., 33928., 17900., 19260., 0.,     18620., 19852.,
      41704., 44296., 46888., 24700., 26060., 0.,     10630., 11310., 23620.,
      25044., 26468., 13862., 14606., 0.,     14030., 14710., 30740., 32164.,
      33588., 17582., 18326., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   200.,   248.,   50.,    88.,
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   150.,   208.,   384.,   504.,
      432.,   560.,   778.,   976.,   632.,   768.,   1078.,  1288.,  832.,
      976.,   912.,   1064.,  301.,   400.,   728.,   932.,   848.,   1064.,
      1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,  1616.,
      1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,  1978.,  2224.,
      1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  853.,
      976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,  2624.,
      3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,   976.,   1856.,
      2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,
      2432.,  2640.,  2640.,  2856.,  1306.,  1416.,  2736.,  2960.,  2912.,
      3144.,  4558.,  4912.,  3192.,  3432.,  4978.,  5344.,  3472.,  3720.,
      3680.,  3936.,  429.,   476.,   880.,   976.,   1016.,  1116.,  1559.,
      1712.,  1076.,  1180.,  1649.,  1808.,  1136.,  1244.,  1288.,  1400.,
      882.,   984.,   1808.,  2016.,  2112.,  2328.,  3238.,  3568.,  2232.,
      2456.,  3418.,  3760.,  2352.,  2584.,  2688.,  2928.,  1622.,  1744.,
      3328.,  3576.,  3632.,  3888.,  5578.,  5968.,  3832.,  4096.,  5878.,
      6280.,  4032.,  4304.,  4368.,  4648.,  2509.,  2704.,  5144.,  5540.,
      5648.,  6056.,  8667.,  9288.,  5948.,  6368.,  9117.,  9756.,  6248.,
      6680.,  6800.,  7244.,  1990.,  2128.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  3061.,  3280.,  6248.,  6692.,  6848.,  7304.,  10467., 11160.,
      7148.,  7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  2358.,
      2512.,  4800.,  5112.,  5232.,  5552.,  7978.,  8464.,  5432.,  5760.,
      8278.,  8776.,  5632.,  5968.,  6096.,  6440.,  3418.,  3592.,  6960.,
      7312.,  7392.,  7752.,  11278., 11824., 7672.,  8040.,  11698., 12256.,
      7952.,  8328.,  8416.,  8800.,  845.,   924.,   1712.,  1872.,  1976.,
      2140.,  2999.,  3248.,  2036.,  2204.,  3089.,  3344.,  2096.,  2268.,
      2376.,  2552.,  1714.,  1880.,  3472.,  3808.,  4032.,  4376.,  6118.,
      6640.,  4152.,  4504.,  6298.,  6832.,  4272.,  4632.,  4864.,  5232.,
      3094.,  3280.,  6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,
      7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  4717.,  5008.,
      9560.,  10148., 10448., 11048., 15867., 16776., 10748., 11360., 16317.,
      17244., 11048., 11672., 11984., 12620., 3462.,  3664.,  7008.,  7416.,
      7632.,  8048.,  11578., 12208., 7832.,  8256.,  11878., 12520., 8032.,
      8464.,  8688.,  9128.,  5269.,  5584.,  10664., 11300., 11648., 12296.,
      17667., 18648., 11948., 12608., 18117., 19116., 12248., 12920., 13280.,
      13964., 3830.,  4048.,  7744.,  8184.,  8432.,  8880.,  12778., 13456.,
      8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 5530.,
      5768.,  11184., 11664., 11872., 12360., 17998., 18736., 12152., 12648.,
      18418., 19168., 12432., 12936., 13152., 13664.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    146.,  216.,  158.,  232.,  440.,  592.,
      472.,  632.,  504.,  672.,  330.,  416.,  350.,  440.,  0.,    0.,
      155.,  192.,  165.,  204.,  392.,  472.,  416.,  500.,  440.,  528.,
      259.,  304.,  273.,  320.,  0.,    0.,    205.,  252.,  215.,  264.,
      512.,  612.,  536.,  640.,  560.,  668.,  329.,  384.,  343.,  400.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    9.,    20.,
      27.,   40.,   56.,   84.,   96.,   128.,  136.,  172.,  77.,   96.,
      99.,   120.,  0.,    0.,    99.,   120.,  117.,  140.,  256.,  304.,
      296.,  348.,  336.,  392.,  187.,  216.,  209.,  240.,  0.,    0.,
      202.,  248.,  246.,  296.,  536.,  640.,  632.,  744.,  728.,  848.,
      402.,  464.,  454.,  520.,  0.,    0.,    422.,  488.,  466.,  536.,
      1016., 1160., 1112., 1264., 1208., 1368., 662.,  744.,  714.,  800.,
      0.,    0.,    642.,  728.,  686.,  776.,  1496., 1680., 1592., 1784.,
      1688., 1888., 922.,  1024., 974.,  1080., 0.,    0.,    403.,  448.,
      429.,  476.,  920.,  1016., 976.,  1076., 1032., 1136., 555.,  608.,
      585.,  640.,  0.,    0.,    533.,  588.,  559.,  616.,  1200., 1316.,
      1256., 1376., 1312., 1436., 705.,  768.,  735.,  800.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    17.,   36.,   51.,   72.,
      104.,  148.,  176.,  224.,  248.,  300.,  133.,  160.,  171.,  200.,
      0.,    0.,    187.,  216.,  221.,  252.,  464.,  528.,  536.,  604.,
      608.,  680.,  323.,  360.,  361.,  400.,  0.,    0.,    378.,  440.,
      454.,  520.,  952.,  1088., 1112., 1256., 1272., 1424., 674.,  752.,
      758.,  840.,  0.,    0.,    758.,  840.,  834.,  920.,  1752., 1928.,
      1912., 2096., 2072., 2264., 1094., 1192., 1178., 1280., 0.,    0.,
      1138., 1240., 1214., 1320., 2552., 2768., 2712., 2936., 2872., 3104.,
      1514., 1632., 1598., 1720., 0.,    0.,    651.,  704.,  693.,  748.,
      1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,
      0.,    0.,    861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112.,
      2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,    193.,    326.,    574.,    382.,   662.,    847.,    1291.,
      854.,   1166.,   1555.,   2047.,   1326.,  1670.,   1510.,   1886.,
      330.,   626.,    1004.,   1628.,   1372.,  2060.,   2606.,   3686.,
      2316.,  3068.,   4022.,   5198.,   3260.,  4076.,   3884.,   4764.,
      1090.,  1546.,   2844.,   3788.,   3212.,  4220.,   5846.,   7406.,
      4796.,  5868.,   8222.,   9878.,   6380.,  7516.,   7004.,   8204.,
      2219.,  2999.,   5434.,   7042.,   6370.,  8074.,   11097.,  13725.,
      8746.,  10546.,  14661.,  17433.,  11122., 13018.,  12442.,  14434.,
      4002.,  4586.,   8668.,   9868.,   9548.,  10812.,  15350.,  17294.,
      11132., 12460.,  17726.,  19766.,  12716., 14108.,  13852.,  15308.,
      6587.,  7559.,   14170.,  16162.,  15874., 17962.,  25353.,  28557.,
      18250., 20434.,  28917.,  32265.,  20626., 22906.,  22714.,  25090.,
      6914.,  7626.,   14492.,  15948.,  15884., 17404.,  24854.,  27182.,
      17468., 19052.,  27230.,  29654.,  19052., 20700.,  20700.,  22412.,
      10234., 11106.,  21452.,  23228.,  22844., 24684.,  35774.,  38582.,
      25068., 26972.,  39110.,  42014.,  27292., 29260.,  28940.,  30972.,
      3341.,  3713.,   6854.,   7614.,   7934.,  8726.,   12175.,  13387.,
      8406.,  9230.,   12883.,  14143.,  8878.,  9734.,   10086.,  10974.,
      6858.,  7666.,   14060.,  15708.,  16476., 18188.,  25262.,  27878.,
      17420., 19196.,  26678.,  29390.,  18364., 20204.,  21036.,  22940.,
      12738., 13706.,  26140.,  28108.,  28556., 30588.,  43862.,  46958.,
      30140., 32236.,  46238.,  49430.,  31724., 33884.,  34396.,  36620.,
      19691., 21239.,  40378.,  43522.,  44386., 47626.,  68121.,  73053.,
      46762., 50098.,  71685.,  76761.,  49138., 52570.,  53530.,  57058.,
      15650., 16746.,  31964.,  34188.,  34892., 37180.,  53366.,  56846.,
      36476., 38828.,  55742.,  59318.,  38060., 40476.,  41244.,  43724.,
      24059., 25799.,  49114.,  52642.,  53890., 57514.,  82377.,  87885.,
      56266., 59986.,  85941.,  91593.,  58642., 62458.,  63802.,  67714.,
      18562., 19786.,  37788.,  40268.,  41228., 43772.,  62870.,  66734.,
      42812., 45420.,  65246.,  69206.,  44396., 47068.,  48092.,  50828.,
      27002., 28386.,  54988.,  57788.,  58428., 61292.,  89150.,  93494.,
      60652., 63580.,  92486.,  96926.,  62876., 65868.,  66572.,  69628.,
      6605.,  7233.,   13382.,  14654.,  15486., 16790.,  23503.,  25483.,
      15958., 17294.,  24211.,  26239.,  16430., 17798.,  18662.,  20062.,
      13386., 14706.,  27116.,  29788.,  31580., 34316.,  47918.,  52070.,
      32524., 35324.,  49334.,  53582.,  33468., 36332.,  38188.,  41116.,
      24386., 25866.,  49436.,  52428.,  53900., 56956.,  81878.,  86510.,
      55484., 58604.,  84254.,  88982.,  57068., 60252.,  61788.,  65036.,
      37163., 39479.,  75322.,  80002.,  82402., 87178.,  125145., 132381.,
      84778., 89650.,  128709., 136089., 87154., 92122.,  94618.,  99682.,
      27298., 28906.,  55260.,  58508.,  60236., 63548.,  91382.,  96398.,
      61820., 65196.,  93758.,  98870.,  63404., 66844.,  68636.,  72140.,
      41531., 44039.,  84058.,  89122.,  91906., 97066.,  139401., 147213.,
      94282., 99538.,  142965., 150921., 96658., 102010., 104890., 110338.,
      30210., 31946.,  61084.,  64588.,  66572., 70140.,  100886., 106286.,
      68156., 71788.,  103262., 108758., 69740., 73436.,  75484.,  79244.,
      43770., 45666.,  88524.,  92348.,  94012., 97900.,  142526., 148406.,
      96236., 100188., 145862., 151838., 98460., 102476., 104204., 108284.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1034.,  1586.,  1122.,  1706.,  3228.,  4428.,  3468.,  4732.,
      3708.,  5036.,  2474.,  3154.,  2626.,  3338.,  0.,     0.,     1169.,
      1461.,  1245.,  1553.,  2982.,  3614.,  3166.,  3830.,  3350.,  4046.,
      1985.,  2341.,  2093.,  2465.,  0.,     0.,     1549.,  1921.,  1625.,
      2013.,  3902.,  4694.,  4086.,  4910.,  4270.,  5126.,  2525.,  2961.,
      2633.,  3085.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     53.,    137.,   193.,   293.,   398.,   614.,   710.,
      958.,   1022.,  1302.,  581.,   729.,   753.,   917.,   0.,     0.,
      753.,   917.,   893.,   1073.,  1958.,  2334.,  2270.,  2678.,  2582.,
      3022.,  1441.,  1669.,  1613.,  1857.,  0.,     0.,     1530.,  1890.,
      1874.,  2266.,  4092.,  4908.,  4844.,  5724.,  5596.,  6540.,  3098.,
      3586.,  3506.,  4026.,  0.,     0.,     3250.,  3770.,  3594.,  4146.,
      7852.,  8988.,  8604.,  9804.,  9356.,  10620., 5138.,  5786.,  5546.,
      6226.,  0.,     0.,     4970.,  5650.,  5314.,  6026.,  11612., 13068.,
      12364., 13884., 13116., 14700., 7178.,  7986.,  7586.,  8426.,  0.,
      0.,     3137.,  3493.,  3341.,  3713.,  7174.,  7934.,  7614.,  8406.,
      8054.,  8878.,  4337.,  4757.,  4573.,  5009.,  0.,     0.,     4157.,
      4593.,  4361.,  4813.,  9374.,  10294., 9814.,  10766., 10254., 11238.,
      5517.,  6017.,  5753.,  6269.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     101.,   249.,   369.,   533.,   750.,
      1094.,  1318.,  1694.,  1886.,  2294.,  1013.,  1225.,  1313.,  1541.,
      0.,     0.,     1441.,  1669.,  1709.,  1953.,  3590.,  4094.,  4158.,
      4694.,  4726.,  5294.,  2513.,  2805.,  2813.,  3121.,  0.,     0.,
      2906.,  3394.,  3506.,  4026.,  7356.,  8428.,  8620.,  9756.,  9884.,
      11084., 5242.,  5858.,  5906.,  6554.,  0.,     0.,     5906.,  6554.,
      6506.,  7186.,  13676., 15068., 14940., 16396., 16204., 17724., 8562.,
      9338.,  9226.,  10034., 0.,     0.,     8906.,  9714.,  9506.,  10346.,
      19996., 21708., 21260., 23036., 22524., 24364., 11882., 12818., 12546.,
      13514., 0.,     0.,     5105.,  5525.,  5437.,  5873.,  11366., 12254.,
      12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,
      0.,     6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622.,
      16238., 17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,     1422.,    2380.,   4332.,    2796.,    5004.,   6362.,
      9866.,    6540.,    9004.,   11978.,   15866.,   10284.,  13004.,
      11724.,   14700.,   2364.,   4700.,    7448.,    12376.,  10328.,
      15768.,   19828.,   28372.,  17816.,   23768.,   31060.,  40372.,
      25304.,   31768.,   30232.,  37208.,   8284.,    11900.,  21848.,
      29336.,   24728.,   32728.,  45268.,   57652.,   37336.,  45848.,
      64180.,   77332.,   49944.,  58968.,   54872.,   64408.,  17002.,
      23194.,   41924.,   54692.,  49316.,   62852.,   86238.,  107118.,
      68228.,   82532.,   114606., 136638.,  87140.,   102212., 97604.,
      113444.,  31452.,   36092.,  68184.,   77720.,   75160.,  85208.,
      120916.,  136372.,  87768.,  98328.,   139828.,  156052., 100376.,
      111448.,  109400.,  120984., 51754.,   59482.,   111428., 127268.,
      124964.,  141572.,  199710., 225198.,  143876.,  161252., 228078.,
      254718.,  162788.,  180932., 179396.,  198308.,  54620.,  60284.,
      114520.,  126104.,  125592., 137688.,  196564.,  215092., 138200.,
      150808.,  215476.,  234772., 150808.,  163928.,  163928., 177560.,
      81020.,   87964.,   169880., 184024.,  180952.,  195608., 283444.,
      305812.,  198680.,  213848., 310036.,  333172.,  216408., 232088.,
      229528.,  245720.,  26366.,  29326.,   54092.,   60140.,  62700.,
      69004.,   96218.,   105866., 66444.,   73004.,   101834., 111866.,
      70188.,   77004.,   79820.,  86892.,   54076.,   60508.,  110872.,
      123992.,  130136.,  143768., 199540.,  220372.,  137624., 151768.,
      210772.,  232372.,  145112., 159768.,  166424.,  181592., 100956.,
      108668.,  207192.,  222872., 226456.,  242648.,  347860., 372532.,
      239064.,  255768.,  366772., 392212.,  251672.,  268888., 272984.,
      290712.,  156010.,  168346., 319940.,  344996.,  351908., 377732.,
      540126.,  579438.,  370820., 397412.,  568494.,  608958., 389732.,
      417092.,  424772.,  452900., 124124.,  132860.,  253528., 271256.,
      276888.,  295128.,  423508., 451252.,  289496.,  308248., 442420.,
      470932.,  302104.,  321368., 327512.,  347288.,  190762., 204634.,
      389444.,  417572.,  427556., 456452.,  653598.,  697518., 446468.,
      476132.,  681966.,  727038., 465380.,  495812.,  506564., 537764.,
      147292.,  157052.,  299864., 319640.,  327320.,  347608., 499156.,
      529972.,  339928.,  360728., 518068.,  549652.,  352536., 373848.,
      382040.,  403864.,  214652., 225692.,  437144.,  459480., 464600.,
      487448.,  708916.,  743572., 482328.,  505688.,  735508., 770932.,
      500056.,  523928.,  529560., 553944.,  52222.,   57230.,  105804.,
      115948.,  122604.,  133004., 186074.,  201866.,  126348., 137004.,
      191690.,  207866.,  130092., 141004.,  147916.,  159084., 105788.,
      116316.,  214296.,  235608., 249944.,  271768.,  379252., 412372.,
      257432.,  279768.,  390484., 424372.,  264920.,  287768., 302616.,
      325976.,  193628.,  205436., 392536.,  416408.,  428184., 452568.,
      650452.,  687412.,  440792., 465688.,  669364.,  707092., 453400.,
      478808.,  491096.,  517016., 295018.,  313498.,  597956., 635300.,
      654500.,  692612.,  994014., 1051758., 673412.,  712292., 1022382.,
      1081278., 692324.,  731972., 751940.,  792356.,  216796., 229628.,
      438872.,  464792.,  478616., 505048.,  726100.,  766132., 491224.,
      518168.,  745012.,  785812., 503832.,  531288.,  545624., 573592.,
      329770.,  349786.,  667460., 707876.,  730148.,  771332., 1107486.,
      1169838., 749060.,  791012., 1135854., 1199358., 767972., 810692.,
      833732.,  877220.,  239964., 253820.,  485208.,  513176., 529048.,
      557528.,  801748.,  844852., 541656.,  570648.,  820660., 864532.,
      554264.,  583768.,  600152., 630168.,  348284.,  363420., 704408.,
      734936.,  748248.,  779288., 1134388., 1181332., 765976., 797528.,
      1160980., 1208692., 783704., 815768.,  829592.,  862168.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,   382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,  1774.,   1454.,   2238.,   0.,      0.,
      430.,    1214.,   510.,   1422.,   2380.,   4332.,   2796.,   5004.,
      3212.,   5676.,   2798.,  4094.,   3134.,   4558.,   0.,      0.,
      1020.,   2844.,   1692.,  3772.,   6104.,   10520.,  7960.,   12888.,
      9816.,   15256.,  7292.,  10140.,  8476.,   11580.,  0.,      0.,
      4380.,   7484.,   5052.,  8412.,   15384.,  22360.,  17240.,  24728.,
      19096.,  27096.,  13212., 17340.,  14396.,  18780.,  0.,      0.,
      7740.,   12124.,  8412.,  13052.,  24664.,  34200.,  26520.,  36568.,
      28376.,  38936.,  19132., 24540.,  20316.,  25980.,  0.,      0.,
      9070.,   11390.,  9662.,  12110.,  23244.,  28268.,  24684.,  29964.,
      26124.,  31660.,  15534., 18366.,  16382.,  19342.,  0.,      0.,
      12030.,  14990.,  12622., 15710.,  30444.,  36748.,  31884.,  38444.,
      33324.,  40140.,  19774., 23246.,  20622.,  24222.,  0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.,
      350.,    1006.,   1454.,  2238.,   2988.,   4684.,   5452.,   7404.,
      7916.,   10124.,  4510.,  5678.,   5870.,   7166.,   0.,      0.,
      5870.,   7166.,   6974.,  8398.,   15308.,  18284.,  17772.,  21004.,
      20236.,  23724.,  11310., 13118.,  12670.,  14606.,  0.,      0.,
      11900.,  14748.,  14620., 17724.,  31960.,  38424.,  37912.,  44888.,
      43864.,  51352.,  24316., 28188.,  27548.,  31676.,  0.,      0.,
      25500.,  29628.,  28220., 32604.,  61720.,  70744.,  67672.,  77208.,
      73624.,  83672.,  40476., 45628.,  43708.,  49116.,  0.,      0.,
      39100.,  44508.,  41820., 47484.,  91480.,  103064., 97432.,  109528.,
      103384., 115992., 56636., 63068.,  59868.,  66556.,  0.,      0.,
      24750.,  27582.,  26366., 29326.,  56652.,  62700.,  60140.,  66444.,
      63628.,  70188.,  34286., 37630.,  36158.,  39630.,  0.,      0.,
      32830.,  36302.,  34446., 38046.,  74092.,  81420.,  77580.,  85164.,
      81068.,  88908.,  43646., 47630.,  45518.,  49630.,  0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.,
      670.,    1838.,   2798.,  4094.,   5676.,   8396.,   10188.,  13164.,
      14700.,  17932.,  7902.,  9582.,   10286.,  12094.,  0.,      0.,
      11310.,  13118.,  13438., 15374.,  28236.,  32236.,  32748.,  37004.,
      37260.,  41772.,  19822., 22142.,  22206.,  24654.,  0.,      0.,
      22780.,  26652.,  27548., 31676.,  57816.,  66328.,  67864.,  76888.,
      77912.,  87448.,  41340., 46236.,  46620.,  51772.,  0.,      0.,
      46620.,  51772.,  51388., 56796.,  108056., 119128., 118104., 129688.,
      128152., 140248., 67740., 73916.,  73020.,  79452.,  0.,      0.,
      70460.,  76892.,  75228., 81916.,  158296., 171928., 168344., 182488.,
      178392., 193048., 94140., 101596., 99420.,  107132., 0.,      0.,
      40430.,  43774.,  43070., 46542.,  90060.,  97132.,  95596.,  102924.,
      101132., 108716., 53038., 56894.,  55934.,  59918.,  0.,      0.,
      53630.,  57614.,  56270., 60382.,  117740., 126092., 123276., 131884.,
      128812., 137676., 67518., 72014.,  70414.,  75038.,  0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,     0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5010.,
      5224.,  5442.,  5664.,  10508., 10944., 11388., 11840., 11196., 11648.,
      12108., 12576., 17542., 18232., 18934., 19648., 12300., 12768., 13244.,
      13728., 19198., 19912., 20638., 21376., 13404., 13888., 14380., 14880.,
      14220., 14720., 15228., 15744., 1625.,  1716.,  1809.,  1904.,  3334.,
      3520.,  3710.,  3904.,  3870.,  4064.,  4262.,  4464.,  5939.,  6236.,
      6539.,  6848.,  4102.,  4304.,  4510.,  4720.,  6287.,  6596.,  6911.,
      7232.,  4334.,  4544.,  4758.,  4976.,  4934.,  5152.,  5374.,  5600.,
      3330.,  3528.,  3730.,  3936.,  6828.,  7232.,  7644.,  8064.,  8028.,
      8448.,  8876.,  9312.,  12310., 12952., 13606., 14272., 8492.,  8928.,
      9372.,  9824.,  13006., 13672., 14350., 15040., 8956.,  9408.,  9868.,
      10336., 10284., 10752., 11228., 11712., 6250.,  6488.,  6730.,  6976.,
      12828., 13312., 13804., 14304., 14028., 14528., 15036., 15552., 21550.,
      22312., 23086., 23872., 14812., 15328., 15852., 16384., 22726., 23512.,
      24310., 25120., 15596., 16128., 16668., 17216., 16924., 17472., 18028.,
      18592., 9655.,  10036., 10423., 10816., 19802., 20576., 21362., 22160.,
      21794., 22592., 23402., 24224., 33453., 34668., 35901., 37152., 22970.,
      23792., 24626., 25472., 35217., 36468., 37737., 39024., 24146., 24992.,
      25850., 26720., 26330., 27200., 28082., 28976., 7690.,  7960.,  8234.,
      8512.,  15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874.,
      26768., 26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640.,
      27674., 28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850.,
      29792., 30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,
      9738.,  10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564.,
      22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040.,
      32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708.,
      24384., 25068., 25760., 13330., 13672., 14018., 14368., 27148., 27840.,
      28540., 29248., 28860., 29568., 30284., 31008., 44038., 45112., 46198.,
      47296., 29964., 30688., 31420., 32160., 45694., 46792., 47902., 49024.,
      31068., 31808., 32556., 33312., 32908., 33664., 34428., 35200., 3225.,
      3380.,  3537.,  3696.,  6534.,  6848.,  7166.,  7488.,  7582.,  7904.,
      8230.,  8560.,  11507., 11996., 12491., 12992., 7814.,  8144.,  8478.,
      8816.,  11855., 12356., 12863., 13376., 8046.,  8384.,  8726.,  9072.,
      9158.,  9504.,  9854.,  10208., 6530.,  6856.,  7186.,  7520.,  13228.,
      13888., 14556., 15232., 15452., 16128., 16812., 17504., 23446., 24472.,
      25510., 26560., 15916., 16608., 17308., 18016., 24142., 25192., 26254.,
      27328., 16380., 17088., 17804., 18528., 18732., 19456., 20188., 20928.,
      12010., 12376., 12746., 13120., 24348., 25088., 25836., 26592., 26572.,
      27328., 28092., 28864., 40366., 41512., 42670., 43840., 27356., 28128.,
      28908., 29696., 41542., 42712., 43894., 45088., 28140., 28928., 29724.,
      30528., 30492., 31296., 32108., 32928., 18295., 18868., 19447., 20032.,
      37082., 38240., 39410., 40592., 40610., 41792., 42986., 44192., 61677.,
      63468., 65277., 67104., 41786., 42992., 44210., 45440., 63441., 65268.,
      67113., 68976., 42962., 44192., 45434., 46688., 46682., 47936., 49202.,
      50480., 13450., 13848., 14250., 14656., 27228., 28032., 28844., 29664.,
      29708., 30528., 31356., 32192., 45070., 46312., 47566., 48832., 30492.,
      31328., 32172., 33024., 46246., 47512., 48790., 50080., 31276., 32128.,
      32988., 33856., 33884., 34752., 35628., 36512., 20455., 21076., 21703.,
      22336., 41402., 42656., 43922., 45200., 45314., 46592., 47882., 49184.,
      68733., 70668., 72621., 74592., 46490., 47792., 49106., 50432., 70497.,
      72468., 74457., 76464., 47666., 48992., 50330., 51680., 51770., 53120.,
      54482., 55856., 14890., 15320., 15754., 16192., 30108., 30976., 31852.,
      32736., 32844., 33728., 34620., 35520., 49774., 51112., 52462., 53824.,
      33628., 34528., 35436., 36352., 50950., 52312., 53686., 55072., 34412.,
      35328., 36252., 37184., 37276., 38208., 39148., 40096., 21650., 22120.,
      22594., 23072., 43788., 44736., 45692., 46656., 46524., 47488., 48460.,
      49440., 70534., 71992., 73462., 74944., 47628., 48608., 49596., 50592.,
      72190., 73672., 75166., 76672., 48732., 49728., 50732., 51744., 51596.,
      52608., 53628., 54656.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     450.,   584.,   722.,   864.,   490.,   632.,   778.,
      928.,   1468.,  1760.,  2060.,  2368.,  1580.,  1888.,  2204.,  2528.,
      1692.,  2016.,  2348.,  2688.,  1154.,  1320.,  1490.,  1664.,  1226.,
      1400.,  1578.,  1760.,  0.,     0.,     0.,     0.,     549.,   620.,
      693.,   768.,   585.,   660.,   737.,   816.,   1414.,  1568.,  1726.,
      1888.,  1502.,  1664.,  1830.,  2000.,  1590.,  1760.,  1934.,  2112.,
      949.,   1036.,  1125.,  1216.,  1001.,  1092.,  1185.,  1280.,  0.,
      0.,     0.,     0.,     729.,   820.,   913.,   1008.,  765.,   860.,
      957.,   1056.,  1854.,  2048.,  2246.,  2448.,  1942.,  2144.,  2350.,
      2560.,  2030.,  2240.,  2454.,  2672.,  1209.,  1316.,  1425.,  1536.,
      1261.,  1372.,  1485.,  1600.,  0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     17.,    36.,    57.,    80.,    85.,
      108.,   133.,   160.,   174.,   224.,   278.,   336.,   326.,   384.,
      446.,   512.,   478.,   544.,   614.,   688.,   273.,   308.,   345.,
      384.,   357.,   396.,   437.,   480.,   0.,     0.,     0.,     0.,
      357.,   396.,   437.,   480.,   425.,   468.,   513.,   560.,   934.,
      1024.,  1118.,  1216.,  1086.,  1184.,  1286.,  1392.,  1238.,  1344.,
      1454.,  1568.,  693.,   748.,   805.,   864.,   777.,   836.,   897.,
      960.,   0.,     0.,     0.,     0.,     722.,   808.,   898.,   992.,
      890.,   984.,   1082.,  1184.,  1948.,  2144.,  2348.,  2560.,  2316.,
      2528.,  2748.,  2976.,  2684.,  2912.,  3148.,  3392.,  1490.,  1608.,
      1730.,  1856.,  1690.,  1816.,  1946.,  2080.,  0.,     0.,     0.,
      0.,     1562.,  1688.,  1818.,  1952.,  1730.,  1864.,  2002.,  2144.,
      3788.,  4064.,  4348.,  4640.,  4156.,  4448.,  4748.,  5056.,  4524.,
      4832.,  5148.,  5472.,  2490.,  2648.,  2810.,  2976.,  2690.,  2856.,
      3026.,  3200.,  0.,     0.,     0.,     0.,     2402.,  2568.,  2738.,
      2912.,  2570.,  2744.,  2922.,  3104.,  5628.,  5984.,  6348.,  6720.,
      5996.,  6368.,  6748.,  7136.,  6364.,  6752.,  7148.,  7552.,  3490.,
      3688.,  3890.,  4096.,  3690.,  3896.,  4106.,  4320.,  0.,     0.,
      0.,     0.,     1525.,  1612.,  1701.,  1792.,  1625.,  1716.,  1809.,
      1904.,  3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,  4304.,
      3926.,  4128.,  4334.,  4544.,  2117.,  2220.,  2325.,  2432.,  2233.,
      2340.,  2449.,  2560.,  0.,     0.,     0.,     0.,     2025.,  2132.,
      2241.,  2352.,  2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,
      5264.,  4790.,  5024.,  5262.,  5504.,  5006.,  5248.,  5494.,  5744.,
      2697.,  2820.,  2945.,  3072.,  2813.,  2940.,  3069.,  3200.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     33.,
      68.,    105.,   144.,   165.,   204.,   245.,   288.,   334.,   416.,
      502.,   592.,   614.,   704.,   798.,   896.,   894.,   992.,   1094.,
      1200.,  481.,   532.,   585.,   640.,   629.,   684.,   741.,   800.,
      0.,     0.,     0.,     0.,     693.,   748.,   805.,   864.,   825.,
      884.,   945.,   1008.,  1734.,  1856.,  1982.,  2112.,  2014.,  2144.,
      2278.,  2416.,  2294.,  2432.,  2574.,  2720.,  1221.,  1292.,  1365.,
      1440.,  1369.,  1444.,  1521.,  1600.,  0.,     0.,     0.,     0.,
      1394.,  1512.,  1634.,  1760.,  1690.,  1816.,  1946.,  2080.,  3548.,
      3808.,  4076.,  4352.,  4172.,  4448.,  4732.,  5024.,  4796.,  5088.,
      5388.,  5696.,  2546.,  2696.,  2850.,  3008.,  2874.,  3032.,  3194.,
      3360.,  0.,     0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,
      3170.,  3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,
      7648.,  8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,
      4570.,  4768.,  4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,
      0.,     4354.,  4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,
      9788.,  10208., 10636., 11072., 10412., 10848., 11292., 11744., 11036.,
      11488., 11948., 12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,
      6634.,  6880.,  0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,
      2816.,  2665.,  2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,
      5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,
      3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,
      0.,     0.,     3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,
      3872.,  7294.,  7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,
      7982.,  8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,
      4508.,  4653.,  4800.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   5506.,   6218.,   6962.,   7738.,
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      39658.,  41362.,  43098.,  44866.,  83204.,  86676.,  90212.,  93812.,
      88676.,  92276.,  95940.,  99668.,  138974., 144470., 150062., 155750.,
      97476.,  101204., 104996., 108852., 152174., 157862., 163646., 169526.,
      106276., 110132., 114052., 118036., 112772., 116756., 120804., 124916.,
      12821.,  13545.,  14285.,  15041.,  26306.,  27786.,  29298.,  30842.,
      30578.,  32122.,  33698.,  35306.,  46927.,  49291.,  51703.,  54163.,
      32418.,  34026.,  35666.,  37338.,  49687.,  52147.,  54655.,  57211.,
      34258.,  35930.,  37634.,  39370.,  39042.,  40778.,  42546.,  44346.,
      26250.,  27826.,  29434.,  31074.,  53828.,  57044.,  60324.,  63668.,
      63396.,  66740.,  70148.,  73620.,  97214.,  102326., 107534., 112838.,
      67076.,  70548.,  74084.,  77684.,  102734., 108038., 113438., 118934.,
      70756.,  74356.,  78020.,  81748.,  81348.,  85076.,  88868.,  92724.,
      49530.,  51426.,  53354.,  55314.,  101668., 105524., 109444., 113428.,
      111236., 115220., 119268., 123380., 170894., 176966., 183134., 189398.,
      117476., 121588., 125764., 130004., 180254., 186518., 192878., 199334.,
      123716., 127956., 132260., 136628., 134308., 138676., 143108., 147604.,
      76487.,  79523.,  82607.,  85739.,  156886., 163054., 169318., 175678.,
      172774., 179134., 185590., 192142., 265221., 274905., 284733., 294705.,
      182134., 188686., 195334., 202078., 279261., 289233., 299349., 309609.,
      191494., 198238., 205078., 212014., 208918., 215854., 222886., 230014.,
      60986.,  63138.,  65322.,  67538.,  124580., 128948., 133380., 137876.,
      136196., 140692., 145252., 149876., 208334., 215174., 222110., 229142.,
      142436., 147060., 151748., 156500., 217694., 224726., 231854., 239078.,
      148676., 153428., 158244., 163124., 161316., 166196., 171140., 176148.,
      93671.,  97091.,  100559., 104075., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      72442.,  74850.,  77290.,  79762.,  147492., 152372., 157316., 162324.,
      161156., 166164., 171236., 176372., 245774., 253382., 261086., 268886.,
      167396., 172532., 177732., 182996., 255134., 262934., 270830., 278822.,
      173636., 178900., 184228., 189620., 188324., 193716., 199172., 204692.,
      105962., 108690., 111450., 114242., 215812., 221332., 226916., 232564.,
      229476., 235124., 240836., 246612., 350174., 358742., 367406., 376166.,
      238276., 244052., 249892., 255796., 363374., 372134., 380990., 389942.,
      247076., 252980., 258948., 264980., 261764., 267796., 273892., 280052.,
      25493.,  26729.,  27981.,  29249.,  51650.,  54154.,  56690.,  59258.,
      60018.,  62586.,  65186.,  67818.,  91087.,  94987.,  98935.,  102931.,
      61858.,  64490.,  67154.,  69850.,  93847.,  97843.,  101887., 105979.,
      63698.,  66394.,  69122.,  71882.,  72578.,  75338.,  78130.,  80954.,
      51594.,  54194.,  56826.,  59490.,  104516., 109780., 115108., 120500.,
      122276., 127668., 133124., 138644., 185534., 193718., 201998., 210374.,
      125956., 131476., 137060., 142708., 191054., 199430., 207902., 216470.,
      129636., 135284., 140996., 146772., 148420., 154196., 160036., 165940.,
      95354.,  98274.,  101226., 104210., 193316., 199220., 205188., 211220.,
      211076., 217108., 223204., 229364., 320654., 329798., 339038., 348374.,
      217316., 223476., 229700., 235988., 330014., 339350., 348782., 358310.,
      223556., 229844., 236196., 242612., 242340., 248756., 255236., 261780.,
      145223., 149795., 154415., 159083., 294358., 303598., 312934., 322366.,
      322534., 331966., 341494., 351118., 489861., 504153., 518589., 533169.,
      331894., 341518., 351238., 361054., 503901., 518481., 533205., 548073.,
      341254., 351070., 360982., 370990., 370966., 380974., 391078., 401278.,
      106810., 109986., 113194., 116434., 216228., 222644., 229124., 235668.,
      236036., 242580., 249188., 255860., 358094., 368006., 378014., 388118.,
      242276., 248948., 255684., 262484., 367454., 377558., 387758., 398054.,
      248516., 255316., 262180., 269108., 269348., 276276., 283268., 290324.,
      162407., 167363., 172367., 177419., 328726., 338734., 348838., 359038.,
      359974., 370174., 380470., 390862., 546021., 561465., 577053., 592785.,
      369334., 379726., 390214., 400798., 560061., 575793., 591669., 607689.,
      378694., 389278., 399958., 410734., 411478., 422254., 433126., 444094.,
      118266., 121698., 125162., 128658., 239140., 246068., 253060., 260116.,
      260996., 268052., 275172., 282356., 395534., 406214., 416990., 427862.,
      267236., 274420., 281668., 288980., 404894., 415766., 426734., 437798.,
      273476., 280788., 288164., 295604., 296356., 303796., 311300., 318868.,
      172266., 176018., 179802., 183618., 348420., 355988., 363620., 371316.,
      370276., 377972., 385732., 393556., 561374., 573014., 584750., 596582.,
      379076., 386900., 394788., 402740., 574574., 586406., 598334., 610358.,
      387876., 395828., 403844., 411924., 410756., 418836., 426980., 435188.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    61.,    113.,   29.,    81.,    149.,   233.,   82.,
      218.,   386.,   586.,   258.,   458.,   690.,   954.,   434.,   698.,
      994.,   1322.,  485.,   633.,   797.,   977.,   637.,   817.,   1013.,
      1225.,  0.,     0.,     0.,     0.,     125.,   305.,   501.,   713.,
      149.,   361.,   589.,   833.,   962.,   1418.,  1906.,  2426.,  1138.,
      1658.,  2210.,  2794.,  1314.,  1898.,  2514.,  3162.,  1245.,  1553.,
      1877.,  2217.,  1397.,  1737.,  2093.,  2465.,  0.,     0.,     0.,
      0.,     298.,   722.,   1178.,  1666.,  602.,   1090.,  1610.,  2162.,
      2532.,  3572.,  4676.,  5844.,  3396.,  4564.,  5796.,  7092.,  4260.,
      5556.,  6916.,  8340.,  3306.,  3986.,  4698.,  5442.,  3866.,  4610.,
      5386.,  6194.,  0.,     0.,     0.,     0.,     1818.,  2562.,  3338.,
      4146.,  2122.,  2930.,  3770.,  4642.,  6852.,  8532.,  10276., 12084.,
      7716.,  9524.,  11396., 13332., 8580.,  10516., 12516., 14580., 6106.,
      7106.,  8138.,  9202.,  6666.,  7730.,  8826.,  9954.,  0.,     0.,
      0.,     0.,     3338.,  4402.,  5498.,  6626.,  3642.,  4770.,  5930.,
      7122.,  11172., 13492., 15876., 18324., 12036., 14484., 16996., 19572.,
      12900., 15476., 18116., 20820., 8906.,  10226., 11578., 12962., 9466.,
      10850., 12266., 13714., 0.,     0.,     0.,     0.,     4253.,  4817.,
      5397.,  5993.,  4533.,  5129.,  5741.,  6369.,  11010., 12234., 13490.,
      14778., 11698., 12986., 14306., 15658., 12386., 13738., 15122., 16538.,
      7421.,  8113.,  8821.,  9545.,  7829.,  8553.,  9293.,  10049., 0.,
      0.,     0.,     0.,     5653.,  6377.,  7117.,  7873.,  5933.,  6689.,
      7461.,  8249.,  14450., 15994., 17570., 19178., 15138., 16746., 18386.,
      20058., 15826., 17498., 19202., 20938., 9461.,  10313., 11181., 12065.,
      9869.,  10753., 11653., 12569., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     101.,   249.,   413.,   593.,   637.,
      817.,   1013.,  1225.,  1298.,  1690.,  2114.,  2570.,  2498.,  2954.,
      3442.,  3962.,  3698.,  4218.,  4770.,  5354.,  2117.,  2393.,  2685.,
      2993.,  2781.,  3089.,  3413.,  3753.,  0.,     0.,     0.,     0.,
      2781.,  3089.,  3413.,  3753.,  3317.,  3657.,  4013.,  4385.,  7298.,
      8010.,  8754.,  9530.,  8498.,  9274.,  10082., 10922., 9698.,  10538.,
      11410., 12314., 5437.,  5873.,  6325.,  6793.,  6101.,  6569.,  7053.,
      7553.,  0.,     0.,     0.,     0.,     5610.,  6290.,  7002.,  7746.,
      6938.,  7682.,  8458.,  9266.,  15204., 16756., 18372., 20052., 18116.,
      19796., 21540., 23348., 21028., 22836., 24708., 26644., 11690., 12626.,
      13594., 14594., 13274., 14274., 15306., 16370., 0.,     0.,     0.,
      0.,     12250., 13250., 14282., 15346., 13578., 14642., 15738., 16866.,
      29764., 31956., 34212., 36532., 32676., 34996., 37380., 39828., 35588.,
      38036., 40548., 43124., 19610., 20866., 22154., 23474., 21194., 22514.,
      23866., 25250., 0.,     0.,     0.,     0.,     18890., 20210., 21562.,
      22946., 20218., 21602., 23018., 24466., 44324., 47156., 50052., 53012.,
      47236., 50196., 53220., 56308., 50148., 53236., 56388., 59604., 27530.,
      29106., 30714., 32354., 29114., 30754., 32426., 34130., 0.,     0.,
      0.,     0.,     12029., 12721., 13429., 14153., 12821., 13545., 14285.,
      15041., 27586., 29066., 30578., 32122., 29298., 30842., 32418., 34026.,
      31010., 32618., 34258., 35930., 16733., 17553., 18389., 19241., 17653.,
      18505., 19373., 20257., 0.,     0.,     0.,     0.,     15989., 16841.,
      17709., 18593., 16781., 17665., 18565., 19481., 36146., 37946., 39778.,
      41642., 37858., 39722., 41618., 43546., 39570., 41498., 43458., 45450.,
      21333., 22313., 23309., 24321., 22253., 23265., 24293., 25337., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     197.,
      473.,   765.,   1073.,  1245.,  1553.,  1877.,  2217.,  2514.,  3162.,
      3842.,  4554.,  4738.,  5450.,  6194.,  6970.,  6962.,  7738.,  8546.,
      9386.,  3749.,  4153.,  4573.,  5009.,  4925.,  5361.,  5813.,  6281.,
      0.,     0.,     0.,     0.,     5437.,  5873.,  6325.,  6793.,  6485.,
      6953.,  7437.,  7937.,  13634., 14602., 15602., 16634., 15858., 16890.,
      17954., 19050., 18082., 19178., 20306., 21466., 9629.,  10193., 10773.,
      11369., 10805., 11401., 12013., 12641., 0.,     0.,     0.,     0.,
      10922., 11858., 12826., 13826., 13274., 14274., 15306., 16370., 27876.,
      29940., 32068., 34260., 32836., 35028., 37284., 39604., 37796., 40116.,
      42500., 44948., 20074., 21266., 22490., 23746., 22682., 23938., 25226.,
      26546., 0.,     0.,     0.,     0.,     22682., 23938., 25226., 26546.,
      25034., 26354., 27706., 29090., 52676., 55380., 58148., 60980., 57636.,
      60468., 63364., 66324., 62596., 65556., 68580., 71668., 33114., 34626.,
      36170., 37746., 35722., 37298., 38906., 40546., 0.,     0.,     0.,
      0.,     34442., 36018., 37626., 39266., 36794., 38434., 40106., 41810.,
      77476., 80820., 84228., 87700., 82436., 85908., 89444., 93044., 87396.,
      90996., 94660., 98388., 46154., 47986., 49850., 51746., 48762., 50658.,
      52586., 54546., 0.,     0.,     0.,     0.,     19805., 20625., 21461.,
      22313., 21109., 21961., 22829., 23713., 44162., 45898., 47666., 49466.,
      46898., 48698., 50530., 52394., 49634., 51498., 53394., 55322., 26045.,
      26993., 27957., 28937., 27477., 28457., 29453., 30465., 0.,     0.,
      0.,     0.,     26325., 27305., 28301., 29313., 27629., 28641., 29669.,
      30713., 57842., 59898., 61986., 64106., 60578., 62698., 64850., 67034.,
      63314., 65498., 67714., 69962., 33205., 34313., 35437., 36577., 34637.,
      35777., 36933., 38105., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      43356.,   49020.,   54940.,   61116.,   6716.,    11100.,   15740.,
      20636.,   23992.,   33272.,   43064.,   53368.,   34872.,   45176.,
      55992.,   67320.,   69172.,   85396.,   102388.,  120148.,  64184.,
      75512.,   87352.,   99704.,   113140.,  130900.,  149428.,  168724.,
      93496.,   105848.,  118712.,  132088.,  112568.,  125944.,  139832.,
      154232.,  28796.,   35740.,   42940.,   50396.,   78392.,   92792.,
      107704.,  123128.,  89272.,   104696.,  120632.,  137080.,  166132.,
      190036.,  214708.,  240148.,  139064.,  155512.,  172472.,  189944.,
      240820.,  266260.,  292468.,  319444.,  188856.,  206328.,  224312.,
      242808.,  207928.,  226424.,  245432.,  264952.,  60538.,   72490.,
      84826.,   97546.,   152276.,  176948.,  202388.,  228596.,  180884.,
      207092.,  234068.,  261812.,  319662.,  360126.,  401742.,  444510.,
      255572.,  283316.,  311828.,  341108.,  431694.,  474462.,  518382.,
      563454.,  330260.,  359540.,  389588.,  420404.,  371156.,  401972.,
      433556.,  465908.,  120188.,  129180.,  138428.,  147932.,  261176.,
      279672.,  298680.,  318200.,  288440.,  307960.,  327992.,  348536.,
      464884.,  494932.,  525748.,  557332.,  338232.,  358776.,  379832.,
      401400.,  539572.,  571156.,  603508.,  636628.,  388024.,  409592.,
      431672.,  454264.,  423480.,  446072.,  469176.,  492792.,  197626.,
      212650.,  228058.,  243850.,  426452.,  457268.,  488852.,  521204.,
      479636.,  511988.,  545108.,  578996.,  767790.,  817470.,  868302.,
      920286.,  554324.,  588212.,  622868.,  658292.,  879822.,  931806.,
      984942.,  1039230., 629012.,  664436.,  700628.,  737588.,  694484.,
      731444.,  769172.,  807668.,  211580.,  222620.,  233916.,  245468.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      315580.,  329180.,  343036.,  357148.,  662200.,  689912.,  718136.,
      746872.,  705848.,  734584.,  763832.,  793592.,  1106356., 1150228.,
      1194868., 1240276., 776120.,  805880.,  836152.,  866936.,  1211764.,
      1257172., 1303348., 1350292., 846392.,  877176.,  908472.,  940280.,
      898232.,  930040.,  962360.,  995192.,  101854.,  107630.,  113534.,
      119566.,  208988.,  220796.,  232860.,  245180.,  243100.,  255420.,
      267996.,  280828.,  373082.,  391946.,  411194.,  430826.,  257756.,
      270588.,  283676.,  297020.,  395066.,  414698.,  434714.,  455114.,
      272412.,  285756.,  299356.,  313212.,  310620.,  324476.,  338588.,
      352956.,  208444.,  221020.,  233852.,  246940.,  427448.,  453112.,
      479288.,  505976.,  503864.,  530552.,  557752.,  585464.,  772660.,
      813460.,  855028.,  897364.,  533176.,  560888.,  589112.,  617848.,
      816628.,  858964.,  902068.,  945940.,  562488.,  591224.,  620472.,
      650232.,  647096.,  676856.,  707128.,  737912.,  394364.,  409500.,
      424892.,  440540.,  809528.,  840312.,  871608.,  903416.,  885944.,
      917752.,  950072.,  982904.,  1361140., 1409620., 1458868., 1508884.,
      935736.,  968568.,  1001912., 1035768., 1435828., 1485844., 1536628.,
      1588180., 985528.,  1019384., 1053752., 1088632., 1070136., 1105016.,
      1140408., 1176312., 608890.,  633130.,  657754.,  682762.,  1248980.,
      1298228., 1348244., 1399028., 1375892., 1426676., 1478228., 1530548.,
      2112174., 2189502., 2267982., 2347614., 1450580., 1502900., 1555988.,
      1609844., 2224206., 2303838., 2384622., 2466558., 1525268., 1579124.,
      1633748., 1689140., 1664468., 1719860., 1776020., 1832948., 485756.,
      502940.,  520380.,  538076.,  992312.,  1027192., 1062584., 1098488.,
      1085112., 1121016., 1157432., 1194360., 1659892., 1714516., 1769908.,
      1826068., 1134904., 1171832., 1209272., 1247224., 1734580., 1790740.,
      1847668., 1905364., 1184696., 1222648., 1261112., 1300088., 1285688.,
      1324664., 1364152., 1404152., 745978.,  773290.,  800986.,  829066.,
      1523156., 1578548., 1634708., 1691636., 1674644., 1731572., 1789268.,
      1847732., 2560302., 2646846., 2734542., 2823390., 1749332., 1807796.,
      1867028., 1927028., 2672334., 2761182., 2851182., 2942334., 1824020.,
      1884020., 1944788., 2006324., 1987796., 2049332., 2111636., 2174708.,
      577148.,  596380.,  615868.,  635612.,  1175096., 1214072., 1253560.,
      1293560., 1284280., 1324280., 1364792., 1405816., 1958644., 2019412.,
      2080948., 2143252., 1334072., 1375096., 1416632., 1458680., 2033332.,
      2095636., 2158708., 2222548., 1383864., 1425912., 1468472., 1511544.,
      1501240., 1544312., 1587896., 1631992., 844988.,  866780.,  888828.,
      911132.,  1721016., 1765112., 1809720., 1854840., 1830200., 1875320.,
      1920952., 1967096., 2792884., 2861332., 2930548., 3000532., 1900472.,
      1946616., 1993272., 2040440., 2898292., 2968276., 3039028., 3110548.,
      1970744., 2017912., 2065592., 2113784., 2088120., 2136312., 2185016.,
      2234232., 202718.,  212590.,  222590.,  232718.,  410716.,  430716.,
      450972.,  471484.,  477596.,  498108.,  518876.,  539900.,  724826.,
      755978.,  787514.,  819434.,  492252.,  513276.,  534556.,  556092.,
      746810.,  778730.,  811034.,  843722.,  506908.,  528444.,  550236.,
      572284.,  577884.,  599932.,  622236.,  644796.,  410172.,  430940.,
      451964.,  473244.,  830904.,  872952.,  915512.,  958584.,  972856.,
      1015928., 1059512., 1103608., 1476148., 1541524., 1607668., 1674580.,
      1002168., 1046264., 1090872., 1135992., 1520116., 1587028., 1654708.,
      1723156., 1031480., 1076600., 1122232., 1168376., 1181624., 1227768.,
      1274424., 1321592., 759932.,  783260.,  806844.,  830684.,  1540664.,
      1587832., 1635512., 1683704., 1682616., 1730808., 1779512., 1828728.,
      2556148., 2629204., 2703028., 2777620., 1732408., 1781624., 1831352.,
      1881592., 2630836., 2705428., 2780788., 2856916., 1782200., 1832440.,
      1883192., 1934456., 1932344., 1983608., 2035384., 2087672., 1157242.,
      1193770., 1230682., 1267978., 2345684., 2419508., 2494100., 2569460.,
      2570900., 2646260., 2722388., 2799284., 3904686., 4018878., 4134222.,
      4250718., 2645588., 2722484., 2800148., 2878580., 4016718., 4133214.,
      4250862., 4369662., 2720276., 2798708., 2877908., 2957876., 2957780.,
      3037748., 3118484., 3199988., 851324.,  876700.,  902332.,  928220.,
      1723448., 1774712., 1826488., 1878776., 1881784., 1934072., 1986872.,
      2040184., 2854900., 2934100., 3014068., 3094804., 1931576., 1984888.,
      2038712., 2093048., 2929588., 3010324., 3091828., 3174100., 1981368.,
      2035704., 2090552., 2145912., 2147896., 2203256., 2259128., 2315512.,
      1294330., 1333930., 1373914., 1414282., 2619860., 2699828., 2780564.,
      2862068., 2869652., 2951156., 3033428., 3116468., 4352814., 4476222.,
      4600782., 4726494., 2944340., 3027380., 3111188., 3195764., 4464846.,
      4590558., 4717422., 4845438., 3019028., 3103604., 3188948., 3275060.,
      3281108., 3367220., 3454100., 3541748., 942716.,  970140.,  997820.,
      1025756., 1906232., 1961592., 2017464., 2073848., 2080952., 2137336.,
      2194232., 2251640., 3153652., 3238996., 3325108., 3411988., 2130744.,
      2188152., 2246072., 2304504., 3228340., 3315220., 3402868., 3491284.,
      2180536., 2238968., 2297912., 2357368., 2363448., 2422904., 2482872.,
      2543352., 1374396., 1404380., 1434620., 1465116., 2779832., 2840312.,
      2901304., 2962808., 2954552., 3016056., 3078072., 3140600., 4479412.,
      4572436., 4666228., 4760788., 3024824., 3087352., 3150392., 3213944.,
      4584820., 4679380., 4774708., 4870804., 3095096., 3158648., 3222712.,
      3287288., 3278008., 3342584., 3407672., 3473272.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    446.,    846.,    190.,    590.,    1118.,   1774.,
      540.,    1596.,   2908.,   4476.,   1884.,   3452.,   5276.,   7356.,
      3228.,   5308.,   7644.,   10236.,  3742.,   4910.,   6206.,   7630.,
      4926.,   6350.,   7902.,   9582.,   0.,      0.,      0.,      0.,
      830.,    2254.,   3806.,   5486.,   990.,    2670.,   4478.,   6414.,
      7260.,   10876.,  14748.,  18876.,  8604.,   12732.,  17116.,  21756.,
      9948.,   14588.,  19484.,  24636.,  9662.,   12110.,  14686.,  17390.,
      10846.,  13550.,  16382.,  19342.,  0.,      0.,      0.,      0.,
      1980.,   5340.,   8956.,   12828.,  4348.,   8220.,   12348.,  16732.,
      19256.,  27512.,  36280.,  45560.,  26040.,  35320.,  45112.,  55416.,
      32824.,  43128.,  53944.,  65272.,  25788.,  31196.,  36860.,  42780.,
      30204.,  36124.,  42300.,  48732.,  0.,      0.,      0.,      0.,
      13820.,  19740.,  25916.,  32348.,  16188.,  22620.,  29308.,  36252.,
      53176.,  66552.,  80440.,  94840.,  59960.,  74360.,  89272.,  104696.,
      66744.,  82168.,  98104.,  114552., 47868.,  55836.,  64060.,  72540.,
      52284.,  60764.,  69500.,  78492.,  0.,      0.,      0.,      0.,
      25660.,  34140.,  42876.,  51868.,  28028.,  37020.,  46268.,  55772.,
      87096.,  105592., 124600., 144120., 93880.,  113400., 133432., 153976.,
      100664., 121208., 142264., 163832., 69948.,  80476.,  91260.,  102300.,
      74364.,  85404.,  96700.,  108252., 0.,      0.,      0.,      0.,
      33470.,  37966.,  42590.,  47342.,  35678.,  40430.,  45310.,  50318.,
      86876.,  96636.,  106652., 116924., 92316.,  102588., 113116., 123900.,
      97756.,  108540., 119580., 130876., 58686.,  64206.,  69854.,  75630.,
      61918.,  67694.,  73598.,  79630.,  0.,      0.,      0.,      0.,
      44510.,  50286.,  56190.,  62222.,  46718.,  52750.,  58910.,  65198.,
      114076., 126396., 138972., 151804., 119516., 132348., 145436., 158780.,
      124956., 138300., 151900., 165756., 74846.,  81646.,  88574.,  95630.,
      78078.,  85134.,  92318.,  99630.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      670.,    1838.,   3134.,   4558.,   4926.,   6350.,   7902.,   9582.,
      10012.,  13116.,  16476.,  20092.,  19548.,  23164.,  27036.,  31164.,
      29084.,  33212.,  37596.,  42236.,  16670.,  18862.,  21182.,  23630.,
      21950.,  24398.,  26974.,  29678.,  0.,      0.,      0.,      0.,
      21950.,  24398.,  26974.,  29678.,  26206.,  28910.,  31742.,  34702.,
      57692.,  63356.,  69276.,  75452.,  67228.,  73404.,  79836.,  86524.,
      76764.,  83452.,  90396.,  97596.,  43070.,  46542.,  50142.,  53870.,
      48350.,  52078.,  55934.,  59918.,  0.,      0.,      0.,      0.,
      44220.,  49628.,  55292.,  61212.,  54780.,  60700.,  66876.,  73308.,
      120120., 132472., 145336., 158712., 143288., 156664., 170552., 184952.,
      166456., 180856., 195768., 211192., 92604.,  100060., 107772., 115740.,
      105212., 113180., 121404., 129884., 0.,      0.,      0.,      0.,
      97020.,  104988., 113212., 121692., 107580., 116060., 124796., 133788.,
      235960., 253432., 271416., 289912., 259128., 277624., 296632., 316152.,
      282296., 301816., 321848., 342392., 155644., 165660., 175932., 186460.,
      168252., 178780., 189564., 200604., 0.,      0.,      0.,      0.,
      149820., 160348., 171132., 182172., 160380., 171420., 182716., 194268.,
      351800., 374392., 397496., 421112., 374968., 398584., 422712., 447352.,
      398136., 422776., 447928., 473592., 218684., 231260., 244092., 257180.,
      231292., 244380., 257724., 271324., 0.,      0.,      0.,      0.,
      95550.,  101070., 106718., 112494., 101854., 107630., 113534., 119566.,
      219228., 231036., 243100., 255420., 232860., 245180., 257756., 270588.,
      246492., 259324., 272412., 285756., 133054., 139598., 146270., 153070.,
      140382., 147182., 154110., 161166., 0.,      0.,      0.,      0.,
      127070., 133870., 140798., 147854., 133374., 140430., 147614., 154926.,
      287388., 301756., 316380., 331260., 301020., 315900., 331036., 346428.,
      314652., 330044., 345692., 361596., 169694., 177518., 185470., 193550.,
      177022., 185102., 193310., 201646., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      1310.,   3502.,   5822.,   8270.,   9662.,   12110.,  14686.,  17390.,
      19484.,  24636.,  30044.,  35708.,  37212.,  42876.,  48796.,  54972.,
      54940.,  61116.,  67548.,  74236.,  29598.,  32814.,  36158.,  39630.,
      38974.,  42446.,  46046.,  49774.,  0.,      0.,      0.,      0.,
      43070.,  46542.,  50142.,  53870.,  51422.,  55150.,  59006.,  62990.,
      108124., 115836., 123804., 132028., 125852., 134076., 142556., 151292.,
      143580., 152316., 161308., 170556., 76478.,  80974.,  85598.,  90350.,
      85854.,  90606.,  95486.,  100494., 0.,      0.,      0.,      0.,
      86460.,  93916.,  101628., 109596., 105212., 113180., 121404., 129884.,
      220984., 237432., 254392., 271864., 260536., 278008., 295992., 314488.,
      300088., 318584., 337592., 357112., 159420., 168924., 178684., 188700.,
      180220., 190236., 200508., 211036., 0.,      0.,      0.,      0.,
      180220., 190236., 200508., 211036., 198972., 209500., 220284., 231324.,
      418744., 440312., 462392., 484984., 458296., 480888., 503992., 527608.,
      497848., 521464., 545592., 570232., 263420., 275484., 287804., 300380.,
      284220., 296796., 309628., 322716., 0.,      0.,      0.,      0.,
      273980., 286556., 299388., 312476., 292732., 305820., 319164., 332764.,
      616504., 643192., 670392., 698104., 656056., 683768., 711992., 740728.,
      695608., 724344., 753592., 783352., 367420., 382044., 396924., 412060.,
      388220., 403356., 418748., 434396., 0.,      0.,      0.,      0.,
      157630., 164174., 170846., 177646., 168030., 174830., 181758., 188814.,
      351580., 365436., 379548., 393916., 373404., 387772., 402396., 417276.,
      395228., 410108., 425244., 440636., 207422., 214990., 222686., 230510.,
      218846., 226670., 234622., 242702., 0.,      0.,      0.,      0.,
      209630., 217454., 225406., 233486., 220030., 228110., 236318., 244654.,
      460700., 477116., 493788., 510716., 482524., 499452., 516636., 534076.,
      504348., 521788., 539484., 557436., 264542., 273390., 282366., 291470.,
      275966., 285070., 294302., 303662., 0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      434.,  900.,  956.,  1483., 1028., 1591., 1100., 1699., 1172., 1240.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  572.,  391.,  440.,
      304.,  620.,  716.,  1093., 748.,  1141., 780.,  1189., 812.,  920.,
      539.,  1100., 1196., 1828., 1248., 1906., 1300., 1984., 1352., 1460.,
      836.,  1705., 1864., 2847., 1942., 2964., 2020., 3081., 2098., 2275.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1114., 2260., 2396., 3643., 2468., 3751., 2540., 3859., 2612., 2760.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  1052., 711.,  800.,
      584.,  1180., 1356., 2053., 1388., 2101., 1420., 2149., 1452., 1640.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1556., 3145., 3424., 5187., 3502., 5304., 3580., 5421., 3658., 3955.,
      1139., 2300., 2496., 3778., 2548., 3856., 2600., 3934., 2652., 2860.,
      1736., 3505., 3814., 5772., 3892., 5889., 3970., 6006., 4048., 4375.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1794., 3620., 3836., 5803., 3908., 5911., 3980., 6019., 4052., 4280.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   14.,   14.,   19.,   12.,   15.,   0.,   6.,
      7.,   20.,  23.,  44.,  39.,   44.,   27.,   30.,   0.,    15.,  20.,
      52.,  64.,  115., 96.,  112.,  66.,   75.,   0.,    40.,   45.,  112.,
      124., 220., 176., 192., 111.,  120.,  0.,    65.,   70.,   172., 184.,
      325., 256., 272., 156., 165.,  0.,    64.,   68.,   152.,  161., 266.,
      197., 208., 114., 120., 0.,    84.,   88.,   197.,  206.,  341., 252.,
      263., 144., 150., 0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   7.,   14.,   29.,   44.,   68.,   50.,   67.,  36.,
      45.,  0.,   42.,  49.,  104.,  119.,  188.,  135.,  152.,  81.,  90.,
      0.,   87.,  104., 220., 256.,  403.,  288.,  328.,  174.,  195., 0.,
      172., 189., 400., 436., 688.,  488.,  528.,  279.,  300.,  0.,   257.,
      274., 580., 616., 973., 688.,  728.,  384.,  405.,  0.,    160., 170.,
      356., 377., 590., 413., 436.,  228.,  240.,  0.,    210.,  220., 461.,
      482., 755., 528., 551., 288.,  300.,  0.,    0.,    0.,    0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    13.,   26.,   53.,   80.,  122.,
      86.,  115., 60.,  75.,  0.,    78.,   91.,   188.,  215.,  332., 231.,
      260., 135., 150., 0.,   159.,  188.,  388.,  448.,  691.,  480., 544.,
      282., 315., 0.,   304., 333.,  688.,  748.,  1156., 800.,  864., 447.,
      480., 0.,   449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,
      0.,   256., 272., 560., 593.,  914.,  629.,  664.,  342.,  360., 0.,
      336., 352., 725., 758., 1169., 804.,  839.,  432.,  450.,  0.,   0.,
      0.,   0.,   0.,   0.,   0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3352.,  6956.,
      7396.,  11480., 7964.,  12332., 8532.,  13184., 9100.,  9636.,  1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  4387.,  3000.,  3388.,
      2312.,  4716.,  5476.,  8360.,  5724.,  8732.,  5972.,  9104.,  6220.,
      7076.,  4172.,  8516.,  9276.,  14180., 9684.,  14792., 10092., 15404.,
      10500., 11356., 6463.,  13184., 14444., 22065., 15056., 22983., 15668.,
      23901., 16280., 17684., 5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 8712.,  17676., 18756.,
      28520., 19324., 29372., 19892., 30224., 20460., 21636., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  8107.,  5480.,  6188.,  4472.,
      9036.,  10436., 15800., 10684., 16172., 10932., 16544., 11180., 12676.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 12103., 24464., 26684., 40425., 27296., 41343., 27908., 42261.,
      28520., 30884., 8872.,  17916., 19476., 29480., 19884., 30092., 20292.,
      30704., 20700., 22356., 13513., 27284., 29744., 45015., 30356., 45933.,
      30968., 46851., 31580., 34184., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14072., 28396., 30116., 45560.,
      30684., 46412., 31252., 47264., 31820., 33636.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   85.,    92.,   128.,  83.,   105.,  0.,
      35.,   41.,   128.,  148.,  295.,   272.,  308.,  193.,  215.,  0.,
      88.,   124.,  340.,  428.,  788.,   676.,  796.,  476.,  544.,  0.,
      268.,  304.,  780.,  868.,  1568.,  1276., 1396., 816.,  884.,  0.,
      448.,  484.,  1220., 1308., 2348.,  1876., 1996., 1156., 1224., 0.,
      473.,  503.,  1132., 1200., 1993.,  1484., 1568., 863.,  909.,  0.,
      623.,  653.,  1472., 1540., 2563.,  1904., 1988., 1093., 1139., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  481.,   356.,  488.,  263.,  333.,  0.,
      311.,  365.,  776.,  892.,  1411.,  1016., 1148., 613.,  683.,  0.,
      640.,  772.,  1636., 1916., 3020.,  2164., 2476., 1316., 1480., 0.,
      1300., 1432., 3036., 3316., 5240.,  3724., 4036., 2136., 2300., 0.,
      1960., 2092., 4436., 4716., 7460.,  5284., 5596., 2956., 3120., 0.,
      1229., 1307., 2740., 2904., 4549.,  3188., 3368., 1763., 1857., 0.,
      1619., 1697., 3560., 3724., 5839.,  4088., 4268., 2233., 2327., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  877.,   620.,  848.,  443.,  561.,  0.,
      587.,  689.,  1424., 1636., 2527.,  1760., 1988., 1033., 1151., 0.,
      1192., 1420., 2932., 3404., 5252.,  3652., 4156., 2156., 2416., 0.,
      2332., 2560., 5292., 5764., 8912.,  6172., 6676., 3456., 3716., 0.,
      3472., 3700., 7652., 8124., 12572., 8692., 9196., 4756., 5016., 0.,
      1985., 2111., 4348., 4608., 7105.,  4892., 5168., 2663., 2805., 0.,
      2615., 2741., 5648., 5908., 9115.,  6272., 6548., 3373., 3515., 0.,
      0.,    0.,    0.,    0.,    0.,     0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   5066.,
      3972.,   4500.,   1060.,   2840.,   3768.,   6796.,   5720.,   9724.,
      7672.,   12652.,  9624.,   11320.,  3060.,   7480.,   8408.,   14716.,
      11640.,  19564.,  14872.,  24412.,  18104.,  19800.,  6170.,   14380.,
      16732.,  28254.,  21580.,  35526.,  26428.,  42798.,  31276.,  34780.,
      10500.,  22360.,  24568.,  38956.,  27800.,  43804.,  31032.,  48652.,
      34264.,  37240.,  17330.,  36700.,  40972.,  64614.,  45820.,  71886.,
      50668.,  79158.,  55516.,  60940.,  17940.,  37240.,  40728.,  63196.,
      43960.,  68044.,  47192.,  72892.,  50424.,  54680.,  26340.,  54680.,
      58168.,  90316.,  62680.,  97084.,  67192.,  103852., 71704.,  75960.,
      8750.,   17860.,  20564.,  31418.,  21540.,  32882.,  22516.,  34346.,
      23492.,  26580.,  18020.,  36760.,  42808.,  65356.,  44760.,  68284.,
      46712.,  71212.,  48664.,  55480.,  32820.,  67000.,  73048.,  111676.,
      76280.,  116524., 79512.,  121372., 82744.,  89560.,  50810.,  103660.,
      113692., 173694., 118540., 180966., 123388., 188238., 128236., 139420.,
      40260.,  81880.,  89208.,  135916., 92440.,  140764., 95672.,  145612.,
      98904.,  107000., 61970.,  125980., 137932., 210054., 142780., 217326.,
      147628., 224598., 152476., 165580., 47700.,  96760.,  105368., 160156.,
      108600., 165004., 111832., 169852., 115064., 124440., 68900.,  139800.,
      148408., 225676., 152920., 232444., 157432., 239212., 161944., 171320.,
      17230.,  34820.,  40084.,  60698.,  41060.,  62162.,  42036.,  63626.,
      43012.,  48660.,  34980.,  70680.,  81848.,  123916., 83800.,  126844.,
      85752.,  129772., 87704.,  99640.,  62580.,  126520., 137688., 208636.,
      140920., 213484., 144152., 218332., 147384., 159320., 95450.,  192940.,
      210652., 319134., 215500., 326406., 220348., 333678., 225196., 244060.,
      70020.,  141400., 153848., 232876., 157080., 237724., 160312., 242572.,
      163544., 176760., 106610., 215260., 234892., 355494., 239740., 362766.,
      244588., 370038., 249436., 270220., 77460.,  156280., 170008., 257116.,
      173240., 261964., 176472., 266812., 179704., 194200., 111460., 224920.,
      238648., 361036., 243160., 367804., 247672., 374572., 252184., 266680.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   578.,   660.,   932.,   614.,   782.,
      0.,     230.,   270.,   900.,   1044.,  2138.,  2020.,  2292.,  1454.,
      1622.,  0.,     580.,   852.,   2424.,  3096.,  5788.,  5048.,  5976.,
      3604.,  4132.,  0.,     1940.,  2212.,  5784.,  6456.,  11788., 9688.,
      10616., 6244.,  6772.,  0.,     3300.,  3572.,  9144.,  9816.,  17788.,
      14328., 15256., 8884.,  9412.,  0.,     3630.,  3862.,  8724.,  9252.,
      15410., 11508., 12164., 6710.,  7070.,  0.,     4790.,  5022.,  11364.,
      11892., 19850., 14788., 15444., 8510.,  8870.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3602.,  2676.,  3716.,  2006.,  2558.,  0.,
      2390.,  2814.,  5988.,  6900.,  10922., 7876.,  8916.,  4766.,  5318.,
      0.,     4900.,  5940.,  12600., 14808., 23356., 16760., 19224., 10228.,
      11524., 0.,     10100., 11140., 23640., 25848., 40876., 29080., 31544.,
      16708., 18004., 0.,     15300., 16340., 34680., 36888., 58396., 41400.,
      43864., 23188., 24484., 0.,     9630.,  10246., 21492., 22788., 35714.,
      25044., 26468., 13862., 14606., 0.,     12710., 13326., 27972., 29268.,
      45914., 32164., 33588., 17582., 18326., 0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6626.,  4692.,  6500.,  3398.,  4334.,  0.,     4550.,
      5358.,  11076., 12756., 19706., 13732., 15540., 8078.,  9014.,  0.,
      9220.,  11028., 22776., 26520., 40924., 28472., 32472., 16852., 18916.,
      0.,     18260., 20068., 41496., 45240., 69964., 48472., 52472., 27172.,
      29236., 0.,     27300., 29108., 60216., 63960., 99004., 68472., 72472.,
      37492., 39556., 0.,     15630., 16630., 34260., 36324., 56018., 38580.,
      40772., 21014., 22142., 0.,     20630., 21630., 44580., 46644., 71978.,
      49540., 51732., 26654., 27782., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   299.,   368.,   236.,   284.,
      268.,   320.,   56.,    96.,    156.,   240.,   212.,   304.,   388.,
      532.,   332.,   432.,   568.,   724.,   452.,   560.,   748.,   916.,
      572.,   688.,   676.,   800.,   176.,   236.,   436.,   560.,   492.,
      624.,   868.,   1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,
      1468.,  1696.,  1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,
      1060.,  988.,   1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,
      1588.,  1840.,  2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,
      716.,   1356.,  1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,
      2668.,  2944.,  1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,
      2480.,  1049.,  1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,
      2788.,  3088.,  4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,
      3712.,  3724.,  4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,
      3868.,  4192.,  2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,
      4816.,  3092.,  3328.,  3356.,  3600.,  1616.,  1736.,  3356.,  3600.,
      3572.,  3824.,  5548.,  5932.,  3852.,  4112.,  5968.,  6364.,  4132.,
      4400.,  6388.,  6796.,  4412.,  4688.,  4676.,  4960.,  533.,   588.,
      1088.,  1200.,  1256.,  1372.,  1919.,  2096.,  1316.,  1436.,  2009.,
      2192.,  1376.,  1500.,  2099.,  2288.,  1436.,  1564.,  1628.,  1760.,
      1096.,  1216.,  2236.,  2480.,  2612.,  2864.,  3988.,  4372.,  2732.,
      2992.,  4168.,  4564.,  2852.,  3120.,  4348.,  4756.,  2972.,  3248.,
      3396.,  3680.,  2016.,  2156.,  4116.,  4400.,  4492.,  4784.,  6868.,
      7312.,  4692.,  4992.,  7168.,  7624.,  4892.,  5200.,  7468.,  7936.,
      5092.,  5408.,  5516.,  5840.,  3119.,  3344.,  6364.,  6820.,  6988.,
      7456.,  10677., 11388., 7288.,  7768.,  11127., 11856., 7588.,  8080.,
      11577., 12324., 7888.,  8392.,  8584.,  9100.,  2476.,  2636.,  5036.,
      5360.,  5492.,  5824.,  8368.,  8872.,  5692.,  6032.,  8668.,  9184.,
      5892.,  6240.,  8968.,  9496.,  6092.,  6448.,  6596.,  6960.,  3809.,
      4064.,  7744.,  8260.,  8488.,  9016.,  12927., 13728., 8788.,  9328.,
      13377., 14196., 9088.,  9640.,  13827., 14664., 9388.,  9952.,  10204.,
      10780., 2936.,  3116.,  5956.,  6320.,  6492.,  6864.,  9868.,  10432.,
      6692.,  7072.,  10168., 10744., 6892.,  7280.,  10468., 11056., 7092.,
      7488.,  7676.,  8080.,  4256.,  4456.,  8636.,  9040.,  9172.,  9584.,
      13948., 14572., 9452.,  9872.,  14368., 15004., 9732.,  10160., 14788.,
      15436., 10012., 10448., 10596., 11040., 1053.,  1148.,  2128.,  2320.,
      2456.,  2652.,  3719.,  4016.,  2516.,  2716.,  3809.,  4112.,  2576.,
      2780.,  3899.,  4208.,  2636.,  2844.,  2988.,  3200.,  2136.,  2336.,
      4316.,  4720.,  5012.,  5424.,  7588.,  8212.,  5132.,  5552.,  7768.,
      8404.,  5252.,  5680.,  7948.,  8596.,  5372.,  5808.,  6116.,  6560.,
      3856.,  4076.,  7796.,  8240.,  8492.,  8944.,  12868., 13552., 8692.,
      9152.,  13168., 13864., 8892.,  9360.,  13468., 14176., 9092.,  9568.,
      9836.,  10320., 5879.,  6224.,  11884., 12580., 12988., 13696., 19677.,
      20748., 13288., 14008., 20127., 21216., 13588., 14320., 20577., 21684.,
      13888., 14632., 15064., 15820., 4316.,  4556.,  8716.,  9200.,  9492.,
      9984.,  14368., 15112., 9692.,  10192., 14668., 15424., 9892.,  10400.,
      14968., 15736., 10092., 10608., 10916., 11440., 6569.,  6944.,  13264.,
      14020., 14488., 15256., 21927., 23088., 14788., 15568., 22377., 23556.,
      15088., 15880., 22827., 24024., 15388., 16192., 16684., 17500., 4776.,
      5036.,  9636.,  10160., 10492., 11024., 15868., 16672., 10692., 11232.,
      16168., 16984., 10892., 11440., 16468., 17296., 11092., 11648., 11996.,
      12560., 6896.,  7176.,  13916., 14480., 14772., 15344., 22348., 23212.,
      15052., 15632., 22768., 23644., 15332., 15920., 23188., 24076., 15612.,
      16208., 16516., 17120.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      188.,  260.,  204.,  280.,  532.,  688.,  572.,  736.,  1048., 1300.,
      852.,  1024., 908.,  1088., 532.,  624.,  564.,  660.,  0.,    0.,
      217.,  256.,  231.,  272.,  524.,  608.,  556.,  644.,  929.,  1064.,
      696.,  788.,  736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,
      287.,  336.,  301.,  352.,  684.,  788.,  716.,  824.,  1199., 1364.,
      896.,  1008., 936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  209.,  272.,
      156.,  200.,  220.,  268.,  119.,  144.,  153.,  180.,  0.,    0.,
      143.,  168.,  169.,  196.,  360.,  416.,  416.,  476.,  659.,  752.,
      476.,  540.,  540.,  608.,  289.,  324.,  323.,  360.,  0.,    0.,
      292.,  348.,  356.,  416.,  756.,  880.,  892.,  1024., 1408., 1612.,
      1012., 1152., 1164., 1312., 620.,  696.,  700.,  780.,  0.,    0.,
      612.,  688.,  676.,  756.,  1436., 1600., 1572., 1744., 2488., 2752.,
      1772., 1952., 1924., 2112., 1020., 1116., 1100., 1200., 0.,    0.,
      932.,  1028., 996.,  1096., 2116., 2320., 2252., 2464., 3568., 3892.,
      2532., 2752., 2684., 2912., 1420., 1536., 1500., 1620., 0.,    0.,
      589.,  640.,  627.,  680.,  1316., 1424., 1396., 1508., 2189., 2360.,
      1536., 1652., 1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,
      779.,  840.,  817.,  880.,  1716., 1844., 1796., 1928., 2819., 3020.,
      1976., 2112., 2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  389.,  488.,
      276.,  344.,  388.,  460.,  203.,  240.,  261.,  300.,  0.,    0.,
      275.,  312.,  325.,  364.,  672.,  752.,  776.,  860.,  1199., 1328.,
      836.,  924.,  948.,  1040., 493.,  540.,  551.,  600.,  0.,    0.,
      556.,  636.,  668.,  752.,  1380., 1552., 1612., 1792., 2488., 2764.,
      1732., 1920., 1980., 2176., 1028., 1128., 1156., 1260., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,     193.,    326.,    574.,    382.,    662.,    847.,    1291.,
      854.,    1166.,   1555.,   2047.,   1326.,   1670.,   2263.,   2803.,
      1798.,   2174.,   2046.,   2454.,   374.,    686.,    1092.,   1748.,
      1524.,   2244.,   2834.,   3962.,   2468.,   3252.,   4250.,   5474.,
      3412.,   4260.,   5666.,   6986.,   4356.,   5268.,   5172.,   6148.,
      1294.,   1766.,   3252.,   4228.,   3684.,   4724.,   6554.,   8162.,
      5268.,   6372.,   8930.,   10634.,  6852.,   8020.,   11306.,  13106.,
      8436.,   9668.,   9252.,   10548.,  2671.,   3499.,   6338.,   8042.,
      7466.,   9266.,   12741.,  15513.,  9842.,   11738.,  16305.,  19221.,
      12218.,  14210.,  19869.,  22929.,  14594.,  16682.,  16298.,  18482.,
      4934.,   5566.,   10532.,  11828.,  11604.,  12964.,  18434.,  20522.,
      13188.,  14612.,  20810.,  22994.,  14772.,  16260.,  23186.,  25466.,
      16356.,  17908.,  17812.,  19428.,  8131.,   9199.,   17258.,  19442.,
      19346.,  21626.,  30561.,  34053.,  21722.,  24098.,  34125.,  37761.,
      24098.,  26570.,  37689.,  41469.,  26474.,  29042.,  29138.,  31802.,
      8574.,   9366.,   17812.,  19428.,  19524.,  21204.,  30314.,  32882.,
      21108.,  22852.,  32690.,  35354.,  22692.,  24500.,  35066.,  37826.,
      24276.,  26148.,  26372.,  28308.,  12694.,  13646.,  26372.,  28308.,
      28084.,  30084.,  43634.,  46682.,  30308.,  32372.,  46970.,  50114.,
      32532.,  34660.,  50306.,  53546.,  34756.,  36948.,  36852.,  39108.,
      4157.,   4593.,   8486.,   9374.,   9822.,   10742.,  15007.,  16411.,
      10294.,  11246.,  15715.,  17167.,  10766.,  11750.,  16423.,  17923.,
      11238.,  12254.,  12766.,  13814.,  8534.,   9486.,   17412.,  19348.,
      20404.,  22404.,  31154.,  34202.,  21348.,  23412.,  32570.,  35714.,
      22292.,  24420.,  33986.,  37226.,  23236.,  25428.,  26612.,  28868.,
      15854.,  16966.,  32372.,  34628.,  35364.,  37684.,  54074.,  57602.,
      36948.,  39332.,  56450.,  60074.,  38532.,  40980.,  58826.,  62546.,
      40116.,  42628.,  43492.,  46068.,  24511.,  26299.,  50018.,  53642.,
      54986.,  58706.,  84021.,  89673.,  57362.,  61178.,  87585.,  93381.,
      59738.,  63650.,  91149.,  97089.,  62114.,  66122.,  67658.,  71762.,
      19494.,  20766.,  39652.,  42228.,  43284.,  45924.,  65954.,  69962.,
      44868.,  47572.,  68330.,  72434.,  46452.,  49220.,  70706.,  74906.,
      48036.,  50868.,  52052.,  54948.,  29971.,  31999.,  60938.,  65042.,
      66866.,  71066.,  101841., 108213., 69242.,  73538.,  105405., 111921.,
      71618.,  76010.,  108969., 115629., 73994.,  78482.,  80498.,  85082.,
      23134.,  24566.,  46932.,  49828.,  51204.,  54164.,  77834.,  82322.,
      52788.,  55812.,  80210.,  84794.,  54372.,  57460.,  82586.,  87266.,
      55956.,  59108.,  60612.,  63828.,  33654.,  35246.,  68292.,  71508.,
      72564.,  75844.,  110354., 115322., 74788.,  78132.,  113690., 118754.,
      77012.,  80420.,  117026., 122186., 79236.,  82708.,  83892.,  87428.,
      8237.,   8993.,   16646.,  18174.,  19262.,  20822.,  29167.,  31531.,
      19734.,  21326.,  29875.,  32287.,  20206.,  21830.,  30583.,  33043.,
      20678.,  22334.,  23486.,  25174.,  16694.,  18286.,  33732.,  36948.,
      39284.,  42564.,  59474.,  64442.,  40228.,  43572.,  60890.,  65954.,
      41172.,  44580.,  62306.,  67466.,  42116.,  45588.,  48052.,  51588.,
      30414.,  32166.,  61492.,  65028.,  67044.,  70644.,  101594., 107042.,
      68628.,  72292.,  103970., 109514., 70212.,  73940.,  106346., 111986.,
      71796.,  75588.,  77732.,  81588.,  46351.,  49099.,  93698.,  99242.,
      102506., 108146., 155301., 163833., 104882., 110618., 158865., 167541.,
      107258., 113090., 162429., 171249., 109634., 115562., 119018., 125042.,
      34054.,  35966.,  68772.,  72628.,  74964.,  78884.,  113474., 119402.,
      76548.,  80532.,  115850., 121874., 78132.,  82180.,  118226., 124346.,
      79716.,  83828.,  86292.,  90468.,  51811.,  54799.,  104618., 110642.,
      114386., 120506., 173121., 182373., 116762., 122978., 176685., 186081.,
      119138., 125450., 180249., 189789., 121514., 127922., 131858., 138362.,
      37694.,  39766.,  76052.,  80228.,  82884.,  87124.,  125354., 131762.,
      84468.,  88772.,  127730., 134234., 86052.,  90420.,  130106., 136706.,
      87636.,  92068.,  94852.,  99348.,  54614.,  56846.,  110212., 114708.,
      117044., 121604., 177074., 183962., 119268., 123892., 180410., 187394.,
      121492., 126180., 183746., 190826., 123716., 128468., 130932., 135748.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1366.,
      1934.,  1486.,  2086.,  3956.,  5188.,  4260.,  5556.,  7898.,  9890.,
      6484.,  7844.,  6916.,  8340.,  4078.,  4806.,  4326.,  5086.,  0.,
      0.,     1661.,  1969.,  1769.,  2093.,  4030.,  4694.,  4278.,  4974.,
      7171.,  8239.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,
      3737.,  0.,     0.,     2201.,  2589.,  2309.,  2713.,  5270.,  6094.,
      5518.,  6374.,  9271.,  10579., 6950.,  7838.,  7262.,  8182.,  4021.,
      4489.,  4193.,  4677.,  0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     77.,    193.,
      281.,   413.,   574.,   854.,   1014.,  1326.,  1555.,  2047.,  1166.,
      1510.,  1670.,  2046.,  905.,   1101.,  1173.,  1385.,  0.,     0.,
      1097.,  1293.,  1301.,  1513.,  2774.,  3214.,  3214.,  3686.,  5095.,
      5827.,  3686.,  4190.,  4190.,  4726.,  2245.,  2521.,  2513.,  2805.,
      0.,     0.,     2230.,  2670.,  2734.,  3206.,  5812.,  6788.,  6884.,
      7924.,  10874., 12482., 7828.,  8932.,  9028.,  10196., 4814.,  5414.,
      5446.,  6078.,  0.,     0.,     4750.,  5350.,  5254.,  5886.,  11172.,
      12468., 12244., 13604., 19394., 21482., 13828., 15252., 15028., 16516.,
      7974.,  8734.,  8606.,  9398.,  0.,     0.,     7270.,  8030.,  7774.,
      8566.,  16532., 18148., 17604., 19284., 27914., 30482., 19828., 21572.,
      21028., 22836., 11134., 12054., 11766., 12718., 0.,     0.,     4613.,
      5017.,  4913.,  5333.,  10318., 11174., 10950., 11838., 17179., 18535.,
      12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,
      0.,     6113.,  6597.,  6413.,  6913.,  13478., 14494., 14110., 15158.,
      22159., 23755., 15542., 16622., 16238., 17350., 8509.,  9073.,  8873.,
      9453.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   545.,   773.,
      1102.,  1574.,  1926.,  2430.,  2923.,  3703.,  2078.,  2614.,  2966.,
      3534.,  1553.,  1845.,  2013.,  2321.,  0.,     0.,     2129.,  2421.,
      2525.,  2833.,  5222.,  5854.,  6046.,  6710.,  9343.,  10363., 6518.,
      7214.,  7406.,  8134.,  3853.,  4225.,  4313.,  4701.,  0.,     0.,
      4294.,  4926.,  5182.,  5846.,  10708., 12068., 12548., 13972., 19370.,
      21554., 13492., 14980., 15460., 17012., 8030.,  8822.,  9046.,  9870.,
      0.,     0.,     8734.,  9526.,  9622.,  10446., 19908., 21588., 21748.,
      23492., 33650., 36314., 23332., 25140., 25300., 27172., 13110., 14062.,
      14126., 15110., 0.,     0.,     13174., 14126., 14062., 15046., 29108.,
      31108., 30948., 33012., 47930., 51074., 33172., 35300., 35140., 37332.,
      18190., 19302., 19206., 20350., 0.,     0.,     7565.,  8065.,  8057.,
      8573.,  16606., 17654., 17622., 18702., 27187., 28831., 18734., 19846.,
      19814., 20958., 10217., 10797., 10773., 11369., 0.,     0.,     10025.,
      10605., 10517., 11113., 21686., 22894., 22702., 23942., 35047., 36931.,
      24134., 25406., 25214., 26518., 12997., 13657., 13553., 14229., 0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,     1422.,    2380.,    4332.,    2796.,    5004.,    6362.,
      9866.,    6540.,    9004.,    11978.,   15866.,   10284.,   13004.,
      17594.,   21866.,   14028.,   17004.,   15980.,   19212.,   2700.,
      5164.,    8120.,    13304.,   11512.,   17208.,   21604.,   30532.,
      19000.,   25208.,   32836.,   42532.,   26488.,   33208.,   44068.,
      54532.,   33976.,   41208.,   40440.,   48184.,   9900.,    13644.,
      25080.,   32824.,   28472.,   36728.,   50884.,   63652.,   41080.,
      49848.,   69796.,   83332.,   53688.,   62968.,   88708.,   103012.,
      66296.,   76088.,   72760.,   83064.,   20570.,   27146.,   49060.,
      62596.,   57988.,   72292.,   99246.,   121278.,  76900.,   91972.,
      127614.,  150798.,  95812.,   111652.,  155982.,  180318.,  114724.,
      131332.,  128260.,  145636.,  38860.,   43884.,   83000.,   93304.,
      91512.,   102328.,  145444.,  162052.,  104120.,  115448.,  164356.,
      181732.,  116728.,  128568.,  183268.,  201412.,  129336.,  141688.,
      140920.,  153784.,  64010.,   72506.,   135940.,  153316.,  152548.,
      170692.,  241086.,  268878.,  171460.,  190372.,  269454.,  298398.,
      190372.,  210052.,  297822.,  327918.,  209284.,  229732.,  230500.,
      251716.,  67820.,   74124.,   140920.,  153784.,  154552.,  167928.,
      240004.,  260452.,  167160.,  181048.,  258916.,  280132.,  179768.,
      194168.,  277828.,  299812.,  192376.,  207288.,  209080.,  224504.,
      100620.,  108204.,  209080.,  224504.,  222712.,  238648.,  346084.,
      370372.,  240440.,  256888.,  372676.,  397732.,  258168.,  275128.,
      399268.,  425092.,  275896.,  293368.,  292600.,  310584.,  32830.,
      36302.,   67020.,   74092.,   77676.,   85004.,   118682.,  129866.,
      81420.,   89004.,   124298.,  135866.,  85164.,   93004.,   129914.,
      141866.,  88908.,   97004.,   101100.,  109452.,  67340.,   74924.,
      137400.,  152824.,  161272.,  177208.,  246244.,  270532.,  168760.,
      185208.,  257476.,  282532.,  176248.,  193208.,  268708.,  294532.,
      183736.,  201208.,  210680.,  228664.,  125740.,  134604.,  256760.,
      274744.,  280632.,  299128.,  429124.,  457252.,  293240.,  312248.,
      448036.,  476932.,  305848.,  325368.,  466948.,  496612.,  318456.,
      338488.,  345400.,  365944.,  194330.,  208586.,  396580.,  425476.,
      436228.,  465892.,  666606.,  711678.,  455140.,  485572.,  694974.,
      741198.,  474052.,  505252.,  723342.,  770718.,  492964.,  524932.,
      537220.,  569956.,  154700.,  164844.,  314680.,  335224.,  343672.,
      364728.,  523684.,  555652.,  356280.,  377848.,  542596.,  575332.,
      368888.,  390968.,  561508.,  595012.,  381496.,  404088.,  413560.,
      436664.,  237770.,  253946.,  483460.,  516196.,  530788.,  564292.,
      808446.,  859278.,  549700.,  583972.,  836814.,  888798.,  568612.,
      603652.,  865182.,  918318.,  587524.,  623332.,  639460.,  676036.,
      183660.,  195084.,  372600.,  395704.,  406712.,  430328.,  618244.,
      654052.,  419320.,  443448.,  637156.,  673732.,  431928.,  456568.,
      656068.,  693412.,  444536.,  469688.,  481720.,  507384.,  267660.,
      280364.,  543160.,  568824.,  577272.,  603448.,  877924.,  917572.,
      595000.,  621688.,  904516.,  944932.,  612728.,  639928.,  931108.,
      972292.,  630456.,  658168.,  667640.,  695864.,  65150.,   71182.,
      131660.,  143852.,  152556.,  165004.,  231002.,  249866.,  156300.,
      169004.,  236618.,  255866.,  160044.,  173004.,  242234.,  261866.,
      163788.,  177004.,  186220.,  199692.,  131980.,  144684.,  266680.,
      292344.,  311032.,  337208.,  470884.,  510532.,  318520.,  345208.,
      482116.,  522532.,  326008.,  353208.,  493348.,  534532.,  333496.,
      361208.,  380920.,  409144.,  241580.,  255564.,  488440.,  516664.,
      532792.,  561528.,  807364.,  850852.,  545400.,  574648.,  826276.,
      870532.,  558008.,  587768.,  845188.,  890212.,  570616.,  600888.,
      618040.,  648824.,  368090.,  390026.,  744100.,  788356.,  814468.,
      859492.,  1233966., 1302078., 833380.,  879172.,  1262334., 1331598.,
      852292.,  898852.,  1290702., 1361118., 871204.,  918532.,  946180.,
      994276.,  270540.,  285804.,  546360.,  577144.,  595832.,  627128.,
      901924.,  949252.,  608440.,  640248.,  920836.,  968932.,  621048.,
      653368.,  939748.,  988612.,  633656.,  666488.,  686200.,  719544.,
      411530.,  435386.,  830980.,  879076.,  909028.,  957892.,  1375806.,
      1449678., 927940.,  977572.,  1404174., 1479198., 946852.,  997252.,
      1432542., 1508718., 965764.,  1016932., 1048420., 1100356., 299500.,
      316044.,  604280.,  637624.,  658872.,  692728.,  996484.,  1047652.,
      671480.,  705848.,  1015396., 1067332., 684088.,  718968.,  1034308.,
      1087012., 696696.,  732088.,  754360.,  790264.,  434700.,  452524.,
      877240.,  913144.,  931832.,  968248.,  1409764., 1464772., 949560.,
      986488.,  1436356., 1492132., 967288.,  1004728., 1462948., 1519492.,
      985016.,  1022968., 1042680., 1081144.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1322.,   2906.,   1900.,   3084.,   2828.,   4268.,   1966.,   2750.,
      2558.,   3470.,   0.,      0.,      430.,    1214.,   510.,    1422.,
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,   9004.,
      7468.,   10188.,  4926.,   6350.,   5518.,   7070.,   0.,      0.,
      1100.,   3052.,   2028.,   4236.,   6776.,   11448.,  9144.,   14328.,
      18052.,  26212.,  16632.,  22328.,  20024.,  26232.,  12396.,  15628.,
      14348.,  17836.,  0.,      0.,      5740.,   8972.,   6668.,   10156.,
      18616.,  25848.,  20984.,  28728.,  39652.,  51652.,  33592.,  41848.,
      36984.,  45752.,  22156.,  26668.,  24108.,  28876.,  0.,      0.,
      10380.,  14892.,  11308.,  16076.,  30456.,  40248.,  32824.,  43128.,
      61252.,  77092.,  50552.,  61368.,  53944.,  65272.,  31916.,  37708.,
      33868.,  39916.,  0.,      0.,      12990.,  15438.,  13838.,  16414.,
      31596.,  36876.,  33548.,  39084.,  56330.,  64826.,  42412.,  48204.,
      44876.,  50924.,  24910.,  27998.,  26270.,  29486.,  0.,      0.,
      17230.,  20318.,  18078.,  21294.,  41356.,  47916.,  43308.,  50124.,
      72890.,  83306.,  54732.,  61804.,  57196.,  64524.,  31710.,  35438.,
      33070.,  36926.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1422.,   2126.,   3166.,   4332.,   6540.,   7820.,   10284.,
      11978.,  15866.,  9004.,   11724.,  13004.,  15980.,  7054.,   8606.,
      9182.,   10862.,  0.,      0.,      8590.,   10142.,  10206.,  11886.,
      21772.,  25260.,  25260.,  29004.,  40058.,  45866.,  29004.,  33004.,
      33004.,  37260.,  17694.,  19886.,  19822.,  22142.,  0.,      0.,
      17420.,  20908.,  21420.,  25164.,  45560.,  53304.,  54072.,  62328.,
      85444.,  98212.,  61560.,  70328.,  71096.,  80376.,  37932.,  42700.,
      42956.,  47980.,  0.,      0.,      37420.,  42188.,  41420.,  46444.,
      88120.,  98424.,  96632.,  107448., 153124., 169732., 109240., 120568.,
      118776., 130616., 63052.,  69100.,  68076.,  74380.,  0.,      0.,
      57420.,  63468.,  61420.,  67724.,  130680., 143544., 139192., 152568.,
      220804., 241252., 156920., 170808., 166456., 180856., 88172.,  95500.,
      93196.,  100780., 0.,      0.,      36510.,  39726.,  38894.,  42238.,
      81708.,  88524.,  86732.,  93804.,  136106., 146906., 95596.,  102924.,
      101132., 108716., 53038.,  56894.,  55934.,  59918.,  0.,      0.,
      48430.,  52286.,  50814.,  54798.,  106828., 114924., 111852., 120204.,
      175706., 188426., 123276., 131884., 128812., 137676., 67518.,  72014.,
      70414.,  75038.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      990.,    2670.,   4142.,   5950.,   8364.,   12108.,  14924.,  18924.,
      22634.,  28826.,  16108.,  20364.,  23180.,  27692.,  12142.,  14462.,
      15806.,  18254.,  0.,      0.,      16750.,  19070.,  19902.,  22350.,
      41164.,  46188.,  47724.,  53004.,  73754.,  81866.,  51468.,  57004.,
      58540.,  64332.,  30462.,  33422.,  34126.,  37214.,  0.,      0.,
      33740.,  38764.,  40812.,  46092.,  84344.,  95160.,  99000.,  110328.,
      152836., 170212., 106488., 118328., 122168., 134520., 63468.,  69772.,
      71564.,  78124.,  0.,      0.,      69100.,  75404.,  76172.,  82732.,
      157624., 171000., 172280., 186168., 266596., 287812., 184888., 199288.,
      200568., 215480., 103948., 111532., 112044., 119884., 0.,      0.,
      104460., 112044., 111532., 119372., 230904., 246840., 245560., 262008.,
      380356., 405412., 263288., 280248., 278968., 296440., 144428., 153292.,
      152524., 161644., 0.,      0.,      60030.,  64014.,  63950.,  68062.,
      131820., 140172., 139916., 148524., 215882., 228986., 148780., 157644.,
      157388., 166508., 81166.,  85790.,  85598.,  90350.,  0.,      0.,
      79630.,  84254.,  83550.,  88302.,  172300., 181932., 180396., 190284.,
      278522., 293546., 191820., 201964., 200428., 210828., 103326., 108590.,
      107758., 113150., 0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   1067.,  1196.,  1331.,  1472.,  854.,   944.,   1038.,  1136.,
      974.,   1072.,  1174.,  1280.,  150.,   224.,   302.,   384.,   468.,
      624.,   788.,   960.,   676.,   848.,   1028.,  1216.,  1282.,  1552.,
      1834.,  2128.,  1140.,  1328.,  1524.,  1728.,  1978.,  2272.,  2578.,
      2896.,  1604.,  1808.,  2020.,  2240.,  2674.,  2992.,  3322.,  3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,  2704.,  2948.,  3200.,  590.,
      704.,   822.,   944.,   1508.,  1744.,  1988.,  2240.,  1716.,  1968.,
      2228.,  2496.,  3082.,  3472.,  3874.,  4288.,  2500.,  2768.,  3044.,
      3328.,  4258.,  4672.,  5098.,  5536.,  3284.,  3568.,  3860.,  4160.,
      5434.,  5872.,  6322.,  6784.,  4068.,  4368.,  4676.,  4992.,  4468.,
      4784.,  5108.,  5440.,  1235.,  1436.,  1643.,  1856.,  2962.,  3376.,
      3802.,  4240.,  3514.,  3952.,  4402.,  4864.,  6033.,  6708.,  7401.,
      8112.,  4690.,  5152.,  5626.,  6112.,  7797.,  8508.,  9237.,  9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,  10308., 11073., 11856., 7042.,
      7552.,  8074.,  8608.,  7882.,  8416.,  8962.,  9520.,  2390.,  2544.,
      2702.,  2864.,  5108.,  5424.,  5748.,  6080.,  5636.,  5968.,  6308.,
      6656.,  8962.,  9472.,  9994.,  10528., 6420.,  6768.,  7124.,  7488.,
      10138., 10672., 11218., 11776., 7204.,  7568.,  7940.,  8320.,  11314.,
      11872., 12442., 13024., 7988.,  8368.,  8756.,  9152.,  8708.,  9104.,
      9508.,  9920.,  3935.,  4196.,  4463.,  4736.,  8362.,  8896.,  9442.,
      10000., 9394.,  9952.,  10522., 11104., 14853., 15708., 16581., 17472.,
      10570., 11152., 11746., 12352., 16617., 17508., 18417., 19344., 11746.,
      12352., 12970., 13600., 18381., 19308., 20253., 21216., 12922., 13552.,
      14194., 14848., 14242., 14896., 15562., 16240., 4190.,  4384.,  4582.,
      4784.,  8708.,  9104.,  9508.,  9920.,  9556.,  9968.,  10388., 10816.,
      14842., 15472., 16114., 16768., 10340., 10768., 11204., 11648., 16018.,
      16672., 17338., 18016., 11124., 11568., 12020., 12480., 17194., 17872.,
      18562., 19264., 11908., 12368., 12836., 13312., 12948., 13424., 13908.,
      14400., 6230.,  6464.,  6702.,  6944.,  12948., 13424., 13908., 14400.,
      13796., 14288., 14788., 15296., 21442., 22192., 22954., 23728., 14900.,
      15408., 15924., 16448., 23098., 23872., 24658., 25456., 16004., 16528.,
      17060., 17600., 24754., 25552., 26362., 27184., 17108., 17648., 18196.,
      18752., 18148., 18704., 19268., 19840., 2025.,  2132.,  2241.,  2352.,
      4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,  7331.,
      7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,  8036.,
      8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  8027.,  8396.,  8771.,
      9152.,  5494.,  5744.,  5998.,  6256.,  6254.,  6512.,  6774.,  7040.,
      4150.,  4384.,  4622.,  4864.,  8468.,  8944.,  9428.,  9920.,  9956.,
      10448., 10948., 11456., 15202., 15952., 16714., 17488., 10420., 10928.,
      11444., 11968., 15898., 16672., 17458., 18256., 10884., 11408., 11940.,
      12480., 16594., 17392., 18202., 19024., 11348., 11888., 12436., 12992.,
      13028., 13584., 14148., 14720., 7790.,  8064.,  8342.,  8624.,  15908.,
      16464., 17028., 17600., 17396., 17968., 18548., 19136., 26602., 27472.,
      28354., 29248., 18180., 18768., 19364., 19968., 27778., 28672., 29578.,
      30496., 18964., 19568., 20180., 20800., 28954., 29872., 30802., 31744.,
      19748., 20368., 20996., 21632., 21428., 22064., 22708., 23360., 12035.,
      12476., 12923., 13376., 24562., 25456., 26362., 27280., 27034., 27952.,
      28882., 29824., 41313., 42708., 44121., 45552., 28210., 29152., 30106.,
      31072., 43077., 44508., 45957., 47424., 29386., 30352., 31330., 32320.,
      44841., 46308., 47793., 49296., 30562., 31552., 32554., 33568., 33322.,
      34336., 35362., 36400., 9590.,  9904.,  10222., 10544., 19508., 20144.,
      20788., 21440., 21316., 21968., 22628., 23296., 32482., 33472., 34474.,
      35488., 22100., 22768., 23444., 24128., 33658., 34672., 35698., 36736.,
      22884., 23568., 24260., 24960., 34834., 35872., 36922., 37984., 23668.,
      24368., 25076., 25792., 25668., 26384., 27108., 27840., 14735., 15236.,
      15743., 16256., 29962., 30976., 32002., 33040., 32914., 33952., 35002.,
      36064., 50133., 51708., 53301., 54912., 34090., 35152., 36226., 37312.,
      51897., 53508., 55137., 56784., 35266., 36352., 37450., 38560., 53661.,
      55308., 56973., 58656., 36442., 37552., 38674., 39808., 39682., 40816.,
      41962., 43120., 11390., 11744., 12102., 12464., 23108., 23824., 24548.,
      25280., 25236., 25968., 26708., 27456., 38362., 39472., 40594., 41728.,
      26020., 26768., 27524., 28288., 39538., 40672., 41818., 42976., 26804.,
      27568., 28340., 29120., 40714., 41872., 43042., 44224., 27588., 28368.,
      29156., 29952., 29908., 30704., 31508., 32320., 16630., 17024., 17422.,
      17824., 33748., 34544., 35348., 36160., 35876., 36688., 37508., 38336.,
      54562., 55792., 57034., 58288., 36980., 37808., 38644., 39488., 56218.,
      57472., 58738., 60016., 38084., 38928., 39780., 40640., 57874., 59152.,
      60442., 61744., 39188., 40048., 40916., 41792., 41508., 42384., 43268.,
      44160., 4025.,  4212.,  4401.,  4592.,  8134.,  8512.,  8894.,  9280.,
      9438.,  9824.,  10214., 10608., 14291., 14876., 15467., 16064., 9670.,
      10064., 10462., 10864., 14639., 15236., 15839., 16448., 9902.,  10304.,
      10710., 11120., 14987., 15596., 16211., 16832., 10134., 10544., 10958.,
      11376., 11534., 11952., 12374., 12800., 8150.,  8544.,  8942.,  9344.,
      16468., 17264., 18068., 18880., 19236., 20048., 20868., 21696., 29122.,
      30352., 31594., 32848., 19700., 20528., 21364., 22208., 29818., 31072.,
      32338., 33616., 20164., 21008., 21860., 22720., 30514., 31792., 33082.,
      34384., 20628., 21488., 22356., 23232., 23588., 24464., 25348., 26240.,
      14990., 15424., 15862., 16304., 30308., 31184., 32068., 32960., 33076.,
      33968., 34868., 35776., 50122., 51472., 52834., 54208., 33860., 34768.,
      35684., 36608., 51298., 52672., 54058., 55456., 34644., 35568., 36500.,
      37440., 52474., 53872., 55282., 56704., 35428., 36368., 37316., 38272.,
      38388., 39344., 40308., 41280., 22835., 23516., 24203., 24896., 46162.,
      47536., 48922., 50320., 50554., 51952., 53362., 54784., 76593., 78708.,
      80841., 82992., 51730., 53152., 54586., 56032., 78357., 80508., 82677.,
      84864., 52906., 54352., 55810., 57280., 80121., 82308., 84513., 86736.,
      54082., 55552., 57034., 58528., 58762., 60256., 61762., 63280., 16790.,
      17264., 17742., 18224., 33908., 34864., 35828., 36800., 36996., 37968.,
      38948., 39936., 56002., 57472., 58954., 60448., 37780., 38768., 39764.,
      40768., 57178., 58672., 60178., 61696., 38564., 39568., 40580., 41600.,
      58354., 59872., 61402., 62944., 39348., 40368., 41396., 42432., 42628.,
      43664., 44708., 45760., 25535., 26276., 27023., 27776., 51562., 53056.,
      54562., 56080., 56434., 57952., 59482., 61024., 85413., 87708., 90021.,
      92352., 57610., 59152., 60706., 62272., 87177., 89508., 91857., 94224.,
      58786., 60352., 61930., 63520., 88941., 91308., 93693., 96096., 59962.,
      61552., 63154., 64768., 65122., 66736., 68362., 70000., 18590., 19104.,
      19622., 20144., 37508., 38544., 39588., 40640., 40916., 41968., 43028.,
      44096., 61882., 63472., 65074., 66688., 41700., 42768., 43844., 44928.,
      63058., 64672., 66298., 67936., 42484., 43568., 44660., 45760., 64234.,
      65872., 67522., 69184., 43268., 44368., 45476., 46592., 46868., 47984.,
      49108., 50240., 27030., 27584., 28142., 28704., 54548., 55664., 56788.,
      57920., 57956., 59088., 60228., 61376., 87682., 89392., 91114., 92848.,
      59060., 60208., 61364., 62528., 89338., 91072., 92818., 94576., 60164.,
      61328., 62500., 63680., 90994., 92752., 94522., 96304., 61268., 62448.,
      63636., 64832., 64868., 66064., 67268., 68480.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     614.,   752.,
      894.,   1040.,  670.,   816.,   966.,   1120.,  1828.,  2128.,  2436.,
      2752.,  1972.,  2288.,  2612.,  2944.,  3706.,  4192.,  4690.,  5200.,
      3076.,  3408.,  3748.,  4096.,  3284.,  3632.,  3988.,  4352.,  1950.,
      2128.,  2310.,  2496.,  2070.,  2256.,  2446.,  2640.,  0.,     0.,
      0.,     0.,     793.,   868.,   945.,   1024.,  845.,   924.,   1005.,
      1088.,  1934.,  2096.,  2262.,  2432.,  2054.,  2224.,  2398.,  2576.,
      3455.,  3716.,  3983.,  4256.,  2606.,  2784.,  2966.,  3152.,  2758.,
      2944.,  3134.,  3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,
      1817.,  1920.,  0.,     0.,     0.,     0.,     1053.,  1148.,  1245.,
      1344.,  1105.,  1204.,  1305.,  1408.,  2534.,  2736.,  2942.,  3152.,
      2654.,  2864.,  3078.,  3296.,  4475.,  4796.,  5123.,  5456.,  3366.,
      3584.,  3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,
      2185.,  2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     25.,    52.,    81.,    112.,
      125.,   156.,   189.,   224.,   254.,   320.,   390.,   464.,   470.,
      544.,   622.,   704.,   719.,   836.,   959.,   1088.,  542.,   624.,
      710.,   800.,   790.,   880.,   974.,   1072.,  429.,   476.,   525.,
      576.,   561.,   612.,   665.,   720.,   0.,     0.,     0.,     0.,
      525.,   572.,   621.,   672.,   625.,   676.,   729.,   784.,   1334.,
      1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,  2459.,  2636.,
      2819.,  3008.,  1782.,  1904.,  2030.,  2160.,  2030.,  2160.,  2294.,
      2432.,  1089.,  1156.,  1225.,  1296.,  1221.,  1292.,  1365.,  1440.,
      0.,     0.,     0.,     0.,     1062.,  1168.,  1278.,  1392.,  1310.,
      1424.,  1542.,  1664.,  2788.,  3024.,  3268.,  3520.,  3316.,  3568.,
      3828.,  4096.,  5242.,  5632.,  6034.,  6448.,  3780.,  4048.,  4324.,
      4608.,  4372.,  4656.,  4948.,  5248.,  2334.,  2480.,  2630.,  2784.,
      2646.,  2800.,  2958.,  3120.,  0.,     0.,     0.,     0.,     2302.,
      2448.,  2598.,  2752.,  2550.,  2704.,  2862.,  3024.,  5428.,  5744.,
      6068.,  6400.,  5956.,  6288.,  6628.,  6976.,  9442.,  9952.,  10474.,
      11008., 6740.,  7088.,  7444.,  7808.,  7332.,  7696.,  8068.,  8448.,
      3894.,  4080.,  4270.,  4464.,  4206.,  4400.,  4598.,  4800.,  0.,
      0.,     0.,     0.,     3542.,  3728.,  3918.,  4112.,  3790.,  3984.,
      4182.,  4384.,  8068.,  8464.,  8868.,  9280.,  8596.,  9008.,  9428.,
      9856.,  13642., 14272., 14914., 15568., 9700.,  10128., 10564., 11008.,
      10292., 10736., 11188., 11648., 5454.,  5680.,  5910.,  6144.,  5766.,
      6000.,  6238.,  6480.,  0.,     0.,     0.,     0.,     2257.,  2356.,
      2457.,  2560.,  2405.,  2508.,  2613.,  2720.,  5054.,  5264.,  5478.,
      5696.,  5366.,  5584.,  5806.,  6032.,  8423.,  8756.,  9095.,  9440.,
      5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,
      3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,
      0.,     0.,     2997.,  3116.,  3237.,  3360.,  3145.,  3268.,  3393.,
      3520.,  6614.,  6864.,  7118.,  7376.,  6926.,  7184.,  7446.,  7712.,
      10883., 11276., 11675., 12080., 7638.,  7904.,  8174.,  8448.,  7982.,
      8256.,  8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,
      4653.,  4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,   416.,
      494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,  1367.,
      1556.,  1751.,  1952.,  974.,   1104.,  1238.,  1376.,  1414.,  1552.,
      1694.,  1840.,  741.,   812.,   885.,   960.,   969.,   1044.,  1121.,
      1200.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,  1248.,
      1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,  2942.,
      3104.,  3270.,  3440.,  4547.,  4796.,  5051.,  5312.,  3174.,  3344.,
      3518.,  3696.,  3614.,  3792.,  3974.,  4160.,  1881.,  1972.,  2065.,
      2160.,  2109.,  2204.,  2301.,  2400.,  0.,     0.,     0.,     0.,
      2070.,  2224.,  2382.,  2544.,  2510.,  2672.,  2838.,  3008.,  5188.,
      5520.,  5860.,  6208.,  6100.,  6448.,  6804.,  7168.,  9418.,  9952.,
      10498., 11056., 6564.,  6928.,  7300.,  7680.,  7540.,  7920.,  8308.,
      8704.,  3918.,  4112.,  4310.,  4512.,  4422.,  4624.,  4830.,  5040.,
      0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,  4864.,  4710.,
      4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008., 10660., 11088.,
      11524., 11968., 16498., 17152., 17818., 18496., 11444., 11888., 12340.,
      12800., 12420., 12880., 13348., 13824., 6438.,  6672.,  6910.,  7152.,
      6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,     0.,     6470.,
      6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,  14308., 14800.,
      15300., 15808., 15220., 15728., 16244., 16768., 23578., 24352., 25138.,
      25936., 16324., 16848., 17380., 17920., 17300., 17840., 18388., 18944.,
      8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030., 10320., 0.,
      0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,  3965.,  4092.,
      4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,  8944.,  9214.,
      9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,  9782.,  10064.,
      9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,
      5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,     4941.,  5084.,
      5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694., 10992., 11294.,
      11600., 11198., 11504., 11814., 12128., 17291., 17756., 18227., 18704.,
      11910., 12224., 12542., 12864., 12446., 12768., 13094., 13424., 6417.,
      6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   8287.,   9307.,   10375.,  11491.,
      6658.,   7370.,   8114.,   8890.,   7602.,   8378.,   9186.,   10026.,
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      49378.,  51242.,  53138.,  55066.,  102644., 106436., 110292., 114212.,
      109396., 113316., 117300., 121348., 170054., 176030., 182102., 188270.,
      118196., 122244., 126356., 130532., 183254., 189422., 195686., 202046.,
      126996., 131172., 135412., 139716., 196454., 202814., 209270., 215822.,
      135796., 140100., 144468., 148900., 144084., 148516., 153012., 157572.,
      15989.,  16841.,  17709.,  18593.,  32642.,  34378.,  36146.,  37946.,
      37938.,  39738.,  41570.,  43434.,  57967.,  60715.,  63511.,  66355.,
      39778.,  41642.,  43538.,  45466.,  60727.,  63571.,  66463.,  69403.,
      41618.,  43546.,  45506.,  47498.,  63487.,  66427.,  69415.,  72451.,
      43458.,  45450.,  47474.,  49530.,  49522.,  51578.,  53666.,  55786.,
      32738.,  34602.,  36498.,  38426.,  66804.,  70596.,  74452.,  78372.,
      78676.,  82596.,  86580.,  90628.,  120134., 126110., 132182., 138350.,
      82356.,  86404.,  90516.,  94692.,  125654., 131822., 138086., 144446.,
      86036.,  90212.,  94452.,  98756.,  131174., 137534., 143990., 150542.,
      89716.,  94020.,  98388.,  102820., 103124., 107556., 112052., 116612.,
      61778.,  63962.,  66178.,  68426.,  126164., 130596., 135092., 139652.,
      138036., 142596., 147220., 151908., 211094., 218030., 225062., 232190.,
      144276., 148964., 153716., 158532., 220454., 227582., 234806., 242126.,
      150516., 155332., 160212., 165156., 229814., 237134., 244550., 252062.,
      156756., 161700., 166708., 171780., 170164., 175236., 180372., 185572.,
      95407.,  98923.,  102487., 106099., 194726., 201854., 209078., 216398.,
      214454., 221774., 229190., 236702., 327741., 338865., 350133., 361545.,
      223814., 231326., 238934., 246638., 341781., 353193., 364749., 376449.,
      233174., 240878., 248678., 256574., 355821., 367521., 379365., 391353.,
      242534., 250430., 258422., 266510., 264566., 272654., 280838., 289118.,
      76098.,  78602.,  81138.,  83706.,  154804., 159876., 165012., 170212.,
      169236., 174436., 179700., 185028., 257894., 265790., 273782., 281870.,
      175476., 180804., 186196., 191652., 267254., 275342., 283526., 291806.,
      181716., 187172., 192692., 198276., 276614., 284894., 293270., 301742.,
      187956., 193540., 199188., 204900., 203924., 209636., 215412., 221252.,
      116887., 120883., 124927., 129019., 237686., 245774., 253958., 262238.,
      261254., 269534., 277910., 286382., 397941., 410505., 423213., 436065.,
      270614., 279086., 287654., 296318., 411981., 424833., 437829., 450969.,
      279974., 288638., 297398., 306254., 426021., 439161., 452445., 465873.,
      289334., 298190., 307142., 316190., 315206., 324254., 333398., 342638.,
      90418.,  93242.,  96098.,  98986.,  183444., 189156., 194932., 200772.,
      200436., 206276., 212180., 218148., 304694., 313550., 322502., 331550.,
      206676., 212644., 218676., 224772., 314054., 323102., 332246., 341486.,
      212916., 219012., 225172., 231396., 323414., 332654., 341990., 351422.,
      219156., 225380., 231668., 238020., 237684., 244036., 250452., 256932.,
      132258., 135402., 138578., 141786., 268404., 274756., 281172., 287652.,
      285396., 291876., 298420., 305028., 434054., 443870., 453782., 463790.,
      294196., 300804., 307476., 314212., 447254., 457262., 467366., 477566.,
      302996., 309732., 316532., 323396., 460454., 470654., 480950., 491342.,
      311796., 318660., 325588., 332580., 330324., 337316., 344372., 351492.,
      31829.,  33321.,  34829.,  36353.,  64322.,  67338.,  70386.,  73466.,
      74738.,  77818.,  80930.,  84074.,  113167., 117835., 122551., 127315.,
      76578.,  79722.,  82898.,  86106.,  115927., 120691., 125503., 130363.,
      78418.,  81626.,  84866.,  88138.,  118687., 123547., 128455., 133411.,
      80258.,  83530.,  86834.,  90170.,  91442.,  94778.,  98146.,  101546.,
      64418.,  67562.,  70738.,  73946.,  130164., 136516., 142932., 149412.,
      152276., 158756., 165300., 171908., 230534., 240350., 250262., 260270.,
      155956., 162564., 169236., 175972., 236054., 246062., 256166., 266366.,
      159636., 166372., 173172., 180036., 241574., 251774., 262070., 272462.,
      163316., 170180., 177108., 184100., 186964., 193956., 201012., 208132.,
      119058., 122522., 126018., 129546., 240724., 247716., 254772., 261892.,
      262836., 269956., 277140., 284388., 398294., 409070., 419942., 430910.,
      269076., 276324., 283636., 291012., 407654., 418622., 429686., 440846.,
      275316., 282692., 290132., 297636., 417014., 428174., 439430., 450782.,
      281556., 289060., 296628., 304260., 305204., 312836., 320532., 328292.,
      181327., 186763., 192247., 197779., 366566., 377534., 388598., 399758.,
      401654., 412814., 424070., 435422., 608541., 625425., 642453., 659625.,
      411014., 422366., 433814., 445358., 622581., 639753., 657069., 674529.,
      420374., 431918., 443558., 455294., 636621., 654081., 671685., 689433.,
      429734., 441470., 453302., 465230., 467126., 479054., 491078., 503198.,
      133378., 137162., 140978., 144826., 269364., 276996., 284692., 292452.,
      294036., 301796., 309620., 317508., 445094., 456830., 468662., 480590.,
      300276., 308164., 316116., 324132., 454454., 466382., 478406., 490526.,
      306516., 314532., 322612., 330756., 463814., 475934., 488150., 500462.,
      312756., 320900., 329108., 337380., 338964., 347236., 355572., 363972.,
      202807., 208723., 214687., 220699., 409526., 421454., 433478., 445598.,
      448454., 460574., 472790., 485102., 678741., 697065., 715533., 734145.,
      457814., 470126., 482534., 495038., 692781., 711393., 730149., 749049.,
      467174., 479678., 492278., 504974., 706821., 725721., 744765., 763953.,
      476534., 489230., 502022., 514910., 517766., 530654., 543638., 556718.,
      147698., 151802., 155938., 160106., 298004., 306276., 314612., 323012.,
      325236., 333636., 342100., 350628., 491894., 504590., 517382., 530270.,
      331476., 340004., 348596., 357252., 501254., 514142., 527126., 540206.,
      337716., 346372., 355092., 363876., 510614., 523694., 536870., 550142.,
      343956., 352740., 361588., 370500., 372724., 381636., 390612., 399652.,
      215138., 219562., 224018., 228506., 434164., 443076., 452052., 461092.,
      461396., 470436., 479540., 488708., 698054., 711710., 725462., 739310.,
      470196., 479364., 488596., 497892., 711254., 725102., 739046., 753086.,
      478996., 488292., 497652., 507076., 724454., 738494., 752630., 766862.,
      487796., 497220., 506708., 516260., 516564., 526116., 535732., 545412.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      25.,     61.,     113.,    29.,     81.,     149.,    233.,
      82.,     218.,    386.,    586.,    258.,    458.,    690.,    954.,
      487.,    835.,    1231.,   1675.,   818.,    1082.,   1378.,   1706.,
      1250.,   1578.,   1938.,   2330.,   893.,    1073.,   1269.,   1481.,
      1173.,   1385.,   1613.,   1857.,   0.,      0.,      0.,      0.,
      125.,    305.,    501.,    713.,    149.,    361.,    589.,    833.,
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      3410.,   4058.,   4738.,   5450.,   2293.,   2633.,   2989.,   3361.,
      2573.,   2945.,   3333.,   3737.,   0.,      0.,      0.,      0.,
      322.,    778.,    1266.,   1786.,   754.,    1274.,   1826.,   2410.,
      2836.,   3940.,   5108.,   6340.,   3956.,   5188.,   6484.,   7844.,
      8054.,   9998.,   12038.,  14174.,  7636.,   8996.,   10420.,  11908.,
      9268.,   10756.,  12308.,  13924.,  5810.,   6586.,   7394.,   8234.,
      6754.,   7594.,   8466.,   9370.,   0.,      0.,      0.,      0.,
      2482.,   3258.,   4066.,   4906.,   2914.,   3754.,   4626.,   5530.,
      8436.,   10180.,  11988.,  13860.,  9556.,   11428.,  13364.,  15364.,
      18374.,  21278.,  24278.,  27374.,  15796.,  17796.,  19860.,  21988.,
      17428.,  19556.,  21748.,  24004.,  10530.,  11626.,  12754.,  13914.,
      11474.,  12634.,  13826.,  15050.,  0.,      0.,      0.,      0.,
      4642.,   5738.,   6866.,   8026.,   5074.,   6234.,   7426.,   8650.,
      14036.,  16420.,  18868.,  21380.,  15156.,  17668.,  20244.,  22884.,
      28694.,  32558.,  36518.,  40574.,  23956.,  26596.,  29300.,  32068.,
      25588.,  28356.,  31188.,  34084.,  15250.,  16666.,  18114.,  19594.,
      16194.,  17674.,  19186.,  20730.,  0.,      0.,      0.,      0.,
      6197.,   6793.,   7405.,   8033.,   6605.,   7233.,   7877.,   8537.,
      15154.,  16442.,  17762.,  19114.,  16098.,  17450.,  18834.,  20250.,
      27127.,  29203.,  31327.,  33499.,  20498.,  21914.,  23362.,  24842.,
      21698.,  23178.,  24690.,  26234.,  12077.,  12833.,  13605.,  14393.,
      12741.,  13529.,  14333.,  15153.,  0.,      0.,      0.,      0.,
      8237.,   8993.,   9765.,   10553.,  8645.,   9433.,   10237.,  11057.,
      19874.,  21482.,  23122.,  24794.,  20818.,  22490.,  24194.,  25930.,
      35167.,  37723.,  40327.,  42979.,  26498.,  28234.,  30002.,  31802.,
      27698.,  29498.,  31330.,  33194.,  15397.,  16313.,  17245.,  18193.,
      16061.,  17009.,  17973.,  18953.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      149.,    361.,    589.,    833.,    941.,    1185.,   1445.,   1721.,
      1906.,   2426.,   2978.,   3562.,   3618.,   4202.,   4818.,   5466.,
      5527.,   6451.,   7423.,   8443.,   4178.,   4826.,   5506.,   6218.,
      6146.,   6858.,   7602.,   8378.,   3341.,   3713.,   4101.,   4505.,
      4389.,   4793.,   5213.,   5649.,   0.,      0.,      0.,      0.,
      4109.,   4481.,   4869.,   5273.,   4901.,   5305.,   5725.,   6161.,
      10466.,  11306.,  12178.,  13082.,  12178.,  13082.,  14018.,  14986.,
      19327.,  20731.,  22183.,  23683.,  14018.,  14986.,  15986.,  17018.,
      15986.,  17018.,  18082.,  19178.,  8581.,   9113.,   9661.,   10225.,
      9629.,   10193.,  10773.,  11369.,  0.,      0.,      0.,      0.,
      8290.,   9130.,   10002.,  10906.,  10258.,  11162.,  12098.,  13066.,
      21844.,  23716.,  25652.,  27652.,  26036.,  28036.,  30100.,  32228.,
      41174.,  44270.,  47462.,  50750.,  29716.,  31844.,  34036.,  36292.,
      34420.,  36676.,  38996.,  41380.,  18386.,  19546.,  20738.,  21962.,
      20866.,  22090.,  23346.,  24634.,  0.,      0.,      0.,      0.,
      18130.,  19290.,  20482.,  21706.,  20098.,  21322.,  22578.,  23866.,
      42804.,  45316.,  47892.,  50532.,  46996.,  49636.,  52340.,  55108.,
      74534.,  78590.,  82742.,  86990.,  53236.,  56004.,  58836.,  61732.,
      57940.,  60836.,  63796.,  66820.,  30786.,  32266.,  33778.,  35322.,
      33266.,  34810.,  36386.,  37994.,  0.,      0.,      0.,      0.,
      27970.,  29450.,  30962.,  32506.,  29938.,  31482.,  33058.,  34666.,
      63764.,  66916.,  70132.,  73412.,  67956.,  71236.,  74580.,  77988.,
      107894., 112910., 118022., 123230., 76756.,  80164.,  83636.,  87172.,
      81460.,  84996.,  88596.,  92260.,  43186.,  44986.,  46818.,  48682.,
      45666.,  47530.,  49426.,  51354.,  0.,      0.,      0.,      0.,
      17861.,  18649.,  19453.,  20273.,  19037.,  19857.,  20693.,  21545.,
      40018.,  41690.,  43394.,  45130.,  42498.,  44234.,  46002.,  47802.,
      66727.,  69379.,  72079.,  74827.,  46898.,  48698.,  50530.,  52394.,
      49634.,  51498.,  53394.,  55322.,  26045.,  26993.,  27957.,  28937.,
      27477.,  28457.,  29453.,  30465.,  0.,      0.,      0.,      0.,
      23741.,  24689.,  25653.,  26633.,  24917.,  25897.,  26893.,  27905.,
      52418.,  54410.,  56434.,  58490.,  54898.,  56954.,  59042.,  61162.,
      86287.,  89419.,  92599.,  95827.,  60578.,  62698.,  64850.,  67034.,
      63314.,  65498.,  67714.,  69962.,  33205.,  34313.,  35437.,  36577.,
      34637.,  35777.,  36933.,  38105.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      293.,    697.,    1117.,   1553.,   1853.,   2289.,   2741.,   3209.,
      3730.,   4634.,   5570.,   6538.,   6978.,   7946.,   8946.,   9978.,
      10567.,  12067.,  13615.,  15211.,  7538.,   8570.,   9634.,   10730.,
      11042.,  12138.,  13266.,  14426.,  5789.,   6353.,   6933.,   7529.,
      7605.,   8201.,   8813.,   9441.,   0.,      0.,      0.,      0.,
      8093.,   8657.,   9237.,   9833.,   9653.,   10249.,  10861.,  11489.,
      19970.,  21194.,  22450.,  23738.,  23218.,  24506.,  25826.,  27178.,
      35887.,  37867.,  39895.,  41971.,  25058.,  26410.,  27794.,  29210.,
      28562.,  29978.,  31426.,  32906.,  14869.,  15593.,  16333.,  17089.,
      16685.,  17441.,  18213.,  19001.,  0.,      0.,      0.,      0.,
      16258.,  17482.,  18738.,  20026.,  19762.,  21050.,  22370.,  23722.,
      40852.,  43492.,  46196.,  48964.,  48116.,  50884.,  53716.,  56612.,
      74294.,  78542.,  82886.,  87326.,  51796.,  54692.,  57652.,  60676.,
      59572.,  62596.,  65684.,  68836.,  30962.,  32506.,  34082.,  35690.,
      34978.,  36586.,  38226.,  39898.,  0.,      0.,      0.,      0.,
      33778.,  35322.,  36898.,  38506.,  37282.,  38890.,  40530.,  42202.,
      77172.,  80452.,  83796.,  87204.,  84436.,  87844.,  91316.,  94852.,
      130694., 135902., 141206., 146606., 90676.,  94212.,  97812.,  101476.,
      98452.,  102116., 105844., 109636., 51042.,  52906.,  54802.,  56730.,
      55058.,  56986.,  58946.,  60938.,  0.,      0.,      0.,      0.,
      51298.,  53162.,  55058.,  56986.,  54802.,  56730.,  58690.,  60682.,
      113492., 117412., 121396., 125444., 120756., 124804., 128916., 133092.,
      187094., 193262., 199526., 205886., 129556., 133732., 137972., 142276.,
      137332., 141636., 146004., 150436., 71122.,  73306.,  75522.,  77770.,
      75138.,  77386.,  79666.,  81978.,  0.,      0.,      0.,      0.,
      29525.,  30505.,  31501.,  32513.,  31469.,  32481.,  33509.,  34553.,
      64882.,  66938.,  69026.,  71146.,  68898.,  71018.,  73170.,  75354.,
      106327., 109555., 112831., 116155., 73298.,  75482.,  77698.,  79946.,
      77570.,  79818.,  82098.,  84410.,  40013.,  41153.,  42309.,  43481.,
      42213.,  43385.,  44573.,  45777.,  0.,      0.,      0.,      0.,
      39245.,  40385.,  41541.,  42713.,  41189.,  42361.,  43549.,  44753.,
      84962.,  87338.,  89746.,  92186.,  88978.,  91418.,  93890.,  96394.,
      137407., 141115., 144871., 148675., 94658.,  97162.,  99698.,  102266.,
      98930.,  101498., 104098., 106730., 51013.,  52313.,  53629.,  54961.,
      53213.,  54545.,  55893.,  57257.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      65306.,   73418.,   81914.,   90794.,   52572.,   58236.,   64156.,
      70332.,   60060.,   66236.,   72668.,   79356.,   7900.,    12540.,
      17436.,   22588.,   26360.,   36152.,   46456.,   57272.,   39288.,
      50104.,   61432.,   73272.,   75796.,   92788.,   110548.,  129076.,
      68600.,   80440.,   92792.,   105656.,  119764.,  138292.,  157588.,
      177652.,  97912.,   110776.,  124152.,  138040.,  163732.,  183796.,
      204628.,  226228.,  127224.,  141112.,  155512.,  170424.,  152440.,
      167352.,  182776.,  198712.,  35100.,   42300.,   49756.,   57468.,
      91000.,   105912.,  121336.,  137272.,  103928.,  119864.,  136312.,
      153272.,  188116.,  212788.,  238228.,  264436.,  153720.,  170680.,
      188152.,  206136.,  262804.,  289012.,  315988.,  343732.,  203512.,
      221496.,  239992.,  259000.,  337492.,  365236.,  393748.,  423028.,
      253304.,  272312.,  291832.,  311864.,  278520.,  298552.,  319096.,
      340152.,  74330.,   87050.,   100154.,  113642.,  179860.,  206068.,
      233044.,  260788.,  214612.,  242356.,  270868.,  300148.,  370254.,
      413022.,  456942.,  502014.,  289300.,  318580.,  348628.,  379444.,
      482286.,  527358.,  573582.,  620958.,  363988.,  394804.,  426388.,
      458740.,  594318.,  641694.,  690222.,  739902.,  438676.,  471028.,
      504148.,  538036.,  491860.,  525748.,  560404.,  595828.,  149340.,
      159100.,  169116.,  179388.,  319480.,  339512.,  360056.,  381112.,
      352888.,  373944.,  395512.,  417592.,  561556.,  593908.,  627028.,
      660916.,  402680.,  424760.,  447352.,  470456.,  636244.,  670132.,
      704788.,  740212.,  452472.,  475576.,  499192.,  523320.,  710932.,
      746356.,  782548.,  819508.,  502264.,  526392.,  551032.,  576184.,
      547960.,  573112.,  598776.,  624952.,  245690.,  262250.,  279194.,
      296522.,  522580.,  556468.,  591124.,  626548.,  588052.,  623476.,
      659668.,  696628.,  930414.,  984702.,  1040142., 1096734., 662740.,
      699700.,  737428.,  775924.,  1042446., 1099038., 1156782., 1215678.,
      737428.,  775924.,  815188.,  855220.,  1154478., 1213374., 1273422.,
      1334622., 812116.,  852148.,  892948.,  934516.,  896020.,  937588.,
      979924.,  1023028., 263580.,  275900.,  288476.,  301308.,  547960.,
      573112.,  598776.,  624952.,  601848.,  628024.,  654712.,  681912.,
      934996.,  975028.,  1015828., 1057396., 651640.,  678840.,  706552.,
      734776.,  1009684., 1051252., 1093588., 1136692., 701432.,  729656.,
      758392.,  787640.,  1084372., 1127476., 1171348., 1215988., 751224.,
      780472.,  810232.,  840504.,  817400.,  847672.,  878456.,  909752.,
      393180.,  408060.,  423196.,  438588.,  817400.,  847672.,  878456.,
      909752.,  871288.,  902584.,  934392.,  966712.,  1354516., 1402228.,
      1450708., 1499956., 941560.,  973880.,  1006712., 1040056., 1459924.,
      1509172., 1559188., 1609972., 1011832., 1045176., 1079032., 1113400.,
      1565332., 1616116., 1667668., 1719988., 1082104., 1116472., 1151352.,
      1186744., 1148280., 1183672., 1219576., 1255992., 127070.,  133870.,
      140798.,  147854.,  259420.,  273276.,  287388.,  301756.,  301724.,
      316092.,  330716.,  345596.,  461018.,  482954.,  505274.,  527978.,
      316380.,  331260.,  346396.,  361788.,  483002.,  505706.,  528794.,
      552266.,  331036.,  346428.,  362076.,  377980.,  504986.,  528458.,
      552314.,  576554.,  345692.,  361596.,  377756.,  394172.,  394140.,
      410556.,  427228.,  444156.,  260060.,  274940.,  290076.,  305468.,
      530680.,  560952.,  591736.,  623032.,  625528.,  656824.,  688632.,
      720952.,  955156.,  1002868., 1051348., 1100596., 654840.,  687160.,
      719992.,  753336.,  999124.,  1048372., 1098388., 1149172., 684152.,
      717496.,  751352.,  785720.,  1043092., 1093876., 1145428., 1197748.,
      713464.,  747832.,  782712.,  818104.,  820600.,  855992.,  891896.,
      928312.,  492060.,  509500.,  527196.,  545148.,  1004920., 1040312.,
      1076216., 1112632., 1099768., 1136184., 1173112., 1210552., 1681876.,
      1737268., 1793428., 1850356., 1149560., 1187000., 1224952., 1263416.,
      1756564., 1813492., 1871188., 1929652., 1199352., 1237816., 1276792.,
      1316280., 1831252., 1889716., 1948948., 2008948., 1249144., 1288632.,
      1328632., 1369144., 1356280., 1396792., 1437816., 1479352., 759770.,
      787850.,  816314.,  845162.,  1550740., 1607668., 1665364., 1723828.,
      1708372., 1766836., 1826068., 1886068., 2610894., 2699742., 2789742.,
      2880894., 1783060., 1843060., 1903828., 1965364., 2722926., 2814078.,
      2906382., 2999838., 1857748., 1919284., 1981588., 2044660., 2834958.,
      2928414., 3023022., 3118782., 1932436., 1995508., 2059348., 2123956.,
      2108500., 2173108., 2238484., 2304628., 606300.,  626300.,  646556.,
      667068.,  1233400., 1273912., 1314936., 1356472., 1348728., 1390264.,
      1432312., 1474872., 2055316., 2118388., 2182228., 2246836., 1398520.,
      1441080., 1484152., 1527736., 2130004., 2194612., 2259988., 2326132.,
      1448312., 1491896., 1535992., 1580600., 2204692., 2270836., 2337748.,
      2405428., 1498104., 1542712., 1587832., 1633464., 1625720., 1671352.,
      1717496., 1764152., 931130.,  963050.,  995354.,  1028042., 1893460.,
      1958068., 2023444., 2089588., 2081812., 2147956., 2214868., 2282548.,
      3171054., 3271422., 3372942., 3475614., 2156500., 2224180., 2292628.,
      2361844., 3283086., 3385758., 3489582., 3594558., 2231188., 2300404.,
      2370388., 2441140., 3395118., 3500094., 3606222., 3713502., 2305876.,
      2376628., 2448148., 2520436., 2512660., 2584948., 2658004., 2731828.,
      720540.,  743100.,  765916.,  788988.,  1461880., 1507512., 1553656.,
      1600312., 1597688., 1644344., 1691512., 1739192., 2428756., 2499508.,
      2571028., 2643316., 1647480., 1695160., 1743352., 1792056., 2503444.,
      2575732., 2648788., 2722612., 1697272., 1745976., 1795192., 1844920.,
      2578132., 2651956., 2726548., 2801908., 1747064., 1796792., 1847032.,
      1897784., 1895160., 1945912., 1997176., 2048952., 1054940., 1080060.,
      1105436., 1131068., 2140920., 2191672., 2242936., 2294712., 2276728.,
      2328504., 2380792., 2433592., 3462676., 3541108., 3620308., 3700276.,
      2347000., 2399800., 2453112., 2506936., 3568084., 3648052., 3728788.,
      3810292., 2417272., 2471096., 2525432., 2580280., 3673492., 3754996.,
      3837268., 3920308., 2487544., 2542392., 2597752., 2653624., 2635640.,
      2691512., 2747896., 2804792., 253150.,  265070.,  277118.,  289294.,
      511580.,  535676.,  560028.,  584636.,  594844.,  619452.,  644316.,
      669436.,  900698.,  937994.,  975674.,  1013738., 609500.,  634620.,
      659996.,  685628.,  922682.,  960746.,  999194.,  1038026., 624156.,
      649788.,  675676.,  701820.,  944666.,  983498.,  1022714., 1062314.,
      638812.,  664956.,  691356.,  718012.,  728220.,  754876.,  781788.,
      808956.,  512220.,  537340.,  562716.,  588348.,  1035000., 1085752.,
      1137016., 1188792., 1211768., 1263544., 1315832., 1368632., 1834516.,
      1912948., 1992148., 2072116., 1241080., 1293880., 1347192., 1401016.,
      1878484., 1958452., 2039188., 2120692., 1270392., 1324216., 1378552.,
      1433400., 1922452., 2003956., 2086228., 2169268., 1299704., 1354552.,
      1409912., 1465784., 1488760., 1544632., 1601016., 1657912., 949020.,
      976700.,  1004636., 1032828., 1918840., 1974712., 2031096., 2087992.,
      2095608., 2152504., 2209912., 2267832., 3175636., 3261748., 3348628.,
      3436276., 2145400., 2203320., 2261752., 2320696., 3250324., 3337972.,
      3426388., 3515572., 2195192., 2254136., 2313592., 2373560., 3325012.,
      3414196., 3504148., 3594868., 2244984., 2304952., 2365432., 2426424.,
      2434040., 2495032., 2556536., 2618552., 1445210., 1488650., 1532474.,
      1576682., 2921620., 3009268., 3097684., 3186868., 3202132., 3291316.,
      3381268., 3471988., 4851534., 4986462., 5122542., 5259774., 3276820.,
      3367540., 3459028., 3551284., 4963566., 5100798., 5239182., 5378718.,
      3351508., 3443764., 3536788., 3630580., 5075598., 5215134., 5355822.,
      5497662., 3426196., 3519988., 3614548., 3709876., 3725140., 3820468.,
      3916564., 4013428., 1063260., 1093500., 1123996., 1154748., 2147320.,
      2208312., 2269816., 2331832., 2344568., 2406584., 2469112., 2532152.,
      3549076., 3642868., 3737428., 3832756., 2394360., 2457400., 2520952.,
      2585016., 3623764., 3719092., 3815188., 3912052., 2444152., 2508216.,
      2572792., 2637880., 3698452., 3795316., 3892948., 3991348., 2493944.,
      2559032., 2624632., 2690744., 2703480., 2769592., 2836216., 2903352.,
      1616570., 1663850., 1711514., 1759562., 3264340., 3359668., 3455764.,
      3552628., 3575572., 3672436., 3770068., 3868468., 5411694., 5558142.,
      5705742., 5854494., 3650260., 3748660., 3847828., 3947764., 5523726.,
      5672478., 5822382., 5973438., 3724948., 3824884., 3925588., 4027060.,
      5635758., 5786814., 5939022., 6092382., 3799636., 3901108., 4003348.,
      4106356., 4129300., 4232308., 4336084., 4440628., 1177500., 1210300.,
      1243356., 1276668., 2375800., 2441912., 2508536., 2575672., 2593528.,
      2660664., 2728312., 2796472., 3922516., 4023988., 4126228., 4229236.,
      2643320., 2711480., 2780152., 2849336., 3997204., 4100212., 4203988.,
      4308532., 2693112., 2762296., 2831992., 2902200., 4071892., 4176436.,
      4281748., 4387828., 2742904., 2813112., 2883832., 2955064., 2972920.,
      3044152., 3115896., 3188152., 1716700., 1752060., 1787676., 1823548.,
      3464440., 3535672., 3607416., 3679672., 3682168., 3754424., 3827192.,
      3900472., 5570836., 5679988., 5789908., 5900596., 3752440., 3825720.,
      3899512., 3973816., 5676244., 5786932., 5898388., 6010612., 3822712.,
      3897016., 3971832., 4047160., 5781652., 5893876., 6006868., 6120628.,
      3892984., 3968312., 4044152., 4120504., 4123000., 4199352., 4276216.,
      4353592.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x8x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      174.,     446.,     846.,     190.,     590.,     1118.,
      1774.,    540.,     1596.,    2908.,    4476.,    1884.,    3452.,
      5276.,    7356.,    3578.,    6314.,    9434.,    12938.,   6300.,
      8380.,    10716.,   13308.,   9692.,    12284.,   15132.,   18236.,
      6974.,    8398.,    9950.,    11630.,   9182.,    10862.,   12670.,
      14606.,   0.,       0.,       0.,       0.,       830.,     2254.,
      3806.,    5486.,    990.,     2670.,    4478.,    6414.,    7260.,
      10876.,   14748.,   18876.,   8604.,    12732.,   17116.,   21756.,
      21338.,   27914.,   34874.,   42218.,   23260.,   27900.,   32796.,
      37948.,   26652.,   31804.,   37212.,   42876.,   18014.,   20718.,
      23550.,   26510.,   20222.,   23182.,   26270.,   29486.,   0.,
      0.,       0.,       0.,       2140.,    5756.,    9628.,    13756.,
      5532.,    9660.,    14044.,   18684.,   21624.,   30392.,   39672.,
      49464.,   30456.,   40248.,   50552.,   61368.,   62548.,   78004.,
      94228.,   111220.,  59768.,   70584.,   81912.,   93752.,   72696.,
      84536.,   96888.,   109752.,  45724.,   51900.,   58332.,   65020.,
      53212.,   59900.,   66844.,   74044.,   0.,       0.,       0.,
      0.,       19100.,   25276.,   31708.,   38396.,   22492.,   29180.,
      36124.,   43324.,   65784.,   79672.,   94072.,   108984.,  74616.,
      89528.,   104952.,  120888.,  144148.,  167284.,  191188.,  215860.,
      124408.,  140344.,  156792.,  173752.,  137336.,  154296.,  171768.,
      189752.,  83164.,   91900.,   100892.,  110140.,  90652.,   99900.,
      109404.,  119164.,  0.,       0.,       0.,       0.,       36060.,
      44796.,   53788.,   63036.,   39452.,   48700.,   58204.,   67964.,
      109944.,  128952.,  148472.,  168504.,  118776.,  138808.,  159352.,
      180408.,  225748.,  256564.,  288148.,  320500.,  189048.,  210104.,
      231672.,  253752.,  201976.,  224056.,  246648.,  269752.,  120604.,
      131900.,  143452.,  155260.,  128092.,  139900.,  151964.,  164284.,
      0.,       0.,       0.,       0.,       48990.,   53742.,   58622.,
      63630.,   52222.,   57230.,   62366.,   67630.,   119964.,  130236.,
      140764.,  151548.,  127452.,  138236.,  149276.,  160572.,  214970.,
      231530.,  248474.,  265802.,  162588.,  173884.,  185436.,  197244.,
      172124.,  183932.,  195996.,  208316.,  95870.,   101902.,  108062.,
      114350.,  101150.,  107438.,  113854.,  120398.,  0.,       0.,
      0.,       0.,       65150.,   71182.,   77342.,   83630.,   68382.,
      74670.,   81086.,   87630.,   157404.,  170236.,  183324.,  196668.,
      164892.,  178236.,  191836.,  205692.,  278810.,  299210.,  319994.,
      341162.,  210268.,  224124.,  238236.,  252604.,  219804.,  234172.,
      248796.,  263676.,  122270.,  129582.,  137022.,  144590.,  127550.,
      135118.,  142814.,  150638.,  0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       990.,     2670.,
      4478.,    6414.,    7294.,    9230.,    11294.,   13486.,   14748.,
      18876.,   23260.,   27900.,   28380.,   33020.,   37916.,   43068.,
      43322.,   50666.,   58394.,   66506.,   32796.,   37948.,   43356.,
      49020.,   48476.,   54140.,   60060.,   66236.,   26366.,   29326.,
      32414.,   35630.,   34718.,   37934.,   41278.,   44750.,   0.,
      0.,       0.,       0.,       32510.,   35470.,   38558.,   41774.,
      38814.,   42030.,   45374.,   48846.,   82908.,   89596.,   96540.,
      103740.,  96540.,   103740.,  111196.,  118908.,  153242.,  164426.,
      175994.,  187946.,  111196.,  118908.,  126876.,  135100.,  126876.,
      135100.,  143580.,  152316.,  68126.,   72366.,   76734.,   81230.,
      76478.,   80974.,   85598.,   90350.,   0.,       0.,       0.,
      0.,       65500.,   72188.,   79132.,   86332.,   81180.,   88380.,
      95836.,   103548.,  172920.,  187832.,  203256.,  219192.,  206328.,
      222264.,  238712.,  255672.,  326356.,  351028.,  376468.,  402676.,
      235640.,  252600.,  270072.,  288056.,  273144.,  291128.,  309624.,
      328632.,  145948.,  155196.,  164700.,  174460.,  165724.,  175484.,
      185500.,  195772.,  0.,       0.,       0.,       0.,       143900.,
      153148.,  162652.,  172412.,  159580.,  169340.,  179356.,  189628.,
      339960.,  359992.,  380536.,  401592.,  373368.,  394424.,  415992.,
      438072.,  592276.,  624628.,  657748.,  691636.,  423160.,  445240.,
      467832.,  490936.,  460664.,  483768.,  507384.,  531512.,  244828.,
      256636.,  268700.,  281020.,  264604.,  276924.,  289500.,  302332.,
      0.,       0.,       0.,       0.,       222300.,  234108.,  246172.,
      258492.,  237980.,  250300.,  262876.,  275708.,  507000.,  532152.,
      557816.,  583992.,  540408.,  566584.,  593272.,  620472.,  858196.,
      898228.,  939028.,  980596.,  610680.,  637880.,  665592.,  693816.,
      648184.,  676408.,  705144.,  734392.,  343708.,  358076.,  372700.,
      387580.,  363484.,  378364.,  393500.,  408892.,  0.,       0.,
      0.,       0.,       142110.,  148398.,  154814.,  161358.,  151486.,
      158030.,  164702.,  171502.,  318492.,  331836.,  345436.,  359292.,
      338268.,  352124.,  366236.,  380604.,  531194.,  552362.,  573914.,
      595850.,  373404.,  387772.,  402396.,  417276.,  395228.,  410108.,
      425244.,  440636.,  207422.,  214990.,  222686.,  230510.,  218846.,
      226670.,  234622.,  242702.,  0.,       0.,       0.,       0.,
      188990.,  196558.,  204254.,  212078.,  198366.,  206190.,  214142.,
      222222.,  417372.,  433276.,  449436.,  465852.,  437148.,  453564.,
      470236.,  487164.,  687194.,  712202.,  737594.,  763370.,  482524.,
      499452.,  516636.,  534076.,  504348.,  521788.,  539484.,  557436.,
      264542.,  273390.,  282366.,  291470.,  275966.,  285070.,  294302.,
      303662.,  0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       1950.,    5166.,    8510.,    11982.,
      14398.,   17870.,   21470.,   25198.,   28956.,   36156.,   43612.,
      51324.,   54876.,   62588.,   70556.,   78780.,   83066.,   95018.,
      107354.,  120074.,  59292.,   67516.,   75996.,   84732.,   87260.,
      95996.,   104988.,  114236.,  45758.,   50254.,   54878.,   59630.,
      60254.,   65006.,   69886.,   74894.,   0.,       0.,       0.,
      0.,       64190.,   68686.,   73310.,   78062.,   76638.,   81390.,
      86270.,   91278.,   158556.,  168316.,  178332.,  188604.,  184476.,
      194748.,  205276.,  216060.,  285146.,  300938.,  317114.,  333674.,
      199132.,  209916.,  220956.,  232252.,  227100.,  238396.,  249948.,
      261756.,  118238.,  124014.,  129918.,  135950.,  132734.,  138766.,
      144926.,  151214.,  0.,       0.,       0.,       0.,       128860.,
      138620.,  148636.,  158908.,  156828.,  167100.,  177628.,  188412.,
      324216.,  345272.,  366840.,  388920.,  382200.,  404280.,  426872.,
      449976.,  590164.,  624052.,  658708.,  694132.,  411512.,  434616.,
      458232.,  482360.,  473592.,  497720.,  522360.,  547512.,  246172.,
      258492.,  271068.,  283900.,  278236.,  291068.,  304156.,  317500.,
      0.,       0.,       0.,       0.,       268700.,  281020.,  293596.,
      306428.,  296668.,  309500.,  322588.,  335932.,  614136.,  640312.,
      667000.,  694200.,  672120.,  699320.,  727032.,  755256.,  1040404.,
      1081972., 1124308., 1167412., 721912.,  750136.,  778872.,  808120.,
      783992.,  813240.,  843000.,  873272.,  406492.,  421372.,  436508.,
      451900.,  438556.,  453948.,  469596.,  485500.,  0.,       0.,
      0.,       0.,       408540.,  423420.,  438556.,  453948.,  436508.,
      451900.,  467548.,  483452.,  904056.,  935352.,  967160.,  999480.,
      962040.,  994360.,  1027192., 1060536., 1490644., 1539892., 1589908.,
      1640692., 1032312., 1065656., 1099512., 1133880., 1094392., 1128760.,
      1163640., 1199032., 566812.,  584252.,  601948.,  619900.,  598876.,
      616828.,  635036.,  653500.,  0.,       0.,       0.,       0.,
      235230.,  243054.,  251006.,  259086.,  250750.,  258830.,  267038.,
      275374.,  517020.,  533436.,  550108.,  567036.,  549084.,  566012.,
      583196.,  600636.,  847418.,  873194.,  899354.,  925898.,  584220.,
      601660.,  619356.,  637308.,  618332.,  636284.,  654492.,  672956.,
      318974.,  328078.,  337310.,  346670.,  336542.,  345902.,  355390.,
      365006.,  0.,       0.,       0.,       0.,       312830.,  321934.,
      331166.,  340526.,  328350.,  337710.,  347198.,  356814.,  677340.,
      696316.,  715548.,  735036.,  709404.,  728892.,  748636.,  768636.,
      1095578., 1125194., 1155194., 1185578., 754780.,  774780.,  795036.,
      815548.,  788892.,  809404.,  830172.,  851196.,  406814.,  417198.,
      427710.,  438350.,  424382.,  435022.,  445790.,  456686.,  0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.};
  const std::array<int, 4> in_shape = {{3, 8, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      20.,   23.,   44.,   39.,   68.,   55.,   62.,   56.,   70.,   124.,
      102.,  172.,  134.,  156.,  126.,  140.,  244.,  192.,  322.,  244.,
      266.,  233.,  266.,  450.,  344.,  567.,  422.,  467.,  318.,  348.,
      556.,  400.,  634.,  452.,  490.,  521.,  578.,  918.,  656.,  1035.,
      734.,  803.,  510.,  556.,  868.,  608.,  946.,  660.,  714.,  809.,
      890.,  1386., 968.,  1503., 1046., 1139., 702.,  764.,  1180., 816.,
      1258., 868.,  938.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      300.,  343.,  524.,  359.,  548.,  375.,  422.,  616.,  710.,  1084.,
      742.,  1132., 774.,  876.,  1086., 1180., 1804., 1232., 1882., 1284.,
      1386., 1673., 1826., 2790., 1904., 2907., 1982., 2147., 1278., 1388.,
      2116., 1440., 2194., 1492., 1610., 1961., 2138., 3258., 2216., 3375.,
      2294., 2483., 1470., 1596., 2428., 1648., 2506., 1700., 1834., 2249.,
      2450., 3726., 2528., 3843., 2606., 2819., 1662., 1804., 2740., 1856.,
      2818., 1908., 2058., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      580.,  663.,  1004., 679.,  1028., 695.,  782.,  1176., 1350., 2044.,
      1382., 2092., 1414., 1596., 2046., 2220., 3364., 2272., 3442., 2324.,
      2506., 3113., 3386., 5130., 3464., 5247., 3542., 3827., 2238., 2428.,
      3676., 2480., 3754., 2532., 2730., 3401., 3698., 5598., 3776., 5715.,
      3854., 4163., 2430., 2636., 3988., 2688., 4066., 2740., 2954., 3689.,
      4010., 6066., 4088., 6183., 4166., 4499., 2622., 2844., 4300., 2896.,
      4378., 2948., 3178., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,   8.,   11.,  8.,    10.,   6.,    7.,    20.,   23.,
      26.,  18.,  20.,  14.,  18.,  48.,   58.,   68.,   44.,   50.,   34.,
      38.,  98.,  108., 118., 74.,  80.,   59.,   68.,   169.,  190.,  211.,
      128., 140., 78.,  86.,  194., 212.,  230.,  130.,  140.,  118.,  126.,
      284., 302., 320., 180., 190., 80.,   85.,   186.,  197.,  208.,  114.,
      120., 105., 110., 241., 252., 263.,  144.,  150.,  0.,    0.,    0.,
      0.,   0.,   0.,   0.,   7.,   14.,   29.,   44.,   59.,   32.,   40.,
      42.,  49.,  104., 119., 134., 72.,   80.,   86.,   102.,  216.,  250.,
      284., 152., 170., 166., 182., 386.,  420.,  454.,  242.,  260.,  257.,
      284., 601., 658., 715., 380., 410.,  210.,  230.,  482.,  524.,  566.,
      298., 320., 310., 330., 692., 734.,  776.,  408.,  430.,  176.,  187.,
      390., 413., 436., 228., 240., 231.,  242.,  505.,  528.,  551.,  288.,
      300., 0.,   0.,   0.,   0.,   0.,    0.,    0.,    13.,   26.,   53.,
      80.,  107., 56.,  70.,  78.,  91.,   188.,  215.,  242.,  126.,  140.,
      158., 186., 384., 442., 500., 260.,  290.,  298.,  326.,  674.,  732.,
      790., 410., 440., 455., 500., 1033., 1126., 1219., 632.,  680.,  342.,
      374., 770., 836., 902., 466., 500.,  502.,  534.,  1100., 1166., 1232.,
      636., 670., 272., 289., 594., 629.,  664.,  342.,  360.,  357.,  374.,
      769., 804., 839., 432., 450., 0.,    0.,    0.,    0.,    0.,    0.,
      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      128.,   148.,   295.,   272.,   481.,   396.,   448.,   368.,   472.,
      854.,   720.,   1226.,  968.,   1136.,  888.,   992.,   1754.,  1400.,
      2366.,  1808.,  1976.,  1660.,  1912.,  3267.,  2524.,  4185.,  3136.,
      3484.,  2392.,  2624.,  4202.,  3032.,  4814.,  3440.,  3736.,  3916.,
      4360.,  6939.,  4972.,  7857.,  5584.,  6124.,  3896.,  4256.,  6650.,
      4664.,  7262.,  5072.,  5496.,  6172.,  6808.,  10611., 7420.,  11529.,
      8032.,  8764.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 2288.,  2628.,
      4015.,  2752.,  4201.,  2876.,  3248.,  4688.,  5432.,  8294.,  5680.,
      8666.,  5928.,  6736.,  8408.,  9152.,  13994., 9560.,  14606., 9968.,
      10776., 12940., 14152., 21627., 14764., 22545., 15376., 16684., 9912.,
      10784., 16442., 11192., 17054., 11600., 12536., 15196., 16600., 25299.,
      17212., 26217., 17824., 19324., 11416., 12416., 18890., 12824., 19502.,
      13232., 14296., 17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      12920., 14048., 21338., 14456., 21950., 14864., 16056., 18560., 19688.,
      29918., 20256., 30770., 20824., 22016., 4448.,  5108.,  7735.,  5232.,
      7921.,  5356.,  6048.,  9008.,  10392., 15734., 10640., 16106., 10888.,
      12336., 15928., 17312., 26234., 17720., 26846., 18128., 19576., 24220.,
      26392., 39987., 27004., 40905., 27616., 29884., 17432., 18944., 28682.,
      19352., 29294., 19760., 21336., 26476., 28840., 43659., 29452., 44577.,
      30064., 32524., 18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      28732., 31288., 47331., 31900., 48249., 32512., 35164., 20440., 22208.,
      33578., 22616., 34190., 23024., 24856., 29280., 31048., 46958., 31616.,
      47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   35.,   41.,   128.,
      148.,  168.,  123.,  137.,  82.,   110.,  312.,  384.,  456.,  306.,
      350.,  222.,  250.,  672.,  744.,  816.,  526.,  570.,  391.,  457.,
      1172., 1328., 1484., 919.,  1009., 566.,  626.,  1424., 1560., 1696.,
      966.,  1042., 866.,  926.,  2104., 2240., 2376., 1346., 1422., 599.,
      637.,  1400., 1484., 1568., 863.,  909.,  789.,  827.,  1820., 1904.,
      1988., 1093., 1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  311.,  365.,  776.,
      892.,  1008., 543.,  605.,  634.,  758.,  1608., 1872., 2136., 1146.,
      1286., 1254., 1378., 2928., 3192., 3456., 1846., 1986., 1939., 2149.,
      4556., 5000., 5444., 2899., 3133., 1598., 1754., 3680., 4008., 4336.,
      2286., 2458., 2378., 2534., 5320., 5648., 5976., 3146., 3318., 1355.,
      1441., 3008., 3188., 3368., 1763., 1857., 1785., 1871., 3908., 4088.,
      4268., 2233., 2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  587.,  689.,  1424.,
      1636., 1848., 963.,  1073., 1186., 1406., 2904., 3360., 3816., 1986.,
      2222., 2286., 2506., 5184., 5640., 6096., 3166., 3402., 3487., 3841.,
      7940., 8672., 9404., 4879., 5257., 2630., 2882., 5936., 6456., 6976.,
      3606., 3874., 3890., 4142., 8536., 9056., 9576., 4946., 5214., 2111.,
      2245., 4616., 4892., 5168., 2663., 2805., 2781., 2915., 5996., 6272.,
      6548., 3373., 3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,   2632.,
      3432.,   6292.,   5384.,   9220.,   7336.,   8648.,   6632.,   7432.,
      13252.,  10664.,  18100.,  13896.,  15208.,  12476.,  14444.,  24822.,
      19292.,  32094.,  24140.,  26876.,  18536.,  20360.,  32644.,  23592.,
      37492.,  26824.,  29160.,  30332.,  33836.,  53910.,  38684.,  61182.,
      43532.,  47804.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,
      43112.,  48188.,  53228.,  82998.,  58076.,  90270.,  62924.,  68732.,
      42344.,  46216.,  71428.,  49448.,  76276.,  52680.,  57064.,  61704.,
      65576.,  101428., 70088.,  108196., 74600.,  78984.,  17860.,  20564.,
      31418.,  21540.,  32882.,  22516.,  25476.,  36552.,  42472.,  64852.,
      44424.,  67780.,  46376.,  52808.,  66152.,  72072.,  110212., 75304.,
      115060., 78536.,  84968.,  101756., 111404., 170262., 116252., 177534.,
      121100., 131516., 78056.,  85000.,  129604., 88232.,  134452., 91464.,
      98920.,  119612., 130796., 199350., 135644., 206622., 140492., 152444.,
      89960.,  97928.,  148996., 101160., 153844., 104392., 112872., 137468.,
      150188., 228438., 155036., 235710., 159884., 173372., 101864., 110856.,
      168388., 114088., 173236., 117320., 126824., 146824., 155816., 236788.,
      160328., 243556., 164840., 174344., 34820.,  40084.,  60698.,  41060.,
      62162.,  42036.,  47556.,  70472.,  81512.,  123412., 83464.,  126340.,
      85416.,  96968.,  125672., 136712., 207172., 139944., 212020., 143176.,
      154728., 191036., 208364., 315702., 213212., 322974., 218060., 236156.,
      137576., 149640., 226564., 152872., 231412., 156104., 168680., 208892.,
      227756., 344790., 232604., 352062., 237452., 257084., 149480., 162568.,
      245956., 165800., 250804., 169032., 182632., 226748., 247148., 373878.,
      251996., 381150., 256844., 278012., 161384., 175496., 265348., 178728.,
      270196., 181960., 196584., 231944., 246056., 372148., 250568., 378916.,
      255080., 269704.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   230.,   270.,
      900.,   1044.,  1188.,  902.,   1006.,  540.,   748.,   2216.,  2760.,
      3304.,  2268.,  2604.,  1580.,  1788.,  4936.,  5480.,  6024.,  3948.,
      4284.,  2810.,  3314.,  8668.,  9868.,  11068., 6938.,  7634.,  4300.,
      4764.,  10888., 11944., 13000., 7436.,  8028.,  6620.,  7084.,  16168.,
      17224., 18280., 10396., 10988., 4630.,  4926.,  10852., 11508., 12164.,
      6710.,  7070.,  6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,   694.,
      1428.,  2340.,  3252.,  1774.,  2262.,  2390.,  2814.,  5988.,  6900.,
      7812.,  4214.,  4702.,  4860.,  5836.,  12392., 14472., 16552., 8892.,
      9996.,  9740.,  10716., 22792., 24872., 26952., 14412., 15516., 15050.,
      16706., 35452., 38956., 42460., 22634., 24482., 12460., 13692., 28744.,
      31336., 33928., 17900., 19260., 18620., 19852., 41704., 44296., 46888.,
      24700., 26060., 10630., 11310., 23620., 25044., 26468., 13862., 14606.,
      14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     510.,   1318.,  2676.,  4356.,
      6036.,  3166.,  4038.,  4550.,  5358.,  11076., 12756., 14436., 7526.,
      8398.,  9180.,  10924., 22568., 26184., 29800., 15516., 17388., 17900.,
      19644., 40648., 44264., 47880., 24876., 26748., 27290., 30098., 62236.,
      68044., 73852., 38330., 41330., 20620., 22620., 46600., 50728., 54856.,
      28364., 30492., 30620., 32620., 67240., 71368., 75496., 39004., 41132.,
      16630., 17694., 36388., 38580., 40772., 21014., 22142., 21950., 23014.,
      47348., 49540., 51732., 26654., 27782., 0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      48.,    80.,    56.,    92.,    119.,   176.,   116.,   156.,   209.,
      272.,   176.,   220.,   200.,   248.,   144.,   224.,   192.,   280.,
      358.,   496.,   312.,   408.,   538.,   688.,   432.,   536.,   512.,
      624.,   384.,   504.,   432.,   560.,   778.,   976.,   632.,   768.,
      1078.,  1288.,  832.,   976.,   912.,   1064.,  728.,   932.,   848.,
      1064.,  1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,
      1616.,  1868.,  1120.,  1272.,  1232.,  1392.,  1978.,  2224.,  1432.,
      1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  1832.,  2084.,
      2048.,  2312.,  3267.,  3672.,  2348.,  2624.,  3717.,  4140.,  2648.,
      2936.,  2912.,  3212.,  1856.,  2040.,  2032.,  2224.,  3178.,  3472.,
      2232.,  2432.,  3478.,  3784.,  2432.,  2640.,  2640.,  2856.,  2936.,
      3236.,  3248.,  3560.,  5067.,  5544.,  3548.,  3872.,  5517.,  6012.,
      3848.,  4184.,  4208.,  4556.,  2592.,  2808.,  2832.,  3056.,  4378.,
      4720.,  3032.,  3264.,  4678.,  5032.,  3232.,  3472.,  3504.,  3752.,
      3792.,  4048.,  4032.,  4296.,  6238.,  6640.,  4312.,  4584.,  6658.,
      7072.,  4592.,  4872.,  4864.,  5152.,  1088.,  1200.,  1256.,  1372.,
      1919.,  2096.,  1316.,  1436.,  2009.,  2192.,  1376.,  1500.,  1560.,
      1688.,  2224.,  2464.,  2592.,  2840.,  3958.,  4336.,  2712.,  2968.,
      4138.,  4528.,  2832.,  3096.,  3232.,  3504.,  4064.,  4344.,  4432.,
      4720.,  6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,
      5232.,  5544.,  6248.,  6692.,  6848.,  7304.,  10467., 11160., 7148.,
      7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  4800.,  5112.,
      5232.,  5552.,  7978.,  8464.,  5432.,  5760.,  8278.,  8776.,  5632.,
      5968.,  6096.,  6440.,  7352.,  7844.,  8048.,  8552.,  12267., 13032.,
      8348.,  8864.,  12717., 13500., 8648.,  9176.,  9392.,  9932.,  5536.,
      5880.,  6032.,  6384.,  9178.,  9712.,  6232.,  6592.,  9478.,  10024.,
      6432.,  6800.,  6960.,  7336.,  8456.,  8996.,  9248.,  9800.,  14067.,
      14904., 9548.,  10112., 14517., 15372., 9848.,  10424., 10688., 11276.,
      6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,  7424.,  10678.,
      11272., 7232.,  7632.,  7824.,  8232.,  9072.,  9488.,  9632.,  10056.,
      14638., 15280., 9912.,  10344., 15058., 15712., 10192., 10632., 10784.,
      11232., 2128.,  2320.,  2456.,  2652.,  3719.,  4016.,  2516.,  2716.,
      3809.,  4112.,  2576.,  2780.,  2920.,  3128.,  4304.,  4704.,  4992.,
      5400.,  7558.,  8176.,  5112.,  5528.,  7738.,  8368.,  5232.,  5656.,
      5952.,  6384.,  7744.,  8184.,  8432.,  8880.,  12778., 13456., 8632.,
      9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 11768., 12452.,
      12848., 13544., 19467., 20520., 13148., 13856., 19917., 20988., 13448.,
      14168., 14576., 15308., 8480.,  8952.,  9232.,  9712.,  13978., 14704.,
      9432.,  9920.,  14278., 15016., 9632.,  10128., 10416., 10920., 12872.,
      13604., 14048., 14792., 21267., 22392., 14348., 15104., 21717., 22860.,
      14648., 15416., 15872., 16652., 9216.,  9720.,  10032., 10544., 15178.,
      15952., 10232., 10752., 15478., 16264., 10432., 10960., 11280., 11816.,
      13976., 14756., 15248., 16040., 23067., 24264., 15548., 16352., 23517.,
      24732., 15848., 16664., 17168., 17996., 9952.,  10488., 10832., 11376.,
      16378., 17200., 11032., 11584., 16678., 17512., 11232., 11792., 12144.,
      12712., 14352., 14928., 15232., 15816., 23038., 23920., 15512., 16104.,
      23458., 24352., 15792., 16392., 16704., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   11.,   24.,   13.,   28.,   48.,   80.,
      56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,   26.,   56.,
      38.,   72.,   120.,  192.,  152.,  232.,  184.,  272.,  130.,  176.,
      150.,  200.,  86.,   136.,  98.,   152.,  280.,  392.,  312.,  432.,
      344.,  472.,  230.,  296.,  250.,  320.,  155.,  236.,  185.,  272.,
      496.,  676.,  568.,  760.,  640.,  844.,  407.,  512.,  449.,  560.,
      254.,  312.,  282.,  344.,  648.,  776.,  712.,  848.,  776.,  920.,
      446.,  520.,  482.,  560.,  394.,  472.,  422.,  504.,  968.,  1136.,
      1032., 1208., 1096., 1280., 626.,  720.,  662.,  760.,  279.,  320.,
      297.,  340.,  656.,  744.,  696.,  788.,  736.,  832.,  407.,  456.,
      429.,  480.,  369.,  420.,  387.,  440.,  856.,  964.,  896.,  1008.,
      936.,  1052., 517.,  576.,  539.,  600.,  0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  192.,  236.,
      105.,  128.,  135.,  160.,  143.,  168.,  169.,  196.,  360.,  416.,
      416.,  476.,  472.,  536.,  255.,  288.,  285.,  320.,  290.,  344.,
      350.,  408.,  744.,  864.,  872.,  1000., 1000., 1136., 538.,  608.,
      606.,  680.,  590.,  664.,  650.,  728.,  1384., 1544., 1512., 1680.,
      1640., 1816., 878.,  968.,  946.,  1040., 911.,  1028., 1013., 1136.,
      2152., 2404., 2368., 2632., 2584., 2860., 1379., 1520., 1493., 1640.,
      758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264.,
      1094., 1192., 1178., 1280., 1138., 1240., 1214., 1320., 2552., 2768.,
      2712., 2936., 2872., 3104., 1514., 1632., 1598., 1720., 651.,  704.,
      693.,  748.,  1448., 1560., 1536., 1652., 1624., 1744., 851.,  912.,
      897.,  960.,  861.,  924.,  903.,  968.,  1888., 2020., 1976., 2112.,
      2064., 2204., 1081., 1152., 1127., 1200., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  360.,  428.,
      189.,  224.,  243.,  280.,  275.,  312.,  325.,  364.,  672.,  752.,
      776.,  860.,  880.,  968.,  459.,  504.,  513.,  560.,  554.,  632.,
      662.,  744.,  1368., 1536., 1592., 1768., 1816., 2000., 946.,  1040.,
      1062., 1160., 1094., 1192., 1202., 1304., 2488., 2696., 2712., 2928.,
      2936., 3160., 1526., 1640., 1642., 1760., 1667., 1820., 1841., 2000.,
      3808., 4132., 4168., 4504., 4528., 4876., 2351., 2528., 2537., 2720.,
      1262., 1368., 1386., 1496., 2856., 3080., 3112., 3344., 3368., 3608.,
      1742., 1864., 1874., 2000., 1882., 2008., 2006., 2136., 4136., 4400.,
      4392., 4664., 4648., 4928., 2402., 2544., 2534., 2680., 1023., 1088.,
      1089., 1156., 2240., 2376., 2376., 2516., 2512., 2656., 1295., 1368.,
      1365., 1440., 1353., 1428., 1419., 1496., 2920., 3076., 3056., 3216.,
      3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      326.,    574.,    382.,    662.,    847.,    1291.,   854.,    1166.,
      1555.,   2047.,   1326.,   1670.,   1510.,   1886.,   1004.,   1628.,
      1372.,   2060.,   2606.,   3686.,   2316.,   3068.,   4022.,   5198.,
      3260.,   4076.,   3884.,   4764.,   2844.,   3788.,   3212.,   4220.,
      5846.,   7406.,   4796.,   5868.,   8222.,   9878.,   6380.,   7516.,
      7004.,   8204.,   5434.,   7042.,   6370.,   8074.,   11097.,  13725.,
      8746.,   10546.,  14661.,  17433.,  11122.,  13018.,  12442.,  14434.,
      8668.,   9868.,   9548.,   10812.,  15350.,  17294.,  11132.,  12460.,
      17726.,  19766.,  12716.,  14108.,  13852.,  15308.,  14170.,  16162.,
      15874.,  17962.,  25353.,  28557.,  18250.,  20434.,  28917.,  32265.,
      20626.,  22906.,  22714.,  25090.,  14492.,  15948.,  15884.,  17404.,
      24854.,  27182.,  17468.,  19052.,  27230.,  29654.,  19052.,  20700.,
      20700.,  22412.,  22906.,  25282.,  25378.,  27850.,  39609.,  43389.,
      27754.,  30322.,  43173.,  47097.,  30130.,  32794.,  32986.,  35746.,
      20316.,  22028.,  22220.,  23996.,  34358.,  37070.,  23804.,  25644.,
      36734.,  39542.,  25388.,  27292.,  27548.,  29516.,  29836.,  31868.,
      31740.,  33836.,  49118.,  52310.,  33964.,  36124.,  52454.,  55742.,
      36188.,  38412.,  38348.,  40636.,  8486.,   9374.,   9822.,   10742.,
      15007.,  16411.,  10294.,  11246.,  15715.,  17167.,  10766.,  11750.,
      12230.,  13246.,  17324.,  19228.,  20252.,  22220.,  30926.,  33926.,
      21196.,  23228.,  32342.,  35438.,  22140.,  24236.,  25324.,  27484.,
      31964.,  34188.,  34892.,  37180.,  53366.,  56846.,  36476.,  38828.,
      55742.,  59318.,  38060.,  40476.,  41244.,  43724.,  49114.,  52642.,
      53890.,  57514.,  82377.,  87885.,  56266.,  59986.,  85941.,  91593.,
      58642.,  62458.,  63802.,  67714.,  37788.,  40268.,  41228.,  43772.,
      62870.,  66734.,  42812.,  45420.,  65246.,  69206.,  44396.,  47068.,
      48092.,  50828.,  57850.,  61762.,  63394.,  67402.,  96633.,  102717.,
      65770.,  69874.,  100197., 106425., 68146.,  72346.,  74074.,  78370.,
      43612.,  46348.,  47564.,  50364.,  72374.,  76622.,  49148.,  52012.,
      74750.,  79094.,  50732.,  53660.,  54940.,  57932.,  66586.,  70882.,
      72898.,  77290.,  110889., 117549., 75274.,  79762.,  114453., 121257.,
      77650.,  82234.,  84346.,  89026.,  49436.,  52428.,  53900.,  56956.,
      81878.,  86510.,  55484.,  58604.,  84254.,  88982.,  57068.,  60252.,
      61788.,  65036.,  71756.,  75068.,  76220.,  79596.,  115838., 120950.,
      78444.,  81884.,  119174., 124382., 80668.,  84172.,  85388.,  88956.,
      16646.,  18174.,  19262.,  20822.,  29167.,  31531.,  19734.,  21326.,
      29875.,  32287.,  20206.,  21830.,  22950.,  24606.,  33644.,  36828.,
      39132.,  42380.,  59246.,  64166.,  40076.,  43388.,  60662.,  65678.,
      41020.,  44396.,  46764.,  50204.,  61084.,  64588.,  66572.,  70140.,
      100886., 106286., 68156.,  71788.,  103262., 108758., 69740.,  73436.,
      75484.,  79244.,  92794.,  98242.,  101410., 106954., 153657., 162045.,
      103786., 109426., 157221., 165753., 106162., 111898., 115162., 120994.,
      66908.,  70668.,  72908.,  76732.,  110390., 116174., 74492.,  78380.,
      112766., 118646., 76076.,  80028.,  82332.,  86348.,  101530., 107362.,
      110914., 116842., 167913., 176877., 113290., 119314., 171477., 180585.,
      115666., 121786., 125434., 131650., 72732.,  76748.,  79244.,  83324.,
      119894., 126062., 80828.,  84972.,  122270., 128534., 82412.,  86620.,
      89180.,  93452.,  110266., 116482., 120418., 126730., 182169., 191709.,
      122794., 129202., 185733., 195417., 125170., 131674., 135706., 142306.,
      78556.,  82828.,  85580.,  89916.,  129398., 135950., 87164.,  91564.,
      131774., 138422., 88748.,  93212.,  96028.,  100556., 113676., 118268.,
      120700., 125356., 182558., 189590., 122924., 127644., 185894., 193022.,
      125148., 129932., 132428., 137276.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   65.,    165.,   77.,    193.,
      326.,   574.,   382.,   662.,   438.,   750.,   369.,   533.,   413.,
      593.,   154.,   386.,   242.,   506.,   828.,   1388.,  1068.,  1692.,
      1308.,  1996.,  954.,   1314.,  1106.,  1498.,  594.,   986.,   682.,
      1106.,  2028.,  2908.,  2268.,  3212.,  2508.,  3516.,  1714.,  2234.,
      1866.,  2418.,  1087.,  1723.,  1315.,  1999.,  3626.,  5042.,  4178.,
      5690.,  4730.,  6338.,  3055.,  3883.,  3379.,  4255.,  1922.,  2378.,
      2138.,  2626.,  4940.,  5948.,  5436.,  6508.,  5932.,  7068.,  3426.,
      4010.,  3706.,  4322.,  3002.,  3618.,  3218.,  3866.,  7420.,  8748.,
      7916.,  9308.,  8412.,  9868.,  4826.,  5570.,  5106.,  5882.,  2153.,
      2477.,  2293.,  2633.,  5078.,  5774.,  5390.,  6118.,  5702.,  6462.,
      3161.,  3549.,  3333.,  3737.,  2853.,  3257.,  2993.,  3413.,  6638.,
      7494.,  6950.,  7838.,  7262.,  8182.,  4021.,  4489.,  4193.,  4677.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     77.,    193.,   281.,   413.,
      574.,   854.,   1014.,  1326.,  1454.,  1798.,  797.,   977.,   1033.,
      1229.,  1097.,  1293.,  1301.,  1513.,  2774.,  3214.,  3214.,  3686.,
      3654.,  4158.,  1977.,  2237.,  2213.,  2489.,  2218.,  2642.,  2690.,
      3146.,  5724.,  6668.,  6732.,  7740.,  7740.,  8812.,  4170.,  4722.,
      4706.,  5290.,  4578.,  5162.,  5050.,  5666.,  10764., 12028., 11772.,
      13100., 12780., 14172., 6850.,  7562.,  7386.,  8130.,  7063.,  7987.,
      7867.,  8839.,  16730., 18722., 18434., 20522., 20138., 22322., 10759.,
      11875., 11659., 12823., 5906.,  6554.,  6506.,  7186.,  13676., 15068.,
      14940., 16396., 16204., 17724., 8562.,  9338.,  9226.,  10034., 8906.,
      9714.,  9506.,  10346., 19996., 21708., 21260., 23036., 22524., 24364.,
      11882., 12818., 12546., 13514., 5105.,  5525.,  5437.,  5873.,  11366.,
      12254., 12062., 12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,
      6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622., 16238.,
      17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     149.,   361.,   545.,   773.,   1102.,  1574.,  1926.,  2430.,
      2750.,  3286.,  1445.,  1721.,  1873.,  2165.,  2129.,  2421.,  2525.,
      2833.,  5222.,  5854.,  6046.,  6710.,  6870.,  7566.,  3585.,  3941.,
      4013.,  4385.,  4282.,  4898.,  5138.,  5786.,  10620., 11948., 12396.,
      13788., 14172., 15628., 7386.,  8130.,  8306.,  9082.,  8562.,  9338.,
      9418.,  10226., 19500., 21148., 21276., 22988., 23052., 24828., 11986.,
      12890., 12906., 13842., 13039., 14251., 14419., 15679., 29834., 32402.,
      32690., 35354., 35546., 38306., 18463., 19867., 19939., 21391., 9890.,
      10730., 10874., 11746., 22412., 24188., 24444., 26284., 26476., 28380.,
      13698., 14666., 14746., 15746., 14810., 15810., 15794., 16826., 32572.,
      34668., 34604., 36764., 36636., 38860., 18938., 20066., 19986., 21146.,
      8057.,  8573.,  8581.,  9113.,  17654., 18734., 18734., 19846., 19814.,
      20958., 10217., 10797., 10773., 11369., 10677., 11273., 11201., 11813.,
      23054., 24294., 24134., 25406., 25214., 26518., 12997., 13657., 13553.,
      14229., 0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      2380.,    4332.,    2796.,    5004.,    6362.,    9866.,    6540.,
      9004.,    11978.,   15866.,   10284.,   13004.,   11724.,   14700.,
      7448.,    12376.,   10328.,   15768.,   19828.,   28372.,   17816.,
      23768.,   31060.,   40372.,   25304.,   31768.,   30232.,   37208.,
      21848.,   29336.,   24728.,   32728.,   45268.,   57652.,   37336.,
      45848.,   64180.,   77332.,   49944.,   58968.,   54872.,   64408.,
      41924.,   54692.,   49316.,   62852.,   86238.,   107118.,  68228.,
      82532.,   114606.,  136638.,  87140.,   102212.,  97604.,   113444.,
      68184.,   77720.,   75160.,   85208.,   120916.,  136372.,  87768.,
      98328.,   139828.,  156052.,  100376.,  111448.,  109400.,  120984.,
      111428.,  127268.,  124964.,  141572.,  199710.,  225198.,  143876.,
      161252.,  228078.,  254718.,  162788.,  180932.,  179396.,  198308.,
      114520.,  126104.,  125592.,  137688.,  196564.,  215092.,  138200.,
      150808.,  215476.,  234772.,  150808.,  163928.,  163928.,  177560.,
      180932.,  199844.,  200612.,  220292.,  313182.,  343278.,  219524.,
      239972.,  341550.,  372798.,  238436.,  259652.,  261188.,  283172.,
      160856.,  174488.,  176024.,  190168.,  272212.,  293812.,  188632.,
      203288.,  291124.,  313492.,  201240.,  216408.,  218456.,  234136.,
      236696.,  252888.,  251864.,  268568.,  389812.,  415252.,  269592.,
      286808.,  416404.,  442612.,  287320.,  305048.,  304536.,  322776.,
      67020.,   74092.,   77676.,   85004.,   118682.,  129866.,  81420.,
      89004.,   124298.,  135866.,  85164.,   93004.,   96844.,   104940.,
      136728.,  151896.,  160088.,  175768.,  244468.,  268372.,  167576.,
      183768.,  255700.,  280372.,  175064.,  191768.,  200472.,  217688.,
      253528.,  271256.,  276888.,  295128.,  423508.,  451252.,  289496.,
      308248.,  442420.,  470932.,  302104.,  321368.,  327512.,  347288.,
      389444.,  417572.,  427556.,  456452.,  653598.,  697518.,  446468.,
      476132.,  681966.,  727038.,  465380.,  495812.,  506564.,  537764.,
      299864.,  319640.,  327320.,  347608.,  499156.,  529972.,  339928.,
      360728.,  518068.,  549652.,  352536.,  373848.,  382040.,  403864.,
      458948.,  490148.,  503204.,  535172.,  767070.,  815598.,  522116.,
      554852.,  795438.,  845118.,  541028.,  574532.,  588356.,  622628.,
      346200.,  368024.,  377752.,  400088.,  574804.,  608692.,  390360.,
      413208.,  593716.,  628372.,  402968.,  426328.,  436568.,  460440.,
      528452.,  562724.,  578852.,  613892.,  880542.,  933678.,  597764.,
      633572.,  908910.,  963198.,  616676.,  653252.,  670148.,  707492.,
      392536.,  416408.,  428184.,  452568.,  650452.,  687412.,  440792.,
      465688.,  669364.,  707092.,  453400.,  478808.,  491096.,  517016.,
      570776.,  597208.,  606424.,  633368.,  921652.,  962452.,  624152.,
      651608.,  948244.,  989812.,  641880.,  669848.,  679576.,  708056.,
      131660.,  143852.,  152556.,  165004.,  231002.,  249866.,  156300.,
      169004.,  236618.,  255866.,  160044.,  173004.,  181964.,  195180.,
      266008.,  291416.,  309848.,  335768.,  469108.,  508372.,  317336.,
      343768.,  480340.,  520372.,  324824.,  351768.,  370712.,  398168.,
      485208.,  513176.,  529048.,  557528.,  801748.,  844852.,  541656.,
      570648.,  820660.,  864532.,  554264.,  583768.,  600152.,  630168.,
      736964.,  780452.,  805796.,  850052.,  1220958., 1287918., 824708.,
      869732.,  1249326., 1317438., 843620.,  889412.,  915524.,  962084.,
      531544.,  561560.,  579480.,  610008.,  877396.,  923572.,  592088.,
      623128.,  896308.,  943252.,  604696.,  636248.,  654680.,  686744.,
      806468.,  853028.,  881444.,  928772.,  1334430., 1405998., 900356.,
      948452.,  1362798., 1435518., 919268.,  968132.,  997316.,  1046948.,
      577880.,  609944.,  629912.,  662488.,  953044.,  1002292., 642520.,
      675608.,  971956.,  1021972., 655128.,  688728.,  709208.,  743320.,
      875972.,  925604.,  957092.,  1007492., 1447902., 1524078., 976004.,
      1027172., 1476270., 1553598., 994916.,  1046852., 1079108., 1131812.,
      624216.,  658328.,  680344.,  714968.,  1028692., 1081012., 692952.,
      728088.,  1047604., 1100692., 705560.,  741208.,  763736.,  799896.,
      904856.,  941528.,  960984.,  998168.,  1453492., 1509652., 978712.,
      1016408., 1480084., 1537012., 996440.,  1034648., 1054616., 1093336.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,   1774.,   1454.,   2238.,   430.,    1214.,
      510.,    1422.,   2380.,   4332.,   2796.,   5004.,   3212.,   5676.,
      2798.,   4094.,   3134.,   4558.,   1020.,   2844.,   1692.,   3772.,
      6104.,   10520.,  7960.,   12888.,  9816.,   15256.,  7292.,   10140.,
      8476.,   11580.,  4380.,   7484.,   5052.,   8412.,   15384.,  22360.,
      17240.,  24728.,  19096.,  27096.,  13212.,  17340.,  14396.,  18780.,
      8090.,   13130.,  9866.,   15290.,  27652.,  38884.,  31972.,  43972.,
      36292.,  49060.,  23642.,  30218.,  26186.,  33146.,  14940.,  18556.,
      16636.,  20508.,  38552.,  46552.,  42456.,  50968.,  46360.,  55384.,
      26844.,  31484.,  29052.,  33948.,  23420.,  28316.,  25116.,  30268.,
      58072.,  68632.,  61976.,  73048.,  65880.,  77464.,  37884.,  43804.,
      40092.,  46268.,  16910.,  19486.,  18014.,  20718.,  39948.,  45484.,
      42412.,  48204.,  44876.,  50924.,  24910.,  27998.,  26270.,  29486.,
      22430.,  25646.,  23534.,  26878.,  52268.,  59084.,  54732.,  61804.,
      57196.,  64524.,  31710.,  35438.,  33070.,  36926.,  0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      510.,    1422.,   2126.,   3166.,
      4332.,   6540.,   7820.,   10284.,  11308.,  14028.,  6206.,   7630.,
      8078.,   9630.,   8590.,   10142.,  10206.,  11886.,  21772.,  25260.,
      25260.,  29004.,  28748.,  32748.,  15566.,  17630.,  17438.,  19630.,
      17340.,  20700.,  21084.,  24700.,  44888.,  52376.,  52888.,  60888.,
      60888.,  69400.,  32828.,  37212.,  37084.,  41724.,  36060.,  40700.,
      39804.,  44700.,  84888.,  94936.,  92888.,  103448., 100888., 111960.,
      54108.,  59772.,  58364.,  64284.,  55610.,  62954.,  61994.,  69722.,
      131908., 147748., 145444., 162052., 158980., 176356., 84986.,  93866.,
      92138.,  101402., 46620.,  51772.,  51388.,  56796.,  108056., 119128.,
      118104., 129688., 128152., 140248., 67740.,  73916.,  73020.,  79452.,
      70460.,  76892.,  75228.,  81916.,  158296., 171928., 168344., 182488.,
      178392., 193048., 94140.,  101596., 99420.,  107132., 40430.,  43774.,
      43070.,  46542.,  90060.,  97132.,  95596.,  102924., 101132., 108716.,
      53038.,  56894.,  55934.,  59918.,  53630.,  57614.,  56270.,  60382.,
      117740., 126092., 123276., 131884., 128812., 137676., 67518.,  72014.,
      70414.,  75038.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      990.,    2670.,   4142.,   5950.,   8364.,   12108.,  14924.,  18924.,
      21484.,  25740.,  11294.,  13486.,  14702.,  17022.,  16750.,  19070.,
      19902.,  22350.,  41164.,  46188.,  47724.,  53004.,  54284.,  59820.,
      28334.,  31166.,  31742.,  34702.,  33660.,  38556.,  40476.,  45628.,
      83672.,  94232.,  97816.,  108888., 111960., 123544., 58364.,  64284.,
      65692.,  71868.,  67740.,  73916.,  74556.,  80988.,  154392., 167512.,
      168536., 182168., 182680., 196824., 95004.,  102204., 102332., 109788.,
      103130., 112778., 114122., 124154., 236164., 256612., 258916., 280132.,
      281668., 303652., 146330., 157514., 158090., 169658., 78300.,  84988.,
      86140.,  93084.,  177560., 191704., 193752., 208408., 209944., 225112.,
      108636., 116348., 116988., 124956., 117500., 125468., 125340., 133564.,
      258520., 275224., 274712., 291928., 290904., 308632., 150396., 159388.,
      158748., 167996., 63950.,  68062.,  68126.,  72366.,  140172., 148780.,
      148780., 157644., 157388., 166508., 81166.,  85790.,  85598.,  90350.,
      84830.,  89582.,  89006.,  93886.,  183212., 193100., 191820., 201964.,
      200428., 210828., 103326., 108590., 107758., 113150., 0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   371.,
      476.,   587.,   704.,   390.,   464.,   542.,   624.,   719.,   836.,
      959.,   1088.,  622.,   704.,   790.,   880.,   710.,   800.,   894.,
      992.,   428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,
      1174.,  1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,
      2152.,  2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,
      2268.,  2496.,  1308.,  1536.,  1772.,  2016.,  1484.,  1728.,  1980.,
      2240.,  2734.,  3112.,  3502.,  3904.,  2268.,  2528.,  2796.,  3072.,
      3910.,  4312.,  4726.,  5152.,  3052.,  3328.,  3612.,  3904.,  3356.,
      3648.,  3948.,  4256.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,
      3818.,  4256.,  5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,
      5504.,  6993.,  7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,
      5978.,  6464.,  6962.,  7472.,  4188.,  4480.,  4780.,  5088.,  4620.,
      4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,  5404.,  5728.,
      6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,  6528.,  6876.,
      7232.,  6748.,  7104.,  7468.,  7840.,  6842.,  7328.,  7826.,  8336.,
      7682.,  8192.,  8714.,  9248.,  12285., 13068., 13869., 14688., 8858.,
      9392.,  9938.,  10496., 14049., 14868., 15705., 16560., 10034., 10592.,
      11162., 11744., 11066., 11648., 12242., 12848., 7068.,  7424.,  7788.,
      8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294., 13888.,
      8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136., 9324.,
      9728.,  10140., 10560., 10140., 10560., 10988., 11424., 11162., 11744.,
      12338., 12944., 12386., 12992., 13610., 14240., 19341., 20268., 21213.,
      22176., 13562., 14192., 14834., 15488., 21105., 22068., 23049., 24048.,
      14738., 15392., 16058., 16736., 16154., 16832., 17522., 18224., 9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      14668., 15168., 15676., 16192., 15612., 16128., 16652., 17184., 24166.,
      24952., 25750., 26560., 16716., 17248., 17788., 18336., 25822., 26632.,
      27454., 28288., 17820., 18368., 18924., 19488., 18892., 19456., 20028.,
      20608., 4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,
      7331.,  7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,
      8036.,  8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  5990.,  6240.,
      6494.,  6752.,  8428.,  8896.,  9372.,  9856.,  9884.,  10368., 10860.,
      11360., 15094., 15832., 16582., 17344., 10348., 10848., 11356., 11872.,
      15790., 16552., 17326., 18112., 10812., 11328., 11852., 12384., 12396.,
      12928., 13468., 14016., 15708., 16256., 16812., 17376., 17164., 17728.,
      18300., 18880., 26254., 27112., 27982., 28864., 17948., 18528., 19116.,
      19712., 27430., 28312., 29206., 30112., 18732., 19328., 19932., 20544.,
      20316., 20928., 21548., 22176., 24122., 24992., 25874., 26768., 26498.,
      27392., 28298., 29216., 40509., 41868., 43245., 44640., 27674., 28592.,
      29522., 30464., 42273., 43668., 45081., 46512., 28850., 29792., 30746.,
      31712., 31418., 32384., 33362., 34352., 18588., 19200., 19820., 20448.,
      20300., 20928., 21564., 22208., 30958., 31912., 32878., 33856., 21084.,
      21728., 22380., 23040., 32134., 33112., 34102., 35104., 21868., 22528.,
      23196., 23872., 23708., 24384., 25068., 25760., 28442., 29408., 30386.,
      31376., 31202., 32192., 33194., 34208., 47565., 49068., 50589., 52128.,
      32378., 33392., 34418., 35456., 49329., 50868., 52425., 54000., 33554.,
      34592., 35642., 36704., 36506., 37568., 38642., 39728., 21468., 22144.,
      22828., 23520., 23436., 24128., 24828., 25536., 35662., 36712., 37774.,
      38848., 24220., 24928., 25644., 26368., 36838., 37912., 38998., 40096.,
      25004., 25728., 26460., 27200., 27100., 27840., 28588., 29344., 32762.,
      33824., 34898., 35984., 35906., 36992., 38090., 39200., 54621., 56268.,
      57933., 59616., 37082., 38192., 39314., 40448., 56385., 58068., 59769.,
      61488., 38258., 39392., 40538., 41696., 41594., 42752., 43922., 45104.,
      24348., 25088., 25836., 26592., 26572., 27328., 28092., 28864., 40366.,
      41512., 42670., 43840., 27356., 28128., 28908., 29696., 41542., 42712.,
      43894., 45088., 28140., 28928., 29724., 30528., 30492., 31296., 32108.,
      32928., 35468., 36288., 37116., 37952., 37692., 38528., 39372., 40224.,
      57286., 58552., 59830., 61120., 38796., 39648., 40508., 41376., 58942.,
      60232., 61534., 62848., 39900., 40768., 41644., 42528., 42252., 43136.,
      44028., 44928., 8134.,  8512.,  8894.,  9280.,  9438.,  9824.,  10214.,
      10608., 14291., 14876., 15467., 16064., 9670.,  10064., 10462., 10864.,
      14639., 15236., 15839., 16448., 9902.,  10304., 10710., 11120., 11270.,
      11680., 12094., 12512., 16428., 17216., 18012., 18816., 19164., 19968.,
      20780., 21600., 29014., 30232., 31462., 32704., 19628., 20448., 21276.,
      22112., 29710., 30952., 32206., 33472., 20092., 20928., 21772., 22624.,
      22956., 23808., 24668., 25536., 30108., 30976., 31852., 32736., 32844.,
      33728., 34620., 35520., 49774., 51112., 52462., 53824., 33628., 34528.,
      35436., 36352., 50950., 52312., 53686., 55072., 34412., 35328., 36252.,
      37184., 37276., 38208., 39148., 40096., 45722., 47072., 48434., 49808.,
      50018., 51392., 52778., 54176., 75789., 77868., 79965., 82080., 51194.,
      52592., 54002., 55424., 77553., 79668., 81801., 83952., 52370., 53792.,
      55226., 56672., 56858., 58304., 59762., 61232., 32988., 33920., 34860.,
      35808., 35980., 36928., 37884., 38848., 54478., 55912., 57358., 58816.,
      36764., 37728., 38700., 39680., 55654., 57112., 58582., 60064., 37548.,
      38528., 39516., 40512., 40668., 41664., 42668., 43680., 50042., 51488.,
      52946., 54416., 54722., 56192., 57674., 59168., 82845., 85068., 87309.,
      89568., 55898., 57392., 58898., 60416., 84609., 86868., 89145., 91440.,
      57074., 58592., 60122., 61664., 61946., 63488., 65042., 66608., 35868.,
      36864., 37868., 38880., 39116., 40128., 41148., 42176., 59182., 60712.,
      62254., 63808., 39900., 40928., 41964., 43008., 60358., 61912., 63478.,
      65056., 40684., 41728., 42780., 43840., 44060., 45120., 46188., 47264.,
      54362., 55904., 57458., 59024., 59426., 60992., 62570., 64160., 89901.,
      92268., 94653., 97056., 60602., 62192., 63794., 65408., 91665., 94068.,
      96489., 98928., 61778., 63392., 65018., 66656., 67034., 68672., 70322.,
      71984., 38748., 39808., 40876., 41952., 42252., 43328., 44412., 45504.,
      63886., 65512., 67150., 68800., 43036., 44128., 45228., 46336., 65062.,
      66712., 68374., 70048., 43820., 44928., 46044., 47168., 47452., 48576.,
      49708., 50848., 56268., 57408., 58556., 59712., 59772., 60928., 62092.,
      63264., 90406., 92152., 93910., 95680., 60876., 62048., 63228., 64416.,
      92062., 93832., 95614., 97408., 61980., 63168., 64364., 65568., 65612.,
      66816., 68028., 69248.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   21.,    44.,    69.,    96.,    25.,    52.,    81.,    112.,
      134.,   192.,   254.,   320.,   158.,   224.,   294.,   368.,   182.,
      256.,   334.,   416.,   165.,   204.,   245.,   288.,   185.,   228.,
      273.,   320.,   50.,    104.,   162.,   224.,   90.,    152.,   218.,
      288.,   348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,
      572.,   736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,
      600.,   698.,   800.,   250.,   344.,   442.,   544.,   290.,   392.,
      498.,   608.,   908.,   1120.,  1340.,  1568.,  1020.,  1248.,  1484.,
      1728.,  1132.,  1376.,  1628.,  1888.,  794.,   920.,   1050.,  1184.,
      866.,   1000.,  1138.,  1280.,  467.,   620.,   779.,   944.,   575.,
      740.,   911.,   1088.,  1642.,  1984.,  2338.,  2704.,  1906.,  2272.,
      2650.,  3040.,  2170.,  2560.,  2962.,  3376.,  1427.,  1628.,  1835.,
      2048.,  1583.,  1796.,  2015.,  2240.,  906.,   1016.,  1130.,  1248.,
      1010.,  1128.,  1250.,  1376.,  2348.,  2592.,  2844.,  3104.,  2588.,
      2848.,  3116.,  3392.,  2828.,  3104.,  3388.,  3680.,  1642.,  1784.,
      1930.,  2080.,  1778.,  1928.,  2082.,  2240.,  1426.,  1576.,  1730.,
      1888.,  1530.,  1688.,  1850.,  2016.,  3548.,  3872.,  4204.,  4544.,
      3788.,  4128.,  4476.,  4832.,  4028.,  4384.,  4748.,  5120.,  2322.,
      2504.,  2690.,  2880.,  2458.,  2648.,  2842.,  3040.,  1037.,  1116.,
      1197.,  1280.,  1105.,  1188.,  1273.,  1360.,  2454.,  2624.,  2798.,
      2976.,  2606.,  2784.,  2966.,  3152.,  2758.,  2944.,  3134.,  3328.,
      1533.,  1628.,  1725.,  1824.,  1617.,  1716.,  1817.,  1920.,  1377.,
      1476.,  1577.,  1680.,  1445.,  1548.,  1653.,  1760.,  3214.,  3424.,
      3638.,  3856.,  3366.,  3584.,  3806.,  4032.,  3518.,  3744.,  3974.,
      4208.,  1953.,  2068.,  2185.,  2304.,  2037.,  2156.,  2277.,  2400.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     25.,    52.,    81.,    112.,   125.,   156.,   189.,   224.,
      254.,   320.,   390.,   464.,   470.,   544.,   622.,   704.,   686.,
      768.,   854.,   944.,   377.,   420.,   465.,   512.,   493.,   540.,
      589.,   640.,   525.,   572.,   621.,   672.,   625.,   676.,   729.,
      784.,   1334.,  1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,
      1766.,  1888.,  2014.,  2144.,  957.,   1020.,  1085.,  1152.,  1073.,
      1140.,  1209.,  1280.,  1058.,  1160.,  1266.,  1376.,  1290.,  1400.,
      1514.,  1632.,  2748.,  2976.,  3212.,  3456.,  3244.,  3488.,  3740.,
      4000.,  3740.,  4000.,  4268.,  4544.,  2018.,  2152.,  2290.,  2432.,
      2282.,  2424.,  2570.,  2720.,  2218.,  2360.,  2506.,  2656.,  2450.,
      2600.,  2754.,  2912.,  5228.,  5536.,  5852.,  6176.,  5724.,  6048.,
      6380.,  6720.,  6220.,  6560.,  6908.,  7264.,  3338.,  3512.,  3690.,
      3872.,  3602.,  3784.,  3970.,  4160.,  3419.,  3644.,  3875.,  4112.,
      3815.,  4052.,  4295.,  4544.,  8122.,  8608.,  9106.,  9616.,  8962.,
      9472.,  9994.,  10528., 9802.,  10336., 10882., 11440., 5243.,  5516.,
      5795.,  6080.,  5687.,  5972.,  6263.,  6560.,  2874.,  3032.,  3194.,
      3360.,  3170.,  3336.,  3506.,  3680.,  6668.,  7008.,  7356.,  7712.,
      7292.,  7648.,  8012.,  8384.,  7916.,  8288.,  8668.,  9056.,  4186.,
      4376.,  4570.,  4768.,  4514.,  4712.,  4914.,  5120.,  4354.,  4552.,
      4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,  10208., 10636.,
      11072., 10412., 10848., 11292., 11744., 11036., 11488., 11948., 12416.,
      5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,  6880.,  2501.,
      2604.,  2709.,  2816.,  2665.,  2772.,  2881.,  2992.,  5574.,  5792.,
      6014.,  6240.,  5918.,  6144.,  6374.,  6608.,  6262.,  6496.,  6734.,
      6976.,  3285.,  3404.,  3525.,  3648.,  3465.,  3588.,  3713.,  3840.,
      3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,  7294.,
      7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,  8256.,
      8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,  4653.,
      4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,
      416.,   494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,
      1310.,  1440.,  1574.,  1712.,  689.,   756.,   825.,   896.,   901.,
      972.,   1045.,  1120.,  1029.,  1100.,  1173.,  1248.,  1225.,  1300.,
      1377.,  1456.,  2534.,  2688.,  2846.,  3008.,  2942.,  3104.,  3270.,
      3440.,  3350.,  3520.,  3694.,  3872.,  1749.,  1836.,  1925.,  2016.,
      1961.,  2052.,  2145.,  2240.,  2066.,  2216.,  2370.,  2528.,  2490.,
      2648.,  2810.,  2976.,  5148.,  5472.,  5804.,  6144.,  6028.,  6368.,
      6716.,  7072.,  6908.,  7264.,  7628.,  8000.,  3602.,  3784.,  3970.,
      4160.,  4058.,  4248.,  4442.,  4640.,  4186.,  4376.,  4570.,  4768.,
      4610.,  4808.,  5010.,  5216.,  9548.,  9952.,  10364., 10784., 10428.,
      10848., 11276., 11712., 11308., 11744., 12188., 12640., 5882.,  6104.,
      6330.,  6560.,  6338.,  6568.,  6802.,  7040.,  6371.,  6668.,  6971.,
      7280.,  7055.,  7364.,  7679.,  8000.,  14602., 15232., 15874., 16528.,
      16018., 16672., 17338., 18016., 17434., 18112., 18802., 19504., 9059.,
      9404.,  9755.,  10112., 9791.,  10148., 10511., 10880., 4842.,  5048.,
      5258.,  5472.,  5330.,  5544.,  5762.,  5984.,  10988., 11424., 11868.,
      12320., 11996., 12448., 12908., 13376., 13004., 13472., 13948., 14432.,
      6730.,  6968.,  7210.,  7456.,  7250.,  7496.,  7746.,  8000.,  7282.,
      7528.,  7778.,  8032.,  7770.,  8024.,  8282.,  8544.,  16028., 16544.,
      17068., 17600., 17036., 17568., 18108., 18656., 18044., 18592., 19148.,
      19712., 9330.,  9608.,  9890.,  10176., 9850.,  10136., 10426., 10720.,
      3965.,  4092.,  4221.,  4352.,  4225.,  4356.,  4489.,  4624.,  8694.,
      8960.,  9230.,  9504.,  9230.,  9504.,  9782.,  10064., 9766.,  10048.,
      10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,  5460.,  5609.,
      5760.,  5265.,  5412.,  5561.,  5712.,  5525.,  5676.,  5829.,  5984.,
      11374., 11680., 11990., 12304., 11910., 12224., 12542., 12864., 12446.,
      12768., 13094., 13424., 6417.,  6580.,  6745.,  6912.,  6693.,  6860.,
      7029.,  7200.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      5527.,   6451.,   7423.,   8443.,   4818.,   5466.,   6146.,   6858.,
      5506.,   6218.,   6962.,   7738.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      10020.,  11828.,  13700.,  15636.,  11396.,  13332.,  15332.,  17396.,
      21134.,  24134.,  27230.,  30422.,  17636.,  19700.,  21828.,  24020.,
      30494.,  33686.,  36974.,  40358.,  23876.,  26068.,  28324.,  30644.,
      26276.,  28596.,  30980.,  33428.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      32932.,  35252.,  37636.,  40084.,  36356.,  38804.,  41316.,  43892.,
      58574.,  62342.,  66206.,  70166.,  42596.,  45172.,  47812.,  50516.,
      67934.,  71894.,  75950.,  80102.,  48836.,  51540.,  54308.,  57140.,
      53284.,  56116.,  59012.,  61972.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      55844.,  58676.,  61572.,  64532.,  61316.,  64276.,  67300.,  70388.,
      96014.,  100550., 105182., 109910., 67556.,  70644.,  73796.,  77012.,
      105374., 110102., 114926., 119846., 73796.,  77012.,  80292.,  83636.,
      80292.,  83636.,  87044.,  90516.,  88150.,  92782.,  97510.,  102334.,
      97894.,  102718., 107638., 112654., 152901., 160281., 167805., 175473.,
      107254., 112270., 117382., 122590., 166941., 174609., 182421., 190377.,
      116614., 121822., 127126., 132526., 127894., 133294., 138790., 144382.,
      78756.,  82100.,  85508.,  88980.,  86276.,  89748.,  93284.,  96884.,
      133454., 138758., 144158., 149654., 92516.,  96116.,  99780.,  103508.,
      142814., 148310., 153902., 159590., 98756.,  102484., 106276., 110132.,
      107300., 111156., 115076., 119060., 116356., 120340., 124388., 128500.,
      123876., 127988., 132164., 136404., 191774., 198038., 204398., 210854.,
      132676., 136916., 141220., 145588., 204974., 211430., 217982., 224630.,
      141476., 145844., 150276., 154772., 150020., 154516., 159076., 163700.,
      32642.,  34378.,  36146.,  37946.,  37938.,  39738.,  41570.,  43434.,
      57967.,  60715.,  63511.,  66355.,  39778.,  41642.,  43538.,  45466.,
      60727.,  63571.,  66463.,  69403.,  41618.,  43546.,  45506.,  47498.,
      47426.,  49418.,  51442.,  53498.,  66500.,  70228.,  74020.,  77876.,
      78116.,  81972.,  85892.,  89876.,  119294., 125174., 131150., 137222.,
      81796.,  85780.,  89828.,  93940.,  124814., 130886., 137054., 143318.,
      85476.,  89588.,  93764.,  98004.,  98116.,  102356., 106660., 111028.,
      124580., 128948., 133380., 137876., 136196., 140692., 145252., 149876.,
      208334., 215174., 222110., 229142., 142436., 147060., 151748., 156500.,
      217694., 224726., 231854., 239078., 148676., 153428., 158244., 163124.,
      161316., 166196., 171140., 176148., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      147492., 152372., 157316., 162324., 161156., 166164., 171236., 176372.,
      245774., 253382., 261086., 268886., 167396., 172532., 177732., 182996.,
      255134., 262934., 270830., 278822., 173636., 178900., 184228., 189620.,
      188324., 193716., 199172., 204692., 225622., 233326., 241126., 249022.,
      247654., 255550., 263542., 271630., 377541., 389529., 401661., 413937.,
      257014., 265102., 273286., 281566., 391581., 403857., 416277., 428841.,
      266374., 274654., 283030., 291502., 289942., 298414., 306982., 315646.,
      170404., 175796., 181252., 186772., 186116., 191636., 197220., 202868.,
      283214., 291590., 300062., 308630., 192356., 198004., 203716., 209492.,
      292574., 301142., 309806., 318566., 198596., 204372., 210212., 216116.,
      215332., 221236., 227204., 233236., 259990., 268462., 277030., 285694.,
      285094., 293758., 302518., 311374., 433701., 446841., 460125., 473553.,
      294454., 303310., 312262., 321310., 447741., 461169., 474741., 488457.,
      303814., 312862., 322006., 331246., 330454., 339694., 349030., 358462.,
      193316., 199220., 205188., 211220., 211076., 217108., 223204., 229364.,
      320654., 329798., 339038., 348374., 217316., 223476., 229700., 235988.,
      330014., 339350., 348782., 358310., 223556., 229844., 236196., 242612.,
      242340., 248756., 255236., 261780., 282116., 288660., 295268., 301940.,
      299876., 306548., 313284., 320084., 455774., 465878., 476078., 486374.,
      308676., 315476., 322340., 329268., 468974., 479270., 489662., 500150.,
      317476., 324404., 331396., 338452., 336260., 343316., 350436., 357620.,
      64322.,  67338.,  70386.,  73466.,  74738.,  77818.,  80930.,  84074.,
      113167., 117835., 122551., 127315., 76578.,  79722.,  82898.,  86106.,
      115927., 120691., 125503., 130363., 78418.,  81626.,  84866.,  88138.,
      89346.,  92618.,  95922.,  99258.,  129860., 136148., 142500., 148916.,
      151716., 158132., 164612., 171156., 229694., 239414., 249230., 259142.,
      155396., 161940., 168548., 175220., 235214., 245126., 255134., 265238.,
      159076., 165748., 172484., 179284., 181956., 188756., 195620., 202548.,
      239140., 246068., 253060., 260116., 260996., 268052., 275172., 282356.,
      395534., 406214., 416990., 427862., 267236., 274420., 281668., 288980.,
      404894., 415766., 426734., 437798., 273476., 280788., 288164., 295604.,
      296356., 303796., 311300., 318868., 363094., 373870., 384742., 395710.,
      397414., 408382., 419446., 430606., 602181., 618777., 635517., 652401.,
      406774., 417934., 429190., 440542., 616221., 633105., 650133., 667305.,
      416134., 427486., 438934., 450478., 451990., 463534., 475174., 486910.,
      262052., 269492., 276996., 284564., 285956., 293524., 301156., 308852.,
      432974., 444422., 455966., 467606., 292196., 299892., 307652., 315476.,
      442334., 453974., 465710., 477542., 298436., 306260., 314148., 322100.,
      323364., 331316., 339332., 347412., 397462., 409006., 420646., 432382.,
      434854., 446590., 458422., 470350., 658341., 676089., 693981., 712017.,
      444214., 456142., 468166., 480286., 672381., 690417., 708597., 726921.,
      453574., 465694., 477910., 490222., 492502., 504814., 517222., 529726.,
      284964., 292916., 300932., 309012., 310916., 318996., 327140., 335348.,
      470414., 482630., 494942., 507350., 317156., 325364., 333636., 341972.,
      479774., 492182., 504686., 517286., 323396., 331732., 340132., 348596.,
      350372., 358836., 367364., 375956., 431830., 444142., 456550., 469054.,
      472294., 484798., 497398., 510094., 714501., 733401., 752445., 771633.,
      481654., 494350., 507142., 520030., 728541., 747729., 767061., 786537.,
      491014., 503902., 516886., 529966., 533014., 546094., 559270., 572542.,
      307876., 316340., 324868., 333460., 335876., 344468., 353124., 361844.,
      507854., 520838., 533918., 547094., 342116., 350836., 359620., 368468.,
      517214., 530390., 543662., 557030., 348356., 357204., 366116., 375092.,
      377380., 386356., 395396., 404500., 447876., 456980., 466148., 475380.,
      475876., 485108., 494404., 503764., 719774., 733718., 747758., 761894.,
      484676., 494036., 503460., 512948., 732974., 747110., 761342., 775670.,
      493476., 502964., 512516., 522132., 522500., 532116., 541796., 551540.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      25.,     61.,     113.,    29.,     81.,     149.,    233.,
      82.,     218.,    386.,    586.,    258.,    458.,    690.,    954.,
      434.,    698.,    994.,    1322.,   485.,    633.,    797.,    977.,
      637.,    817.,    1013.,   1225.,   125.,    305.,    501.,    713.,
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   1314.,   1898.,   2514.,   3162.,
      1245.,   1553.,   1877.,   2217.,   1397.,   1737.,   2093.,   2465.,
      298.,    722.,    1178.,   1666.,   602.,    1090.,   1610.,   2162.,
      2532.,   3572.,   4676.,   5844.,   3396.,   4564.,   5796.,   7092.,
      4260.,   5556.,   6916.,   8340.,   3306.,   3986.,   4698.,   5442.,
      3866.,   4610.,   5386.,   6194.,   1818.,   2562.,   3338.,   4146.,
      2122.,   2930.,   3770.,   4642.,   6852.,   8532.,   10276.,  12084.,
      7716.,   9524.,   11396.,  13332.,  8580.,   10516.,  12516.,  14580.,
      6106.,   7106.,   8138.,   9202.,   6666.,   7730.,   8826.,   9954.,
      3439.,   4651.,   5911.,   7219.,   4279.,   5587.,   6943.,   8347.,
      12470.,  15182.,  17990.,  20894.,  14534.,  17438.,  20438.,  23534.,
      16598.,  19694.,  22886.,  26174.,  11023.,  12619.,  14263.,  15955.,
      12247.,  13939.,  15679.,  17467.,  7034.,   7906.,   8810.,   9746.,
      7850.,   8786.,   9754.,   10754.,  18308.,  20244.,  22244.,  24308.,
      20196.,  22260.,  24388.,  26580.,  22084.,  24276.,  26532.,  28852.,
      12858.,  13986.,  15146.,  16338.,  13930.,  15122.,  16346.,  17602.,
      11114.,  12306.,  13530.,  14786.,  11930.,  13186.,  14474.,  15794.,
      27748.,  30324.,  32964.,  35668.,  29636.,  32340.,  35108.,  37940.,
      31524.,  34356.,  37252.,  40212.,  18218.,  19666.,  21146.,  22658.,
      19290.,  20802.,  22346.,  23922.,  8141.,   8769.,   9413.,   10073.,
      8677.,   9337.,   10013.,  10705.,  19298.,  20650.,  22034.,  23450.,
      20498.,  21914.,  23362.,  24842.,  21698.,  23178.,  24690.,  26234.,
      12077.,  12833.,  13605.,  14393.,  12741.,  13529.,  14333.,  15153.,
      10821.,  11609.,  12413.,  13233.,  11357.,  12177.,  13013.,  13865.,
      25298.,  26970.,  28674.,  30410.,  26498.,  28234.,  30002.,  31802.,
      27698.,  29498.,  31330.,  33194.,  15397.,  16313.,  17245.,  18193.,
      16061.,  17009.,  17973.,  18953.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      149.,    361.,    589.,    833.,    941.,    1185.,   1445.,   1721.,
      1906.,   2426.,   2978.,   3562.,   3618.,   4202.,   4818.,   5466.,
      5330.,   5978.,   6658.,   7370.,   2933.,   3273.,   3629.,   4001.,
      3853.,   4225.,   4613.,   5017.,   4109.,   4481.,   4869.,   5273.,
      4901.,   5305.,   5725.,   6161.,   10466.,  11306.,  12178.,  13082.,
      12178.,  13082.,  14018.,  14986.,  13890.,  14858.,  15858.,  16890.,
      7533.,   8033.,   8549.,   9081.,   8453.,   8985.,   9533.,   10097.,
      8266.,   9074.,   9914.,   10786.,  10106.,  10978.,  11882.,  12818.,
      21540.,  23348.,  25220.,  27156.,  25476.,  27412.,  29412.,  31476.,
      29412.,  31476.,  33604.,  35796.,  15882.,  16946.,  18042.,  19170.,
      17978.,  19106.,  20266.,  21458.,  17466.,  18594.,  19754.,  20946.,
      19306.,  20498.,  21722.,  22978.,  41220.,  43668.,  46180.,  48756.,
      45156.,  47732.,  50372.,  53076.,  49092.,  51796.,  54564.,  57396.,
      26362.,  27746.,  29162.,  30610.,  28458.,  29906.,  31386.,  32898.,
      26911.,  28699.,  30535.,  32419.,  30055.,  31939.,  33871.,  35851.,
      64022.,  67886.,  71846.,  75902.,  70694.,  74750.,  78902.,  83150.,
      77366.,  81614.,  85958.,  90398.,  41407.,  43579.,  45799.,  48067.,
      44935.,  47203.,  49519.,  51883.,  22682.,  23938.,  25226.,  26546.,
      25034.,  26354.,  27706.,  29090.,  52676.,  55380.,  58148.,  60980.,
      57636.,  60468.,  63364.,  66324.,  62596.,  65556.,  68580.,  71668.,
      33114.,  34626.,  36170.,  37746.,  35722.,  37298.,  38906.,  40546.,
      34442.,  36018.,  37626.,  39266.,  36794.,  38434.,  40106.,  41810.,
      77476.,  80820.,  84228.,  87700.,  82436.,  85908.,  89444.,  93044.,
      87396.,  90996.,  94660.,  98388.,  46154.,  47986.,  49850.,  51746.,
      48762.,  50658.,  52586.,  54546.,  19805.,  20625.,  21461.,  22313.,
      21109.,  21961.,  22829.,  23713.,  44162.,  45898.,  47666.,  49466.,
      46898.,  48698.,  50530.,  52394.,  49634.,  51498.,  53394.,  55322.,
      26045.,  26993.,  27957.,  28937.,  27477.,  28457.,  29453.,  30465.,
      26325.,  27305.,  28301.,  29313.,  27629.,  28641.,  29669.,  30713.,
      57842.,  59898.,  61986.,  64106.,  60578.,  62698.,  64850.,  67034.,
      63314.,  65498.,  67714.,  69962.,  33205.,  34313.,  35437.,  36577.,
      34637.,  35777.,  36933.,  38105.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      293.,    697.,    1117.,   1553.,   1853.,   2289.,   2741.,   3209.,
      3730.,   4634.,   5570.,   6538.,   6978.,   7946.,   8946.,   9978.,
      10226.,  11258.,  12322.,  13418.,  5381.,   5913.,   6461.,   7025.,
      7069.,   7633.,   8213.,   8809.,   8093.,   8657.,   9237.,   9833.,
      9653.,   10249.,  10861.,  11489.,  19970.,  21194.,  22450.,  23738.,
      23218.,  24506.,  25826.,  27178.,  26466.,  27818.,  29202.,  30618.,
      13821.,  14513.,  15221.,  15945.,  15509.,  16233.,  16973.,  17729.,
      16234.,  17426.,  18650.,  19906.,  19610.,  20866.,  22154.,  23474.,
      40548.,  43124.,  45764.,  48468.,  47556.,  50260.,  53028.,  55860.,
      54564.,  57396.,  60292.,  63252.,  28458.,  29906.,  31386.,  32898.,
      32090.,  33602.,  35146.,  36722.,  33114.,  34626.,  36170.,  37746.,
      36490.,  38066.,  39674.,  41314.,  75588.,  78804.,  82084.,  85428.,
      82596.,  85940.,  89348.,  92820.,  89604.,  93076.,  96612.,  100212.,
      46618.,  48386.,  50186.,  52018.,  50250.,  52082.,  53946.,  55842.,
      50383.,  52747.,  55159.,  57619.,  55831.,  58291.,  60799.,  63355.,
      115574., 120590., 125702., 130910., 126854., 132062., 137366., 142766.,
      138134., 143534., 149030., 154622., 71791.,  74539.,  77335.,  80179.,
      77623.,  80467.,  83359.,  86299.,  38330.,  39970.,  41642.,  43346.,
      42218.,  43922.,  45658.,  47426.,  87044.,  90516.,  94052.,  97652.,
      95076.,  98676.,  102340., 106068., 103108., 106836., 110628., 114484.,
      53370.,  55266.,  57194.,  59154.,  57514.,  59474.,  61466.,  63490.,
      57770.,  59730.,  61722.,  63746.,  61658.,  63682.,  65738.,  67826.,
      127204., 131316., 135492., 139732., 135236., 139476., 143780., 148148.,
      143268., 147636., 152068., 156564., 74090.,  76306.,  78554.,  80834.,
      78234.,  80514.,  82826.,  85170.,  31469.,  32481.,  33509.,  34553.,
      33541.,  34585.,  35645.,  36721.,  69026.,  71146.,  73298.,  75482.,
      73298.,  75482.,  77698.,  79946.,  77570.,  79818.,  82098.,  84410.,
      40013.,  41153.,  42309.,  43481.,  42213.,  43385.,  44573.,  45777.,
      41829.,  43001.,  44189.,  45393.,  43901.,  45105.,  46325.,  47561.,
      90386.,  92826.,  95298.,  97802.,  94658.,  97162.,  99698.,  102266.,
      98930.,  101498., 104098., 106730., 51013.,  52313.,  53629.,  54961.,
      53213.,  54545.,  55893.,  57257.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7260.,    10876.,   14748.,   18876.,   8604.,    12732.,   17116.,
      21756.,   21338.,   27914.,   34874.,   42218.,   23260.,   27900.,
      32796.,   37948.,   43322.,   50666.,   58394.,   66506.,   37916.,
      43068.,   48476.,   54140.,   43356.,   49020.,   54940.,   61116.,
      23992.,   33272.,   43064.,   53368.,   34872.,   45176.,   55992.,
      67320.,   69172.,   85396.,   102388.,  120148.,  64184.,   75512.,
      87352.,   99704.,   113140.,  130900.,  149428.,  168724.,  93496.,
      105848.,  118712.,  132088.,  112568.,  125944.,  139832.,  154232.,
      78392.,   92792.,   107704.,  123128.,  89272.,   104696.,  120632.,
      137080.,  166132.,  190036.,  214708.,  240148.,  139064.,  155512.,
      172472.,  189944.,  240820.,  266260.,  292468.,  319444.,  188856.,
      206328.,  224312.,  242808.,  207928.,  226424.,  245432.,  264952.,
      152276.,  176948.,  202388.,  228596.,  180884.,  207092.,  234068.,
      261812.,  319662.,  360126.,  401742.,  444510.,  255572.,  283316.,
      311828.,  341108.,  431694.,  474462.,  518382.,  563454.,  330260.,
      359540.,  389588.,  420404.,  371156.,  401972.,  433556.,  465908.,
      261176.,  279672.,  298680.,  318200.,  288440.,  307960.,  327992.,
      348536.,  464884.,  494932.,  525748.,  557332.,  338232.,  358776.,
      379832.,  401400.,  539572.,  571156.,  603508.,  636628.,  388024.,
      409592.,  431672.,  454264.,  423480.,  446072.,  469176.,  492792.,
      426452.,  457268.,  488852.,  521204.,  479636.,  511988.,  545108.,
      578996.,  767790.,  817470.,  868302.,  920286.,  554324.,  588212.,
      622868.,  658292.,  879822.,  931806.,  984942.,  1039230., 629012.,
      664436.,  700628.,  737588.,  694484.,  731444.,  769172.,  807668.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      700628.,  737588.,  775316.,  813812.,  778388.,  816884.,  856148.,
      896180.,  1215918., 1274814., 1334862., 1396062., 853076.,  893108.,
      933908.,  975476.,  1327950., 1389150., 1451502., 1515006., 927764.,
      969332.,  1011668., 1054772., 1017812., 1060916., 1104788., 1149428.,
      626744.,  653432.,  680632.,  708344.,  686776.,  714488.,  742712.,
      771448.,  1062388., 1104724., 1147828., 1191700., 736568.,  765304.,
      794552.,  824312.,  1137076., 1180948., 1225588., 1270996., 786360.,
      816120.,  846392.,  877176.,  854584.,  885368.,  916664.,  948472.,
      926904.,  958712.,  991032.,  1023864., 986936.,  1019768., 1053112.,
      1086968., 1527988., 1578004., 1628788., 1680340., 1057208., 1091064.,
      1125432., 1160312., 1633396., 1684948., 1737268., 1790356., 1127480.,
      1162360., 1197752., 1233656., 1195704., 1231608., 1268024., 1304952.,
      259420.,  273276.,  287388.,  301756.,  301724.,  316092.,  330716.,
      345596.,  461018.,  482954.,  505274.,  527978.,  316380.,  331260.,
      346396.,  361788.,  483002.,  505706.,  528794.,  552266.,  331036.,
      346428.,  362076.,  377980.,  377436.,  393340.,  409500.,  425916.,
      528312.,  558072.,  588344.,  619128.,  621112.,  651896.,  683192.,
      715000.,  948532.,  995476.,  1043188., 1091668., 650424.,  682232.,
      714552.,  747384.,  992500.,  1040980., 1090228., 1140244., 679736.,
      712568.,  745912.,  779768.,  780728.,  814584.,  848952.,  883832.,
      992312.,  1027192., 1062584., 1098488., 1085112., 1121016., 1157432.,
      1194360., 1659892., 1714516., 1769908., 1826068., 1134904., 1171832.,
      1209272., 1247224., 1734580., 1790740., 1847668., 1905364., 1184696.,
      1222648., 1261112., 1300088., 1285688., 1324664., 1364152., 1404152.,
      1523156., 1578548., 1634708., 1691636., 1674644., 1731572., 1789268.,
      1847732., 2560302., 2646846., 2734542., 2823390., 1749332., 1807796.,
      1867028., 1927028., 2672334., 2761182., 2851182., 2942334., 1824020.,
      1884020., 1944788., 2006324., 1987796., 2049332., 2111636., 2174708.,
      1175096., 1214072., 1253560., 1293560., 1284280., 1324280., 1364792.,
      1405816., 1958644., 2019412., 2080948., 2143252., 1334072., 1375096.,
      1416632., 1458680., 2033332., 2095636., 2158708., 2222548., 1383864.,
      1425912., 1468472., 1511544., 1501240., 1544312., 1587896., 1631992.,
      1797332., 1858868., 1921172., 1984244., 1973396., 2036468., 2100308.,
      2164916., 3008430., 3104190., 3201102., 3299166., 2048084., 2112692.,
      2178068., 2244212., 3120462., 3218526., 3317742., 3418110., 2122772.,
      2188916., 2255828., 2323508., 2311124., 2378804., 2447252., 2516468.,
      1357880., 1400952., 1444536., 1488632., 1483448., 1527544., 1572152.,
      1617272., 2257396., 2324308., 2391988., 2460436., 1533240., 1578360.,
      1623992., 1670136., 2332084., 2400532., 2469748., 2539732., 1583032.,
      1629176., 1675832., 1723000., 1716792., 1763960., 1811640., 1859832.,
      2071508., 2139188., 2207636., 2276852., 2272148., 2341364., 2411348.,
      2482100., 3456558., 3561534., 3667662., 3774942., 2346836., 2417588.,
      2489108., 2561396., 3568590., 3675870., 3784302., 3893886., 2421524.,
      2493812., 2566868., 2640692., 2634452., 2708276., 2782868., 2858228.,
      1540664., 1587832., 1635512., 1683704., 1682616., 1730808., 1779512.,
      1828728., 2556148., 2629204., 2703028., 2777620., 1732408., 1781624.,
      1831352., 1881592., 2630836., 2705428., 2780788., 2856916., 1782200.,
      1832440., 1883192., 1934456., 1932344., 1983608., 2035384., 2087672.,
      2250424., 2302712., 2355512., 2408824., 2392376., 2445688., 2499512.,
      2553848., 3636148., 3716884., 3798388., 3880660., 2462648., 2516984.,
      2571832., 2627192., 3741556., 3823828., 3906868., 3990676., 2532920.,
      2588280., 2644152., 2700536., 2683064., 2739448., 2796344., 2853752.,
      511580.,  535676.,  560028.,  584636.,  594844.,  619452.,  644316.,
      669436.,  900698.,  937994.,  975674.,  1013738., 609500.,  634620.,
      659996.,  685628.,  922682.,  960746.,  999194.,  1038026., 624156.,
      649788.,  675676.,  701820.,  711516.,  737660.,  764060.,  790716.,
      1032632., 1082872., 1133624., 1184888., 1207352., 1258616., 1310392.,
      1362680., 1827892., 1905556., 1983988., 2063188., 1236664., 1288952.,
      1341752., 1395064., 1871860., 1951060., 2031028., 2111764., 1265976.,
      1319288., 1373112., 1427448., 1448888., 1503224., 1558072., 1613432.,
      1906232., 1961592., 2017464., 2073848., 2080952., 2137336., 2194232.,
      2251640., 3153652., 3238996., 3325108., 3411988., 2130744., 2188152.,
      2246072., 2304504., 3228340., 3315220., 3402868., 3491284., 2180536.,
      2238968., 2297912., 2357368., 2363448., 2422904., 2482872., 2543352.,
      2894036., 2980148., 3067028., 3154676., 3168404., 3256052., 3344468.,
      3433652., 4800942., 4933566., 5067342., 5202270., 3243092., 3332276.,
      3422228., 3512948., 4912974., 5047902., 5183982., 5321214., 3317780.,
      3408500., 3499988., 3592244., 3604436., 3696692., 3789716., 3883508.,
      2089016., 2148472., 2208440., 2268920., 2280120., 2340600., 2401592.,
      2463096., 3452404., 3543892., 3636148., 3729172., 2329912., 2391416.,
      2453432., 2515960., 3527092., 3620116., 3713908., 3808468., 2379704.,
      2442232., 2505272., 2568824., 2579000., 2642552., 2706616., 2771192.,
      3168212., 3260468., 3353492., 3447284., 3467156., 3560948., 3655508.,
      3750836., 5249070., 5390910., 5533902., 5678046., 3541844., 3637172.,
      3733268., 3830132., 5361102., 5505246., 5650542., 5796990., 3616532.,
      3713396., 3811028., 3909428., 3927764., 4026164., 4125332., 4225268.,
      2271800., 2335352., 2399416., 2463992., 2479288., 2543864., 2608952.,
      2674552., 3751156., 3848788., 3947188., 4046356., 2529080., 2594680.,
      2660792., 2727416., 3825844., 3925012., 4024948., 4125652., 2578872.,
      2645496., 2712632., 2780280., 2794552., 2862200., 2930360., 2999032.,
      3442388., 3540788., 3639956., 3739892., 3765908., 3865844., 3966548.,
      4068020., 5697198., 5848254., 6000462., 6153822., 3840596., 3942068.,
      4044308., 4147316., 5809230., 5962590., 6117102., 6272766., 3915284.,
      4018292., 4122068., 4226612., 4251092., 4355636., 4460948., 4567028.,
      2454584., 2522232., 2590392., 2659064., 2678456., 2747128., 2816312.,
      2886008., 4049908., 4153684., 4258228., 4363540., 2728248., 2797944.,
      2868152., 2938872., 4124596., 4229908., 4335988., 4442836., 2778040.,
      2848760., 2919992., 2991736., 3010104., 3081848., 3154104., 3226872.,
      3573944., 3646712., 3719992., 3793784., 3797816., 3871608., 3945912.,
      4020728., 5744308., 5855764., 5967988., 6080980., 3868088., 3942904.,
      4018232., 4094072., 5849716., 5962708., 6076468., 6190996., 3938360.,
      4014200., 4090552., 4167416., 4170424., 4247288., 4324664., 4402552.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x7x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      174.,     446.,     846.,     190.,     590.,     1118.,
      1774.,    540.,     1596.,    2908.,    4476.,    1884.,    3452.,
      5276.,    7356.,    3228.,    5308.,    7644.,    10236.,   3742.,
      4910.,    6206.,    7630.,    4926.,    6350.,    7902.,    9582.,
      830.,     2254.,    3806.,    5486.,    990.,     2670.,    4478.,
      6414.,    7260.,    10876.,   14748.,   18876.,   8604.,    12732.,
      17116.,   21756.,   9948.,    14588.,   19484.,   24636.,   9662.,
      12110.,   14686.,   17390.,   10846.,   13550.,   16382.,   19342.,
      1980.,    5340.,    8956.,    12828.,   4348.,    8220.,    12348.,
      16732.,   19256.,   27512.,   36280.,   45560.,   26040.,   35320.,
      45112.,   55416.,   32824.,   43128.,   53944.,   65272.,   25788.,
      31196.,   36860.,   42780.,   30204.,   36124.,   42300.,   48732.,
      13820.,   19740.,   25916.,   32348.,   16188.,   22620.,   29308.,
      36252.,   53176.,   66552.,   80440.,   94840.,   59960.,   74360.,
      89272.,   104696.,  66744.,   82168.,   98104.,   114552.,  47868.,
      55836.,   64060.,   72540.,   52284.,   60764.,   69500.,   78492.,
      26330.,   35978.,   46010.,   56426.,   32954.,   43370.,   54170.,
      65354.,   97108.,   118708.,  141076.,  164212.,  113428.,  136564.,
      160468.,  185140.,  129748.,  154420.,  179860.,  206068.,  86618.,
      99338.,   112442.,  125930.,  96314.,   109802.,  123674.,  137930.,
      55420.,   62364.,   69564.,   77020.,   61884.,   69340.,   77052.,
      85020.,   144568.,  159992.,  175928.,  192376.,  159544.,  175992.,
      192952.,  210424.,  174520.,  191992.,  209976.,  228472.,  101756.,
      110748.,  119996.,  129500.,  110268.,  119772.,  129532.,  139548.,
      87740.,   97244.,   107004.,  117020.,  94204.,   104220.,  114492.,
      125020.,  219448.,  239992.,  261048.,  282616.,  234424.,  255992.,
      278072.,  300664.,  249400.,  271992.,  295096.,  318712.,  144316.,
      155868.,  167676.,  179740.,  152828.,  164892.,  177212.,  189788.,
      64510.,   69518.,   74654.,   79918.,   68766.,   74030.,   79422.,
      84942.,   153052.,  163836.,  174876.,  186172.,  162588.,  173884.,
      185436.,  197244.,  172124.,  183932.,  195996.,  208316.,  95870.,
      101902.,  108062.,  114350.,  101150.,  107438.,  113854.,  120398.,
      85790.,   92078.,   98494.,   105038.,  90046.,   96590.,   103262.,
      110062.,  200732.,  214076.,  227676.,  241532.,  210268.,  224124.,
      238236.,  252604.,  219804.,  234172.,  248796.,  263676.,  122270.,
      129582.,  137022.,  144590.,  127550.,  135118.,  142814.,  150638.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      990.,     2670.,    4478.,    6414.,    7294.,    9230.,    11294.,
      13486.,   14748.,   18876.,   23260.,   27900.,   28380.,   33020.,
      37916.,   43068.,   42012.,   47164.,   52572.,   58236.,   23134.,
      25838.,   28670.,   31630.,   30462.,   33422.,   36510.,   39726.,
      32510.,   35470.,   38558.,   41774.,   38814.,   42030.,   45374.,
      48846.,   82908.,   89596.,   96540.,   103740.,  96540.,   103740.,
      111196.,  118908.,  110172.,  117884.,  125852.,  134076.,  59774.,
      63758.,   67870.,   72110.,   67102.,   71342.,   75710.,   80206.,
      65340.,   71772.,   78460.,   85404.,   79996.,   86940.,   94140.,
      101596.,  170552.,  184952.,  199864.,  215288.,  201912.,  217336.,
      233272.,  249720.,  233272.,  249720.,  266680.,  284152.,  126012.,
      134492.,  143228.,  152220.,  142716.,  151708.,  160956.,  170460.,
      138620.,  147612.,  156860.,  166364.,  153276.,  162780.,  172540.,
      182556.,  327352.,  346872.,  366904.,  387448.,  358712.,  379256.,
      400312.,  421880.,  390072.,  411640.,  433720.,  456312.,  209532.,
      220572.,  231868.,  243420.,  226236.,  237788.,  249596.,  261660.,
      213530.,  227786.,  242426.,  257450.,  238586.,  253610.,  269018.,
      284810.,  508372.,  539188.,  570772.,  603124.,  561556.,  593908.,
      627028.,  660916.,  614740.,  648628.,  683284.,  718708.,  329114.,
      346442.,  364154.,  382250.,  357242.,  375338.,  393818.,  412682.,
      180220.,  190236.,  200508.,  211036.,  198972.,  209500.,  220284.,
      231324.,  418744.,  440312.,  462392.,  484984.,  458296.,  480888.,
      503992.,  527608.,  497848.,  521464.,  545592.,  570232.,  263420.,
      275484.,  287804.,  300380.,  284220.,  296796.,  309628.,  322716.,
      273980.,  286556.,  299388.,  312476.,  292732.,  305820.,  319164.,
      332764.,  616504.,  643192.,  670392.,  698104.,  656056.,  683768.,
      711992.,  740728.,  695608.,  724344.,  753592.,  783352.,  367420.,
      382044.,  396924.,  412060.,  388220.,  403356.,  418748.,  434396.,
      157630.,  164174.,  170846.,  177646.,  168030.,  174830.,  181758.,
      188814.,  351580.,  365436.,  379548.,  393916.,  373404.,  387772.,
      402396.,  417276.,  395228.,  410108.,  425244.,  440636.,  207422.,
      214990.,  222686.,  230510.,  218846.,  226670.,  234622.,  242702.,
      209630.,  217454.,  225406.,  233486.,  220030.,  228110.,  236318.,
      244654.,  460700.,  477116.,  493788.,  510716.,  482524.,  499452.,
      516636.,  534076.,  504348.,  521788.,  539484.,  557436.,  264542.,
      273390.,  282366.,  291470.,  275966.,  285070.,  294302.,  303662.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      1950.,    5166.,    8510.,    11982.,   14398.,   17870.,   21470.,
      25198.,   28956.,   36156.,   43612.,   51324.,   54876.,   62588.,
      70556.,   78780.,   80796.,   89020.,   97500.,   106236.,  42526.,
      46766.,   51134.,   55630.,   55998.,   60494.,   65118.,   69870.,
      64190.,   68686.,   73310.,   78062.,   76638.,   81390.,   86270.,
      91278.,   158556.,  168316.,  178332.,  188604.,  184476.,  194748.,
      205276.,  216060.,  210396.,  221180.,  232220.,  243516.,  109886.,
      115406.,  121054.,  126830.,  123358.,  129134.,  135038.,  141070.,
      128700.,  138204.,  147964.,  157980.,  155644.,  165660.,  175932.,
      186460.,  321848.,  342392.,  363448.,  385016.,  377784.,  399352.,
      421432.,  444024.,  433720.,  456312.,  479416.,  503032.,  226236.,
      237788.,  249596.,  261660.,  255228.,  267292.,  279612.,  292188.,
      263420.,  275484.,  287804.,  300380.,  290364.,  302940.,  315772.,
      328860.,  601528.,  627192.,  653368.,  680056.,  657464.,  684152.,
      711352.,  739064.,  713400.,  741112.,  769336.,  798072.,  371196.,
      385308.,  399676.,  414300.,  400188.,  414812.,  429692.,  444828.,
      400730.,  419594.,  438842.,  458474.,  444218.,  463850.,  483866.,
      504266.,  919636.,  959668.,  1000468., 1042036., 1009684., 1051252.,
      1093588., 1136692., 1099732., 1142836., 1186708., 1231348., 571610.,
      593546.,  615866.,  638570.,  618170.,  640874.,  663962.,  687434.,
      305020.,  318108.,  331452.,  345052.,  336060.,  349660.,  363516.,
      377628.,  692920.,  720632.,  748856.,  777592.,  757048.,  785784.,
      815032.,  844792.,  821176.,  850936.,  881208.,  911992.,  425084.,
      440220.,  455612.,  471260.,  458172.,  473820.,  489724.,  505884.,
      460220.,  475868.,  491772.,  507932.,  491260.,  507420.,  523836.,
      540508.,  1013560., 1046392., 1079736., 1113592., 1077688., 1111544.,
      1145912., 1180792., 1141816., 1176696., 1212088., 1247992., 590524.,
      608220.,  626172.,  644380.,  623612.,  641820.,  660284.,  679004.,
      250750.,  258830.,  267038.,  275374.,  267294.,  275630.,  284094.,
      292686.,  550108.,  567036.,  584220.,  601660.,  584220.,  601660.,
      619356.,  637308.,  618332.,  636284.,  654492.,  672956.,  318974.,
      328078.,  337310.,  346670.,  336542.,  345902.,  355390.,  365006.,
      333470.,  342830.,  352318.,  361934.,  350014.,  359630.,  369374.,
      379246.,  720668.,  740156.,  759900.,  779900.,  754780.,  774780.,
      795036.,  815548.,  788892.,  809404.,  830172.,  851196.,  406814.,
      417198.,  427710.,  438350.,  424382.,  435022.,  445790.,  456686.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.};
  const std::array<int, 4> in_shape = {{3, 10, 7, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   62.,   22.,   56.,
      70.,   124.,  102.,  172.,  134.,  156.,  52.,   126.,  140.,  244.,
      192.,  322.,  244.,  266.,  100.,  233.,  266.,  450.,  344.,  567.,
      422.,  467.,  148.,  318.,  348.,  556.,  400.,  634.,  452.,  490.,
      244.,  521.,  578.,  918.,  656.,  1035., 734.,  803.,  244.,  510.,
      556.,  868.,  608.,  946.,  660.,  714.,  388.,  809.,  890.,  1386.,
      968.,  1503., 1046., 1139., 340.,  702.,  764.,  1180., 816.,  1258.,
      868.,  938.,  490.,  1012., 1074., 1660., 1146., 1768., 1218., 1288.,
      147.,  300.,  343.,  524.,  359.,  548.,  375.,  422.,  302.,  616.,
      710.,  1084., 742.,  1132., 774.,  876.,  532.,  1086., 1180., 1804.,
      1232., 1882., 1284., 1386., 820.,  1673., 1826., 2790., 1904., 2907.,
      1982., 2147., 628.,  1278., 1388., 2116., 1440., 2194., 1492., 1610.,
      964.,  1961., 2138., 3258., 2216., 3375., 2294., 2483., 724.,  1470.,
      1596., 2428., 1648., 2506., 1700., 1834., 1108., 2249., 2450., 3726.,
      2528., 3843., 2606., 2819., 820.,  1662., 1804., 2740., 1856., 2818.,
      1908., 2058., 1170., 2372., 2514., 3820., 2586., 3928., 2658., 2808.,
      287.,  580.,  663.,  1004., 679.,  1028., 695.,  782.,  582.,  1176.,
      1350., 2044., 1382., 2092., 1414., 1596., 1012., 2046., 2220., 3364.,
      2272., 3442., 2324., 2506., 1540., 3113., 3386., 5130., 3464., 5247.,
      3542., 3827., 1108., 2238., 2428., 3676., 2480., 3754., 2532., 2730.,
      1684., 3401., 3698., 5598., 3776., 5715., 3854., 4163., 1204., 2430.,
      2636., 3988., 2688., 4066., 2740., 2954., 1828., 3689., 4010., 6066.,
      4088., 6183., 4166., 4499., 1300., 2622., 2844., 4300., 2896., 4378.,
      2948., 3178., 1850., 3732., 3954., 5980., 4026., 6088., 4098., 4328.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,    5.,    8.,    11.,  8.,   10.,  0.,    6.,    7.,    20.,
      23.,  26.,   18.,   20.,   0.,   14.,  18.,  48.,   58.,   68.,   44.,
      50.,  0.,    34.,   38.,   98.,  108., 118., 74.,   80.,   0.,    59.,
      68.,  169.,  190.,  211.,  128., 140., 0.,   78.,   86.,   194.,  212.,
      230., 130.,  140.,  0.,    118., 126., 284., 302.,  320.,  180.,  190.,
      0.,   80.,   85.,   186.,  197., 208., 114., 120.,  0.,    105.,  110.,
      241., 252.,  263.,  144.,  150., 0.,   0.,   0.,    0.,    0.,    0.,
      0.,   0.,    0.,    7.,    14.,  29.,  44.,  59.,   32.,   40.,   0.,
      42.,  49.,   104.,  119.,  134., 72.,  80.,  0.,    86.,   102.,  216.,
      250., 284.,  152.,  170.,  0.,   166., 182., 386.,  420.,  454.,  242.,
      260., 0.,    257.,  284.,  601., 658., 715., 380.,  410.,  0.,    210.,
      230., 482.,  524.,  566.,  298., 320., 0.,   310.,  330.,  692.,  734.,
      776., 408.,  430.,  0.,    176., 187., 390., 413.,  436.,  228.,  240.,
      0.,   231.,  242.,  505.,  528., 551., 288., 300.,  0.,    0.,    0.,
      0.,   0.,    0.,    0.,    0.,   0.,   13.,  26.,   53.,   80.,   107.,
      56.,  70.,   0.,    78.,   91.,  188., 215., 242.,  126.,  140.,  0.,
      158., 186.,  384.,  442.,  500., 260., 290., 0.,    298.,  326.,  674.,
      732., 790.,  410.,  440.,  0.,   455., 500., 1033., 1126., 1219., 632.,
      680., 0.,    342.,  374.,  770., 836., 902., 466.,  500.,  0.,    502.,
      534., 1100., 1166., 1232., 636., 670., 0.,   272.,  289.,  594.,  629.,
      664., 342.,  360.,  0.,    357., 374., 769., 804.,  839.,  432.,  450.,
      0.,   0.,    0.,    0.,    0.,   0.,   0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   448.,   138.,
      368.,   472.,   854.,   720.,   1226.,  968.,   1136.,  358.,   888.,
      992.,   1754.,  1400.,  2366.,  1808.,  1976.,  701.,   1660.,  1912.,
      3267.,  2524.,  4185.,  3136.,  3484.,  1110.,  2392.,  2624.,  4202.,
      3032.,  4814.,  3440.,  3736.,  1829.,  3916.,  4360.,  6939.,  4972.,
      7857.,  5584.,  6124.,  1862.,  3896.,  4256.,  6650.,  4664.,  7262.,
      5072.,  5496.,  2957.,  6172.,  6808.,  10611., 7420.,  11529., 8032.,
      8764.,  2614.,  5400.,  5888.,  9098.,  6296.,  9710.,  6704.,  7256.,
      3794.,  7840.,  8328.,  12878., 8896.,  13730., 9464.,  10016., 1121.,
      2288.,  2628.,  4015.,  2752.,  4201.,  2876.,  3248.,  2298.,  4688.,
      5432.,  8294.,  5680.,  8666.,  5928.,  6736.,  4118.,  8408.,  9152.,
      13994., 9560.,  14606., 9968.,  10776., 6341.,  12940., 14152., 21627.,
      14764., 22545., 15376., 16684., 4870.,  9912.,  10784., 16442., 11192.,
      17054., 11600., 12536., 7469.,  15196., 16600., 25299., 17212., 26217.,
      17824., 19324., 5622.,  11416., 12416., 18890., 12824., 19502., 13232.,
      14296., 8597.,  17452., 19048., 28971., 19660., 29889., 20272., 21964.,
      6374.,  12920., 14048., 21338., 14456., 21950., 14864., 16056., 9154.,
      18560., 19688., 29918., 20256., 30770., 20824., 22016., 2201.,  4448.,
      5108.,  7735.,  5232.,  7921.,  5356.,  6048.,  4458.,  9008.,  10392.,
      15734., 10640., 16106., 10888., 12336., 7878.,  15928., 17312., 26234.,
      17720., 26846., 18128., 19576., 11981., 24220., 26392., 39987., 27004.,
      40905., 27616., 29884., 8630.,  17432., 18944., 28682., 19352., 29294.,
      19760., 21336., 13109., 26476., 28840., 43659., 29452., 44577., 30064.,
      32524., 9382.,  18936., 20576., 31130., 20984., 31742., 21392., 23096.,
      14237., 28732., 31288., 47331., 31900., 48249., 32512., 35164., 10134.,
      20440., 22208., 33578., 22616., 34190., 23024., 24856., 14514., 29280.,
      31048., 46958., 31616., 47810., 32184., 34016.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,   48.,   68.,   53.,   67.,   0.,    35.,   41.,
      128.,  148.,  168.,  123.,  137.,  0.,    82.,   110.,  312.,  384.,
      456.,  306.,  350.,  0.,    222.,  250.,  672.,  744.,  816.,  526.,
      570.,  0.,    391.,  457.,  1172., 1328., 1484., 919.,  1009., 0.,
      566.,  626.,  1424., 1560., 1696., 966.,  1042., 0.,    866.,  926.,
      2104., 2240., 2376., 1346., 1422., 0.,    599.,  637.,  1400., 1484.,
      1568., 863.,  909.,  0.,    789.,  827.,  1820., 1904., 1988., 1093.,
      1139., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      41.,   95.,   196.,  312.,  428.,  233.,  295.,  0.,    311.,  365.,
      776.,  892.,  1008., 543.,  605.,  0.,    634.,  758.,  1608., 1872.,
      2136., 1146., 1286., 0.,    1254., 1378., 2928., 3192., 3456., 1846.,
      1986., 0.,    1939., 2149., 4556., 5000., 5444., 2899., 3133., 0.,
      1598., 1754., 3680., 4008., 4336., 2286., 2458., 0.,    2378., 2534.,
      5320., 5648., 5976., 3146., 3318., 0.,    1355., 1441., 3008., 3188.,
      3368., 1763., 1857., 0.,    1785., 1871., 3908., 4088., 4268., 2233.,
      2327., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      77.,   179.,  364.,  576.,  788.,  413.,  523.,  0.,    587.,  689.,
      1424., 1636., 1848., 963.,  1073., 0.,    1186., 1406., 2904., 3360.,
      3816., 1986., 2222., 0.,    2286., 2506., 5184., 5640., 6096., 3166.,
      3402., 0.,    3487., 3841., 7940., 8672., 9404., 4879., 5257., 0.,
      2630., 2882., 5936., 6456., 6976., 3606., 3874., 0.,    3890., 4142.,
      8536., 9056., 9576., 4946., 5214., 0.,    2111., 2245., 4616., 4892.,
      5168., 2663., 2805., 0.,    2781., 2915., 5996., 6272., 6548., 3373.,
      3515., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   3396.,
      956.,    2632.,   3432.,   6292.,   5384.,   9220.,   7336.,   8648.,
      2636.,   6632.,   7432.,   13252.,  10664.,  18100.,  13896.,  15208.,
      5218.,   12476.,  14444.,  24822.,  19292.,  32094.,  24140.,  26876.,
      8588.,   18536.,  20360.,  32644.,  23592.,  37492.,  26824.,  29160.,
      14146.,  30332.,  33836.,  53910.,  38684.,  61182.,  43532.,  47804.,
      14540.,  30440.,  33288.,  52036.,  36520.,  56884.,  39752.,  43112.,
      23074.,  48188.,  53228.,  82998.,  58076.,  90270.,  62924.,  68732.,
      20492.,  42344.,  46216.,  71428.,  49448.,  76276.,  52680.,  57064.,
      29852.,  61704.,  65576.,  101428., 70088.,  108196., 74600.,  78984.,
      8750.,   17860.,  20564.,  31418.,  21540.,  32882.,  22516.,  25476.,
      17916.,  36552.,  42472.,  64852.,  44424.,  67780.,  46376.,  52808.,
      32396.,  66152.,  72072.,  110212., 75304.,  115060., 78536.,  84968.,
      49858.,  101756., 111404., 170262., 116252., 177534., 121100., 131516.,
      38348.,  78056.,  85000.,  129604., 88232.,  134452., 91464.,  98920.,
      58786.,  119612., 130796., 199350., 135644., 206622., 140492., 152444.,
      44300.,  89960.,  97928.,  148996., 101160., 153844., 104392., 112872.,
      67714.,  137468., 150188., 228438., 155036., 235710., 159884., 173372.,
      50252.,  101864., 110856., 168388., 114088., 173236., 117320., 126824.,
      72412.,  146824., 155816., 236788., 160328., 243556., 164840., 174344.,
      17230.,  34820.,  40084.,  60698.,  41060.,  62162.,  42036.,  47556.,
      34876.,  70472.,  81512.,  123412., 83464.,  126340., 85416.,  96968.,
      62156.,  125672., 136712., 207172., 139944., 212020., 143176., 154728.,
      94498.,  191036., 208364., 315702., 213212., 322974., 218060., 236156.,
      68108.,  137576., 149640., 226564., 152872., 231412., 156104., 168680.,
      103426., 208892., 227756., 344790., 232604., 352062., 237452., 257084.,
      74060.,  149480., 162568., 245956., 165800., 250804., 169032., 182632.,
      112354., 226748., 247148., 373878., 251996., 381150., 256844., 278012.,
      80012.,  161384., 175496., 265348., 178728., 270196., 181960., 196584.,
      114972., 231944., 246056., 372148., 250568., 378916., 255080., 269704.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,    70.,    180.,   324.,   468.,   382.,   486.,   0.,     230.,
      270.,   900.,   1044.,  1188.,  902.,   1006.,  0.,     540.,   748.,
      2216.,  2760.,  3304.,  2268.,  2604.,  0.,     1580.,  1788.,  4936.,
      5480.,  6024.,  3948.,  4284.,  0.,     2810.,  3314.,  8668.,  9868.,
      11068., 6938.,  7634.,  0.,     4300.,  4764.,  10888., 11944., 13000.,
      7436.,  8028.,  0.,     6620.,  7084.,  16168., 17224., 18280., 10396.,
      10988., 0.,     4630.,  4926.,  10852., 11508., 12164., 6710.,  7070.,
      0.,     6110.,  6406.,  14132., 14788., 15444., 8510.,  8870.,  0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     270.,
      694.,   1428.,  2340.,  3252.,  1774.,  2262.,  0.,     2390.,  2814.,
      5988.,  6900.,  7812.,  4214.,  4702.,  0.,     4860.,  5836.,  12392.,
      14472., 16552., 8892.,  9996.,  0.,     9740.,  10716., 22792., 24872.,
      26952., 14412., 15516., 0.,     15050., 16706., 35452., 38956., 42460.,
      22634., 24482., 0.,     12460., 13692., 28744., 31336., 33928., 17900.,
      19260., 0.,     18620., 19852., 41704., 44296., 46888., 24700., 26060.,
      0.,     10630., 11310., 23620., 25044., 26468., 13862., 14606., 0.,
      14030., 14710., 30740., 32164., 33588., 17582., 18326., 0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     510.,   1318.,
      2676.,  4356.,  6036.,  3166.,  4038.,  0.,     4550.,  5358.,  11076.,
      12756., 14436., 7526.,  8398.,  0.,     9180.,  10924., 22568., 26184.,
      29800., 15516., 17388., 0.,     17900., 19644., 40648., 44264., 47880.,
      24876., 26748., 0.,     27290., 30098., 62236., 68044., 73852., 38330.,
      41330., 0.,     20620., 22620., 46600., 50728., 54856., 28364., 30492.,
      0.,     30620., 32620., 67240., 71368., 75496., 39004., 41132., 0.,
      16630., 17694., 36388., 38580., 40772., 21014., 22142., 0.,     21950.,
      23014., 47348., 49540., 51732., 26654., 27782., 0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   200.,   248.,   50.,    88.,
      144.,   224.,   192.,   280.,   358.,   496.,   312.,   408.,   538.,
      688.,   432.,   536.,   512.,   624.,   150.,   208.,   384.,   504.,
      432.,   560.,   778.,   976.,   632.,   768.,   1078.,  1288.,  832.,
      976.,   912.,   1064.,  301.,   400.,   728.,   932.,   848.,   1064.,
      1467.,  1800.,  1148.,  1376.,  1917.,  2268.,  1448.,  1688.,  1616.,
      1868.,  518.,   592.,   1120.,  1272.,  1232.,  1392.,  1978.,  2224.,
      1432.,  1600.,  2278.,  2536.,  1632.,  1808.,  1776.,  1960.,  853.,
      976.,   1832.,  2084.,  2048.,  2312.,  3267.,  3672.,  2348.,  2624.,
      3717.,  4140.,  2648.,  2936.,  2912.,  3212.,  886.,   976.,   1856.,
      2040.,  2032.,  2224.,  3178.,  3472.,  2232.,  2432.,  3478.,  3784.,
      2432.,  2640.,  2640.,  2856.,  1405.,  1552.,  2936.,  3236.,  3248.,
      3560.,  5067.,  5544.,  3548.,  3872.,  5517.,  6012.,  3848.,  4184.,
      4208.,  4556.,  1254.,  1360.,  2592.,  2808.,  2832.,  3056.,  4378.,
      4720.,  3032.,  3264.,  4678.,  5032.,  3232.,  3472.,  3504.,  3752.,
      1834.,  1960.,  3792.,  4048.,  4032.,  4296.,  6238.,  6640.,  4312.,
      4584.,  6658.,  7072.,  4592.,  4872.,  4864.,  5152.,  533.,   588.,
      1088.,  1200.,  1256.,  1372.,  1919.,  2096.,  1316.,  1436.,  2009.,
      2192.,  1376.,  1500.,  1560.,  1688.,  1090.,  1208.,  2224.,  2464.,
      2592.,  2840.,  3958.,  4336.,  2712.,  2968.,  4138.,  4528.,  2832.,
      3096.,  3232.,  3504.,  1990.,  2128.,  4064.,  4344.,  4432.,  4720.,
      6778.,  7216.,  4632.,  4928.,  7078.,  7528.,  4832.,  5136.,  5232.,
      5544.,  3061.,  3280.,  6248.,  6692.,  6848.,  7304.,  10467., 11160.,
      7148.,  7616.,  10917., 11628., 7448.,  7928.,  8096.,  8588.,  2358.,
      2512.,  4800.,  5112.,  5232.,  5552.,  7978.,  8464.,  5432.,  5760.,
      8278.,  8776.,  5632.,  5968.,  6096.,  6440.,  3613.,  3856.,  7352.,
      7844.,  8048.,  8552.,  12267., 13032., 8348.,  8864.,  12717., 13500.,
      8648.,  9176.,  9392.,  9932.,  2726.,  2896.,  5536.,  5880.,  6032.,
      6384.,  9178.,  9712.,  6232.,  6592.,  9478.,  10024., 6432.,  6800.,
      6960.,  7336.,  4165.,  4432.,  8456.,  8996.,  9248.,  9800.,  14067.,
      14904., 9548.,  10112., 14517., 15372., 9848.,  10424., 10688., 11276.,
      3094.,  3280.,  6272.,  6648.,  6832.,  7216.,  10378., 10960., 7032.,
      7424.,  10678., 11272., 7232.,  7632.,  7824.,  8232.,  4474.,  4680.,
      9072.,  9488.,  9632.,  10056., 14638., 15280., 9912.,  10344., 15058.,
      15712., 10192., 10632., 10784., 11232., 1053.,  1148.,  2128.,  2320.,
      2456.,  2652.,  3719.,  4016.,  2516.,  2716.,  3809.,  4112.,  2576.,
      2780.,  2920.,  3128.,  2130.,  2328.,  4304.,  4704.,  4992.,  5400.,
      7558.,  8176.,  5112.,  5528.,  7738.,  8368.,  5232.,  5656.,  5952.,
      6384.,  3830.,  4048.,  7744.,  8184.,  8432.,  8880.,  12778., 13456.,
      8632.,  9088.,  13078., 13768., 8832.,  9296.,  9552.,  10024., 5821.,
      6160.,  11768., 12452., 12848., 13544., 19467., 20520., 13148., 13856.,
      19917., 20988., 13448., 14168., 14576., 15308., 4198.,  4432.,  8480.,
      8952.,  9232.,  9712.,  13978., 14704., 9432.,  9920.,  14278., 15016.,
      9632.,  10128., 10416., 10920., 6373.,  6736.,  12872., 13604., 14048.,
      14792., 21267., 22392., 14348., 15104., 21717., 22860., 14648., 15416.,
      15872., 16652., 4566.,  4816.,  9216.,  9720.,  10032., 10544., 15178.,
      15952., 10232., 10752., 15478., 16264., 10432., 10960., 11280., 11816.,
      6925.,  7312.,  13976., 14756., 15248., 16040., 23067., 24264., 15548.,
      16352., 23517., 24732., 15848., 16664., 17168., 17996., 4934.,  5200.,
      9952.,  10488., 10832., 11376., 16378., 17200., 11032., 11584., 16678.,
      17512., 11232., 11792., 12144., 12712., 7114.,  7400.,  14352., 14928.,
      15232., 15816., 23038., 23920., 15512., 16104., 23458., 24352., 15792.,
      16392., 16704., 17312.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   24.,   44.,
      21.,   32.,   27.,   40.,   0.,    0.,    11.,   24.,   13.,   28.,
      48.,   80.,   56.,   92.,   64.,   104.,  51.,   72.,   57.,   80.,
      0.,    0.,    26.,   56.,   38.,   72.,   120.,  192.,  152.,  232.,
      184.,  272.,  130.,  176.,  150.,  200.,  0.,    0.,    86.,   136.,
      98.,   152.,  280.,  392.,  312.,  432.,  344.,  472.,  230.,  296.,
      250.,  320.,  0.,    0.,    155.,  236.,  185.,  272.,  496.,  676.,
      568.,  760.,  640.,  844.,  407.,  512.,  449.,  560.,  0.,    0.,
      254.,  312.,  282.,  344.,  648.,  776.,  712.,  848.,  776.,  920.,
      446.,  520.,  482.,  560.,  0.,    0.,    394.,  472.,  422.,  504.,
      968.,  1136., 1032., 1208., 1096., 1280., 626.,  720.,  662.,  760.,
      0.,    0.,    279.,  320.,  297.,  340.,  656.,  744.,  696.,  788.,
      736.,  832.,  407.,  456.,  429.,  480.,  0.,    0.,    369.,  420.,
      387.,  440.,  856.,  964.,  896.,  1008., 936.,  1052., 517.,  576.,
      539.,  600.,  0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      13.,   28.,   39.,   56.,   80.,   116.,  136.,  176.,  192.,  236.,
      105.,  128.,  135.,  160.,  0.,    0.,    143.,  168.,  169.,  196.,
      360.,  416.,  416.,  476.,  472.,  536.,  255.,  288.,  285.,  320.,
      0.,    0.,    290.,  344.,  350.,  408.,  744.,  864.,  872.,  1000.,
      1000., 1136., 538.,  608.,  606.,  680.,  0.,    0.,    590.,  664.,
      650.,  728.,  1384., 1544., 1512., 1680., 1640., 1816., 878.,  968.,
      946.,  1040., 0.,    0.,    911.,  1028., 1013., 1136., 2152., 2404.,
      2368., 2632., 2584., 2860., 1379., 1520., 1493., 1640., 0.,    0.,
      758.,  840.,  834.,  920.,  1752., 1928., 1912., 2096., 2072., 2264.,
      1094., 1192., 1178., 1280., 0.,    0.,    1138., 1240., 1214., 1320.,
      2552., 2768., 2712., 2936., 2872., 3104., 1514., 1632., 1598., 1720.,
      0.,    0.,    651.,  704.,  693.,  748.,  1448., 1560., 1536., 1652.,
      1624., 1744., 851.,  912.,  897.,  960.,  0.,    0.,    861.,  924.,
      903.,  968.,  1888., 2020., 1976., 2112., 2064., 2204., 1081., 1152.,
      1127., 1200., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      25.,   52.,   75.,   104.,  152.,  212.,  256.,  320.,  360.,  428.,
      189.,  224.,  243.,  280.,  0.,    0.,    275.,  312.,  325.,  364.,
      672.,  752.,  776.,  860.,  880.,  968.,  459.,  504.,  513.,  560.,
      0.,    0.,    554.,  632.,  662.,  744.,  1368., 1536., 1592., 1768.,
      1816., 2000., 946.,  1040., 1062., 1160., 0.,    0.,    1094., 1192.,
      1202., 1304., 2488., 2696., 2712., 2928., 2936., 3160., 1526., 1640.,
      1642., 1760., 0.,    0.,    1667., 1820., 1841., 2000., 3808., 4132.,
      4168., 4504., 4528., 4876., 2351., 2528., 2537., 2720., 0.,    0.,
      1262., 1368., 1386., 1496., 2856., 3080., 3112., 3344., 3368., 3608.,
      1742., 1864., 1874., 2000., 0.,    0.,    1882., 2008., 2006., 2136.,
      4136., 4400., 4392., 4664., 4648., 4928., 2402., 2544., 2534., 2680.,
      0.,    0.,    1023., 1088., 1089., 1156., 2240., 2376., 2376., 2516.,
      2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,    1353., 1428.,
      1419., 1496., 2920., 3076., 3056., 3216., 3192., 3356., 1645., 1728.,
      1715., 1800., 0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,     193.,    326.,    574.,    382.,    662.,    847.,    1291.,
      854.,    1166.,   1555.,   2047.,   1326.,   1670.,   1510.,   1886.,
      330.,    626.,    1004.,   1628.,   1372.,   2060.,   2606.,   3686.,
      2316.,   3068.,   4022.,   5198.,   3260.,   4076.,   3884.,   4764.,
      1090.,   1546.,   2844.,   3788.,   3212.,   4220.,   5846.,   7406.,
      4796.,   5868.,   8222.,   9878.,   6380.,   7516.,   7004.,   8204.,
      2219.,   2999.,   5434.,   7042.,   6370.,   8074.,   11097.,  13725.,
      8746.,   10546.,  14661.,  17433.,  11122.,  13018.,  12442.,  14434.,
      4002.,   4586.,   8668.,   9868.,   9548.,   10812.,  15350.,  17294.,
      11132.,  12460.,  17726.,  19766.,  12716.,  14108.,  13852.,  15308.,
      6587.,   7559.,   14170.,  16162.,  15874.,  17962.,  25353.,  28557.,
      18250.,  20434.,  28917.,  32265.,  20626.,  22906.,  22714.,  25090.,
      6914.,   7626.,   14492.,  15948.,  15884.,  17404.,  24854.,  27182.,
      17468.,  19052.,  27230.,  29654.,  19052.,  20700.,  20700.,  22412.,
      10955.,  12119.,  22906.,  25282.,  25378.,  27850.,  39609.,  43389.,
      27754.,  30322.,  43173.,  47097.,  30130.,  32794.,  32986.,  35746.,
      9826.,   10666.,  20316.,  22028.,  22220.,  23996.,  34358.,  37070.,
      23804.,  25644.,  36734.,  39542.,  25388.,  27292.,  27548.,  29516.,
      14426.,  15426.,  29836.,  31868.,  31740.,  33836.,  49118.,  52310.,
      33964.,  36124.,  52454.,  55742.,  36188.,  38412.,  38348.,  40636.,
      4157.,   4593.,   8486.,   9374.,   9822.,   10742.,  15007.,  16411.,
      10294.,  11246.,  15715.,  17167.,  10766.,  11750.,  12230.,  13246.,
      8490.,   9426.,   17324.,  19228.,  20252.,  22220.,  30926.,  33926.,
      21196.,  23228.,  32342.,  35438.,  22140.,  24236.,  25324.,  27484.,
      15650.,  16746.,  31964.,  34188.,  34892.,  37180.,  53366.,  56846.,
      36476.,  38828.,  55742.,  59318.,  38060.,  40476.,  41244.,  43724.,
      24059.,  25799.,  49114.,  52642.,  53890.,  57514.,  82377.,  87885.,
      56266.,  59986.,  85941.,  91593.,  58642.,  62458.,  63802.,  67714.,
      18562.,  19786.,  37788.,  40268.,  41228.,  43772.,  62870.,  66734.,
      42812.,  45420.,  65246.,  69206.,  44396.,  47068.,  48092.,  50828.,
      28427.,  30359.,  57850.,  61762.,  63394.,  67402.,  96633.,  102717.,
      65770.,  69874.,  100197., 106425., 68146.,  72346.,  74074.,  78370.,
      21474.,  22826.,  43612.,  46348.,  47564.,  50364.,  72374.,  76622.,
      49148.,  52012.,  74750.,  79094.,  50732.,  53660.,  54940.,  57932.,
      32795.,  34919.,  66586.,  70882.,  72898.,  77290.,  110889., 117549.,
      75274.,  79762.,  114453., 121257., 77650.,  82234.,  84346.,  89026.,
      24386.,  25866.,  49436.,  52428.,  53900.,  56956.,  81878.,  86510.,
      55484.,  58604.,  84254.,  88982.,  57068.,  60252.,  61788.,  65036.,
      35386.,  37026.,  71756.,  75068.,  76220.,  79596.,  115838., 120950.,
      78444.,  81884.,  119174., 124382., 80668.,  84172.,  85388.,  88956.,
      8237.,   8993.,   16646.,  18174.,  19262.,  20822.,  29167.,  31531.,
      19734.,  21326.,  29875.,  32287.,  20206.,  21830.,  22950.,  24606.,
      16650.,  18226.,  33644.,  36828.,  39132.,  42380.,  59246.,  64166.,
      40076.,  43388.,  60662.,  65678.,  41020.,  44396.,  46764.,  50204.,
      30210.,  31946.,  61084.,  64588.,  66572.,  70140.,  100886., 106286.,
      68156.,  71788.,  103262., 108758., 69740.,  73436.,  75484.,  79244.,
      45899.,  48599.,  92794.,  98242.,  101410., 106954., 153657., 162045.,
      103786., 109426., 157221., 165753., 106162., 111898., 115162., 120994.,
      33122.,  34986.,  66908.,  70668.,  72908.,  76732.,  110390., 116174.,
      74492.,  78380.,  112766., 118646., 76076.,  80028.,  82332.,  86348.,
      50267.,  53159.,  101530., 107362., 110914., 116842., 167913., 176877.,
      113290., 119314., 171477., 180585., 115666., 121786., 125434., 131650.,
      36034.,  38026.,  72732.,  76748.,  79244.,  83324.,  119894., 126062.,
      80828.,  84972.,  122270., 128534., 82412.,  86620.,  89180.,  93452.,
      54635.,  57719.,  110266., 116482., 120418., 126730., 182169., 191709.,
      122794., 129202., 185733., 195417., 125170., 131674., 135706., 142306.,
      38946.,  41066.,  78556.,  82828.,  85580.,  89916.,  129398., 135950.,
      87164.,  91564.,  131774., 138422., 88748.,  93212.,  96028.,  100556.,
      56346.,  58626.,  113676., 118268., 120700., 125356., 182558., 189590.,
      122924., 127644., 185894., 193022., 125148., 129932., 132428., 137276.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   158.,
      310.,   149.,   233.,   193.,   293.,   0.,     0.,     65.,    165.,
      77.,    193.,   326.,   574.,   382.,   662.,   438.,   750.,   369.,
      533.,   413.,   593.,   0.,     0.,     154.,   386.,   242.,   506.,
      828.,   1388.,  1068.,  1692.,  1308.,  1996.,  954.,   1314.,  1106.,
      1498.,  0.,     0.,     594.,   986.,   682.,   1106.,  2028.,  2908.,
      2268.,  3212.,  2508.,  3516.,  1714.,  2234.,  1866.,  2418.,  0.,
      0.,     1087.,  1723.,  1315.,  1999.,  3626.,  5042.,  4178.,  5690.,
      4730.,  6338.,  3055.,  3883.,  3379.,  4255.,  0.,     0.,     1922.,
      2378.,  2138.,  2626.,  4940.,  5948.,  5436.,  6508.,  5932.,  7068.,
      3426.,  4010.,  3706.,  4322.,  0.,     0.,     3002.,  3618.,  3218.,
      3866.,  7420.,  8748.,  7916.,  9308.,  8412.,  9868.,  4826.,  5570.,
      5106.,  5882.,  0.,     0.,     2153.,  2477.,  2293.,  2633.,  5078.,
      5774.,  5390.,  6118.,  5702.,  6462.,  3161.,  3549.,  3333.,  3737.,
      0.,     0.,     2853.,  3257.,  2993.,  3413.,  6638.,  7494.,  6950.,
      7838.,  7262.,  8182.,  4021.,  4489.,  4193.,  4677.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     77.,    193.,
      281.,   413.,   574.,   854.,   1014.,  1326.,  1454.,  1798.,  797.,
      977.,   1033.,  1229.,  0.,     0.,     1097.,  1293.,  1301.,  1513.,
      2774.,  3214.,  3214.,  3686.,  3654.,  4158.,  1977.,  2237.,  2213.,
      2489.,  0.,     0.,     2218.,  2642.,  2690.,  3146.,  5724.,  6668.,
      6732.,  7740.,  7740.,  8812.,  4170.,  4722.,  4706.,  5290.,  0.,
      0.,     4578.,  5162.,  5050.,  5666.,  10764., 12028., 11772., 13100.,
      12780., 14172., 6850.,  7562.,  7386.,  8130.,  0.,     0.,     7063.,
      7987.,  7867.,  8839.,  16730., 18722., 18434., 20522., 20138., 22322.,
      10759., 11875., 11659., 12823., 0.,     0.,     5906.,  6554.,  6506.,
      7186.,  13676., 15068., 14940., 16396., 16204., 17724., 8562.,  9338.,
      9226.,  10034., 0.,     0.,     8906.,  9714.,  9506.,  10346., 19996.,
      21708., 21260., 23036., 22524., 24364., 11882., 12818., 12546., 13514.,
      0.,     0.,     5105.,  5525.,  5437.,  5873.,  11366., 12254., 12062.,
      12982., 12758., 13710., 6689.,  7173.,  7053.,  7553.,  0.,     0.,
      6765.,  7265.,  7097.,  7613.,  14846., 15894., 15542., 16622., 16238.,
      17350., 8509.,  9073.,  8873.,  9453.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     149.,   361.,   545.,   773.,
      1102.,  1574.,  1926.,  2430.,  2750.,  3286.,  1445.,  1721.,  1873.,
      2165.,  0.,     0.,     2129.,  2421.,  2525.,  2833.,  5222.,  5854.,
      6046.,  6710.,  6870.,  7566.,  3585.,  3941.,  4013.,  4385.,  0.,
      0.,     4282.,  4898.,  5138.,  5786.,  10620., 11948., 12396., 13788.,
      14172., 15628., 7386.,  8130.,  8306.,  9082.,  0.,     0.,     8562.,
      9338.,  9418.,  10226., 19500., 21148., 21276., 22988., 23052., 24828.,
      11986., 12890., 12906., 13842., 0.,     0.,     13039., 14251., 14419.,
      15679., 29834., 32402., 32690., 35354., 35546., 38306., 18463., 19867.,
      19939., 21391., 0.,     0.,     9890.,  10730., 10874., 11746., 22412.,
      24188., 24444., 26284., 26476., 28380., 13698., 14666., 14746., 15746.,
      0.,     0.,     14810., 15810., 15794., 16826., 32572., 34668., 34604.,
      36764., 36636., 38860., 18938., 20066., 19986., 21146., 0.,     0.,
      8057.,  8573.,  8581.,  9113.,  17654., 18734., 18734., 19846., 19814.,
      20958., 10217., 10797., 10773., 11369., 0.,     0.,     10677., 11273.,
      11201., 11813., 23054., 24294., 24134., 25406., 25214., 26518., 12997.,
      13657., 13553., 14229., 0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,     1422.,    2380.,    4332.,    2796.,    5004.,    6362.,
      9866.,    6540.,    9004.,    11978.,   15866.,   10284.,   13004.,
      11724.,   14700.,   2364.,    4700.,    7448.,    12376.,   10328.,
      15768.,   19828.,   28372.,   17816.,   23768.,   31060.,   40372.,
      25304.,   31768.,   30232.,   37208.,   8284.,    11900.,   21848.,
      29336.,   24728.,   32728.,   45268.,   57652.,   37336.,   45848.,
      64180.,   77332.,   49944.,   58968.,   54872.,   64408.,   17002.,
      23194.,   41924.,   54692.,   49316.,   62852.,   86238.,   107118.,
      68228.,   82532.,   114606.,  136638.,  87140.,   102212.,  97604.,
      113444.,  31452.,   36092.,   68184.,   77720.,   75160.,   85208.,
      120916.,  136372.,  87768.,   98328.,   139828.,  156052.,  100376.,
      111448.,  109400.,  120984.,  51754.,   59482.,   111428.,  127268.,
      124964.,  141572.,  199710.,  225198.,  143876.,  161252.,  228078.,
      254718.,  162788.,  180932.,  179396.,  198308.,  54620.,   60284.,
      114520.,  126104.,  125592.,  137688.,  196564.,  215092.,  138200.,
      150808.,  215476.,  234772.,  150808.,  163928.,  163928.,  177560.,
      86506.,   95770.,   180932.,  199844.,  200612.,  220292.,  313182.,
      343278.,  219524.,  239972.,  341550.,  372798.,  238436.,  259652.,
      261188.,  283172.,  77788.,   84476.,   160856.,  174488.,  176024.,
      190168.,  272212.,  293812.,  188632.,  203288.,  291124.,  313492.,
      201240.,  216408.,  218456.,  234136.,  114428.,  122396.,  236696.,
      252888.,  251864.,  268568.,  389812.,  415252.,  269592.,  286808.,
      416404.,  442612.,  287320.,  305048.,  304536.,  322776.,  32830.,
      36302.,   67020.,   74092.,   77676.,   85004.,   118682.,  129866.,
      81420.,   89004.,   124298.,  135866.,  85164.,   93004.,   96844.,
      104940.,  67004.,   74460.,   136728.,  151896.,  160088.,  175768.,
      244468.,  268372.,  167576.,  183768.,  255700.,  280372.,  175064.,
      191768.,  200472.,  217688.,  124124.,  132860.,  253528.,  271256.,
      276888.,  295128.,  423508.,  451252.,  289496.,  308248.,  442420.,
      470932.,  302104.,  321368.,  327512.,  347288.,  190762.,  204634.,
      389444.,  417572.,  427556.,  456452.,  653598.,  697518.,  446468.,
      476132.,  681966.,  727038.,  465380.,  495812.,  506564.,  537764.,
      147292.,  157052.,  299864.,  319640.,  327320.,  347608.,  499156.,
      529972.,  339928.,  360728.,  518068.,  549652.,  352536.,  373848.,
      382040.,  403864.,  225514.,  240922.,  458948.,  490148.,  503204.,
      535172.,  767070.,  815598.,  522116.,  554852.,  795438.,  845118.,
      541028.,  574532.,  588356.,  622628.,  170460.,  181244.,  346200.,
      368024.,  377752.,  400088.,  574804.,  608692.,  390360.,  413208.,
      593716.,  628372.,  402968.,  426328.,  436568.,  460440.,  260266.,
      277210.,  528452.,  562724.,  578852.,  613892.,  880542.,  933678.,
      597764.,  633572.,  908910.,  963198.,  616676.,  653252.,  670148.,
      707492.,  193628.,  205436.,  392536.,  416408.,  428184.,  452568.,
      650452.,  687412.,  440792.,  465688.,  669364.,  707092.,  453400.,
      478808.,  491096.,  517016.,  281468.,  294556.,  570776.,  597208.,
      606424.,  633368.,  921652.,  962452.,  624152.,  651608.,  948244.,
      989812.,  641880.,  669848.,  679576.,  708056.,  65150.,   71182.,
      131660.,  143852.,  152556.,  165004.,  231002.,  249866.,  156300.,
      169004.,  236618.,  255866.,  160044.,  173004.,  181964.,  195180.,
      131644.,  144220.,  266008.,  291416.,  309848.,  335768.,  469108.,
      508372.,  317336.,  343768.,  480340.,  520372.,  324824.,  351768.,
      370712.,  398168.,  239964.,  253820.,  485208.,  513176.,  529048.,
      557528.,  801748.,  844852.,  541656.,  570648.,  820660.,  864532.,
      554264.,  583768.,  600152.,  630168.,  364522.,  386074.,  736964.,
      780452.,  805796.,  850052.,  1220958., 1287918., 824708.,  869732.,
      1249326., 1317438., 843620.,  889412.,  915524.,  962084.,  263132.,
      278012.,  531544.,  561560.,  579480.,  610008.,  877396.,  923572.,
      592088.,  623128.,  896308.,  943252.,  604696.,  636248.,  654680.,
      686744.,  399274.,  422362.,  806468.,  853028.,  881444.,  928772.,
      1334430., 1405998., 900356.,  948452.,  1362798., 1435518., 919268.,
      968132.,  997316.,  1046948., 286300.,  302204.,  577880.,  609944.,
      629912.,  662488.,  953044.,  1002292., 642520.,  675608.,  971956.,
      1021972., 655128.,  688728.,  709208.,  743320.,  434026.,  458650.,
      875972.,  925604.,  957092.,  1007492., 1447902., 1524078., 976004.,
      1027172., 1476270., 1553598., 994916.,  1046852., 1079108., 1131812.,
      309468.,  326396.,  624216.,  658328.,  680344.,  714968.,  1028692.,
      1081012., 692952.,  728088.,  1047604., 1100692., 705560.,  741208.,
      763736.,  799896.,  448508.,  466716.,  904856.,  941528.,  960984.,
      998168.,  1453492., 1509652., 978712.,  1016408., 1480084., 1537012.,
      996440.,  1034648., 1054616., 1093336.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1132.,   2316.,   1118.,   1774.,   1454.,   2238.,   0.,      0.,
      430.,    1214.,   510.,    1422.,   2380.,   4332.,   2796.,   5004.,
      3212.,   5676.,   2798.,   4094.,   3134.,   4558.,   0.,      0.,
      1020.,   2844.,   1692.,   3772.,   6104.,   10520.,  7960.,   12888.,
      9816.,   15256.,  7292.,   10140.,  8476.,   11580.,  0.,      0.,
      4380.,   7484.,   5052.,   8412.,   15384.,  22360.,  17240.,  24728.,
      19096.,  27096.,  13212.,  17340.,  14396.,  18780.,  0.,      0.,
      8090.,   13130.,  9866.,   15290.,  27652.,  38884.,  31972.,  43972.,
      36292.,  49060.,  23642.,  30218.,  26186.,  33146.,  0.,      0.,
      14940.,  18556.,  16636.,  20508.,  38552.,  46552.,  42456.,  50968.,
      46360.,  55384.,  26844.,  31484.,  29052.,  33948.,  0.,      0.,
      23420.,  28316.,  25116.,  30268.,  58072.,  68632.,  61976.,  73048.,
      65880.,  77464.,  37884.,  43804.,  40092.,  46268.,  0.,      0.,
      16910.,  19486.,  18014.,  20718.,  39948.,  45484.,  42412.,  48204.,
      44876.,  50924.,  24910.,  27998.,  26270.,  29486.,  0.,      0.,
      22430.,  25646.,  23534.,  26878.,  52268.,  59084.,  54732.,  61804.,
      57196.,  64524.,  31710.,  35438.,  33070.,  36926.,  0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      510.,    1422.,   2126.,   3166.,   4332.,   6540.,   7820.,   10284.,
      11308.,  14028.,  6206.,   7630.,   8078.,   9630.,   0.,      0.,
      8590.,   10142.,  10206.,  11886.,  21772.,  25260.,  25260.,  29004.,
      28748.,  32748.,  15566.,  17630.,  17438.,  19630.,  0.,      0.,
      17340.,  20700.,  21084.,  24700.,  44888.,  52376.,  52888.,  60888.,
      60888.,  69400.,  32828.,  37212.,  37084.,  41724.,  0.,      0.,
      36060.,  40700.,  39804.,  44700.,  84888.,  94936.,  92888.,  103448.,
      100888., 111960., 54108.,  59772.,  58364.,  64284.,  0.,      0.,
      55610.,  62954.,  61994.,  69722.,  131908., 147748., 145444., 162052.,
      158980., 176356., 84986.,  93866.,  92138.,  101402., 0.,      0.,
      46620.,  51772.,  51388.,  56796.,  108056., 119128., 118104., 129688.,
      128152., 140248., 67740.,  73916.,  73020.,  79452.,  0.,      0.,
      70460.,  76892.,  75228.,  81916.,  158296., 171928., 168344., 182488.,
      178392., 193048., 94140.,  101596., 99420.,  107132., 0.,      0.,
      40430.,  43774.,  43070.,  46542.,  90060.,  97132.,  95596.,  102924.,
      101132., 108716., 53038.,  56894.,  55934.,  59918.,  0.,      0.,
      53630.,  57614.,  56270.,  60382.,  117740., 126092., 123276., 131884.,
      128812., 137676., 67518.,  72014.,  70414.,  75038.,  0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      990.,    2670.,   4142.,   5950.,   8364.,   12108.,  14924.,  18924.,
      21484.,  25740.,  11294.,  13486.,  14702.,  17022.,  0.,      0.,
      16750.,  19070.,  19902.,  22350.,  41164.,  46188.,  47724.,  53004.,
      54284.,  59820.,  28334.,  31166.,  31742.,  34702.,  0.,      0.,
      33660.,  38556.,  40476.,  45628.,  83672.,  94232.,  97816.,  108888.,
      111960., 123544., 58364.,  64284.,  65692.,  71868.,  0.,      0.,
      67740.,  73916.,  74556.,  80988.,  154392., 167512., 168536., 182168.,
      182680., 196824., 95004.,  102204., 102332., 109788., 0.,      0.,
      103130., 112778., 114122., 124154., 236164., 256612., 258916., 280132.,
      281668., 303652., 146330., 157514., 158090., 169658., 0.,      0.,
      78300.,  84988.,  86140.,  93084.,  177560., 191704., 193752., 208408.,
      209944., 225112., 108636., 116348., 116988., 124956., 0.,      0.,
      117500., 125468., 125340., 133564., 258520., 275224., 274712., 291928.,
      290904., 308632., 150396., 159388., 158748., 167996., 0.,      0.,
      63950.,  68062.,  68126.,  72366.,  140172., 148780., 148780., 157644.,
      157388., 166508., 81166.,  85790.,  85598.,  90350.,  0.,      0.,
      84830.,  89582.,  89006.,  93886.,  183212., 193100., 191820., 201964.,
      200428., 210828., 103326., 108590., 107758., 113150., 0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,
      542.,   624.,   719.,   836.,   959.,   1088.,  622.,   704.,   790.,
      880.,   710.,   800.,   894.,   992.,   130.,   200.,   274.,   352.,
      428.,   576.,   732.,   896.,   604.,   768.,   940.,   1120.,  1174.,
      1432.,  1702.,  1984.,  1068.,  1248.,  1436.,  1632.,  1870.,  2152.,
      2446.,  2752.,  1532.,  1728.,  1932.,  2144.,  1836.,  2048.,  2268.,
      2496.,  490.,   600.,   714.,   832.,   1308.,  1536.,  1772.,  2016.,
      1484.,  1728.,  1980.,  2240.,  2734.,  3112.,  3502.,  3904.,  2268.,
      2528.,  2796.,  3072.,  3910.,  4312.,  4726.,  5152.,  3052.,  3328.,
      3612.,  3904.,  3356.,  3648.,  3948.,  4256.,  1015.,  1204.,  1399.,
      1600.,  2522.,  2912.,  3314.,  3728.,  2978.,  3392.,  3818.,  4256.,
      5229.,  5868.,  6525.,  7200.,  4154.,  4592.,  5042.,  5504.,  6993.,
      7668.,  8361.,  9072.,  5330.,  5792.,  6266.,  6752.,  5978.,  6464.,
      6962.,  7472.,  1930.,  2072.,  2218.,  2368.,  4188.,  4480.,  4780.,
      5088.,  4620.,  4928.,  5244.,  5568.,  7438.,  7912.,  8398.,  8896.,
      5404.,  5728.,  6060.,  6400.,  8614.,  9112.,  9622.,  10144., 6188.,
      6528.,  6876.,  7232.,  6748.,  7104.,  7468.,  7840.,  3175.,  3412.,
      3655.,  3904.,  6842.,  7328.,  7826.,  8336.,  7682.,  8192.,  8714.,
      9248.,  12285., 13068., 13869., 14688., 8858.,  9392.,  9938.,  10496.,
      14049., 14868., 15705., 16560., 10034., 10592., 11162., 11744., 11066.,
      11648., 12242., 12848., 3370.,  3544.,  3722.,  3904.,  7068.,  7424.,
      7788.,  8160.,  7756.,  8128.,  8508.,  8896.,  12142., 12712., 13294.,
      13888., 8540.,  8928.,  9324.,  9728.,  13318., 13912., 14518., 15136.,
      9324.,  9728.,  10140., 10560., 10140., 10560., 10988., 11424., 5335.,
      5620.,  5911.,  6208.,  11162., 11744., 12338., 12944., 12386., 12992.,
      13610., 14240., 19341., 20268., 21213., 22176., 13562., 14192., 14834.,
      15488., 21105., 22068., 23049., 24048., 14738., 15392., 16058., 16736.,
      16154., 16832., 17522., 18224., 4810.,  5016.,  5226.,  5440.,  9948.,
      10368., 10796., 11232., 10892., 11328., 11772., 12224., 16846., 17512.,
      18190., 18880., 11676., 12128., 12588., 13056., 18022., 18712., 19414.,
      20128., 12460., 12928., 13404., 13888., 13532., 14016., 14508., 15008.,
      7090.,  7336.,  7586.,  7840.,  14668., 15168., 15676., 16192., 15612.,
      16128., 16652., 17184., 24166., 24952., 25750., 26560., 16716., 17248.,
      17788., 18336., 25822., 26632., 27454., 28288., 17820., 18368., 18924.,
      19488., 18892., 19456., 20028., 20608., 2025.,  2132.,  2241.,  2352.,
      4134.,  4352.,  4574.,  4800.,  4798.,  5024.,  5254.,  5488.,  7331.,
      7676.,  8027.,  8384.,  5030.,  5264.,  5502.,  5744.,  7679.,  8036.,
      8399.,  8768.,  5262.,  5504.,  5750.,  6000.,  5990.,  6240.,  6494.,
      6752.,  4130.,  4360.,  4594.,  4832.,  8428.,  8896.,  9372.,  9856.,
      9884.,  10368., 10860., 11360., 15094., 15832., 16582., 17344., 10348.,
      10848., 11356., 11872., 15790., 16552., 17326., 18112., 10812., 11328.,
      11852., 12384., 12396., 12928., 13468., 14016., 7690.,  7960.,  8234.,
      8512.,  15708., 16256., 16812., 17376., 17164., 17728., 18300., 18880.,
      26254., 27112., 27982., 28864., 17948., 18528., 19116., 19712., 27430.,
      28312., 29206., 30112., 18732., 19328., 19932., 20544., 20316., 20928.,
      21548., 22176., 11815., 12244., 12679., 13120., 24122., 24992., 25874.,
      26768., 26498., 27392., 28298., 29216., 40509., 41868., 43245., 44640.,
      27674., 28592., 29522., 30464., 42273., 43668., 45081., 46512., 28850.,
      29792., 30746., 31712., 31418., 32384., 33362., 34352., 9130.,  9432.,
      9738.,  10048., 18588., 19200., 19820., 20448., 20300., 20928., 21564.,
      22208., 30958., 31912., 32878., 33856., 21084., 21728., 22380., 23040.,
      32134., 33112., 34102., 35104., 21868., 22528., 23196., 23872., 23708.,
      24384., 25068., 25760., 13975., 14452., 14935., 15424., 28442., 29408.,
      30386., 31376., 31202., 32192., 33194., 34208., 47565., 49068., 50589.,
      52128., 32378., 33392., 34418., 35456., 49329., 50868., 52425., 54000.,
      33554., 34592., 35642., 36704., 36506., 37568., 38642., 39728., 10570.,
      10904., 11242., 11584., 21468., 22144., 22828., 23520., 23436., 24128.,
      24828., 25536., 35662., 36712., 37774., 38848., 24220., 24928., 25644.,
      26368., 36838., 37912., 38998., 40096., 25004., 25728., 26460., 27200.,
      27100., 27840., 28588., 29344., 16135., 16660., 17191., 17728., 32762.,
      33824., 34898., 35984., 35906., 36992., 38090., 39200., 54621., 56268.,
      57933., 59616., 37082., 38192., 39314., 40448., 56385., 58068., 59769.,
      61488., 38258., 39392., 40538., 41696., 41594., 42752., 43922., 45104.,
      12010., 12376., 12746., 13120., 24348., 25088., 25836., 26592., 26572.,
      27328., 28092., 28864., 40366., 41512., 42670., 43840., 27356., 28128.,
      28908., 29696., 41542., 42712., 43894., 45088., 28140., 28928., 29724.,
      30528., 30492., 31296., 32108., 32928., 17490., 17896., 18306., 18720.,
      35468., 36288., 37116., 37952., 37692., 38528., 39372., 40224., 57286.,
      58552., 59830., 61120., 38796., 39648., 40508., 41376., 58942., 60232.,
      61534., 62848., 39900., 40768., 41644., 42528., 42252., 43136., 44028.,
      44928., 4025.,  4212.,  4401.,  4592.,  8134.,  8512.,  8894.,  9280.,
      9438.,  9824.,  10214., 10608., 14291., 14876., 15467., 16064., 9670.,
      10064., 10462., 10864., 14639., 15236., 15839., 16448., 9902.,  10304.,
      10710., 11120., 11270., 11680., 12094., 12512., 8130.,  8520.,  8914.,
      9312.,  16428., 17216., 18012., 18816., 19164., 19968., 20780., 21600.,
      29014., 30232., 31462., 32704., 19628., 20448., 21276., 22112., 29710.,
      30952., 32206., 33472., 20092., 20928., 21772., 22624., 22956., 23808.,
      24668., 25536., 14890., 15320., 15754., 16192., 30108., 30976., 31852.,
      32736., 32844., 33728., 34620., 35520., 49774., 51112., 52462., 53824.,
      33628., 34528., 35436., 36352., 50950., 52312., 53686., 55072., 34412.,
      35328., 36252., 37184., 37276., 38208., 39148., 40096., 22615., 23284.,
      23959., 24640., 45722., 47072., 48434., 49808., 50018., 51392., 52778.,
      54176., 75789., 77868., 79965., 82080., 51194., 52592., 54002., 55424.,
      77553., 79668., 81801., 83952., 52370., 53792., 55226., 56672., 56858.,
      58304., 59762., 61232., 16330., 16792., 17258., 17728., 32988., 33920.,
      34860., 35808., 35980., 36928., 37884., 38848., 54478., 55912., 57358.,
      58816., 36764., 37728., 38700., 39680., 55654., 57112., 58582., 60064.,
      37548., 38528., 39516., 40512., 40668., 41664., 42668., 43680., 24775.,
      25492., 26215., 26944., 50042., 51488., 52946., 54416., 54722., 56192.,
      57674., 59168., 82845., 85068., 87309., 89568., 55898., 57392., 58898.,
      60416., 84609., 86868., 89145., 91440., 57074., 58592., 60122., 61664.,
      61946., 63488., 65042., 66608., 17770., 18264., 18762., 19264., 35868.,
      36864., 37868., 38880., 39116., 40128., 41148., 42176., 59182., 60712.,
      62254., 63808., 39900., 40928., 41964., 43008., 60358., 61912., 63478.,
      65056., 40684., 41728., 42780., 43840., 44060., 45120., 46188., 47264.,
      26935., 27700., 28471., 29248., 54362., 55904., 57458., 59024., 59426.,
      60992., 62570., 64160., 89901., 92268., 94653., 97056., 60602., 62192.,
      63794., 65408., 91665., 94068., 96489., 98928., 61778., 63392., 65018.,
      66656., 67034., 68672., 70322., 71984., 19210., 19736., 20266., 20800.,
      38748., 39808., 40876., 41952., 42252., 43328., 44412., 45504., 63886.,
      65512., 67150., 68800., 43036., 44128., 45228., 46336., 65062., 66712.,
      68374., 70048., 43820., 44928., 46044., 47168., 47452., 48576., 49708.,
      50848., 27890., 28456., 29026., 29600., 56268., 57408., 58556., 59712.,
      59772., 60928., 62092., 63264., 90406., 92152., 93910., 95680., 60876.,
      62048., 63228., 64416., 92062., 93832., 95614., 97408., 61980., 63168.,
      64364., 65568., 65612., 66816., 68028., 69248.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   62.,    96.,
      134.,   176.,   65.,    84.,    105.,   128.,   85.,    108.,   133.,
      160.,   0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,
      25.,    52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,
      224.,   294.,   368.,   182.,   256.,   334.,   416.,   165.,   204.,
      245.,   288.,   185.,   228.,   273.,   320.,   0.,     0.,     0.,
      0.,     50.,    104.,   162.,   224.,   90.,    152.,   218.,   288.,
      348.,   480.,   620.,   768.,   460.,   608.,   764.,   928.,   572.,
      736.,   908.,   1088.,  434.,   520.,   610.,   704.,   506.,   600.,
      698.,   800.,   0.,     0.,     0.,     0.,     250.,   344.,   442.,
      544.,   290.,   392.,   498.,   608.,   908.,   1120.,  1340.,  1568.,
      1020.,  1248.,  1484.,  1728.,  1132.,  1376.,  1628.,  1888.,  794.,
      920.,   1050.,  1184.,  866.,   1000.,  1138.,  1280.,  0.,     0.,
      0.,     0.,     467.,   620.,   779.,   944.,   575.,   740.,   911.,
      1088.,  1642.,  1984.,  2338.,  2704.,  1906.,  2272.,  2650.,  3040.,
      2170.,  2560.,  2962.,  3376.,  1427.,  1628.,  1835.,  2048.,  1583.,
      1796.,  2015.,  2240.,  0.,     0.,     0.,     0.,     906.,   1016.,
      1130.,  1248.,  1010.,  1128.,  1250.,  1376.,  2348.,  2592.,  2844.,
      3104.,  2588.,  2848.,  3116.,  3392.,  2828.,  3104.,  3388.,  3680.,
      1642.,  1784.,  1930.,  2080.,  1778.,  1928.,  2082.,  2240.,  0.,
      0.,     0.,     0.,     1426.,  1576.,  1730.,  1888.,  1530.,  1688.,
      1850.,  2016.,  3548.,  3872.,  4204.,  4544.,  3788.,  4128.,  4476.,
      4832.,  4028.,  4384.,  4748.,  5120.,  2322.,  2504.,  2690.,  2880.,
      2458.,  2648.,  2842.,  3040.,  0.,     0.,     0.,     0.,     1037.,
      1116.,  1197.,  1280.,  1105.,  1188.,  1273.,  1360.,  2454.,  2624.,
      2798.,  2976.,  2606.,  2784.,  2966.,  3152.,  2758.,  2944.,  3134.,
      3328.,  1533.,  1628.,  1725.,  1824.,  1617.,  1716.,  1817.,  1920.,
      0.,     0.,     0.,     0.,     1377.,  1476.,  1577.,  1680.,  1445.,
      1548.,  1653.,  1760.,  3214.,  3424.,  3638.,  3856.,  3366.,  3584.,
      3806.,  4032.,  3518.,  3744.,  3974.,  4208.,  1953.,  2068.,  2185.,
      2304.,  2037.,  2156.,  2277.,  2400.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     25.,    52.,    81.,    112.,
      125.,   156.,   189.,   224.,   254.,   320.,   390.,   464.,   470.,
      544.,   622.,   704.,   686.,   768.,   854.,   944.,   377.,   420.,
      465.,   512.,   493.,   540.,   589.,   640.,   0.,     0.,     0.,
      0.,     525.,   572.,   621.,   672.,   625.,   676.,   729.,   784.,
      1334.,  1440.,  1550.,  1664.,  1550.,  1664.,  1782.,  1904.,  1766.,
      1888.,  2014.,  2144.,  957.,   1020.,  1085.,  1152.,  1073.,  1140.,
      1209.,  1280.,  0.,     0.,     0.,     0.,     1058.,  1160.,  1266.,
      1376.,  1290.,  1400.,  1514.,  1632.,  2748.,  2976.,  3212.,  3456.,
      3244.,  3488.,  3740.,  4000.,  3740.,  4000.,  4268.,  4544.,  2018.,
      2152.,  2290.,  2432.,  2282.,  2424.,  2570.,  2720.,  0.,     0.,
      0.,     0.,     2218.,  2360.,  2506.,  2656.,  2450.,  2600.,  2754.,
      2912.,  5228.,  5536.,  5852.,  6176.,  5724.,  6048.,  6380.,  6720.,
      6220.,  6560.,  6908.,  7264.,  3338.,  3512.,  3690.,  3872.,  3602.,
      3784.,  3970.,  4160.,  0.,     0.,     0.,     0.,     3419.,  3644.,
      3875.,  4112.,  3815.,  4052.,  4295.,  4544.,  8122.,  8608.,  9106.,
      9616.,  8962.,  9472.,  9994.,  10528., 9802.,  10336., 10882., 11440.,
      5243.,  5516.,  5795.,  6080.,  5687.,  5972.,  6263.,  6560.,  0.,
      0.,     0.,     0.,     2874.,  3032.,  3194.,  3360.,  3170.,  3336.,
      3506.,  3680.,  6668.,  7008.,  7356.,  7712.,  7292.,  7648.,  8012.,
      8384.,  7916.,  8288.,  8668.,  9056.,  4186.,  4376.,  4570.,  4768.,
      4514.,  4712.,  4914.,  5120.,  0.,     0.,     0.,     0.,     4354.,
      4552.,  4754.,  4960.,  4650.,  4856.,  5066.,  5280.,  9788.,  10208.,
      10636., 11072., 10412., 10848., 11292., 11744., 11036., 11488., 11948.,
      12416., 5826.,  6056.,  6290.,  6528.,  6154.,  6392.,  6634.,  6880.,
      0.,     0.,     0.,     0.,     2501.,  2604.,  2709.,  2816.,  2665.,
      2772.,  2881.,  2992.,  5574.,  5792.,  6014.,  6240.,  5918.,  6144.,
      6374.,  6608.,  6262.,  6496.,  6734.,  6976.,  3285.,  3404.,  3525.,
      3648.,  3465.,  3588.,  3713.,  3840.,  0.,     0.,     0.,     0.,
      3321.,  3444.,  3569.,  3696.,  3485.,  3612.,  3741.,  3872.,  7294.,
      7552.,  7814.,  8080.,  7638.,  7904.,  8174.,  8448.,  7982.,  8256.,
      8534.,  8816.,  4185.,  4324.,  4465.,  4608.,  4365.,  4508.,  4653.,
      4800.,  0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     49.,    100.,   153.,   208.,   245.,   300.,   357.,   416.,
      494.,   608.,   726.,   848.,   902.,   1024.,  1150.,  1280.,  1310.,
      1440.,  1574.,  1712.,  689.,   756.,   825.,   896.,   901.,   972.,
      1045.,  1120.,  0.,     0.,     0.,     0.,     1029.,  1100.,  1173.,
      1248.,  1225.,  1300.,  1377.,  1456.,  2534.,  2688.,  2846.,  3008.,
      2942.,  3104.,  3270.,  3440.,  3350.,  3520.,  3694.,  3872.,  1749.,
      1836.,  1925.,  2016.,  1961.,  2052.,  2145.,  2240.,  0.,     0.,
      0.,     0.,     2066.,  2216.,  2370.,  2528.,  2490.,  2648.,  2810.,
      2976.,  5148.,  5472.,  5804.,  6144.,  6028.,  6368.,  6716.,  7072.,
      6908.,  7264.,  7628.,  8000.,  3602.,  3784.,  3970.,  4160.,  4058.,
      4248.,  4442.,  4640.,  0.,     0.,     0.,     0.,     4186.,  4376.,
      4570.,  4768.,  4610.,  4808.,  5010.,  5216.,  9548.,  9952.,  10364.,
      10784., 10428., 10848., 11276., 11712., 11308., 11744., 12188., 12640.,
      5882.,  6104.,  6330.,  6560.,  6338.,  6568.,  6802.,  7040.,  0.,
      0.,     0.,     0.,     6371.,  6668.,  6971.,  7280.,  7055.,  7364.,
      7679.,  8000.,  14602., 15232., 15874., 16528., 16018., 16672., 17338.,
      18016., 17434., 18112., 18802., 19504., 9059.,  9404.,  9755.,  10112.,
      9791.,  10148., 10511., 10880., 0.,     0.,     0.,     0.,     4842.,
      5048.,  5258.,  5472.,  5330.,  5544.,  5762.,  5984.,  10988., 11424.,
      11868., 12320., 11996., 12448., 12908., 13376., 13004., 13472., 13948.,
      14432., 6730.,  6968.,  7210.,  7456.,  7250.,  7496.,  7746.,  8000.,
      0.,     0.,     0.,     0.,     7282.,  7528.,  7778.,  8032.,  7770.,
      8024.,  8282.,  8544.,  16028., 16544., 17068., 17600., 17036., 17568.,
      18108., 18656., 18044., 18592., 19148., 19712., 9330.,  9608.,  9890.,
      10176., 9850.,  10136., 10426., 10720., 0.,     0.,     0.,     0.,
      3965.,  4092.,  4221.,  4352.,  4225.,  4356.,  4489.,  4624.,  8694.,
      8960.,  9230.,  9504.,  9230.,  9504.,  9782.,  10064., 9766.,  10048.,
      10334., 10624., 5037.,  5180.,  5325.,  5472.,  5313.,  5460.,  5609.,
      5760.,  0.,     0.,     0.,     0.,     5265.,  5412.,  5561.,  5712.,
      5525.,  5676.,  5829.,  5984.,  11374., 11680., 11990., 12304., 11910.,
      12224., 12542., 12864., 12446., 12768., 13094., 13424., 6417.,  6580.,
      6745.,  6912.,  6693.,  6860.,  7029.,  7200.,  0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   5506.,   6218.,   6962.,   7738.,
      906.,    1458.,   2042.,   2658.,   3140.,   4308.,   5540.,   6836.,
      4516.,   5812.,   7172.,   8596.,   8894.,   10934.,  13070.,  15302.,
      8196.,   9620.,   11108.,  12660.,  14414.,  16646.,  18974.,  21398.,
      11876.,  13428.,  15044.,  16724.,  14276.,  15956.,  17700.,  19508.,
      3706.,   4578.,   5482.,   6418.,   10020.,  11828.,  13700.,  15636.,
      11396.,  13332.,  15332.,  17396.,  21134.,  24134.,  27230.,  30422.,
      17636.,  19700.,  21828.,  24020.,  30494.,  33686.,  36974.,  40358.,
      23876.,  26068.,  28324.,  30644.,  26276.,  28596.,  30980.,  33428.,
      7751.,   9251.,   10799.,  12395.,  19414.,  22510.,  25702.,  28990.,
      23014.,  26302.,  29686.,  33166.,  40581.,  45657.,  50877.,  56241.,
      32374.,  35854.,  39430.,  43102.,  54621.,  59985.,  65493.,  71145.,
      41734.,  45406.,  49174.,  53038.,  46870.,  50734.,  54694.,  58750.,
      15162.,  16290.,  17450.,  18642.,  32932.,  35252.,  37636.,  40084.,
      36356.,  38804.,  41316.,  43892.,  58574.,  62342.,  66206.,  70166.,
      42596.,  45172.,  47812.,  50516.,  67934.,  71894.,  75950.,  80102.,
      48836.,  51540.,  54308.,  57140.,  53284.,  56116.,  59012.,  61972.,
      24935.,  26819.,  28751.,  30731.,  53782.,  57646.,  61606.,  65662.,
      60454.,  64510.,  68662.,  72910.,  96741.,  102969., 109341., 115857.,
      69814.,  74062.,  78406.,  82846.,  110781., 117297., 123957., 130761.,
      79174.,  83614.,  88150.,  92782.,  87382.,  92014.,  96742.,  101566.,
      26618.,  28002.,  29418.,  30866.,  55844.,  58676.,  61572.,  64532.,
      61316.,  64276.,  67300.,  70388.,  96014.,  100550., 105182., 109910.,
      67556.,  70644.,  73796.,  77012.,  105374., 110102., 114926., 119846.,
      73796.,  77012.,  80292.,  83636.,  80292.,  83636.,  87044.,  90516.,
      42119.,  44387.,  46703.,  49067.,  88150.,  92782.,  97510.,  102334.,
      97894.,  102718., 107638., 112654., 152901., 160281., 167805., 175473.,
      107254., 112270., 117382., 122590., 166941., 174609., 182421., 190377.,
      116614., 121822., 127126., 132526., 127894., 133294., 138790., 144382.,
      38074.,  39714.,  41386.,  43090.,  78756.,  82100.,  85508.,  88980.,
      86276.,  89748.,  93284.,  96884.,  133454., 138758., 144158., 149654.,
      92516.,  96116.,  99780.,  103508., 142814., 148310., 153902., 159590.,
      98756.,  102484., 106276., 110132., 107300., 111156., 115076., 119060.,
      56234.,  58194.,  60186.,  62210.,  116356., 120340., 124388., 128500.,
      123876., 127988., 132164., 136404., 191774., 198038., 204398., 210854.,
      132676., 136916., 141220., 145588., 204974., 211430., 217982., 224630.,
      141476., 145844., 150276., 154772., 150020., 154516., 159076., 163700.,
      15989.,  16841.,  17709.,  18593.,  32642.,  34378.,  36146.,  37946.,
      37938.,  39738.,  41570.,  43434.,  57967.,  60715.,  63511.,  66355.,
      39778.,  41642.,  43538.,  45466.,  60727.,  63571.,  66463.,  69403.,
      41618.,  43546.,  45506.,  47498.,  47426.,  49418.,  51442.,  53498.,
      32586.,  34418.,  36282.,  38178.,  66500.,  70228.,  74020.,  77876.,
      78116.,  81972.,  85892.,  89876.,  119294., 125174., 131150., 137222.,
      81796.,  85780.,  89828.,  93940.,  124814., 130886., 137054., 143318.,
      85476.,  89588.,  93764.,  98004.,  98116.,  102356., 106660., 111028.,
      60986.,  63138.,  65322.,  67538.,  124580., 128948., 133380., 137876.,
      136196., 140692., 145252., 149876., 208334., 215174., 222110., 229142.,
      142436., 147060., 151748., 156500., 217694., 224726., 231854., 239078.,
      148676., 153428., 158244., 163124., 161316., 166196., 171140., 176148.,
      93671.,  97091.,  100559., 104075., 191254., 198190., 205222., 212350.,
      210214., 217342., 224566., 231886., 321381., 332217., 343197., 354321.,
      219574., 226894., 234310., 241822., 335421., 346545., 357813., 369225.,
      228934., 236446., 244054., 251758., 249430., 257134., 264934., 272830.,
      72442.,  74850.,  77290.,  79762.,  147492., 152372., 157316., 162324.,
      161156., 166164., 171236., 176372., 245774., 253382., 261086., 268886.,
      167396., 172532., 177732., 182996., 255134., 262934., 270830., 278822.,
      173636., 178900., 184228., 189620., 188324., 193716., 199172., 204692.,
      110855., 114659., 118511., 122411., 225622., 233326., 241126., 249022.,
      247654., 255550., 263542., 271630., 377541., 389529., 401661., 413937.,
      257014., 265102., 273286., 281566., 391581., 403857., 416277., 428841.,
      266374., 274654., 283030., 291502., 289942., 298414., 306982., 315646.,
      83898.,  86562.,  89258.,  91986.,  170404., 175796., 181252., 186772.,
      186116., 191636., 197220., 202868., 283214., 291590., 300062., 308630.,
      192356., 198004., 203716., 209492., 292574., 301142., 309806., 318566.,
      198596., 204372., 210212., 216116., 215332., 221236., 227204., 233236.,
      128039., 132227., 136463., 140747., 259990., 268462., 277030., 285694.,
      285094., 293758., 302518., 311374., 433701., 446841., 460125., 473553.,
      294454., 303310., 312262., 321310., 447741., 461169., 474741., 488457.,
      303814., 312862., 322006., 331246., 330454., 339694., 349030., 358462.,
      95354.,  98274.,  101226., 104210., 193316., 199220., 205188., 211220.,
      211076., 217108., 223204., 229364., 320654., 329798., 339038., 348374.,
      217316., 223476., 229700., 235988., 330014., 339350., 348782., 358310.,
      223556., 229844., 236196., 242612., 242340., 248756., 255236., 261780.,
      139114., 142354., 145626., 148930., 282116., 288660., 295268., 301940.,
      299876., 306548., 313284., 320084., 455774., 465878., 476078., 486374.,
      308676., 315476., 322340., 329268., 468974., 479270., 489662., 500150.,
      317476., 324404., 331396., 338452., 336260., 343316., 350436., 357620.,
      31829.,  33321.,  34829.,  36353.,  64322.,  67338.,  70386.,  73466.,
      74738.,  77818.,  80930.,  84074.,  113167., 117835., 122551., 127315.,
      76578.,  79722.,  82898.,  86106.,  115927., 120691., 125503., 130363.,
      78418.,  81626.,  84866.,  88138.,  89346.,  92618.,  95922.,  99258.,
      64266.,  67378.,  70522.,  73698.,  129860., 136148., 142500., 148916.,
      151716., 158132., 164612., 171156., 229694., 239414., 249230., 259142.,
      155396., 161940., 168548., 175220., 235214., 245126., 255134., 265238.,
      159076., 165748., 172484., 179284., 181956., 188756., 195620., 202548.,
      118266., 121698., 125162., 128658., 239140., 246068., 253060., 260116.,
      260996., 268052., 275172., 282356., 395534., 406214., 416990., 427862.,
      267236., 274420., 281668., 288980., 404894., 415766., 426734., 437798.,
      273476., 280788., 288164., 295604., 296356., 303796., 311300., 318868.,
      179591., 184931., 190319., 195755., 363094., 373870., 384742., 395710.,
      397414., 408382., 419446., 430606., 602181., 618777., 635517., 652401.,
      406774., 417934., 429190., 440542., 616221., 633105., 650133., 667305.,
      416134., 427486., 438934., 450478., 451990., 463534., 475174., 486910.,
      129722., 133410., 137130., 140882., 262052., 269492., 276996., 284564.,
      285956., 293524., 301156., 308852., 432974., 444422., 455966., 467606.,
      292196., 299892., 307652., 315476., 442334., 453974., 465710., 477542.,
      298436., 306260., 314148., 322100., 323364., 331316., 339332., 347412.,
      196775., 202499., 208271., 214091., 397462., 409006., 420646., 432382.,
      434854., 446590., 458422., 470350., 658341., 676089., 693981., 712017.,
      444214., 456142., 468166., 480286., 672381., 690417., 708597., 726921.,
      453574., 465694., 477910., 490222., 492502., 504814., 517222., 529726.,
      141178., 145122., 149098., 153106., 284964., 292916., 300932., 309012.,
      310916., 318996., 327140., 335348., 470414., 482630., 494942., 507350.,
      317156., 325364., 333636., 341972., 479774., 492182., 504686., 517286.,
      323396., 331732., 340132., 348596., 350372., 358836., 367364., 375956.,
      213959., 220067., 226223., 232427., 431830., 444142., 456550., 469054.,
      472294., 484798., 497398., 510094., 714501., 733401., 752445., 771633.,
      481654., 494350., 507142., 520030., 728541., 747729., 767061., 786537.,
      491014., 503902., 516886., 529966., 533014., 546094., 559270., 572542.,
      152634., 156834., 161066., 165330., 307876., 316340., 324868., 333460.,
      335876., 344468., 353124., 361844., 507854., 520838., 533918., 547094.,
      342116., 350836., 359620., 368468., 517214., 530390., 543662., 557030.,
      348356., 357204., 366116., 375092., 377380., 386356., 395396., 404500.,
      221994., 226514., 231066., 235650., 447876., 456980., 466148., 475380.,
      475876., 485108., 494404., 503764., 719774., 733718., 747758., 761894.,
      484676., 494036., 503460., 512948., 732974., 747110., 761342., 775670.,
      493476., 502964., 512516., 522132., 522500., 532116., 541796., 551540.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      25.,     61.,     113.,    29.,     81.,     149.,    233.,
      82.,     218.,    386.,    586.,    258.,    458.,    690.,    954.,
      434.,    698.,    994.,    1322.,   485.,    633.,    797.,    977.,
      637.,    817.,    1013.,   1225.,   0.,      0.,      0.,      0.,
      125.,    305.,    501.,    713.,    149.,    361.,    589.,    833.,
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      1314.,   1898.,   2514.,   3162.,   1245.,   1553.,   1877.,   2217.,
      1397.,   1737.,   2093.,   2465.,   0.,      0.,      0.,      0.,
      298.,    722.,    1178.,   1666.,   602.,    1090.,   1610.,   2162.,
      2532.,   3572.,   4676.,   5844.,   3396.,   4564.,   5796.,   7092.,
      4260.,   5556.,   6916.,   8340.,   3306.,   3986.,   4698.,   5442.,
      3866.,   4610.,   5386.,   6194.,   0.,      0.,      0.,      0.,
      1818.,   2562.,   3338.,   4146.,   2122.,   2930.,   3770.,   4642.,
      6852.,   8532.,   10276.,  12084.,  7716.,   9524.,   11396.,  13332.,
      8580.,   10516.,  12516.,  14580.,  6106.,   7106.,   8138.,   9202.,
      6666.,   7730.,   8826.,   9954.,   0.,      0.,      0.,      0.,
      3439.,   4651.,   5911.,   7219.,   4279.,   5587.,   6943.,   8347.,
      12470.,  15182.,  17990.,  20894.,  14534.,  17438.,  20438.,  23534.,
      16598.,  19694.,  22886.,  26174.,  11023.,  12619.,  14263.,  15955.,
      12247.,  13939.,  15679.,  17467.,  0.,      0.,      0.,      0.,
      7034.,   7906.,   8810.,   9746.,   7850.,   8786.,   9754.,   10754.,
      18308.,  20244.,  22244.,  24308.,  20196.,  22260.,  24388.,  26580.,
      22084.,  24276.,  26532.,  28852.,  12858.,  13986.,  15146.,  16338.,
      13930.,  15122.,  16346.,  17602.,  0.,      0.,      0.,      0.,
      11114.,  12306.,  13530.,  14786.,  11930.,  13186.,  14474.,  15794.,
      27748.,  30324.,  32964.,  35668.,  29636.,  32340.,  35108.,  37940.,
      31524.,  34356.,  37252.,  40212.,  18218.,  19666.,  21146.,  22658.,
      19290.,  20802.,  22346.,  23922.,  0.,      0.,      0.,      0.,
      8141.,   8769.,   9413.,   10073.,  8677.,   9337.,   10013.,  10705.,
      19298.,  20650.,  22034.,  23450.,  20498.,  21914.,  23362.,  24842.,
      21698.,  23178.,  24690.,  26234.,  12077.,  12833.,  13605.,  14393.,
      12741.,  13529.,  14333.,  15153.,  0.,      0.,      0.,      0.,
      10821.,  11609.,  12413.,  13233.,  11357.,  12177.,  13013.,  13865.,
      25298.,  26970.,  28674.,  30410.,  26498.,  28234.,  30002.,  31802.,
      27698.,  29498.,  31330.,  33194.,  15397.,  16313.,  17245.,  18193.,
      16061.,  17009.,  17973.,  18953.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      149.,    361.,    589.,    833.,    941.,    1185.,   1445.,   1721.,
      1906.,   2426.,   2978.,   3562.,   3618.,   4202.,   4818.,   5466.,
      5330.,   5978.,   6658.,   7370.,   2933.,   3273.,   3629.,   4001.,
      3853.,   4225.,   4613.,   5017.,   0.,      0.,      0.,      0.,
      4109.,   4481.,   4869.,   5273.,   4901.,   5305.,   5725.,   6161.,
      10466.,  11306.,  12178.,  13082.,  12178.,  13082.,  14018.,  14986.,
      13890.,  14858.,  15858.,  16890.,  7533.,   8033.,   8549.,   9081.,
      8453.,   8985.,   9533.,   10097.,  0.,      0.,      0.,      0.,
      8266.,   9074.,   9914.,   10786.,  10106.,  10978.,  11882.,  12818.,
      21540.,  23348.,  25220.,  27156.,  25476.,  27412.,  29412.,  31476.,
      29412.,  31476.,  33604.,  35796.,  15882.,  16946.,  18042.,  19170.,
      17978.,  19106.,  20266.,  21458.,  0.,      0.,      0.,      0.,
      17466.,  18594.,  19754.,  20946.,  19306.,  20498.,  21722.,  22978.,
      41220.,  43668.,  46180.,  48756.,  45156.,  47732.,  50372.,  53076.,
      49092.,  51796.,  54564.,  57396.,  26362.,  27746.,  29162.,  30610.,
      28458.,  29906.,  31386.,  32898.,  0.,      0.,      0.,      0.,
      26911.,  28699.,  30535.,  32419.,  30055.,  31939.,  33871.,  35851.,
      64022.,  67886.,  71846.,  75902.,  70694.,  74750.,  78902.,  83150.,
      77366.,  81614.,  85958.,  90398.,  41407.,  43579.,  45799.,  48067.,
      44935.,  47203.,  49519.,  51883.,  0.,      0.,      0.,      0.,
      22682.,  23938.,  25226.,  26546.,  25034.,  26354.,  27706.,  29090.,
      52676.,  55380.,  58148.,  60980.,  57636.,  60468.,  63364.,  66324.,
      62596.,  65556.,  68580.,  71668.,  33114.,  34626.,  36170.,  37746.,
      35722.,  37298.,  38906.,  40546.,  0.,      0.,      0.,      0.,
      34442.,  36018.,  37626.,  39266.,  36794.,  38434.,  40106.,  41810.,
      77476.,  80820.,  84228.,  87700.,  82436.,  85908.,  89444.,  93044.,
      87396.,  90996.,  94660.,  98388.,  46154.,  47986.,  49850.,  51746.,
      48762.,  50658.,  52586.,  54546.,  0.,      0.,      0.,      0.,
      19805.,  20625.,  21461.,  22313.,  21109.,  21961.,  22829.,  23713.,
      44162.,  45898.,  47666.,  49466.,  46898.,  48698.,  50530.,  52394.,
      49634.,  51498.,  53394.,  55322.,  26045.,  26993.,  27957.,  28937.,
      27477.,  28457.,  29453.,  30465.,  0.,      0.,      0.,      0.,
      26325.,  27305.,  28301.,  29313.,  27629.,  28641.,  29669.,  30713.,
      57842.,  59898.,  61986.,  64106.,  60578.,  62698.,  64850.,  67034.,
      63314.,  65498.,  67714.,  69962.,  33205.,  34313.,  35437.,  36577.,
      34637.,  35777.,  36933.,  38105.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      293.,    697.,    1117.,   1553.,   1853.,   2289.,   2741.,   3209.,
      3730.,   4634.,   5570.,   6538.,   6978.,   7946.,   8946.,   9978.,
      10226.,  11258.,  12322.,  13418.,  5381.,   5913.,   6461.,   7025.,
      7069.,   7633.,   8213.,   8809.,   0.,      0.,      0.,      0.,
      8093.,   8657.,   9237.,   9833.,   9653.,   10249.,  10861.,  11489.,
      19970.,  21194.,  22450.,  23738.,  23218.,  24506.,  25826.,  27178.,
      26466.,  27818.,  29202.,  30618.,  13821.,  14513.,  15221.,  15945.,
      15509.,  16233.,  16973.,  17729.,  0.,      0.,      0.,      0.,
      16234.,  17426.,  18650.,  19906.,  19610.,  20866.,  22154.,  23474.,
      40548.,  43124.,  45764.,  48468.,  47556.,  50260.,  53028.,  55860.,
      54564.,  57396.,  60292.,  63252.,  28458.,  29906.,  31386.,  32898.,
      32090.,  33602.,  35146.,  36722.,  0.,      0.,      0.,      0.,
      33114.,  34626.,  36170.,  37746.,  36490.,  38066.,  39674.,  41314.,
      75588.,  78804.,  82084.,  85428.,  82596.,  85940.,  89348.,  92820.,
      89604.,  93076.,  96612.,  100212., 46618.,  48386.,  50186.,  52018.,
      50250.,  52082.,  53946.,  55842.,  0.,      0.,      0.,      0.,
      50383.,  52747.,  55159.,  57619.,  55831.,  58291.,  60799.,  63355.,
      115574., 120590., 125702., 130910., 126854., 132062., 137366., 142766.,
      138134., 143534., 149030., 154622., 71791.,  74539.,  77335.,  80179.,
      77623.,  80467.,  83359.,  86299.,  0.,      0.,      0.,      0.,
      38330.,  39970.,  41642.,  43346.,  42218.,  43922.,  45658.,  47426.,
      87044.,  90516.,  94052.,  97652.,  95076.,  98676.,  102340., 106068.,
      103108., 106836., 110628., 114484., 53370.,  55266.,  57194.,  59154.,
      57514.,  59474.,  61466.,  63490.,  0.,      0.,      0.,      0.,
      57770.,  59730.,  61722.,  63746.,  61658.,  63682.,  65738.,  67826.,
      127204., 131316., 135492., 139732., 135236., 139476., 143780., 148148.,
      143268., 147636., 152068., 156564., 74090.,  76306.,  78554.,  80834.,
      78234.,  80514.,  82826.,  85170.,  0.,      0.,      0.,      0.,
      31469.,  32481.,  33509.,  34553.,  33541.,  34585.,  35645.,  36721.,
      69026.,  71146.,  73298.,  75482.,  73298.,  75482.,  77698.,  79946.,
      77570.,  79818.,  82098.,  84410.,  40013.,  41153.,  42309.,  43481.,
      42213.,  43385.,  44573.,  45777.,  0.,      0.,      0.,      0.,
      41829.,  43001.,  44189.,  45393.,  43901.,  45105.,  46325.,  47561.,
      90386.,  92826.,  95298.,  97802.,  94658.,  97162.,  99698.,  102266.,
      98930.,  101498., 104098., 106730., 51013.,  52313.,  53629.,  54961.,
      53213.,  54545.,  55893.,  57257.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      43356.,   49020.,   54940.,   61116.,   6716.,    11100.,   15740.,
      20636.,   23992.,   33272.,   43064.,   53368.,   34872.,   45176.,
      55992.,   67320.,   69172.,   85396.,   102388.,  120148.,  64184.,
      75512.,   87352.,   99704.,   113140.,  130900.,  149428.,  168724.,
      93496.,   105848.,  118712.,  132088.,  112568.,  125944.,  139832.,
      154232.,  28796.,   35740.,   42940.,   50396.,   78392.,   92792.,
      107704.,  123128.,  89272.,   104696.,  120632.,  137080.,  166132.,
      190036.,  214708.,  240148.,  139064.,  155512.,  172472.,  189944.,
      240820.,  266260.,  292468.,  319444.,  188856.,  206328.,  224312.,
      242808.,  207928.,  226424.,  245432.,  264952.,  60538.,   72490.,
      84826.,   97546.,   152276.,  176948.,  202388.,  228596.,  180884.,
      207092.,  234068.,  261812.,  319662.,  360126.,  401742.,  444510.,
      255572.,  283316.,  311828.,  341108.,  431694.,  474462.,  518382.,
      563454.,  330260.,  359540.,  389588.,  420404.,  371156.,  401972.,
      433556.,  465908.,  120188.,  129180.,  138428.,  147932.,  261176.,
      279672.,  298680.,  318200.,  288440.,  307960.,  327992.,  348536.,
      464884.,  494932.,  525748.,  557332.,  338232.,  358776.,  379832.,
      401400.,  539572.,  571156.,  603508.,  636628.,  388024.,  409592.,
      431672.,  454264.,  423480.,  446072.,  469176.,  492792.,  197626.,
      212650.,  228058.,  243850.,  426452.,  457268.,  488852.,  521204.,
      479636.,  511988.,  545108.,  578996.,  767790.,  817470.,  868302.,
      920286.,  554324.,  588212.,  622868.,  658292.,  879822.,  931806.,
      984942.,  1039230., 629012.,  664436.,  700628.,  737588.,  694484.,
      731444.,  769172.,  807668.,  211580.,  222620.,  233916.,  245468.,
      443960.,  466552.,  489656.,  513272.,  487608.,  511224.,  535352.,
      559992.,  763636.,  799828.,  836788.,  874516.,  537400.,  562040.,
      587192.,  612856.,  838324.,  876052.,  914548.,  953812.,  587192.,
      612856.,  639032.,  665720.,  639032.,  665720.,  692920.,  720632.,
      334714.,  352810.,  371290.,  390154.,  700628.,  737588.,  775316.,
      813812.,  778388.,  816884.,  856148.,  896180.,  1215918., 1274814.,
      1334862., 1396062., 853076.,  893108.,  933908.,  975476.,  1327950.,
      1389150., 1451502., 1515006., 927764.,  969332.,  1011668., 1054772.,
      1017812., 1060916., 1104788., 1149428., 302972.,  316060.,  329404.,
      343004.,  626744.,  653432.,  680632.,  708344.,  686776.,  714488.,
      742712.,  771448.,  1062388., 1104724., 1147828., 1191700., 736568.,
      765304.,  794552.,  824312.,  1137076., 1180948., 1225588., 1270996.,
      786360.,  816120.,  846392.,  877176.,  854584.,  885368.,  916664.,
      948472.,  447932.,  463580.,  479484.,  495644.,  926904.,  958712.,
      991032.,  1023864., 986936.,  1019768., 1053112., 1086968., 1527988.,
      1578004., 1628788., 1680340., 1057208., 1091064., 1125432., 1160312.,
      1633396., 1684948., 1737268., 1790356., 1127480., 1162360., 1197752.,
      1233656., 1195704., 1231608., 1268024., 1304952., 127070.,  133870.,
      140798.,  147854.,  259420.,  273276.,  287388.,  301756.,  301724.,
      316092.,  330716.,  345596.,  461018.,  482954.,  505274.,  527978.,
      316380.,  331260.,  346396.,  361788.,  483002.,  505706.,  528794.,
      552266.,  331036.,  346428.,  362076.,  377980.,  377436.,  393340.,
      409500.,  425916.,  258876.,  273500.,  288380.,  303516.,  528312.,
      558072.,  588344.,  619128.,  621112.,  651896.,  683192.,  715000.,
      948532.,  995476.,  1043188., 1091668., 650424.,  682232.,  714552.,
      747384.,  992500.,  1040980., 1090228., 1140244., 679736.,  712568.,
      745912.,  779768.,  780728.,  814584.,  848952.,  883832.,  485756.,
      502940.,  520380.,  538076.,  992312.,  1027192., 1062584., 1098488.,
      1085112., 1121016., 1157432., 1194360., 1659892., 1714516., 1769908.,
      1826068., 1134904., 1171832., 1209272., 1247224., 1734580., 1790740.,
      1847668., 1905364., 1184696., 1222648., 1261112., 1300088., 1285688.,
      1324664., 1364152., 1404152., 745978.,  773290.,  800986.,  829066.,
      1523156., 1578548., 1634708., 1691636., 1674644., 1731572., 1789268.,
      1847732., 2560302., 2646846., 2734542., 2823390., 1749332., 1807796.,
      1867028., 1927028., 2672334., 2761182., 2851182., 2942334., 1824020.,
      1884020., 1944788., 2006324., 1987796., 2049332., 2111636., 2174708.,
      577148.,  596380.,  615868.,  635612.,  1175096., 1214072., 1253560.,
      1293560., 1284280., 1324280., 1364792., 1405816., 1958644., 2019412.,
      2080948., 2143252., 1334072., 1375096., 1416632., 1458680., 2033332.,
      2095636., 2158708., 2222548., 1383864., 1425912., 1468472., 1511544.,
      1501240., 1544312., 1587896., 1631992., 883066.,  913450.,  944218.,
      975370.,  1797332., 1858868., 1921172., 1984244., 1973396., 2036468.,
      2100308., 2164916., 3008430., 3104190., 3201102., 3299166., 2048084.,
      2112692., 2178068., 2244212., 3120462., 3218526., 3317742., 3418110.,
      2122772., 2188916., 2255828., 2323508., 2311124., 2378804., 2447252.,
      2516468., 668540.,  689820.,  711356.,  733148.,  1357880., 1400952.,
      1444536., 1488632., 1483448., 1527544., 1572152., 1617272., 2257396.,
      2324308., 2391988., 2460436., 1533240., 1578360., 1623992., 1670136.,
      2332084., 2400532., 2469748., 2539732., 1583032., 1629176., 1675832.,
      1723000., 1716792., 1763960., 1811640., 1859832., 1020154., 1053610.,
      1087450., 1121674., 2071508., 2139188., 2207636., 2276852., 2272148.,
      2341364., 2411348., 2482100., 3456558., 3561534., 3667662., 3774942.,
      2346836., 2417588., 2489108., 2561396., 3568590., 3675870., 3784302.,
      3893886., 2421524., 2493812., 2566868., 2640692., 2634452., 2708276.,
      2782868., 2858228., 759932.,  783260.,  806844.,  830684.,  1540664.,
      1587832., 1635512., 1683704., 1682616., 1730808., 1779512., 1828728.,
      2556148., 2629204., 2703028., 2777620., 1732408., 1781624., 1831352.,
      1881592., 2630836., 2705428., 2780788., 2856916., 1782200., 1832440.,
      1883192., 1934456., 1932344., 1983608., 2035384., 2087672., 1109692.,
      1135580., 1161724., 1188124., 2250424., 2302712., 2355512., 2408824.,
      2392376., 2445688., 2499512., 2553848., 3636148., 3716884., 3798388.,
      3880660., 2462648., 2516984., 2571832., 2627192., 3741556., 3823828.,
      3906868., 3990676., 2532920., 2588280., 2644152., 2700536., 2683064.,
      2739448., 2796344., 2853752., 253150.,  265070.,  277118.,  289294.,
      511580.,  535676.,  560028.,  584636.,  594844.,  619452.,  644316.,
      669436.,  900698.,  937994.,  975674.,  1013738., 609500.,  634620.,
      659996.,  685628.,  922682.,  960746.,  999194.,  1038026., 624156.,
      649788.,  675676.,  701820.,  711516.,  737660.,  764060.,  790716.,
      511036.,  535900.,  561020.,  586396.,  1032632., 1082872., 1133624.,
      1184888., 1207352., 1258616., 1310392., 1362680., 1827892., 1905556.,
      1983988., 2063188., 1236664., 1288952., 1341752., 1395064., 1871860.,
      1951060., 2031028., 2111764., 1265976., 1319288., 1373112., 1427448.,
      1448888., 1503224., 1558072., 1613432., 942716.,  970140.,  997820.,
      1025756., 1906232., 1961592., 2017464., 2073848., 2080952., 2137336.,
      2194232., 2251640., 3153652., 3238996., 3325108., 3411988., 2130744.,
      2188152., 2246072., 2304504., 3228340., 3315220., 3402868., 3491284.,
      2180536., 2238968., 2297912., 2357368., 2363448., 2422904., 2482872.,
      2543352., 1431418., 1474090., 1517146., 1560586., 2894036., 2980148.,
      3067028., 3154676., 3168404., 3256052., 3344468., 3433652., 4800942.,
      4933566., 5067342., 5202270., 3243092., 3332276., 3422228., 3512948.,
      4912974., 5047902., 5183982., 5321214., 3317780., 3408500., 3499988.,
      3592244., 3604436., 3696692., 3789716., 3883508., 1034108., 1063580.,
      1093308., 1123292., 2089016., 2148472., 2208440., 2268920., 2280120.,
      2340600., 2401592., 2463096., 3452404., 3543892., 3636148., 3729172.,
      2329912., 2391416., 2453432., 2515960., 3527092., 3620116., 3713908.,
      3808468., 2379704., 2442232., 2505272., 2568824., 2579000., 2642552.,
      2706616., 2771192., 1568506., 1614250., 1660378., 1706890., 3168212.,
      3260468., 3353492., 3447284., 3467156., 3560948., 3655508., 3750836.,
      5249070., 5390910., 5533902., 5678046., 3541844., 3637172., 3733268.,
      3830132., 5361102., 5505246., 5650542., 5796990., 3616532., 3713396.,
      3811028., 3909428., 3927764., 4026164., 4125332., 4225268., 1125500.,
      1157020., 1188796., 1220828., 2271800., 2335352., 2399416., 2463992.,
      2479288., 2543864., 2608952., 2674552., 3751156., 3848788., 3947188.,
      4046356., 2529080., 2594680., 2660792., 2727416., 3825844., 3925012.,
      4024948., 4125652., 2578872., 2645496., 2712632., 2780280., 2794552.,
      2862200., 2930360., 2999032., 1705594., 1754410., 1803610., 1853194.,
      3442388., 3540788., 3639956., 3739892., 3765908., 3865844., 3966548.,
      4068020., 5697198., 5848254., 6000462., 6153822., 3840596., 3942068.,
      4044308., 4147316., 5809230., 5962590., 6117102., 6272766., 3915284.,
      4018292., 4122068., 4226612., 4251092., 4355636., 4460948., 4567028.,
      1216892., 1250460., 1284284., 1318364., 2454584., 2522232., 2590392.,
      2659064., 2678456., 2747128., 2816312., 2886008., 4049908., 4153684.,
      4258228., 4363540., 2728248., 2797944., 2868152., 2938872., 4124596.,
      4229908., 4335988., 4442836., 2778040., 2848760., 2919992., 2991736.,
      3010104., 3081848., 3154104., 3226872., 1771452., 1807580., 1843964.,
      1880604., 3573944., 3646712., 3719992., 3793784., 3797816., 3871608.,
      3945912., 4020728., 5744308., 5855764., 5967988., 6080980., 3868088.,
      3942904., 4018232., 4094072., 5849716., 5962708., 6076468., 6190996.,
      3938360., 4014200., 4090552., 4167416., 4170424., 4247288., 4324664.,
      4402552.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x8x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      174.,     446.,     846.,     190.,     590.,     1118.,
      1774.,    540.,     1596.,    2908.,    4476.,    1884.,    3452.,
      5276.,    7356.,    3228.,    5308.,    7644.,    10236.,   3742.,
      4910.,    6206.,    7630.,    4926.,    6350.,    7902.,    9582.,
      0.,       0.,       0.,       0.,       830.,     2254.,    3806.,
      5486.,    990.,     2670.,    4478.,    6414.,    7260.,    10876.,
      14748.,   18876.,   8604.,    12732.,   17116.,   21756.,   9948.,
      14588.,   19484.,   24636.,   9662.,    12110.,   14686.,   17390.,
      10846.,   13550.,   16382.,   19342.,   0.,       0.,       0.,
      0.,       1980.,    5340.,    8956.,    12828.,   4348.,    8220.,
      12348.,   16732.,   19256.,   27512.,   36280.,   45560.,   26040.,
      35320.,   45112.,   55416.,   32824.,   43128.,   53944.,   65272.,
      25788.,   31196.,   36860.,   42780.,   30204.,   36124.,   42300.,
      48732.,   0.,       0.,       0.,       0.,       13820.,   19740.,
      25916.,   32348.,   16188.,   22620.,   29308.,   36252.,   53176.,
      66552.,   80440.,   94840.,   59960.,   74360.,   89272.,   104696.,
      66744.,   82168.,   98104.,   114552.,  47868.,   55836.,   64060.,
      72540.,   52284.,   60764.,   69500.,   78492.,   0.,       0.,
      0.,       0.,       26330.,   35978.,   46010.,   56426.,   32954.,
      43370.,   54170.,   65354.,   97108.,   118708.,  141076.,  164212.,
      113428.,  136564.,  160468.,  185140.,  129748.,  154420.,  179860.,
      206068.,  86618.,   99338.,   112442.,  125930.,  96314.,   109802.,
      123674.,  137930.,  0.,       0.,       0.,       0.,       55420.,
      62364.,   69564.,   77020.,   61884.,   69340.,   77052.,   85020.,
      144568.,  159992.,  175928.,  192376.,  159544.,  175992.,  192952.,
      210424.,  174520.,  191992.,  209976.,  228472.,  101756.,  110748.,
      119996.,  129500.,  110268.,  119772.,  129532.,  139548.,  0.,
      0.,       0.,       0.,       87740.,   97244.,   107004.,  117020.,
      94204.,   104220.,  114492.,  125020.,  219448.,  239992.,  261048.,
      282616.,  234424.,  255992.,  278072.,  300664.,  249400.,  271992.,
      295096.,  318712.,  144316.,  155868.,  167676.,  179740.,  152828.,
      164892.,  177212.,  189788.,  0.,       0.,       0.,       0.,
      64510.,   69518.,   74654.,   79918.,   68766.,   74030.,   79422.,
      84942.,   153052.,  163836.,  174876.,  186172.,  162588.,  173884.,
      185436.,  197244.,  172124.,  183932.,  195996.,  208316.,  95870.,
      101902.,  108062.,  114350.,  101150.,  107438.,  113854.,  120398.,
      0.,       0.,       0.,       0.,       85790.,   92078.,   98494.,
      105038.,  90046.,   96590.,   103262.,  110062.,  200732.,  214076.,
      227676.,  241532.,  210268.,  224124.,  238236.,  252604.,  219804.,
      234172.,  248796.,  263676.,  122270.,  129582.,  137022.,  144590.,
      127550.,  135118.,  142814.,  150638.,  0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       990.,     2670.,
      4478.,    6414.,    7294.,    9230.,    11294.,   13486.,   14748.,
      18876.,   23260.,   27900.,   28380.,   33020.,   37916.,   43068.,
      42012.,   47164.,   52572.,   58236.,   23134.,   25838.,   28670.,
      31630.,   30462.,   33422.,   36510.,   39726.,   0.,       0.,
      0.,       0.,       32510.,   35470.,   38558.,   41774.,   38814.,
      42030.,   45374.,   48846.,   82908.,   89596.,   96540.,   103740.,
      96540.,   103740.,  111196.,  118908.,  110172.,  117884.,  125852.,
      134076.,  59774.,   63758.,   67870.,   72110.,   67102.,   71342.,
      75710.,   80206.,   0.,       0.,       0.,       0.,       65340.,
      71772.,   78460.,   85404.,   79996.,   86940.,   94140.,   101596.,
      170552.,  184952.,  199864.,  215288.,  201912.,  217336.,  233272.,
      249720.,  233272.,  249720.,  266680.,  284152.,  126012.,  134492.,
      143228.,  152220.,  142716.,  151708.,  160956.,  170460.,  0.,
      0.,       0.,       0.,       138620.,  147612.,  156860.,  166364.,
      153276.,  162780.,  172540.,  182556.,  327352.,  346872.,  366904.,
      387448.,  358712.,  379256.,  400312.,  421880.,  390072.,  411640.,
      433720.,  456312.,  209532.,  220572.,  231868.,  243420.,  226236.,
      237788.,  249596.,  261660.,  0.,       0.,       0.,       0.,
      213530.,  227786.,  242426.,  257450.,  238586.,  253610.,  269018.,
      284810.,  508372.,  539188.,  570772.,  603124.,  561556.,  593908.,
      627028.,  660916.,  614740.,  648628.,  683284.,  718708.,  329114.,
      346442.,  364154.,  382250.,  357242.,  375338.,  393818.,  412682.,
      0.,       0.,       0.,       0.,       180220.,  190236.,  200508.,
      211036.,  198972.,  209500.,  220284.,  231324.,  418744.,  440312.,
      462392.,  484984.,  458296.,  480888.,  503992.,  527608.,  497848.,
      521464.,  545592.,  570232.,  263420.,  275484.,  287804.,  300380.,
      284220.,  296796.,  309628.,  322716.,  0.,       0.,       0.,
      0.,       273980.,  286556.,  299388.,  312476.,  292732.,  305820.,
      319164.,  332764.,  616504.,  643192.,  670392.,  698104.,  656056.,
      683768.,  711992.,  740728.,  695608.,  724344.,  753592.,  783352.,
      367420.,  382044.,  396924.,  412060.,  388220.,  403356.,  418748.,
      434396.,  0.,       0.,       0.,       0.,       157630.,  164174.,
      170846.,  177646.,  168030.,  174830.,  181758.,  188814.,  351580.,
      365436.,  379548.,  393916.,  373404.,  387772.,  402396.,  417276.,
      395228.,  410108.,  425244.,  440636.,  207422.,  214990.,  222686.,
      230510.,  218846.,  226670.,  234622.,  242702.,  0.,       0.,
      0.,       0.,       209630.,  217454.,  225406.,  233486.,  220030.,
      228110.,  236318.,  244654.,  460700.,  477116.,  493788.,  510716.,
      482524.,  499452.,  516636.,  534076.,  504348.,  521788.,  539484.,
      557436.,  264542.,  273390.,  282366.,  291470.,  275966.,  285070.,
      294302.,  303662.,  0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       1950.,    5166.,    8510.,    11982.,
      14398.,   17870.,   21470.,   25198.,   28956.,   36156.,   43612.,
      51324.,   54876.,   62588.,   70556.,   78780.,   80796.,   89020.,
      97500.,   106236.,  42526.,   46766.,   51134.,   55630.,   55998.,
      60494.,   65118.,   69870.,   0.,       0.,       0.,       0.,
      64190.,   68686.,   73310.,   78062.,   76638.,   81390.,   86270.,
      91278.,   158556.,  168316.,  178332.,  188604.,  184476.,  194748.,
      205276.,  216060.,  210396.,  221180.,  232220.,  243516.,  109886.,
      115406.,  121054.,  126830.,  123358.,  129134.,  135038.,  141070.,
      0.,       0.,       0.,       0.,       128700.,  138204.,  147964.,
      157980.,  155644.,  165660.,  175932.,  186460.,  321848.,  342392.,
      363448.,  385016.,  377784.,  399352.,  421432.,  444024.,  433720.,
      456312.,  479416.,  503032.,  226236.,  237788.,  249596.,  261660.,
      255228.,  267292.,  279612.,  292188.,  0.,       0.,       0.,
      0.,       263420.,  275484.,  287804.,  300380.,  290364.,  302940.,
      315772.,  328860.,  601528.,  627192.,  653368.,  680056.,  657464.,
      684152.,  711352.,  739064.,  713400.,  741112.,  769336.,  798072.,
      371196.,  385308.,  399676.,  414300.,  400188.,  414812.,  429692.,
      444828.,  0.,       0.,       0.,       0.,       400730.,  419594.,
      438842.,  458474.,  444218.,  463850.,  483866.,  504266.,  919636.,
      959668.,  1000468., 1042036., 1009684., 1051252., 1093588., 1136692.,
      1099732., 1142836., 1186708., 1231348., 571610.,  593546.,  615866.,
      638570.,  618170.,  640874.,  663962.,  687434.,  0.,       0.,
      0.,       0.,       305020.,  318108.,  331452.,  345052.,  336060.,
      349660.,  363516.,  377628.,  692920.,  720632.,  748856.,  777592.,
      757048.,  785784.,  815032.,  844792.,  821176.,  850936.,  881208.,
      911992.,  425084.,  440220.,  455612.,  471260.,  458172.,  473820.,
      489724.,  505884.,  0.,       0.,       0.,       0.,       460220.,
      475868.,  491772.,  507932.,  491260.,  507420.,  523836.,  540508.,
      1013560., 1046392., 1079736., 1113592., 1077688., 1111544., 1145912.,
      1180792., 1141816., 1176696., 1212088., 1247992., 590524.,  608220.,
      626172.,  644380.,  623612.,  641820.,  660284.,  679004.,  0.,
      0.,       0.,       0.,       250750.,  258830.,  267038.,  275374.,
      267294.,  275630.,  284094.,  292686.,  550108.,  567036.,  584220.,
      601660.,  584220.,  601660.,  619356.,  637308.,  618332.,  636284.,
      654492.,  672956.,  318974.,  328078.,  337310.,  346670.,  336542.,
      345902.,  355390.,  365006.,  0.,       0.,       0.,       0.,
      333470.,  342830.,  352318.,  361934.,  350014.,  359630.,  369374.,
      379246.,  720668.,  740156.,  759900.,  779900.,  754780.,  774780.,
      795036.,  815548.,  788892.,  809404.,  830172.,  851196.,  406814.,
      417198.,  427710.,  438350.,  424382.,  435022.,  445790.,  456686.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.};
  const std::array<int, 4> in_shape = {{3, 10, 8, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      7.,    20.,   23.,   44.,   39.,   68.,   55.,   92.,   71.,   80.,
      24.,   60.,   76.,   133.,  108.,  181.,  140.,  229.,  172.,  200.,
      59.,   140.,  156.,  268.,  208.,  346.,  260.,  424.,  312.,  340.,
      116.,  265.,  304.,  507.,  382.,  624.,  460.,  741.,  538.,  595.,
      179.,  380.,  416.,  658.,  468.,  736.,  520.,  814.,  572.,  620.,
      296.,  625.,  694.,  1092., 772.,  1209., 850.,  1326., 928.,  1015.,
      299.,  620.,  676.,  1048., 728.,  1126., 780.,  1204., 832.,  900.,
      476.,  985.,  1084., 1677., 1162., 1794., 1240., 1911., 1318., 1435.,
      419.,  860.,  936.,  1438., 988.,  1516., 1040., 1594., 1092., 1180.,
      604.,  1240., 1316., 2023., 1388., 2131., 1460., 2239., 1532., 1620.,
      182.,  370.,  423.,  644.,  439.,  668.,  455.,  692.,  471.,  530.,
      374.,  760.,  876.,  1333., 908.,  1381., 940.,  1429., 972.,  1100.,
      659.,  1340., 1456., 2218., 1508., 2296., 1560., 2374., 1612., 1740.,
      1016., 2065., 2254., 3432., 2332., 3549., 2410., 3666., 2488., 2695.,
      779.,  1580., 1716., 2608., 1768., 2686., 1820., 2764., 1872., 2020.,
      1196., 2425., 2644., 4017., 2722., 4134., 2800., 4251., 2878., 3115.,
      899.,  1820., 1976., 2998., 2028., 3076., 2080., 3154., 2132., 2300.,
      1376., 2785., 3034., 4602., 3112., 4719., 3190., 4836., 3268., 3535.,
      1019., 2060., 2236., 3388., 2288., 3466., 2340., 3544., 2392., 2580.,
      1454., 2940., 3116., 4723., 3188., 4831., 3260., 4939., 3332., 3520.,
      357.,  720.,  823.,  1244., 839.,  1268., 855.,  1292., 871.,  980.,
      724.,  1460., 1676., 2533., 1708., 2581., 1740., 2629., 1772., 2000.,
      1259., 2540., 2756., 4168., 2808., 4246., 2860., 4324., 2912., 3140.,
      1916., 3865., 4204., 6357., 4282., 6474., 4360., 6591., 4438., 4795.,
      1379., 2780., 3016., 4558., 3068., 4636., 3120., 4714., 3172., 3420.,
      2096., 4225., 4594., 6942., 4672., 7059., 4750., 7176., 4828., 5215.,
      1499., 3020., 3276., 4948., 3328., 5026., 3380., 5104., 3432., 3700.,
      2276., 4585., 4984., 7527., 5062., 7644., 5140., 7761., 5218., 5635.,
      1619., 3260., 3536., 5338., 3588., 5416., 3640., 5494., 3692., 3980.,
      2304., 4640., 4916., 7423., 4988., 7531., 5060., 7639., 5132., 5420.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,   2.,   5.,    8.,    14.,   14.,   19.,   12.,  15.,   0.,
      6.,   7.,   20.,   23.,   44.,   39.,   44.,   27.,  30.,   0.,
      15.,  20.,  52.,   64.,   115.,  96.,   112.,  66.,  75.,   0.,
      40.,  45.,  112.,  124.,  220.,  176.,  192.,  111., 120.,  0.,
      72.,  84.,  201.,  228.,  393.,  306.,  339.,  192., 210.,  0.,
      106., 117., 256.,  280.,  454.,  332.,  360.,  195., 210.,  0.,
      161., 172., 376.,  400.,  649.,  472.,  500.,  270., 285.,  0.,
      112., 119., 254.,  269.,  428.,  305.,  322.,  171., 180.,  0.,
      147., 154., 329.,  344.,  548.,  390.,  407.,  216., 225.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      10.,  20.,  41.,   62.,   95.,   68.,   91.,   48.,  60.,   0.,
      60.,  70.,  146.,  167.,  260.,  183.,  206.,  108., 120.,  0.,
      123., 146., 304.,  352.,  547.,  384.,  436.,  228., 255.,  0.,
      238., 261., 544.,  592.,  922.,  644.,  696.,  363., 390.,  0.,
      369., 408., 849.,  930.,  1446., 1008., 1095., 570., 615.,  0.,
      304., 333., 688.,  748.,  1156., 800.,  864.,  447., 480.,  0.,
      449., 478., 988.,  1048., 1621., 1120., 1184., 612., 645.,  0.,
      256., 272., 560.,  593.,  914.,  629.,  664.,  342., 360.,  0.,
      336., 352., 725.,  758.,  1169., 804.,  839.,  432., 450.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.,
      19.,  38.,  77.,   116.,  176.,  122.,  163.,  84.,  105.,  0.,
      114., 133., 272.,  311.,  476.,  327.,  368.,  189., 210.,  0.,
      231., 272., 556.,  640.,  979.,  672.,  760.,  390., 435.,  0.,
      436., 477., 976.,  1060., 1624., 1112., 1200., 615., 660.,  0.,
      666., 732., 1497., 1632., 2499., 1710., 1851., 948., 1020., 0.,
      502., 549., 1120., 1216., 1858., 1268., 1368., 699., 750.,  0.,
      737., 784., 1600., 1696., 2593., 1768., 1868., 954., 1005., 0.,
      400., 425., 866.,  917.,  1400., 953.,  1006., 513., 540.,  0.,
      525., 550., 1121., 1172., 1790., 1218., 1271., 648., 675.,  0.,
      0.,   0.,   0.,    0.,    0.,    0.,    0.,    0.,   0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      41.,    128.,   148.,   295.,   272.,   481.,   396.,   667.,   520.,
      588.,   152.,   396.,   516.,   920.,   764.,   1292.,  1012.,  1664.,
      1260.,  1476.,  412.,   996.,   1116.,  1940.,  1524.,  2552.,  1932.,
      3164.,  2340.,  2556.,  823.,   1904.,  2204.,  3705.,  2816.,  4623.,
      3428.,  5541.,  4040.,  4484.,  1352.,  2876.,  3156.,  5000.,  3564.,
      5612.,  3972.,  6224.,  4380.,  4756.,  2233.,  4724.,  5264.,  8295.,
      5876.,  9213.,  6488.,  10131., 7100.,  7784.,  2292.,  4756.,  5196.,
      8060.,  5604.,  8672.,  6012.,  9284.,  6420.,  6956.,  3643.,  7544.,
      8324.,  12885., 8936.,  13803., 9548.,  14721., 10160., 11084., 3232.,
      6636.,  7236.,  11120., 7644.,  11732., 8052.,  12344., 8460.,  9156.,
      4692.,  9636.,  10236., 15740., 10804., 16592., 11372., 17444., 11940.,
      12636., 1391.,  2828.,  3248.,  4945.,  3372.,  5131.,  3496.,  5317.,
      3620.,  4088.,  2852.,  5796.,  6716.,  10220., 6964.,  10592., 7212.,
      10964., 7460.,  8476.,  5112.,  10396., 11316., 17240., 11724., 17852.,
      12132., 18464., 12540., 13556., 7873.,  16004., 17504., 26655., 18116.,
      27573., 18728., 28491., 19340., 20984., 6052.,  12276., 13356., 20300.,
      13764., 20912., 14172., 21524., 14580., 15756., 9283.,  18824., 20564.,
      31245., 21176., 32163., 21788., 33081., 22400., 24284., 6992.,  14156.,
      15396., 23360., 15804., 23972., 16212., 24584., 16620., 17956., 10693.,
      21644., 23624., 35835., 24236., 36753., 24848., 37671., 25460., 27584.,
      7932.,  16036., 17436., 26420., 17844., 27032., 18252., 27644., 18660.,
      20156., 11392., 23036., 24436., 37040., 25004., 37892., 25572., 38744.,
      26140., 27636., 2741.,  5528.,  6348.,  9595.,  6472.,  9781.,  6596.,
      9967.,  6720.,  7588.,  5552.,  11196., 12916., 19520., 13164., 19892.,
      13412., 20264., 13660., 15476., 9812.,  19796., 21516., 32540., 21924.,
      33152., 22332., 33764., 22740., 24556., 14923., 30104., 32804., 49605.,
      33416., 50523., 34028., 51441., 34640., 37484., 10752., 21676., 23556.,
      35600., 23964., 36212., 24372., 36824., 24780., 26756., 16333., 32924.,
      35864., 54195., 36476., 55113., 37088., 56031., 37700., 40784., 11692.,
      23556., 25596., 38660., 26004., 39272., 26412., 39884., 26820., 28956.,
      17743., 35744., 38924., 58785., 39536., 59703., 40148., 60621., 40760.,
      44084., 12632., 25436., 27636., 41720., 28044., 42332., 28452., 42944.,
      28860., 31156., 18092., 36436., 38636., 58340., 39204., 59192., 39772.,
      60044., 40340., 42636.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,    11.,   28.,    48.,    85.,    92.,    128.,   83.,   105.,  0.,
      35.,   41.,   128.,   148.,   295.,   272.,   308.,   193.,  215.,  0.,
      88.,   124.,  340.,   428.,   788.,   676.,   796.,   476.,  544.,  0.,
      268.,  304.,  780.,   868.,   1568.,  1276.,  1396.,  816.,  884.,  0.,
      489.,  579.,  1416.,  1620.,  2829.,  2232.,  2484.,  1419., 1557., 0.,
      784.,  868.,  1908.,  2092.,  3404.,  2500.,  2716.,  1476., 1592., 0.,
      1204., 1288., 2828.,  3012.,  4904.,  3580.,  3796.,  2056., 2172., 0.,
      851.,  905.,  1936.,  2052.,  3271.,  2336.,  2468.,  1313., 1383., 0.,
      1121., 1175., 2516.,  2632.,  4201.,  2996.,  3128.,  1663., 1733., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      59.,   137.,  280.,   444.,   679.,   488.,   668.,   353.,  447.,  0.,
      449.,  527.,  1100.,  1264.,  1969.,  1388.,  1568.,  823.,  917.,  0.,
      916.,  1096., 2284.,  2660.,  4136.,  2908.,  3316.,  1736., 1948., 0.,
      1816., 1996., 4164.,  4540.,  7076.,  4948.,  5356.,  2796., 3008., 0.,
      2811., 3117., 6492.,  7128.,  11091., 7740.,  8424.,  4389., 4743., 0.,
      2332., 2560., 5292.,  5764.,  8912.,  6172.,  6676.,  3456., 3716., 0.,
      3472., 3700., 7652.,  8124.,  12572., 8692.,  9196.,  4756., 5016., 0.,
      1985., 2111., 4348.,  4608.,  7105.,  4892.,  5168.,  2663., 2805., 0.,
      2615., 2741., 5648.,  5908.,  9115.,  6272.,  6548.,  3373., 3515., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.,
      113.,  263.,  532.,   840.,   1273.,  884.,   1208.,  623.,  789.,  0.,
      863.,  1013., 2072.,  2380.,  3643.,  2504.,  2828.,  1453., 1619., 0.,
      1744., 2068., 4228.,  4892.,  7484.,  5140.,  5836.,  2996., 3352., 0.,
      3364., 3688., 7548.,  8212.,  12584., 8620.,  9316.,  4776., 5132., 0.,
      5133., 5655., 11568., 12636., 19353., 13248., 14364., 7359., 7929., 0.,
      3880., 4252., 8676.,  9436.,  14420., 9844.,  10636., 5436., 5840., 0.,
      5740., 6112., 12476., 13236., 20240., 13804., 14596., 7456., 7860., 0.,
      3119., 3317., 6760.,  7164.,  10939., 7448.,  7868.,  4013., 4227., 0.,
      4109., 4307., 8780.,  9184.,  14029., 9548.,  9968.,  5083., 5297., 0.,
      0.,    0.,    0.,     0.,     0.,     0.,     0.,     0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      270.,    900.,    1044.,   2138.,   2020.,   3602.,   2996.,   5066.,
      3972.,   4500.,   1060.,   2840.,   3768.,   6796.,   5720.,   9724.,
      7672.,   12652.,  9624.,   11320.,  3060.,   7480.,   8408.,   14716.,
      11640.,  19564.,  14872.,  24412.,  18104.,  19800.,  6170.,   14380.,
      16732.,  28254.,  21580.,  35526.,  26428.,  42798.,  31276.,  34780.,
      10500.,  22360.,  24568.,  38956.,  27800.,  43804.,  31032.,  48652.,
      34264.,  37240.,  17330.,  36700.,  40972.,  64614.,  45820.,  71886.,
      50668.,  79158.,  55516.,  60940.,  17940.,  37240.,  40728.,  63196.,
      43960.,  68044.,  47192.,  72892.,  50424.,  54680.,  28490.,  59020.,
      65212.,  100974., 70060.,  108246., 74908.,  115518., 79756.,  87100.,
      25380.,  52120.,  56888.,  87436.,  60120.,  92284.,  63352.,  97132.,
      66584.,  72120.,  36980.,  75960.,  80728.,  124156., 85240.,  130924.,
      89752.,  137692., 94264.,  99800.,  10870.,  22100.,  25444.,  38738.,
      26420.,  40202.,  27396.,  41666.,  28372.,  32100.,  22260.,  45240.,
      52568.,  79996.,  54520.,  82924.,  56472.,  85852.,  58424.,  66520.,
      40260.,  81880.,  89208.,  135916., 92440.,  140764., 95672.,  145612.,
      98904.,  107000., 61970.,  125980., 137932., 210054., 142780., 217326.,
      147628., 224598., 152476., 165580., 47700.,  96760.,  105368., 160156.,
      108600., 165004., 111832., 169852., 115064., 124440., 73130.,  148300.,
      162172., 246414., 167020., 253686., 171868., 260958., 176716., 191740.,
      55140.,  111640., 121528., 184396., 124760., 189244., 127992., 194092.,
      131224., 141880., 84290.,  170620., 186412., 282774., 191260., 290046.,
      196108., 297318., 200956., 217900., 62580.,  126520., 137688., 208636.,
      140920., 213484., 144152., 218332., 147384., 159320., 90180.,  182360.,
      193528., 293356., 198040., 300124., 202552., 306892., 207064., 219000.,
      21470.,  43300.,  49844.,  75338.,  50820.,  76802.,  51796.,  78266.,
      52772.,  59700.,  43460.,  87640.,  101368., 153196., 103320., 156124.,
      105272., 159052., 107224., 121720., 77460.,  156280., 170008., 257116.,
      173240., 261964., 176472., 266812., 179704., 194200., 117770., 237580.,
      259132., 391854., 263980., 399126., 268828., 406398., 273676., 296380.,
      84900.,  171160., 186168., 281356., 189400., 286204., 192632., 291052.,
      195864., 211640., 128930., 259900., 283372., 428214., 288220., 435486.,
      293068., 442758., 297916., 322540., 92340.,  186040., 202328., 305596.,
      205560., 310444., 208792., 315292., 212024., 229080., 140090., 282220.,
      307612., 464574., 312460., 471846., 317308., 479118., 322156., 348700.,
      99780.,  200920., 218488., 329836., 221720., 334684., 224952., 339532.,
      228184., 246520., 143380., 288760., 306328., 462556., 310840., 469324.,
      315352., 476092., 319864., 338200.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x1x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     70.,     180.,    324.,   578.,    660.,    932.,    614.,
      782.,    0.,      230.,    270.,   900.,    1044.,   2138.,   2020.,
      2292.,   1454.,   1622.,   0.,     580.,    852.,    2424.,   3096.,
      5788.,   5048.,   5976.,   3604.,  4132.,   0.,      1940.,   2212.,
      5784.,   6456.,   11788.,  9688.,  10616.,  6244.,   6772.,   0.,
      3570.,   4266.,   10572.,  12156., 21390.,  17004.,  18972.,  10890.,
      11970.,  0.,      6020.,   6676.,  14712.,  16152.,  26332.,  19384.,
      21080.,  11476.,  12388.,  0.,     9300.,   9956.,   21912.,  23352.,
      38092.,  27864.,  29560.,  16036., 16948.,  0.,      6630.,   7054.,
      15108.,  16020.,  25562.,  18276., 19316.,  10286.,  10838.,  0.,
      8750.,   9174.,   19668.,  20580., 32882.,  23476.,  24516.,  13046.,
      13598.,  0.,      0.,      0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,     390.,    1006.,   2052.,   3348.,
      5114.,   3684.,   5108.,   2702.,  3446.,   0.,      3470.,   4086.,
      8532.,   9828.,   15314.,  10804., 12228.,  6422.,   7166.,   0.,
      7060.,   8484.,   17688.,  20664., 32140.,  22616.,  25848.,  13540.,
      15220.,  0.,      14180.,  15604., 32568.,  35544.,  55420.,  38776.,
      42008.,  21940.,  23620.,  0.,     21930.,  24354.,  50748.,  55788.,
      86838.,  60636.,  66060.,  34434., 37242.,  0.,      18260.,  20068.,
      41496.,  45240.,  69964.,  48472., 52472.,  27172.,  29236.,  0.,
      27300.,  29108.,  60216.,  63960., 99004.,  68472.,  72472.,  37492.,
      39556.,  0.,      15630.,  16630., 34260.,  36324.,  56018.,  38580.,
      40772.,  21014.,  22142.,  0.,     20630.,  21630.,  44580.,  46644.,
      71978.,  49540.,  51732.,  26654., 27782.,  0.,      0.,      0.,
      0.,      0.,      0.,      0.,     0.,      0.,      0.,      0.,
      750.,    1942.,   3924.,   6372.,  9650.,   6708.,   9284.,   4790.,
      6110.,   0.,      6710.,   7902.,  16164.,  18612.,  28490.,  19588.,
      22164.,  11390.,  12710.,  0.,     13540.,  16116.,  32952.,  38232.,
      58492.,  40184.,  45720.,  23476., 26308.,  0.,      26420.,  28996.,
      59352.,  64632.,  99052.,  67864., 73400.,  37636.,  40468.,  0.,
      40290.,  44442.,  90924.,  99420., 152286., 104268., 113148., 57978.,
      62514.,  0.,      30500.,  33460., 68280.,  74328.,  113596., 77560.,
      83864.,  42868.,  46084.,  0.,     45300.,  48260.,  98520.,  104568.,
      159916., 109080., 115384., 58948., 62164.,  0.,      24630.,  26206.,
      53412.,  56628.,  86474.,  58884., 62228.,  31742.,  33446.,  0.,
      32510.,  34086.,  69492.,  72708., 111074., 75604.,  78948.,  40262.,
      41966.,  0.,      0.,      0.,     0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 1}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      13.,    28.,    48.,    80.,    56.,    92.,    119.,   176.,   116.,
      156.,   209.,   272.,   176.,   220.,   299.,   368.,   236.,   284.,
      268.,   320.,   56.,    96.,    156.,   240.,   212.,   304.,   388.,
      532.,   332.,   432.,   568.,   724.,   452.,   560.,   748.,   916.,
      572.,   688.,   676.,   800.,   176.,   236.,   436.,   560.,   492.,
      624.,   868.,   1072.,  692.,   832.,   1168.,  1384.,  892.,   1040.,
      1468.,  1696.,  1092.,  1248.,  1196.,  1360.,  359.,   464.,   844.,
      1060.,  988.,   1216.,  1677.,  2028.,  1288.,  1528.,  2127.,  2496.,
      1588.,  1840.,  2577.,  2964.,  1888.,  2152.,  2104.,  2380.,  636.,
      716.,   1356.,  1520.,  1492.,  1664.,  2368.,  2632.,  1692.,  1872.,
      2668.,  2944.,  1892.,  2080.,  2968.,  3256.,  2092.,  2288.,  2276.,
      2480.,  1049.,  1184.,  2224.,  2500.,  2488.,  2776.,  3927.,  4368.,
      2788.,  3088.,  4377.,  4836.,  3088.,  3400.,  4827.,  5304.,  3388.,
      3712.,  3724.,  4060.,  1096.,  1196.,  2276.,  2480.,  2492.,  2704.,
      3868.,  4192.,  2692.,  2912.,  4168.,  4504.,  2892.,  3120.,  4468.,
      4816.,  3092.,  3328.,  3356.,  3600.,  1739.,  1904.,  3604.,  3940.,
      3988.,  4336.,  6177.,  6708.,  4288.,  4648.,  6627.,  7176.,  4588.,
      4960.,  7077.,  7644.,  4888.,  5272.,  5344.,  5740.,  1556.,  1676.,
      3196.,  3440.,  3492.,  3744.,  5368.,  5752.,  3692.,  3952.,  5668.,
      6064.,  3892.,  4160.,  5968.,  6376.,  4092.,  4368.,  4436.,  4720.,
      2276.,  2416.,  4676.,  4960.,  4972.,  5264.,  7648.,  8092.,  5252.,
      5552.,  8068.,  8524.,  5532.,  5840.,  8488.,  8956.,  5812.,  6128.,
      6156.,  6480.,  663.,   728.,   1348.,  1480.,  1556.,  1692.,  2369.,
      2576.,  1616.,  1756.,  2459.,  2672.,  1676.,  1820.,  2549.,  2768.,
      1736.,  1884.,  1968.,  2120.,  1356.,  1496.,  2756.,  3040.,  3212.,
      3504.,  4888.,  5332.,  3332.,  3632.,  5068.,  5524.,  3452.,  3760.,
      5248.,  5716.,  3572.,  3888.,  4076.,  4400.,  2476.,  2636.,  5036.,
      5360.,  5492.,  5824.,  8368.,  8872.,  5692.,  6032.,  8668.,  9184.,
      5892.,  6240.,  8968.,  9496.,  6092.,  6448.,  6596.,  6960.,  3809.,
      4064.,  7744.,  8260.,  8488.,  9016.,  12927., 13728., 8788.,  9328.,
      13377., 14196., 9088.,  9640.,  13827., 14664., 9388.,  9952.,  10204.,
      10780., 2936.,  3116.,  5956.,  6320.,  6492.,  6864.,  9868.,  10432.,
      6692.,  7072.,  10168., 10744., 6892.,  7280.,  10468., 11056., 7092.,
      7488.,  7676.,  8080.,  4499.,  4784.,  9124.,  9700.,  9988.,  10576.,
      15177., 16068., 10288., 10888., 15627., 16536., 10588., 11200., 16077.,
      17004., 10888., 11512., 11824., 12460., 3396.,  3596.,  6876.,  7280.,
      7492.,  7904.,  11368., 11992., 7692.,  8112.,  11668., 12304., 7892.,
      8320.,  11968., 12616., 8092.,  8528.,  8756.,  9200.,  5189.,  5504.,
      10504., 11140., 11488., 12136., 17427., 18408., 11788., 12448., 17877.,
      18876., 12088., 12760., 18327., 19344., 12388., 13072., 13444., 14140.,
      3856.,  4076.,  7796.,  8240.,  8492.,  8944.,  12868., 13552., 8692.,
      9152.,  13168., 13864., 8892.,  9360.,  13468., 14176., 9092.,  9568.,
      9836.,  10320., 5576.,  5816.,  11276., 11760., 11972., 12464., 18148.,
      18892., 12252., 12752., 18568., 19324., 12532., 13040., 18988., 19756.,
      12812., 13328., 13556., 14080., 1313.,  1428.,  2648.,  2880.,  3056.,
      3292.,  4619.,  4976.,  3116.,  3356.,  4709.,  5072.,  3176.,  3420.,
      4799.,  5168.,  3236.,  3484.,  3668.,  3920.,  2656.,  2896.,  5356.,
      5840.,  6212.,  6704.,  9388.,  10132., 6332.,  6832.,  9568.,  10324.,
      6452.,  6960.,  9748.,  10516., 6572.,  7088.,  7476.,  8000.,  4776.,
      5036.,  9636.,  10160., 10492., 11024., 15868., 16672., 10692., 11232.,
      16168., 16984., 10892., 11440., 16468., 17296., 11092., 11648., 11996.,
      12560., 7259.,  7664.,  14644., 15460., 15988., 16816., 24177., 25428.,
      16288., 17128., 24627., 25896., 16588., 17440., 25077., 26364., 16888.,
      17752., 18304., 19180., 5236.,  5516.,  10556., 11120., 11492., 12064.,
      17368., 18232., 11692., 12272., 17668., 18544., 11892., 12480., 17968.,
      18856., 12092., 12688., 13076., 13680., 7949.,  8384.,  16024., 16900.,
      17488., 18376., 26427., 27768., 17788., 18688., 26877., 28236., 18088.,
      19000., 27327., 28704., 18388., 19312., 19924., 20860., 5696.,  5996.,
      11476., 12080., 12492., 13104., 18868., 19792., 12692., 13312., 19168.,
      20104., 12892., 13520., 19468., 20416., 13092., 13728., 14156., 14800.,
      8639.,  9104.,  17404., 18340., 18988., 19936., 28677., 30108., 19288.,
      20248., 29127., 30576., 19588., 20560., 29577., 31044., 19888., 20872.,
      21544., 22540., 6156.,  6476.,  12396., 13040., 13492., 14144., 20368.,
      21352., 13692., 14352., 20668., 21664., 13892., 14560., 20968., 21976.,
      14092., 14768., 15236., 15920., 8876.,  9216.,  17876., 18560., 18972.,
      19664., 28648., 29692., 19252., 19952., 29068., 30124., 19532., 20240.,
      29488., 30556., 19812., 20528., 20956., 21680.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,    4.,    3.,    8.,    8.,    20.,   16.,   32.,   29.,   56.,
      36.,   56.,   52.,   76.,   35.,   48.,   45.,   60.,   0.,    0.,
      11.,   24.,   13.,   28.,   48.,   80.,   56.,   92.,   119.,  176.,
      116.,  156.,  132.,  176.,  85.,   108.,  95.,   120.,  0.,    0.,
      28.,   60.,   44.,   80.,   132.,  208.,  172.,  256.,  328.,  460.,
      292.,  384.,  348.,  448.,  212.,  264.,  244.,  300.,  0.,    0.,
      108.,  160.,  124.,  180.,  332.,  448.,  372.,  496.,  688.,  880.,
      572.,  704.,  628.,  768.,  372.,  444.,  404.,  480.,  0.,    0.,
      201.,  288.,  243.,  336.,  612.,  804.,  708.,  912.,  1257., 1572.,
      1008., 1224., 1128., 1356., 651.,  768.,  717.,  840.,  0.,    0.,
      360.,  424.,  400.,  468.,  884.,  1024., 972.,  1120., 1588., 1816.,
      1172., 1328., 1276., 1440., 696.,  780.,  752.,  840.,  0.,    0.,
      560.,  644.,  600.,  688.,  1324., 1504., 1412., 1600., 2308., 2596.,
      1692., 1888., 1796., 2000., 976.,  1080., 1032., 1140., 0.,    0.,
      403.,  448.,  429.,  476.,  920.,  1016., 976.,  1076., 1559., 1712.,
      1116., 1220., 1180., 1288., 629.,  684.,  663.,  720.,  0.,    0.,
      533.,  588.,  559.,  616.,  1200., 1316., 1256., 1376., 2009., 2192.,
      1436., 1560., 1500., 1628., 799.,  864.,  833.,  900.,  0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      19.,   40.,   57.,   80.,   116.,  164.,  196.,  248.,  299.,  380.,
      216.,  272.,  304.,  364.,  161.,  192.,  207.,  240.,  0.,    0.,
      209.,  240.,  247.,  280.,  516.,  584.,  596.,  668.,  929.,  1040.,
      656.,  732.,  744.,  824.,  391.,  432.,  437.,  480.,  0.,    0.,
      424.,  492.,  512.,  584.,  1068., 1216., 1252., 1408., 1948., 2188.,
      1372., 1536., 1572., 1744., 824.,  912.,  928.,  1020., 0.,    0.,
      864.,  952.,  952.,  1044., 1988., 2176., 2172., 2368., 3388., 3688.,
      2372., 2576., 2572., 2784., 1344., 1452., 1448., 1560., 0.,    0.,
      1335., 1476., 1485., 1632., 3096., 3396., 3408., 3720., 5307., 5784.,
      3708., 4032., 4044., 4380., 2109., 2280., 2283., 2460., 0.,    0.,
      1116., 1216., 1228., 1332., 2540., 2752., 2772., 2992., 4288., 4624.,
      2972., 3200., 3220., 3456., 1668., 1788., 1796., 1920., 0.,    0.,
      1676., 1796., 1788., 1912., 3700., 3952., 3932., 4192., 6088., 6484.,
      4212., 4480., 4460., 4736., 2308., 2448., 2436., 2580., 0.,    0.,
      961.,  1024., 1023., 1088., 2108., 2240., 2236., 2372., 3449., 3656.,
      2376., 2516., 2512., 2656., 1295., 1368., 1365., 1440., 0.,    0.,
      1271., 1344., 1333., 1408., 2748., 2900., 2876., 3032., 4439., 4676.,
      3056., 3216., 3192., 3356., 1645., 1728., 1715., 1800., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      37.,   76.,   111.,  152.,  224.,  308.,  376.,  464.,  569.,  704.,
      396.,  488.,  556.,  652.,  287.,  336.,  369.,  420.,  0.,    0.,
      407.,  456.,  481.,  532.,  984.,  1088., 1136., 1244., 1739., 1904.,
      1196., 1308., 1356., 1472., 697.,  756.,  779.,  840.,  0.,    0.,
      820.,  924.,  980.,  1088., 2004., 2224., 2332., 2560., 3568., 3916.,
      2452., 2688., 2796., 3040., 1436., 1560., 1612., 1740., 0.,    0.,
      1620., 1744., 1780., 1908., 3644., 3904., 3972., 4240., 6088., 6496.,
      4172., 4448., 4516., 4800., 2316., 2460., 2492., 2640., 0.,    0.,
      2469., 2664., 2727., 2928., 5580., 5988., 6108., 6528., 9357., 9996.,
      6408., 6840., 6960., 7404., 3567., 3792., 3849., 4080., 0.,    0.,
      1872., 2008., 2056., 2196., 4196., 4480., 4572., 4864., 6988., 7432.,
      4772., 5072., 5164., 5472., 2640., 2796., 2840., 3000., 0.,    0.,
      2792., 2948., 2976., 3136., 6076., 6400., 6452., 6784., 9868., 10372.,
      6732., 7072., 7124., 7472., 3640., 3816., 3840., 4020., 0.,    0.,
      1519., 1600., 1617., 1700., 3296., 3464., 3496., 3668., 5339., 5600.,
      3636., 3812., 3844., 4024., 1961., 2052., 2067., 2160., 0.,    0.,
      2009., 2100., 2107., 2200., 4296., 4484., 4496., 4688., 6869., 7160.,
      4676., 4872., 4884., 5084., 2491., 2592., 2597., 2700., 0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,
      0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.,    0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      77.,     193.,    326.,    574.,    382.,    662.,    847.,    1291.,
      854.,    1166.,   1555.,   2047.,   1326.,   1670.,   2263.,   2803.,
      1798.,   2174.,   2046.,   2454.,   374.,    686.,    1092.,   1748.,
      1524.,   2244.,   2834.,   3962.,   2468.,   3252.,   4250.,   5474.,
      3412.,   4260.,   5666.,   6986.,   4356.,   5268.,   5172.,   6148.,
      1294.,   1766.,   3252.,   4228.,   3684.,   4724.,   6554.,   8162.,
      5268.,   6372.,   8930.,   10634.,  6852.,   8020.,   11306.,  13106.,
      8436.,   9668.,   9252.,   10548.,  2671.,   3499.,   6338.,   8042.,
      7466.,   9266.,   12741.,  15513.,  9842.,   11738.,  16305.,  19221.,
      12218.,  14210.,  19869.,  22929.,  14594.,  16682.,  16298.,  18482.,
      4934.,   5566.,   10532.,  11828.,  11604.,  12964.,  18434.,  20522.,
      13188.,  14612.,  20810.,  22994.,  14772.,  16260.,  23186.,  25466.,
      16356.,  17908.,  17812.,  19428.,  8131.,   9199.,   17258.,  19442.,
      19346.,  21626.,  30561.,  34053.,  21722.,  24098.,  34125.,  37761.,
      24098.,  26570.,  37689.,  41469.,  26474.,  29042.,  29138.,  31802.,
      8574.,   9366.,   17812.,  19428.,  19524.,  21204.,  30314.,  32882.,
      21108.,  22852.,  32690.,  35354.,  22692.,  24500.,  35066.,  37826.,
      24276.,  26148.,  26372.,  28308.,  13591.,  14899.,  28178.,  30842.,
      31226.,  33986.,  48381.,  52593.,  33602.,  36458.,  51945.,  56301.,
      35978.,  38930.,  55509.,  60009.,  38354.,  41402.,  41978.,  45122.,
      12214.,  13166.,  25092.,  27028.,  27444.,  29444.,  42194.,  45242.,
      29028.,  31092.,  44570.,  47714.,  30612.,  32740.,  46946.,  50186.,
      32196.,  34388.,  34932.,  37188.,  17934.,  19046.,  36852.,  39108.,
      39204.,  41524.,  60314.,  63842.,  41428.,  43812.,  63650.,  67274.,
      43652.,  46100.,  66986.,  70706.,  45876.,  48388.,  48612.,  51188.,
      5177.,   5693.,   10526.,  11574.,  12182.,  13262.,  18547.,  20191.,
      12654.,  13766.,  19255.,  20947.,  13126.,  14270.,  19963.,  21703.,
      13598.,  14774.,  15446.,  16654.,  10574.,  11686.,  21492.,  23748.,
      25124.,  27444.,  38234.,  41762.,  26068.,  28452.,  39650.,  43274.,
      27012.,  29460.,  41066.,  44786.,  27956.,  30468.,  31972.,  34548.,
      19494.,  20766.,  39652.,  42228.,  43284.,  45924.,  65954.,  69962.,
      44868.,  47572.,  68330.,  72434.,  46452.,  49220.,  70706.,  74906.,
      48036.,  50868.,  52052.,  54948.,  29971.,  31999.,  60938.,  65042.,
      66866.,  71066.,  101841., 108213., 69242.,  73538.,  105405., 111921.,
      71618.,  76010.,  108969., 115629., 73994.,  78482.,  80498.,  85082.,
      23134.,  24566.,  46932.,  49828.,  51204.,  54164.,  77834.,  82322.,
      52788.,  55812.,  80210.,  84794.,  54372.,  57460.,  82586.,  87266.,
      55956.,  59108.,  60612.,  63828.,  35431.,  37699.,  71858.,  76442.,
      78746.,  83426.,  119661., 126753., 81122.,  85898.,  123225., 130461.,
      83498.,  88370.,  126789., 134169., 85874.,  90842.,  93338.,  98402.,
      26774.,  28366.,  54212.,  57428.,  59124.,  62404.,  89714.,  94682.,
      60708.,  64052.,  92090.,  97154.,  62292.,  65700.,  94466.,  99626.,
      63876.,  67348.,  69172.,  72708.,  40891.,  43399.,  82778.,  87842.,
      90626.,  95786.,  137481., 145293., 93002.,  98258.,  141045., 149001.,
      95378.,  100730., 144609., 152709., 97754.,  103202., 106178., 111722.,
      30414.,  32166.,  61492.,  65028.,  67044.,  70644.,  101594., 107042.,
      68628.,  72292.,  103970., 109514., 70212.,  73940.,  106346., 111986.,
      71796.,  75588.,  77732.,  81588.,  44134.,  46046.,  89252.,  93108.,
      94804.,  98724.,  143714., 149642., 97028.,  101012., 147050., 153074.,
      99252.,  103300., 150386., 156506., 101476., 105588., 107412., 111588.,
      10277.,  11193.,  20726.,  22574.,  23982.,  25862.,  36247.,  39091.,
      24454.,  26366.,  36955.,  39847.,  24926.,  26870.,  37663.,  40603.,
      25398.,  27374.,  28846.,  30854.,  20774.,  22686.,  41892.,  45748.,
      48724.,  52644.,  73634.,  79562.,  49668.,  53652.,  75050.,  81074.,
      50612.,  54660.,  76466.,  82586.,  51556.,  55668.,  58772.,  62948.,
      37694.,  39766.,  76052.,  80228.,  82884.,  87124.,  125354., 131762.,
      84468.,  88772.,  127730., 134234., 86052.,  90420.,  130106., 136706.,
      87636.,  92068.,  94852.,  99348.,  57271.,  60499.,  115538., 122042.,
      126266., 132866., 190941., 200913., 128642., 135338., 194505., 204621.,
      131018., 137810., 198069., 208329., 133394., 140282., 144698., 151682.,
      41334.,  43566.,  83332.,  87828.,  90804.,  95364.,  137234., 144122.,
      92388.,  97012.,  139610., 146594., 93972.,  98660.,  141986., 149066.,
      95556.,  100308., 103412., 108228., 62731.,  66199.,  126458., 133442.,
      138146., 145226., 208761., 219453., 140522., 147698., 212325., 223161.,
      142898., 150170., 215889., 226869., 145274., 152642., 157538., 165002.,
      44974.,  47366.,  90612.,  95428.,  98724.,  103604., 149114., 156482.,
      100308., 105252., 151490., 158954., 101892., 106900., 153866., 161426.,
      103476., 108548., 111972., 117108., 68191.,  71899.,  137378., 144842.,
      150026., 157586., 226581., 237993., 152402., 160058., 230145., 241701.,
      154778., 162530., 233709., 245409., 157154., 165002., 170378., 178322.,
      48614.,  51166.,  97892.,  103028., 106644., 111844., 160994., 168842.,
      108228., 113492., 163370., 171314., 109812., 115140., 165746., 173786.,
      111396., 116788., 120532., 125988., 70334.,  73046.,  141652., 147108.,
      150404., 155924., 227114., 235442., 152628., 158212., 230450., 238874.,
      154852., 160500., 233786., 242306., 157076., 162788., 166212., 171988.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,     25.,    17.,    53.,    46.,    134.,   102.,   222.,   187.,
      391.,   254.,   406.,   374.,   558.,   257.,   357.,   333.,   449.,
      0.,     0.,     65.,    165.,   77.,    193.,   326.,   574.,   382.,
      662.,   847.,   1291.,  854.,   1166.,  974.,   1318.,  637.,   817.,
      713.,   909.,   0.,     0.,     166.,   414.,   286.,   566.,   916.,
      1508.,  1220.,  1876.,  2378.,  3410.,  2164.,  2884.,  2596.,  3380.,
      1598.,  2006.,  1846.,  2286.,  0.,     0.,     766.,   1174.,  886.,
      1326.,  2436.,  3348.,  2740.,  3716.,  5138.,  6650.,  4324.,  5364.,
      4756.,  5860.,  2838.,  3406.,  3086.,  3686.,  0.,     0.,     1443.,
      2127.,  1767.,  2499.,  4530.,  6042.,  5274.,  6882.,  9453.,  11937.,
      7650.,  9354.,  8586.,  10386., 4983.,  5907.,  5499.,  6471.,  0.,
      0.,     2758.,  3262.,  3070.,  3606.,  6804.,  7908.,  7492.,  8660.,
      12266., 14066., 9076.,  10308., 9892.,  11188., 5406.,  6070.,  5846.,
      6542.,  0.,     0.,     4318.,  4982.,  4630.,  5326.,  10244., 11668.,
      10932., 12420., 17906., 20186., 13156., 14708., 13972., 15588., 7606.,
      8430.,  8046.,  8902.,  0.,     0.,     3137.,  3493.,  3341.,  3713.,
      7174.,  7934.,  7614.,  8406.,  12175., 13387., 8726.,  9550.,  9230.,
      10086., 4925.,  5361.,  5193.,  5645.,  0.,     0.,     4157.,  4593.,
      4361.,  4813.,  9374.,  10294., 9814.,  10766., 15715., 17167., 11246.,
      12230., 11750., 12766., 6265.,  6781.,  6533.,  7065.,  0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     113.,   277.,   413.,   593.,   838.,   1214.,  1470.,
      1878.,  2239.,  2875.,  1622.,  2062.,  2318.,  2790.,  1229.,  1473.,
      1593.,  1853.,  0.,     0.,     1613.,  1857.,  1913.,  2173.,  3998.,
      4534.,  4630.,  5198.,  7219.,  8095.,  5102.,  5702.,  5798.,  6430.,
      3049.,  3373.,  3413.,  3753.,  0.,     0.,     3262.,  3798.,  3958.,
      4526.,  8260.,  9428.,  9716.,  10948., 15122., 17018., 10660., 11956.,
      12244., 13604., 6422.,  7118.,  7246.,  7974.,  0.,     0.,     6742.,
      7438.,  7438.,  8166.,  15540., 17028., 16996., 18548., 26522., 28898.,
      18580., 20196., 20164., 21844., 10542., 11398., 11366., 12254., 0.,
      0.,     10407., 11523., 11595., 12759., 24186., 26562., 26658., 29130.,
      41529., 45309., 29034., 31602., 31698., 34362., 16539., 17895., 17919.,
      19323., 0.,     0.,     8734.,  9526.,  9622.,  10446., 19908., 21588.,
      21748., 23492., 33650., 36314., 23332., 25140., 25300., 27172., 13110.,
      14062., 14126., 15110., 0.,     0.,     13174., 14126., 14062., 15046.,
      29108., 31108., 30948., 33012., 47930., 51074., 33172., 35300., 35140.,
      37332., 18190., 19302., 19206., 20350., 0.,     0.,     7565.,  8065.,
      8057.,  8573.,  16606., 17654., 17622., 18702., 27187., 28831., 18734.,
      19846., 19814., 20958., 10217., 10797., 10773., 11369., 0.,     0.,
      10025., 10605., 10517., 11113., 21686., 22894., 22702., 23942., 35047.,
      36931., 24134., 25406., 25214., 26518., 12997., 13657., 13553., 14229.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     221.,   529.,   809.,   1133.,  1630.,
      2294.,  2838.,  3534.,  4291.,  5359.,  2990.,  3718.,  4262.,  5022.,
      2201.,  2589.,  2853.,  3257.,  0.,     0.,     3161.,  3549.,  3749.,
      4153.,  7670.,  8494.,  8878.,  9734.,  13591., 14899., 9350.,  10238.,
      10622., 11542., 5461.,  5929.,  6113.,  6597.,  0.,     0.,     6358.,
      7182.,  7630.,  8486.,  15604., 17348., 18212., 20020., 27866., 30626.,
      19156., 21028., 21892., 23828., 11246., 12230., 12646., 13662., 0.,
      0.,     12718., 13702., 13990., 15006., 28644., 30708., 31252., 33380.,
      47906., 51146., 32836., 35028., 35572., 37828., 18246., 19390., 19646.,
      20822., 0.,     0.,     19371., 20919., 21423., 23019., 43842., 47082.,
      48042., 51378., 73605., 78681., 50418., 53850., 54810., 58338., 28095.,
      29883., 30339., 32175., 0.,     0.,     14710., 15790., 16174., 17286.,
      33012., 35268., 36004., 38324., 55034., 58562., 37588., 39972., 40708.,
      43156., 20814., 22054., 22406., 23678., 0.,     0.,     22030., 23270.,
      23494., 24766., 47972., 50548., 50964., 53604., 77954., 81962., 53188.,
      55892., 56308., 59076., 28774., 30174., 30366., 31798., 0.,     0.,
      11993., 12637., 12773., 13433., 26038., 27374., 27630., 28998., 42199.,
      44275., 28742., 30142., 30398., 31830., 15509., 16233., 16353., 17093.,
      0.,     0.,     15893., 16617., 16673., 17413., 33998., 35494., 35590.,
      37118., 54379., 56695., 37022., 38582., 38678., 40270., 19729., 20533.,
      20573., 21393., 0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      510.,     1422.,    2380.,    4332.,    2796.,    5004.,    6362.,
      9866.,    6540.,    9004.,    11978.,   15866.,   10284.,   13004.,
      17594.,   21866.,   14028.,   17004.,   15980.,   19212.,   2700.,
      5164.,    8120.,    13304.,   11512.,   17208.,   21604.,   30532.,
      19000.,   25208.,   32836.,   42532.,   26488.,   33208.,   44068.,
      54532.,   33976.,   41208.,   40440.,   48184.,   9900.,    13644.,
      25080.,   32824.,   28472.,   36728.,   50884.,   63652.,   41080.,
      49848.,   69796.,   83332.,   53688.,   62968.,   88708.,   103012.,
      66296.,   76088.,   72760.,   83064.,   20570.,   27146.,   49060.,
      62596.,   57988.,   72292.,   99246.,   121278.,  76900.,   91972.,
      127614.,  150798.,  95812.,   111652.,  155982.,  180318.,  114724.,
      131332.,  128260.,  145636.,  38860.,   43884.,   83000.,   93304.,
      91512.,   102328.,  145444.,  162052.,  104120.,  115448.,  164356.,
      181732.,  116728.,  128568.,  183268.,  201412.,  129336.,  141688.,
      140920.,  153784.,  64010.,   72506.,   135940.,  153316.,  152548.,
      170692.,  241086.,  268878.,  171460.,  190372.,  269454.,  298398.,
      190372.,  210052.,  297822.,  327918.,  209284.,  229732.,  230500.,
      251716.,  67820.,   74124.,   140920.,  153784.,  154552.,  167928.,
      240004.,  260452.,  167160.,  181048.,  258916.,  280132.,  179768.,
      194168.,  277828.,  299812.,  192376.,  207288.,  209080.,  224504.,
      107450.,  117866.,  222820.,  244036.,  247108.,  269092.,  382926.,
      416478.,  266020.,  288772.,  411294.,  445998.,  284932.,  308452.,
      439662.,  475518.,  303844.,  328132.,  332740.,  357796.,  96780.,
      104364.,  198840.,  214264.,  217592.,  233528.,  334564.,  358852.,
      230200.,  246648.,  353476.,  378532.,  242808.,  259768.,  372388.,
      398212.,  255416.,  272888.,  277240.,  295224.,  142380.,  151244.,
      292600.,  310584.,  311352.,  329848.,  479044.,  507172.,  329080.,
      348088.,  505636.,  534532.,  346808.,  366328.,  532228.,  561892.,
      364536.,  384568.,  386360.,  406904.,  40910.,   45022.,   83180.,
      91532.,   96396.,   105004.,  146762.,  159866.,  100140.,  109004.,
      152378.,  165866.,  103884.,  113004.,  157994.,  171866.,  107628.,
      117004.,  122380.,  132012.,  83500.,   92364.,   169720.,  187704.,
      198712.,  217208.,  302404.,  330532.,  206200.,  225208.,  313636.,
      342532.,  213688.,  233208.,  324868.,  354532.,  221176.,  241208.,
      253240.,  273784.,  154700.,  164844.,  314680.,  335224.,  343672.,
      364728.,  523684.,  555652.,  356280.,  377848.,  542596.,  575332.,
      368888.,  390968.,  561508.,  595012.,  381496.,  404088.,  413560.,
      436664.,  237770.,  253946.,  483460.,  516196.,  530788.,  564292.,
      808446.,  859278.,  549700.,  583972.,  836814.,  888798.,  568612.,
      603652.,  865182.,  918318.,  587524.,  623332.,  639460.,  676036.,
      183660.,  195084.,  372600.,  395704.,  406712.,  430328.,  618244.,
      654052.,  419320.,  443448.,  637156.,  673732.,  431928.,  456568.,
      656068.,  693412.,  444536.,  469688.,  481720.,  507384.,  281210.,
      299306.,  570340.,  606916.,  625348.,  662692.,  950286.,  1006878.,
      644260.,  682372.,  978654.,  1036398., 663172.,  702052.,  1007022.,
      1065918., 682084.,  721732.,  741700.,  782116.,  212620.,  225324.,
      430520.,  456184.,  469752.,  495928.,  712804.,  752452.,  482360.,
      509048.,  731716.,  772132.,  494968.,  522168.,  750628.,  791812.,
      507576.,  535288.,  549880.,  578104.,  324650.,  344666.,  657220.,
      697636.,  719908.,  761092.,  1092126., 1154478., 738820.,  780772.,
      1120494., 1183998., 757732.,  800452.,  1148862., 1213518., 776644.,
      820132.,  843940.,  888196.,  241580.,  255564.,  488440.,  516664.,
      532792.,  561528.,  807364.,  850852.,  545400.,  574648.,  826276.,
      870532.,  558008.,  587768.,  845188.,  890212.,  570616.,  600888.,
      618040.,  648824.,  351180.,  366444.,  710200.,  740984.,  754552.,
      785848.,  1143844., 1191172., 772280.,  804088.,  1170436., 1218532.,
      790008.,  822328.,  1197028., 1245892., 807736.,  840568.,  855160.,
      888504.,  81310.,   88622.,   163980.,  178732.,  189996.,  205004.,
      287162.,  309866.,  193740.,  209004.,  292778.,  315866.,  197484.,
      213004.,  298394.,  321866.,  201228.,  217004.,  228780.,  244812.,
      164300.,  179564.,  331320.,  362104.,  385912.,  417208.,  583204.,
      630532.,  393400.,  425208.,  594436.,  642532.,  400888.,  433208.,
      605668.,  654532.,  408376.,  441208.,  466040.,  499384.,  299500.,
      316044.,  604280.,  637624.,  658872.,  692728.,  996484.,  1047652.,
      671480.,  705848.,  1015396., 1067332., 684088.,  718968.,  1034308.,
      1087012., 696696.,  732088.,  754360.,  790264.,  454970.,  480746.,
      917860.,  969796.,  1003588., 1056292., 1517646., 1597278., 1022500.,
      1075972., 1546014., 1626798., 1041412., 1095652., 1574382., 1656318.,
      1060324., 1115332., 1150660., 1206436., 328460.,  346284.,  662200.,
      698104.,  721912.,  758328.,  1091044., 1146052., 734520.,  771448.,
      1109956., 1165732., 747128.,  784568.,  1128868., 1185412., 759736.,
      797688.,  822520.,  860984.,  498410.,  526106.,  1004740., 1060516.,
      1098148., 1154692., 1659486., 1744878., 1117060., 1174372., 1687854.,
      1774398., 1135972., 1194052., 1716222., 1803918., 1154884., 1213732.,
      1252900., 1312516., 357420.,  376524.,  720120.,  758584.,  784952.,
      823928.,  1185604., 1244452., 797560.,  837048.,  1204516., 1264132.,
      810168.,  850168.,  1223428., 1283812., 822776.,  863288.,  890680.,
      931704.,  541850.,  571466.,  1091620., 1151236., 1192708., 1253092.,
      1801326., 1892478., 1211620., 1272772., 1829694., 1921998., 1230532.,
      1292452., 1858062., 1951518., 1249444., 1312132., 1355140., 1418596.,
      386380.,  406764.,  778040.,  819064.,  847992.,  889528.,  1280164.,
      1342852., 860600.,  902648.,  1299076., 1362532., 873208.,  915768.,
      1317988., 1382212., 885816.,  928888.,  958840.,  1002424., 559980.,
      581644.,  1127800., 1171384., 1197752., 1241848., 1808644., 1875172.,
      1215480., 1260088., 1835236., 1902532., 1233208., 1278328., 1861828.,
      1929892., 1250936., 1296568., 1323960., 1370104.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x2x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,     174.,    110.,    382.,    300.,    972.,    716.,    1644.,
      1322.,   2906.,   1900.,   3084.,   2828.,   4268.,   1966.,   2750.,
      2558.,   3470.,   0.,      0.,      430.,    1214.,   510.,    1422.,
      2380.,   4332.,   2796.,   5004.,   6362.,   9866.,   6540.,   9004.,
      7468.,   10188.,  4926.,   6350.,   5518.,   7070.,   0.,      0.,
      1100.,   3052.,   2028.,   4236.,   6776.,   11448.,  9144.,   14328.,
      18052.,  26212.,  16632.,  22328.,  20024.,  26232.,  12396.,  15628.,
      14348.,  17836.,  0.,      0.,      5740.,   8972.,   6668.,   10156.,
      18616.,  25848.,  20984.,  28728.,  39652.,  51652.,  33592.,  41848.,
      36984.,  45752.,  22156.,  26668.,  24108.,  28876.,  0.,      0.,
      10890.,  16314.,  13434.,  19242.,  34788.,  46788.,  40644.,  53412.,
      73230.,  92958.,  59556.,  73092.,  66948.,  81252.,  38970.,  46314.,
      43050.,  50778.,  0.,      0.,      21580.,  25580.,  24044.,  28300.,
      53368.,  62136.,  58808.,  68088.,  96388.,  110692., 71416.,  81208.,
      77880.,  88184.,  42604.,  47884.,  46092.,  51628.,  0.,      0.,
      33900.,  39180.,  36364.,  41900.,  80568.,  91896.,  86008.,  97848.,
      141028., 159172., 103736., 116088., 110200., 123064., 60044.,  66604.,
      63532.,  70348.,  0.,      0.,      24750.,  27582.,  26366.,  29326.,
      56652.,  62700.,  60140.,  66444.,  96218.,  105866., 69004.,  75564.,
      73004.,  79820.,  38974.,  42446.,  41102.,  44702.,  0.,      0.,
      32830.,  36302.,  34446.,  38046.,  74092.,  81420.,  77580.,  85164.,
      124298., 135866., 89004.,  96844.,  93004.,  101100., 49614.,  53726.,
      51742.,  55982.,  0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      750.,    2046.,   3134.,   4558.,   6348.,   9324.,   11372.,  14604.,
      17306.,  22346.,  12556.,  16044.,  18092.,  21836.,  9598.,   11534.,
      12494.,  14558.,  0.,      0.,      12670.,  14606.,  15054.,  17118.,
      31468.,  35724.,  36492.,  41004.,  56906.,  63866.,  40236.,  45004.,
      45772.,  50796.,  24078.,  26654.,  26974.,  29678.,  0.,      0.,
      25580.,  29836.,  31116.,  35628.,  64952.,  74232.,  76536.,  86328.,
      119140., 134212., 84024.,  94328.,  96632.,  107448., 50700.,  56236.,
      57260.,  63052.,  0.,      0.,      53260.,  58796.,  58796.,  64588.,
      122872., 134712., 134456., 146808., 209860., 228772., 147064., 159928.,
      159672., 173048., 83500.,  90316.,  90060.,  97132.,  0.,      0.,
      82170.,  91050.,  91626.,  100890., 191172., 210084., 210852., 230532.,
      328542., 358638., 229764., 250212., 250980., 272196., 130986., 141786.,
      141978., 153162., 0.,      0.,      69100.,  75404.,  76172.,  82732.,
      157624., 171000., 172280., 186168., 266596., 287812., 184888., 199288.,
      200568., 215480., 103948., 111532., 112044., 119884., 0.,      0.,
      104460., 112044., 111532., 119372., 230904., 246840., 245560., 262008.,
      380356., 405412., 263288., 280248., 278968., 296440., 144428., 153292.,
      152524., 161644., 0.,      0.,      60030.,  64014.,  63950.,  68062.,
      131820., 140172., 139916., 148524., 215882., 228986., 148780., 157644.,
      157388., 166508., 81166.,  85790.,  85598.,  90350.,  0.,      0.,
      79630.,  84254.,  83550.,  88302.,  172300., 181932., 180396., 190284.,
      278522., 293546., 191820., 201964., 200428., 210828., 103326., 108590.,
      107758., 113150., 0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      1470.,   3918.,   6158.,   8734.,   12396.,  17676.,  22028.,  27564.,
      33290.,  41786.,  23212.,  29004.,  33356.,  39404.,  17230.,  20318.,
      22430.,  25646.,  0.,      0.,      24910.,  27998.,  29598.,  32814.,
      60556.,  67116.,  70188.,  77004.,  107450., 117866., 73932.,  81004.,
      84076.,  91404.,  43230.,  46958.,  48430.,  52286.,  0.,      0.,
      50060.,  56620.,  60204.,  67020.,  123128., 137016., 143928., 158328.,
      220228., 242212., 151416., 166328., 173240., 188664., 89004.,  96844.,
      100172., 108268., 0.,      0.,      100780., 108620., 110924., 119020.,
      227128., 243576., 247928., 264888., 380068., 405892., 260536., 278008.,
      282360., 300344., 144844., 153964., 156012., 165388., 0.,      0.,
      153450., 165786., 169818., 182538., 347556., 373380., 381060., 407652.,
      583854., 624318., 399972., 427332., 435012., 463140., 223002., 237258.,
      240906., 255546., 0.,      0.,      116620., 125228., 128300., 137164.,
      261880., 279864., 285752., 304248., 436804., 464932., 298360., 317368.,
      323256., 342776., 165292., 175180., 177996., 188140., 0.,      0.,
      175020., 184908., 186700., 196844., 381240., 401784., 405112., 426168.,
      619684., 651652., 422840., 444408., 447736., 469816., 228812., 239980.,
      241516., 252940., 0.,      0.,      95310.,  100446., 101534., 106798.,
      206988., 217644., 219692., 230604., 335546., 352106., 228556., 239724.,
      241772., 253196., 123358., 129134., 130094., 135998., 0.,      0.,
      126430., 132206., 132654., 138558., 270508., 282444., 283212., 295404.,
      432746., 451226., 294636., 307084., 307852., 320556., 157038., 163454.,
      163774., 170318., 0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 2}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      25.,    52.,    81.,    112.,   134.,    192.,    254.,    320.,
      158.,   224.,   294.,   368.,   371.,    476.,    587.,    704.,
      390.,   464.,   542.,   624.,   719.,    836.,    959.,    1088.,
      622.,   704.,   790.,   880.,   1067.,   1196.,   1331.,   1472.,
      854.,   944.,   1038.,  1136.,  974.,    1072.,   1174.,   1280.,
      150.,   224.,   302.,   384.,   468.,    624.,    788.,    960.,
      676.,   848.,   1028.,  1216.,  1282.,   1552.,   1834.,   2128.,
      1140.,  1328.,  1524.,  1728.,  1978.,   2272.,   2578.,   2896.,
      1604.,  1808.,  2020.,  2240.,  2674.,   2992.,   3322.,   3664.,
      2068.,  2288.,  2516.,  2752.,  2468.,   2704.,   2948.,   3200.,
      590.,   704.,   822.,   944.,   1508.,   1744.,   1988.,   2240.,
      1716.,  1968.,  2228.,  2496.,  3082.,   3472.,   3874.,   4288.,
      2500.,  2768.,  3044.,  3328.,  4258.,   4672.,   5098.,   5536.,
      3284.,  3568.,  3860.,  4160.,  5434.,   5872.,   6322.,   6784.,
      4068.,  4368.,  4676.,  4992.,  4468.,   4784.,   5108.,   5440.,
      1235.,  1436.,  1643.,  1856.,  2962.,   3376.,   3802.,   4240.,
      3514.,  3952.,  4402.,  4864.,  6033.,   6708.,   7401.,   8112.,
      4690.,  5152.,  5626.,  6112.,  7797.,   8508.,   9237.,   9984.,
      5866.,  6352.,  6850.,  7360.,  9561.,   10308.,  11073.,  11856.,
      7042.,  7552.,  8074.,  8608.,  7882.,   8416.,   8962.,   9520.,
      2390.,  2544.,  2702.,  2864.,  5108.,   5424.,   5748.,   6080.,
      5636.,  5968.,  6308.,  6656.,  8962.,   9472.,   9994.,   10528.,
      6420.,  6768.,  7124.,  7488.,  10138.,  10672.,  11218.,  11776.,
      7204.,  7568.,  7940.,  8320.,  11314.,  11872.,  12442.,  13024.,
      7988.,  8368.,  8756.,  9152.,  8708.,   9104.,   9508.,   9920.,
      3935.,  4196.,  4463.,  4736.,  8362.,   8896.,   9442.,   10000.,
      9394.,  9952.,  10522., 11104., 14853.,  15708.,  16581.,  17472.,
      10570., 11152., 11746., 12352., 16617.,  17508.,  18417.,  19344.,
      11746., 12352., 12970., 13600., 18381.,  19308.,  20253.,  21216.,
      12922., 13552., 14194., 14848., 14242.,  14896.,  15562.,  16240.,
      4190.,  4384.,  4582.,  4784.,  8708.,   9104.,   9508.,   9920.,
      9556.,  9968.,  10388., 10816., 14842.,  15472.,  16114.,  16768.,
      10340., 10768., 11204., 11648., 16018.,  16672.,  17338.,  18016.,
      11124., 11568., 12020., 12480., 17194.,  17872.,  18562.,  19264.,
      11908., 12368., 12836., 13312., 12948.,  13424.,  13908.,  14400.,
      6635.,  6956.,  7283.,  7616.,  13762.,  14416.,  15082.,  15760.,
      15274., 15952., 16642., 17344., 23673.,  24708.,  25761.,  26832.,
      16450., 17152., 17866., 18592., 25437.,  26508.,  27597.,  28704.,
      17626., 18352., 19090., 19840., 27201.,  28308.,  29433.,  30576.,
      18802., 19552., 20314., 21088., 20602.,  21376.,  22162.,  22960.,
      5990.,  6224.,  6462.,  6704.,  12308.,  12784.,  13268.,  13760.,
      13476., 13968., 14468., 14976., 20722.,  21472.,  22234.,  23008.,
      14260., 14768., 15284., 15808., 21898.,  22672.,  23458.,  24256.,
      15044., 15568., 16100., 16640., 23074.,  23872.,  24682.,  25504.,
      15828., 16368., 16916., 17472., 17188.,  17744.,  18308.,  18880.,
      8830.,  9104.,  9382.,  9664.,  18148.,  18704.,  19268.,  19840.,
      19316., 19888., 20468., 21056., 29722.,  30592.,  31474.,  32368.,
      20420., 21008., 21604., 22208., 31378.,  32272.,  33178.,  34096.,
      21524., 22128., 22740., 23360., 33034.,  33952.,  34882.,  35824.,
      22628., 23248., 23876., 24512., 23988.,  24624.,  25268.,  25920.,
      2525.,  2652.,  2781.,  2912.,  5134.,   5392.,   5654.,   5920.,
      5958.,  6224.,  6494.,  6768.,  9071.,   9476.,   9887.,   10304.,
      6190.,  6464.,  6742.,  7024.,  9419.,   9836.,   10259.,  10688.,
      6422.,  6704.,  6990.,  7280.,  9767.,   10196.,  10631.,  11072.,
      6654.,  6944.,  7238.,  7536.,  7574.,   7872.,   8174.,   8480.,
      5150.,  5424.,  5702.,  5984.,  10468.,  11024.,  11588.,  12160.,
      12276., 12848., 13428., 14016., 18682.,  19552.,  20434.,  21328.,
      12740., 13328., 13924., 14528., 19378.,  20272.,  21178.,  22096.,
      13204., 13808., 14420., 15040., 20074.,  20992.,  21922.,  22864.,
      13668., 14288., 14916., 15552., 15668.,  16304.,  16948.,  17600.,
      9590.,  9904.,  10222., 10544., 19508.,  20144.,  20788.,  21440.,
      21316., 21968., 22628., 23296., 32482.,  33472.,  34474.,  35488.,
      22100., 22768., 23444., 24128., 33658.,  34672.,  35698.,  36736.,
      22884., 23568., 24260., 24960., 34834.,  35872.,  36922.,  37984.,
      23668., 24368., 25076., 25792., 25668.,  26384.,  27108.,  27840.,
      14735., 15236., 15743., 16256., 29962.,  30976.,  32002.,  33040.,
      32914., 33952., 35002., 36064., 50133.,  51708.,  53301.,  54912.,
      34090., 35152., 36226., 37312., 51897.,  53508.,  55137.,  56784.,
      35266., 36352., 37450., 38560., 53661.,  55308.,  56973.,  58656.,
      36442., 37552., 38674., 39808., 39682.,  40816.,  41962.,  43120.,
      11390., 11744., 12102., 12464., 23108.,  23824.,  24548.,  25280.,
      25236., 25968., 26708., 27456., 38362.,  39472.,  40594.,  41728.,
      26020., 26768., 27524., 28288., 39538.,  40672.,  41818.,  42976.,
      26804., 27568., 28340., 29120., 40714.,  41872.,  43042.,  44224.,
      27588., 28368., 29156., 29952., 29908.,  30704.,  31508.,  32320.,
      17435., 17996., 18563., 19136., 35362.,  36496.,  37642.,  38800.,
      38794., 39952., 41122., 42304., 58953.,  60708.,  62481.,  64272.,
      39970., 41152., 42346., 43552., 60717.,  62508.,  64317.,  66144.,
      41146., 42352., 43570., 44800., 62481.,  64308.,  66153.,  68016.,
      42322., 43552., 44794., 46048., 46042.,  47296.,  48562.,  49840.,
      13190., 13584., 13982., 14384., 26708.,  27504.,  28308.,  29120.,
      29156., 29968., 30788., 31616., 44242.,  45472.,  46714.,  47968.,
      29940., 30768., 31604., 32448., 45418.,  46672.,  47938.,  49216.,
      30724., 31568., 32420., 33280., 46594.,  47872.,  49162.,  50464.,
      31508., 32368., 33236., 34112., 34148.,  35024.,  35908.,  36800.,
      20135., 20756., 21383., 22016., 40762.,  42016.,  43282.,  44560.,
      44674., 45952., 47242., 48544., 67773.,  69708.,  71661.,  73632.,
      45850., 47152., 48466., 49792., 69537.,  71508.,  73497.,  75504.,
      47026., 48352., 49690., 51040., 71301.,  73308.,  75333.,  77376.,
      48202., 49552., 50914., 52288., 52402.,  53776.,  55162.,  56560.,
      14990., 15424., 15862., 16304., 30308.,  31184.,  32068.,  32960.,
      33076., 33968., 34868., 35776., 50122.,  51472.,  52834.,  54208.,
      33860., 34768., 35684., 36608., 51298.,  52672.,  54058.,  55456.,
      34644., 35568., 36500., 37440., 52474.,  53872.,  55282.,  56704.,
      35428., 36368., 37316., 38272., 38388.,  39344.,  40308.,  41280.,
      21830., 22304., 22782., 23264., 44148.,  45104.,  46068.,  47040.,
      46916., 47888., 48868., 49856., 71122.,  72592.,  74074.,  75568.,
      48020., 49008., 50004., 51008., 72778.,  74272.,  75778.,  77296.,
      49124., 50128., 51140., 52160., 74434.,  75952.,  77482.,  79024.,
      50228., 51248., 52276., 53312., 53188.,  54224.,  55268.,  56320.,
      5025.,  5252.,  5481.,  5712.,  10134.,  10592.,  11054.,  11520.,
      11758., 12224., 12694., 13168., 17771.,  18476.,  19187.,  19904.,
      11990., 12464., 12942., 13424., 18119.,  18836.,  19559.,  20288.,
      12222., 12704., 13190., 13680., 18467.,  19196.,  19931.,  20672.,
      12454., 12944., 13438., 13936., 14174.,  14672.,  15174.,  15680.,
      10150., 10624., 11102., 11584., 20468.,  21424.,  22388.,  23360.,
      23876., 24848., 25828., 26816., 36082.,  37552.,  39034.,  40528.,
      24340., 25328., 26324., 27328., 36778.,  38272.,  39778.,  41296.,
      24804., 25808., 26820., 27840., 37474.,  38992.,  40522.,  42064.,
      25268., 26288., 27316., 28352., 28868.,  29904.,  30948.,  32000.,
      18590., 19104., 19622., 20144., 37508.,  38544.,  39588.,  40640.,
      40916., 41968., 43028., 44096., 61882.,  63472.,  65074.,  66688.,
      41700., 42768., 43844., 44928., 63058.,  64672.,  66298.,  67936.,
      42484., 43568., 44660., 45760., 64234.,  65872.,  67522.,  69184.,
      43268., 44368., 45476., 46592., 46868.,  47984.,  49108.,  50240.,
      28235., 29036., 29843., 30656., 56962.,  58576.,  60202.,  61840.,
      62314., 63952., 65602., 67264., 94233.,  96708.,  99201.,  101712.,
      63490., 65152., 66826., 68512., 95997.,  98508.,  101037., 103584.,
      64666., 66352., 68050., 69760., 97761.,  100308., 102873., 105456.,
      65842., 67552., 69274., 71008., 71482.,  73216.,  74962.,  76720.,
      20390., 20944., 21502., 22064., 41108.,  42224.,  43348.,  44480.,
      44836., 45968., 47108., 48256., 67762.,  69472.,  71194.,  72928.,
      45620., 46768., 47924., 49088., 68938.,  70672.,  72418.,  74176.,
      46404., 47568., 48740., 49920., 70114.,  71872.,  73642.,  75424.,
      47188., 48368., 49556., 50752., 51108.,  52304.,  53508.,  54720.,
      30935., 31796., 32663., 33536., 62362.,  64096.,  65842.,  67600.,
      68194., 69952., 71722., 73504., 103053., 105708., 108381., 111072.,
      69370., 71152., 72946., 74752., 104817., 107508., 110217., 112944.,
      70546., 72352., 74170., 76000., 106581., 109308., 112053., 114816.,
      71722., 73552., 75394., 77248., 77842.,  79696.,  81562.,  83440.,
      22190., 22784., 23382., 23984., 44708.,  45904.,  47108.,  48320.,
      48756., 49968., 51188., 52416., 73642.,  75472.,  77314.,  79168.,
      49540., 50768., 52004., 53248., 74818.,  76672.,  78538.,  80416.,
      50324., 51568., 52820., 54080., 75994.,  77872.,  79762.,  81664.,
      51108., 52368., 53636., 54912., 55348.,  56624.,  57908.,  59200.,
      33635., 34556., 35483., 36416., 67762.,  69616.,  71482.,  73360.,
      74074., 75952., 77842., 79744., 111873., 114708., 117561., 120432.,
      75250., 77152., 79066., 80992., 113637., 116508., 119397., 122304.,
      76426., 78352., 80290., 82240., 115401., 118308., 121233., 124176.,
      77602., 79552., 81514., 83488., 84202.,  86176.,  88162.,  90160.,
      23990., 24624., 25262., 25904., 48308.,  49584.,  50868.,  52160.,
      52676., 53968., 55268., 56576., 79522.,  81472.,  83434.,  85408.,
      53460., 54768., 56084., 57408., 80698.,  82672.,  84658.,  86656.,
      54244., 55568., 56900., 58240., 81874.,  83872.,  85882.,  87904.,
      55028., 56368., 57716., 59072., 59588.,  60944.,  62308.,  63680.,
      34830., 35504., 36182., 36864., 70148.,  71504.,  72868.,  74240.,
      74516., 75888., 77268., 78656., 112522., 114592., 116674., 118768.,
      75620., 77008., 78404., 79808., 114178., 116272., 118378., 120496.,
      76724., 78128., 79540., 80960., 115834., 117952., 120082., 122224.,
      77828., 79248., 80676., 82112., 82388.,  83824.,  85268.,  86720.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x1) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      1.,     4.,     9.,     16.,    5.,     12.,    21.,    32.,    14.,
      32.,    54.,    80.,    38.,    64.,    94.,    128.,   71.,    116.,
      167.,   224.,   110.,   144.,   182.,   224.,   166.,   208.,   254.,
      304.,   117.,   140.,   165.,   192.,   153.,   180.,   209.,   240.,
      0.,     0.,     0.,     0.,     21.,    44.,    69.,    96.,    25.,
      52.,    81.,    112.,   134.,   192.,   254.,   320.,   158.,   224.,
      294.,   368.,   371.,   476.,   587.,   704.,   390.,   464.,   542.,
      624.,   446.,   528.,   614.,   704.,   297.,   340.,   385.,   432.,
      333.,   380.,   429.,   480.,   0.,     0.,     0.,     0.,     54.,
      112.,   174.,   240.,   110.,   176.,   246.,   320.,   388.,   528.,
      676.,   832.,   532.,   688.,   852.,   1024.,  1066.,  1312.,  1570.,
      1840.,  996.,   1168.,  1348.,  1536.,  1204.,  1392.,  1588.,  1792.,
      750.,   848.,   950.,   1056.,  870.,   976.,   1086.,  1200.,  0.,
      0.,     0.,     0.,     334.,   432.,   534.,   640.,   390.,   496.,
      606.,   720.,   1108.,  1328.,  1556.,  1792.,  1252.,  1488.,  1732.,
      1984.,  2386.,  2752.,  3130.,  3520.,  2036.,  2288.,  2548.,  2816.,
      2244.,  2512.,  2788.,  3072.,  1350.,  1488.,  1630.,  1776.,  1470.,
      1616.,  1766.,  1920.,  0.,     0.,     0.,     0.,     639.,   804.,
      975.,   1152.,  795.,   972.,   1155.,  1344.,  2082.,  2448.,  2826.,
      3216.,  2442.,  2832.,  3234.,  3648.,  4425.,  5028.,  5649.,  6288.,
      3618.,  4032.,  4458.,  4896.,  4074.,  4512.,  4962.,  5424.,  2379.,
      2604.,  2835.,  3072.,  2631.,  2868.,  3111.,  3360.,  0.,     0.,
      0.,     0.,     1318.,  1440.,  1566.,  1696.,  1470.,  1600.,  1734.,
      1872.,  3268.,  3536.,  3812.,  4096.,  3604.,  3888.,  4180.,  4480.,
      5914.,  6352.,  6802.,  7264.,  4388.,  4688.,  4996.,  5312.,  4788.,
      5104.,  5428.,  5760.,  2622.,  2784.,  2950.,  3120.,  2838.,  3008.,
      3182.,  3360.,  0.,     0.,     0.,     0.,     2078.,  2240.,  2406.,
      2576.,  2230.,  2400.,  2574.,  2752.,  4948.,  5296.,  5652.,  6016.,
      5284.,  5648.,  6020.,  6400.,  8674.,  9232.,  9802.,  10384., 6388.,
      6768.,  7156.,  7552.,  6788.,  7184.,  7588.,  8000.,  3702.,  3904.,
      4110.,  4320.,  3918.,  4128.,  4342.,  4560.,  0.,     0.,     0.,
      0.,     1525.,  1612.,  1701.,  1792.,  1625.,  1716.,  1809.,  1904.,
      3494.,  3680.,  3870.,  4064.,  3710.,  3904.,  4102.,  4304.,  5939.,
      6236.,  6539.,  6848.,  4262.,  4464.,  4670.,  4880.,  4510.,  4720.,
      4934.,  5152.,  2409.,  2516.,  2625.,  2736.,  2541.,  2652.,  2765.,
      2880.,  0.,     0.,     0.,     0.,     2025.,  2132.,  2241.,  2352.,
      2125.,  2236.,  2349.,  2464.,  4574.,  4800.,  5030.,  5264.,  4790.,
      5024.,  5262.,  5504.,  7679.,  8036.,  8399.,  8768.,  5502.,  5744.,
      5990.,  6240.,  5750.,  6000.,  6254.,  6512.,  3069.,  3196.,  3325.,
      3456.,  3201.,  3332.,  3465.,  3600.,  0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     37.,    76.,    117.,   160.,   185.,
      228.,   273.,   320.,   374.,   464.,   558.,   656.,   686.,   784.,
      886.,   992.,   1043.,  1196.,  1355.,  1520.,  758.,   864.,   974.,
      1088.,  1102.,  1216.,  1334.,  1456.,  585.,   644.,   705.,   768.,
      765.,   828.,   893.,   960.,   0.,     0.,     0.,     0.,     777.,
      836.,   897.,   960.,   925.,   988.,   1053.,  1120.,  1934.,  2064.,
      2198.,  2336.,  2246.,  2384.,  2526.,  2672.,  3503.,  3716.,  3935.,
      4160.,  2478.,  2624.,  2774.,  2928.,  2822.,  2976.,  3134.,  3296.,
      1485.,  1564.,  1645.,  1728.,  1665.,  1748.,  1833.,  1920.,  0.,
      0.,     0.,     0.,     1566.,  1696.,  1830.,  1968.,  1910.,  2048.,
      2190.,  2336.,  3988.,  4272.,  4564.,  4864.,  4708.,  5008.,  5316.,
      5632.,  7330.,  7792.,  8266.,  8752.,  5172.,  5488.,  5812.,  6144.,
      5956.,  6288.,  6628.,  6976.,  3126.,  3296.,  3470.,  3648.,  3534.,
      3712.,  3894.,  4080.,  0.,     0.,     0.,     0.,     3286.,  3456.,
      3630.,  3808.,  3630.,  3808.,  3990.,  4176.,  7588.,  7952.,  8324.,
      8704.,  8308.,  8688.,  9076.,  9472.,  12970., 13552., 14146., 14752.,
      9092.,  9488.,  9892.,  10304., 9876.,  10288., 10708., 11136., 5166.,
      5376.,  5590.,  5808.,  5574.,  5792.,  6014.,  6240.,  0.,     0.,
      0.,     0.,     5067.,  5340.,  5619.,  5904.,  5655.,  5940.,  6231.,
      6528.,  11802., 12384., 12978., 13584., 13026., 13632., 14250., 14880.,
      20301., 21228., 22173., 23136., 14202., 14832., 15474., 16128., 15522.,
      16176., 16842., 17520., 8103.,  8436.,  8775.,  9120.,  8787.,  9132.,
      9483.,  9840.,  0.,     0.,     0.,     0.,     4270.,  4464.,  4662.,
      4864.,  4710.,  4912.,  5118.,  5328.,  9748.,  10160., 10580., 11008.,
      10660., 11088., 11524., 11968., 16498., 17152., 17818., 18496., 11444.,
      11888., 12340., 12800., 12420., 12880., 13348., 13824., 6438.,  6672.,
      6910.,  7152.,  6942.,  7184.,  7430.,  7680.,  0.,     0.,     0.,
      0.,     6470.,  6704.,  6942.,  7184.,  6910.,  7152.,  7398.,  7648.,
      14308., 14800., 15300., 15808., 15220., 15728., 16244., 16768., 23578.,
      24352., 25138., 25936., 16324., 16848., 17380., 17920., 17300., 17840.,
      18388., 18944., 8958.,  9232.,  9510.,  9792.,  9462.,  9744.,  10030.,
      10320., 0.,     0.,     0.,     0.,     3721.,  3844.,  3969.,  4096.,
      3965.,  4092.,  4221.,  4352.,  8174.,  8432.,  8694.,  8960.,  8678.,
      8944.,  9214.,  9488.,  13391., 13796., 14207., 14624., 9230.,  9504.,
      9782.,  10064., 9766.,  10048., 10334., 10624., 5037.,  5180.,  5325.,
      5472.,  5313.,  5460.,  5609.,  5760.,  0.,     0.,     0.,     0.,
      4941.,  5084.,  5229.,  5376.,  5185.,  5332.,  5481.,  5632.,  10694.,
      10992., 11294., 11600., 11198., 11504., 11814., 12128., 17291., 17756.,
      18227., 18704., 11910., 12224., 12542., 12864., 12446., 12768., 13094.,
      13424., 6417.,  6580.,  6745.,  6912.,  6693.,  6860.,  7029.,  7200.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     73.,
      148.,   225.,   304.,   365.,   444.,   525.,   608.,   734.,   896.,
      1062.,  1232.,  1334.,  1504.,  1678.,  1856.,  2015.,  2276.,  2543.,
      2816.,  1406.,  1584.,  1766.,  1952.,  2038.,  2224.,  2414.,  2608.,
      1053.,  1148.,  1245.,  1344.,  1377.,  1476.,  1577.,  1680.,  0.,
      0.,     0.,     0.,     1533.,  1628.,  1725.,  1824.,  1825.,  1924.,
      2025.,  2128.,  3734.,  3936.,  4142.,  4352.,  4334.,  4544.,  4758.,
      4976.,  6635.,  6956.,  7283.,  7616.,  4566.,  4784.,  5006.,  5232.,
      5198.,  5424.,  5654.,  5888.,  2673.,  2788.,  2905.,  3024.,  2997.,
      3116.,  3237.,  3360.,  0.,     0.,     0.,     0.,     3078.,  3280.,
      3486.,  3696.,  3710.,  3920.,  4134.,  4352.,  7588.,  8016.,  8452.,
      8896.,  8884.,  9328.,  9780.,  10240., 13594., 14272., 14962., 15664.,
      9348.,  9808.,  10276., 10752., 10708., 11184., 11668., 12160., 5502.,
      5744.,  5990.,  6240.,  6198.,  6448.,  6702.,  6960.,  0.,     0.,
      0.,     0.,     6238.,  6480.,  6726.,  6976.,  6870.,  7120.,  7374.,
      7632.,  14068., 14576., 15092., 15616., 15364., 15888., 16420., 16960.,
      23554., 24352., 25162., 25984., 16148., 16688., 17236., 17792., 17508.,
      18064., 18628., 19200., 8982.,  9264.,  9550.,  9840.,  9678.,  9968.,
      10262., 10560., 0.,     0.,     0.,     0.,     9495.,  9876.,  10263.,
      10656., 10515., 10908., 11307., 11712., 21522., 22320., 23130., 23952.,
      23610., 24432., 25266., 26112., 36177., 37428., 38697., 39984., 24786.,
      25632., 26490., 27360., 26970., 27840., 28722., 29616., 13827., 14268.,
      14715., 15168., 14943., 15396., 15855., 16320., 0.,     0.,     0.,
      0.,     7222.,  7488.,  7758.,  8032.,  7950.,  8224.,  8502.,  8784.,
      16228., 16784., 17348., 17920., 17716., 18288., 18868., 19456., 27082.,
      27952., 28834., 29728., 18500., 19088., 19684., 20288., 20052., 20656.,
      21268., 21888., 10254., 10560., 10870., 11184., 11046., 11360., 11678.,
      12000., 0.,     0.,     0.,     0.,     10862., 11168., 11478., 11792.,
      11590., 11904., 12222., 12544., 23668., 24304., 24948., 25600., 25156.,
      25808., 26468., 27136., 38482., 39472., 40474., 41488., 26260., 26928.,
      27604., 28288., 27812., 28496., 29188., 29888., 14214., 14560., 14910.,
      15264., 15006., 15360., 15718., 16080., 0.,     0.,     0.,     0.,
      5917.,  6076.,  6237.,  6400.,  6305.,  6468.,  6633.,  6800.,  12854.,
      13184., 13518., 13856., 13646., 13984., 14326., 14672., 20843., 21356.,
      21875., 22400., 14198., 14544., 14894., 15248., 15022., 15376., 15734.,
      16096., 7665.,  7844.,  8025.,  8208.,  8085.,  8268.,  8453.,  8640.,
      0.,     0.,     0.,     0.,     7857.,  8036.,  8217.,  8400.,  8245.,
      8428.,  8613.,  8800.,  16814., 17184., 17558., 17936., 17606., 17984.,
      18366., 18752., 26903., 27476., 28055., 28640., 18318., 18704., 19094.,
      19488., 19142., 19536., 19934., 20336., 9765.,  9964.,  10165., 10368.,
      10185., 10388., 10593., 10800., 0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
      0.,     0.,     0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 1;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      149.,    361.,    589.,    833.,    962.,    1418.,   1906.,   2426.,
      1138.,   1658.,   2210.,   2794.,   2767.,   3595.,   4471.,   5395.,
      2978.,   3562.,   4178.,   4826.,   5527.,   6451.,   7423.,   8443.,
      4818.,   5466.,   6146.,   6858.,   8287.,   9307.,   10375.,  11491.,
      6658.,   7370.,   8114.,   8890.,   7602.,   8378.,   9186.,   10026.,
      1058.,   1642.,   2258.,   2906.,   3444.,   4676.,   5972.,   7332.,
      5076.,   6436.,   7860.,   9348.,   9734.,   11870.,  14102.,  16430.,
      8756.,   10244.,  11796.,  13412.,  15254.,  17582.,  20006.,  22526.,
      12436.,  14052.,  15732.,  17476.,  20774.,  23294.,  25910.,  28622.,
      16116.,  17860.,  19668.,  21540.,  19284.,  21156.,  23092.,  25092.,
      4498.,   5402.,   6338.,   7306.,   11604.,  13476.,  15412.,  17412.,
      13236.,  15236.,  17300.,  19428.,  23894.,  26990.,  30182.,  33470.,
      19476.,  21604.,  23796.,  26052.,  33254.,  36542.,  39926.,  43406.,
      25716.,  27972.,  30292.,  32676.,  42614.,  46094.,  49670.,  53342.,
      31956.,  34340.,  36788.,  39300.,  35124.,  37636.,  40212.,  42852.,
      9487.,   11083.,  12727.,  14419.,  22886.,  26174.,  29558.,  33038.,
      27254.,  30734.,  34310.,  37982.,  46941.,  52305.,  57813.,  63465.,
      36614.,  40286.,  44054.,  47918.,  60981.,  66633.,  72429.,  78369.,
      45974.,  49838.,  53798.,  57854.,  75021.,  80961.,  87045.,  93273.,
      55334.,  59390.,  63542.,  67790.,  62006.,  66254.,  70598.,  75038.,
      18818.,  20042.,  21298.,  22586.,  40244.,  42756.,  45332.,  47972.,
      44436.,  47076.,  49780.,  52548.,  70694.,  74750.,  78902.,  83150.,
      50676.,  53444.,  56276.,  59172.,  80054.,  84302.,  88646.,  93086.,
      56916.,  59812.,  62772.,  65796.,  89414.,  93854.,  98390.,  103022.,
      63156.,  66180.,  69268.,  72420.,  68884.,  72036.,  75252.,  78532.,
      30967.,  33043.,  35167.,  37339.,  65846.,  70094.,  74438.,  78878.,
      74054.,  78494.,  83030.,  87662.,  117141., 123945., 130893., 137985.,
      83414.,  88046.,  92774.,  97598.,  131181., 138273., 145509., 152889.,
      92774.,  97598.,  102518., 107534., 145221., 152601., 160125., 167793.,
      102134., 107150., 112262., 117470., 112646., 117854., 123158., 128558.,
      33138.,  34682.,  36258.,  37866.,  68884.,  72036.,  75252.,  78532.,
      75636.,  78916.,  82260.,  85668.,  117494., 122510., 127622., 132830.,
      81876.,  85284.,  88756.,  92292.,  126854., 132062., 137366., 142766.,
      88116.,  91652.,  95252.,  98916.,  136214., 141614., 147110., 152702.,
      94356.,  98020.,  101748., 105540., 102644., 106436., 110292., 114212.,
      52447.,  55003.,  57607.,  60259.,  108806., 114014., 119318., 124718.,
      120854., 126254., 131750., 137342., 187341., 195585., 203973., 212505.,
      130214., 135806., 141494., 147278., 201381., 209913., 218589., 227409.,
      139574., 145358., 151238., 157214., 215421., 224241., 233205., 242313.,
      148934., 154910., 160982., 167150., 163286., 169454., 175718., 182078.,
      47458.,  49322.,  51218.,  53146.,  97524.,  101316., 105172., 109092.,
      106836., 110756., 114740., 118788., 164294., 170270., 176342., 182510.,
      113076., 117124., 121236., 125412., 173654., 179822., 186086., 192446.,
      119316., 123492., 127732., 132036., 183014., 189374., 195830., 202382.,
      125556., 129860., 134228., 138660., 136404., 140836., 145332., 149892.,
      70098.,  72282.,  74498.,  76746.,  144084., 148516., 153012., 157572.,
      153396., 157956., 162580., 167268., 236054., 242990., 250022., 257150.,
      162196., 166884., 171636., 176452., 249254., 256382., 263606., 270926.,
      170996., 175812., 180692., 185636., 262454., 269774., 277190., 284702.,
      179796., 184740., 189748., 194820., 190644., 195716., 200852., 206052.,
      19949.,  20961.,  21989.,  23033.,  40562.,  42618.,  44706.,  46826.,
      47138.,  49258.,  51410.,  53594.,  71767.,  74995.,  78271.,  81595.,
      48978.,  51162.,  53378.,  55626.,  74527.,  77851.,  81223.,  84643.,
      50818.,  53066.,  55346.,  57658.,  77287.,  80707.,  84175.,  87691.,
      52658.,  54970.,  57314.,  59690.,  60002.,  62378.,  64786.,  67226.,
      40658.,  42842.,  45058.,  47306.,  82644.,  87076.,  91572.,  96132.,
      97076.,  101636., 106260., 110948., 147734., 154670., 161702., 168830.,
      100756., 105444., 110196., 115012., 153254., 160382., 167606., 174926.,
      104436., 109252., 114132., 119076., 158774., 166094., 173510., 181022.,
      108116., 113060., 118068., 123140., 124084., 129156., 134292., 139492.,
      76098.,  78602.,  81138.,  83706.,  154804., 159876., 165012., 170212.,
      169236., 174436., 179700., 185028., 257894., 265790., 273782., 281870.,
      175476., 180804., 186196., 191652., 267254., 275342., 283526., 291806.,
      181716., 187172., 192692., 198276., 276614., 284894., 293270., 301742.,
      187956., 193540., 199188., 204900., 203924., 209636., 215412., 221252.,
      116887., 120883., 124927., 129019., 237686., 245774., 253958., 262238.,
      261254., 269534., 277910., 286382., 397941., 410505., 423213., 436065.,
      270614., 279086., 287654., 296318., 411981., 424833., 437829., 450969.,
      279974., 288638., 297398., 306254., 426021., 439161., 452445., 465873.,
      289334., 298190., 307142., 316190., 315206., 324254., 333398., 342638.,
      90418.,  93242.,  96098.,  98986.,  183444., 189156., 194932., 200772.,
      200436., 206276., 212180., 218148., 304694., 313550., 322502., 331550.,
      206676., 212644., 218676., 224772., 314054., 323102., 332246., 341486.,
      212916., 219012., 225172., 231396., 323414., 332654., 341990., 351422.,
      219156., 225380., 231668., 238020., 237684., 244036., 250452., 256932.,
      138367., 142843., 147367., 151939., 280646., 289694., 298838., 308078.,
      308054., 317294., 326630., 336062., 468141., 482145., 496293., 510585.,
      317414., 326846., 336374., 345998., 482181., 496473., 510909., 525489.,
      326774., 336398., 346118., 355934., 496221., 510801., 525525., 540393.,
      336134., 345950., 355862., 365870., 365846., 375854., 385958., 396158.,
      104738., 107882., 111058., 114266., 212084., 218436., 224852., 231332.,
      231636., 238116., 244660., 251268., 351494., 361310., 371222., 381230.,
      237876., 244484., 251156., 257892., 360854., 370862., 380966., 391166.,
      244116., 250852., 257652., 264516., 370214., 380414., 390710., 401102.,
      250356., 257220., 264148., 271140., 271444., 278436., 285492., 292612.,
      159847., 164803., 169807., 174859., 323606., 333614., 343718., 353918.,
      354854., 365054., 375350., 385742., 538341., 553785., 569373., 585105.,
      364214., 374606., 385094., 395678., 552381., 568113., 583989., 600009.,
      373574., 384158., 394838., 405614., 566421., 582441., 598605., 614913.,
      382934., 393710., 404582., 415550., 416486., 427454., 438518., 449678.,
      119058., 122522., 126018., 129546., 240724., 247716., 254772., 261892.,
      262836., 269956., 277140., 284388., 398294., 409070., 419942., 430910.,
      269076., 276324., 283636., 291012., 407654., 418622., 429686., 440846.,
      275316., 282692., 290132., 297636., 417014., 428174., 439430., 450782.,
      281556., 289060., 296628., 304260., 305204., 312836., 320532., 328292.,
      173698., 177482., 181298., 185146., 351284., 358916., 366612., 374372.,
      373396., 381156., 388980., 396868., 566054., 577790., 589622., 601550.,
      382196., 390084., 398036., 406052., 579254., 591182., 603206., 615326.,
      390996., 399012., 407092., 415236., 592454., 604574., 616790., 629102.,
      399796., 407940., 416148., 424420., 423444., 431716., 440052., 448452.,
      39749.,  41561.,  43389.,  45233.,  80162.,  83818.,  87506.,  91226.,
      93138.,  96858.,  100610., 104394., 140767., 146395., 152071., 157795.,
      94978.,  98762.,  102578., 106426., 143527., 149251., 155023., 160843.,
      96818.,  100666., 104546., 108458., 146287., 152107., 157975., 163891.,
      98658.,  102570., 106514., 110490., 112402., 116378., 120386., 124426.,
      80258.,  84042.,  87858.,  91706.,  161844., 169476., 177172., 184932.,
      189076., 196836., 204660., 212548., 285734., 297470., 309302., 321230.,
      192756., 200644., 208596., 216612., 291254., 303182., 315206., 327326.,
      196436., 204452., 212532., 220676., 296774., 308894., 321110., 333422.,
      200116., 208260., 216468., 224740., 228884., 237156., 245492., 253892.,
      147698., 151802., 155938., 160106., 298004., 306276., 314612., 323012.,
      325236., 333636., 342100., 350628., 491894., 504590., 517382., 530270.,
      331476., 340004., 348596., 357252., 501254., 514142., 527126., 540206.,
      337716., 346372., 355092., 363876., 510614., 523694., 536870., 550142.,
      343956., 352740., 361588., 370500., 372724., 381636., 390612., 399652.,
      224287., 230683., 237127., 243619., 452486., 465374., 478358., 491438.,
      495254., 508334., 521510., 534782., 748941., 768705., 788613., 808665.,
      504614., 517886., 531254., 544718., 762981., 783033., 803229., 823569.,
      513974., 527438., 540998., 554654., 777021., 797361., 817845., 838473.,
      523334., 536990., 550742., 564590., 568406., 582254., 596198., 610238.,
      162018., 166442., 170898., 175386., 326644., 335556., 344532., 353572.,
      356436., 365476., 374580., 383748., 538694., 552350., 566102., 579950.,
      362676., 371844., 381076., 390372., 548054., 561902., 575846., 589886.,
      368916., 378212., 387572., 396996., 557414., 571454., 585590., 599822.,
      375156., 384580., 394068., 403620., 406484., 416036., 425652., 435332.,
      245767., 252643., 259567., 266539., 495446., 509294., 523238., 537278.,
      542054., 556094., 570230., 584462., 819141., 840345., 861693., 883185.,
      551414., 565646., 579974., 594398., 833181., 854673., 876309., 898089.,
      560774., 575198., 589718., 604334., 847221., 869001., 890925., 912993.,
      570134., 584750., 599462., 614270., 619046., 633854., 648758., 663758.,
      176338., 181082., 185858., 190666., 355284., 364836., 374452., 384132.,
      387636., 397316., 407060., 416868., 585494., 600110., 614822., 629630.,
      393876., 403684., 413556., 423492., 594854., 609662., 624566., 639566.,
      400116., 410052., 420052., 430116., 604214., 619214., 634310., 649502.,
      406356., 416420., 426548., 436740., 440244., 450436., 460692., 471012.,
      267247., 274603., 282007., 289459., 538406., 553214., 568118., 583118.,
      588854., 603854., 618950., 634142., 889341., 911985., 934773., 957705.,
      598214., 613406., 628694., 644078., 903381., 926313., 949389., 972609.,
      607574., 622958., 638438., 654014., 917421., 940641., 964005., 987513.,
      616934., 632510., 648182., 663950., 669686., 685454., 701318., 717278.,
      190658., 195722., 200818., 205946., 383924., 394116., 404372., 414692.,
      418836., 429156., 439540., 449988., 632294., 647870., 663542., 679310.,
      425076., 435524., 446036., 456612., 641654., 657422., 673286., 689246.,
      431316., 441892., 452532., 463236., 651014., 666974., 683030., 699182.,
      437556., 448260., 459028., 469860., 474004., 484836., 495732., 506692.,
      277298., 282682., 288098., 293546., 558484., 569316., 580212., 591172.,
      593396., 604356., 615380., 626468., 896054., 912590., 929222., 945950.,
      602196., 613284., 624436., 635652., 909254., 925982., 942806., 959726.,
      610996., 622212., 633492., 644836., 922454., 939374., 956390., 973502.,
      619796., 631140., 642548., 654020., 656244., 667716., 679252., 690852.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x2) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      5.,      25.,     61.,     113.,    29.,     81.,     149.,    233.,
      82.,     218.,    386.,    586.,    258.,    458.,    690.,    954.,
      487.,    835.,    1231.,   1675.,   818.,    1082.,   1378.,   1706.,
      1250.,   1578.,   1938.,   2330.,   893.,    1073.,   1269.,   1481.,
      1173.,   1385.,   1613.,   1857.,   0.,      0.,      0.,      0.,
      125.,    305.,    501.,    713.,    149.,    361.,    589.,    833.,
      962.,    1418.,   1906.,   2426.,   1138.,   1658.,   2210.,   2794.,
      2767.,   3595.,   4471.,   5395.,   2978.,   3562.,   4178.,   4826.,
      3410.,   4058.,   4738.,   5450.,   2293.,   2633.,   2989.,   3361.,
      2573.,   2945.,   3333.,   3737.,   0.,      0.,      0.,      0.,
      322.,    778.,    1266.,   1786.,   754.,    1274.,   1826.,   2410.,
      2836.,   3940.,   5108.,   6340.,   3956.,   5188.,   6484.,   7844.,
      8054.,   9998.,   12038.,  14174.,  7636.,   8996.,   10420.,  11908.,
      9268.,   10756.,  12308.,  13924.,  5810.,   6586.,   7394.,   8234.,
      6754.,   7594.,   8466.,   9370.,   0.,      0.,      0.,      0.,
      2482.,   3258.,   4066.,   4906.,   2914.,   3754.,   4626.,   5530.,
      8436.,   10180.,  11988.,  13860.,  9556.,   11428.,  13364.,  15364.,
      18374.,  21278.,  24278.,  27374.,  15796.,  17796.,  19860.,  21988.,
      17428.,  19556.,  21748.,  24004.,  10530.,  11626.,  12754.,  13914.,
      11474.,  12634.,  13826.,  15050.,  0.,      0.,      0.,      0.,
      4791.,   6099.,   7455.,   8859.,   6015.,   7419.,   8871.,   10371.,
      15942.,  18846.,  21846.,  24942.,  18774.,  21870.,  25062.,  28350.,
      34221.,  39009.,  43941.,  49017.,  28134.,  31422.,  34806.,  38286.,
      31734.,  35214.,  38790.,  42462.,  18591.,  20379.,  22215.,  24099.,
      20583.,  22467.,  24399.,  26379.,  0.,      0.,      0.,      0.,
      10306.,  11274.,  12274.,  13306.,  11506.,  12538.,  13602.,  14698.,
      25620.,  27748.,  29940.,  32196.,  28276.,  30532.,  32852.,  35236.,
      46454.,  49934.,  53510.,  57182.,  34516.,  36900.,  39348.,  41860.,
      37684.,  40196.,  42772.,  45412.,  20658.,  21946.,  23266.,  24618.,
      22370.,  23722.,  25106.,  26522.,  0.,      0.,      0.,      0.,
      16306.,  17594.,  18914.,  20266.,  17506.,  18858.,  20242.,  21658.,
      38900.,  41668.,  44500.,  47396.,  41556.,  44452.,  47412.,  50436.,
      68294.,  72734.,  77270.,  81902.,  50356.,  53380.,  56468.,  59620.,
      53524.,  56676.,  59892.,  63172.,  29218.,  30826.,  32466.,  34138.,
      30930.,  32602.,  34306.,  36042.,  0.,      0.,      0.,      0.,
      12029.,  12721.,  13429.,  14153.,  12821.,  13545.,  14285.,  15041.,
      27586.,  29066.,  30578.,  32122.,  29298.,  30842.,  32418.,  34026.,
      46927.,  49291.,  51703.,  54163.,  33698.,  35306.,  36946.,  38618.,
      35666.,  37338.,  39042.,  40778.,  19061.,  19913.,  20781.,  21665.,
      20109.,  20993.,  21893.,  22809.,  0.,      0.,      0.,      0.,
      15989.,  16841.,  17709.,  18593.,  16781.,  17665.,  18565.,  19481.,
      36146.,  37946.,  39778.,  41642.,  37858.,  39722.,  41618.,  43546.,
      60727.,  63571.,  66463.,  69403.,  43538.,  45466.,  47426.,  49418.,
      45506.,  47498.,  49522.,  51578.,  24301.,  25313.,  26341.,  27385.,
      25349.,  26393.,  27453.,  28529.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      221.,    529.,    853.,    1193.,   1397.,   1737.,   2093.,   2465.,
      2818.,   3530.,   4274.,   5050.,   5298.,   6074.,   6882.,   7722.,
      8047.,   9259.,   10519.,  11827.,  5858.,   6698.,   7570.,   8474.,
      8594.,   9498.,   10434.,  11402.,  4565.,   5033.,   5517.,   6017.,
      5997.,   6497.,   7013.,   7545.,   0.,      0.,      0.,      0.,
      6101.,   6569.,   7053.,   7553.,   7277.,   7777.,   8293.,   8825.,
      15218.,  16250.,  17314.,  18410.,  17698.,  18794.,  19922.,  21082.,
      27607.,  29299.,  31039.,  32827.,  19538.,  20698.,  21890.,  23114.,
      22274.,  23498.,  24754.,  26042.,  11725.,  12353.,  12997.,  13657.,
      13157.,  13817.,  14493.,  15185.,  0.,      0.,      0.,      0.,
      12274.,  13306.,  14370.,  15466.,  15010.,  16106.,  17234.,  18394.,
      31348.,  33604.,  35924.,  38308.,  37076.,  39460.,  41908.,  44420.,
      57734.,  61406.,  65174.,  69038.,  40756.,  43268.,  45844.,  48484.,
      46996.,  49636.,  52340.,  55108.,  24674.,  26026.,  27410.,  28826.,
      27922.,  29338.,  30786.,  32266.,  0.,      0.,      0.,      0.,
      25954.,  27306.,  28690.,  30106.,  28690.,  30106.,  31554.,  33034.,
      59988.,  62884.,  65844.,  68868.,  65716.,  68740.,  71828.,  74980.,
      102614., 107246., 111974., 116798., 71956.,  75108.,  78324.,  81604.,
      78196.,  81476.,  84820.,  88228.,  40914.,  42586.,  44290.,  46026.,
      44162.,  45898.,  47666.,  49466.,  0.,      0.,      0.,      0.,
      39999.,  42171.,  44391.,  46659.,  44679.,  46947.,  49263.,  51627.,
      93270.,  97902.,  102630., 107454., 103014., 107838., 112758., 117774.,
      160581., 167961., 175485., 183153., 112374., 117390., 122502., 127710.,
      122886., 128094., 133398., 138798., 64167.,  66819.,  69519.,  72267.,
      69615.,  72363.,  75159.,  78003.,  0.,      0.,      0.,      0.,
      33778.,  35322.,  36898.,  38506.,  37282.,  38890.,  40530.,  42202.,
      77172.,  80452.,  83796.,  87204.,  84436.,  87844.,  91316.,  94852.,
      130694., 135902., 141206., 146606., 90676.,  94212.,  97812.,  101476.,
      98452.,  102116., 105844., 109636., 51042.,  52906.,  54802.,  56730.,
      55058.,  56986.,  58946.,  60938.,  0.,      0.,      0.,      0.,
      51298.,  53162.,  55058.,  56986.,  54802.,  56730.,  58690.,  60682.,
      113492., 117412., 121396., 125444., 120756., 124804., 128916., 133092.,
      187094., 193262., 199526., 205886., 129556., 133732., 137972., 142276.,
      137332., 141636., 146004., 150436., 71122.,  73306.,  75522.,  77770.,
      75138.,  77386.,  79666.,  81978.,  0.,      0.,      0.,      0.,
      29525.,  30505.,  31501.,  32513.,  31469.,  32481.,  33509.,  34553.,
      64882.,  66938.,  69026.,  71146.,  68898.,  71018.,  73170.,  75354.,
      106327., 109555., 112831., 116155., 73298.,  75482.,  77698.,  79946.,
      77570.,  79818.,  82098.,  84410.,  40013.,  41153.,  42309.,  43481.,
      42213.,  43385.,  44573.,  45777.,  0.,      0.,      0.,      0.,
      39245.,  40385.,  41541.,  42713.,  41189.,  42361.,  43549.,  44753.,
      84962.,  87338.,  89746.,  92186.,  88978.,  91418.,  93890.,  96394.,
      137407., 141115., 144871., 148675., 94658.,  97162.,  99698.,  102266.,
      98930.,  101498., 104098., 106730., 51013.,  52313.,  53629.,  54961.,
      53213.,  54545.,  55893.,  57257.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      437.,    1033.,   1645.,   2273.,   2765.,   3393.,   4037.,   4697.,
      5554.,   6842.,   8162.,   9514.,   10338.,  11690.,  13074.,  14490.,
      15607.,  17683.,  19807.,  21979.,  10898.,  12314.,  13762.,  15242.,
      15938.,  17418.,  18930.,  20474.,  8237.,   8993.,   9765.,   10553.,
      10821.,  11609.,  12413.,  13233.,  0.,      0.,      0.,      0.,
      12077.,  12833.,  13605.,  14393.,  14405.,  15193.,  15997.,  16817.,
      29474.,  31082.,  32722.,  34394.,  34258.,  35930.,  37634.,  39370.,
      52447.,  55003.,  57607.,  60259.,  36098.,  37834.,  39602.,  41402.,
      41138.,  42938.,  44770.,  46634.,  21157.,  22073.,  23005.,  23953.,
      23741.,  24689.,  25653.,  26633.,  0.,      0.,      0.,      0.,
      24226.,  25834.,  27474.,  29146.,  29266.,  30938.,  32642.,  34378.,
      59860.,  63268.,  66740.,  70276.,  70196.,  73732.,  77332.,  80996.,
      107414., 112814., 118310., 123902., 73876.,  77540.,  81268.,  85060.,
      84724.,  88516.,  92372.,  96292.,  43538.,  45466.,  47426.,  49418.,
      49090.,  51082.,  53106.,  55162.,  0.,      0.,      0.,      0.,
      49426.,  51354.,  53314.,  55306.,  54466.,  56458.,  58482.,  60538.,
      111540., 115588., 119700., 123876., 121876., 126052., 130292., 134596.,
      186854., 193214., 199670., 206222., 128116., 132420., 136788., 141220.,
      138964., 143396., 147892., 152452., 71298.,  73546.,  75826.,  78138.,
      76850.,  79162.,  81506.,  83882.,  0.,      0.,      0.,      0.,
      75207.,  78243.,  81327.,  84459.,  83343.,  86475.,  89655.,  92883.,
      170598., 176958., 183414., 189966., 187254., 193806., 200454., 207198.,
      286941., 296913., 307029., 317289., 196614., 203358., 210198., 217134.,
      214038., 220974., 228006., 235134., 109743., 113259., 116823., 120435.,
      118647., 122259., 125919., 129627., 0.,      0.,      0.,      0.,
      57250.,  59370.,  61522.,  63706.,  63058.,  65242.,  67458.,  69706.,
      128724., 133156., 137652., 142212., 140596., 145156., 149780., 154468.,
      214934., 221870., 228902., 236030., 146836., 151524., 156276., 161092.,
      159220., 164036., 168916., 173860., 81426.,  83866.,  86338.,  88842.,
      87746.,  90250.,  92786.,  95354.,  0.,      0.,      0.,      0.,
      86290.,  88730.,  91202.,  93706.,  92098.,  94602.,  97138.,  99706.,
      188084., 193156., 198292., 203492., 199956., 205156., 210420., 215748.,
      305894., 313790., 321782., 329870., 208756., 214084., 219476., 224932.,
      221140., 226596., 232116., 237700., 113026., 115786., 118578., 121402.,
      119346., 122170., 125026., 127914., 0.,      0.,      0.,      0.,
      47021.,  48289.,  49573.,  50873.,  50117.,  51417.,  52733.,  54065.,
      102178., 104810., 107474., 110170., 108498., 111194., 113922., 116682.,
      165727., 169819., 173959., 178147., 112898., 115658., 118450., 121274.,
      119474., 122298., 125154., 128042., 60965.,  62393.,  63837.,  65297.,
      64317.,  65777.,  67253.,  68745.,  0.,      0.,      0.,      0.,
      62501.,  63929.,  65373.,  66833.,  65597.,  67057.,  68533.,  70025.,
      133778., 136730., 139714., 142730., 140098., 143114., 146162., 149242.,
      214087., 218659., 223279., 227947., 145778., 148858., 151970., 155114.,
      152354., 155498., 158674., 161882., 77725.,  79313.,  80917.,  82537.,
      81077.,  82697.,  84333.,  85985.,  0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.,
      0.,      0.,      0.,      0.,      0.,      0.,      0.,      0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 2;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, SAME3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      990.,     2670.,    4478.,    6414.,    7260.,    10876.,   14748.,
      18876.,   8604.,    12732.,   17116.,   21756.,   21338.,   27914.,
      34874.,   42218.,   23260.,   27900.,   32796.,   37948.,   43322.,
      50666.,   58394.,   66506.,   37916.,   43068.,   48476.,   54140.,
      65306.,   73418.,   81914.,   90794.,   52572.,   58236.,   64156.,
      70332.,   60060.,   66236.,   72668.,   79356.,   7900.,    12540.,
      17436.,   22588.,   26360.,   36152.,   46456.,   57272.,   39288.,
      50104.,   61432.,   73272.,   75796.,   92788.,   110548.,  129076.,
      68600.,   80440.,   92792.,   105656.,  119764.,  138292.,  157588.,
      177652.,  97912.,   110776.,  124152.,  138040.,  163732.,  183796.,
      204628.,  226228.,  127224.,  141112.,  155512.,  170424.,  152440.,
      167352.,  182776.,  198712.,  35100.,   42300.,   49756.,   57468.,
      91000.,   105912.,  121336.,  137272.,  103928.,  119864.,  136312.,
      153272.,  188116.,  212788.,  238228.,  264436.,  153720.,  170680.,
      188152.,  206136.,  262804.,  289012.,  315988.,  343732.,  203512.,
      221496.,  239992.,  259000.,  337492.,  365236.,  393748.,  423028.,
      253304.,  272312.,  291832.,  311864.,  278520.,  298552.,  319096.,
      340152.,  74330.,   87050.,   100154.,  113642.,  179860.,  206068.,
      233044.,  260788.,  214612.,  242356.,  270868.,  300148.,  370254.,
      413022.,  456942.,  502014.,  289300.,  318580.,  348628.,  379444.,
      482286.,  527358.,  573582.,  620958.,  363988.,  394804.,  426388.,
      458740.,  594318.,  641694.,  690222.,  739902.,  438676.,  471028.,
      504148.,  538036.,  491860.,  525748.,  560404.,  595828.,  149340.,
      159100.,  169116.,  179388.,  319480.,  339512.,  360056.,  381112.,
      352888.,  373944.,  395512.,  417592.,  561556.,  593908.,  627028.,
      660916.,  402680.,  424760.,  447352.,  470456.,  636244.,  670132.,
      704788.,  740212.,  452472.,  475576.,  499192.,  523320.,  710932.,
      746356.,  782548.,  819508.,  502264.,  526392.,  551032.,  576184.,
      547960.,  573112.,  598776.,  624952.,  245690.,  262250.,  279194.,
      296522.,  522580.,  556468.,  591124.,  626548.,  588052.,  623476.,
      659668.,  696628.,  930414.,  984702.,  1040142., 1096734., 662740.,
      699700.,  737428.,  775924.,  1042446., 1099038., 1156782., 1215678.,
      737428.,  775924.,  815188.,  855220.,  1154478., 1213374., 1273422.,
      1334622., 812116.,  852148.,  892948.,  934516.,  896020.,  937588.,
      979924.,  1023028., 263580.,  275900.,  288476.,  301308.,  547960.,
      573112.,  598776.,  624952.,  601848.,  628024.,  654712.,  681912.,
      934996.,  975028.,  1015828., 1057396., 651640.,  678840.,  706552.,
      734776.,  1009684., 1051252., 1093588., 1136692., 701432.,  729656.,
      758392.,  787640.,  1084372., 1127476., 1171348., 1215988., 751224.,
      780472.,  810232.,  840504.,  817400.,  847672.,  878456.,  909752.,
      417050.,  437450.,  458234.,  479402.,  865300.,  906868.,  949204.,
      992308.,  961492.,  1004596., 1048468., 1093108., 1490574., 1556382.,
      1623342., 1691454., 1036180., 1080820., 1126228., 1172404., 1602606.,
      1670718., 1739982., 1810398., 1110868., 1157044., 1203988., 1251700.,
      1714638., 1785054., 1856622., 1929342., 1185556., 1233268., 1281748.,
      1330996., 1300180., 1349428., 1399444., 1450228., 377820.,  392700.,
      407836.,  423228.,  776440.,  806712.,  837496.,  868792.,  850808.,
      882104.,  913912.,  946232.,  1308436., 1356148., 1404628., 1453876.,
      900600.,  932920.,  965752.,  999096.,  1383124., 1432372., 1482388.,
      1533172., 950392.,  983736.,  1017592., 1051960., 1457812., 1508596.,
      1560148., 1612468., 1000184., 1034552., 1069432., 1104824., 1086840.,
      1122232., 1158136., 1194552., 558620.,  576060.,  593756.,  611708.,
      1148280., 1183672., 1219576., 1255992., 1222648., 1259064., 1295992.,
      1333432., 1881556., 1936948., 1993108., 2050036., 1292920., 1330360.,
      1368312., 1406776., 1986964., 2043892., 2101588., 2160052., 1363192.,
      1401656., 1440632., 1480120., 2092372., 2150836., 2210068., 2270068.,
      1433464., 1472952., 1512952., 1553464., 1520120., 1560632., 1601656.,
      1643192., 158590.,  166670.,  174878.,  183214.,  322460.,  338876.,
      355548.,  372476.,  375004.,  391932.,  409116.,  426556.,  570938.,
      596714.,  622874.,  649418.,  389660.,  407100.,  424796.,  442748.,
      592922.,  619466.,  646394.,  673706.,  404316.,  422268.,  440476.,
      458940.,  614906.,  642218.,  669914.,  697994.,  418972.,  437436.,
      456156.,  475132.,  477660.,  496636.,  515868.,  535356.,  323100.,
      340540.,  358236.,  376188.,  656760.,  692152.,  728056.,  764472.,
      772088.,  808504.,  845432.,  882872.,  1174996., 1230388., 1286548.,
      1343476., 801400.,  838840.,  876792.,  915256.,  1218964., 1275892.,
      1333588., 1392052., 830712.,  869176.,  908152.,  947640.,  1262932.,
      1321396., 1380628., 1440628., 860024.,  899512.,  939512.,  980024.,
      987640.,  1028152., 1069176., 1110712., 606300.,  626300.,  646556.,
      667068.,  1233400., 1273912., 1314936., 1356472., 1348728., 1390264.,
      1432312., 1474872., 2055316., 2118388., 2182228., 2246836., 1398520.,
      1441080., 1484152., 1527736., 2130004., 2194612., 2259988., 2326132.,
      1448312., 1491896., 1535992., 1580600., 2204692., 2270836., 2337748.,
      2405428., 1498104., 1542712., 1587832., 1633464., 1625720., 1671352.,
      1717496., 1764152., 931130.,  963050.,  995354.,  1028042., 1893460.,
      1958068., 2023444., 2089588., 2081812., 2147956., 2214868., 2282548.,
      3171054., 3271422., 3372942., 3475614., 2156500., 2224180., 2292628.,
      2361844., 3283086., 3385758., 3489582., 3594558., 2231188., 2300404.,
      2370388., 2441140., 3395118., 3500094., 3606222., 3713502., 2305876.,
      2376628., 2448148., 2520436., 2512660., 2584948., 2658004., 2731828.,
      720540.,  743100.,  765916.,  788988.,  1461880., 1507512., 1553656.,
      1600312., 1597688., 1644344., 1691512., 1739192., 2428756., 2499508.,
      2571028., 2643316., 1647480., 1695160., 1743352., 1792056., 2503444.,
      2575732., 2648788., 2722612., 1697272., 1745976., 1795192., 1844920.,
      2578132., 2651956., 2726548., 2801908., 1747064., 1796792., 1847032.,
      1897784., 1895160., 1945912., 1997176., 2048952., 1102490., 1138250.,
      1174394., 1210922., 2236180., 2308468., 2381524., 2455348., 2455252.,
      2529076., 2603668., 2679028., 3731214., 3843102., 3956142., 4070334.,
      2529940., 2605300., 2681428., 2758324., 3843246., 3957438., 4072782.,
      4189278., 2604628., 2681524., 2759188., 2837620., 3955278., 4071774.,
      4189422., 4308222., 2679316., 2757748., 2836948., 2916916., 2916820.,
      2996788., 3077524., 3159028., 834780.,  859900.,  885276.,  910908.,
      1690360., 1741112., 1792376., 1844152., 1846648., 1898424., 1950712.,
      2003512., 2802196., 2880628., 2959828., 3039796., 1896440., 1949240.,
      2002552., 2056376., 2876884., 2956852., 3037588., 3119092., 1946232.,
      2000056., 2054392., 2109240., 2951572., 3033076., 3115348., 3198388.,
      1996024., 2050872., 2106232., 2162104., 2164600., 2220472., 2276856.,
      2333752., 1273850., 1313450., 1353434., 1393802., 2578900., 2658868.,
      2739604., 2821108., 2828692., 2910196., 2992468., 3075508., 4291374.,
      4414782., 4539342., 4665054., 2903380., 2986420., 3070228., 3154804.,
      4403406., 4529118., 4655982., 4783998., 2978068., 3062644., 3147988.,
      3234100., 4515438., 4643454., 4772622., 4902942., 3052756., 3138868.,
      3225748., 3313396., 3320980., 3408628., 3497044., 3586228., 949020.,
      976700.,  1004636., 1032828., 1918840., 1974712., 2031096., 2087992.,
      2095608., 2152504., 2209912., 2267832., 3175636., 3261748., 3348628.,
      3436276., 2145400., 2203320., 2261752., 2320696., 3250324., 3337972.,
      3426388., 3515572., 2195192., 2254136., 2313592., 2373560., 3325012.,
      3414196., 3504148., 3594868., 2244984., 2304952., 2365432., 2426424.,
      2434040., 2495032., 2556536., 2618552., 1385820., 1416060., 1446556.,
      1477308., 2802680., 2863672., 2925176., 2987192., 2979448., 3041464.,
      3103992., 3167032., 4516756., 4610548., 4705108., 4800436., 3049720.,
      3112760., 3176312., 3240376., 4622164., 4717492., 4813588., 4910452.,
      3119992., 3184056., 3248632., 3313720., 4727572., 4824436., 4922068.,
      5020468., 3190264., 3255352., 3320952., 3387064., 3379320., 3445432.,
      3512056., 3579192., 316190.,  330670.,  345278.,  360014.,  637660.,
      666876.,  696348.,  726076.,  741404.,  771132.,  801116.,  831356.,
      1120538., 1165514., 1210874., 1256618., 756060.,  786300.,  816796.,
      847548.,  1142522., 1188266., 1234394., 1280906., 770716.,  801468.,
      832476.,  863740.,  1164506., 1211018., 1257914., 1305194., 785372.,
      816636.,  848156.,  879932.,  895260.,  927036.,  959068.,  991356.,
      638300.,  668540.,  699036.,  729788.,  1287160., 1348152., 1409656.,
      1471672., 1504888., 1566904., 1629432., 1692472., 2274196., 2367988.,
      2462548., 2557876., 1534200., 1597240., 1660792., 1724856., 2318164.,
      2413492., 2509588., 2606452., 1563512., 1627576., 1692152., 1757240.,
      2362132., 2458996., 2556628., 2655028., 1592824., 1657912., 1723512.,
      1789624., 1822840., 1888952., 1955576., 2022712., 1177500., 1210300.,
      1243356., 1276668., 2375800., 2441912., 2508536., 2575672., 2593528.,
      2660664., 2728312., 2796472., 3922516., 4023988., 4126228., 4229236.,
      2643320., 2711480., 2780152., 2849336., 3997204., 4100212., 4203988.,
      4308532., 2693112., 2762296., 2831992., 2902200., 4071892., 4176436.,
      4281748., 4387828., 2742904., 2813112., 2883832., 2955064., 2972920.,
      3044152., 3115896., 3188152., 1787930., 1839050., 1890554., 1942442.,
      3607060., 3710068., 3813844., 3918388., 3949012., 4053556., 4158868.,
      4264948., 5971854., 6129822., 6288942., 6449214., 4023700., 4129780.,
      4236628., 4344244., 6083886., 6244158., 6405582., 6568158., 4098388.,
      4206004., 4314388., 4423540., 6195918., 6358494., 6522222., 6687102.,
      4173076., 4282228., 4392148., 4502836., 4533460., 4644148., 4755604.,
      4867828., 1291740., 1327100., 1362716., 1398588., 2604280., 2675512.,
      2747256., 2819512., 2842488., 2914744., 2987512., 3060792., 4295956.,
      4405108., 4515028., 4625716., 2892280., 2965560., 3039352., 3113656.,
      4370644., 4481332., 4592788., 4705012., 2942072., 3016376., 3091192.,
      3166520., 4445332., 4557556., 4670548., 4784308., 2991864., 3067192.,
      3143032., 3219384., 3242360., 3318712., 3395576., 3472952., 1959290.,
      2014250., 2069594., 2125322., 3949780., 4060468., 4171924., 4284148.,
      4322452., 4434676., 4547668., 4661428., 6532014., 6701502., 6872142.,
      7043934., 4397140., 4510900., 4625428., 4740724., 6644046., 6815838.,
      6988782., 7162878., 4471828., 4587124., 4703188., 4820020., 6756078.,
      6930174., 7105422., 7281822., 4546516., 4663348., 4780948., 4899316.,
      4937620., 5055988., 5175124., 5295028., 1405980., 1443900., 1482076.,
      1520508., 2832760., 2909112., 2985976., 3063352., 3091448., 3168824.,
      3246712., 3325112., 4669396., 4786228., 4903828., 5022196., 3141240.,
      3219640., 3298552., 3377976., 4744084., 4862452., 4981588., 5101492.,
      3191032., 3270456., 3350392., 3430840., 4818772., 4938676., 5059348.,
      5180788., 3240824., 3321272., 3402232., 3483704., 3511800., 3593272.,
      3675256., 3757752., 2130650., 2189450., 2248634., 2308202., 4292500.,
      4410868., 4530004., 4649908., 4695892., 4815796., 4936468., 5057908.,
      7092174., 7273182., 7455342., 7638654., 4770580., 4892020., 5014228.,
      5137204., 7204206., 7387518., 7571982., 7757598., 4845268., 4968244.,
      5091988., 5216500., 7316238., 7501854., 7688622., 7876542., 4919956.,
      5044468., 5169748., 5295796., 5341780., 5467828., 5594644., 5722228.,
      1520220., 1560700., 1601436., 1642428., 3061240., 3142712., 3224696.,
      3307192., 3340408., 3422904., 3505912., 3589432., 5042836., 5167348.,
      5292628., 5418676., 3390200., 3473720., 3557752., 3642296., 5117524.,
      5243572., 5370388., 5497972., 3439992., 3524536., 3609592., 3695160.,
      5192212., 5319796., 5448148., 5577268., 3489784., 3575352., 3661432.,
      3748024., 3781240., 3867832., 3954936., 4042552., 2213020., 2256060.,
      2299356., 2342908., 4457080., 4543672., 4630776., 4718392., 4736248.,
      4823864., 4911992., 5000632., 7151956., 7284148., 7417108., 7550836.,
      4806520., 4895160., 4984312., 5073976., 7257364., 7391092., 7525588.,
      7660852., 4876792., 4966456., 5056632., 5147320., 7362772., 7498036.,
      7634068., 7770868., 4947064., 5037752., 5128952., 5220664., 5238520.,
      5330232., 5422456., 5515192.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::SAME;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
TYPED_TEST(InputBackpropWindow5Stride2, VALID3x10x10x4x4) {
  using DataType = typename TestFixture::DataType;
  const std::vector<DataType> exp_out = {
      30.,      174.,     446.,     846.,     190.,     590.,     1118.,
      1774.,    540.,     1596.,    2908.,    4476.,    1884.,    3452.,
      5276.,    7356.,    3578.,    6314.,    9434.,    12938.,   6300.,
      8380.,    10716.,   13308.,   9692.,    12284.,   15132.,   18236.,
      6974.,    8398.,    9950.,    11630.,   9182.,    10862.,   12670.,
      14606.,   0.,       0.,       0.,       0.,       830.,     2254.,
      3806.,    5486.,    990.,     2670.,    4478.,    6414.,    7260.,
      10876.,   14748.,   18876.,   8604.,    12732.,   17116.,   21756.,
      21338.,   27914.,   34874.,   42218.,   23260.,   27900.,   32796.,
      37948.,   26652.,   31804.,   37212.,   42876.,   18014.,   20718.,
      23550.,   26510.,   20222.,   23182.,   26270.,   29486.,   0.,
      0.,       0.,       0.,       2140.,    5756.,    9628.,    13756.,
      5532.,    9660.,    14044.,   18684.,   21624.,   30392.,   39672.,
      49464.,   30456.,   40248.,   50552.,   61368.,   62548.,   78004.,
      94228.,   111220.,  59768.,   70584.,   81912.,   93752.,   72696.,
      84536.,   96888.,   109752.,  45724.,   51900.,   58332.,   65020.,
      53212.,   59900.,   66844.,   74044.,   0.,       0.,       0.,
      0.,       19100.,   25276.,   31708.,   38396.,   22492.,   29180.,
      36124.,   43324.,   65784.,   79672.,   94072.,   108984.,  74616.,
      89528.,   104952.,  120888.,  144148.,  167284.,  191188.,  215860.,
      124408.,  140344.,  156792.,  173752.,  137336.,  154296.,  171768.,
      189752.,  83164.,   91900.,   100892.,  110140.,  90652.,   99900.,
      109404.,  119164.,  0.,       0.,       0.,       0.,       37050.,
      47466.,   58266.,   69450.,   46746.,   57930.,   69498.,   81450.,
      124692.,  147828.,  171732.,  196404.,  147156.,  171828.,  197268.,
      223476.,  269070.,  307230.,  346542.,  387006.,  221844.,  248052.,
      275028.,  302772.,  250452.,  278196.,  306708.,  335988.,  146970.,
      161226.,  175866.,  190890.,  162810.,  177834.,  193242.,  209034.,
      0.,       0.,       0.,       0.,       81500.,   89212.,   97180.,
      105404.,  91036.,   99260.,   107740.,  116476.,  202872.,  219832.,
      237304.,  255288.,  223992.,  241976.,  260472.,  279480.,  368212.,
      395956.,  424468.,  453748.,  273784.,  292792.,  312312.,  332344.,
      299000.,  319032.,  339576.,  360632.,  163996.,  174268.,  184796.,
      195580.,  177628.,  188412.,  199452.,  210748.,  0.,       0.,
      0.,       0.,       129180.,  139452.,  149980.,  160764.,  138716.,
      149500.,  160540.,  171836.,  308472.,  330552.,  353144.,  376248.,
      329592.,  352696.,  376312.,  400440.,  541972.,  577396.,  613588.,
      650548.,  399864.,  423992.,  448632.,  473784.,  425080.,  450232.,
      475896.,  502072.,  232156.,  244988.,  258076.,  271420.,  245788.,
      259132.,  272732.,  286588.,  0.,       0.,       0.,       0.,
      95550.,   101070.,  106718.,  112494.,  101854.,  107630.,  113534.,
      119566.,  219228.,  231036.,  243100.,  255420.,  232860.,  245180.,
      257756.,  270588.,  373082.,  391946.,  411194.,  430826.,  267996.,
      280828.,  293916.,  307260.,  283676.,  297020.,  310620.,  324476.,
      151646.,  158446.,  165374.,  172430.,  159998.,  167054.,  174238.,
      181550.,  0.,       0.,       0.,       0.,       127070.,  133870.,
      140798.,  147854.,  133374.,  140430.,  147614.,  154926.,  287388.,
      301756.,  316380.,  331260.,  301020.,  315900.,  331036.,  346428.,
      483002.,  505706.,  528794.,  552266.,  346396.,  361788.,  377436.,
      393340.,  362076.,  377980.,  394140.,  410556.,  193406.,  201486.,
      209694.,  218030.,  201758.,  210094.,  218558.,  227150.,  0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       1470.,    3918.,    6494.,    9198.,    10846.,   13550.,
      16382.,   19342.,   21852.,   27516.,   33436.,   39612.,   41628.,
      47804.,   54236.,   60924.,   63194.,   72842.,   82874.,   93290.,
      46044.,   52732.,   59676.,   66876.,   67868.,   75068.,   82524.,
      90236.,   36062.,   39790.,   43646.,   47630.,   47486.,   51470.,
      55582.,   59822.,   0.,       0.,       0.,       0.,       48350.,
      52078.,   55934.,   59918.,   57726.,   61710.,   65822.,   70062.,
      120732.,  128956.,  137436.,  146172.,  140508.,  149244.,  158236.,
      167484.,  219194.,  232682.,  246554.,  260810.,  155164.,  164412.,
      173916.,  183676.,  176988.,  186748.,  196764.,  207036.,  93182.,
      98190.,   103326.,  108590.,  104606.,  109870.,  115262.,  120782.,
      0.,       0.,       0.,       0.,       97180.,   105404.,  113884.,
      122620.,  119004.,  127740.,  136732.,  145980.,  248568.,  266552.,
      285048.,  304056.,  294264.,  313272.,  332792.,  352824.,  458260.,
      487540.,  517588.,  548404.,  323576.,  343608.,  364152.,  385208.,
      373368.,  394424.,  415992.,  438072.,  196060.,  206844.,  217884.,
      229180.,  221980.,  233276.,  244828.,  256636.,  0.,       0.,
      0.,       0.,       206300.,  217084.,  228124.,  239420.,  228124.,
      239420.,  250972.,  262780.,  477048.,  500152.,  523768.,  547896.,
      522744.,  546872.,  571512.,  596664.,  816340.,  853300.,  891028.,
      929524.,  572536.,  597688.,  623352.,  649528.,  622328.,  648504.,
      675192.,  702392.,  325660.,  339004.,  352604.,  366460.,  351580.,
      365436.,  379548.,  393916.,  0.,       0.,       0.,       0.,
      317850.,  335178.,  352890.,  370986.,  355194.,  373290.,  391770.,
      410634.,  741588.,  778548.,  816276.,  854772.,  819348.,  857844.,
      897108.,  937140.,  1277358., 1336254., 1396302., 1457502., 894036.,
      934068.,  974868.,  1016436., 977940.,  1019508., 1061844., 1104948.,
      510714.,  531882.,  553434.,  575370.,  554202.,  576138.,  598458.,
      621162.,  0.,       0.,       0.,       0.,       268700.,  281020.,
      293596.,  306428.,  296668.,  309500.,  322588.,  335932.,  614136.,
      640312.,  667000.,  694200.,  672120.,  699320.,  727032.,  755256.,
      1040404., 1081972., 1124308., 1167412., 721912.,  750136.,  778872.,
      808120.,  783992.,  813240.,  843000.,  873272.,  406492.,  421372.,
      436508.,  451900.,  438556.,  453948.,  469596.,  485500.,  0.,
      0.,       0.,       0.,       408540.,  423420.,  438556.,  453948.,
      436508.,  451900.,  467548.,  483452.,  904056.,  935352.,  967160.,
      999480.,  962040.,  994360.,  1027192., 1060536., 1490644., 1539892.,
      1589908., 1640692., 1032312., 1065656., 1099512., 1133880., 1094392.,
      1128760., 1163640., 1199032., 566812.,  584252.,  601948.,  619900.,
      598876.,  616828.,  635036.,  653500.,  0.,       0.,       0.,
      0.,       235230.,  243054.,  251006.,  259086.,  250750.,  258830.,
      267038.,  275374.,  517020.,  533436.,  550108.,  567036.,  549084.,
      566012.,  583196.,  600636.,  847418.,  873194.,  899354.,  925898.,
      584220.,  601660.,  619356.,  637308.,  618332.,  636284.,  654492.,
      672956.,  318974.,  328078.,  337310.,  346670.,  336542.,  345902.,
      355390.,  365006.,  0.,       0.,       0.,       0.,       312830.,
      321934.,  331166.,  340526.,  328350.,  337710.,  347198.,  356814.,
      677340.,  696316.,  715548.,  735036.,  709404.,  728892.,  748636.,
      768636.,  1095578., 1125194., 1155194., 1185578., 754780.,  774780.,
      795036.,  815548.,  788892.,  809404.,  830172.,  851196.,  406814.,
      417198.,  427710.,  438350.,  424382.,  435022.,  445790.,  456686.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       2910.,    7662.,    12542.,   17550.,   21502.,
      26510.,   31646.,   36910.,   43164.,   53436.,   63964.,   74748.,
      81372.,   92156.,   103196.,  114492.,  122810.,  139370.,  156314.,
      173642.,  85788.,   97084.,   108636.,  120444.,  126044.,  137852.,
      149916.,  162236.,  65150.,   71182.,   77342.,   83630.,   85790.,
      92078.,   98494.,   105038.,  0.,       0.,       0.,       0.,
      95870.,   101902.,  108062.,  114350.,  114462.,  120750.,  127166.,
      133710.,  234204.,  247036.,  260124.,  273468.,  272412.,  285756.,
      299356.,  313212.,  417050.,  437450.,  458234.,  479402.,  287068.,
      300924.,  315036.,  329404.,  327324.,  341692.,  356316.,  371196.,
      168350.,  175662.,  183102.,  190670.,  188990.,  196558.,  204254.,
      212078.,  0.,       0.,       0.,       0.,       192220.,  205052.,
      218140.,  231484.,  232476.,  245820.,  259420.,  273276.,  475512.,
      502712.,  530424.,  558648.,  558072.,  586296.,  615032.,  644280.,
      853972.,  897076.,  940948.,  985588.,  587384.,  616632.,  646392.,
      676664.,  674040.,  704312.,  735096.,  766392.,  346396.,  361788.,
      377436.,  393340.,  390748.,  406652.,  422812.,  439228.,  0.,
      0.,       0.,       0.,       393500.,  408892.,  424540.,  440444.,
      433756.,  449660.,  465820.,  482236.,  888312.,  920632.,  953464.,
      986808.,  970872.,  1004216., 1038072., 1072440., 1488532., 1539316.,
      1590868., 1643188., 1020664., 1055032., 1089912., 1125304., 1107320.,
      1142712., 1178616., 1215032., 568156.,  586108.,  604316.,  622780.,
      612508.,  630972.,  649692.,  668668.,  0.,       0.,       0.,
      0.,       598650.,  622890.,  647514.,  672522.,  663642.,  688650.,
      714042.,  739818.,  1358484., 1409268., 1460820., 1513140., 1491540.,
      1543860., 1596948., 1650804., 2285646., 2365278., 2446062., 2527998.,
      1566228., 1620084., 1674708., 1730100., 1705428., 1760820., 1816980.,
      1873908., 874458.,  902538.,  931002.,  959850.,  945594.,  974442.,
      1003674., 1033290., 0.,       0.,       0.,       0.,       455900.,
      472828.,  490012.,  507452.,  502300.,  519740.,  537436.,  555388.,
      1025400., 1060792., 1096696., 1133112., 1120248., 1156664., 1193592.,
      1231032., 1712596., 1767988., 1824148., 1881076., 1170040., 1207480.,
      1245432., 1283896., 1268984., 1307448., 1346424., 1385912., 648988.,
      668476.,  688220.,  708220.,  699484.,  719484.,  739740.,  760252.,
      0.,       0.,       0.,       0.,       687900.,  707388.,  727132.,
      747132.,  734300.,  754300.,  774556.,  795068.,  1499640., 1540152.,
      1581176., 1622712., 1594488., 1636024., 1678072., 1720632., 2439316.,
      2502388., 2566228., 2630836., 1664760., 1707320., 1750392., 1793976.,
      1763704., 1807288., 1851384., 1895992., 901468.,  923516.,  945820.,
      968380.,  951964.,  974524.,  997340.,  1020412., 0.,       0.,
      0.,       0.,       374910.,  385038.,  395294.,  405678.,  399646.,
      410030.,  420542.,  431182.,  814812.,  835836.,  857116.,  878652.,
      865308.,  886844.,  908636.,  930684.,  1321754., 1354442., 1387514.,
      1420970., 900444.,  922492.,  944796.,  967356.,  952988.,  975548.,
      998364.,  1021436., 486302.,  497710.,  509246.,  520910.,  513086.,
      524750.,  536542.,  548462.,  0.,       0.,       0.,       0.,
      498590.,  509998.,  521534.,  533198.,  523326.,  534990.,  546782.,
      558702.,  1067292., 1090876., 1114716., 1138812., 1117788., 1141884.,
      1166236., 1190844., 1708154., 1744682., 1781594., 1818890., 1163164.,
      1187772., 1212636., 1237756., 1215708., 1240828., 1266204., 1291836.,
      620222.,  632910.,  645726.,  658670.,  647006.,  659950.,  673022.,
      686222.,  0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.,       0.,       0.,       0.,       0.,
      0.,       0.,       0.};
  const std::array<int, 4> in_shape = {{3, 10, 10, 4}};
  const int multiplier = 4;
  const auto padding = sycldnn::PaddingMode::VALID;
  const DataType max_input_val = 2048.0;
  this->run_input_backprop_test(exp_out, in_shape, multiplier, padding,
                                max_input_val);
}
